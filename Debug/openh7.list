
openh7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029648  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f00  080298e8  080298e8  000398e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000026a  0802d7e8  0802d7e8  0003d7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000000c  0802da54  0802da54  0003da54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00016e40  0802da60  0802da60  0003da60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000014  080448a0  080448a0  000548a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM          00000008  080448b4  080448b4  000548b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .init_array   00000014  080448bc  080448bc  000548bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  080448d0  080448d0  000548d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000254  20000000  080448d8  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005830  20000254  08044b2c  00060254  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005a84  08044b2c  00065a84  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00060254  2**0
                  CONTENTS, READONLY
 14 .debug_info   000afd26  00000000  00000000  00060282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000137be  00000000  00000000  0010ffa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000044e0  00000000  00000000  00123768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003ff8  00000000  00000000  00127c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00049d5c  00000000  00000000  0012bc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004eaa7  00000000  00000000  0017599c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001aacf1  00000000  00000000  001c4443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000cf  00000000  00000000  0036f134  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00012c70  00000000  00000000  0036f204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000254 	.word	0x20000254
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080298d0 	.word	0x080298d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000258 	.word	0x20000258
 80002dc:	080298d0 	.word	0x080298d0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08e      	sub	sp, #56	; 0x38
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]
 800069a:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
 80006aa:	615a      	str	r2, [r3, #20]
 80006ac:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80006ae:	4b37      	ldr	r3, [pc, #220]	; (800078c <MX_ADC3_Init+0x108>)
 80006b0:	4a37      	ldr	r2, [pc, #220]	; (8000790 <MX_ADC3_Init+0x10c>)
 80006b2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006b4:	4b35      	ldr	r3, [pc, #212]	; (800078c <MX_ADC3_Init+0x108>)
 80006b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80006ba:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <MX_ADC3_Init+0x108>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006c2:	4b32      	ldr	r3, [pc, #200]	; (800078c <MX_ADC3_Init+0x108>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <MX_ADC3_Init+0x108>)
 80006ca:	2204      	movs	r2, #4
 80006cc:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <MX_ADC3_Init+0x108>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006d4:	4b2d      	ldr	r3, [pc, #180]	; (800078c <MX_ADC3_Init+0x108>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80006da:	4b2c      	ldr	r3, [pc, #176]	; (800078c <MX_ADC3_Init+0x108>)
 80006dc:	2201      	movs	r2, #1
 80006de:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006e0:	4b2a      	ldr	r3, [pc, #168]	; (800078c <MX_ADC3_Init+0x108>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <MX_ADC3_Init+0x108>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <MX_ADC3_Init+0x108>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <MX_ADC3_Init+0x108>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <MX_ADC3_Init+0x108>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006fe:	4b23      	ldr	r3, [pc, #140]	; (800078c <MX_ADC3_Init+0x108>)
 8000700:	2200      	movs	r2, #0
 8000702:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000704:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_ADC3_Init+0x108>)
 8000706:	2200      	movs	r2, #0
 8000708:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800070c:	481f      	ldr	r0, [pc, #124]	; (800078c <MX_ADC3_Init+0x108>)
 800070e:	f004 fb1b 	bl	8004d48 <HAL_ADC_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 8000718:	f002 fff8 	bl	800370c <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_ADC3_Init+0x110>)
 800071e:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000720:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_ADC3_Init+0x114>)
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = ENABLE;
 800072a:	2301      	movs	r3, #1
 800072c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 1374;
 8000730:	f240 535e 	movw	r3, #1374	; 0x55e
 8000734:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_ADC_AnalogWDGConfig(&hadc3, &AnalogWDGConfig) != HAL_OK)
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	4619      	mov	r1, r3
 8000740:	4812      	ldr	r0, [pc, #72]	; (800078c <MX_ADC3_Init+0x108>)
 8000742:	f005 fc0d 	bl	8005f60 <HAL_ADC_AnalogWDGConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 800074c:	f002 ffde 	bl	800370c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_ADC3_Init+0x114>)
 8000752:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000754:	2306      	movs	r3, #6
 8000756:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000758:	2306      	movs	r3, #6
 800075a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800075c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000760:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000762:	2304      	movs	r3, #4
 8000764:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4619      	mov	r1, r3
 8000772:	4806      	ldr	r0, [pc, #24]	; (800078c <MX_ADC3_Init+0x108>)
 8000774:	f005 f8a4 	bl	80058c0 <HAL_ADC_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 800077e:	f002 ffc5 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	3738      	adds	r7, #56	; 0x38
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000270 	.word	0x20000270
 8000790:	58026000 	.word	0x58026000
 8000794:	7dc00000 	.word	0x7dc00000
 8000798:	cb840000 	.word	0xcb840000

0800079c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0b2      	sub	sp, #200	; 0xc8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	22bc      	movs	r2, #188	; 0xbc
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f028 f8f9 	bl	80289a4 <memset>
  if(adcHandle->Instance==ADC3)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a1f      	ldr	r2, [pc, #124]	; (8000834 <HAL_ADC_MspInit+0x98>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d137      	bne.n	800082c <HAL_ADC_MspInit+0x90>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80007c0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 80007c6:	2312      	movs	r3, #18
 80007c8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007d6:	23c0      	movs	r3, #192	; 0xc0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80007da:	2320      	movs	r3, #32
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 80007de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007e4:	2300      	movs	r3, #0
 80007e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	4618      	mov	r0, r3
 80007f0:	f008 f912 	bl	8008a18 <HAL_RCCEx_PeriphCLKConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <HAL_ADC_MspInit+0x62>
    {
      Error_Handler();
 80007fa:	f002 ff87 	bl	800370c <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <HAL_ADC_MspInit+0x9c>)
 8000800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000804:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <HAL_ADC_MspInit+0x9c>)
 8000806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800080a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_ADC_MspInit+0x9c>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2105      	movs	r1, #5
 8000820:	207f      	movs	r0, #127	; 0x7f
 8000822:	f006 f93d 	bl	8006aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000826:	207f      	movs	r0, #127	; 0x7f
 8000828:	f006 f954 	bl	8006ad4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800082c:	bf00      	nop
 800082e:	37c8      	adds	r7, #200	; 0xc8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	58026000 	.word	0x58026000
 8000838:	58024400 	.word	0x58024400

0800083c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000840:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <MX_CRC_Init+0x3c>)
 8000842:	4a0e      	ldr	r2, [pc, #56]	; (800087c <MX_CRC_Init+0x40>)
 8000844:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_CRC_Init+0x3c>)
 8000848:	2200      	movs	r2, #0
 800084a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_CRC_Init+0x3c>)
 800084e:	2200      	movs	r2, #0
 8000850:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_CRC_Init+0x3c>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <MX_CRC_Init+0x3c>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_CRC_Init+0x3c>)
 8000860:	2201      	movs	r2, #1
 8000862:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_CRC_Init+0x3c>)
 8000866:	f006 f943 	bl	8006af0 <HAL_CRC_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000870:	f002 ff4c 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	200002d4 	.word	0x200002d4
 800087c:	58024c00 	.word	0x58024c00

08000880 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <HAL_CRC_MspInit+0x3c>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d10e      	bne.n	80008b0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_CRC_MspInit+0x40>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000898:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <HAL_CRC_MspInit+0x40>)
 800089a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800089e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <HAL_CRC_MspInit+0x40>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	58024c00 	.word	0x58024c00
 80008c0:	58024400 	.word	0x58024400

080008c4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008ca:	4a1a      	ldr	r2, [pc, #104]	; (8000934 <MX_DMA2D_Init+0x70>)
 80008cc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80008d4:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008d6:	2202      	movs	r2, #2
 80008d8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80008f8:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <MX_DMA2D_Init+0x6c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_DMA2D_Init+0x6c>)
 8000900:	2200      	movs	r2, #0
 8000902:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_DMA2D_Init+0x6c>)
 8000906:	2200      	movs	r2, #0
 8000908:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800090a:	4809      	ldr	r0, [pc, #36]	; (8000930 <MX_DMA2D_Init+0x6c>)
 800090c:	f006 f9da 	bl	8006cc4 <HAL_DMA2D_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000916:	f002 fef9 	bl	800370c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800091a:	2101      	movs	r1, #1
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_DMA2D_Init+0x6c>)
 800091e:	f006 fa35 	bl	8006d8c <HAL_DMA2D_ConfigLayer>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000928:	f002 fef0 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200002f8 	.word	0x200002f8
 8000934:	52001000 	.word	0x52001000

08000938 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <HAL_DMA2D_MspInit+0x3c>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d10e      	bne.n	8000968 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_DMA2D_MspInit+0x40>)
 800094c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000950:	4a09      	ldr	r2, [pc, #36]	; (8000978 <HAL_DMA2D_MspInit+0x40>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800095a:	4b07      	ldr	r3, [pc, #28]	; (8000978 <HAL_DMA2D_MspInit+0x40>)
 800095c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000960:	f003 0310 	and.w	r3, r3, #16
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	52001000 	.word	0x52001000
 8000978:	58024400 	.word	0x58024400

0800097c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <MX_FREERTOS_Init+0x58>)
 8000982:	2100      	movs	r1, #0
 8000984:	4814      	ldr	r0, [pc, #80]	; (80009d8 <MX_FREERTOS_Init+0x5c>)
 8000986:	f00d fa6b 	bl	800de60 <osThreadNew>
 800098a:	4603      	mov	r3, r0
 800098c:	4a13      	ldr	r2, [pc, #76]	; (80009dc <MX_FREERTOS_Init+0x60>)
 800098e:	6013      	str	r3, [r2, #0]

  /* creation of Stepper */
  StepperHandle = osThreadNew(Stepper_motor, NULL, &Stepper_attributes);
 8000990:	4a13      	ldr	r2, [pc, #76]	; (80009e0 <MX_FREERTOS_Init+0x64>)
 8000992:	2100      	movs	r1, #0
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <MX_FREERTOS_Init+0x68>)
 8000996:	f00d fa63 	bl	800de60 <osThreadNew>
 800099a:	4603      	mov	r3, r0
 800099c:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <MX_FREERTOS_Init+0x6c>)
 800099e:	6013      	str	r3, [r2, #0]

  /* creation of Connectivity */
  ConnectivityHandle = osThreadNew(Cloud_Connectivity, NULL, &Connectivity_attributes);
 80009a0:	4a12      	ldr	r2, [pc, #72]	; (80009ec <MX_FREERTOS_Init+0x70>)
 80009a2:	2100      	movs	r1, #0
 80009a4:	4812      	ldr	r0, [pc, #72]	; (80009f0 <MX_FREERTOS_Init+0x74>)
 80009a6:	f00d fa5b 	bl	800de60 <osThreadNew>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4a11      	ldr	r2, [pc, #68]	; (80009f4 <MX_FREERTOS_Init+0x78>)
 80009ae:	6013      	str	r3, [r2, #0]

  /* creation of Sensors */
  SensorsHandle = osThreadNew(Sensors_measurements, NULL, &Sensors_attributes);
 80009b0:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <MX_FREERTOS_Init+0x7c>)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_FREERTOS_Init+0x80>)
 80009b6:	f00d fa53 	bl	800de60 <osThreadNew>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <MX_FREERTOS_Init+0x84>)
 80009be:	6013      	str	r3, [r2, #0]

  /* creation of IHM */
  IHMHandle = osThreadNew(Interface, NULL, &IHM_attributes);
 80009c0:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <MX_FREERTOS_Init+0x88>)
 80009c2:	2100      	movs	r1, #0
 80009c4:	4810      	ldr	r0, [pc, #64]	; (8000a08 <MX_FREERTOS_Init+0x8c>)
 80009c6:	f00d fa4b 	bl	800de60 <osThreadNew>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <MX_FREERTOS_Init+0x90>)
 80009ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	0802a3f4 	.word	0x0802a3f4
 80009d8:	08000a11 	.word	0x08000a11
 80009dc:	20000364 	.word	0x20000364
 80009e0:	0802a418 	.word	0x0802a418
 80009e4:	08000a21 	.word	0x08000a21
 80009e8:	20000368 	.word	0x20000368
 80009ec:	0802a43c 	.word	0x0802a43c
 80009f0:	08000a79 	.word	0x08000a79
 80009f4:	2000036c 	.word	0x2000036c
 80009f8:	0802a460 	.word	0x0802a460
 80009fc:	08000a89 	.word	0x08000a89
 8000a00:	20000370 	.word	0x20000370
 8000a04:	0802a484 	.word	0x0802a484
 8000a08:	08000af9 	.word	0x08000af9
 8000a0c:	20000374 	.word	0x20000374

08000a10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f00d fab3 	bl	800df84 <osDelay>
 8000a1e:	e7fb      	b.n	8000a18 <StartDefaultTask+0x8>

08000a20 <Stepper_motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Stepper_motor */
void Stepper_motor(void *argument)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Stepper_motor */
	BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 8000a28:	4812      	ldr	r0, [pc, #72]	; (8000a74 <Stepper_motor+0x54>)
 8000a2a:	f002 fe8d 	bl	8003748 <BSP_MotorControl_AttachFlagInterrupt>
  /* Infinite loop */
  for(;;)
  {
	L6474_SetMaxSpeed(0, 100);
 8000a2e:	2164      	movs	r1, #100	; 0x64
 8000a30:	2000      	movs	r0, #0
 8000a32:	f001 fa63 	bl	8001efc <L6474_SetMaxSpeed>
	L6474_SetMinSpeed(0, 100);
 8000a36:	2164      	movs	r1, #100	; 0x64
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f001 faab 	bl	8001f94 <L6474_SetMinSpeed>
	L6474_Move(0, BACKWARD, 16000);
 8000a3e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000a42:	2100      	movs	r1, #0
 8000a44:	2000      	movs	r0, #0
 8000a46:	f000 ff3b 	bl	80018c0 <L6474_Move>
	L6474_WaitWhileActive(0);
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f001 fb30 	bl	80020b0 <L6474_WaitWhileActive>
	osDelay(1000);
 8000a50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a54:	f00d fa96 	bl	800df84 <osDelay>
	L6474_Move(0, FORWARD, 16000);
 8000a58:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f000 ff2e 	bl	80018c0 <L6474_Move>
	L6474_WaitWhileActive(0);
 8000a64:	2000      	movs	r0, #0
 8000a66:	f001 fb23 	bl	80020b0 <L6474_WaitWhileActive>
	osDelay(1000);
 8000a6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a6e:	f00d fa89 	bl	800df84 <osDelay>
	L6474_SetMaxSpeed(0, 100);
 8000a72:	e7dc      	b.n	8000a2e <Stepper_motor+0xe>
 8000a74:	080036bd 	.word	0x080036bd

08000a78 <Cloud_Connectivity>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Cloud_Connectivity */
void Cloud_Connectivity(void *argument)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Cloud_Connectivity */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f00d fa7f 	bl	800df84 <osDelay>
 8000a86:	e7fb      	b.n	8000a80 <Cloud_Connectivity+0x8>

08000a88 <Sensors_measurements>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensors_measurements */
void Sensors_measurements(void *argument)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sensors_measurements */
	uint16_t readValue;
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc3); // temp
 8000a90:	4817      	ldr	r0, [pc, #92]	; (8000af0 <Sensors_measurements+0x68>)
 8000a92:	f004 fafb 	bl	800508c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, 10000);
 8000a96:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a9a:	4815      	ldr	r0, [pc, #84]	; (8000af0 <Sensors_measurements+0x68>)
 8000a9c:	f004 fbc0 	bl	8005220 <HAL_ADC_PollForConversion>
	  readValue = HAL_ADC_GetValue(&hadc3);
 8000aa0:	4813      	ldr	r0, [pc, #76]	; (8000af0 <Sensors_measurements+0x68>)
 8000aa2:	f004 fcb1 	bl	8005408 <HAL_ADC_GetValue>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	81fb      	strh	r3, [r7, #14]
	  tCelsius = 357.558 - 0.187364 * readValue;
 8000aaa:	89fb      	ldrh	r3, [r7, #14]
 8000aac:	ee07 3a90 	vmov	s15, r3
 8000ab0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ab4:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000ae0 <Sensors_measurements+0x58>
 8000ab8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000abc:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000ae8 <Sensors_measurements+0x60>
 8000ac0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ac4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ac8:	ee17 2a90 	vmov	r2, s15
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <Sensors_measurements+0x6c>)
 8000ace:	601a      	str	r2, [r3, #0]
	  osDelay(1000);
 8000ad0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad4:	f00d fa56 	bl	800df84 <osDelay>
	  HAL_ADC_Start(&hadc3); // temp
 8000ad8:	e7da      	b.n	8000a90 <Sensors_measurements+0x8>
 8000ada:	bf00      	nop
 8000adc:	f3af 8000 	nop.w
 8000ae0:	26394fad 	.word	0x26394fad
 8000ae4:	3fc7fb8b 	.word	0x3fc7fb8b
 8000ae8:	916872b0 	.word	0x916872b0
 8000aec:	407658ed 	.word	0x407658ed
 8000af0:	20000270 	.word	0x20000270
 8000af4:	20000360 	.word	0x20000360

08000af8 <Interface>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Interface */
void Interface(void *argument)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Interface */
  /* Infinite loop */
  for(;;)
 8000b00:	e7fe      	b.n	8000b00 <Interface+0x8>
	...

08000b04 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1a:	4b5f      	ldr	r3, [pc, #380]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	4a5d      	ldr	r2, [pc, #372]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2a:	4b5b      	ldr	r3, [pc, #364]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b30:	f003 0310 	and.w	r3, r3, #16
 8000b34:	623b      	str	r3, [r7, #32]
 8000b36:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b38:	4b57      	ldr	r3, [pc, #348]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	4a56      	ldr	r2, [pc, #344]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b48:	4b53      	ldr	r3, [pc, #332]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b52:	61fb      	str	r3, [r7, #28]
 8000b54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b56:	4b50      	ldr	r3, [pc, #320]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	4a4e      	ldr	r2, [pc, #312]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b5e:	f043 0320 	orr.w	r3, r3, #32
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b66:	4b4c      	ldr	r3, [pc, #304]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6c:	f003 0320 	and.w	r3, r3, #32
 8000b70:	61bb      	str	r3, [r7, #24]
 8000b72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b74:	4b48      	ldr	r3, [pc, #288]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7a:	4a47      	ldr	r2, [pc, #284]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b84:	4b44      	ldr	r3, [pc, #272]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b41      	ldr	r3, [pc, #260]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b98:	4a3f      	ldr	r2, [pc, #252]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba2:	4b3d      	ldr	r3, [pc, #244]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b39      	ldr	r3, [pc, #228]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb6:	4a38      	ldr	r2, [pc, #224]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc0:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	4b32      	ldr	r3, [pc, #200]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	4a30      	ldr	r2, [pc, #192]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000bd6:	f043 0302 	orr.w	r3, r3, #2
 8000bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bde:	4b2e      	ldr	r3, [pc, #184]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	f003 0302 	and.w	r3, r3, #2
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bec:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	4a29      	ldr	r2, [pc, #164]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfc:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0a:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	4a21      	ldr	r2, [pc, #132]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000c12:	f043 0308 	orr.w	r3, r3, #8
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <MX_GPIO_Init+0x194>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	f003 0308 	and.w	r3, r3, #8
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, STBY_RST_Pin|DIR1_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000c2e:	481b      	ldr	r0, [pc, #108]	; (8000c9c <MX_GPIO_Init+0x198>)
 8000c30:	f006 fb0a 	bl	8007248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	21c0      	movs	r1, #192	; 0xc0
 8000c38:	4819      	ldr	r0, [pc, #100]	; (8000ca0 <MX_GPIO_Init+0x19c>)
 8000c3a:	f006 fb05 	bl	8007248 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = STBY_RST_Pin|DIR1_Pin;
 8000c3e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	4811      	ldr	r0, [pc, #68]	; (8000c9c <MX_GPIO_Init+0x198>)
 8000c58:	f006 f946 	bl	8006ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLAG_Pin;
 8000c5c:	2310      	movs	r3, #16
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(FLAG_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <MX_GPIO_Init+0x1a0>)
 8000c70:	f006 f93a 	bl	8006ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000c74:	23c0      	movs	r3, #192	; 0xc0
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_GPIO_Init+0x19c>)
 8000c8c:	f006 f92c 	bl	8006ee8 <HAL_GPIO_Init>

}
 8000c90:	bf00      	nop
 8000c92:	3738      	adds	r7, #56	; 0x38
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	58024400 	.word	0x58024400
 8000c9c:	58022000 	.word	0x58022000
 8000ca0:	58020400 	.word	0x58020400
 8000ca4:	58021c00 	.word	0x58021c00

08000ca8 <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cae:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <MX_I2C1_SMBUS_Init+0x80>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x10C0ECFF;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cb4:	4a1d      	ldr	r2, [pc, #116]	; (8000d2c <MX_I2C1_SMBUS_Init+0x84>)
 8000cb6:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x000084C4;
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cf6:	f248 42c4 	movw	r2, #33988	; 0x84c4
 8000cfa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000cfc:	4809      	ldr	r0, [pc, #36]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000cfe:	f00a f817 	bl	800ad30 <HAL_SMBUS_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000d08:	f002 fd00 	bl	800370c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_SMBUS_ConfigDigitalFilter(&hsmbus1, 0) != HAL_OK)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_I2C1_SMBUS_Init+0x7c>)
 8000d10:	f00a f8c6 	bl	800aea0 <HAL_SMBUS_ConfigDigitalFilter>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_I2C1_SMBUS_Init+0x76>
  {
    Error_Handler();
 8000d1a:	f002 fcf7 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000378 	.word	0x20000378
 8000d28:	40005400 	.word	0x40005400
 8000d2c:	10c0ecff 	.word	0x10c0ecff

08000d30 <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0b8      	sub	sp, #224	; 0xe0
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	22bc      	movs	r2, #188	; 0xbc
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f027 fe27 	bl	80289a4 <memset>
  if(smbusHandle->Instance==I2C1)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a25      	ldr	r2, [pc, #148]	; (8000df0 <HAL_SMBUS_MspInit+0xc0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d142      	bne.n	8000de6 <HAL_SMBUS_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d60:	2308      	movs	r3, #8
 8000d62:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6a:	f107 0310 	add.w	r3, r7, #16
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f007 fe52 	bl	8008a18 <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_SMBUS_MspInit+0x4e>
    {
      Error_Handler();
 8000d7a:	f002 fcc7 	bl	800370c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <HAL_SMBUS_MspInit+0xc4>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d84:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <HAL_SMBUS_MspInit+0xc4>)
 8000d86:	f043 0302 	orr.w	r3, r3, #2
 8000d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8e:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <HAL_SMBUS_MspInit+0xc4>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000da0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da4:	2312      	movs	r3, #18
 8000da6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000db6:	2304      	movs	r3, #4
 8000db8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <HAL_SMBUS_MspInit+0xc8>)
 8000dc4:	f006 f890 	bl	8006ee8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_SMBUS_MspInit+0xc4>)
 8000dca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dce:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <HAL_SMBUS_MspInit+0xc4>)
 8000dd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_SMBUS_MspInit+0xc4>)
 8000dda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000de6:	bf00      	nop
 8000de8:	37e0      	adds	r7, #224	; 0xe0
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40005400 	.word	0x40005400
 8000df4:	58024400 	.word	0x58024400
 8000df8:	58020400 	.word	0x58020400

08000dfc <L6474_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void L6474_AttachErrorHandler(void (*callback)(uint16_t))
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <L6474_AttachErrorHandler+0x1c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	200003cc 	.word	0x200003cc

08000e1c <L6474_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void L6474_AttachFlagInterrupt(void (*callback)(void))
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <L6474_AttachFlagInterrupt+0x1c>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6013      	str	r3, [r2, #0]
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	200003c8 	.word	0x200003c8

08000e3c <L6474_CmdDisable>:
 * @brief  Issue the Disable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdDisable(uint8_t deviceId)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_DISABLE);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	21a8      	movs	r1, #168	; 0xa8
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 fa8c 	bl	8002368 <L6474_SendCommand>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <L6474_CmdEnable>:
 * @brief  Issues the Enable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdEnable(uint8_t deviceId)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_ENABLE);
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	21b8      	movs	r1, #184	; 0xb8
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 fa7e 	bl	8002368 <L6474_SendCommand>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <L6474_CmdGetParam>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Register adress (L6474_ABS_POS, L6474_MARK,...)
 * @retval Register value
 **********************************************************/
uint32_t L6474_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint32_t spiRxData;
  uint8_t maxArgumentNbBytes = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8000e84:	4b70      	ldr	r3, [pc, #448]	; (8001048 <L6474_CmdGetParam+0x1d4>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	3b01      	subs	r3, #1
 8000e92:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 8000e94:	2300      	movs	r3, #0
 8000e96:	74bb      	strb	r3, [r7, #18]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8000e98:	4b6c      	ldr	r3, [pc, #432]	; (800104c <L6474_CmdGetParam+0x1d8>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8000e9e:	7cbb      	ldrb	r3, [r7, #18]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <L6474_CmdGetParam+0x34>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      //L6474_Board_EnableIrq();
      //__enable_irq();
      itDisable = FALSE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	74bb      	strb	r3, [r7, #18]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	e02b      	b.n	8000f06 <L6474_CmdGetParam+0x92>
    {
      spiTxBursts[0][i] = L6474_NOP;
 8000eae:	4a68      	ldr	r2, [pc, #416]	; (8001050 <L6474_CmdGetParam+0x1dc>)
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 8000eb8:	4a65      	ldr	r2, [pc, #404]	; (8001050 <L6474_CmdGetParam+0x1dc>)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	3303      	adds	r3, #3
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 8000ec4:	4a62      	ldr	r2, [pc, #392]	; (8001050 <L6474_CmdGetParam+0x1dc>)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	4413      	add	r3, r2
 8000eca:	3306      	adds	r3, #6
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 8000ed0:	4a5f      	ldr	r2, [pc, #380]	; (8001050 <L6474_CmdGetParam+0x1dc>)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	3309      	adds	r3, #9
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
      spiRxBursts[1][i] = 0;
 8000edc:	4a5d      	ldr	r2, [pc, #372]	; (8001054 <L6474_CmdGetParam+0x1e0>)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	3303      	adds	r3, #3
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
      spiRxBursts[2][i] = 0;
 8000ee8:	4a5a      	ldr	r2, [pc, #360]	; (8001054 <L6474_CmdGetParam+0x1e0>)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	4413      	add	r3, r2
 8000eee:	3306      	adds	r3, #6
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
      spiRxBursts[3][i] = 0;    
 8000ef4:	4a57      	ldr	r2, [pc, #348]	; (8001054 <L6474_CmdGetParam+0x1e0>)
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	4413      	add	r3, r2
 8000efa:	3309      	adds	r3, #9
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3301      	adds	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	4b50      	ldr	r3, [pc, #320]	; (8001048 <L6474_CmdGetParam+0x1d4>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d3cc      	bcc.n	8000eae <L6474_CmdGetParam+0x3a>
    }
    switch (param)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	2b18      	cmp	r3, #24
 8000f1a:	d84d      	bhi.n	8000fb8 <L6474_CmdGetParam+0x144>
 8000f1c:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <L6474_CmdGetParam+0xb0>)
 8000f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f22:	bf00      	nop
 8000f24:	08000f89 	.word	0x08000f89
 8000f28:	08000f9f 	.word	0x08000f9f
 8000f2c:	08000f89 	.word	0x08000f89
 8000f30:	08000fb9 	.word	0x08000fb9
 8000f34:	08000fb9 	.word	0x08000fb9
 8000f38:	08000fb9 	.word	0x08000fb9
 8000f3c:	08000fb9 	.word	0x08000fb9
 8000f40:	08000fb9 	.word	0x08000fb9
 8000f44:	08000fb9 	.word	0x08000fb9
 8000f48:	08000fb9 	.word	0x08000fb9
 8000f4c:	08000fb9 	.word	0x08000fb9
 8000f50:	08000fb9 	.word	0x08000fb9
 8000f54:	08000fb9 	.word	0x08000fb9
 8000f58:	08000fb9 	.word	0x08000fb9
 8000f5c:	08000fb9 	.word	0x08000fb9
 8000f60:	08000fb9 	.word	0x08000fb9
 8000f64:	08000fb9 	.word	0x08000fb9
 8000f68:	08000fb9 	.word	0x08000fb9
 8000f6c:	08000fb9 	.word	0x08000fb9
 8000f70:	08000fb9 	.word	0x08000fb9
 8000f74:	08000fb9 	.word	0x08000fb9
 8000f78:	08000fb9 	.word	0x08000fb9
 8000f7c:	08000fb9 	.word	0x08000fb9
 8000f80:	08000f9f 	.word	0x08000f9f
 8000f84:	08000f9f 	.word	0x08000f9f
    {
      case L6474_ABS_POS: ;
      case L6474_MARK:
        spiTxBursts[0][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	7c7b      	ldrb	r3, [r7, #17]
 8000f8e:	f042 0220 	orr.w	r2, r2, #32
 8000f92:	b2d1      	uxtb	r1, r2
 8000f94:	4a2e      	ldr	r2, [pc, #184]	; (8001050 <L6474_CmdGetParam+0x1dc>)
 8000f96:	54d1      	strb	r1, [r2, r3]
        maxArgumentNbBytes = 3;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	74fb      	strb	r3, [r7, #19]
        break;
 8000f9c:	e018      	b.n	8000fd0 <L6474_CmdGetParam+0x15c>
      case L6474_EL_POS: ;
      case L6474_CONFIG: ;
      case L6474_STATUS:
        spiTxBursts[1][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	7c7b      	ldrb	r3, [r7, #17]
 8000fa4:	f042 0220 	orr.w	r2, r2, #32
 8000fa8:	b2d1      	uxtb	r1, r2
 8000faa:	4a29      	ldr	r2, [pc, #164]	; (8001050 <L6474_CmdGetParam+0x1dc>)
 8000fac:	4413      	add	r3, r2
 8000fae:	460a      	mov	r2, r1
 8000fb0:	70da      	strb	r2, [r3, #3]
        maxArgumentNbBytes = 2;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	74fb      	strb	r3, [r7, #19]
        break;
 8000fb6:	e00b      	b.n	8000fd0 <L6474_CmdGetParam+0x15c>
      default:
        spiTxBursts[2][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	7c7b      	ldrb	r3, [r7, #17]
 8000fbe:	f042 0220 	orr.w	r2, r2, #32
 8000fc2:	b2d1      	uxtb	r1, r2
 8000fc4:	4a22      	ldr	r2, [pc, #136]	; (8001050 <L6474_CmdGetParam+0x1dc>)
 8000fc6:	4413      	add	r3, r2
 8000fc8:	460a      	mov	r2, r1
 8000fca:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	74fb      	strb	r3, [r7, #19]
    }
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8000fd0:	f003 f8cf 	bl	8004172 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	; (800104c <L6474_CmdGetParam+0x1d8>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f47f af5a 	bne.w	8000e98 <L6474_CmdGetParam+0x24>
    
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8000fe4:	7cfb      	ldrb	r3, [r7, #19]
 8000fe6:	f1c3 0303 	rsb	r3, r3, #3
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	e011      	b.n	8001012 <L6474_CmdGetParam+0x19e>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a16      	ldr	r2, [pc, #88]	; (8001050 <L6474_CmdGetParam+0x1dc>)
 8000ff8:	1898      	adds	r0, r3, r2
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	4a14      	ldr	r2, [pc, #80]	; (8001054 <L6474_CmdGetParam+0x1e0>)
 8001004:	4413      	add	r3, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f002 f850 	bl	80030ac <L6474_WriteBytes>
       i++)
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3301      	adds	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	2b03      	cmp	r3, #3
 8001016:	d9ea      	bls.n	8000fee <L6474_CmdGetParam+0x17a>
                          &spiRxBursts[i][0]);
  }
  
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001018:	7c7b      	ldrb	r3, [r7, #17]
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <L6474_CmdGetParam+0x1e0>)
 800101c:	4413      	add	r3, r2
 800101e:	78db      	ldrb	r3, [r3, #3]
 8001020:	041b      	lsls	r3, r3, #16
              (spiRxBursts[2][spiIndex] << 8) |
 8001022:	7c7a      	ldrb	r2, [r7, #17]
 8001024:	490b      	ldr	r1, [pc, #44]	; (8001054 <L6474_CmdGetParam+0x1e0>)
 8001026:	440a      	add	r2, r1
 8001028:	7992      	ldrb	r2, [r2, #6]
 800102a:	0212      	lsls	r2, r2, #8
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 800102c:	4313      	orrs	r3, r2
              (spiRxBursts[3][spiIndex]);
 800102e:	7c7a      	ldrb	r2, [r7, #17]
 8001030:	4908      	ldr	r1, [pc, #32]	; (8001054 <L6474_CmdGetParam+0x1e0>)
 8001032:	440a      	add	r2, r1
 8001034:	7a52      	ldrb	r2, [r2, #9]
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001036:	4313      	orrs	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 800103a:	f003 f8a3 	bl	8004184 <L6474_Board_EnableIrq>
    
  return (spiRxData);
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200003d0 	.word	0x200003d0
 800104c:	200003ec 	.word	0x200003ec
 8001050:	200003d4 	.word	0x200003d4
 8001054:	200003e0 	.word	0x200003e0

08001058 <L6474_CmdGetStatus>:
 * @note Once the GetStatus command is performed, the flags of the status register
 * are reset. This is not the case when the status register is read with the
 * GetParam command (via the functions L6474ReadStatusRegister or L6474CmdGetParam).
 **********************************************************/
uint16_t L6474_CmdGetStatus(uint8_t deviceId)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint16_t status;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001062:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <L6474_CmdGetStatus+0xfc>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	3b01      	subs	r3, #1
 8001070:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 8001072:	2300      	movs	r3, #0
 8001074:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8001076:	4b38      	ldr	r3, [pc, #224]	; (8001158 <L6474_CmdGetStatus+0x100>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 800107c:	7afb      	ldrb	r3, [r7, #11]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <L6474_CmdGetStatus+0x32>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8001082:	f003 f87f 	bl	8004184 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8001086:	2300      	movs	r3, #0
 8001088:	72fb      	strb	r3, [r7, #11]
    }

    for (i = 0; i < numberOfDevices; i++)
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	e01f      	b.n	80010d0 <L6474_CmdGetStatus+0x78>
    {
       spiTxBursts[0][i] = L6474_NOP;
 8001090:	4a32      	ldr	r2, [pc, #200]	; (800115c <L6474_CmdGetStatus+0x104>)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4413      	add	r3, r2
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
       spiTxBursts[1][i] = L6474_NOP;
 800109a:	4a30      	ldr	r2, [pc, #192]	; (800115c <L6474_CmdGetStatus+0x104>)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	3303      	adds	r3, #3
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
       spiTxBursts[2][i] = L6474_NOP;
 80010a6:	4a2d      	ldr	r2, [pc, #180]	; (800115c <L6474_CmdGetStatus+0x104>)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	3306      	adds	r3, #6
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
       spiRxBursts[1][i] = 0;
 80010b2:	4a2b      	ldr	r2, [pc, #172]	; (8001160 <L6474_CmdGetStatus+0x108>)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	3303      	adds	r3, #3
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
       spiRxBursts[2][i] = 0;
 80010be:	4a28      	ldr	r2, [pc, #160]	; (8001160 <L6474_CmdGetStatus+0x108>)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	3306      	adds	r3, #6
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3301      	adds	r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <L6474_CmdGetStatus+0xfc>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4293      	cmp	r3, r2
 80010dc:	d3d8      	bcc.n	8001090 <L6474_CmdGetStatus+0x38>
    }
    spiTxBursts[0][spiIndex] = L6474_GET_STATUS;
 80010de:	7abb      	ldrb	r3, [r7, #10]
 80010e0:	4a1e      	ldr	r2, [pc, #120]	; (800115c <L6474_CmdGetStatus+0x104>)
 80010e2:	21d0      	movs	r1, #208	; 0xd0
 80010e4:	54d1      	strb	r1, [r2, r3]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80010e6:	f003 f844 	bl	8004172 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80010ea:	2301      	movs	r3, #1
 80010ec:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <L6474_CmdGetStatus+0x100>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1be      	bne.n	8001076 <L6474_CmdGetStatus+0x1e>

  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	e011      	b.n	8001122 <L6474_CmdGetStatus+0xca>
  {
     L6474_WriteBytes(&spiTxBursts[i][0], &spiRxBursts[i][0]);
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	4a15      	ldr	r2, [pc, #84]	; (800115c <L6474_CmdGetStatus+0x104>)
 8001108:	1898      	adds	r0, r3, r2
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	4a13      	ldr	r2, [pc, #76]	; (8001160 <L6474_CmdGetStatus+0x108>)
 8001114:	4413      	add	r3, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f001 ffc8 	bl	80030ac <L6474_WriteBytes>
  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	3301      	adds	r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2b02      	cmp	r3, #2
 8001126:	d9ea      	bls.n	80010fe <L6474_CmdGetStatus+0xa6>
  }
  status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8001128:	7abb      	ldrb	r3, [r7, #10]
 800112a:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <L6474_CmdGetStatus+0x108>)
 800112c:	4413      	add	r3, r2
 800112e:	78db      	ldrb	r3, [r3, #3]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	7abb      	ldrb	r3, [r7, #10]
 8001136:	490a      	ldr	r1, [pc, #40]	; (8001160 <L6474_CmdGetStatus+0x108>)
 8001138:	440b      	add	r3, r1
 800113a:	799b      	ldrb	r3, [r3, #6]
 800113c:	b21b      	sxth	r3, r3
 800113e:	4313      	orrs	r3, r2
 8001140:	b21b      	sxth	r3, r3
 8001142:	813b      	strh	r3, [r7, #8]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001144:	f003 f81e 	bl	8004184 <L6474_Board_EnableIrq>
  
  return (status);
 8001148:	893b      	ldrh	r3, [r7, #8]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200003d0 	.word	0x200003d0
 8001158:	200003ec 	.word	0x200003ec
 800115c:	200003d4 	.word	0x200003d4
 8001160:	200003e0 	.word	0x200003e0

08001164 <L6474_CmdNop>:
 * @brief  Issues the Nop command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdNop(uint8_t deviceId)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_NOP);
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f001 f8f8 	bl	8002368 <L6474_SendCommand>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <L6474_CmdSetParam>:
 * @retval None
 **********************************************************/
void L6474_CmdSetParam(uint8_t deviceId,
                       uint32_t param,
                       uint32_t value)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	73fb      	strb	r3, [r7, #15]
  uint32_t i;
  uint8_t maxArgumentNbBytes = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001192:	4b69      	ldr	r3, [pc, #420]	; (8001338 <L6474_CmdSetParam+0x1b8>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	3b01      	subs	r3, #1
 80011a0:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 80011a2:	2300      	movs	r3, #0
 80011a4:	74bb      	strb	r3, [r7, #18]
  do
  {
    spiPreemtionByIsr = FALSE;
 80011a6:	4b65      	ldr	r3, [pc, #404]	; (800133c <L6474_CmdSetParam+0x1bc>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80011ac:	7cbb      	ldrb	r3, [r7, #18]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <L6474_CmdSetParam+0x3a>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80011b2:	f002 ffe7 	bl	8004184 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	74bb      	strb	r3, [r7, #18]
    }
    for (i = 0; i < numberOfDevices; i++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	e019      	b.n	80011f4 <L6474_CmdSetParam+0x74>
    {
      spiTxBursts[0][i] = L6474_NOP;
 80011c0:	4a5f      	ldr	r2, [pc, #380]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	4413      	add	r3, r2
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 80011ca:	4a5d      	ldr	r2, [pc, #372]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	4413      	add	r3, r2
 80011d0:	3303      	adds	r3, #3
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 80011d6:	4a5a      	ldr	r2, [pc, #360]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	4413      	add	r3, r2
 80011dc:	3306      	adds	r3, #6
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 80011e2:	4a57      	ldr	r2, [pc, #348]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	4413      	add	r3, r2
 80011e8:	3309      	adds	r3, #9
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	4b50      	ldr	r3, [pc, #320]	; (8001338 <L6474_CmdSetParam+0x1b8>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	461a      	mov	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	4293      	cmp	r3, r2
 8001200:	d3de      	bcc.n	80011c0 <L6474_CmdSetParam+0x40>
    }
    switch (param)
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	3b01      	subs	r3, #1
 8001206:	2b17      	cmp	r3, #23
 8001208:	d85c      	bhi.n	80012c4 <L6474_CmdSetParam+0x144>
 800120a:	a201      	add	r2, pc, #4	; (adr r2, 8001210 <L6474_CmdSetParam+0x90>)
 800120c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001210:	08001271 	.word	0x08001271
 8001214:	080012a1 	.word	0x080012a1
 8001218:	08001271 	.word	0x08001271
 800121c:	080012c5 	.word	0x080012c5
 8001220:	080012c5 	.word	0x080012c5
 8001224:	080012c5 	.word	0x080012c5
 8001228:	080012c5 	.word	0x080012c5
 800122c:	080012c5 	.word	0x080012c5
 8001230:	080012c5 	.word	0x080012c5
 8001234:	080012c5 	.word	0x080012c5
 8001238:	080012c5 	.word	0x080012c5
 800123c:	080012c5 	.word	0x080012c5
 8001240:	080012c5 	.word	0x080012c5
 8001244:	080012c5 	.word	0x080012c5
 8001248:	080012c5 	.word	0x080012c5
 800124c:	080012c5 	.word	0x080012c5
 8001250:	080012c5 	.word	0x080012c5
 8001254:	080012c5 	.word	0x080012c5
 8001258:	080012c5 	.word	0x080012c5
 800125c:	080012c5 	.word	0x080012c5
 8001260:	080012c5 	.word	0x080012c5
 8001264:	080012c5 	.word	0x080012c5
 8001268:	080012c5 	.word	0x080012c5
 800126c:	080012a1 	.word	0x080012a1
  {
    case L6474_ABS_POS: ;
    case L6474_MARK:
        spiTxBursts[0][spiIndex] = param;
 8001270:	7c7b      	ldrb	r3, [r7, #17]
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	b2d1      	uxtb	r1, r2
 8001276:	4a32      	ldr	r2, [pc, #200]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 8001278:	54d1      	strb	r1, [r2, r3]
        spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	0c1a      	lsrs	r2, r3, #16
 800127e:	7c7b      	ldrb	r3, [r7, #17]
 8001280:	b2d1      	uxtb	r1, r2
 8001282:	4a2f      	ldr	r2, [pc, #188]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 8001284:	4413      	add	r3, r2
 8001286:	460a      	mov	r2, r1
 8001288:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	0a1a      	lsrs	r2, r3, #8
 800128e:	7c7b      	ldrb	r3, [r7, #17]
 8001290:	b2d1      	uxtb	r1, r2
 8001292:	4a2b      	ldr	r2, [pc, #172]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 8001294:	4413      	add	r3, r2
 8001296:	460a      	mov	r2, r1
 8001298:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 3;
 800129a:	2303      	movs	r3, #3
 800129c:	74fb      	strb	r3, [r7, #19]
        break;
 800129e:	e01a      	b.n	80012d6 <L6474_CmdSetParam+0x156>
    case L6474_EL_POS: ;
    case L6474_CONFIG:
        spiTxBursts[1][spiIndex] = param;
 80012a0:	7c7b      	ldrb	r3, [r7, #17]
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	b2d1      	uxtb	r1, r2
 80012a6:	4a26      	ldr	r2, [pc, #152]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 80012a8:	4413      	add	r3, r2
 80012aa:	460a      	mov	r2, r1
 80012ac:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	0a1a      	lsrs	r2, r3, #8
 80012b2:	7c7b      	ldrb	r3, [r7, #17]
 80012b4:	b2d1      	uxtb	r1, r2
 80012b6:	4a22      	ldr	r2, [pc, #136]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 80012b8:	4413      	add	r3, r2
 80012ba:	460a      	mov	r2, r1
 80012bc:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 2;
 80012be:	2302      	movs	r3, #2
 80012c0:	74fb      	strb	r3, [r7, #19]
        break;
 80012c2:	e008      	b.n	80012d6 <L6474_CmdSetParam+0x156>
    default:
        spiTxBursts[2][spiIndex] = param;
 80012c4:	7c7b      	ldrb	r3, [r7, #17]
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	b2d1      	uxtb	r1, r2
 80012ca:	4a1d      	ldr	r2, [pc, #116]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 80012cc:	4413      	add	r3, r2
 80012ce:	460a      	mov	r2, r1
 80012d0:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	74fb      	strb	r3, [r7, #19]
    }
    spiTxBursts[3][spiIndex] = (uint8_t)(value);
 80012d6:	7c7b      	ldrb	r3, [r7, #17]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	b2d1      	uxtb	r1, r2
 80012dc:	4a18      	ldr	r2, [pc, #96]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 80012de:	4413      	add	r3, r2
 80012e0:	460a      	mov	r2, r1
 80012e2:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80012e4:	f002 ff45 	bl	8004172 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80012e8:	2301      	movs	r3, #1
 80012ea:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <L6474_CmdSetParam+0x1bc>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f47f af57 	bne.w	80011a6 <L6474_CmdSetParam+0x26>
 
  /* SPI transfer */
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80012f8:	7cfb      	ldrb	r3, [r7, #19]
 80012fa:	f1c3 0303 	rsb	r3, r3, #3
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	e011      	b.n	8001326 <L6474_CmdSetParam+0x1a6>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],&spiRxBursts[i][0]);
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <L6474_CmdSetParam+0x1c0>)
 800130c:	1898      	adds	r0, r3, r2
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	4613      	mov	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <L6474_CmdSetParam+0x1c4>)
 8001318:	4413      	add	r3, r2
 800131a:	4619      	mov	r1, r3
 800131c:	f001 fec6 	bl	80030ac <L6474_WriteBytes>
       i++)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3301      	adds	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	2b03      	cmp	r3, #3
 800132a:	d9ea      	bls.n	8001302 <L6474_CmdSetParam+0x182>
  }
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 800132c:	f002 ff2a 	bl	8004184 <L6474_Board_EnableIrq>
}
 8001330:	bf00      	nop
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200003d0 	.word	0x200003d0
 800133c:	200003ec 	.word	0x200003ec
 8001340:	200003d4 	.word	0x200003d4
 8001344:	200003e0 	.word	0x200003e0

08001348 <L6474_Init>:
 * @brief Starts a new L6474 instance 
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void L6474_Init(void* pInit)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs */
  L6474_Board_GpioInit(l6474DriverInstance);
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <L6474_Init+0x94>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f002 ff1e 	bl	8004198 <L6474_Board_GpioInit>
  
  if(L6474_Board_SpiInit() != 0)
 800135c:	f003 f91a 	bl	8004594 <L6474_Board_SpiInit>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <L6474_Init+0x26>
  {
    /* Initialization Error */
    L6474_ErrorHandler(L6474_ERROR_0);
 8001366:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800136a:	f000 ffd1 	bl	8002310 <L6474_ErrorHandler>
  } 

  /* Initialise the PWMs used for the Step clocks ----------------------------*/
  L6474_Board_PwmInit(l6474DriverInstance);
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <L6474_Init+0x94>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	f003 f839 	bl	80043ec <L6474_Board_PwmInit>
 
  /* Standby-reset deactivation */
  L6474_Board_ReleaseReset(l6474DriverInstance);
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <L6474_Init+0x94>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	4618      	mov	r0, r3
 8001382:	f003 f8b3 	bl	80044ec <L6474_Board_ReleaseReset>
  
  /* Let a delay after reset */
  L6474_Board_Delay(1); 
 8001386:	2001      	movs	r0, #1
 8001388:	f002 fee8 	bl	800415c <L6474_Board_Delay>
  
  /* Set all registers and context variables to the predefined values from l6474_target_config.h */
  if (pInit == 0)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d106      	bne.n	80013a0 <L6474_Init+0x58>
  {
    L6474_SetDeviceParamsToPredefinedValues(l6474DriverInstance);
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <L6474_Init+0x94>)
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	4618      	mov	r0, r3
 800139a:	f001 f8db 	bl	8002554 <L6474_SetDeviceParamsToPredefinedValues>
 800139e:	e006      	b.n	80013ae <L6474_Init+0x66>
  }
  else
  {
    L6474_SetDeviceParamsToGivenValues(l6474DriverInstance, pInit);
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <L6474_Init+0x94>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f001 f82f 	bl	800240c <L6474_SetDeviceParamsToGivenValues>
  }
  /* Disable L6474 powerstage */
  L6474_CmdDisable(l6474DriverInstance);
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <L6474_Init+0x94>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fd41 	bl	8000e3c <L6474_CmdDisable>

  /* Get Status to clear flags after start up */
  L6474_CmdGetStatus(l6474DriverInstance);
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <L6474_Init+0x94>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fe49 	bl	8001058 <L6474_CmdGetStatus>

  l6474DriverInstance++;
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <L6474_Init+0x94>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	3301      	adds	r3, #1
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	4b03      	ldr	r3, [pc, #12]	; (80013dc <L6474_Init+0x94>)
 80013d0:	801a      	strh	r2, [r3, #0]
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200003ee 	.word	0x200003ee

080013e0 <L6474_GetAcceleration>:
 * @brief Returns the acceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Acceleration in pps^2
 **********************************************************/
uint16_t L6474_GetAcceleration(uint8_t deviceId)
{                                                  
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].acceleration);
 80013ea:	79fa      	ldrb	r2, [r7, #7]
 80013ec:	4907      	ldr	r1, [pc, #28]	; (800140c <L6474_GetAcceleration+0x2c>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	440b      	add	r3, r1
 80013f8:	3318      	adds	r3, #24
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	b29b      	uxth	r3, r3
}            
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	200003f0 	.word	0x200003f0

08001410 <L6474_GetCurrentSpeed>:
 * @brief Returns the current speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Speed in pps
 **********************************************************/
uint16_t L6474_GetCurrentSpeed(uint8_t deviceId)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].speed;
 800141a:	79fa      	ldrb	r2, [r7, #7]
 800141c:	4907      	ldr	r1, [pc, #28]	; (800143c <L6474_GetCurrentSpeed+0x2c>)
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	440b      	add	r3, r1
 8001428:	3320      	adds	r3, #32
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	b29b      	uxth	r3, r3
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	200003f0 	.word	0x200003f0

08001440 <L6474_GetDeceleration>:
 * @brief Returns the deceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Deceleration in pps^2
 **********************************************************/
uint16_t L6474_GetDeceleration(uint8_t deviceId)
{                                                  
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].deceleration);
 800144a:	79fa      	ldrb	r2, [r7, #7]
 800144c:	4907      	ldr	r1, [pc, #28]	; (800146c <L6474_GetDeceleration+0x2c>)
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	440b      	add	r3, r1
 8001458:	331a      	adds	r3, #26
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	b29b      	uxth	r3, r3
}          
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	200003f0 	.word	0x200003f0

08001470 <L6474_GetDeviceState>:
 * @brief Returns the device state
 * @param[in] deviceId (from 0 to 2)
 * @retval State (ACCELERATING, DECELERATING, STEADY or INACTIVE)
 **********************************************************/
motorState_t L6474_GetDeviceState(uint8_t deviceId)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].motionState;
 800147a:	79fa      	ldrb	r2, [r7, #7]
 800147c:	4907      	ldr	r1, [pc, #28]	; (800149c <L6474_GetDeviceState+0x2c>)
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	440b      	add	r3, r1
 8001488:	3324      	adds	r3, #36	; 0x24
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b2db      	uxtb	r3, r3
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	200003f0 	.word	0x200003f0

080014a0 <L6474_GetDirection>:
 * @brief Get the motor current direction
 * @param[in] deviceId Unused parameter
 * @retval direction
 **********************************************************/
motorDir_t L6474_GetDirection(uint8_t deviceId)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].direction;
 80014aa:	79fa      	ldrb	r2, [r7, #7]
 80014ac:	4907      	ldr	r1, [pc, #28]	; (80014cc <L6474_GetDirection+0x2c>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	440b      	add	r3, r1
 80014b8:	3323      	adds	r3, #35	; 0x23
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	200003f0 	.word	0x200003f0

080014d0 <L6474_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval L6474_FW_VERSION
 **********************************************************/
uint32_t L6474_GetFwVersion(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return (L6474_FW_VERSION);
 80014d4:	f44f 3385 	mov.w	r3, #68096	; 0x10a00
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <L6474_GetMotorHandle>:
/******************************************************//**
 * @brief  Return motor handle (pointer to the L6474 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* L6474_GetMotorHandle(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return (&l6474Drv);
 80014e8:	4b02      	ldr	r3, [pc, #8]	; (80014f4 <L6474_GetMotorHandle+0x10>)
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	20000004 	.word	0x20000004

080014f8 <L6474_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t L6474_GetMark(uint8_t deviceId)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	2103      	movs	r1, #3
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fcb4 	bl	8000e74 <L6474_CmdGetParam>
 800150c:	4603      	mov	r3, r0
 800150e:	4618      	mov	r0, r3
 8001510:	f000 fede 	bl	80022d0 <L6474_ConvertPosition>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <L6474_GetMaxSpeed>:
 * @brief  Returns the max speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval maxSpeed in pps
 **********************************************************/
uint16_t L6474_GetMaxSpeed(uint8_t deviceId)
{                                                  
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].maxSpeed);
 800152a:	79fa      	ldrb	r2, [r7, #7]
 800152c:	4907      	ldr	r1, [pc, #28]	; (800154c <L6474_GetMaxSpeed+0x2c>)
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	331c      	adds	r3, #28
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	b29b      	uxth	r3, r3
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	200003f0 	.word	0x200003f0

08001550 <L6474_GetMinSpeed>:
 * @brief  Returns the min speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval minSpeed in pps
 **********************************************************/
uint16_t L6474_GetMinSpeed(uint8_t deviceId)
{                                                  
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].minSpeed);
 800155a:	79fa      	ldrb	r2, [r7, #7]
 800155c:	4907      	ldr	r1, [pc, #28]	; (800157c <L6474_GetMinSpeed+0x2c>)
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	440b      	add	r3, r1
 8001568:	331e      	adds	r3, #30
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	b29b      	uxth	r3, r3
}                                                     
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	200003f0 	.word	0x200003f0

08001580 <L6474_GetNbDevices>:
/******************************************************//**
 * @brief  Returns the number of devices
 * @retval number of devices
 **********************************************************/
uint8_t L6474_GetNbDevices(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return (numberOfDevices);
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <L6474_GetNbDevices+0x14>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	200003d0 	.word	0x200003d0

08001598 <L6474_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t L6474_GetPosition(uint8_t deviceId)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	2101      	movs	r1, #1
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fc64 	bl	8000e74 <L6474_CmdGetParam>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 fe8e 	bl	80022d0 <L6474_ConvertPosition>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <L6474_GetStepMode>:
 * @brief Get the motor step mode
 * @param[in] deviceId Unused parameter
 * @retval step mode
 **********************************************************/
motorStepMode_t L6474_GetStepMode(uint8_t deviceId)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  motorStepMode_t stepMode;
  uint8_t stepSelValue;
  
  /* Get STEP_SEL field of step mode register  */
  stepSelValue = (uint8_t)((0x07 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE))|0x08) ;
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2116      	movs	r1, #22
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fc50 	bl	8000e74 <L6474_CmdGetParam>
 80015d4:	4603      	mov	r3, r0
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f043 0308 	orr.w	r3, r3, #8
 80015e2:	73bb      	strb	r3, [r7, #14]
  
   switch (stepSelValue)
 80015e4:	7bbb      	ldrb	r3, [r7, #14]
 80015e6:	3b08      	subs	r3, #8
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d81c      	bhi.n	8001626 <L6474_GetStepMode+0x66>
 80015ec:	a201      	add	r2, pc, #4	; (adr r2, 80015f4 <L6474_GetStepMode+0x34>)
 80015ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f2:	bf00      	nop
 80015f4:	08001609 	.word	0x08001609
 80015f8:	0800160f 	.word	0x0800160f
 80015fc:	08001615 	.word	0x08001615
 8001600:	0800161b 	.word	0x0800161b
 8001604:	08001621 	.word	0x08001621
  {
    case L6474_STEP_SEL_1:
      stepMode = STEP_MODE_FULL;
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]
      break;
 800160c:	e00e      	b.n	800162c <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_2:
      stepMode = STEP_MODE_HALF;
 800160e:	2301      	movs	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
      break;    
 8001612:	e00b      	b.n	800162c <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_4:
      stepMode = STEP_MODE_1_4;
 8001614:	2302      	movs	r3, #2
 8001616:	73fb      	strb	r3, [r7, #15]
      break;        
 8001618:	e008      	b.n	800162c <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_8:
      stepMode = STEP_MODE_1_8;
 800161a:	2303      	movs	r3, #3
 800161c:	73fb      	strb	r3, [r7, #15]
      break;       
 800161e:	e005      	b.n	800162c <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_16:
      stepMode = STEP_MODE_1_16;
 8001620:	2304      	movs	r3, #4
 8001622:	73fb      	strb	r3, [r7, #15]
      break;
 8001624:	e002      	b.n	800162c <L6474_GetStepMode+0x6c>
    default:
      stepMode = STEP_MODE_UNKNOW;
 8001626:	23fe      	movs	r3, #254	; 0xfe
 8001628:	73fb      	strb	r3, [r7, #15]
      break;       
 800162a:	bf00      	nop
  }
  
  return stepMode;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop

08001638 <L6474_GetStopMode>:
 * @brief Get the selected stop mode
 * @param[in] deviceId Unused parameter
 * @retval the selected stop mode
 **********************************************************/
motorStopMode_t L6474_GetStopMode(uint8_t deviceId)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].stopMode;
 8001642:	79fa      	ldrb	r2, [r7, #7]
 8001644:	4907      	ldr	r1, [pc, #28]	; (8001664 <L6474_GetStopMode+0x2c>)
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	440b      	add	r3, r1
 8001650:	3325      	adds	r3, #37	; 0x25
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	b2db      	uxtb	r3, r3
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	200003f0 	.word	0x200003f0

08001668 <L6474_GoHome>:
 * @brief  Requests the motor to move to the home position (ABS_POSITION = 0)
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoHome(uint8_t deviceId)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  L6474_GoTo(deviceId, 0);
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f81e 	bl	80016b8 <L6474_GoTo>
} 
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <L6474_GoMark>:
 * @brief  Requests the motor to move to the mark position 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoMark(uint8_t deviceId)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  uint32_t mark;

  mark = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2103      	movs	r1, #3
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fbee 	bl	8000e74 <L6474_CmdGetParam>
 8001698:	4603      	mov	r3, r0
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fe18 	bl	80022d0 <L6474_ConvertPosition>
 80016a0:	4603      	mov	r3, r0
 80016a2:	60fb      	str	r3, [r7, #12]
  L6474_GoTo(deviceId,mark);  
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	4611      	mov	r1, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f804 	bl	80016b8 <L6474_GoTo>
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <L6474_GoTo>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] targetPosition absolute position in steps
 * @retval None
 **********************************************************/
void L6474_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
  motorDir_t direction;
  int32_t steps;
  
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 80016c4:	79fa      	ldrb	r2, [r7, #7]
 80016c6:	493a      	ldr	r1, [pc, #232]	; (80017b0 <L6474_GoTo+0xf8>)
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	440b      	add	r3, r1
 80016d2:	3324      	adds	r3, #36	; 0x24
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d003      	beq.n	80016e4 <L6474_GoTo+0x2c>
  {
    L6474_HardStop(deviceId);
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f868 	bl	80017b4 <L6474_HardStop>
  }

  /* Get current position */
  devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	2101      	movs	r1, #1
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fbc3 	bl	8000e74 <L6474_CmdGetParam>
 80016ee:	4603      	mov	r3, r0
 80016f0:	79fc      	ldrb	r4, [r7, #7]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fdec 	bl	80022d0 <L6474_ConvertPosition>
 80016f8:	4602      	mov	r2, r0
 80016fa:	492d      	ldr	r1, [pc, #180]	; (80017b0 <L6474_GoTo+0xf8>)
 80016fc:	4623      	mov	r3, r4
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4423      	add	r3, r4
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	3304      	adds	r3, #4
 8001708:	601a      	str	r2, [r3, #0]
  
  /* Compute the number of steps to perform */
  steps = targetPosition - devicePrm[deviceId].currentPosition;
 800170a:	79fa      	ldrb	r2, [r7, #7]
 800170c:	4928      	ldr	r1, [pc, #160]	; (80017b0 <L6474_GoTo+0xf8>)
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	440b      	add	r3, r1
 8001718:	3304      	adds	r3, #4
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	60bb      	str	r3, [r7, #8]
  
  if (steps >= 0) 
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0c      	blt.n	8001742 <L6474_GoTo+0x8a>
  {
    devicePrm[deviceId].stepsToTake = steps;
 8001728:	79fa      	ldrb	r2, [r7, #7]
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	4820      	ldr	r0, [pc, #128]	; (80017b0 <L6474_GoTo+0xf8>)
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4403      	add	r3, r0
 8001738:	3314      	adds	r3, #20
 800173a:	6019      	str	r1, [r3, #0]
    direction = FORWARD;
 800173c:	2301      	movs	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e00d      	b.n	800175e <L6474_GoTo+0xa6>
    
  } 
  else 
  {
    devicePrm[deviceId].stepsToTake = -steps;
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	425b      	negs	r3, r3
 8001746:	79fa      	ldrb	r2, [r7, #7]
 8001748:	4618      	mov	r0, r3
 800174a:	4919      	ldr	r1, [pc, #100]	; (80017b0 <L6474_GoTo+0xf8>)
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	440b      	add	r3, r1
 8001756:	3314      	adds	r3, #20
 8001758:	6018      	str	r0, [r3, #0]
    direction = BACKWARD;
 800175a:	2300      	movs	r3, #0
 800175c:	73fb      	strb	r3, [r7, #15]
  }
  
  if (steps != 0) 
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d021      	beq.n	80017a8 <L6474_GoTo+0xf0>
  {
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 8001764:	79fa      	ldrb	r2, [r7, #7]
 8001766:	4912      	ldr	r1, [pc, #72]	; (80017b0 <L6474_GoTo+0xf8>)
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	440b      	add	r3, r1
 8001772:	3322      	adds	r3, #34	; 0x22
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
        
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 8001778:	7bfa      	ldrb	r2, [r7, #15]
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f000 fb48 	bl	8001e14 <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, devicePrm[deviceId].stepsToTake);
 8001784:	79fa      	ldrb	r2, [r7, #7]
 8001786:	490a      	ldr	r1, [pc, #40]	; (80017b0 <L6474_GoTo+0xf8>)
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	3314      	adds	r3, #20
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f000 fcda 	bl	8002154 <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 f8ea 	bl	800297c <L6474_StartMovement>
  }  
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd90      	pop	{r4, r7, pc}
 80017b0:	200003f0 	.word	0x200003f0

080017b4 <L6474_HardStop>:
 * @brief  Immediatly stops the motor 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HardStop(uint8_t deviceId) 
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  if (devicePrm[deviceId].stopMode == HOLD_MODE)
 80017be:	79fa      	ldrb	r2, [r7, #7]
 80017c0:	4920      	ldr	r1, [pc, #128]	; (8001844 <L6474_HardStop+0x90>)
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	440b      	add	r3, r1
 80017cc:	3325      	adds	r3, #37	; 0x25
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d12d      	bne.n	8001832 <L6474_HardStop+0x7e>
  {
    /* Disable corresponding PWM */
    L6474_Board_PwmStop(deviceId);
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fe5d 	bl	8004498 <L6474_Board_PwmStop>

    /* Set inactive state */
    devicePrm[deviceId].motionState = INACTIVE;
 80017de:	79fa      	ldrb	r2, [r7, #7]
 80017e0:	4918      	ldr	r1, [pc, #96]	; (8001844 <L6474_HardStop+0x90>)
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	440b      	add	r3, r1
 80017ec:	3324      	adds	r3, #36	; 0x24
 80017ee:	2208      	movs	r2, #8
 80017f0:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].commandExecuted = NO_CMD;
 80017f2:	79fa      	ldrb	r2, [r7, #7]
 80017f4:	4913      	ldr	r1, [pc, #76]	; (8001844 <L6474_HardStop+0x90>)
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	440b      	add	r3, r1
 8001800:	3322      	adds	r3, #34	; 0x22
 8001802:	2203      	movs	r2, #3
 8001804:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8001806:	79fa      	ldrb	r2, [r7, #7]
 8001808:	490e      	ldr	r1, [pc, #56]	; (8001844 <L6474_HardStop+0x90>)
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	440b      	add	r3, r1
 8001814:	3314      	adds	r3, #20
 8001816:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800181a:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].speed = 0;
 800181c:	79fa      	ldrb	r2, [r7, #7]
 800181e:	4909      	ldr	r1, [pc, #36]	; (8001844 <L6474_HardStop+0x90>)
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	440b      	add	r3, r1
 800182a:	3320      	adds	r3, #32
 800182c:	2200      	movs	r2, #0
 800182e:	801a      	strh	r2, [r3, #0]
  else
  {
    //same handling for HIZ_MODE and STANDBY_MODE
    L6474_HizStop(deviceId);
  }
}
 8001830:	e003      	b.n	800183a <L6474_HardStop+0x86>
    L6474_HizStop(deviceId);
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	4618      	mov	r0, r3
 8001836:	f000 f807 	bl	8001848 <L6474_HizStop>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200003f0 	.word	0x200003f0

08001848 <L6474_HizStop>:
 * @brief  Immediatly stops the motor and disable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HizStop(uint8_t deviceId) 
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
  /* Disable corresponding PWM */
  L6474_Board_PwmStop(deviceId);
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	4618      	mov	r0, r3
 8001856:	f002 fe1f 	bl	8004498 <L6474_Board_PwmStop>

  /* Disable power stage */
  L6474_CmdDisable(deviceId);
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff faed 	bl	8000e3c <L6474_CmdDisable>

  /* Set inactive state */
  devicePrm[deviceId].motionState = INACTIVE;
 8001862:	79fa      	ldrb	r2, [r7, #7]
 8001864:	4915      	ldr	r1, [pc, #84]	; (80018bc <L6474_HizStop+0x74>)
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	3324      	adds	r3, #36	; 0x24
 8001872:	2208      	movs	r2, #8
 8001874:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8001876:	79fa      	ldrb	r2, [r7, #7]
 8001878:	4910      	ldr	r1, [pc, #64]	; (80018bc <L6474_HizStop+0x74>)
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	3322      	adds	r3, #34	; 0x22
 8001886:	2203      	movs	r2, #3
 8001888:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 800188a:	79fa      	ldrb	r2, [r7, #7]
 800188c:	490b      	ldr	r1, [pc, #44]	; (80018bc <L6474_HizStop+0x74>)
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	3314      	adds	r3, #20
 800189a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800189e:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 80018a0:	79fa      	ldrb	r2, [r7, #7]
 80018a2:	4906      	ldr	r1, [pc, #24]	; (80018bc <L6474_HizStop+0x74>)
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	440b      	add	r3, r1
 80018ae:	3320      	adds	r3, #32
 80018b0:	2200      	movs	r2, #0
 80018b2:	801a      	strh	r2, [r3, #0]
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200003f0 	.word	0x200003f0

080018c0 <L6474_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void L6474_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	603a      	str	r2, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
 80018cc:	460b      	mov	r3, r1
 80018ce:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 80018d0:	79fa      	ldrb	r2, [r7, #7]
 80018d2:	4926      	ldr	r1, [pc, #152]	; (800196c <L6474_Move+0xac>)
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	440b      	add	r3, r1
 80018de:	3324      	adds	r3, #36	; 0x24
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d003      	beq.n	80018f0 <L6474_Move+0x30>
  {
    L6474_HardStop(deviceId);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff62 	bl	80017b4 <L6474_HardStop>
  }
  
  if (stepCount != 0) 
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d035      	beq.n	8001962 <L6474_Move+0xa2>
  {
    devicePrm[deviceId].stepsToTake = stepCount;
 80018f6:	79fa      	ldrb	r2, [r7, #7]
 80018f8:	491c      	ldr	r1, [pc, #112]	; (800196c <L6474_Move+0xac>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	440b      	add	r3, r1
 8001904:	3314      	adds	r3, #20
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	601a      	str	r2, [r3, #0]
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 800190a:	79fa      	ldrb	r2, [r7, #7]
 800190c:	4917      	ldr	r1, [pc, #92]	; (800196c <L6474_Move+0xac>)
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	3322      	adds	r3, #34	; 0x22
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
    
    devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2101      	movs	r1, #1
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff faa6 	bl	8000e74 <L6474_CmdGetParam>
 8001928:	4603      	mov	r3, r0
 800192a:	79fc      	ldrb	r4, [r7, #7]
 800192c:	4618      	mov	r0, r3
 800192e:	f000 fccf 	bl	80022d0 <L6474_ConvertPosition>
 8001932:	4602      	mov	r2, r0
 8001934:	490d      	ldr	r1, [pc, #52]	; (800196c <L6474_Move+0xac>)
 8001936:	4623      	mov	r3, r4
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4423      	add	r3, r4
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	440b      	add	r3, r1
 8001940:	3304      	adds	r3, #4
 8001942:	601a      	str	r2, [r3, #0]
    
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 8001944:	79ba      	ldrb	r2, [r7, #6]
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	4611      	mov	r1, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f000 fa62 	bl	8001e14 <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, stepCount);
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	6839      	ldr	r1, [r7, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fbfd 	bl	8002154 <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f001 f80d 	bl	800297c <L6474_StartMovement>
  }  
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	bf00      	nop
 800196c:	200003f0 	.word	0x200003f0

08001970 <L6474_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the l6474 Driver Instance
 **********************************************************/
uint16_t L6474_ReadId(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return(l6474DriverInstance);
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <L6474_ReadId+0x14>)
 8001976:	881b      	ldrh	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	200003ee 	.word	0x200003ee

08001988 <L6474_ReadStatusRegister>:
 * @retval Status register valued
 * @note The status register flags are not cleared 
 * at the difference with L6474CmdGetStatus()
 **********************************************************/
uint16_t L6474_ReadStatusRegister(uint8_t deviceId)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
  return (L6474_CmdGetParam(deviceId,L6474_STATUS));
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	2119      	movs	r1, #25
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fa6c 	bl	8000e74 <L6474_CmdGetParam>
 800199c:	4603      	mov	r3, r0
 800199e:	b29b      	uxth	r3, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <L6474_ReleaseReset>:
/******************************************************//**
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @retval None
 **********************************************************/
void L6474_ReleaseReset(uint8_t deviceId)
{ 
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  L6474_Board_ReleaseReset(deviceId); 
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 fd99 	bl	80044ec <L6474_Board_ReleaseReset>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <L6474_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Reset(uint8_t deviceId)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  L6474_Board_Reset(deviceId); 
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f002 fd9e 	bl	8004510 <L6474_Board_Reset>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <L6474_ResetAllDevices>:
/******************************************************//**
 * @brief Resets all L6474 devices
 * @retval None
 **********************************************************/
void L6474_ResetAllDevices(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 	uint8_t loop;
 	
 	for (loop = 0; loop < numberOfDevices; loop++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	71fb      	strb	r3, [r7, #7]
 80019e6:	e014      	b.n	8001a12 <L6474_ResetAllDevices+0x36>
 	{
   	/* Stop movement and disable power stage*/
  	L6474_HizStop(loop);
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff ff2c 	bl	8001848 <L6474_HizStop>
    L6474_Reset(loop);
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ffe5 	bl	80019c2 <L6474_Reset>
    L6474_Board_Delay(1); // Reset pin must be forced low for at least 10us
 80019f8:	2001      	movs	r0, #1
 80019fa:	f002 fbaf 	bl	800415c <L6474_Board_Delay>
    L6474_Board_ReleaseReset(loop);
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f002 fd73 	bl	80044ec <L6474_Board_ReleaseReset>
    L6474_Board_Delay(1); 
 8001a06:	2001      	movs	r0, #1
 8001a08:	f002 fba8 	bl	800415c <L6474_Board_Delay>
 	for (loop = 0; loop < numberOfDevices; loop++)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	71fb      	strb	r3, [r7, #7]
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <L6474_ResetAllDevices+0x4c>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	79fa      	ldrb	r2, [r7, #7]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d3e4      	bcc.n	80019e8 <L6474_ResetAllDevices+0xc>
  }
}
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200003d0 	.word	0x200003d0

08001a2c <L6474_Run>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] direction FORWARD or BACKWARD
 * @retval None
 **********************************************************/
void L6474_Run(uint8_t deviceId, motorDir_t direction)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	460a      	mov	r2, r1
 8001a36:	71fb      	strb	r3, [r7, #7]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001a3c:	79fa      	ldrb	r2, [r7, #7]
 8001a3e:	4913      	ldr	r1, [pc, #76]	; (8001a8c <L6474_Run+0x60>)
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	440b      	add	r3, r1
 8001a4a:	3324      	adds	r3, #36	; 0x24
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d003      	beq.n	8001a5c <L6474_Run+0x30>
  {
    L6474_HardStop(deviceId);
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff feac 	bl	80017b4 <L6474_HardStop>
  }
  
	/* Direction setup */
	L6474_SetDirection(deviceId,direction);
 8001a5c:	79ba      	ldrb	r2, [r7, #6]
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f9d6 	bl	8001e14 <L6474_SetDirection>

	devicePrm[deviceId].commandExecuted = RUN_CMD;
 8001a68:	79fa      	ldrb	r2, [r7, #7]
 8001a6a:	4908      	ldr	r1, [pc, #32]	; (8001a8c <L6474_Run+0x60>)
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	440b      	add	r3, r1
 8001a76:	3322      	adds	r3, #34	; 0x22
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]

	/* Motor activation */
	L6474_StartMovement(deviceId); 
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 ff7c 	bl	800297c <L6474_StartMovement>
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200003f0 	.word	0x200003f0

08001a90 <L6474_SelectStepMode>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] stepMod from full step to 1/16 microstep as specified in enum motorStepMode_t
 * @retval None
 **********************************************************/
bool L6474_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMod)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	71fb      	strb	r3, [r7, #7]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  L6474_STEP_SEL_t l6474StepMod;
  
  switch (stepMod)
 8001aa0:	79bb      	ldrb	r3, [r7, #6]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d816      	bhi.n	8001ad4 <L6474_SelectStepMode+0x44>
 8001aa6:	a201      	add	r2, pc, #4	; (adr r2, 8001aac <L6474_SelectStepMode+0x1c>)
 8001aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aac:	08001abd 	.word	0x08001abd
 8001ab0:	08001ac3 	.word	0x08001ac3
 8001ab4:	08001ac9 	.word	0x08001ac9
 8001ab8:	08001acf 	.word	0x08001acf
  {
    case STEP_MODE_FULL:
      l6474StepMod = L6474_STEP_SEL_1;
 8001abc:	2308      	movs	r3, #8
 8001abe:	73fb      	strb	r3, [r7, #15]
      break;
 8001ac0:	e00b      	b.n	8001ada <L6474_SelectStepMode+0x4a>
    case STEP_MODE_HALF:
      l6474StepMod = L6474_STEP_SEL_1_2;
 8001ac2:	2309      	movs	r3, #9
 8001ac4:	73fb      	strb	r3, [r7, #15]
      break;    
 8001ac6:	e008      	b.n	8001ada <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_4:
      l6474StepMod = L6474_STEP_SEL_1_4;
 8001ac8:	230a      	movs	r3, #10
 8001aca:	73fb      	strb	r3, [r7, #15]
      break;        
 8001acc:	e005      	b.n	8001ada <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_8:
      l6474StepMod = L6474_STEP_SEL_1_8;
 8001ace:	230b      	movs	r3, #11
 8001ad0:	73fb      	strb	r3, [r7, #15]
      break;       
 8001ad2:	e002      	b.n	8001ada <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_16:
    default:
      l6474StepMod = L6474_STEP_SEL_1_16;
 8001ad4:	230c      	movs	r3, #12
 8001ad6:	73fb      	strb	r3, [r7, #15]
      break;       
 8001ad8:	bf00      	nop
  }

  /* Deactivate motor*/
  L6474_HizStop(deviceId);
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff feb3 	bl	8001848 <L6474_HizStop>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE)) ;
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	2116      	movs	r1, #22
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f9c4 	bl	8000e74 <L6474_CmdGetParam>
 8001aec:	4603      	mov	r3, r0
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f023 0307 	bic.w	r3, r3, #7
 8001af4:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  L6474_CmdSetParam(deviceId, L6474_STEP_MODE, stepModeRegister | (uint8_t)l6474StepMod);
 8001af6:	7bba      	ldrb	r2, [r7, #14]
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	2116      	movs	r1, #22
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fb3b 	bl	8001180 <L6474_CmdSetParam>

  /* Reset abs pos register */
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, 0);
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2101      	movs	r1, #1
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fb35 	bl	8001180 <L6474_CmdSetParam>
  
  return (1);
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <L6474_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	460a      	mov	r2, r1
 8001b2a:	71fb      	strb	r3, [r7, #7]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]
  if ((newAcc != 0)&&
 8001b34:	88bb      	ldrh	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d023      	beq.n	8001b82 <L6474_SetAcceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001b3a:	79fa      	ldrb	r2, [r7, #7]
 8001b3c:	4914      	ldr	r1, [pc, #80]	; (8001b90 <L6474_SetAcceleration+0x70>)
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	3324      	adds	r3, #36	; 0x24
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b2db      	uxtb	r3, r3
  if ((newAcc != 0)&&
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d00b      	beq.n	8001b6a <L6474_SetAcceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001b52:	79fa      	ldrb	r2, [r7, #7]
 8001b54:	490e      	ldr	r1, [pc, #56]	; (8001b90 <L6474_SetAcceleration+0x70>)
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	3322      	adds	r3, #34	; 0x22
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10b      	bne.n	8001b82 <L6474_SetAcceleration+0x62>
  {
    devicePrm[deviceId].acceleration = newAcc;
 8001b6a:	79fa      	ldrb	r2, [r7, #7]
 8001b6c:	4908      	ldr	r1, [pc, #32]	; (8001b90 <L6474_SetAcceleration+0x70>)
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	440b      	add	r3, r1
 8001b78:	3318      	adds	r3, #24
 8001b7a:	88ba      	ldrh	r2, [r7, #4]
 8001b7c:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	73fb      	strb	r3, [r7, #15]
  }    
  return cmdExecuted;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
}            
 8001b84:	4618      	mov	r0, r3
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	200003f0 	.word	0x200003f0

08001b94 <L6474_SetAnalogValue>:
 * L6474_TVAL, L6474_TON_MIN, L6474_TOFF_MIN, L6474_OCD_TH)
 * @param[in] value Analog value to convert and set into the register
 * @retval TRUE if param and param is valid, FALSE otherwise
 *********************************************************/
bool L6474_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	74fb      	strb	r3, [r7, #19]
  if ((value < 0)&&(param != L6474_ABS_POS)&&(param != L6474_MARK)) 
 8001ba8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	d508      	bpl.n	8001bc8 <L6474_SetAnalogValue+0x34>
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d005      	beq.n	8001bc8 <L6474_SetAnalogValue+0x34>
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d002      	beq.n	8001bc8 <L6474_SetAnalogValue+0x34>
  {
    result = FALSE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	74fb      	strb	r3, [r7, #19]
 8001bc6:	e0d9      	b.n	8001d7c <L6474_SetAnalogValue+0x1e8>
  }
  else
  {
    switch (param)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	2b12      	cmp	r3, #18
 8001bce:	f200 80ca 	bhi.w	8001d66 <L6474_SetAnalogValue+0x1d2>
 8001bd2:	a201      	add	r2, pc, #4	; (adr r2, 8001bd8 <L6474_SetAnalogValue+0x44>)
 8001bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd8:	08001c8b 	.word	0x08001c8b
 8001bdc:	08001c25 	.word	0x08001c25
 8001be0:	08001c8b 	.word	0x08001c8b
 8001be4:	08001d67 	.word	0x08001d67
 8001be8:	08001d67 	.word	0x08001d67
 8001bec:	08001d67 	.word	0x08001d67
 8001bf0:	08001d67 	.word	0x08001d67
 8001bf4:	08001d67 	.word	0x08001d67
 8001bf8:	08001cf5 	.word	0x08001cf5
 8001bfc:	08001d67 	.word	0x08001d67
 8001c00:	08001d67 	.word	0x08001d67
 8001c04:	08001d67 	.word	0x08001d67
 8001c08:	08001d67 	.word	0x08001d67
 8001c0c:	08001d67 	.word	0x08001d67
 8001c10:	08001d41 	.word	0x08001d41
 8001c14:	08001d41 	.word	0x08001d41
 8001c18:	08001d67 	.word	0x08001d67
 8001c1c:	08001d67 	.word	0x08001d67
 8001c20:	08001d1b 	.word	0x08001d1b
    {
      case L6474_EL_POS:
        if  ((value !=0)&&
 8001c24:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c30:	d021      	beq.n	8001c76 <L6474_SetAnalogValue+0xe2>
 8001c32:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c36:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001d88 <L6474_SetAnalogValue+0x1f4>
 8001c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c42:	dc15      	bgt.n	8001c70 <L6474_SetAnalogValue+0xdc>
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
             (value < (1<<(7-(L6474_STEP_MODE_STEP_SEL & L6474_CmdGetParam(0,L6474_STEP_MODE)))))))
 8001c44:	2116      	movs	r1, #22
 8001c46:	2000      	movs	r0, #0
 8001c48:	f7ff f914 	bl	8000e74 <L6474_CmdGetParam>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	2201      	movs	r2, #1
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
 8001c62:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6e:	d502      	bpl.n	8001c76 <L6474_SetAnalogValue+0xe2>
        {
          result = FALSE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
        }
        break;
 8001c74:	e079      	b.n	8001d6a <L6474_SetAnalogValue+0x1d6>
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
 8001c76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c7e:	ee17 3a90 	vmov	r3, s15
 8001c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c86:	617b      	str	r3, [r7, #20]
        break;
 8001c88:	e06f      	b.n	8001d6a <L6474_SetAnalogValue+0x1d6>
      case L6474_ABS_POS:
      case L6474_MARK:
        if ((value >= L6474_MIN_POSITION) &&
 8001c8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c8e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001d8c <L6474_SetAnalogValue+0x1f8>
 8001c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9a:	db27      	blt.n	8001cec <L6474_SetAnalogValue+0x158>
 8001c9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ca0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001d90 <L6474_SetAnalogValue+0x1fc>
 8001ca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cac:	d81e      	bhi.n	8001cec <L6474_SetAnalogValue+0x158>
            (value <= L6474_MAX_POSITION))
        {
          if (value >= 0)
 8001cae:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cba:	db09      	blt.n	8001cd0 <L6474_SetAnalogValue+0x13c>
          {
            registerValue = ((uint32_t) value)& L6474_ABS_POS_VALUE_MASK;
 8001cbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cc4:	ee17 3a90 	vmov	r3, s15
 8001cc8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001ccc:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001cce:	e010      	b.n	8001cf2 <L6474_SetAnalogValue+0x15e>
          }
          else
          {
            registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-value))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001cd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cd4:	eef1 7a67 	vneg.f32	s15, s15
 8001cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cdc:	ee17 3a90 	vmov	r3, s15
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001cea:	e002      	b.n	8001cf2 <L6474_SetAnalogValue+0x15e>
          }
        }
        else 
        {
          result = FALSE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	74fb      	strb	r3, [r7, #19]
        }
        break;
 8001cf0:	e03b      	b.n	8001d6a <L6474_SetAnalogValue+0x1d6>
 8001cf2:	e03a      	b.n	8001d6a <L6474_SetAnalogValue+0x1d6>
      case L6474_TVAL:
        if (value > L6474_TVAL_MAX_VALUE)
 8001cf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cf8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001d94 <L6474_SetAnalogValue+0x200>
 8001cfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d04:	dd02      	ble.n	8001d0c <L6474_SetAnalogValue+0x178>
        {
          result = FALSE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tval_Current_to_Par(value);
        }
        break;
 8001d0a:	e02e      	b.n	8001d6a <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tval_Current_to_Par(value);
 8001d0c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d10:	f001 f98a 	bl	8003028 <L6474_Tval_Current_to_Par>
 8001d14:	4603      	mov	r3, r0
 8001d16:	617b      	str	r3, [r7, #20]
        break;
 8001d18:	e027      	b.n	8001d6a <L6474_SetAnalogValue+0x1d6>
      case L6474_OCD_TH:
        if (value > L6474_OCD_TH_MAX_VALUE)
 8001d1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d1e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001d98 <L6474_SetAnalogValue+0x204>
 8001d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2a:	dd02      	ble.n	8001d32 <L6474_SetAnalogValue+0x19e>
        {
          result = FALSE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	74fb      	strb	r3, [r7, #19]
        }
        else 
        {
          registerValue = L6474_Ocd_Th_to_Par(value);
        }
        break;
 8001d30:	e01b      	b.n	8001d6a <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Ocd_Th_to_Par(value);
 8001d32:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d36:	f001 f953 	bl	8002fe0 <L6474_Ocd_Th_to_Par>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	617b      	str	r3, [r7, #20]
        break;
 8001d3e:	e014      	b.n	8001d6a <L6474_SetAnalogValue+0x1d6>
      case L6474_TON_MIN:
      case L6474_TOFF_MIN:
        if (value > L6474_TOFF_TON_MIN_MAX_VALUE)
 8001d40:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d44:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001d9c <L6474_SetAnalogValue+0x208>
 8001d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d50:	dd02      	ble.n	8001d58 <L6474_SetAnalogValue+0x1c4>
        {
          result = FALSE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tmin_Time_to_Par(value);
        }
        break;    
 8001d56:	e008      	b.n	8001d6a <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tmin_Time_to_Par(value);
 8001d58:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d5c:	f001 f988 	bl	8003070 <L6474_Tmin_Time_to_Par>
 8001d60:	4603      	mov	r3, r0
 8001d62:	617b      	str	r3, [r7, #20]
        break;    
 8001d64:	e001      	b.n	8001d6a <L6474_SetAnalogValue+0x1d6>
      default:
        result = FALSE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	74fb      	strb	r3, [r7, #19]
    }
    if (result != FALSE)
 8001d6a:	7cfb      	ldrb	r3, [r7, #19]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <L6474_SetAnalogValue+0x1e8>
    {
      L6474_CmdSetParam(deviceId, param, registerValue);
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fa02 	bl	8001180 <L6474_CmdSetParam>
    }
  }
  return result;
 8001d7c:	7cfb      	ldrb	r3, [r7, #19]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	43ff8000 	.word	0x43ff8000
 8001d8c:	ca000000 	.word	0xca000000
 8001d90:	49fffff8 	.word	0x49fffff8
 8001d94:	457a0000 	.word	0x457a0000
 8001d98:	45bb8000 	.word	0x45bb8000
 8001d9c:	42800000 	.word	0x42800000

08001da0 <L6474_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	460a      	mov	r2, r1
 8001daa:	71fb      	strb	r3, [r7, #7]
 8001dac:	4613      	mov	r3, r2
 8001dae:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	73fb      	strb	r3, [r7, #15]
  if ((newDec != 0)&& 
 8001db4:	88bb      	ldrh	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d023      	beq.n	8001e02 <L6474_SetDeceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001dba:	79fa      	ldrb	r2, [r7, #7]
 8001dbc:	4914      	ldr	r1, [pc, #80]	; (8001e10 <L6474_SetDeceleration+0x70>)
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3324      	adds	r3, #36	; 0x24
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	b2db      	uxtb	r3, r3
  if ((newDec != 0)&& 
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d00b      	beq.n	8001dea <L6474_SetDeceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001dd2:	79fa      	ldrb	r2, [r7, #7]
 8001dd4:	490e      	ldr	r1, [pc, #56]	; (8001e10 <L6474_SetDeceleration+0x70>)
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	3322      	adds	r3, #34	; 0x22
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10b      	bne.n	8001e02 <L6474_SetDeceleration+0x62>
  {
    devicePrm[deviceId].deceleration = newDec;
 8001dea:	79fa      	ldrb	r2, [r7, #7]
 8001dec:	4908      	ldr	r1, [pc, #32]	; (8001e10 <L6474_SetDeceleration+0x70>)
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	440b      	add	r3, r1
 8001df8:	331a      	adds	r3, #26
 8001dfa:	88ba      	ldrh	r2, [r7, #4]
 8001dfc:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	73fb      	strb	r3, [r7, #15]
  }      
  return cmdExecuted;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
}        
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	200003f0 	.word	0x200003f0

08001e14 <L6474_SetDirection>:
 * @note The direction change is only applied if the device 
 * is in INACTIVE state
 * @retval None
 **********************************************************/
void L6474_SetDirection(uint8_t deviceId, motorDir_t dir)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	460a      	mov	r2, r1
 8001e1e:	71fb      	strb	r3, [r7, #7]
 8001e20:	4613      	mov	r3, r2
 8001e22:	71bb      	strb	r3, [r7, #6]
  if (devicePrm[deviceId].motionState == INACTIVE)
 8001e24:	79fa      	ldrb	r2, [r7, #7]
 8001e26:	490f      	ldr	r1, [pc, #60]	; (8001e64 <L6474_SetDirection+0x50>)
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	440b      	add	r3, r1
 8001e32:	3324      	adds	r3, #36	; 0x24
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d10f      	bne.n	8001e5c <L6474_SetDirection+0x48>
  {
    devicePrm[deviceId].direction = dir;
 8001e3c:	79fa      	ldrb	r2, [r7, #7]
 8001e3e:	4909      	ldr	r1, [pc, #36]	; (8001e64 <L6474_SetDirection+0x50>)
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	440b      	add	r3, r1
 8001e4a:	3323      	adds	r3, #35	; 0x23
 8001e4c:	79ba      	ldrb	r2, [r7, #6]
 8001e4e:	701a      	strb	r2, [r3, #0]
    L6474_Board_SetDirectionGpio(deviceId, dir);
 8001e50:	79ba      	ldrb	r2, [r7, #6]
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f002 fb6c 	bl	8004534 <L6474_Board_SetDirectionGpio>
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	200003f0 	.word	0x200003f0

08001e68 <L6474_SetHome>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new home position
 * @retval None
 **********************************************************/
void L6474_SetHome(uint8_t deviceId, int32_t homePos)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	71fb      	strb	r3, [r7, #7]
  int32_t absHomePos = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS)) - homePos;
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	2101      	movs	r1, #1
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fffb 	bl	8000e74 <L6474_CmdGetParam>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fa25 	bl	80022d0 <L6474_ConvertPosition>
 8001e86:	4602      	mov	r2, r0
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	60bb      	str	r3, [r7, #8]
  uint32_t registerValue;
  
  if (absHomePos >= 0)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	db04      	blt.n	8001e9e <L6474_SetHome+0x36>
  {
    registerValue = ((uint32_t) absHomePos)& L6474_ABS_POS_VALUE_MASK;
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	e005      	b.n	8001eaa <L6474_SetHome+0x42>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-absHomePos))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	60fb      	str	r3, [r7, #12]
  }
 
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, registerValue);
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	2101      	movs	r1, #1
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff f965 	bl	8001180 <L6474_CmdSetParam>
}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <L6474_SetMark>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new Mark position
 * @retval None
 **********************************************************/
void L6474_SetMark(uint8_t deviceId, int32_t markPos)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	6039      	str	r1, [r7, #0]
 8001ec8:	71fb      	strb	r3, [r7, #7]
  uint32_t registerValue;
  if (markPos >= 0)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	db04      	blt.n	8001eda <L6474_SetMark+0x1c>
  {
    registerValue = ((uint32_t) markPos)& L6474_ABS_POS_VALUE_MASK;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	e005      	b.n	8001ee6 <L6474_SetMark+0x28>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-markPos))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
  }
  
  L6474_CmdSetParam(deviceId,L6474_MARK, registerValue);
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	2103      	movs	r1, #3
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff f947 	bl	8001180 <L6474_CmdSetParam>
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <L6474_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	460a      	mov	r2, r1
 8001f06:	71fb      	strb	r3, [r7, #7]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	73fb      	strb	r3, [r7, #15]
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
 8001f10:	88bb      	ldrh	r3, [r7, #4]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d935      	bls.n	8001f82 <L6474_SetMaxSpeed+0x86>
 8001f16:	88bb      	ldrh	r3, [r7, #4]
 8001f18:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d830      	bhi.n	8001f82 <L6474_SetMaxSpeed+0x86>
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001f20:	79fa      	ldrb	r2, [r7, #7]
 8001f22:	491b      	ldr	r1, [pc, #108]	; (8001f90 <L6474_SetMaxSpeed+0x94>)
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	440b      	add	r3, r1
 8001f2e:	331e      	adds	r3, #30
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
 8001f34:	88ba      	ldrh	r2, [r7, #4]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d323      	bcc.n	8001f82 <L6474_SetMaxSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001f3a:	79fa      	ldrb	r2, [r7, #7]
 8001f3c:	4914      	ldr	r1, [pc, #80]	; (8001f90 <L6474_SetMaxSpeed+0x94>)
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	440b      	add	r3, r1
 8001f48:	3324      	adds	r3, #36	; 0x24
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	b2db      	uxtb	r3, r3
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d00b      	beq.n	8001f6a <L6474_SetMaxSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001f52:	79fa      	ldrb	r2, [r7, #7]
 8001f54:	490e      	ldr	r1, [pc, #56]	; (8001f90 <L6474_SetMaxSpeed+0x94>)
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	3322      	adds	r3, #34	; 0x22
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10b      	bne.n	8001f82 <L6474_SetMaxSpeed+0x86>
  {
    devicePrm[deviceId].maxSpeed = newMaxSpeed;
 8001f6a:	79fa      	ldrb	r2, [r7, #7]
 8001f6c:	4908      	ldr	r1, [pc, #32]	; (8001f90 <L6474_SetMaxSpeed+0x94>)
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	440b      	add	r3, r1
 8001f78:	331c      	adds	r3, #28
 8001f7a:	88ba      	ldrh	r2, [r7, #4]
 8001f7c:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	200003f0 	.word	0x200003f0

08001f94 <L6474_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	460a      	mov	r2, r1
 8001f9e:	71fb      	strb	r3, [r7, #7]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
 8001fa8:	88bb      	ldrh	r3, [r7, #4]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d935      	bls.n	800201a <L6474_SetMinSpeed+0x86>
 8001fae:	88bb      	ldrh	r3, [r7, #4]
 8001fb0:	f242 7210 	movw	r2, #10000	; 0x2710
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d830      	bhi.n	800201a <L6474_SetMinSpeed+0x86>
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8001fb8:	79fa      	ldrb	r2, [r7, #7]
 8001fba:	491b      	ldr	r1, [pc, #108]	; (8002028 <L6474_SetMinSpeed+0x94>)
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	331c      	adds	r3, #28
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	b29b      	uxth	r3, r3
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
 8001fcc:	88ba      	ldrh	r2, [r7, #4]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d823      	bhi.n	800201a <L6474_SetMinSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001fd2:	79fa      	ldrb	r2, [r7, #7]
 8001fd4:	4914      	ldr	r1, [pc, #80]	; (8002028 <L6474_SetMinSpeed+0x94>)
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	440b      	add	r3, r1
 8001fe0:	3324      	adds	r3, #36	; 0x24
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b2db      	uxtb	r3, r3
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d00b      	beq.n	8002002 <L6474_SetMinSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001fea:	79fa      	ldrb	r2, [r7, #7]
 8001fec:	490e      	ldr	r1, [pc, #56]	; (8002028 <L6474_SetMinSpeed+0x94>)
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	440b      	add	r3, r1
 8001ff8:	3322      	adds	r3, #34	; 0x22
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10b      	bne.n	800201a <L6474_SetMinSpeed+0x86>
  {
    devicePrm[deviceId].minSpeed = newMinSpeed;
 8002002:	79fa      	ldrb	r2, [r7, #7]
 8002004:	4908      	ldr	r1, [pc, #32]	; (8002028 <L6474_SetMinSpeed+0x94>)
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	331e      	adds	r3, #30
 8002012:	88ba      	ldrh	r2, [r7, #4]
 8002014:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8002016:	2301      	movs	r3, #1
 8002018:	73fb      	strb	r3, [r7, #15]
  }  
  return cmdExecuted;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
}                 
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	200003f0 	.word	0x200003f0

0800202c <L6474_SetStopMode>:
 * @param[in] deviceId Unused parameter
 * @param[in] stopMode HOLD_MODE to let power bridge enabled
 * @retval None
 **********************************************************/
void L6474_SetStopMode(uint8_t deviceId, motorStopMode_t stopMode)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	460a      	mov	r2, r1
 8002036:	71fb      	strb	r3, [r7, #7]
 8002038:	4613      	mov	r3, r2
 800203a:	71bb      	strb	r3, [r7, #6]
  devicePrm[deviceId].stopMode = stopMode;
 800203c:	79fa      	ldrb	r2, [r7, #7]
 800203e:	4907      	ldr	r1, [pc, #28]	; (800205c <L6474_SetStopMode+0x30>)
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	3325      	adds	r3, #37	; 0x25
 800204c:	79ba      	ldrb	r2, [r7, #6]
 800204e:	701a      	strb	r2, [r3, #0]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	200003f0 	.word	0x200003f0

08002060 <L6474_SoftStop>:
 * @param[in] deviceId (from 0 to 2)
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is in INACTIVE state.
 **********************************************************/
bool L6474_SoftStop(uint8_t deviceId)
{	
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
  bool cmdExecuted = FALSE;
 800206a:	2300      	movs	r3, #0
 800206c:	73fb      	strb	r3, [r7, #15]
  if (devicePrm[deviceId].motionState != INACTIVE)
 800206e:	79fa      	ldrb	r2, [r7, #7]
 8002070:	490e      	ldr	r1, [pc, #56]	; (80020ac <L6474_SoftStop+0x4c>)
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	440b      	add	r3, r1
 800207c:	3324      	adds	r3, #36	; 0x24
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b08      	cmp	r3, #8
 8002084:	d00b      	beq.n	800209e <L6474_SoftStop+0x3e>
  {
    devicePrm[deviceId].commandExecuted = SOFT_STOP_CMD;
 8002086:	79fa      	ldrb	r2, [r7, #7]
 8002088:	4908      	ldr	r1, [pc, #32]	; (80020ac <L6474_SoftStop+0x4c>)
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	440b      	add	r3, r1
 8002094:	3322      	adds	r3, #34	; 0x22
 8002096:	2202      	movs	r2, #2
 8002098:	701a      	strb	r2, [r3, #0]
    cmdExecuted = TRUE;
 800209a:	2301      	movs	r3, #1
 800209c:	73fb      	strb	r3, [r7, #15]
  }
  return (cmdExecuted);
 800209e:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	200003f0 	.word	0x200003f0

080020b0 <L6474_WaitWhileActive>:
 * @brief  Locks until the device state becomes Inactive
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_WaitWhileActive(uint8_t deviceId)
 {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (L6474_GetDeviceState(deviceId) != INACTIVE);
 80020ba:	bf00      	nop
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff f9d6 	bl	8001470 <L6474_GetDeviceState>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d1f8      	bne.n	80020bc <L6474_WaitWhileActive+0xc>
}
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <L6474_ApplySpeed>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] newSpeed in pps
 * @retval None
 **********************************************************/
void L6474_ApplySpeed(uint8_t deviceId, uint16_t newSpeed)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	460a      	mov	r2, r1
 80020de:	71fb      	strb	r3, [r7, #7]
 80020e0:	4613      	mov	r3, r2
 80020e2:	80bb      	strh	r3, [r7, #4]
  if (newSpeed < L6474_MIN_PWM_FREQ)
 80020e4:	88bb      	ldrh	r3, [r7, #4]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d801      	bhi.n	80020ee <L6474_ApplySpeed+0x1a>
  {
    newSpeed = L6474_MIN_PWM_FREQ;  
 80020ea:	2302      	movs	r3, #2
 80020ec:	80bb      	strh	r3, [r7, #4]
  }
  if (newSpeed > L6474_MAX_PWM_FREQ)
 80020ee:	88bb      	ldrh	r3, [r7, #4]
 80020f0:	f242 7210 	movw	r2, #10000	; 0x2710
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d902      	bls.n	80020fe <L6474_ApplySpeed+0x2a>
  {
    newSpeed = L6474_MAX_PWM_FREQ;
 80020f8:	f242 7310 	movw	r3, #10000	; 0x2710
 80020fc:	80bb      	strh	r3, [r7, #4]
  }
  
  devicePrm[deviceId].speed = newSpeed;
 80020fe:	79fa      	ldrb	r2, [r7, #7]
 8002100:	4913      	ldr	r1, [pc, #76]	; (8002150 <L6474_ApplySpeed+0x7c>)
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	3320      	adds	r3, #32
 800210e:	88ba      	ldrh	r2, [r7, #4]
 8002110:	801a      	strh	r2, [r3, #0]

  switch (deviceId)
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	2b02      	cmp	r3, #2
 8002116:	d010      	beq.n	800213a <L6474_ApplySpeed+0x66>
 8002118:	2b02      	cmp	r3, #2
 800211a:	dc13      	bgt.n	8002144 <L6474_ApplySpeed+0x70>
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <L6474_ApplySpeed+0x52>
 8002120:	2b01      	cmp	r3, #1
 8002122:	d005      	beq.n	8002130 <L6474_ApplySpeed+0x5c>
      break;
    case 2:
      L6474_Board_Pwm3SetFreq(newSpeed);
      break;
    default:
      break; //ignore error
 8002124:	e00e      	b.n	8002144 <L6474_ApplySpeed+0x70>
      L6474_Board_Pwm1SetFreq(newSpeed);
 8002126:	88bb      	ldrh	r3, [r7, #4]
 8002128:	4618      	mov	r0, r3
 800212a:	f002 f8ed 	bl	8004308 <L6474_Board_Pwm1SetFreq>
      break;
 800212e:	e00a      	b.n	8002146 <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm2SetFreq(newSpeed);
 8002130:	88bb      	ldrh	r3, [r7, #4]
 8002132:	4618      	mov	r0, r3
 8002134:	f002 f90e 	bl	8004354 <L6474_Board_Pwm2SetFreq>
      break;
 8002138:	e005      	b.n	8002146 <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm3SetFreq(newSpeed);
 800213a:	88bb      	ldrh	r3, [r7, #4]
 800213c:	4618      	mov	r0, r3
 800213e:	f002 f92f 	bl	80043a0 <L6474_Board_Pwm3SetFreq>
      break;
 8002142:	e000      	b.n	8002146 <L6474_ApplySpeed+0x72>
      break; //ignore error
 8002144:	bf00      	nop
  }
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200003f0 	.word	0x200003f0

08002154 <L6474_ComputeSpeedProfile>:
 * speed.
 * Else, a triangular move is performed (no steady phase: the maximum speed is never
 * reached.
 **********************************************************/
void L6474_ComputeSpeedProfile(uint8_t deviceId, uint32_t nbSteps)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	; 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	6039      	str	r1, [r7, #0]
 800215e:	71fb      	strb	r3, [r7, #7]
  uint32_t reqAccSteps; 
  uint32_t reqDecSteps;
   
  /* compute the number of steps to get the targeted speed */
  uint16_t minSpeed = devicePrm[deviceId].minSpeed;
 8002160:	79fa      	ldrb	r2, [r7, #7]
 8002162:	495a      	ldr	r1, [pc, #360]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	440b      	add	r3, r1
 800216e:	331e      	adds	r3, #30
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	837b      	strh	r3, [r7, #26]
  reqAccSteps = (devicePrm[deviceId].maxSpeed - minSpeed);
 8002174:	79fa      	ldrb	r2, [r7, #7]
 8002176:	4955      	ldr	r1, [pc, #340]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	440b      	add	r3, r1
 8002182:	331c      	adds	r3, #28
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	b29b      	uxth	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	8b7b      	ldrh	r3, [r7, #26]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	61fb      	str	r3, [r7, #28]
  reqAccSteps *= (devicePrm[deviceId].maxSpeed + minSpeed);
 8002190:	79fa      	ldrb	r2, [r7, #7]
 8002192:	494e      	ldr	r1, [pc, #312]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	331c      	adds	r3, #28
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	8b7b      	ldrh	r3, [r7, #26]
 80021a8:	4413      	add	r3, r2
 80021aa:	461a      	mov	r2, r3
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	fb02 f303 	mul.w	r3, r2, r3
 80021b2:	61fb      	str	r3, [r7, #28]
  reqDecSteps = reqAccSteps;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	617b      	str	r3, [r7, #20]
  reqAccSteps /= (uint32_t)devicePrm[deviceId].acceleration;
 80021b8:	79fa      	ldrb	r2, [r7, #7]
 80021ba:	4944      	ldr	r1, [pc, #272]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	3318      	adds	r3, #24
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80021d4:	61fb      	str	r3, [r7, #28]
  reqAccSteps /= 2;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	61fb      	str	r3, [r7, #28]

  /* compute the number of steps to stop */
  reqDecSteps /= (uint32_t)devicePrm[deviceId].deceleration;
 80021dc:	79fa      	ldrb	r2, [r7, #7]
 80021de:	493b      	ldr	r1, [pc, #236]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	331a      	adds	r3, #26
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80021f8:	617b      	str	r3, [r7, #20]
  reqDecSteps /= 2;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	085b      	lsrs	r3, r3, #1
 80021fe:	617b      	str	r3, [r7, #20]

	if(( reqAccSteps + reqDecSteps ) > nbSteps)
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	4413      	add	r3, r2
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d242      	bcs.n	8002292 <L6474_ComputeSpeedProfile+0x13e>
	{	
    /* Triangular move  */
    /* reqDecSteps = (Pos * Dec) /(Dec+Acc) */
    uint32_t dec = devicePrm[deviceId].deceleration;
 800220c:	79fa      	ldrb	r2, [r7, #7]
 800220e:	492f      	ldr	r1, [pc, #188]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	440b      	add	r3, r1
 800221a:	331a      	adds	r3, #26
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	613b      	str	r3, [r7, #16]
    uint32_t acc = devicePrm[deviceId].acceleration;
 8002222:	79fa      	ldrb	r2, [r7, #7]
 8002224:	4929      	ldr	r1, [pc, #164]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	440b      	add	r3, r1
 8002230:	3318      	adds	r3, #24
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	60fb      	str	r3, [r7, #12]
    
    reqDecSteps =  ((uint32_t) dec * nbSteps) / (acc + dec);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	fb03 f202 	mul.w	r2, r3, r2
 8002240:	68f9      	ldr	r1, [r7, #12]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	440b      	add	r3, r1
 8002246:	fbb2 f3f3 	udiv	r3, r2, r3
 800224a:	617b      	str	r3, [r7, #20]
    if (reqDecSteps > 1)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d908      	bls.n	8002264 <L6474_ComputeSpeedProfile+0x110>
    {
      reqAccSteps = reqDecSteps - 1;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3b01      	subs	r3, #1
 8002256:	61fb      	str	r3, [r7, #28]
      if(reqAccSteps == 0)
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d104      	bne.n	8002268 <L6474_ComputeSpeedProfile+0x114>
      {
        reqAccSteps = 1;
 800225e:	2301      	movs	r3, #1
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	e001      	b.n	8002268 <L6474_ComputeSpeedProfile+0x114>
      }      
    }
    else
    {
      reqAccSteps = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	61fb      	str	r3, [r7, #28]
    }
    devicePrm[deviceId].endAccPos = reqAccSteps;
 8002268:	79fa      	ldrb	r2, [r7, #7]
 800226a:	4918      	ldr	r1, [pc, #96]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	3308      	adds	r3, #8
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = reqDecSteps;
 800227c:	79fa      	ldrb	r2, [r7, #7]
 800227e:	4913      	ldr	r1, [pc, #76]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	3310      	adds	r3, #16
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	601a      	str	r2, [r3, #0]
    /* steady phase from  endAccPos to startDecPos */
    /* decelerating from startDecPos to stepsToTake*/
    devicePrm[deviceId].endAccPos = reqAccSteps;
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
	}
}
 8002290:	e016      	b.n	80022c0 <L6474_ComputeSpeedProfile+0x16c>
    devicePrm[deviceId].endAccPos = reqAccSteps;
 8002292:	79fa      	ldrb	r2, [r7, #7]
 8002294:	490d      	ldr	r1, [pc, #52]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	440b      	add	r3, r1
 80022a0:	3308      	adds	r3, #8
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	79fa      	ldrb	r2, [r7, #7]
 80022ae:	1e59      	subs	r1, r3, #1
 80022b0:	4806      	ldr	r0, [pc, #24]	; (80022cc <L6474_ComputeSpeedProfile+0x178>)
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4403      	add	r3, r0
 80022bc:	3310      	adds	r3, #16
 80022be:	6019      	str	r1, [r3, #0]
}
 80022c0:	bf00      	nop
 80022c2:	3724      	adds	r7, #36	; 0x24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	200003f0 	.word	0x200003f0

080022d0 <L6474_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t L6474_ConvertPosition(uint32_t abs_position_reg)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  int32_t operation_result;

  if (abs_position_reg & L6474_ABS_POS_SIGN_BIT_MASK) 
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00d      	beq.n	80022fe <L6474_ConvertPosition+0x2e>
  {
    /* Negative register value */
    abs_position_reg = ~abs_position_reg;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	607b      	str	r3, [r7, #4]
    abs_position_reg += 1;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3301      	adds	r3, #1
 80022ec:	607b      	str	r3, [r7, #4]

    operation_result = (int32_t) (abs_position_reg & L6474_ABS_POS_VALUE_MASK);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80022f4:	60fb      	str	r3, [r7, #12]
    operation_result = -operation_result;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	425b      	negs	r3, r3
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	e001      	b.n	8002302 <L6474_ConvertPosition+0x32>
  } 
  else 
  {
    operation_result = (int32_t) abs_position_reg;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	60fb      	str	r3, [r7, #12]
  }
  return operation_result;
 8002302:	68fb      	ldr	r3, [r7, #12]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <L6474_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void L6474_ErrorHandler(uint16_t error)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <L6474_ErrorHandler+0x28>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <L6474_ErrorHandler+0x1e>
  {
    (void) errorHandlerCallback(error);
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <L6474_ErrorHandler+0x28>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	88fa      	ldrh	r2, [r7, #6]
 8002328:	4610      	mov	r0, r2
 800232a:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 800232c:	e000      	b.n	8002330 <L6474_ErrorHandler+0x20>
    while(1)
 800232e:	e7fe      	b.n	800232e <L6474_ErrorHandler+0x1e>
}
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200003cc 	.word	0x200003cc

0800233c <L6474_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void L6474_FlagInterruptHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 8002340:	4b07      	ldr	r3, [pc, #28]	; (8002360 <L6474_FlagInterruptHandler+0x24>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <L6474_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <L6474_FlagInterruptHandler+0x28>)
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 800234e:	4b04      	ldr	r3, [pc, #16]	; (8002360 <L6474_FlagInterruptHandler+0x24>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <L6474_FlagInterruptHandler+0x28>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
  }
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200003c8 	.word	0x200003c8
 8002364:	200003ed 	.word	0x200003ed

08002368 <L6474_SendCommand>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Command to send 
 * @retval None
 **********************************************************/
void L6474_SendCommand(uint8_t deviceId, uint8_t param)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	460a      	mov	r2, r1
 8002372:	71fb      	strb	r3, [r7, #7]
 8002374:	4613      	mov	r3, r2
 8002376:	71bb      	strb	r3, [r7, #6]
  uint32_t i;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8002378:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <L6474_SendCommand+0x90>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	3b01      	subs	r3, #1
 8002386:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 8002388:	2300      	movs	r3, #0
 800238a:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 800238c:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <L6474_SendCommand+0x94>)
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8002392:	7afb      	ldrb	r3, [r7, #11]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <L6474_SendCommand+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8002398:	f001 fef4 	bl	8004184 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 800239c:	2300      	movs	r3, #0
 800239e:	72fb      	strb	r3, [r7, #11]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	e008      	b.n	80023b8 <L6474_SendCommand+0x50>
    {
      spiTxBursts[3][i] = L6474_NOP;     
 80023a6:	4a16      	ldr	r2, [pc, #88]	; (8002400 <L6474_SendCommand+0x98>)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4413      	add	r3, r2
 80023ac:	3309      	adds	r3, #9
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	3301      	adds	r3, #1
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <L6474_SendCommand+0x90>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d3ef      	bcc.n	80023a6 <L6474_SendCommand+0x3e>
    }
    spiTxBursts[3][spiIndex] = param;
 80023c6:	7abb      	ldrb	r3, [r7, #10]
 80023c8:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <L6474_SendCommand+0x98>)
 80023ca:	4413      	add	r3, r2
 80023cc:	79ba      	ldrb	r2, [r7, #6]
 80023ce:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80023d0:	f001 fecf 	bl	8004172 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80023d4:	2301      	movs	r3, #1
 80023d6:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <L6474_SendCommand+0x94>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1d4      	bne.n	800238c <L6474_SendCommand+0x24>

  L6474_WriteBytes(&spiTxBursts[3][0], &spiRxBursts[3][0]); 
 80023e2:	4908      	ldr	r1, [pc, #32]	; (8002404 <L6474_SendCommand+0x9c>)
 80023e4:	4808      	ldr	r0, [pc, #32]	; (8002408 <L6474_SendCommand+0xa0>)
 80023e6:	f000 fe61 	bl	80030ac <L6474_WriteBytes>
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 80023ea:	f001 fecb 	bl	8004184 <L6474_Board_EnableIrq>
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200003d0 	.word	0x200003d0
 80023fc:	200003ec 	.word	0x200003ec
 8002400:	200003d4 	.word	0x200003d4
 8002404:	200003e9 	.word	0x200003e9
 8002408:	200003dd 	.word	0x200003dd

0800240c <L6474_SetDeviceParamsToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	6039      	str	r1, [r7, #0]
 8002416:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = pInitPrm->acceleration_step_s2;
 8002418:	79fa      	ldrb	r2, [r7, #7]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	8818      	ldrh	r0, [r3, #0]
 800241e:	494c      	ldr	r1, [pc, #304]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	440b      	add	r3, r1
 800242a:	3318      	adds	r3, #24
 800242c:	4602      	mov	r2, r0
 800242e:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = pInitPrm->deceleration_step_s2;
 8002430:	79fa      	ldrb	r2, [r7, #7]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	8858      	ldrh	r0, [r3, #2]
 8002436:	4946      	ldr	r1, [pc, #280]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	440b      	add	r3, r1
 8002442:	331a      	adds	r3, #26
 8002444:	4602      	mov	r2, r0
 8002446:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = pInitPrm->maximum_speed_step_s;
 8002448:	79fa      	ldrb	r2, [r7, #7]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	8898      	ldrh	r0, [r3, #4]
 800244e:	4940      	ldr	r1, [pc, #256]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	440b      	add	r3, r1
 800245a:	331c      	adds	r3, #28
 800245c:	4602      	mov	r2, r0
 800245e:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = pInitPrm->minimum_speed_step_s;
 8002460:	79fa      	ldrb	r2, [r7, #7]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	88d8      	ldrh	r0, [r3, #6]
 8002466:	493a      	ldr	r1, [pc, #232]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	440b      	add	r3, r1
 8002472:	331e      	adds	r3, #30
 8002474:	4602      	mov	r2, r0
 8002476:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 8002478:	79fa      	ldrb	r2, [r7, #7]
 800247a:	4935      	ldr	r1, [pc, #212]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 800248a:	79fa      	ldrb	r2, [r7, #7]
 800248c:	4930      	ldr	r1, [pc, #192]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	440b      	add	r3, r1
 8002498:	3304      	adds	r3, #4
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 800249e:	79fa      	ldrb	r2, [r7, #7]
 80024a0:	492b      	ldr	r1, [pc, #172]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	440b      	add	r3, r1
 80024ac:	3308      	adds	r3, #8
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 80024b2:	79fa      	ldrb	r2, [r7, #7]
 80024b4:	4926      	ldr	r1, [pc, #152]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	440b      	add	r3, r1
 80024c0:	330c      	adds	r3, #12
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 80024c6:	79fa      	ldrb	r2, [r7, #7]
 80024c8:	4921      	ldr	r1, [pc, #132]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	440b      	add	r3, r1
 80024d4:	3310      	adds	r3, #16
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 80024da:	79fa      	ldrb	r2, [r7, #7]
 80024dc:	491c      	ldr	r1, [pc, #112]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	440b      	add	r3, r1
 80024e8:	3314      	adds	r3, #20
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 80024ee:	79fa      	ldrb	r2, [r7, #7]
 80024f0:	4917      	ldr	r1, [pc, #92]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	440b      	add	r3, r1
 80024fc:	3320      	adds	r3, #32
 80024fe:	2200      	movs	r2, #0
 8002500:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8002502:	79fa      	ldrb	r2, [r7, #7]
 8002504:	4912      	ldr	r1, [pc, #72]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	440b      	add	r3, r1
 8002510:	3322      	adds	r3, #34	; 0x22
 8002512:	2203      	movs	r2, #3
 8002514:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 8002516:	79fa      	ldrb	r2, [r7, #7]
 8002518:	490d      	ldr	r1, [pc, #52]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	3323      	adds	r3, #35	; 0x23
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;  
 800252a:	79fa      	ldrb	r2, [r7, #7]
 800252c:	4908      	ldr	r1, [pc, #32]	; (8002550 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	3324      	adds	r3, #36	; 0x24
 800253a:	2208      	movs	r2, #8
 800253c:	701a      	strb	r2, [r3, #0]
 
  L6474_SetRegisterToGivenValues(deviceId, pInitPrm);
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	6839      	ldr	r1, [r7, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f000 f8a2 	bl	800268c <L6474_SetRegisterToGivenValues>
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	200003f0 	.word	0x200003f0

08002554 <L6474_SetDeviceParamsToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToPredefinedValues(uint8_t deviceId)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = L6474_CONF_PARAM_ACC_DEVICE_0;
 800255e:	79fa      	ldrb	r2, [r7, #7]
 8002560:	4949      	ldr	r1, [pc, #292]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	440b      	add	r3, r1
 800256c:	3318      	adds	r3, #24
 800256e:	22a0      	movs	r2, #160	; 0xa0
 8002570:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = L6474_CONF_PARAM_DEC_DEVICE_0;
 8002572:	79fa      	ldrb	r2, [r7, #7]
 8002574:	4944      	ldr	r1, [pc, #272]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	440b      	add	r3, r1
 8002580:	331a      	adds	r3, #26
 8002582:	22a0      	movs	r2, #160	; 0xa0
 8002584:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = L6474_CONF_PARAM_MAX_SPEED_DEVICE_0;
 8002586:	79fa      	ldrb	r2, [r7, #7]
 8002588:	493f      	ldr	r1, [pc, #252]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	440b      	add	r3, r1
 8002594:	331c      	adds	r3, #28
 8002596:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800259a:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = L6474_CONF_PARAM_MIN_SPEED_DEVICE_0;
 800259c:	79fa      	ldrb	r2, [r7, #7]
 800259e:	493a      	ldr	r1, [pc, #232]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	440b      	add	r3, r1
 80025aa:	331e      	adds	r3, #30
 80025ac:	f44f 7248 	mov.w	r2, #800	; 0x320
 80025b0:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 80025b2:	79fa      	ldrb	r2, [r7, #7]
 80025b4:	4934      	ldr	r1, [pc, #208]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	440b      	add	r3, r1
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 80025c4:	79fa      	ldrb	r2, [r7, #7]
 80025c6:	4930      	ldr	r1, [pc, #192]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	440b      	add	r3, r1
 80025d2:	3304      	adds	r3, #4
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 80025d8:	79fa      	ldrb	r2, [r7, #7]
 80025da:	492b      	ldr	r1, [pc, #172]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	440b      	add	r3, r1
 80025e6:	3308      	adds	r3, #8
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 80025ec:	79fa      	ldrb	r2, [r7, #7]
 80025ee:	4926      	ldr	r1, [pc, #152]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	440b      	add	r3, r1
 80025fa:	330c      	adds	r3, #12
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 8002600:	79fa      	ldrb	r2, [r7, #7]
 8002602:	4921      	ldr	r1, [pc, #132]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	440b      	add	r3, r1
 800260e:	3310      	adds	r3, #16
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 8002614:	79fa      	ldrb	r2, [r7, #7]
 8002616:	491c      	ldr	r1, [pc, #112]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	440b      	add	r3, r1
 8002622:	3314      	adds	r3, #20
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8002628:	79fa      	ldrb	r2, [r7, #7]
 800262a:	4917      	ldr	r1, [pc, #92]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	440b      	add	r3, r1
 8002636:	3320      	adds	r3, #32
 8002638:	2200      	movs	r2, #0
 800263a:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 800263c:	79fa      	ldrb	r2, [r7, #7]
 800263e:	4912      	ldr	r1, [pc, #72]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	3322      	adds	r3, #34	; 0x22
 800264c:	2203      	movs	r2, #3
 800264e:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 8002650:	79fa      	ldrb	r2, [r7, #7]
 8002652:	490d      	ldr	r1, [pc, #52]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002654:	4613      	mov	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	440b      	add	r3, r1
 800265e:	3323      	adds	r3, #35	; 0x23
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;
 8002664:	79fa      	ldrb	r2, [r7, #7]
 8002666:	4908      	ldr	r1, [pc, #32]	; (8002688 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	440b      	add	r3, r1
 8002672:	3324      	adds	r3, #36	; 0x24
 8002674:	2208      	movs	r2, #8
 8002676:	701a      	strb	r2, [r3, #0]
  
  L6474_SetRegisterToPredefinedValues(deviceId);
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	4618      	mov	r0, r3
 800267c:	f000 f882 	bl	8002784 <L6474_SetRegisterToPredefinedValues>

}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	200003f0 	.word	0x200003f0

0800268c <L6474_SetRegisterToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetRegisterToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	2200      	movs	r2, #0
 800269c:	2101      	movs	r1, #1
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fd6e 	bl	8001180 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	2200      	movs	r2, #0
 80026a8:	2102      	movs	r1, #2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fd68 	bl	8001180 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	2200      	movs	r2, #0
 80026b4:	2103      	movs	r1, #3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fd62 	bl	8001180 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  L6474_SetAnalogValue(deviceId,
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	edd3 7a02 	vldr	s15, [r3, #8]
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	eeb0 0a67 	vmov.f32	s0, s15
 80026c8:	2109      	movs	r1, #9
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fa62 	bl	8001b94 <L6474_SetAnalogValue>
                       L6474_TVAL,
                       pInitPrm->torque_regulation_current_mA);
  L6474_CmdSetParam(deviceId,
                    L6474_T_FAST,
                    (uint8_t) pInitPrm->maximum_fast_decay_time |
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	7d5a      	ldrb	r2, [r3, #21]
                    (uint8_t) pInitPrm->fall_time);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	7d1b      	ldrb	r3, [r3, #20]
  L6474_CmdSetParam(deviceId,
 80026d8:	4313      	orrs	r3, r2
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	210e      	movs	r1, #14
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fd4c 	bl	8001180 <L6474_CmdSetParam>
  L6474_SetAnalogValue(deviceId,
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	edd3 7a06 	vldr	s15, [r3, #24]
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	eeb0 0a67 	vmov.f32	s0, s15
 80026f4:	210f      	movs	r1, #15
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fa4c 	bl	8001b94 <L6474_SetAnalogValue>
                       L6474_TON_MIN,
                       pInitPrm->minimum_ON_time_us);
  L6474_SetAnalogValue(deviceId,
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	edd3 7a07 	vldr	s15, [r3, #28]
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	eeb0 0a67 	vmov.f32	s0, s15
 8002708:	2110      	movs	r1, #16
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fa42 	bl	8001b94 <L6474_SetAnalogValue>
                       L6474_TOFF_MIN,
                       pInitPrm->minimum_OFF_time_us);
  L6474_SetAnalogValue(deviceId,
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	edd3 7a03 	vldr	s15, [r3, #12]
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	eeb0 0a67 	vmov.f32	s0, s15
 800271c:	2113      	movs	r1, #19
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fa38 	bl	8001b94 <L6474_SetAnalogValue>
                       L6474_OCD_TH,
                       pInitPrm->overcurrent_threshold);
  L6474_CmdSetParam(deviceId,
                  L6474_STEP_MODE,
                  (uint8_t) pInitPrm->step_selection |
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	7c9a      	ldrb	r2, [r3, #18]
                  (uint8_t) pInitPrm->sync_selection);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	7cdb      	ldrb	r3, [r3, #19]
  L6474_CmdSetParam(deviceId,
 800272c:	4313      	orrs	r3, r2
 800272e:	b2db      	uxtb	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	2116      	movs	r1, #22
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe fd22 	bl	8001180 <L6474_CmdSetParam>
  L6474_CmdSetParam(deviceId,
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	2117      	movs	r1, #23
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fd1b 	bl	8001180 <L6474_CmdSetParam>
                    L6474_ALARM_EN,
                    pInitPrm->alarm);
  L6474_CmdSetParam(deviceId,
                    L6474_CONFIG,
                    (uint16_t) pInitPrm->clock |
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
                    (uint16_t) pInitPrm->torque_regulation_method |
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	7c5b      	ldrb	r3, [r3, #17]
 8002754:	4313      	orrs	r3, r2
 8002756:	b2da      	uxtb	r2, r3
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	7c1b      	ldrb	r3, [r3, #16]
                    (uint16_t) pInitPrm->torque_regulation_method |
 800275c:	4313      	orrs	r3, r2
 800275e:	b2db      	uxtb	r3, r3
 8002760:	461a      	mov	r2, r3
                    (uint16_t) pInitPrm->slew_rate |
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8002766:	4313      	orrs	r3, r2
                    (uint16_t) pInitPrm->target_swicthing_period);
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	8c12      	ldrh	r2, [r2, #32]
                    (uint16_t) pInitPrm->slew_rate |
 800276c:	4313      	orrs	r3, r2
  L6474_CmdSetParam(deviceId,
 800276e:	461a      	mov	r2, r3
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	2118      	movs	r1, #24
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe fd03 	bl	8001180 <L6474_CmdSetParam>
  
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <L6474_SetRegisterToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetRegisterToPredefinedValues(uint8_t deviceId)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	2200      	movs	r2, #0
 8002792:	2101      	movs	r1, #1
 8002794:	4618      	mov	r0, r3
 8002796:	f7fe fcf3 	bl	8001180 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	2200      	movs	r2, #0
 800279e:	2102      	movs	r1, #2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe fced 	bl	8001180 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	2200      	movs	r2, #0
 80027aa:	2103      	movs	r1, #3
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fe fce7 	bl	8001180 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  switch (deviceId)
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	f000 8094 	beq.w	80028e2 <L6474_SetRegisterToPredefinedValues+0x15e>
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	f300 80d7 	bgt.w	800296e <L6474_SetRegisterToPredefinedValues+0x1ea>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <L6474_SetRegisterToPredefinedValues+0x46>
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d046      	beq.n	8002856 <L6474_SetRegisterToPredefinedValues+0xd2>
#endif         
      break;
#endif      
    default: ;
  }
}
 80027c8:	e0d1      	b.n	800296e <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_0));
 80027ca:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8002978 <L6474_SetRegisterToPredefinedValues+0x1f4>
 80027ce:	f000 fc2b 	bl	8003028 <L6474_Tval_Current_to_Par>
 80027d2:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80027d4:	461a      	mov	r2, r3
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	2109      	movs	r1, #9
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fcd0 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	2235      	movs	r2, #53	; 0x35
 80027e4:	210e      	movs	r1, #14
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe fcca 	bl	8001180 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_0)
 80027ec:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80027f0:	f000 fc3e 	bl	8003070 <L6474_Tmin_Time_to_Par>
 80027f4:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80027f6:	461a      	mov	r2, r3
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	210f      	movs	r1, #15
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fe fcbf 	bl	8001180 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_0));
 8002802:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002806:	f000 fc33 	bl	8003070 <L6474_Tmin_Time_to_Par>
 800280a:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800280c:	461a      	mov	r2, r3
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	2110      	movs	r1, #16
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fcb4 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	2201      	movs	r2, #1
 800281c:	2113      	movs	r1, #19
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fcae 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	228c      	movs	r2, #140	; 0x8c
 8002828:	2116      	movs	r1, #22
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe fca8 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	22cf      	movs	r2, #207	; 0xcf
 8002834:	2117      	movs	r1, #23
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fca2 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002842:	2118      	movs	r1, #24
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fc9b 	bl	8001180 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_0);
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	2100      	movs	r1, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fbec 	bl	800202c <L6474_SetStopMode>
      break;
 8002854:	e08b      	b.n	800296e <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_1));
 8002856:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8002978 <L6474_SetRegisterToPredefinedValues+0x1f4>
 800285a:	f000 fbe5 	bl	8003028 <L6474_Tval_Current_to_Par>
 800285e:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002860:	461a      	mov	r2, r3
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	2109      	movs	r1, #9
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fc8a 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	2235      	movs	r2, #53	; 0x35
 8002870:	210e      	movs	r1, #14
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe fc84 	bl	8001180 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_1));
 8002878:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800287c:	f000 fbf8 	bl	8003070 <L6474_Tmin_Time_to_Par>
 8002880:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002882:	461a      	mov	r2, r3
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	210f      	movs	r1, #15
 8002888:	4618      	mov	r0, r3
 800288a:	f7fe fc79 	bl	8001180 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_1));
 800288e:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002892:	f000 fbed 	bl	8003070 <L6474_Tmin_Time_to_Par>
 8002896:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002898:	461a      	mov	r2, r3
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	2110      	movs	r1, #16
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe fc6e 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	2201      	movs	r2, #1
 80028a8:	2113      	movs	r1, #19
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fc68 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	228c      	movs	r2, #140	; 0x8c
 80028b4:	2116      	movs	r1, #22
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fc62 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	22cf      	movs	r2, #207	; 0xcf
 80028c0:	2117      	movs	r1, #23
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe fc5c 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 80028ce:	2118      	movs	r1, #24
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe fc55 	bl	8001180 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_1);
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fba6 	bl	800202c <L6474_SetStopMode>
      break;
 80028e0:	e045      	b.n	800296e <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_2));
 80028e2:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8002978 <L6474_SetRegisterToPredefinedValues+0x1f4>
 80028e6:	f000 fb9f 	bl	8003028 <L6474_Tval_Current_to_Par>
 80028ea:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80028ec:	461a      	mov	r2, r3
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	2109      	movs	r1, #9
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe fc44 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	2235      	movs	r2, #53	; 0x35
 80028fc:	210e      	movs	r1, #14
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe fc3e 	bl	8001180 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_2));
 8002904:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002908:	f000 fbb2 	bl	8003070 <L6474_Tmin_Time_to_Par>
 800290c:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800290e:	461a      	mov	r2, r3
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	210f      	movs	r1, #15
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe fc33 	bl	8001180 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_2));
 800291a:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 800291e:	f000 fba7 	bl	8003070 <L6474_Tmin_Time_to_Par>
 8002922:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002924:	461a      	mov	r2, r3
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	2110      	movs	r1, #16
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe fc28 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	2201      	movs	r2, #1
 8002934:	2113      	movs	r1, #19
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fc22 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	228c      	movs	r2, #140	; 0x8c
 8002940:	2116      	movs	r1, #22
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe fc1c 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	22cf      	movs	r2, #207	; 0xcf
 800294c:	2117      	movs	r1, #23
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fc16 	bl	8001180 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 800295a:	2118      	movs	r1, #24
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fc0f 	bl	8001180 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_2);
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	2100      	movs	r1, #0
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fb60 	bl	800202c <L6474_SetStopMode>
      break;
 800296c:	bf00      	nop
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	437a0000 	.word	0x437a0000

0800297c <L6474_StartMovement>:
 * and enable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_StartMovement(uint8_t deviceId)  
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
  /* Enable L6474 powerstage */
  L6474_CmdEnable(deviceId);
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	4618      	mov	r0, r3
 800298a:	f7fe fa65 	bl	8000e58 <L6474_CmdEnable>
  if (devicePrm[deviceId].endAccPos != 0)
 800298e:	79fa      	ldrb	r2, [r7, #7]
 8002990:	4922      	ldr	r1, [pc, #136]	; (8002a1c <L6474_StartMovement+0xa0>)
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	440b      	add	r3, r1
 800299c:	3308      	adds	r3, #8
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <L6474_StartMovement+0x3e>
  {
    devicePrm[deviceId].motionState = ACCELERATING;
 80029a4:	79fa      	ldrb	r2, [r7, #7]
 80029a6:	491d      	ldr	r1, [pc, #116]	; (8002a1c <L6474_StartMovement+0xa0>)
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	3324      	adds	r3, #36	; 0x24
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	e009      	b.n	80029ce <L6474_StartMovement+0x52>
  }
  else
  {
    devicePrm[deviceId].motionState = DECELERATING;    
 80029ba:	79fa      	ldrb	r2, [r7, #7]
 80029bc:	4917      	ldr	r1, [pc, #92]	; (8002a1c <L6474_StartMovement+0xa0>)
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	440b      	add	r3, r1
 80029c8:	3324      	adds	r3, #36	; 0x24
 80029ca:	2202      	movs	r2, #2
 80029cc:	701a      	strb	r2, [r3, #0]
  }
  devicePrm[deviceId].accu = 0;
 80029ce:	79fa      	ldrb	r2, [r7, #7]
 80029d0:	4912      	ldr	r1, [pc, #72]	; (8002a1c <L6474_StartMovement+0xa0>)
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	440b      	add	r3, r1
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 80029e0:	79fa      	ldrb	r2, [r7, #7]
 80029e2:	490e      	ldr	r1, [pc, #56]	; (8002a1c <L6474_StartMovement+0xa0>)
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	440b      	add	r3, r1
 80029ee:	330c      	adds	r3, #12
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
  L6474_ApplySpeed(deviceId, devicePrm[deviceId].minSpeed);
 80029f4:	79fa      	ldrb	r2, [r7, #7]
 80029f6:	4909      	ldr	r1, [pc, #36]	; (8002a1c <L6474_StartMovement+0xa0>)
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	440b      	add	r3, r1
 8002a02:	331e      	adds	r3, #30
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fb61 	bl	80020d4 <L6474_ApplySpeed>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	200003f0 	.word	0x200003f0

08002a20 <L6474_StepClockHandler>:
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void L6474_StepClockHandler(uint8_t deviceId)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08c      	sub	sp, #48	; 0x30
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
  /* Set isr flag */
  isrFlag = TRUE;
 8002a2a:	4b96      	ldr	r3, [pc, #600]	; (8002c84 <L6474_StepClockHandler+0x264>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
  
  /* Incrementation of the relative position */
  devicePrm[deviceId].relativePos++;
 8002a30:	79fa      	ldrb	r2, [r7, #7]
 8002a32:	4995      	ldr	r1, [pc, #596]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	440b      	add	r3, r1
 8002a3e:	330c      	adds	r3, #12
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	1c59      	adds	r1, r3, #1
 8002a44:	4890      	ldr	r0, [pc, #576]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4403      	add	r3, r0
 8002a50:	330c      	adds	r3, #12
 8002a52:	6019      	str	r1, [r3, #0]

  switch (devicePrm[deviceId].motionState) 
 8002a54:	79fa      	ldrb	r2, [r7, #7]
 8002a56:	498c      	ldr	r1, [pc, #560]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	440b      	add	r3, r1
 8002a62:	3324      	adds	r3, #36	; 0x24
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	f000 810f 	beq.w	8002c8c <L6474_StepClockHandler+0x26c>
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	f300 82a4 	bgt.w	8002fbc <L6474_StepClockHandler+0x59c>
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <L6474_StepClockHandler+0x60>
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	f000 819b 	beq.w	8002db4 <L6474_StepClockHandler+0x394>
      }
      break;
    }
    default: 
    {
      break;
 8002a7e:	e29d      	b.n	8002fbc <L6474_StepClockHandler+0x59c>
        uint32_t relPos = devicePrm[deviceId].relativePos;
 8002a80:	79fa      	ldrb	r2, [r7, #7]
 8002a82:	4981      	ldr	r1, [pc, #516]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	330c      	adds	r3, #12
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	617b      	str	r3, [r7, #20]
        uint32_t endAccPos = devicePrm[deviceId].endAccPos;
 8002a94:	79fa      	ldrb	r2, [r7, #7]
 8002a96:	497c      	ldr	r1, [pc, #496]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	613b      	str	r3, [r7, #16]
        uint16_t speed = devicePrm[deviceId].speed;
 8002aa8:	79fa      	ldrb	r2, [r7, #7]
 8002aaa:	4977      	ldr	r1, [pc, #476]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3320      	adds	r3, #32
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	85fb      	strh	r3, [r7, #46]	; 0x2e
        uint32_t acc = ((uint32_t)devicePrm[deviceId].acceleration << 16);
 8002abc:	79fa      	ldrb	r2, [r7, #7]
 8002abe:	4972      	ldr	r1, [pc, #456]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	440b      	add	r3, r1
 8002aca:	3318      	adds	r3, #24
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	041b      	lsls	r3, r3, #16
 8002ad2:	60fb      	str	r3, [r7, #12]
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002ad4:	79fa      	ldrb	r2, [r7, #7]
 8002ad6:	496c      	ldr	r1, [pc, #432]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3322      	adds	r3, #34	; 0x22
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d017      	beq.n	8002b1c <L6474_StepClockHandler+0xfc>
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8002aec:	79fa      	ldrb	r2, [r7, #7]
 8002aee:	4966      	ldr	r1, [pc, #408]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	440b      	add	r3, r1
 8002afa:	3322      	adds	r3, #34	; 0x22
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	b2db      	uxtb	r3, r3
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01f      	beq.n	8002b44 <L6474_StepClockHandler+0x124>
             (relPos == devicePrm[deviceId].startDecPos)))
 8002b04:	79fa      	ldrb	r2, [r7, #7]
 8002b06:	4960      	ldr	r1, [pc, #384]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	440b      	add	r3, r1
 8002b12:	3310      	adds	r3, #16
 8002b14:	681b      	ldr	r3, [r3, #0]
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d113      	bne.n	8002b44 <L6474_StepClockHandler+0x124>
          devicePrm[deviceId].motionState = DECELERATING;
 8002b1c:	79fa      	ldrb	r2, [r7, #7]
 8002b1e:	495a      	ldr	r1, [pc, #360]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	440b      	add	r3, r1
 8002b2a:	3324      	adds	r3, #36	; 0x24
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	701a      	strb	r2, [r3, #0]
          devicePrm[deviceId].accu = 0;
 8002b30:	79fa      	ldrb	r2, [r7, #7]
 8002b32:	4955      	ldr	r1, [pc, #340]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	e09e      	b.n	8002c82 <L6474_StepClockHandler+0x262>
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002b44:	79fa      	ldrb	r2, [r7, #7]
 8002b46:	4950      	ldr	r1, [pc, #320]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	440b      	add	r3, r1
 8002b52:	331c      	adds	r3, #28
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d20f      	bcs.n	8002b7e <L6474_StepClockHandler+0x15e>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002b5e:	79fa      	ldrb	r2, [r7, #7]
 8002b60:	4949      	ldr	r1, [pc, #292]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	3322      	adds	r3, #34	; 0x22
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00e      	beq.n	8002b94 <L6474_StepClockHandler+0x174>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d10a      	bne.n	8002b94 <L6474_StepClockHandler+0x174>
          devicePrm[deviceId].motionState = STEADY;
 8002b7e:	79fa      	ldrb	r2, [r7, #7]
 8002b80:	4941      	ldr	r1, [pc, #260]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	3324      	adds	r3, #36	; 0x24
 8002b8e:	2203      	movs	r2, #3
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e076      	b.n	8002c82 <L6474_StepClockHandler+0x262>
          bool speedUpdated = FALSE;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          if (speed == 0) speed =1;
 8002b9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <L6474_StepClockHandler+0x184>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	85fb      	strh	r3, [r7, #46]	; 0x2e
          devicePrm[deviceId].accu += acc / speed;
 8002ba4:	79fa      	ldrb	r2, [r7, #7]
 8002ba6:	4938      	ldr	r1, [pc, #224]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	440b      	add	r3, r1
 8002bb2:	6819      	ldr	r1, [r3, #0]
 8002bb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	79fa      	ldrb	r2, [r7, #7]
 8002bbe:	4419      	add	r1, r3
 8002bc0:	4831      	ldr	r0, [pc, #196]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4403      	add	r3, r0
 8002bcc:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002bce:	e017      	b.n	8002c00 <L6474_StepClockHandler+0x1e0>
            devicePrm[deviceId].accu -= (0X10000L);
 8002bd0:	79fa      	ldrb	r2, [r7, #7]
 8002bd2:	492d      	ldr	r1, [pc, #180]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	440b      	add	r3, r1
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	79fa      	ldrb	r2, [r7, #7]
 8002be2:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 8002be6:	4828      	ldr	r0, [pc, #160]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4403      	add	r3, r0
 8002bf2:	6019      	str	r1, [r3, #0]
            speed +=1;
 8002bf4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	85fb      	strh	r3, [r7, #46]	; 0x2e
            speedUpdated = TRUE;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002c00:	79fa      	ldrb	r2, [r7, #7]
 8002c02:	4921      	ldr	r1, [pc, #132]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c14:	d2dc      	bcs.n	8002bd0 <L6474_StepClockHandler+0x1b0>
          if (speedUpdated)
 8002c16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 81d0 	beq.w	8002fc0 <L6474_StepClockHandler+0x5a0>
            if (speed > devicePrm[deviceId].maxSpeed)
 8002c20:	79fa      	ldrb	r2, [r7, #7]
 8002c22:	4919      	ldr	r1, [pc, #100]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	331c      	adds	r3, #28
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d909      	bls.n	8002c4e <L6474_StepClockHandler+0x22e>
              speed = devicePrm[deviceId].maxSpeed;
 8002c3a:	79fa      	ldrb	r2, [r7, #7]
 8002c3c:	4912      	ldr	r1, [pc, #72]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	440b      	add	r3, r1
 8002c48:	331c      	adds	r3, #28
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
            devicePrm[deviceId].speed = speed;
 8002c4e:	79fa      	ldrb	r2, [r7, #7]
 8002c50:	490d      	ldr	r1, [pc, #52]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	440b      	add	r3, r1
 8002c5c:	3320      	adds	r3, #32
 8002c5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002c60:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 8002c62:	79fa      	ldrb	r2, [r7, #7]
 8002c64:	4908      	ldr	r1, [pc, #32]	; (8002c88 <L6474_StepClockHandler+0x268>)
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	440b      	add	r3, r1
 8002c70:	3320      	adds	r3, #32
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff fa2a 	bl	80020d4 <L6474_ApplySpeed>
        break;
 8002c80:	e19e      	b.n	8002fc0 <L6474_StepClockHandler+0x5a0>
 8002c82:	e19d      	b.n	8002fc0 <L6474_StepClockHandler+0x5a0>
 8002c84:	200003ed 	.word	0x200003ed
 8002c88:	200003f0 	.word	0x200003f0
      uint16_t maxSpeed = devicePrm[deviceId].maxSpeed;
 8002c8c:	79fa      	ldrb	r2, [r7, #7]
 8002c8e:	499c      	ldr	r1, [pc, #624]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	440b      	add	r3, r1
 8002c9a:	331c      	adds	r3, #28
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	84fb      	strh	r3, [r7, #38]	; 0x26
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8002ca0:	79fa      	ldrb	r2, [r7, #7]
 8002ca2:	4997      	ldr	r1, [pc, #604]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	440b      	add	r3, r1
 8002cae:	330c      	adds	r3, #12
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	623b      	str	r3, [r7, #32]
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002cb4:	79fa      	ldrb	r2, [r7, #7]
 8002cb6:	4992      	ldr	r1, [pc, #584]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3322      	adds	r3, #34	; 0x22
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d030      	beq.n	8002d2e <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002ccc:	79fa      	ldrb	r2, [r7, #7]
 8002cce:	498c      	ldr	r1, [pc, #560]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	3322      	adds	r3, #34	; 0x22
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b2db      	uxtb	r3, r3
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00b      	beq.n	8002cfc <L6474_StepClockHandler+0x2dc>
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 8002ce4:	79fa      	ldrb	r2, [r7, #7]
 8002ce6:	4986      	ldr	r1, [pc, #536]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3310      	adds	r3, #16
 8002cf4:	681b      	ldr	r3, [r3, #0]
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002cf6:	6a3a      	ldr	r2, [r7, #32]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d218      	bcs.n	8002d2e <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002cfc:	79fa      	ldrb	r2, [r7, #7]
 8002cfe:	4980      	ldr	r1, [pc, #512]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	440b      	add	r3, r1
 8002d0a:	3322      	adds	r3, #34	; 0x22
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	b2db      	uxtb	r3, r3
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d120      	bne.n	8002d56 <L6474_StepClockHandler+0x336>
            (devicePrm[deviceId].speed > maxSpeed)))
 8002d14:	79fa      	ldrb	r2, [r7, #7]
 8002d16:	497a      	ldr	r1, [pc, #488]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	440b      	add	r3, r1
 8002d22:	3320      	adds	r3, #32
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002d28:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d213      	bcs.n	8002d56 <L6474_StepClockHandler+0x336>
        devicePrm[deviceId].motionState = DECELERATING;
 8002d2e:	79fa      	ldrb	r2, [r7, #7]
 8002d30:	4973      	ldr	r1, [pc, #460]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3324      	adds	r3, #36	; 0x24
 8002d3e:	2202      	movs	r2, #2
 8002d40:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 8002d42:	79fa      	ldrb	r2, [r7, #7]
 8002d44:	496e      	ldr	r1, [pc, #440]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	440b      	add	r3, r1
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
      break;
 8002d54:	e136      	b.n	8002fc4 <L6474_StepClockHandler+0x5a4>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002d56:	79fa      	ldrb	r2, [r7, #7]
 8002d58:	4969      	ldr	r1, [pc, #420]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	440b      	add	r3, r1
 8002d64:	3322      	adds	r3, #34	; 0x22
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 812a 	bne.w	8002fc4 <L6474_StepClockHandler+0x5a4>
               (devicePrm[deviceId].speed < maxSpeed))
 8002d70:	79fa      	ldrb	r2, [r7, #7]
 8002d72:	4963      	ldr	r1, [pc, #396]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	3320      	adds	r3, #32
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002d84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d86:	429a      	cmp	r2, r3
 8002d88:	f240 811c 	bls.w	8002fc4 <L6474_StepClockHandler+0x5a4>
        devicePrm[deviceId].motionState = ACCELERATING;
 8002d8c:	79fa      	ldrb	r2, [r7, #7]
 8002d8e:	495c      	ldr	r1, [pc, #368]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	440b      	add	r3, r1
 8002d9a:	3324      	adds	r3, #36	; 0x24
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 8002da0:	79fa      	ldrb	r2, [r7, #7]
 8002da2:	4957      	ldr	r1, [pc, #348]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	440b      	add	r3, r1
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
      break;
 8002db2:	e107      	b.n	8002fc4 <L6474_StepClockHandler+0x5a4>
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8002db4:	79fa      	ldrb	r2, [r7, #7]
 8002db6:	4952      	ldr	r1, [pc, #328]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	61fb      	str	r3, [r7, #28]
      uint16_t speed = devicePrm[deviceId].speed;
 8002dc8:	79fa      	ldrb	r2, [r7, #7]
 8002dca:	494d      	ldr	r1, [pc, #308]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3320      	adds	r3, #32
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	857b      	strh	r3, [r7, #42]	; 0x2a
      uint32_t deceleration = ((uint32_t)devicePrm[deviceId].deceleration << 16);
 8002ddc:	79fa      	ldrb	r2, [r7, #7]
 8002dde:	4948      	ldr	r1, [pc, #288]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	440b      	add	r3, r1
 8002dea:	331a      	adds	r3, #26
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	041b      	lsls	r3, r3, #16
 8002df2:	61bb      	str	r3, [r7, #24]
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 8002df4:	79fa      	ldrb	r2, [r7, #7]
 8002df6:	4942      	ldr	r1, [pc, #264]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	440b      	add	r3, r1
 8002e02:	3322      	adds	r3, #34	; 0x22
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d10c      	bne.n	8002e26 <L6474_StepClockHandler+0x406>
 8002e0c:	79fa      	ldrb	r2, [r7, #7]
 8002e0e:	493c      	ldr	r1, [pc, #240]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	440b      	add	r3, r1
 8002e1a:	331e      	adds	r3, #30
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d917      	bls.n	8002e56 <L6474_StepClockHandler+0x436>
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002e26:	79fa      	ldrb	r2, [r7, #7]
 8002e28:	4935      	ldr	r1, [pc, #212]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	440b      	add	r3, r1
 8002e34:	3322      	adds	r3, #34	; 0x22
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	b2db      	uxtb	r3, r3
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d010      	beq.n	8002e60 <L6474_StepClockHandler+0x440>
           (relativePos >= devicePrm[deviceId].stepsToTake)))
 8002e3e:	79fa      	ldrb	r2, [r7, #7]
 8002e40:	492f      	ldr	r1, [pc, #188]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3314      	adds	r3, #20
 8002e4e:	681b      	ldr	r3, [r3, #0]
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d304      	bcc.n	8002e60 <L6474_StepClockHandler+0x440>
        L6474_HardStop(deviceId);
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe fcab 	bl	80017b4 <L6474_HardStop>
 8002e5e:	e0ac      	b.n	8002fba <L6474_StepClockHandler+0x59a>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002e60:	79fa      	ldrb	r2, [r7, #7]
 8002e62:	4927      	ldr	r1, [pc, #156]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3322      	adds	r3, #34	; 0x22
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d117      	bne.n	8002ea8 <L6474_StepClockHandler+0x488>
               (speed <= devicePrm[deviceId].maxSpeed))
 8002e78:	79fa      	ldrb	r2, [r7, #7]
 8002e7a:	4921      	ldr	r1, [pc, #132]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	440b      	add	r3, r1
 8002e86:	331c      	adds	r3, #28
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002e8c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d80a      	bhi.n	8002ea8 <L6474_StepClockHandler+0x488>
        devicePrm[deviceId].motionState = STEADY;
 8002e92:	79fa      	ldrb	r2, [r7, #7]
 8002e94:	491a      	ldr	r1, [pc, #104]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	440b      	add	r3, r1
 8002ea0:	3324      	adds	r3, #36	; 0x24
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e088      	b.n	8002fba <L6474_StepClockHandler+0x59a>
        if (speed > devicePrm[deviceId].minSpeed)
 8002ea8:	79fa      	ldrb	r2, [r7, #7]
 8002eaa:	4915      	ldr	r1, [pc, #84]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	331e      	adds	r3, #30
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	f240 8082 	bls.w	8002fc8 <L6474_StepClockHandler+0x5a8>
          bool speedUpdated = FALSE;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          if (speed == 0) speed =1;
 8002eca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <L6474_StepClockHandler+0x4b4>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	857b      	strh	r3, [r7, #42]	; 0x2a
          devicePrm[deviceId].accu += deceleration / speed;
 8002ed4:	79fa      	ldrb	r2, [r7, #7]
 8002ed6:	490a      	ldr	r1, [pc, #40]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	440b      	add	r3, r1
 8002ee2:	6819      	ldr	r1, [r3, #0]
 8002ee4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	79fa      	ldrb	r2, [r7, #7]
 8002eee:	4419      	add	r1, r3
 8002ef0:	4803      	ldr	r0, [pc, #12]	; (8002f00 <L6474_StepClockHandler+0x4e0>)
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	4403      	add	r3, r0
 8002efc:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002efe:	e01c      	b.n	8002f3a <L6474_StepClockHandler+0x51a>
 8002f00:	200003f0 	.word	0x200003f0
            devicePrm[deviceId].accu -= (0X10000L);
 8002f04:	79fa      	ldrb	r2, [r7, #7]
 8002f06:	4934      	ldr	r1, [pc, #208]	; (8002fd8 <L6474_StepClockHandler+0x5b8>)
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	440b      	add	r3, r1
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	79fa      	ldrb	r2, [r7, #7]
 8002f16:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 8002f1a:	482f      	ldr	r0, [pc, #188]	; (8002fd8 <L6474_StepClockHandler+0x5b8>)
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4403      	add	r3, r0
 8002f26:	6019      	str	r1, [r3, #0]
            if (speed > 1)
 8002f28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d902      	bls.n	8002f34 <L6474_StepClockHandler+0x514>
              speed -=1;
 8002f2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f30:	3b01      	subs	r3, #1
 8002f32:	857b      	strh	r3, [r7, #42]	; 0x2a
            speedUpdated = TRUE;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002f3a:	79fa      	ldrb	r2, [r7, #7]
 8002f3c:	4926      	ldr	r1, [pc, #152]	; (8002fd8 <L6474_StepClockHandler+0x5b8>)
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	440b      	add	r3, r1
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4e:	d2d9      	bcs.n	8002f04 <L6474_StepClockHandler+0x4e4>
          if (speedUpdated)
 8002f50:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d037      	beq.n	8002fc8 <L6474_StepClockHandler+0x5a8>
            if (speed < devicePrm[deviceId].minSpeed)
 8002f58:	79fa      	ldrb	r2, [r7, #7]
 8002f5a:	491f      	ldr	r1, [pc, #124]	; (8002fd8 <L6474_StepClockHandler+0x5b8>)
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	440b      	add	r3, r1
 8002f66:	331e      	adds	r3, #30
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d209      	bcs.n	8002f86 <L6474_StepClockHandler+0x566>
              speed = devicePrm[deviceId].minSpeed;
 8002f72:	79fa      	ldrb	r2, [r7, #7]
 8002f74:	4918      	ldr	r1, [pc, #96]	; (8002fd8 <L6474_StepClockHandler+0x5b8>)
 8002f76:	4613      	mov	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	440b      	add	r3, r1
 8002f80:	331e      	adds	r3, #30
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	857b      	strh	r3, [r7, #42]	; 0x2a
            devicePrm[deviceId].speed = speed;
 8002f86:	79fa      	ldrb	r2, [r7, #7]
 8002f88:	4913      	ldr	r1, [pc, #76]	; (8002fd8 <L6474_StepClockHandler+0x5b8>)
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	440b      	add	r3, r1
 8002f94:	3320      	adds	r3, #32
 8002f96:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002f98:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 8002f9a:	79fa      	ldrb	r2, [r7, #7]
 8002f9c:	490e      	ldr	r1, [pc, #56]	; (8002fd8 <L6474_StepClockHandler+0x5b8>)
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	440b      	add	r3, r1
 8002fa8:	3320      	adds	r3, #32
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff f88e 	bl	80020d4 <L6474_ApplySpeed>
      break;
 8002fb8:	e006      	b.n	8002fc8 <L6474_StepClockHandler+0x5a8>
 8002fba:	e005      	b.n	8002fc8 <L6474_StepClockHandler+0x5a8>
      break;
 8002fbc:	bf00      	nop
 8002fbe:	e004      	b.n	8002fca <L6474_StepClockHandler+0x5aa>
        break;
 8002fc0:	bf00      	nop
 8002fc2:	e002      	b.n	8002fca <L6474_StepClockHandler+0x5aa>
      break;
 8002fc4:	bf00      	nop
 8002fc6:	e000      	b.n	8002fca <L6474_StepClockHandler+0x5aa>
      break;
 8002fc8:	bf00      	nop
    }
  }  
  /* Set isr flag */
  isrFlag = FALSE;
 8002fca:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <L6474_StepClockHandler+0x5bc>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	3730      	adds	r7, #48	; 0x30
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	200003f0 	.word	0x200003f0
 8002fdc:	200003ed 	.word	0x200003ed

08002fe0 <L6474_Ocd_Th_to_Par>:
 * @brief Converts mA in compatible values for OCD_TH register
 * @param[in] Tval
 * @retval OCD_TH values
 **********************************************************/
inline uint8_t L6474_Ocd_Th_to_Par(float Tval)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 375)*0.002666f)+0.5f));
 8002fea:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fee:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003020 <L6474_Ocd_Th_to_Par+0x40>
 8002ff2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ff6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003024 <L6474_Ocd_Th_to_Par+0x44>
 8002ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ffe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003002:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800300a:	edc7 7a00 	vstr	s15, [r7]
 800300e:	783b      	ldrb	r3, [r7, #0]
 8003010:	b2db      	uxtb	r3, r3
}
 8003012:	4618      	mov	r0, r3
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	43bb8000 	.word	0x43bb8000
 8003024:	3b2eb80f 	.word	0x3b2eb80f

08003028 <L6474_Tval_Current_to_Par>:
 * @brief Converts mA in compatible values for TVAL register 
 * @param[in] Tval
 * @retval TVAL values
 **********************************************************/
inline uint8_t L6474_Tval_Current_to_Par(float Tval)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 31.25f)*0.032f)+0.5f));
 8003032:	edd7 7a01 	vldr	s15, [r7, #4]
 8003036:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003068 <L6474_Tval_Current_to_Par+0x40>
 800303a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800303e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800306c <L6474_Tval_Current_to_Par+0x44>
 8003042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003046:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800304a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800304e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003052:	edc7 7a00 	vstr	s15, [r7]
 8003056:	783b      	ldrb	r3, [r7, #0]
 8003058:	b2db      	uxtb	r3, r3
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	41fa0000 	.word	0x41fa0000
 800306c:	3d03126f 	.word	0x3d03126f

08003070 <L6474_Tmin_Time_to_Par>:
 * for TON_MIN register
 * @param[in] Tmin
 * @retval TON_MIN values
 **********************************************************/
inline uint8_t L6474_Tmin_Time_to_Par(float Tmin)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tmin - 0.5f)*2.0f)+0.5f));
 800307a:	edd7 7a01 	vldr	s15, [r7, #4]
 800307e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003082:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003086:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800308a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800308e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003096:	edc7 7a00 	vstr	s15, [r7]
 800309a:	783b      	ldrb	r3, [r7, #0]
 800309c:	b2db      	uxtb	r3, r3
}
 800309e:	4618      	mov	r0, r3
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
	...

080030ac <L6474_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 **********************************************************/
void L6474_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  if (L6474_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 80030b6:	4b0d      	ldr	r3, [pc, #52]	; (80030ec <L6474_WriteBytes+0x40>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	6839      	ldr	r1, [r7, #0]
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f001 faa1 	bl	8004608 <L6474_Board_SpiWriteBytes>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <L6474_WriteBytes+0x28>
  {
    L6474_ErrorHandler(L6474_ERROR_1);
 80030cc:	f248 0001 	movw	r0, #32769	; 0x8001
 80030d0:	f7ff f91e 	bl	8002310 <L6474_ErrorHandler>
  }
  
  if (isrFlag)
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <L6474_WriteBytes+0x44>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <L6474_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <L6474_WriteBytes+0x48>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	701a      	strb	r2, [r3, #0]
  }
}
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	200003d0 	.word	0x200003d0
 80030f0:	200003ed 	.word	0x200003ed
 80030f4:	200003ec 	.word	0x200003ec

080030f8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08e      	sub	sp, #56	; 0x38
 80030fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80030fe:	1d3b      	adds	r3, r7, #4
 8003100:	2234      	movs	r2, #52	; 0x34
 8003102:	2100      	movs	r1, #0
 8003104:	4618      	mov	r0, r3
 8003106:	f025 fc4d 	bl	80289a4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800310a:	4b3a      	ldr	r3, [pc, #232]	; (80031f4 <MX_LTDC_Init+0xfc>)
 800310c:	4a3a      	ldr	r2, [pc, #232]	; (80031f8 <MX_LTDC_Init+0x100>)
 800310e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003110:	4b38      	ldr	r3, [pc, #224]	; (80031f4 <MX_LTDC_Init+0xfc>)
 8003112:	2200      	movs	r2, #0
 8003114:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003116:	4b37      	ldr	r3, [pc, #220]	; (80031f4 <MX_LTDC_Init+0xfc>)
 8003118:	2200      	movs	r2, #0
 800311a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800311c:	4b35      	ldr	r3, [pc, #212]	; (80031f4 <MX_LTDC_Init+0xfc>)
 800311e:	2200      	movs	r2, #0
 8003120:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003122:	4b34      	ldr	r3, [pc, #208]	; (80031f4 <MX_LTDC_Init+0xfc>)
 8003124:	2200      	movs	r2, #0
 8003126:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 39;
 8003128:	4b32      	ldr	r3, [pc, #200]	; (80031f4 <MX_LTDC_Init+0xfc>)
 800312a:	2227      	movs	r2, #39	; 0x27
 800312c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 8;
 800312e:	4b31      	ldr	r3, [pc, #196]	; (80031f4 <MX_LTDC_Init+0xfc>)
 8003130:	2208      	movs	r2, #8
 8003132:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8003134:	4b2f      	ldr	r3, [pc, #188]	; (80031f4 <MX_LTDC_Init+0xfc>)
 8003136:	222a      	movs	r2, #42	; 0x2a
 8003138:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800313a:	4b2e      	ldr	r3, [pc, #184]	; (80031f4 <MX_LTDC_Init+0xfc>)
 800313c:	220b      	movs	r2, #11
 800313e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8003140:	4b2c      	ldr	r3, [pc, #176]	; (80031f4 <MX_LTDC_Init+0xfc>)
 8003142:	f240 220a 	movw	r2, #522	; 0x20a
 8003146:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8003148:	4b2a      	ldr	r3, [pc, #168]	; (80031f4 <MX_LTDC_Init+0xfc>)
 800314a:	f240 121b 	movw	r2, #283	; 0x11b
 800314e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 528;
 8003150:	4b28      	ldr	r3, [pc, #160]	; (80031f4 <MX_LTDC_Init+0xfc>)
 8003152:	f44f 7204 	mov.w	r2, #528	; 0x210
 8003156:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8003158:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <MX_LTDC_Init+0xfc>)
 800315a:	f240 121d 	movw	r2, #285	; 0x11d
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003160:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <MX_LTDC_Init+0xfc>)
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003168:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <MX_LTDC_Init+0xfc>)
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003170:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <MX_LTDC_Init+0xfc>)
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003178:	481e      	ldr	r0, [pc, #120]	; (80031f4 <MX_LTDC_Init+0xfc>)
 800317a:	f004 f87f 	bl	800727c <HAL_LTDC_Init>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8003184:	f000 fac2 	bl	800370c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800318c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003190:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8003196:	f44f 7388 	mov.w	r3, #272	; 0x110
 800319a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800319c:	2302      	movs	r3, #2
 800319e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80031a0:	23ff      	movs	r3, #255	; 0xff
 80031a2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80031a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ac:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80031ae:	2305      	movs	r3, #5
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80031b6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80031bc:	f44f 7388 	mov.w	r3, #272	; 0x110
 80031c0:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80031d4:	1d3b      	adds	r3, r7, #4
 80031d6:	2200      	movs	r2, #0
 80031d8:	4619      	mov	r1, r3
 80031da:	4806      	ldr	r0, [pc, #24]	; (80031f4 <MX_LTDC_Init+0xfc>)
 80031dc:	f004 f9d6 	bl	800758c <HAL_LTDC_ConfigLayer>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 80031e6:	f000 fa91 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80031ea:	bf00      	nop
 80031ec:	3738      	adds	r7, #56	; 0x38
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000468 	.word	0x20000468
 80031f8:	50001000 	.word	0x50001000

080031fc <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b0c0      	sub	sp, #256	; 0x100
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003204:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003214:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003218:	22bc      	movs	r2, #188	; 0xbc
 800321a:	2100      	movs	r1, #0
 800321c:	4618      	mov	r0, r3
 800321e:	f025 fbc1 	bl	80289a4 <memset>
  if(ltdcHandle->Instance==LTDC)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4abd      	ldr	r2, [pc, #756]	; (800351c <HAL_LTDC_MspInit+0x320>)
 8003228:	4293      	cmp	r3, r2
 800322a:	f040 8171 	bne.w	8003510 <HAL_LTDC_MspInit+0x314>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800322e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003232:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8003234:	2301      	movs	r3, #1
 8003236:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8003238:	2312      	movs	r3, #18
 800323a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800323c:	2302      	movs	r3, #2
 800323e:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003240:	2302      	movs	r3, #2
 8003242:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3R = 1;
 8003244:	2301      	movs	r3, #1
 8003246:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8003248:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800324c:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800324e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003252:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8003254:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003258:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800325a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800325e:	4618      	mov	r0, r3
 8003260:	f005 fbda 	bl	8008a18 <HAL_RCCEx_PeriphCLKConfig>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_LTDC_MspInit+0x72>
    {
      Error_Handler();
 800326a:	f000 fa4f 	bl	800370c <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800326e:	4bac      	ldr	r3, [pc, #688]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003270:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003274:	4aaa      	ldr	r2, [pc, #680]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003276:	f043 0308 	orr.w	r3, r3, #8
 800327a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800327e:	4ba8      	ldr	r3, [pc, #672]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003280:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800328c:	4ba4      	ldr	r3, [pc, #656]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 800328e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003292:	4aa3      	ldr	r2, [pc, #652]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003294:	f043 0310 	orr.w	r3, r3, #16
 8003298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800329c:	4ba0      	ldr	r3, [pc, #640]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 800329e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80032aa:	4b9d      	ldr	r3, [pc, #628]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 80032ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b0:	4a9b      	ldr	r2, [pc, #620]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 80032b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032ba:	4b99      	ldr	r3, [pc, #612]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 80032bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80032c8:	4b95      	ldr	r3, [pc, #596]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 80032ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ce:	4a94      	ldr	r2, [pc, #592]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 80032d0:	f043 0320 	orr.w	r3, r3, #32
 80032d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032d8:	4b91      	ldr	r3, [pc, #580]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 80032da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	623b      	str	r3, [r7, #32]
 80032e4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032e6:	4b8e      	ldr	r3, [pc, #568]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 80032e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ec:	4a8c      	ldr	r2, [pc, #560]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 80032ee:	f043 0304 	orr.w	r3, r3, #4
 80032f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032f6:	4b8a      	ldr	r3, [pc, #552]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 80032f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003304:	4b86      	ldr	r3, [pc, #536]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800330a:	4a85      	ldr	r2, [pc, #532]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003314:	4b82      	ldr	r3, [pc, #520]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	61bb      	str	r3, [r7, #24]
 8003320:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003322:	4b7f      	ldr	r3, [pc, #508]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003328:	4a7d      	ldr	r2, [pc, #500]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 800332a:	f043 0302 	orr.w	r3, r3, #2
 800332e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003332:	4b7b      	ldr	r3, [pc, #492]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003340:	4b77      	ldr	r3, [pc, #476]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003346:	4a76      	ldr	r2, [pc, #472]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800334c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003350:	4b73      	ldr	r3, [pc, #460]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800335e:	4b70      	ldr	r3, [pc, #448]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003364:	4a6e      	ldr	r2, [pc, #440]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800336a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800336e:	4b6c      	ldr	r3, [pc, #432]	; (8003520 <HAL_LTDC_MspInit+0x324>)
 8003370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800337c:	2370      	movs	r3, #112	; 0x70
 800337e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003382:	2302      	movs	r3, #2
 8003384:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	2300      	movs	r3, #0
 800338a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338e:	2300      	movs	r3, #0
 8003390:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003394:	230e      	movs	r3, #14
 8003396:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800339a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800339e:	4619      	mov	r1, r3
 80033a0:	4860      	ldr	r0, [pc, #384]	; (8003524 <HAL_LTDC_MspInit+0x328>)
 80033a2:	f003 fda1 	bl	8006ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 80033a6:	f240 63f7 	movw	r3, #1783	; 0x6f7
 80033aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ae:	2302      	movs	r3, #2
 80033b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033c0:	230e      	movs	r3, #14
 80033c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80033c6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033ca:	4619      	mov	r1, r3
 80033cc:	4856      	ldr	r0, [pc, #344]	; (8003528 <HAL_LTDC_MspInit+0x32c>)
 80033ce:	f003 fd8b 	bl	8006ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033da:	2302      	movs	r3, #2
 80033dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e6:	2300      	movs	r3, #0
 80033e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033ec:	230e      	movs	r3, #14
 80033ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033f2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033f6:	4619      	mov	r1, r3
 80033f8:	484c      	ldr	r0, [pc, #304]	; (800352c <HAL_LTDC_MspInit+0x330>)
 80033fa:	f003 fd75 	bl	8006ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033fe:	2301      	movs	r3, #1
 8003400:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003404:	2302      	movs	r3, #2
 8003406:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003410:	2300      	movs	r3, #0
 8003412:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003416:	230e      	movs	r3, #14
 8003418:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800341c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003420:	4619      	mov	r1, r3
 8003422:	4843      	ldr	r0, [pc, #268]	; (8003530 <HAL_LTDC_MspInit+0x334>)
 8003424:	f003 fd60 	bl	8006ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003428:	2320      	movs	r3, #32
 800342a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342e:	2302      	movs	r3, #2
 8003430:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003440:	230e      	movs	r3, #14
 8003442:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003446:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800344a:	4619      	mov	r1, r3
 800344c:	4839      	ldr	r0, [pc, #228]	; (8003534 <HAL_LTDC_MspInit+0x338>)
 800344e:	f003 fd4b 	bl	8006ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003452:	2302      	movs	r3, #2
 8003454:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003458:	2302      	movs	r3, #2
 800345a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345e:	2300      	movs	r3, #0
 8003460:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003464:	2300      	movs	r3, #0
 8003466:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800346a:	2309      	movs	r3, #9
 800346c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003470:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003474:	4619      	mov	r1, r3
 8003476:	4830      	ldr	r0, [pc, #192]	; (8003538 <HAL_LTDC_MspInit+0x33c>)
 8003478:	f003 fd36 	bl	8006ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13|GPIO_PIN_15;
 800347c:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 8003480:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003490:	2300      	movs	r3, #0
 8003492:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003496:	230e      	movs	r3, #14
 8003498:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800349c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80034a0:	4619      	mov	r1, r3
 80034a2:	4826      	ldr	r0, [pc, #152]	; (800353c <HAL_LTDC_MspInit+0x340>)
 80034a4:	f003 fd20 	bl	8006ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80034a8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80034ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	2302      	movs	r3, #2
 80034b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034c2:	230e      	movs	r3, #14
 80034c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034c8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80034cc:	4619      	mov	r1, r3
 80034ce:	481c      	ldr	r0, [pc, #112]	; (8003540 <HAL_LTDC_MspInit+0x344>)
 80034d0:	f003 fd0a 	bl	8006ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034dc:	2302      	movs	r3, #2
 80034de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e8:	2300      	movs	r3, #0
 80034ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80034ee:	2309      	movs	r3, #9
 80034f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80034f8:	4619      	mov	r1, r3
 80034fa:	4811      	ldr	r0, [pc, #68]	; (8003540 <HAL_LTDC_MspInit+0x344>)
 80034fc:	f003 fcf4 	bl	8006ee8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003500:	2200      	movs	r2, #0
 8003502:	2105      	movs	r1, #5
 8003504:	2058      	movs	r0, #88	; 0x58
 8003506:	f003 facb 	bl	8006aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800350a:	2058      	movs	r0, #88	; 0x58
 800350c:	f003 fae2 	bl	8006ad4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8003510:	bf00      	nop
 8003512:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	50001000 	.word	0x50001000
 8003520:	58024400 	.word	0x58024400
 8003524:	58021000 	.word	0x58021000
 8003528:	58022000 	.word	0x58022000
 800352c:	58021400 	.word	0x58021400
 8003530:	58020800 	.word	0x58020800
 8003534:	58020000 	.word	0x58020000
 8003538:	58020400 	.word	0x58020400
 800353c:	58021c00 	.word	0x58021c00
 8003540:	58021800 	.word	0x58021800

08003544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003546:	b089      	sub	sp, #36	; 0x24
 8003548:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800354a:	f001 f8c3 	bl	80046d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800354e:	f000 f831 	bl	80035b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003552:	f7fd fad7 	bl	8000b04 <MX_GPIO_Init>
  MX_SPI2_Init();
 8003556:	f000 f9ad 	bl	80038b4 <MX_SPI2_Init>
  MX_ADC3_Init();
 800355a:	f7fd f893 	bl	8000684 <MX_ADC3_Init>
  MX_UART5_Init();
 800355e:	f000 fd25 	bl	8003fac <MX_UART5_Init>
  MX_I2C1_SMBUS_Init();
 8003562:	f7fd fba1 	bl	8000ca8 <MX_I2C1_SMBUS_Init>
  MX_DMA2D_Init();
 8003566:	f7fd f9ad 	bl	80008c4 <MX_DMA2D_Init>
  MX_LTDC_Init();
 800356a:	f7ff fdc5 	bl	80030f8 <MX_LTDC_Init>
  MX_CRC_Init();
 800356e:	f7fd f965 	bl	800083c <MX_CRC_Init>
  MX_TIM2_Init();
 8003572:	f000 fc67 	bl	8003e44 <MX_TIM2_Init>
  MX_TouchGFX_Init();
 8003576:	f00e f811 	bl	801159c <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  L6474_SetRegisterToGivenValues(0,gL6474InitParams);
 800357a:	4e0d      	ldr	r6, [pc, #52]	; (80035b0 <main+0x6c>)
 800357c:	466d      	mov	r5, sp
 800357e:	f106 040c 	add.w	r4, r6, #12
 8003582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003586:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800358a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800358e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003592:	2000      	movs	r0, #0
 8003594:	f7ff f87a 	bl	800268c <L6474_SetRegisterToGivenValues>
  BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6474,1);
 8003598:	2101      	movs	r1, #1
 800359a:	f641 104a 	movw	r0, #6474	; 0x194a
 800359e:	f000 f90f 	bl	80037c0 <BSP_MotorControl_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80035a2:	f00a fc13 	bl	800ddcc <osKernelInitialize>
  MX_FREERTOS_Init();
 80035a6:	f7fd f9e9 	bl	800097c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80035aa:	f00a fc33 	bl	800de14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80035ae:	e7fe      	b.n	80035ae <main+0x6a>
 80035b0:	2000012c 	.word	0x2000012c

080035b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b09c      	sub	sp, #112	; 0x70
 80035b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035be:	224c      	movs	r2, #76	; 0x4c
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f025 f9ee 	bl	80289a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035c8:	1d3b      	adds	r3, r7, #4
 80035ca:	2220      	movs	r2, #32
 80035cc:	2100      	movs	r1, #0
 80035ce:	4618      	mov	r0, r3
 80035d0:	f025 f9e8 	bl	80289a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80035d4:	2002      	movs	r0, #2
 80035d6:	f004 f9e9 	bl	80079ac <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035da:	2300      	movs	r3, #0
 80035dc:	603b      	str	r3, [r7, #0]
 80035de:	4b34      	ldr	r3, [pc, #208]	; (80036b0 <SystemClock_Config+0xfc>)
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	4a33      	ldr	r2, [pc, #204]	; (80036b0 <SystemClock_Config+0xfc>)
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035ea:	4b31      	ldr	r3, [pc, #196]	; (80036b0 <SystemClock_Config+0xfc>)
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	4b2f      	ldr	r3, [pc, #188]	; (80036b4 <SystemClock_Config+0x100>)
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	4a2e      	ldr	r2, [pc, #184]	; (80036b4 <SystemClock_Config+0x100>)
 80035fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035fe:	6193      	str	r3, [r2, #24]
 8003600:	4b2c      	ldr	r3, [pc, #176]	; (80036b4 <SystemClock_Config+0x100>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800360c:	bf00      	nop
 800360e:	4b29      	ldr	r3, [pc, #164]	; (80036b4 <SystemClock_Config+0x100>)
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361a:	d1f8      	bne.n	800360e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800361c:	4b26      	ldr	r3, [pc, #152]	; (80036b8 <SystemClock_Config+0x104>)
 800361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003620:	f023 0303 	bic.w	r3, r3, #3
 8003624:	4a24      	ldr	r2, [pc, #144]	; (80036b8 <SystemClock_Config+0x104>)
 8003626:	f043 0302 	orr.w	r3, r3, #2
 800362a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800362c:	2301      	movs	r3, #1
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003634:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003636:	2302      	movs	r3, #2
 8003638:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800363a:	2302      	movs	r3, #2
 800363c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800363e:	2301      	movs	r3, #1
 8003640:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003642:	2364      	movs	r3, #100	; 0x64
 8003644:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003646:	2302      	movs	r3, #2
 8003648:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800364a:	2304      	movs	r3, #4
 800364c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800364e:	2302      	movs	r3, #2
 8003650:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003652:	230c      	movs	r3, #12
 8003654:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003656:	2300      	movs	r3, #0
 8003658:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800365e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003662:	4618      	mov	r0, r3
 8003664:	f004 f9dc 	bl	8007a20 <HAL_RCC_OscConfig>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800366e:	f000 f84d 	bl	800370c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003672:	233f      	movs	r3, #63	; 0x3f
 8003674:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003676:	2303      	movs	r3, #3
 8003678:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800367e:	2308      	movs	r3, #8
 8003680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003682:	2340      	movs	r3, #64	; 0x40
 8003684:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003686:	2340      	movs	r3, #64	; 0x40
 8003688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800368a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800368e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003690:	2340      	movs	r3, #64	; 0x40
 8003692:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003694:	1d3b      	adds	r3, r7, #4
 8003696:	2102      	movs	r1, #2
 8003698:	4618      	mov	r0, r3
 800369a:	f004 fdef 	bl	800827c <HAL_RCC_ClockConfig>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80036a4:	f000 f832 	bl	800370c <Error_Handler>
  }
}
 80036a8:	bf00      	nop
 80036aa:	3770      	adds	r7, #112	; 0x70
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	58000400 	.word	0x58000400
 80036b4:	58024800 	.word	0x58024800
 80036b8:	58024400 	.word	0x58024400

080036bc <MyFlagInterruptHandler>:

/* USER CODE BEGIN 4 */
//stepper driver interrupt
void MyFlagInterruptHandler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
  /* Get the value of the status register via the L6474 command GET_STATUS */
  uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(0);
 80036c2:	2000      	movs	r0, #0
 80036c4:	f000 f8d0 	bl	8003868 <BSP_MotorControl_CmdGetStatus>
 80036c8:	4603      	mov	r3, r0
 80036ca:	80fb      	strh	r3, [r7, #6]
  {
    //overcurrent detection
    // Action to be customized
  }

}
 80036cc:	bf00      	nop
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_ADC_LevelOutOfWindowCallback>:
// cpu temp interrupt
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc){
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	// do something in case of analog watchdog interrupts
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a04      	ldr	r2, [pc, #16]	; (8003708 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d101      	bne.n	80036fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80036fa:	f001 f827 	bl	800474c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40000400 	.word	0x40000400

0800370c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003710:	b672      	cpsid	i
}
 8003712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003714:	e7fe      	b.n	8003714 <Error_Handler+0x8>

08003716 <Powerstep01_GetMotorHandle>:
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003716:	b480      	push	{r7}
 8003718:	af00      	add	r7, sp, #0
 800371a:	2300      	movs	r3, #0
 800371c:	4618      	mov	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <L6206_GetMotorHandle>:
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003726:	b480      	push	{r7}
 8003728:	af00      	add	r7, sp, #0
 800372a:	2300      	movs	r3, #0
 800372c:	4618      	mov	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003736:	b480      	push	{r7}
 8003738:	af00      	add	r7, sp, #0
 800373a:	2300      	movs	r3, #0
 800373c:	4618      	mov	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 8003750:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <BSP_MotorControl_AttachFlagInterrupt+0x26>
 8003758:	4b09      	ldr	r3, [pc, #36]	; (8003780 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	4798      	blx	r3
 800376c:	e004      	b.n	8003778 <BSP_MotorControl_AttachFlagInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 800376e:	f640 0002 	movw	r0, #2050	; 0x802
 8003772:	f000 f807 	bl	8003784 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003776:	bf00      	nop
 8003778:	bf00      	nop
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20000510 	.word	0x20000510

08003784 <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <BSP_MotorControl_ErrorHandler+0x38>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00d      	beq.n	80037b2 <BSP_MotorControl_ErrorHandler+0x2e>
 8003796:	4b09      	ldr	r3, [pc, #36]	; (80037bc <BSP_MotorControl_ErrorHandler+0x38>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d007      	beq.n	80037b2 <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 80037a2:	4b06      	ldr	r3, [pc, #24]	; (80037bc <BSP_MotorControl_ErrorHandler+0x38>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037aa:	88fa      	ldrh	r2, [r7, #6]
 80037ac:	4610      	mov	r0, r2
 80037ae:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 80037b0:	e000      	b.n	80037b4 <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 80037b2:	e7fe      	b.n	80037b2 <BSP_MotorControl_ErrorHandler+0x2e>
}
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000510 	.word	0x20000510

080037c0 <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] nbDevices Number of motor devices to use (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, uint8_t nbDevices)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	460a      	mov	r2, r1
 80037ca:	80fb      	strh	r3, [r7, #6]
 80037cc:	4613      	mov	r3, r2
 80037ce:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 80037d0:	4a23      	ldr	r2, [pc, #140]	; (8003860 <BSP_MotorControl_Init+0xa0>)
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	8013      	strh	r3, [r2, #0]
  
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	f641 124a 	movw	r2, #6474	; 0x194a
 80037dc:	4293      	cmp	r3, r2
 80037de:	d105      	bne.n	80037ec <BSP_MotorControl_Init+0x2c>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 80037e0:	f7fd fe80 	bl	80014e4 <L6474_GetMotorHandle>
 80037e4:	4603      	mov	r3, r0
 80037e6:	4a1f      	ldr	r2, [pc, #124]	; (8003864 <BSP_MotorControl_Init+0xa4>)
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e020      	b.n	800382e <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 80037ec:	88fb      	ldrh	r3, [r7, #6]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d105      	bne.n	80037fe <BSP_MotorControl_Init+0x3e>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 80037f2:	f7ff ff90 	bl	8003716 <Powerstep01_GetMotorHandle>
 80037f6:	4603      	mov	r3, r0
 80037f8:	4a1a      	ldr	r2, [pc, #104]	; (8003864 <BSP_MotorControl_Init+0xa4>)
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	e017      	b.n	800382e <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	f641 023e 	movw	r2, #6206	; 0x183e
 8003804:	4293      	cmp	r3, r2
 8003806:	d105      	bne.n	8003814 <BSP_MotorControl_Init+0x54>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 8003808:	f7ff ff8d 	bl	8003726 <L6206_GetMotorHandle>
 800380c:	4603      	mov	r3, r0
 800380e:	4a15      	ldr	r2, [pc, #84]	; (8003864 <BSP_MotorControl_Init+0xa4>)
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e00c      	b.n	800382e <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	f5b3 5fc2 	cmp.w	r3, #6208	; 0x1840
 800381a:	d105      	bne.n	8003828 <BSP_MotorControl_Init+0x68>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 800381c:	f7ff ff8b 	bl	8003736 <L6208_GetMotorHandle>
 8003820:	4603      	mov	r3, r0
 8003822:	4a10      	ldr	r2, [pc, #64]	; (8003864 <BSP_MotorControl_Init+0xa4>)
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	e002      	b.n	800382e <BSP_MotorControl_Init+0x6e>
  }
  else
  {
    motorDrvHandle = 0;
 8003828:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <BSP_MotorControl_Init+0xa4>)
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
  }

  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 800382e:	4b0d      	ldr	r3, [pc, #52]	; (8003864 <BSP_MotorControl_Init+0xa4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00b      	beq.n	800384e <BSP_MotorControl_Init+0x8e>
 8003836:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <BSP_MotorControl_Init+0xa4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d006      	beq.n	800384e <BSP_MotorControl_Init+0x8e>
  {
    motorDrvHandle->Init(nbDevices);
 8003840:	4b08      	ldr	r3, [pc, #32]	; (8003864 <BSP_MotorControl_Init+0xa4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	797a      	ldrb	r2, [r7, #5]
 8003848:	4610      	mov	r0, r2
 800384a:	4798      	blx	r3
 800384c:	e004      	b.n	8003858 <BSP_MotorControl_Init+0x98>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(4);
 800384e:	f640 0004 	movw	r0, #2052	; 0x804
 8003852:	f7ff ff97 	bl	8003784 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003856:	bf00      	nop
 8003858:	bf00      	nop
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000514 	.word	0x20000514
 8003864:	20000510 	.word	0x20000510

08003868 <BSP_MotorControl_CmdGetStatus>:
 * the flags of the status register are reset. 
 * This is not the case when the status register is read with the
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 8003876:	4b0e      	ldr	r3, [pc, #56]	; (80038b0 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00f      	beq.n	800389e <BSP_MotorControl_CmdGetStatus+0x36>
 800387e:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <BSP_MotorControl_CmdGetStatus+0x36>
  {
    status = motorDrvHandle->CmdGetStatus(deviceId);
 800388a:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <BSP_MotorControl_CmdGetStatus+0x48>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003892:	79fa      	ldrb	r2, [r7, #7]
 8003894:	4610      	mov	r0, r2
 8003896:	4798      	blx	r3
 8003898:	4603      	mov	r3, r0
 800389a:	81fb      	strh	r3, [r7, #14]
 800389c:	e003      	b.n	80038a6 <BSP_MotorControl_CmdGetStatus+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 800389e:	f640 0022 	movw	r0, #2082	; 0x822
 80038a2:	f7ff ff6f 	bl	8003784 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 80038a6:	89fb      	ldrh	r3, [r7, #14]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000510 	.word	0x20000510

080038b4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80038b8:	4b27      	ldr	r3, [pc, #156]	; (8003958 <MX_SPI2_Init+0xa4>)
 80038ba:	4a28      	ldr	r2, [pc, #160]	; (800395c <MX_SPI2_Init+0xa8>)
 80038bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80038be:	4b26      	ldr	r3, [pc, #152]	; (8003958 <MX_SPI2_Init+0xa4>)
 80038c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80038c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80038c6:	4b24      	ldr	r3, [pc, #144]	; (8003958 <MX_SPI2_Init+0xa4>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_32BIT;
 80038cc:	4b22      	ldr	r3, [pc, #136]	; (8003958 <MX_SPI2_Init+0xa4>)
 80038ce:	221f      	movs	r2, #31
 80038d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038d2:	4b21      	ldr	r3, [pc, #132]	; (8003958 <MX_SPI2_Init+0xa4>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038d8:	4b1f      	ldr	r3, [pc, #124]	; (8003958 <MX_SPI2_Init+0xa4>)
 80038da:	2200      	movs	r2, #0
 80038dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80038de:	4b1e      	ldr	r3, [pc, #120]	; (8003958 <MX_SPI2_Init+0xa4>)
 80038e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80038e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80038e6:	4b1c      	ldr	r3, [pc, #112]	; (8003958 <MX_SPI2_Init+0xa4>)
 80038e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038ee:	4b1a      	ldr	r3, [pc, #104]	; (8003958 <MX_SPI2_Init+0xa4>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80038f4:	4b18      	ldr	r3, [pc, #96]	; (8003958 <MX_SPI2_Init+0xa4>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038fa:	4b17      	ldr	r3, [pc, #92]	; (8003958 <MX_SPI2_Init+0xa4>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8003900:	4b15      	ldr	r3, [pc, #84]	; (8003958 <MX_SPI2_Init+0xa4>)
 8003902:	2200      	movs	r2, #0
 8003904:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003906:	4b14      	ldr	r3, [pc, #80]	; (8003958 <MX_SPI2_Init+0xa4>)
 8003908:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800390c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800390e:	4b12      	ldr	r3, [pc, #72]	; (8003958 <MX_SPI2_Init+0xa4>)
 8003910:	2200      	movs	r2, #0
 8003912:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003914:	4b10      	ldr	r3, [pc, #64]	; (8003958 <MX_SPI2_Init+0xa4>)
 8003916:	2200      	movs	r2, #0
 8003918:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800391a:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <MX_SPI2_Init+0xa4>)
 800391c:	2200      	movs	r2, #0
 800391e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003920:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <MX_SPI2_Init+0xa4>)
 8003922:	2200      	movs	r2, #0
 8003924:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003926:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <MX_SPI2_Init+0xa4>)
 8003928:	2200      	movs	r2, #0
 800392a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800392c:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <MX_SPI2_Init+0xa4>)
 800392e:	2200      	movs	r2, #0
 8003930:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003932:	4b09      	ldr	r3, [pc, #36]	; (8003958 <MX_SPI2_Init+0xa4>)
 8003934:	2200      	movs	r2, #0
 8003936:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003938:	4b07      	ldr	r3, [pc, #28]	; (8003958 <MX_SPI2_Init+0xa4>)
 800393a:	2200      	movs	r2, #0
 800393c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800393e:	4b06      	ldr	r3, [pc, #24]	; (8003958 <MX_SPI2_Init+0xa4>)
 8003940:	2200      	movs	r2, #0
 8003942:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003944:	4804      	ldr	r0, [pc, #16]	; (8003958 <MX_SPI2_Init+0xa4>)
 8003946:	f007 faf3 	bl	800af30 <HAL_SPI_Init>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8003950:	f7ff fedc 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003954:	bf00      	nop
 8003956:	bd80      	pop	{r7, pc}
 8003958:	20000518 	.word	0x20000518
 800395c:	40003800 	.word	0x40003800

08003960 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b0b8      	sub	sp, #224	; 0xe0
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003968:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	60da      	str	r2, [r3, #12]
 8003976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003978:	f107 0310 	add.w	r3, r7, #16
 800397c:	22bc      	movs	r2, #188	; 0xbc
 800397e:	2100      	movs	r1, #0
 8003980:	4618      	mov	r0, r3
 8003982:	f025 f80f 	bl	80289a4 <memset>
  if(spiHandle->Instance==SPI2)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a25      	ldr	r2, [pc, #148]	; (8003a20 <HAL_SPI_MspInit+0xc0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d142      	bne.n	8003a16 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003994:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003996:	2300      	movs	r3, #0
 8003998:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800399a:	f107 0310 	add.w	r3, r7, #16
 800399e:	4618      	mov	r0, r3
 80039a0:	f005 f83a 	bl	8008a18 <HAL_RCCEx_PeriphCLKConfig>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80039aa:	f7ff feaf 	bl	800370c <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80039ae:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <HAL_SPI_MspInit+0xc4>)
 80039b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039b4:	4a1b      	ldr	r2, [pc, #108]	; (8003a24 <HAL_SPI_MspInit+0xc4>)
 80039b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039be:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <HAL_SPI_MspInit+0xc4>)
 80039c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039cc:	4b15      	ldr	r3, [pc, #84]	; (8003a24 <HAL_SPI_MspInit+0xc4>)
 80039ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039d2:	4a14      	ldr	r2, [pc, #80]	; (8003a24 <HAL_SPI_MspInit+0xc4>)
 80039d4:	f043 0302 	orr.w	r3, r3, #2
 80039d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039dc:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <HAL_SPI_MspInit+0xc4>)
 80039de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80039ea:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80039ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f2:	2302      	movs	r3, #2
 80039f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fe:	2300      	movs	r3, #0
 8003a00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a04:	2305      	movs	r3, #5
 8003a06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a0a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4805      	ldr	r0, [pc, #20]	; (8003a28 <HAL_SPI_MspInit+0xc8>)
 8003a12:	f003 fa69 	bl	8006ee8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003a16:	bf00      	nop
 8003a18:	37e0      	adds	r7, #224	; 0xe0
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40003800 	.word	0x40003800
 8003a24:	58024400 	.word	0x58024400
 8003a28:	58020400 	.word	0x58020400

08003a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a32:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <HAL_MspInit+0x38>)
 8003a34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a38:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <HAL_MspInit+0x38>)
 8003a3a:	f043 0302 	orr.w	r3, r3, #2
 8003a3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <HAL_MspInit+0x38>)
 8003a44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	607b      	str	r3, [r7, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a50:	2200      	movs	r2, #0
 8003a52:	210f      	movs	r1, #15
 8003a54:	f06f 0001 	mvn.w	r0, #1
 8003a58:	f003 f822 	bl	8006aa0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	58024400 	.word	0x58024400

08003a68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b090      	sub	sp, #64	; 0x40
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b0f      	cmp	r3, #15
 8003a74:	d827      	bhi.n	8003ac6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0U);
 8003a76:	2200      	movs	r2, #0
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	201d      	movs	r0, #29
 8003a7c:	f003 f810 	bl	8006aa0 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a80:	201d      	movs	r0, #29
 8003a82:	f003 f827 	bl	8006ad4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003a86:	4a29      	ldr	r2, [pc, #164]	; (8003b2c <HAL_InitTick+0xc4>)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8003a8c:	4b28      	ldr	r3, [pc, #160]	; (8003b30 <HAL_InitTick+0xc8>)
 8003a8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a92:	4a27      	ldr	r2, [pc, #156]	; (8003b30 <HAL_InitTick+0xc8>)
 8003a94:	f043 0302 	orr.w	r3, r3, #2
 8003a98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a9c:	4b24      	ldr	r3, [pc, #144]	; (8003b30 <HAL_InitTick+0xc8>)
 8003a9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003aaa:	f107 0210 	add.w	r2, r7, #16
 8003aae:	f107 0314 	add.w	r3, r7, #20
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f004 ff6d 	bl	8008994 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d106      	bne.n	8003ad2 <HAL_InitTick+0x6a>
 8003ac4:	e001      	b.n	8003aca <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e02b      	b.n	8003b22 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003aca:	f004 ff37 	bl	800893c <HAL_RCC_GetPCLK1Freq>
 8003ace:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003ad0:	e004      	b.n	8003adc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003ad2:	f004 ff33 	bl	800893c <HAL_RCC_GetPCLK1Freq>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ade:	4a15      	ldr	r2, [pc, #84]	; (8003b34 <HAL_InitTick+0xcc>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	0c9b      	lsrs	r3, r3, #18
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8003aea:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <HAL_InitTick+0xd0>)
 8003aec:	4a13      	ldr	r2, [pc, #76]	; (8003b3c <HAL_InitTick+0xd4>)
 8003aee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8003af0:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <HAL_InitTick+0xd0>)
 8003af2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003af6:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8003af8:	4a0f      	ldr	r2, [pc, #60]	; (8003b38 <HAL_InitTick+0xd0>)
 8003afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afc:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8003afe:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <HAL_InitTick+0xd0>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <HAL_InitTick+0xd0>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8003b0a:	480b      	ldr	r0, [pc, #44]	; (8003b38 <HAL_InitTick+0xd0>)
 8003b0c:	f007 feeb 	bl	800b8e6 <HAL_TIM_Base_Init>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d104      	bne.n	8003b20 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8003b16:	4808      	ldr	r0, [pc, #32]	; (8003b38 <HAL_InitTick+0xd0>)
 8003b18:	f007 ff46 	bl	800b9a8 <HAL_TIM_Base_Start_IT>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	e000      	b.n	8003b22 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3740      	adds	r7, #64	; 0x40
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000160 	.word	0x20000160
 8003b30:	58024400 	.word	0x58024400
 8003b34:	431bde83 	.word	0x431bde83
 8003b38:	200005a0 	.word	0x200005a0
 8003b3c:	40000400 	.word	0x40000400

08003b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b44:	e7fe      	b.n	8003b44 <NMI_Handler+0x4>

08003b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b4a:	e7fe      	b.n	8003b4a <HardFault_Handler+0x4>

08003b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b50:	e7fe      	b.n	8003b50 <MemManage_Handler+0x4>

08003b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b52:	b480      	push	{r7}
 8003b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b56:	e7fe      	b.n	8003b56 <BusFault_Handler+0x4>

08003b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b5c:	e7fe      	b.n	8003b5c <UsageFault_Handler+0x4>

08003b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b62:	bf00      	nop
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b70:	4802      	ldr	r0, [pc, #8]	; (8003b7c <TIM3_IRQHandler+0x10>)
 8003b72:	f008 f9d9 	bl	800bf28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	200005a0 	.word	0x200005a0

08003b80 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003b84:	4802      	ldr	r0, [pc, #8]	; (8003b90 <LTDC_IRQHandler+0x10>)
 8003b86:	f003 fc49 	bl	800741c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000468 	.word	0x20000468

08003b94 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003b98:	4802      	ldr	r0, [pc, #8]	; (8003ba4 <ADC3_IRQHandler+0x10>)
 8003b9a:	f001 fc43 	bl	8005424 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000270 	.word	0x20000270

08003ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
	return 1;
 8003bac:	2301      	movs	r3, #1
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <_kill>:

int _kill(int pid, int sig)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003bc2:	f024 fd9b 	bl	80286fc <__errno>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2216      	movs	r2, #22
 8003bca:	601a      	str	r2, [r3, #0]
	return -1;
 8003bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <_exit>:

void _exit (int status)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003be0:	f04f 31ff 	mov.w	r1, #4294967295
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff ffe7 	bl	8003bb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003bea:	e7fe      	b.n	8003bea <_exit+0x12>

08003bec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	e00a      	b.n	8003c14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003bfe:	f3af 8000 	nop.w
 8003c02:	4601      	mov	r1, r0
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	60ba      	str	r2, [r7, #8]
 8003c0a:	b2ca      	uxtb	r2, r1
 8003c0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	3301      	adds	r3, #1
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	dbf0      	blt.n	8003bfe <_read+0x12>
	}

return len;
 8003c1c:	687b      	ldr	r3, [r7, #4]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b086      	sub	sp, #24
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	e009      	b.n	8003c4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	60ba      	str	r2, [r7, #8]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	dbf1      	blt.n	8003c38 <_write+0x12>
	}
	return len;
 8003c54:	687b      	ldr	r3, [r7, #4]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <_close>:

int _close(int file)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
	return -1;
 8003c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c86:	605a      	str	r2, [r3, #4]
	return 0;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <_isatty>:

int _isatty(int file)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
	return 1;
 8003c9e:	2301      	movs	r3, #1
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
	return 0;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cd0:	4a14      	ldr	r2, [pc, #80]	; (8003d24 <_sbrk+0x5c>)
 8003cd2:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <_sbrk+0x60>)
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cdc:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <_sbrk+0x64>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d102      	bne.n	8003cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <_sbrk+0x64>)
 8003ce6:	4a12      	ldr	r2, [pc, #72]	; (8003d30 <_sbrk+0x68>)
 8003ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cea:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <_sbrk+0x64>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d207      	bcs.n	8003d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cf8:	f024 fd00 	bl	80286fc <__errno>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	220c      	movs	r2, #12
 8003d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d02:	f04f 33ff 	mov.w	r3, #4294967295
 8003d06:	e009      	b.n	8003d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d08:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <_sbrk+0x64>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d0e:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <_sbrk+0x64>)
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4413      	add	r3, r2
 8003d16:	4a05      	ldr	r2, [pc, #20]	; (8003d2c <_sbrk+0x64>)
 8003d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20020000 	.word	0x20020000
 8003d28:	00000400 	.word	0x00000400
 8003d2c:	200005ec 	.word	0x200005ec
 8003d30:	20005a88 	.word	0x20005a88

08003d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d38:	4b37      	ldr	r3, [pc, #220]	; (8003e18 <SystemInit+0xe4>)
 8003d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3e:	4a36      	ldr	r2, [pc, #216]	; (8003e18 <SystemInit+0xe4>)
 8003d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d48:	4b34      	ldr	r3, [pc, #208]	; (8003e1c <SystemInit+0xe8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	2b06      	cmp	r3, #6
 8003d52:	d807      	bhi.n	8003d64 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d54:	4b31      	ldr	r3, [pc, #196]	; (8003e1c <SystemInit+0xe8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f023 030f 	bic.w	r3, r3, #15
 8003d5c:	4a2f      	ldr	r2, [pc, #188]	; (8003e1c <SystemInit+0xe8>)
 8003d5e:	f043 0307 	orr.w	r3, r3, #7
 8003d62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003d64:	4b2e      	ldr	r3, [pc, #184]	; (8003e20 <SystemInit+0xec>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a2d      	ldr	r2, [pc, #180]	; (8003e20 <SystemInit+0xec>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d70:	4b2b      	ldr	r3, [pc, #172]	; (8003e20 <SystemInit+0xec>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003d76:	4b2a      	ldr	r3, [pc, #168]	; (8003e20 <SystemInit+0xec>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	4929      	ldr	r1, [pc, #164]	; (8003e20 <SystemInit+0xec>)
 8003d7c:	4b29      	ldr	r3, [pc, #164]	; (8003e24 <SystemInit+0xf0>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d82:	4b26      	ldr	r3, [pc, #152]	; (8003e1c <SystemInit+0xe8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d8e:	4b23      	ldr	r3, [pc, #140]	; (8003e1c <SystemInit+0xe8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 030f 	bic.w	r3, r3, #15
 8003d96:	4a21      	ldr	r2, [pc, #132]	; (8003e1c <SystemInit+0xe8>)
 8003d98:	f043 0307 	orr.w	r3, r3, #7
 8003d9c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003d9e:	4b20      	ldr	r3, [pc, #128]	; (8003e20 <SystemInit+0xec>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003da4:	4b1e      	ldr	r3, [pc, #120]	; (8003e20 <SystemInit+0xec>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003daa:	4b1d      	ldr	r3, [pc, #116]	; (8003e20 <SystemInit+0xec>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003db0:	4b1b      	ldr	r3, [pc, #108]	; (8003e20 <SystemInit+0xec>)
 8003db2:	4a1d      	ldr	r2, [pc, #116]	; (8003e28 <SystemInit+0xf4>)
 8003db4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003db6:	4b1a      	ldr	r3, [pc, #104]	; (8003e20 <SystemInit+0xec>)
 8003db8:	4a1c      	ldr	r2, [pc, #112]	; (8003e2c <SystemInit+0xf8>)
 8003dba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003dbc:	4b18      	ldr	r3, [pc, #96]	; (8003e20 <SystemInit+0xec>)
 8003dbe:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <SystemInit+0xfc>)
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003dc2:	4b17      	ldr	r3, [pc, #92]	; (8003e20 <SystemInit+0xec>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003dc8:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <SystemInit+0xec>)
 8003dca:	4a19      	ldr	r2, [pc, #100]	; (8003e30 <SystemInit+0xfc>)
 8003dcc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003dce:	4b14      	ldr	r3, [pc, #80]	; (8003e20 <SystemInit+0xec>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003dd4:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <SystemInit+0xec>)
 8003dd6:	4a16      	ldr	r2, [pc, #88]	; (8003e30 <SystemInit+0xfc>)
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003dda:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <SystemInit+0xec>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003de0:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <SystemInit+0xec>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a0e      	ldr	r2, [pc, #56]	; (8003e20 <SystemInit+0xec>)
 8003de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003dec:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <SystemInit+0xec>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003df2:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <SystemInit+0x100>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <SystemInit+0x104>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dfe:	d202      	bcs.n	8003e06 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003e00:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <SystemInit+0x108>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003e06:	4b0e      	ldr	r3, [pc, #56]	; (8003e40 <SystemInit+0x10c>)
 8003e08:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003e0c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003e0e:	bf00      	nop
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	e000ed00 	.word	0xe000ed00
 8003e1c:	52002000 	.word	0x52002000
 8003e20:	58024400 	.word	0x58024400
 8003e24:	eaf6ed7f 	.word	0xeaf6ed7f
 8003e28:	02020200 	.word	0x02020200
 8003e2c:	01ff0000 	.word	0x01ff0000
 8003e30:	01010280 	.word	0x01010280
 8003e34:	5c001000 	.word	0x5c001000
 8003e38:	ffff0000 	.word	0xffff0000
 8003e3c:	51008108 	.word	0x51008108
 8003e40:	52004000 	.word	0x52004000

08003e44 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08a      	sub	sp, #40	; 0x28
 8003e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e4a:	f107 031c 	add.w	r3, r7, #28
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	605a      	str	r2, [r3, #4]
 8003e54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e56:	463b      	mov	r3, r7
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	605a      	str	r2, [r3, #4]
 8003e5e:	609a      	str	r2, [r3, #8]
 8003e60:	60da      	str	r2, [r3, #12]
 8003e62:	611a      	str	r2, [r3, #16]
 8003e64:	615a      	str	r2, [r3, #20]
 8003e66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e68:	4b22      	ldr	r3, [pc, #136]	; (8003ef4 <MX_TIM2_Init+0xb0>)
 8003e6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003e70:	4b20      	ldr	r3, [pc, #128]	; (8003ef4 <MX_TIM2_Init+0xb0>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e76:	4b1f      	ldr	r3, [pc, #124]	; (8003ef4 <MX_TIM2_Init+0xb0>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003e7c:	4b1d      	ldr	r3, [pc, #116]	; (8003ef4 <MX_TIM2_Init+0xb0>)
 8003e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e84:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <MX_TIM2_Init+0xb0>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e8a:	4b1a      	ldr	r3, [pc, #104]	; (8003ef4 <MX_TIM2_Init+0xb0>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003e90:	4818      	ldr	r0, [pc, #96]	; (8003ef4 <MX_TIM2_Init+0xb0>)
 8003e92:	f007 fe01 	bl	800ba98 <HAL_TIM_PWM_Init>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003e9c:	f7ff fc36 	bl	800370c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ea8:	f107 031c 	add.w	r3, r7, #28
 8003eac:	4619      	mov	r1, r3
 8003eae:	4811      	ldr	r0, [pc, #68]	; (8003ef4 <MX_TIM2_Init+0xb0>)
 8003eb0:	f008 fe2c 	bl	800cb0c <HAL_TIMEx_MasterConfigSynchronization>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003eba:	f7ff fc27 	bl	800370c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ebe:	2360      	movs	r3, #96	; 0x60
 8003ec0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ece:	463b      	mov	r3, r7
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4807      	ldr	r0, [pc, #28]	; (8003ef4 <MX_TIM2_Init+0xb0>)
 8003ed6:	f008 f947 	bl	800c168 <HAL_TIM_PWM_ConfigChannel>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003ee0:	f7ff fc14 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003ee4:	4803      	ldr	r0, [pc, #12]	; (8003ef4 <MX_TIM2_Init+0xb0>)
 8003ee6:	f000 f827 	bl	8003f38 <HAL_TIM_MspPostInit>

}
 8003eea:	bf00      	nop
 8003eec:	3728      	adds	r7, #40	; 0x28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	200005f0 	.word	0x200005f0

08003ef8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f08:	d10e      	bne.n	8003f28 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f0a:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <HAL_TIM_PWM_MspInit+0x3c>)
 8003f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f10:	4a08      	ldr	r2, [pc, #32]	; (8003f34 <HAL_TIM_PWM_MspInit+0x3c>)
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_TIM_PWM_MspInit+0x3c>)
 8003f1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	58024400 	.word	0x58024400

08003f38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f40:	f107 030c 	add.w	r3, r7, #12
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	605a      	str	r2, [r3, #4]
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f58:	d11f      	bne.n	8003f9a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f5a:	4b12      	ldr	r3, [pc, #72]	; (8003fa4 <HAL_TIM_MspPostInit+0x6c>)
 8003f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f60:	4a10      	ldr	r2, [pc, #64]	; (8003fa4 <HAL_TIM_MspPostInit+0x6c>)
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <HAL_TIM_MspPostInit+0x6c>)
 8003f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003f78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7e:	2302      	movs	r3, #2
 8003f80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f86:	2300      	movs	r3, #0
 8003f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f8e:	f107 030c 	add.w	r3, r7, #12
 8003f92:	4619      	mov	r1, r3
 8003f94:	4804      	ldr	r0, [pc, #16]	; (8003fa8 <HAL_TIM_MspPostInit+0x70>)
 8003f96:	f002 ffa7 	bl	8006ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003f9a:	bf00      	nop
 8003f9c:	3720      	adds	r7, #32
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	58024400 	.word	0x58024400
 8003fa8:	58020000 	.word	0x58020000

08003fac <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003fb0:	4b22      	ldr	r3, [pc, #136]	; (800403c <MX_UART5_Init+0x90>)
 8003fb2:	4a23      	ldr	r2, [pc, #140]	; (8004040 <MX_UART5_Init+0x94>)
 8003fb4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8003fb6:	4b21      	ldr	r3, [pc, #132]	; (800403c <MX_UART5_Init+0x90>)
 8003fb8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003fbc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003fbe:	4b1f      	ldr	r3, [pc, #124]	; (800403c <MX_UART5_Init+0x90>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003fc4:	4b1d      	ldr	r3, [pc, #116]	; (800403c <MX_UART5_Init+0x90>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003fca:	4b1c      	ldr	r3, [pc, #112]	; (800403c <MX_UART5_Init+0x90>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003fd0:	4b1a      	ldr	r3, [pc, #104]	; (800403c <MX_UART5_Init+0x90>)
 8003fd2:	220c      	movs	r2, #12
 8003fd4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fd6:	4b19      	ldr	r3, [pc, #100]	; (800403c <MX_UART5_Init+0x90>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fdc:	4b17      	ldr	r3, [pc, #92]	; (800403c <MX_UART5_Init+0x90>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fe2:	4b16      	ldr	r3, [pc, #88]	; (800403c <MX_UART5_Init+0x90>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003fe8:	4b14      	ldr	r3, [pc, #80]	; (800403c <MX_UART5_Init+0x90>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003fee:	4b13      	ldr	r3, [pc, #76]	; (800403c <MX_UART5_Init+0x90>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003ff4:	4811      	ldr	r0, [pc, #68]	; (800403c <MX_UART5_Init+0x90>)
 8003ff6:	f008 fe35 	bl	800cc64 <HAL_UART_Init>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8004000:	f7ff fb84 	bl	800370c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004004:	2100      	movs	r1, #0
 8004006:	480d      	ldr	r0, [pc, #52]	; (800403c <MX_UART5_Init+0x90>)
 8004008:	f009 fdd2 	bl	800dbb0 <HAL_UARTEx_SetTxFifoThreshold>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8004012:	f7ff fb7b 	bl	800370c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004016:	2100      	movs	r1, #0
 8004018:	4808      	ldr	r0, [pc, #32]	; (800403c <MX_UART5_Init+0x90>)
 800401a:	f009 fe07 	bl	800dc2c <HAL_UARTEx_SetRxFifoThreshold>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8004024:	f7ff fb72 	bl	800370c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8004028:	4804      	ldr	r0, [pc, #16]	; (800403c <MX_UART5_Init+0x90>)
 800402a:	f009 fd88 	bl	800db3e <HAL_UARTEx_DisableFifoMode>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8004034:	f7ff fb6a 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004038:	bf00      	nop
 800403a:	bd80      	pop	{r7, pc}
 800403c:	2000063c 	.word	0x2000063c
 8004040:	40005000 	.word	0x40005000

08004044 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b0ba      	sub	sp, #232	; 0xe8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800404c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	60da      	str	r2, [r3, #12]
 800405a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800405c:	f107 0318 	add.w	r3, r7, #24
 8004060:	22bc      	movs	r2, #188	; 0xbc
 8004062:	2100      	movs	r1, #0
 8004064:	4618      	mov	r0, r3
 8004066:	f024 fc9d 	bl	80289a4 <memset>
  if(uartHandle->Instance==UART5)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a37      	ldr	r2, [pc, #220]	; (800414c <HAL_UART_MspInit+0x108>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d166      	bne.n	8004142 <HAL_UART_MspInit+0xfe>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8004074:	2302      	movs	r3, #2
 8004076:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004078:	2300      	movs	r3, #0
 800407a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800407e:	f107 0318 	add.w	r3, r7, #24
 8004082:	4618      	mov	r0, r3
 8004084:	f004 fcc8 	bl	8008a18 <HAL_RCCEx_PeriphCLKConfig>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800408e:	f7ff fb3d 	bl	800370c <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004092:	4b2f      	ldr	r3, [pc, #188]	; (8004150 <HAL_UART_MspInit+0x10c>)
 8004094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004098:	4a2d      	ldr	r2, [pc, #180]	; (8004150 <HAL_UART_MspInit+0x10c>)
 800409a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800409e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040a2:	4b2b      	ldr	r3, [pc, #172]	; (8004150 <HAL_UART_MspInit+0x10c>)
 80040a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040b0:	4b27      	ldr	r3, [pc, #156]	; (8004150 <HAL_UART_MspInit+0x10c>)
 80040b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040b6:	4a26      	ldr	r2, [pc, #152]	; (8004150 <HAL_UART_MspInit+0x10c>)
 80040b8:	f043 0304 	orr.w	r3, r3, #4
 80040bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040c0:	4b23      	ldr	r3, [pc, #140]	; (8004150 <HAL_UART_MspInit+0x10c>)
 80040c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	613b      	str	r3, [r7, #16]
 80040cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040ce:	4b20      	ldr	r3, [pc, #128]	; (8004150 <HAL_UART_MspInit+0x10c>)
 80040d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040d4:	4a1e      	ldr	r2, [pc, #120]	; (8004150 <HAL_UART_MspInit+0x10c>)
 80040d6:	f043 0308 	orr.w	r3, r3, #8
 80040da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040de:	4b1c      	ldr	r3, [pc, #112]	; (8004150 <HAL_UART_MspInit+0x10c>)
 80040e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80040ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f4:	2302      	movs	r3, #2
 80040f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004100:	2300      	movs	r3, #0
 8004102:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004106:	2308      	movs	r3, #8
 8004108:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800410c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004110:	4619      	mov	r1, r3
 8004112:	4810      	ldr	r0, [pc, #64]	; (8004154 <HAL_UART_MspInit+0x110>)
 8004114:	f002 fee8 	bl	8006ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004118:	2304      	movs	r3, #4
 800411a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411e:	2302      	movs	r3, #2
 8004120:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004124:	2300      	movs	r3, #0
 8004126:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800412a:	2300      	movs	r3, #0
 800412c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004130:	2308      	movs	r3, #8
 8004132:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004136:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800413a:	4619      	mov	r1, r3
 800413c:	4806      	ldr	r0, [pc, #24]	; (8004158 <HAL_UART_MspInit+0x114>)
 800413e:	f002 fed3 	bl	8006ee8 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8004142:	bf00      	nop
 8004144:	37e8      	adds	r7, #232	; 0xe8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40005000 	.word	0x40005000
 8004150:	58024400 	.word	0x58024400
 8004154:	58020800 	.word	0x58020800
 8004158:	58020c00 	.word	0x58020c00

0800415c <L6474_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void L6474_Board_Delay(uint32_t delay)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fb11 	bl	800478c <HAL_Delay>
}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <L6474_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
  * @retval None
 **********************************************************/
void L6474_Board_DisableIrq(void)
{
 8004172:	b480      	push	{r7}
 8004174:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004176:	b672      	cpsid	i
}
 8004178:	bf00      	nop
  __disable_irq();
}
 800417a:	bf00      	nop
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <L6474_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void L6474_Board_EnableIrq(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8004188:	b662      	cpsie	i
}
 800418a:	bf00      	nop
  __enable_irq();
}
 800418c:	bf00      	nop
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <L6474_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the L6474s
 * @param[in] deviceId (from 0 to 2)
 * @retval None
  **********************************************************/
void L6474_Board_GpioInit(uint8_t deviceId)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	; 0x28
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  if (deviceId ==0)
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d16a      	bne.n	800427e <L6474_Board_GpioInit+0xe6>
  {
    /* GPIO Ports Clock Enable */
    __GPIOC_CLK_ENABLE();
 80041a8:	4b53      	ldr	r3, [pc, #332]	; (80042f8 <L6474_Board_GpioInit+0x160>)
 80041aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ae:	4a52      	ldr	r2, [pc, #328]	; (80042f8 <L6474_Board_GpioInit+0x160>)
 80041b0:	f043 0304 	orr.w	r3, r3, #4
 80041b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041b8:	4b4f      	ldr	r3, [pc, #316]	; (80042f8 <L6474_Board_GpioInit+0x160>)
 80041ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	693b      	ldr	r3, [r7, #16]
    __GPIOA_CLK_ENABLE();
 80041c6:	4b4c      	ldr	r3, [pc, #304]	; (80042f8 <L6474_Board_GpioInit+0x160>)
 80041c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041cc:	4a4a      	ldr	r2, [pc, #296]	; (80042f8 <L6474_Board_GpioInit+0x160>)
 80041ce:	f043 0301 	orr.w	r3, r3, #1
 80041d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041d6:	4b48      	ldr	r3, [pc, #288]	; (80042f8 <L6474_Board_GpioInit+0x160>)
 80041d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
    __GPIOB_CLK_ENABLE();
 80041e4:	4b44      	ldr	r3, [pc, #272]	; (80042f8 <L6474_Board_GpioInit+0x160>)
 80041e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ea:	4a43      	ldr	r2, [pc, #268]	; (80042f8 <L6474_Board_GpioInit+0x160>)
 80041ec:	f043 0302 	orr.w	r3, r3, #2
 80041f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041f4:	4b40      	ldr	r3, [pc, #256]	; (80042f8 <L6474_Board_GpioInit+0x160>)
 80041f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	60bb      	str	r3, [r7, #8]
 8004200:	68bb      	ldr	r3, [r7, #8]
    
    /* Configure L6474 - Flag pin -------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 8004202:	2310      	movs	r3, #16
 8004204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004206:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800420a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800420c:	2301      	movs	r3, #1
 800420e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004210:	2301      	movs	r3, #1
 8004212:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 8004214:	f107 0314 	add.w	r3, r7, #20
 8004218:	4619      	mov	r1, r3
 800421a:	4838      	ldr	r0, [pc, #224]	; (80042fc <L6474_Board_GpioInit+0x164>)
 800421c:	f002 fe64 	bl	8006ee8 <HAL_GPIO_Init>
    
   /* Set Priority of External Line Interrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(EXTI_MCU_LINE_IRQn, 5, 0);
 8004220:	2200      	movs	r2, #0
 8004222:	2105      	movs	r1, #5
 8004224:	2028      	movs	r0, #40	; 0x28
 8004226:	f002 fc3b 	bl	8006aa0 <HAL_NVIC_SetPriority>
      
    /* Enable the External Line Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(EXTI_MCU_LINE_IRQn);    
 800422a:	2028      	movs	r0, #40	; 0x28
 800422c:	f002 fc52 	bl	8006ad4 <HAL_NVIC_EnableIRQ>

    /* Configure L6474 - CS pin ---------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 8004230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004236:	2301      	movs	r3, #1
 8004238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423a:	2300      	movs	r3, #0
 800423c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800423e:	2301      	movs	r3, #1
 8004240:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 8004242:	f107 0314 	add.w	r3, r7, #20
 8004246:	4619      	mov	r1, r3
 8004248:	482d      	ldr	r0, [pc, #180]	; (8004300 <L6474_Board_GpioInit+0x168>)
 800424a:	f002 fe4d 	bl	8006ee8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 800424e:	2201      	movs	r2, #1
 8004250:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004254:	482a      	ldr	r0, [pc, #168]	; (8004300 <L6474_Board_GpioInit+0x168>)
 8004256:	f002 fff7 	bl	8007248 <HAL_GPIO_WritePin>
    
    /* Configure L6474 - STBY/RESET pin -------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_RESET_PIN;
 800425a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800425e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004260:	2301      	movs	r3, #1
 8004262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004264:	2300      	movs	r3, #0
 8004266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004268:	2301      	movs	r3, #1
 800426a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, &GPIO_InitStruct);
 800426c:	f107 0314 	add.w	r3, r7, #20
 8004270:	4619      	mov	r1, r3
 8004272:	4824      	ldr	r0, [pc, #144]	; (8004304 <L6474_Board_GpioInit+0x16c>)
 8004274:	f002 fe38 	bl	8006ee8 <HAL_GPIO_Init>
    L6474_Board_Reset(0);  
 8004278:	2000      	movs	r0, #0
 800427a:	f000 f949 	bl	8004510 <L6474_Board_Reset>
  }
  
  switch (deviceId)
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	2b02      	cmp	r3, #2
 8004282:	d025      	beq.n	80042d0 <L6474_Board_GpioInit+0x138>
 8004284:	2b02      	cmp	r3, #2
 8004286:	dc32      	bgt.n	80042ee <L6474_Board_GpioInit+0x156>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <L6474_Board_GpioInit+0xfa>
 800428c:	2b01      	cmp	r3, #1
 800428e:	d010      	beq.n	80042b2 <L6474_Board_GpioInit+0x11a>
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
        break;
  }
}
 8004290:	e02d      	b.n	80042ee <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN;
 8004292:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004296:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004298:	2301      	movs	r3, #1
 800429a:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429c:	2300      	movs	r3, #0
 800429e:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80042a0:	2301      	movs	r3, #1
 80042a2:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, &GPIO_InitStruct);
 80042a4:	f107 0314 	add.w	r3, r7, #20
 80042a8:	4619      	mov	r1, r3
 80042aa:	4816      	ldr	r0, [pc, #88]	; (8004304 <L6474_Board_GpioInit+0x16c>)
 80042ac:	f002 fe1c 	bl	8006ee8 <HAL_GPIO_Init>
      break;
 80042b0:	e01d      	b.n	80042ee <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN;
 80042b2:	2320      	movs	r3, #32
 80042b4:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042b6:	2301      	movs	r3, #1
 80042b8:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80042be:	2301      	movs	r3, #1
 80042c0:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, &GPIO_InitStruct);
 80042c2:	f107 0314 	add.w	r3, r7, #20
 80042c6:	4619      	mov	r1, r3
 80042c8:	480d      	ldr	r0, [pc, #52]	; (8004300 <L6474_Board_GpioInit+0x168>)
 80042ca:	f002 fe0d 	bl	8006ee8 <HAL_GPIO_Init>
      break;
 80042ce:	e00e      	b.n	80042ee <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN;
 80042d0:	2310      	movs	r3, #16
 80042d2:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042d4:	2301      	movs	r3, #1
 80042d6:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d8:	2300      	movs	r3, #0
 80042da:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80042dc:	2301      	movs	r3, #1
 80042de:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
 80042e0:	f107 0314 	add.w	r3, r7, #20
 80042e4:	4619      	mov	r1, r3
 80042e6:	4806      	ldr	r0, [pc, #24]	; (8004300 <L6474_Board_GpioInit+0x168>)
 80042e8:	f002 fdfe 	bl	8006ee8 <HAL_GPIO_Init>
        break;
 80042ec:	bf00      	nop
}
 80042ee:	bf00      	nop
 80042f0:	3728      	adds	r7, #40	; 0x28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	58024400 	.word	0x58024400
 80042fc:	58021c00 	.word	0x58021c00
 8004300:	58020400 	.word	0x58020400
 8004304:	58022000 	.word	0x58022000

08004308 <L6474_Board_Pwm1SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm1SetFreq(uint16_t newFreq)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8004312:	f004 f969 	bl	80085e8 <HAL_RCC_GetSysClockFreq>
 8004316:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM1_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8004318:	88fb      	ldrh	r3, [r7, #6]
 800431a:	029b      	lsls	r3, r3, #10
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm1, period);
 8004326:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <L6474_Board_Pwm1SetFreq+0x48>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	62da      	str	r2, [r3, #44]	; 0x2c
 800432e:	4a08      	ldr	r2, [pc, #32]	; (8004350 <L6474_Board_Pwm1SetFreq+0x48>)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1, period >> 1);
 8004334:	4b06      	ldr	r3, [pc, #24]	; (8004350 <L6474_Board_Pwm1SetFreq+0x48>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	0852      	lsrs	r2, r2, #1
 800433c:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start_IT(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);  
 800433e:	2100      	movs	r1, #0
 8004340:	4803      	ldr	r0, [pc, #12]	; (8004350 <L6474_Board_Pwm1SetFreq+0x48>)
 8004342:	f007 fc97 	bl	800bc74 <HAL_TIM_PWM_Start_IT>
}
 8004346:	bf00      	nop
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	20000754 	.word	0x20000754

08004354 <L6474_Board_Pwm2SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm2SetFreq(uint16_t newFreq)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 800435e:	f004 f943 	bl	80085e8 <HAL_RCC_GetSysClockFreq>
 8004362:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM2_FREQ_RESCALER  * (uint32_t)newFreq)) - 1;
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	029b      	lsls	r3, r3, #10
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	fbb2 f3f3 	udiv	r3, r2, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm2, period);
 8004372:	4b0a      	ldr	r3, [pc, #40]	; (800439c <L6474_Board_Pwm2SetFreq+0x48>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	62da      	str	r2, [r3, #44]	; 0x2c
 800437a:	4a08      	ldr	r2, [pc, #32]	; (800439c <L6474_Board_Pwm2SetFreq+0x48>)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2, period >> 1);
 8004380:	4b06      	ldr	r3, [pc, #24]	; (800439c <L6474_Board_Pwm2SetFreq+0x48>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	0852      	lsrs	r2, r2, #1
 8004388:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start_IT(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 800438a:	2104      	movs	r1, #4
 800438c:	4803      	ldr	r0, [pc, #12]	; (800439c <L6474_Board_Pwm2SetFreq+0x48>)
 800438e:	f007 fc71 	bl	800bc74 <HAL_TIM_PWM_Start_IT>
}
 8004392:	bf00      	nop
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	200007a0 	.word	0x200007a0

080043a0 <L6474_Board_Pwm3SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm3SetFreq(uint16_t newFreq)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 80043aa:	f004 f91d 	bl	80085e8 <HAL_RCC_GetSysClockFreq>
 80043ae:	60f8      	str	r0, [r7, #12]
  /* Double the frequency as the SW is generated by SW */
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM3_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	02db      	lsls	r3, r3, #11
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm3, period);
 80043be:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <L6474_Board_Pwm3SetFreq+0x48>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80043c6:	4a08      	ldr	r2, [pc, #32]	; (80043e8 <L6474_Board_Pwm3SetFreq+0x48>)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3, period >> 1);
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <L6474_Board_Pwm3SetFreq+0x48>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	0852      	lsrs	r2, r2, #1
 80043d4:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start_IT(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);  
 80043d6:	2108      	movs	r1, #8
 80043d8:	4803      	ldr	r0, [pc, #12]	; (80043e8 <L6474_Board_Pwm3SetFreq+0x48>)
 80043da:	f007 fc4b 	bl	800bc74 <HAL_TIM_PWM_Start_IT>
}
 80043de:	bf00      	nop
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	200007ec 	.word	0x200007ec

080043ec <L6474_Board_PwmInit>:
 * @note Device 0 uses PWM1 based on timer 1 
 * Device 1 uses PWM 2 based on timer 2
 * Device 2 uses PWM3 based timer 0
 **********************************************************/
void L6474_Board_PwmInit(uint8_t deviceId)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08e      	sub	sp, #56	; 0x38
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	4603      	mov	r3, r0
 80043f4:	71fb      	strb	r3, [r7, #7]
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;
  uint32_t  channel;

  switch (deviceId)
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d00a      	beq.n	8004412 <L6474_Board_PwmInit+0x26>
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d011      	beq.n	8004424 <L6474_Board_PwmInit+0x38>
  {

  case 0:
  default:
      pHTim = &hTimPwm1;
 8004400:	4b21      	ldr	r3, [pc, #132]	; (8004488 <L6474_Board_PwmInit+0x9c>)
 8004402:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1;
 8004404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004406:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800440a:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1;
 800440c:	2300      	movs	r3, #0
 800440e:	633b      	str	r3, [r7, #48]	; 0x30

      break;
 8004410:	e010      	b.n	8004434 <L6474_Board_PwmInit+0x48>
    case  1:
      pHTim = &hTimPwm2;
 8004412:	4b1e      	ldr	r3, [pc, #120]	; (800448c <L6474_Board_PwmInit+0xa0>)
 8004414:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2;
 8004416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004418:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800441c:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2;
 800441e:	2304      	movs	r3, #4
 8004420:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004422:	e007      	b.n	8004434 <L6474_Board_PwmInit+0x48>


    case 2:
      pHTim = &hTimPwm3;
 8004424:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <L6474_Board_PwmInit+0xa4>)
 8004426:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3;
 8004428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800442a:	4a1a      	ldr	r2, [pc, #104]	; (8004494 <L6474_Board_PwmInit+0xa8>)
 800442c:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3;
 800442e:	2308      	movs	r3, #8
 8004430:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004432:	bf00      	nop
  }
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 8004434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004436:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800443a:	605a      	str	r2, [r3, #4]
  
  pHTim->Init.Period = 0;
 800443c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443e:	2200      	movs	r2, #0
 8004440:	60da      	str	r2, [r3, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004444:	2200      	movs	r2, #0
 8004446:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(pHTim);
 8004448:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800444a:	f007 fb25 	bl	800ba98 <HAL_TIM_PWM_Init>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800444e:	2360      	movs	r3, #96	; 0x60
 8004450:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800445a:	2300      	movs	r3, #0
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 800445e:	f107 0314 	add.w	r3, r7, #20
 8004462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004464:	4619      	mov	r1, r3
 8004466:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004468:	f007 fe7e 	bl	800c168 <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800446c:	2300      	movs	r3, #0
 800446e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004470:	2300      	movs	r3, #0
 8004472:	613b      	str	r3, [r7, #16]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8004474:	f107 0308 	add.w	r3, r7, #8
 8004478:	4619      	mov	r1, r3
 800447a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800447c:	f008 fb46 	bl	800cb0c <HAL_TIMEx_MasterConfigSynchronization>
}
 8004480:	bf00      	nop
 8004482:	3738      	adds	r7, #56	; 0x38
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20000754 	.word	0x20000754
 800448c:	200007a0 	.word	0x200007a0
 8004490:	200007ec 	.word	0x200007ec
 8004494:	40000800 	.word	0x40000800

08004498 <L6474_Board_PwmStop>:
 * @brief  Stops the PWM uses by the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_PwmStop(uint8_t deviceId)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	71fb      	strb	r3, [r7, #7]
  switch (deviceId)
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d010      	beq.n	80044ca <L6474_Board_PwmStop+0x32>
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	dc13      	bgt.n	80044d4 <L6474_Board_PwmStop+0x3c>
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <L6474_Board_PwmStop+0x1e>
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d005      	beq.n	80044c0 <L6474_Board_PwmStop+0x28>
    case 2:
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
      
      break;
    default:
      break;//ignore error
 80044b4:	e00e      	b.n	80044d4 <L6474_Board_PwmStop+0x3c>
       HAL_TIM_PWM_Stop(&hTimPwm1,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 80044b6:	2100      	movs	r1, #0
 80044b8:	4809      	ldr	r0, [pc, #36]	; (80044e0 <L6474_Board_PwmStop+0x48>)
 80044ba:	f007 fb45 	bl	800bb48 <HAL_TIM_PWM_Stop>
      break;
 80044be:	e00a      	b.n	80044d6 <L6474_Board_PwmStop+0x3e>
      HAL_TIM_PWM_Stop(&hTimPwm2,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 80044c0:	2104      	movs	r1, #4
 80044c2:	4808      	ldr	r0, [pc, #32]	; (80044e4 <L6474_Board_PwmStop+0x4c>)
 80044c4:	f007 fb40 	bl	800bb48 <HAL_TIM_PWM_Stop>
      break;
 80044c8:	e005      	b.n	80044d6 <L6474_Board_PwmStop+0x3e>
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
 80044ca:	2108      	movs	r1, #8
 80044cc:	4806      	ldr	r0, [pc, #24]	; (80044e8 <L6474_Board_PwmStop+0x50>)
 80044ce:	f007 fb3b 	bl	800bb48 <HAL_TIM_PWM_Stop>
      break;
 80044d2:	e000      	b.n	80044d6 <L6474_Board_PwmStop+0x3e>
      break;//ignore error
 80044d4:	bf00      	nop
  }
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20000754 	.word	0x20000754
 80044e4:	200007a0 	.word	0x200007a0
 80044e8:	200007ec 	.word	0x200007ec

080044ec <L6474_Board_ReleaseReset>:
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_ReleaseReset(uint8_t deviceId)
{ 
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_SET); 
 80044f6:	2201      	movs	r2, #1
 80044f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044fc:	4803      	ldr	r0, [pc, #12]	; (800450c <L6474_Board_ReleaseReset+0x20>)
 80044fe:	f002 fea3 	bl	8007248 <HAL_GPIO_WritePin>
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	58022000 	.word	0x58022000

08004510 <L6474_Board_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_Reset(uint8_t deviceId)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_RESET); 
 800451a:	2200      	movs	r2, #0
 800451c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004520:	4803      	ldr	r0, [pc, #12]	; (8004530 <L6474_Board_Reset+0x20>)
 8004522:	f002 fe91 	bl	8007248 <HAL_GPIO_WritePin>
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	58022000 	.word	0x58022000

08004534 <L6474_Board_SetDirectionGpio>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] gpioState state of the direction gpio (0 to reset, 1 to set)
 * @retval None
 **********************************************************/
void L6474_Board_SetDirectionGpio(uint8_t deviceId, uint8_t gpioState)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	460a      	mov	r2, r1
 800453e:	71fb      	strb	r3, [r7, #7]
 8004540:	4613      	mov	r3, r2
 8004542:	71bb      	strb	r3, [r7, #6]
  switch (deviceId)
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d006      	beq.n	8004558 <L6474_Board_SetDirectionGpio+0x24>
 800454a:	2b02      	cmp	r3, #2
 800454c:	dc1a      	bgt.n	8004584 <L6474_Board_SetDirectionGpio+0x50>
 800454e:	2b00      	cmp	r3, #0
 8004550:	d010      	beq.n	8004574 <L6474_Board_SetDirectionGpio+0x40>
 8004552:	2b01      	cmp	r3, #1
 8004554:	d007      	beq.n	8004566 <L6474_Board_SetDirectionGpio+0x32>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
      break;
    default:
      ;
  }
}
 8004556:	e015      	b.n	8004584 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN, (GPIO_PinState)gpioState); 
 8004558:	79bb      	ldrb	r3, [r7, #6]
 800455a:	461a      	mov	r2, r3
 800455c:	2110      	movs	r1, #16
 800455e:	480b      	ldr	r0, [pc, #44]	; (800458c <L6474_Board_SetDirectionGpio+0x58>)
 8004560:	f002 fe72 	bl	8007248 <HAL_GPIO_WritePin>
      break;
 8004564:	e00e      	b.n	8004584 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN, (GPIO_PinState)gpioState); 
 8004566:	79bb      	ldrb	r3, [r7, #6]
 8004568:	461a      	mov	r2, r3
 800456a:	2120      	movs	r1, #32
 800456c:	4807      	ldr	r0, [pc, #28]	; (800458c <L6474_Board_SetDirectionGpio+0x58>)
 800456e:	f002 fe6b 	bl	8007248 <HAL_GPIO_WritePin>
      break;
 8004572:	e007      	b.n	8004584 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
 8004574:	79bb      	ldrb	r3, [r7, #6]
 8004576:	461a      	mov	r2, r3
 8004578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800457c:	4804      	ldr	r0, [pc, #16]	; (8004590 <L6474_Board_SetDirectionGpio+0x5c>)
 800457e:	f002 fe63 	bl	8007248 <HAL_GPIO_WritePin>
      break;
 8004582:	bf00      	nop
}
 8004584:	bf00      	nop
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	58020400 	.word	0x58020400
 8004590:	58022000 	.word	0x58022000

08004594 <L6474_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by L6474
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t L6474_Board_SpiInit(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 800459a:	4b19      	ldr	r3, [pc, #100]	; (8004600 <L6474_Board_SpiInit+0x6c>)
 800459c:	4a19      	ldr	r2, [pc, #100]	; (8004604 <L6474_Board_SpiInit+0x70>)
 800459e:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 80045a0:	4b17      	ldr	r3, [pc, #92]	; (8004600 <L6474_Board_SpiInit+0x6c>)
 80045a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80045a6:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 80045a8:	4b15      	ldr	r3, [pc, #84]	; (8004600 <L6474_Board_SpiInit+0x6c>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 80045ae:	4b14      	ldr	r3, [pc, #80]	; (8004600 <L6474_Board_SpiInit+0x6c>)
 80045b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045b4:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 80045b6:	4b12      	ldr	r3, [pc, #72]	; (8004600 <L6474_Board_SpiInit+0x6c>)
 80045b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045bc:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 80045be:	4b10      	ldr	r3, [pc, #64]	; (8004600 <L6474_Board_SpiInit+0x6c>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	629a      	str	r2, [r3, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 80045c4:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <L6474_Board_SpiInit+0x6c>)
 80045c6:	2207      	movs	r2, #7
 80045c8:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 80045ca:	4b0d      	ldr	r3, [pc, #52]	; (8004600 <L6474_Board_SpiInit+0x6c>)
 80045cc:	2207      	movs	r2, #7
 80045ce:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <L6474_Board_SpiInit+0x6c>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <L6474_Board_SpiInit+0x6c>)
 80045d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80045dc:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 80045de:	4b08      	ldr	r3, [pc, #32]	; (8004600 <L6474_Board_SpiInit+0x6c>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	625a      	str	r2, [r3, #36]	; 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80045e4:	4b06      	ldr	r3, [pc, #24]	; (8004600 <L6474_Board_SpiInit+0x6c>)
 80045e6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80045ea:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 80045ec:	4804      	ldr	r0, [pc, #16]	; (8004600 <L6474_Board_SpiInit+0x6c>)
 80045ee:	f006 fc9f 	bl	800af30 <HAL_SPI_Init>
 80045f2:	4603      	mov	r3, r0
 80045f4:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 80045f6:	79fb      	ldrb	r3, [r7, #7]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	200006cc 	.word	0x200006cc
 8004604:	40003800 	.word	0x40003800

08004608 <L6474_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t L6474_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	4613      	mov	r3, r2
 8004614:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 8004616:	2200      	movs	r2, #0
 8004618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800461c:	4816      	ldr	r0, [pc, #88]	; (8004678 <L6474_Board_SpiWriteBytes+0x70>)
 800461e:	f002 fe13 	bl	8007248 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 8004622:	2300      	movs	r3, #0
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	e016      	b.n	8004656 <L6474_Board_SpiWriteBytes+0x4e>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 8004628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	2301      	movs	r3, #1
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	68f9      	ldr	r1, [r7, #12]
 8004634:	4811      	ldr	r0, [pc, #68]	; (800467c <L6474_Board_SpiWriteBytes+0x74>)
 8004636:	f006 fd81 	bl	800b13c <HAL_SPI_TransmitReceive>
 800463a:	4603      	mov	r3, r0
 800463c:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 800463e:	7dfb      	ldrb	r3, [r7, #23]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10d      	bne.n	8004660 <L6474_Board_SpiWriteBytes+0x58>
    {
      break;
    }
    pByteToTransmit++;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3301      	adds	r3, #1
 8004648:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	3301      	adds	r3, #1
 800464e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	3301      	adds	r3, #1
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	429a      	cmp	r2, r3
 800465c:	d3e4      	bcc.n	8004628 <L6474_Board_SpiWriteBytes+0x20>
 800465e:	e000      	b.n	8004662 <L6474_Board_SpiWriteBytes+0x5a>
      break;
 8004660:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8004662:	2201      	movs	r2, #1
 8004664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004668:	4803      	ldr	r0, [pc, #12]	; (8004678 <L6474_Board_SpiWriteBytes+0x70>)
 800466a:	f002 fded 	bl	8007248 <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 800466e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	58020400 	.word	0x58020400
 800467c:	200006cc 	.word	0x200006cc

08004680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004684:	f7ff fb56 	bl	8003d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004688:	480c      	ldr	r0, [pc, #48]	; (80046bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800468a:	490d      	ldr	r1, [pc, #52]	; (80046c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800468c:	4a0d      	ldr	r2, [pc, #52]	; (80046c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800468e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004690:	e002      	b.n	8004698 <LoopCopyDataInit>

08004692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004696:	3304      	adds	r3, #4

08004698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800469a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800469c:	d3f9      	bcc.n	8004692 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800469e:	4a0a      	ldr	r2, [pc, #40]	; (80046c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80046a0:	4c0a      	ldr	r4, [pc, #40]	; (80046cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80046a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046a4:	e001      	b.n	80046aa <LoopFillZerobss>

080046a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046a8:	3204      	adds	r2, #4

080046aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046ac:	d3fb      	bcc.n	80046a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80046ae:	f024 f933 	bl	8028918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046b2:	f7fe ff47 	bl	8003544 <main>
  bx  lr
 80046b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80046b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80046bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046c0:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 80046c4:	080448d8 	.word	0x080448d8
  ldr r2, =_sbss
 80046c8:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 80046cc:	20005a84 	.word	0x20005a84

080046d0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046d0:	e7fe      	b.n	80046d0 <ADC_IRQHandler>
	...

080046d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046da:	2003      	movs	r0, #3
 80046dc:	f002 f9d5 	bl	8006a8a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80046e0:	f003 ff82 	bl	80085e8 <HAL_RCC_GetSysClockFreq>
 80046e4:	4602      	mov	r2, r0
 80046e6:	4b15      	ldr	r3, [pc, #84]	; (800473c <HAL_Init+0x68>)
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	0a1b      	lsrs	r3, r3, #8
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	4913      	ldr	r1, [pc, #76]	; (8004740 <HAL_Init+0x6c>)
 80046f2:	5ccb      	ldrb	r3, [r1, r3]
 80046f4:	f003 031f 	and.w	r3, r3, #31
 80046f8:	fa22 f303 	lsr.w	r3, r2, r3
 80046fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046fe:	4b0f      	ldr	r3, [pc, #60]	; (800473c <HAL_Init+0x68>)
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	4a0e      	ldr	r2, [pc, #56]	; (8004740 <HAL_Init+0x6c>)
 8004708:	5cd3      	ldrb	r3, [r2, r3]
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	fa22 f303 	lsr.w	r3, r2, r3
 8004714:	4a0b      	ldr	r2, [pc, #44]	; (8004744 <HAL_Init+0x70>)
 8004716:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004718:	4a0b      	ldr	r2, [pc, #44]	; (8004748 <HAL_Init+0x74>)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800471e:	2000      	movs	r0, #0
 8004720:	f7ff f9a2 	bl	8003a68 <HAL_InitTick>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e002      	b.n	8004734 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800472e:	f7ff f97d 	bl	8003a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	58024400 	.word	0x58024400
 8004740:	0802a4a8 	.word	0x0802a4a8
 8004744:	2000015c 	.word	0x2000015c
 8004748:	20000158 	.word	0x20000158

0800474c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004750:	4b06      	ldr	r3, [pc, #24]	; (800476c <HAL_IncTick+0x20>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	4b06      	ldr	r3, [pc, #24]	; (8004770 <HAL_IncTick+0x24>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4413      	add	r3, r2
 800475c:	4a04      	ldr	r2, [pc, #16]	; (8004770 <HAL_IncTick+0x24>)
 800475e:	6013      	str	r3, [r2, #0]
}
 8004760:	bf00      	nop
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	20000164 	.word	0x20000164
 8004770:	20000838 	.word	0x20000838

08004774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  return uwTick;
 8004778:	4b03      	ldr	r3, [pc, #12]	; (8004788 <HAL_GetTick+0x14>)
 800477a:	681b      	ldr	r3, [r3, #0]
}
 800477c:	4618      	mov	r0, r3
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	20000838 	.word	0x20000838

0800478c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004794:	f7ff ffee 	bl	8004774 <HAL_GetTick>
 8004798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a4:	d005      	beq.n	80047b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047a6:	4b0a      	ldr	r3, [pc, #40]	; (80047d0 <HAL_Delay+0x44>)
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4413      	add	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047b2:	bf00      	nop
 80047b4:	f7ff ffde 	bl	8004774 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d8f7      	bhi.n	80047b4 <HAL_Delay+0x28>
  {
  }
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000164 	.word	0x20000164

080047d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80047d8:	4b03      	ldr	r3, [pc, #12]	; (80047e8 <HAL_GetREVID+0x14>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	0c1b      	lsrs	r3, r3, #16
}
 80047de:	4618      	mov	r0, r3
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	5c001000 	.word	0x5c001000

080047ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	609a      	str	r2, [r3, #8]
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	609a      	str	r2, [r3, #8]
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3360      	adds	r3, #96	; 0x60
 8004866:	461a      	mov	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	430b      	orrs	r3, r1
 8004882:	431a      	orrs	r2, r3
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004888:	bf00      	nop
 800488a:	371c      	adds	r7, #28
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f003 031f 	and.w	r3, r3, #31
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	fa01 f303 	lsl.w	r3, r1, r3
 80048b4:	431a      	orrs	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	611a      	str	r2, [r3, #16]
}
 80048ba:	bf00      	nop
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b087      	sub	sp, #28
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3360      	adds	r3, #96	; 0x60
 80048d6:	461a      	mov	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	601a      	str	r2, [r3, #0]
  }
}
 80048f0:	bf00      	nop
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004910:	2301      	movs	r3, #1
 8004912:	e000      	b.n	8004916 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004922:	b480      	push	{r7}
 8004924:	b087      	sub	sp, #28
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3330      	adds	r3, #48	; 0x30
 8004932:	461a      	mov	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	0a1b      	lsrs	r3, r3, #8
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	f003 030c 	and.w	r3, r3, #12
 800493e:	4413      	add	r3, r2
 8004940:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f003 031f 	and.w	r3, r3, #31
 800494c:	211f      	movs	r1, #31
 800494e:	fa01 f303 	lsl.w	r3, r1, r3
 8004952:	43db      	mvns	r3, r3
 8004954:	401a      	ands	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	0e9b      	lsrs	r3, r3, #26
 800495a:	f003 011f 	and.w	r1, r3, #31
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f003 031f 	and.w	r3, r3, #31
 8004964:	fa01 f303 	lsl.w	r3, r1, r3
 8004968:	431a      	orrs	r2, r3
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004986:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3314      	adds	r3, #20
 80049b0:	461a      	mov	r2, r3
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	0e5b      	lsrs	r3, r3, #25
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	4413      	add	r3, r2
 80049be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	0d1b      	lsrs	r3, r3, #20
 80049c8:	f003 031f 	and.w	r3, r3, #31
 80049cc:	2107      	movs	r1, #7
 80049ce:	fa01 f303 	lsl.w	r3, r1, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	401a      	ands	r2, r3
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	0d1b      	lsrs	r3, r3, #20
 80049da:	f003 031f 	and.w	r3, r3, #31
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	fa01 f303 	lsl.w	r3, r1, r3
 80049e4:	431a      	orrs	r2, r3
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80049ea:	bf00      	nop
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a10:	43db      	mvns	r3, r3
 8004a12:	401a      	ands	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f003 0318 	and.w	r3, r3, #24
 8004a1a:	4908      	ldr	r1, [pc, #32]	; (8004a3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8004a1c:	40d9      	lsrs	r1, r3
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	400b      	ands	r3, r1
 8004a22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a26:	431a      	orrs	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	000fffff 	.word	0x000fffff

08004a40 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
  *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	330c      	adds	r3, #12
 8004a50:	4618      	mov	r0, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	0d1b      	lsrs	r3, r3, #20
 8004a56:	f003 0103 	and.w	r1, r3, #3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f003 0201 	and.w	r2, r3, #1
 8004a60:	4613      	mov	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	4413      	add	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4403      	add	r3, r0
 8004a6e:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	4b08      	ldr	r3, [pc, #32]	; (8004a98 <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 8004a78:	400b      	ands	r3, r1
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	401a      	ands	r2, r3
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	400b      	ands	r3, r1
 8004a84:	431a      	orrs	r2, r3
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	7dcfffff 	.word	0x7dcfffff

08004a9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 031f 	and.w	r3, r3, #31
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6093      	str	r3, [r2, #8]
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	5fffffc0 	.word	0x5fffffc0

08004af8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b0c:	d101      	bne.n	8004b12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <LL_ADC_EnableInternalRegulator+0x24>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	6fffffc0 	.word	0x6fffffc0

08004b48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b5c:	d101      	bne.n	8004b62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <LL_ADC_Enable+0x24>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	f043 0201 	orr.w	r2, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	7fffffc0 	.word	0x7fffffc0

08004b98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <LL_ADC_IsEnabled+0x18>
 8004bac:	2301      	movs	r3, #1
 8004bae:	e000      	b.n	8004bb2 <LL_ADC_IsEnabled+0x1a>
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
	...

08004bc0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <LL_ADC_REG_StartConversion+0x24>)
 8004bce:	4013      	ands	r3, r2
 8004bd0:	f043 0204 	orr.w	r2, r3, #4
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	7fffffc0 	.word	0x7fffffc0

08004be8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d101      	bne.n	8004c00 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d101      	bne.n	8004c26 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2280      	movs	r2, #128	; 0x80
 8004c40:	601a      	str	r2, [r3, #0]
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c5c:	601a      	str	r2, [r3, #0]
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c78:	601a      	str	r2, [r3, #0]
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	605a      	str	r2, [r3, #4]
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	605a      	str	r2, [r3, #4]
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	605a      	str	r2, [r3, #4]
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	605a      	str	r2, [r3, #4]
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	605a      	str	r2, [r3, #4]
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	605a      	str	r2, [r3, #4]
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
	...

08004d48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d48:	b590      	push	{r4, r7, lr}
 8004d4a:	b089      	sub	sp, #36	; 0x24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e18f      	b.n	8005082 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d109      	bne.n	8004d84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7fb fd13 	bl	800079c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff feb5 	bl	8004af8 <LL_ADC_IsDeepPowerDownEnabled>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d004      	beq.n	8004d9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff fe9b 	bl	8004ad4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fed0 	bl	8004b48 <LL_ADC_IsInternalRegulatorEnabled>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d114      	bne.n	8004dd8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff feb4 	bl	8004b20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004db8:	4b87      	ldr	r3, [pc, #540]	; (8004fd8 <HAL_ADC_Init+0x290>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	099b      	lsrs	r3, r3, #6
 8004dbe:	4a87      	ldr	r2, [pc, #540]	; (8004fdc <HAL_ADC_Init+0x294>)
 8004dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc4:	099b      	lsrs	r3, r3, #6
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004dca:	e002      	b.n	8004dd2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f9      	bne.n	8004dcc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff feb3 	bl	8004b48 <LL_ADC_IsInternalRegulatorEnabled>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10d      	bne.n	8004e04 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dec:	f043 0210 	orr.w	r2, r3, #16
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df8:	f043 0201 	orr.w	r2, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff feed 	bl	8004be8 <LL_ADC_REG_IsConversionOngoing>
 8004e0e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f040 8129 	bne.w	8005070 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f040 8125 	bne.w	8005070 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004e2e:	f043 0202 	orr.w	r2, r3, #2
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff feac 	bl	8004b98 <LL_ADC_IsEnabled>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d136      	bne.n	8004eb4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a65      	ldr	r2, [pc, #404]	; (8004fe0 <HAL_ADC_Init+0x298>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d004      	beq.n	8004e5a <HAL_ADC_Init+0x112>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a63      	ldr	r2, [pc, #396]	; (8004fe4 <HAL_ADC_Init+0x29c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d10e      	bne.n	8004e78 <HAL_ADC_Init+0x130>
 8004e5a:	4861      	ldr	r0, [pc, #388]	; (8004fe0 <HAL_ADC_Init+0x298>)
 8004e5c:	f7ff fe9c 	bl	8004b98 <LL_ADC_IsEnabled>
 8004e60:	4604      	mov	r4, r0
 8004e62:	4860      	ldr	r0, [pc, #384]	; (8004fe4 <HAL_ADC_Init+0x29c>)
 8004e64:	f7ff fe98 	bl	8004b98 <LL_ADC_IsEnabled>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	4323      	orrs	r3, r4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	bf0c      	ite	eq
 8004e70:	2301      	moveq	r3, #1
 8004e72:	2300      	movne	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	e008      	b.n	8004e8a <HAL_ADC_Init+0x142>
 8004e78:	485b      	ldr	r0, [pc, #364]	; (8004fe8 <HAL_ADC_Init+0x2a0>)
 8004e7a:	f7ff fe8d 	bl	8004b98 <LL_ADC_IsEnabled>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	bf0c      	ite	eq
 8004e84:	2301      	moveq	r3, #1
 8004e86:	2300      	movne	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d012      	beq.n	8004eb4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a53      	ldr	r2, [pc, #332]	; (8004fe0 <HAL_ADC_Init+0x298>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d004      	beq.n	8004ea2 <HAL_ADC_Init+0x15a>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a51      	ldr	r2, [pc, #324]	; (8004fe4 <HAL_ADC_Init+0x29c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d101      	bne.n	8004ea6 <HAL_ADC_Init+0x15e>
 8004ea2:	4a52      	ldr	r2, [pc, #328]	; (8004fec <HAL_ADC_Init+0x2a4>)
 8004ea4:	e000      	b.n	8004ea8 <HAL_ADC_Init+0x160>
 8004ea6:	4a52      	ldr	r2, [pc, #328]	; (8004ff0 <HAL_ADC_Init+0x2a8>)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	4619      	mov	r1, r3
 8004eae:	4610      	mov	r0, r2
 8004eb0:	f7ff fc9c 	bl	80047ec <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004eb4:	f7ff fc8e 	bl	80047d4 <HAL_GetREVID>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d914      	bls.n	8004eec <HAL_ADC_Init+0x1a4>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	2b10      	cmp	r3, #16
 8004ec8:	d110      	bne.n	8004eec <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	7d5b      	ldrb	r3, [r3, #21]
 8004ece:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004ed4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004eda:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	7f1b      	ldrb	r3, [r3, #28]
 8004ee0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004ee2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004ee4:	f043 030c 	orr.w	r3, r3, #12
 8004ee8:	61bb      	str	r3, [r7, #24]
 8004eea:	e00d      	b.n	8004f08 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	7d5b      	ldrb	r3, [r3, #21]
 8004ef0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004ef6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004efc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	7f1b      	ldrb	r3, [r3, #28]
 8004f02:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004f04:	4313      	orrs	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	7f1b      	ldrb	r3, [r3, #28]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d106      	bne.n	8004f1e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	045b      	lsls	r3, r3, #17
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d009      	beq.n	8004f3a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f32:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	4b2c      	ldr	r3, [pc, #176]	; (8004ff4 <HAL_ADC_Init+0x2ac>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6812      	ldr	r2, [r2, #0]
 8004f48:	69b9      	ldr	r1, [r7, #24]
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7ff fe48 	bl	8004be8 <LL_ADC_REG_IsConversionOngoing>
 8004f58:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff fe55 	bl	8004c0e <LL_ADC_INJ_IsConversionOngoing>
 8004f64:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d15f      	bne.n	800502c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d15c      	bne.n	800502c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	7d1b      	ldrb	r3, [r3, #20]
 8004f76:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	4b1c      	ldr	r3, [pc, #112]	; (8004ff8 <HAL_ADC_Init+0x2b0>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6812      	ldr	r2, [r2, #0]
 8004f8e:	69b9      	ldr	r1, [r7, #24]
 8004f90:	430b      	orrs	r3, r1
 8004f92:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d130      	bne.n	8005000 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	4b14      	ldr	r3, [pc, #80]	; (8004ffc <HAL_ADC_Init+0x2b4>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004fb2:	3a01      	subs	r2, #1
 8004fb4:	0411      	lsls	r1, r2, #16
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004fba:	4311      	orrs	r1, r2
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004fc0:	4311      	orrs	r1, r2
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	611a      	str	r2, [r3, #16]
 8004fd4:	e01c      	b.n	8005010 <HAL_ADC_Init+0x2c8>
 8004fd6:	bf00      	nop
 8004fd8:	20000158 	.word	0x20000158
 8004fdc:	053e2d63 	.word	0x053e2d63
 8004fe0:	40022000 	.word	0x40022000
 8004fe4:	40022100 	.word	0x40022100
 8004fe8:	58026000 	.word	0x58026000
 8004fec:	40022300 	.word	0x40022300
 8004ff0:	58026300 	.word	0x58026300
 8004ff4:	fff0c003 	.word	0xfff0c003
 8004ff8:	ffffbffc 	.word	0xffffbffc
 8004ffc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691a      	ldr	r2, [r3, #16]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0201 	bic.w	r2, r2, #1
 800500e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f001 fb46 	bl	80066b8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d10c      	bne.n	800504e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503a:	f023 010f 	bic.w	r1, r3, #15
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	1e5a      	subs	r2, r3, #1
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	631a      	str	r2, [r3, #48]	; 0x30
 800504c:	e007      	b.n	800505e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 020f 	bic.w	r2, r2, #15
 800505c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005062:	f023 0303 	bic.w	r3, r3, #3
 8005066:	f043 0201 	orr.w	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	655a      	str	r2, [r3, #84]	; 0x54
 800506e:	e007      	b.n	8005080 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005074:	f043 0210 	orr.w	r2, r3, #16
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005080:	7ffb      	ldrb	r3, [r7, #31]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3724      	adds	r7, #36	; 0x24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd90      	pop	{r4, r7, pc}
 800508a:	bf00      	nop

0800508c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a5c      	ldr	r2, [pc, #368]	; (800520c <HAL_ADC_Start+0x180>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d004      	beq.n	80050a8 <HAL_ADC_Start+0x1c>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a5b      	ldr	r2, [pc, #364]	; (8005210 <HAL_ADC_Start+0x184>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d101      	bne.n	80050ac <HAL_ADC_Start+0x20>
 80050a8:	4b5a      	ldr	r3, [pc, #360]	; (8005214 <HAL_ADC_Start+0x188>)
 80050aa:	e000      	b.n	80050ae <HAL_ADC_Start+0x22>
 80050ac:	4b5a      	ldr	r3, [pc, #360]	; (8005218 <HAL_ADC_Start+0x18c>)
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff fcf4 	bl	8004a9c <LL_ADC_GetMultimode>
 80050b4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff fd94 	bl	8004be8 <LL_ADC_REG_IsConversionOngoing>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f040 809a 	bne.w	80051fc <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <HAL_ADC_Start+0x4a>
 80050d2:	2302      	movs	r3, #2
 80050d4:	e095      	b.n	8005202 <HAL_ADC_Start+0x176>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f001 fa60 	bl	80065a4 <ADC_Enable>
 80050e4:	4603      	mov	r3, r0
 80050e6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80050e8:	7dfb      	ldrb	r3, [r7, #23]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f040 8081 	bne.w	80051f2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050f4:	4b49      	ldr	r3, [pc, #292]	; (800521c <HAL_ADC_Start+0x190>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a42      	ldr	r2, [pc, #264]	; (8005210 <HAL_ADC_Start+0x184>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d002      	beq.n	8005110 <HAL_ADC_Start+0x84>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	e000      	b.n	8005112 <HAL_ADC_Start+0x86>
 8005110:	4b3e      	ldr	r3, [pc, #248]	; (800520c <HAL_ADC_Start+0x180>)
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6812      	ldr	r2, [r2, #0]
 8005116:	4293      	cmp	r3, r2
 8005118:	d002      	beq.n	8005120 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d105      	bne.n	800512c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005124:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005138:	d106      	bne.n	8005148 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513e:	f023 0206 	bic.w	r2, r3, #6
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	659a      	str	r2, [r3, #88]	; 0x58
 8005146:	e002      	b.n	800514e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	221c      	movs	r2, #28
 8005154:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a2b      	ldr	r2, [pc, #172]	; (8005210 <HAL_ADC_Start+0x184>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d002      	beq.n	800516e <HAL_ADC_Start+0xe2>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	e000      	b.n	8005170 <HAL_ADC_Start+0xe4>
 800516e:	4b27      	ldr	r3, [pc, #156]	; (800520c <HAL_ADC_Start+0x180>)
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6812      	ldr	r2, [r2, #0]
 8005174:	4293      	cmp	r3, r2
 8005176:	d008      	beq.n	800518a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d005      	beq.n	800518a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b05      	cmp	r3, #5
 8005182:	d002      	beq.n	800518a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	2b09      	cmp	r3, #9
 8005188:	d114      	bne.n	80051b4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d007      	beq.n	80051a8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80051a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff fd07 	bl	8004bc0 <LL_ADC_REG_StartConversion>
 80051b2:	e025      	b.n	8005200 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a12      	ldr	r2, [pc, #72]	; (8005210 <HAL_ADC_Start+0x184>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d002      	beq.n	80051d0 <HAL_ADC_Start+0x144>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	e000      	b.n	80051d2 <HAL_ADC_Start+0x146>
 80051d0:	4b0e      	ldr	r3, [pc, #56]	; (800520c <HAL_ADC_Start+0x180>)
 80051d2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00f      	beq.n	8005200 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80051e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	655a      	str	r2, [r3, #84]	; 0x54
 80051f0:	e006      	b.n	8005200 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80051fa:	e001      	b.n	8005200 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80051fc:	2302      	movs	r3, #2
 80051fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005200:	7dfb      	ldrb	r3, [r7, #23]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40022000 	.word	0x40022000
 8005210:	40022100 	.word	0x40022100
 8005214:	40022300 	.word	0x40022300
 8005218:	58026300 	.word	0x58026300
 800521c:	fffff0fe 	.word	0xfffff0fe

08005220 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a72      	ldr	r2, [pc, #456]	; (80053f8 <HAL_ADC_PollForConversion+0x1d8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d004      	beq.n	800523e <HAL_ADC_PollForConversion+0x1e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a70      	ldr	r2, [pc, #448]	; (80053fc <HAL_ADC_PollForConversion+0x1dc>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d101      	bne.n	8005242 <HAL_ADC_PollForConversion+0x22>
 800523e:	4b70      	ldr	r3, [pc, #448]	; (8005400 <HAL_ADC_PollForConversion+0x1e0>)
 8005240:	e000      	b.n	8005244 <HAL_ADC_PollForConversion+0x24>
 8005242:	4b70      	ldr	r3, [pc, #448]	; (8005404 <HAL_ADC_PollForConversion+0x1e4>)
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff fc29 	bl	8004a9c <LL_ADC_GetMultimode>
 800524a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	2b08      	cmp	r3, #8
 8005252:	d102      	bne.n	800525a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005254:	2308      	movs	r3, #8
 8005256:	61fb      	str	r3, [r7, #28]
 8005258:	e037      	b.n	80052ca <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2b05      	cmp	r3, #5
 8005264:	d002      	beq.n	800526c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b09      	cmp	r3, #9
 800526a:	d111      	bne.n	8005290 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d007      	beq.n	800528a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527e:	f043 0220 	orr.w	r2, r3, #32
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e0b1      	b.n	80053ee <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800528a:	2304      	movs	r3, #4
 800528c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800528e:	e01c      	b.n	80052ca <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a58      	ldr	r2, [pc, #352]	; (80053f8 <HAL_ADC_PollForConversion+0x1d8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d004      	beq.n	80052a4 <HAL_ADC_PollForConversion+0x84>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a57      	ldr	r2, [pc, #348]	; (80053fc <HAL_ADC_PollForConversion+0x1dc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d101      	bne.n	80052a8 <HAL_ADC_PollForConversion+0x88>
 80052a4:	4b56      	ldr	r3, [pc, #344]	; (8005400 <HAL_ADC_PollForConversion+0x1e0>)
 80052a6:	e000      	b.n	80052aa <HAL_ADC_PollForConversion+0x8a>
 80052a8:	4b56      	ldr	r3, [pc, #344]	; (8005404 <HAL_ADC_PollForConversion+0x1e4>)
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff fc04 	bl	8004ab8 <LL_ADC_GetMultiDMATransfer>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ba:	f043 0220 	orr.w	r2, r3, #32
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e093      	b.n	80053ee <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80052c6:	2304      	movs	r3, #4
 80052c8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80052ca:	f7ff fa53 	bl	8004774 <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80052d0:	e021      	b.n	8005316 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d8:	d01d      	beq.n	8005316 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80052da:	f7ff fa4b 	bl	8004774 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d302      	bcc.n	80052f0 <HAL_ADC_PollForConversion+0xd0>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d112      	bne.n	8005316 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	4013      	ands	r3, r2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10b      	bne.n	8005316 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005302:	f043 0204 	orr.w	r2, r3, #4
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e06b      	b.n	80053ee <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	4013      	ands	r3, r2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0d6      	beq.n	80052d2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005328:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff fae1 	bl	80048fc <LL_ADC_REG_IsTriggerSourceSWStart>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01c      	beq.n	800537a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	7d5b      	ldrb	r3, [r3, #21]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d118      	bne.n	800537a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b08      	cmp	r3, #8
 8005354:	d111      	bne.n	800537a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d105      	bne.n	800537a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005372:	f043 0201 	orr.w	r2, r3, #1
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1f      	ldr	r2, [pc, #124]	; (80053fc <HAL_ADC_PollForConversion+0x1dc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d002      	beq.n	800538a <HAL_ADC_PollForConversion+0x16a>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	e000      	b.n	800538c <HAL_ADC_PollForConversion+0x16c>
 800538a:	4b1b      	ldr	r3, [pc, #108]	; (80053f8 <HAL_ADC_PollForConversion+0x1d8>)
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6812      	ldr	r2, [r2, #0]
 8005390:	4293      	cmp	r3, r2
 8005392:	d008      	beq.n	80053a6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d005      	beq.n	80053a6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2b05      	cmp	r3, #5
 800539e:	d002      	beq.n	80053a6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2b09      	cmp	r3, #9
 80053a4:	d104      	bne.n	80053b0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	e00c      	b.n	80053ca <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a11      	ldr	r2, [pc, #68]	; (80053fc <HAL_ADC_PollForConversion+0x1dc>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d002      	beq.n	80053c0 <HAL_ADC_PollForConversion+0x1a0>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	e000      	b.n	80053c2 <HAL_ADC_PollForConversion+0x1a2>
 80053c0:	4b0d      	ldr	r3, [pc, #52]	; (80053f8 <HAL_ADC_PollForConversion+0x1d8>)
 80053c2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d104      	bne.n	80053da <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2208      	movs	r2, #8
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e008      	b.n	80053ec <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d103      	bne.n	80053ec <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	220c      	movs	r2, #12
 80053ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3720      	adds	r7, #32
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	40022000 	.word	0x40022000
 80053fc:	40022100 	.word	0x40022100
 8005400:	40022300 	.word	0x40022300
 8005404:	58026300 	.word	0x58026300

08005408 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005416:	4618      	mov	r0, r3
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
	...

08005424 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08a      	sub	sp, #40	; 0x28
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800542c:	2300      	movs	r3, #0
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a87      	ldr	r2, [pc, #540]	; (8005664 <HAL_ADC_IRQHandler+0x240>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d004      	beq.n	8005454 <HAL_ADC_IRQHandler+0x30>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a86      	ldr	r2, [pc, #536]	; (8005668 <HAL_ADC_IRQHandler+0x244>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d101      	bne.n	8005458 <HAL_ADC_IRQHandler+0x34>
 8005454:	4b85      	ldr	r3, [pc, #532]	; (800566c <HAL_ADC_IRQHandler+0x248>)
 8005456:	e000      	b.n	800545a <HAL_ADC_IRQHandler+0x36>
 8005458:	4b85      	ldr	r3, [pc, #532]	; (8005670 <HAL_ADC_IRQHandler+0x24c>)
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff fb1e 	bl	8004a9c <LL_ADC_GetMultimode>
 8005460:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d017      	beq.n	800549c <HAL_ADC_IRQHandler+0x78>
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d012      	beq.n	800549c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b00      	cmp	r3, #0
 8005480:	d105      	bne.n	800548e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005486:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f001 fa44 	bl	800691c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2202      	movs	r2, #2
 800549a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	f003 0304 	and.w	r3, r3, #4
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d004      	beq.n	80054b0 <HAL_ADC_IRQHandler+0x8c>
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10a      	bne.n	80054c6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 8083 	beq.w	80055c2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d07d      	beq.n	80055c2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ca:	f003 0310 	and.w	r3, r3, #16
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d105      	bne.n	80054de <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff fa0a 	bl	80048fc <LL_ADC_REG_IsTriggerSourceSWStart>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d062      	beq.n	80055b4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a5d      	ldr	r2, [pc, #372]	; (8005668 <HAL_ADC_IRQHandler+0x244>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d002      	beq.n	80054fe <HAL_ADC_IRQHandler+0xda>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	e000      	b.n	8005500 <HAL_ADC_IRQHandler+0xdc>
 80054fe:	4b59      	ldr	r3, [pc, #356]	; (8005664 <HAL_ADC_IRQHandler+0x240>)
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	4293      	cmp	r3, r2
 8005506:	d008      	beq.n	800551a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b05      	cmp	r3, #5
 8005512:	d002      	beq.n	800551a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2b09      	cmp	r3, #9
 8005518:	d104      	bne.n	8005524 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	623b      	str	r3, [r7, #32]
 8005522:	e00c      	b.n	800553e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a4f      	ldr	r2, [pc, #316]	; (8005668 <HAL_ADC_IRQHandler+0x244>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d002      	beq.n	8005534 <HAL_ADC_IRQHandler+0x110>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	e000      	b.n	8005536 <HAL_ADC_IRQHandler+0x112>
 8005534:	4b4b      	ldr	r3, [pc, #300]	; (8005664 <HAL_ADC_IRQHandler+0x240>)
 8005536:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d135      	bne.n	80055b4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0308 	and.w	r3, r3, #8
 8005552:	2b08      	cmp	r3, #8
 8005554:	d12e      	bne.n	80055b4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff fb44 	bl	8004be8 <LL_ADC_REG_IsConversionOngoing>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d11a      	bne.n	800559c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 020c 	bic.w	r2, r2, #12
 8005574:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d112      	bne.n	80055b4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005592:	f043 0201 	orr.w	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	655a      	str	r2, [r3, #84]	; 0x54
 800559a:	e00b      	b.n	80055b4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a0:	f043 0210 	orr.w	r2, r3, #16
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ac:	f043 0201 	orr.w	r2, r3, #1
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f96f 	bl	8005898 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	220c      	movs	r2, #12
 80055c0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d004      	beq.n	80055d6 <HAL_ADC_IRQHandler+0x1b2>
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10b      	bne.n	80055ee <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80a0 	beq.w	8005722 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 809a 	beq.w	8005722 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f2:	f003 0310 	and.w	r3, r3, #16
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d105      	bne.n	8005606 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff f9b5 	bl	800497a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005610:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff f970 	bl	80048fc <LL_ADC_REG_IsTriggerSourceSWStart>
 800561c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a11      	ldr	r2, [pc, #68]	; (8005668 <HAL_ADC_IRQHandler+0x244>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d002      	beq.n	800562e <HAL_ADC_IRQHandler+0x20a>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	e000      	b.n	8005630 <HAL_ADC_IRQHandler+0x20c>
 800562e:	4b0d      	ldr	r3, [pc, #52]	; (8005664 <HAL_ADC_IRQHandler+0x240>)
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6812      	ldr	r2, [r2, #0]
 8005634:	4293      	cmp	r3, r2
 8005636:	d008      	beq.n	800564a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d005      	beq.n	800564a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2b06      	cmp	r3, #6
 8005642:	d002      	beq.n	800564a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2b07      	cmp	r3, #7
 8005648:	d104      	bne.n	8005654 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	623b      	str	r3, [r7, #32]
 8005652:	e014      	b.n	800567e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a03      	ldr	r2, [pc, #12]	; (8005668 <HAL_ADC_IRQHandler+0x244>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00a      	beq.n	8005674 <HAL_ADC_IRQHandler+0x250>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	e008      	b.n	8005676 <HAL_ADC_IRQHandler+0x252>
 8005664:	40022000 	.word	0x40022000
 8005668:	40022100 	.word	0x40022100
 800566c:	40022300 	.word	0x40022300
 8005670:	58026300 	.word	0x58026300
 8005674:	4b84      	ldr	r3, [pc, #528]	; (8005888 <HAL_ADC_IRQHandler+0x464>)
 8005676:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d047      	beq.n	8005714 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d007      	beq.n	800569e <HAL_ADC_IRQHandler+0x27a>
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d03f      	beq.n	8005714 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800569a:	2b00      	cmp	r3, #0
 800569c:	d13a      	bne.n	8005714 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a8:	2b40      	cmp	r3, #64	; 0x40
 80056aa:	d133      	bne.n	8005714 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d12e      	bne.n	8005714 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff faa7 	bl	8004c0e <LL_ADC_INJ_IsConversionOngoing>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d11a      	bne.n	80056fc <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80056d4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d112      	bne.n	8005714 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f2:	f043 0201 	orr.w	r2, r3, #1
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	655a      	str	r2, [r3, #84]	; 0x54
 80056fa:	e00b      	b.n	8005714 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005700:	f043 0210 	orr.w	r2, r3, #16
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570c:	f043 0201 	orr.w	r2, r3, #1
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f001 f8d9 	bl	80068cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2260      	movs	r2, #96	; 0x60
 8005720:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005728:	2b00      	cmp	r3, #0
 800572a:	d011      	beq.n	8005750 <HAL_ADC_IRQHandler+0x32c>
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00c      	beq.n	8005750 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fd ffc6 	bl	80036d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2280      	movs	r2, #128	; 0x80
 800574e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005756:	2b00      	cmp	r3, #0
 8005758:	d012      	beq.n	8005780 <HAL_ADC_IRQHandler+0x35c>
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00d      	beq.n	8005780 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005768:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f001 f8bf 	bl	80068f4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800577e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005786:	2b00      	cmp	r3, #0
 8005788:	d012      	beq.n	80057b0 <HAL_ADC_IRQHandler+0x38c>
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00d      	beq.n	80057b0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005798:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f001 f8b1 	bl	8006908 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f003 0310 	and.w	r3, r3, #16
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d043      	beq.n	8005842 <HAL_ADC_IRQHandler+0x41e>
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	f003 0310 	and.w	r3, r3, #16
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d03e      	beq.n	8005842 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d102      	bne.n	80057d2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80057cc:	2301      	movs	r3, #1
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
 80057d0:	e021      	b.n	8005816 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d015      	beq.n	8005804 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a2a      	ldr	r2, [pc, #168]	; (8005888 <HAL_ADC_IRQHandler+0x464>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d004      	beq.n	80057ec <HAL_ADC_IRQHandler+0x3c8>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a29      	ldr	r2, [pc, #164]	; (800588c <HAL_ADC_IRQHandler+0x468>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d101      	bne.n	80057f0 <HAL_ADC_IRQHandler+0x3cc>
 80057ec:	4b28      	ldr	r3, [pc, #160]	; (8005890 <HAL_ADC_IRQHandler+0x46c>)
 80057ee:	e000      	b.n	80057f2 <HAL_ADC_IRQHandler+0x3ce>
 80057f0:	4b28      	ldr	r3, [pc, #160]	; (8005894 <HAL_ADC_IRQHandler+0x470>)
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff f960 	bl	8004ab8 <LL_ADC_GetMultiDMATransfer>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80057fe:	2301      	movs	r3, #1
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
 8005802:	e008      	b.n	8005816 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005812:	2301      	movs	r3, #1
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	2b01      	cmp	r3, #1
 800581a:	d10e      	bne.n	800583a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005820:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582c:	f043 0202 	orr.w	r2, r3, #2
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f839 	bl	80058ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2210      	movs	r2, #16
 8005840:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005848:	2b00      	cmp	r3, #0
 800584a:	d018      	beq.n	800587e <HAL_ADC_IRQHandler+0x45a>
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005852:	2b00      	cmp	r3, #0
 8005854:	d013      	beq.n	800587e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005866:	f043 0208 	orr.w	r2, r3, #8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005876:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f001 f831 	bl	80068e0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800587e:	bf00      	nop
 8005880:	3728      	adds	r7, #40	; 0x28
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40022000 	.word	0x40022000
 800588c:	40022100 	.word	0x40022100
 8005890:	40022300 	.word	0x40022300
 8005894:	58026300 	.word	0x58026300

08005898 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80058c0:	b590      	push	{r4, r7, lr}
 80058c2:	b0a1      	sub	sp, #132	; 0x84
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	4a9d      	ldr	r2, [pc, #628]	; (8005b50 <HAL_ADC_ConfigChannel+0x290>)
 80058da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d101      	bne.n	80058ea <HAL_ADC_ConfigChannel+0x2a>
 80058e6:	2302      	movs	r3, #2
 80058e8:	e321      	b.n	8005f2e <HAL_ADC_ConfigChannel+0x66e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff f976 	bl	8004be8 <LL_ADC_REG_IsConversionOngoing>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f040 8306 	bne.w	8005f10 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800590c:	2b00      	cmp	r3, #0
 800590e:	d108      	bne.n	8005922 <HAL_ADC_ConfigChannel+0x62>
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	0e9b      	lsrs	r3, r3, #26
 8005916:	f003 031f 	and.w	r3, r3, #31
 800591a:	2201      	movs	r2, #1
 800591c:	fa02 f303 	lsl.w	r3, r2, r3
 8005920:	e016      	b.n	8005950 <HAL_ADC_ConfigChannel+0x90>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800592a:	fa93 f3a3 	rbit	r3, r3
 800592e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005930:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005932:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005934:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800593a:	2320      	movs	r3, #32
 800593c:	e003      	b.n	8005946 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800593e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005940:	fab3 f383 	clz	r3, r3
 8005944:	b2db      	uxtb	r3, r3
 8005946:	f003 031f 	and.w	r3, r3, #31
 800594a:	2201      	movs	r2, #1
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6812      	ldr	r2, [r2, #0]
 8005954:	69d1      	ldr	r1, [r2, #28]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6812      	ldr	r2, [r2, #0]
 800595a:	430b      	orrs	r3, r1
 800595c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6859      	ldr	r1, [r3, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	f7fe ffd9 	bl	8004922 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4618      	mov	r0, r3
 8005976:	f7ff f937 	bl	8004be8 <LL_ADC_REG_IsConversionOngoing>
 800597a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff f944 	bl	8004c0e <LL_ADC_INJ_IsConversionOngoing>
 8005986:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800598a:	2b00      	cmp	r3, #0
 800598c:	f040 80b3 	bne.w	8005af6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005990:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005992:	2b00      	cmp	r3, #0
 8005994:	f040 80af 	bne.w	8005af6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6818      	ldr	r0, [r3, #0]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	6819      	ldr	r1, [r3, #0]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	461a      	mov	r2, r3
 80059a6:	f7fe fffb 	bl	80049a0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80059aa:	4b6a      	ldr	r3, [pc, #424]	; (8005b54 <HAL_ADC_ConfigChannel+0x294>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80059b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059b6:	d10b      	bne.n	80059d0 <HAL_ADC_ConfigChannel+0x110>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	695a      	ldr	r2, [r3, #20]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	089b      	lsrs	r3, r3, #2
 80059c4:	f003 0307 	and.w	r3, r3, #7
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	fa02 f303 	lsl.w	r3, r2, r3
 80059ce:	e01d      	b.n	8005a0c <HAL_ADC_ConfigChannel+0x14c>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f003 0310 	and.w	r3, r3, #16
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10b      	bne.n	80059f6 <HAL_ADC_ConfigChannel+0x136>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	695a      	ldr	r2, [r3, #20]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	089b      	lsrs	r3, r3, #2
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
 80059f4:	e00a      	b.n	8005a0c <HAL_ADC_ConfigChannel+0x14c>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	695a      	ldr	r2, [r3, #20]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	089b      	lsrs	r3, r3, #2
 8005a02:	f003 0304 	and.w	r3, r3, #4
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d027      	beq.n	8005a66 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	6919      	ldr	r1, [r3, #16]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a24:	f7fe ff16 	bl	8004854 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	6919      	ldr	r1, [r3, #16]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	7e5b      	ldrb	r3, [r3, #25]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d102      	bne.n	8005a3e <HAL_ADC_ConfigChannel+0x17e>
 8005a38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a3c:	e000      	b.n	8005a40 <HAL_ADC_ConfigChannel+0x180>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	461a      	mov	r2, r3
 8005a42:	f7fe ff40 	bl	80048c6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6818      	ldr	r0, [r3, #0]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	6919      	ldr	r1, [r3, #16]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	7e1b      	ldrb	r3, [r3, #24]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d102      	bne.n	8005a5c <HAL_ADC_ConfigChannel+0x19c>
 8005a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a5a:	e000      	b.n	8005a5e <HAL_ADC_ConfigChannel+0x19e>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f7fe ff18 	bl	8004894 <LL_ADC_SetDataRightShift>
 8005a64:	e047      	b.n	8005af6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	069b      	lsls	r3, r3, #26
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d107      	bne.n	8005a8a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005a88:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	069b      	lsls	r3, r3, #26
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d107      	bne.n	8005aae <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005aac:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ab4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	069b      	lsls	r3, r3, #26
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d107      	bne.n	8005ad2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005ad0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ad8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	069b      	lsls	r3, r3, #26
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d107      	bne.n	8005af6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005af4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff f84c 	bl	8004b98 <LL_ADC_IsEnabled>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f040 820d 	bne.w	8005f22 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6818      	ldr	r0, [r3, #0]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	6819      	ldr	r1, [r3, #0]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	461a      	mov	r2, r3
 8005b16:	f7fe ff6f 	bl	80049f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	4a0c      	ldr	r2, [pc, #48]	; (8005b50 <HAL_ADC_ConfigChannel+0x290>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	f040 8133 	bne.w	8005d8c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d110      	bne.n	8005b58 <HAL_ADC_ConfigChannel+0x298>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	0e9b      	lsrs	r3, r3, #26
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	f003 031f 	and.w	r3, r3, #31
 8005b42:	2b09      	cmp	r3, #9
 8005b44:	bf94      	ite	ls
 8005b46:	2301      	movls	r3, #1
 8005b48:	2300      	movhi	r3, #0
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	e01e      	b.n	8005b8c <HAL_ADC_ConfigChannel+0x2cc>
 8005b4e:	bf00      	nop
 8005b50:	47ff0000 	.word	0x47ff0000
 8005b54:	5c001000 	.word	0x5c001000
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b60:	fa93 f3a3 	rbit	r3, r3
 8005b64:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b68:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8005b70:	2320      	movs	r3, #32
 8005b72:	e003      	b.n	8005b7c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b76:	fab3 f383 	clz	r3, r3
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	f003 031f 	and.w	r3, r3, #31
 8005b82:	2b09      	cmp	r3, #9
 8005b84:	bf94      	ite	ls
 8005b86:	2301      	movls	r3, #1
 8005b88:	2300      	movhi	r3, #0
 8005b8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d079      	beq.n	8005c84 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d107      	bne.n	8005bac <HAL_ADC_ConfigChannel+0x2ec>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	0e9b      	lsrs	r3, r3, #26
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	069b      	lsls	r3, r3, #26
 8005ba6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005baa:	e015      	b.n	8005bd8 <HAL_ADC_ConfigChannel+0x318>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb4:	fa93 f3a3 	rbit	r3, r3
 8005bb8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bbc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8005bc4:	2320      	movs	r3, #32
 8005bc6:	e003      	b.n	8005bd0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bca:	fab3 f383 	clz	r3, r3
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	069b      	lsls	r3, r3, #26
 8005bd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d109      	bne.n	8005bf8 <HAL_ADC_ConfigChannel+0x338>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	0e9b      	lsrs	r3, r3, #26
 8005bea:	3301      	adds	r3, #1
 8005bec:	f003 031f 	and.w	r3, r3, #31
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf6:	e017      	b.n	8005c28 <HAL_ADC_ConfigChannel+0x368>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c00:	fa93 f3a3 	rbit	r3, r3
 8005c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c08:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005c10:	2320      	movs	r3, #32
 8005c12:	e003      	b.n	8005c1c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c16:	fab3 f383 	clz	r3, r3
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	f003 031f 	and.w	r3, r3, #31
 8005c22:	2101      	movs	r1, #1
 8005c24:	fa01 f303 	lsl.w	r3, r1, r3
 8005c28:	ea42 0103 	orr.w	r1, r2, r3
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <HAL_ADC_ConfigChannel+0x38e>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	0e9b      	lsrs	r3, r3, #26
 8005c3e:	3301      	adds	r3, #1
 8005c40:	f003 021f 	and.w	r2, r3, #31
 8005c44:	4613      	mov	r3, r2
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	4413      	add	r3, r2
 8005c4a:	051b      	lsls	r3, r3, #20
 8005c4c:	e018      	b.n	8005c80 <HAL_ADC_ConfigChannel+0x3c0>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c56:	fa93 f3a3 	rbit	r3, r3
 8005c5a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8005c66:	2320      	movs	r3, #32
 8005c68:	e003      	b.n	8005c72 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6c:	fab3 f383 	clz	r3, r3
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	3301      	adds	r3, #1
 8005c74:	f003 021f 	and.w	r2, r3, #31
 8005c78:	4613      	mov	r3, r2
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	4413      	add	r3, r2
 8005c7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c80:	430b      	orrs	r3, r1
 8005c82:	e07e      	b.n	8005d82 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d107      	bne.n	8005ca0 <HAL_ADC_ConfigChannel+0x3e0>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	0e9b      	lsrs	r3, r3, #26
 8005c96:	3301      	adds	r3, #1
 8005c98:	069b      	lsls	r3, r3, #26
 8005c9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c9e:	e015      	b.n	8005ccc <HAL_ADC_ConfigChannel+0x40c>
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca8:	fa93 f3a3 	rbit	r3, r3
 8005cac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005cb8:	2320      	movs	r3, #32
 8005cba:	e003      	b.n	8005cc4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbe:	fab3 f383 	clz	r3, r3
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	069b      	lsls	r3, r3, #26
 8005cc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d109      	bne.n	8005cec <HAL_ADC_ConfigChannel+0x42c>
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	0e9b      	lsrs	r3, r3, #26
 8005cde:	3301      	adds	r3, #1
 8005ce0:	f003 031f 	and.w	r3, r3, #31
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cea:	e017      	b.n	8005d1c <HAL_ADC_ConfigChannel+0x45c>
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	fa93 f3a3 	rbit	r3, r3
 8005cf8:	61bb      	str	r3, [r7, #24]
  return result;
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8005d04:	2320      	movs	r3, #32
 8005d06:	e003      	b.n	8005d10 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	fab3 f383 	clz	r3, r3
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	3301      	adds	r3, #1
 8005d12:	f003 031f 	and.w	r3, r3, #31
 8005d16:	2101      	movs	r1, #1
 8005d18:	fa01 f303 	lsl.w	r3, r1, r3
 8005d1c:	ea42 0103 	orr.w	r1, r2, r3
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10d      	bne.n	8005d48 <HAL_ADC_ConfigChannel+0x488>
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	0e9b      	lsrs	r3, r3, #26
 8005d32:	3301      	adds	r3, #1
 8005d34:	f003 021f 	and.w	r2, r3, #31
 8005d38:	4613      	mov	r3, r2
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	4413      	add	r3, r2
 8005d3e:	3b1e      	subs	r3, #30
 8005d40:	051b      	lsls	r3, r3, #20
 8005d42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d46:	e01b      	b.n	8005d80 <HAL_ADC_ConfigChannel+0x4c0>
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	fa93 f3a3 	rbit	r3, r3
 8005d54:	60fb      	str	r3, [r7, #12]
  return result;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8005d60:	2320      	movs	r3, #32
 8005d62:	e003      	b.n	8005d6c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	fab3 f383 	clz	r3, r3
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	f003 021f 	and.w	r2, r3, #31
 8005d72:	4613      	mov	r3, r2
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	4413      	add	r3, r2
 8005d78:	3b1e      	subs	r3, #30
 8005d7a:	051b      	lsls	r3, r3, #20
 8005d7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d80:	430b      	orrs	r3, r1
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	6892      	ldr	r2, [r2, #8]
 8005d86:	4619      	mov	r1, r3
 8005d88:	f7fe fe0a 	bl	80049a0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f280 80c6 	bge.w	8005f22 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a67      	ldr	r2, [pc, #412]	; (8005f38 <HAL_ADC_ConfigChannel+0x678>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d004      	beq.n	8005daa <HAL_ADC_ConfigChannel+0x4ea>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a65      	ldr	r2, [pc, #404]	; (8005f3c <HAL_ADC_ConfigChannel+0x67c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d101      	bne.n	8005dae <HAL_ADC_ConfigChannel+0x4ee>
 8005daa:	4b65      	ldr	r3, [pc, #404]	; (8005f40 <HAL_ADC_ConfigChannel+0x680>)
 8005dac:	e000      	b.n	8005db0 <HAL_ADC_ConfigChannel+0x4f0>
 8005dae:	4b65      	ldr	r3, [pc, #404]	; (8005f44 <HAL_ADC_ConfigChannel+0x684>)
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fe fd41 	bl	8004838 <LL_ADC_GetCommonPathInternalCh>
 8005db6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a5e      	ldr	r2, [pc, #376]	; (8005f38 <HAL_ADC_ConfigChannel+0x678>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d004      	beq.n	8005dcc <HAL_ADC_ConfigChannel+0x50c>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a5d      	ldr	r2, [pc, #372]	; (8005f3c <HAL_ADC_ConfigChannel+0x67c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d10e      	bne.n	8005dea <HAL_ADC_ConfigChannel+0x52a>
 8005dcc:	485a      	ldr	r0, [pc, #360]	; (8005f38 <HAL_ADC_ConfigChannel+0x678>)
 8005dce:	f7fe fee3 	bl	8004b98 <LL_ADC_IsEnabled>
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	4859      	ldr	r0, [pc, #356]	; (8005f3c <HAL_ADC_ConfigChannel+0x67c>)
 8005dd6:	f7fe fedf 	bl	8004b98 <LL_ADC_IsEnabled>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	4323      	orrs	r3, r4
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	bf0c      	ite	eq
 8005de2:	2301      	moveq	r3, #1
 8005de4:	2300      	movne	r3, #0
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	e008      	b.n	8005dfc <HAL_ADC_ConfigChannel+0x53c>
 8005dea:	4857      	ldr	r0, [pc, #348]	; (8005f48 <HAL_ADC_ConfigChannel+0x688>)
 8005dec:	f7fe fed4 	bl	8004b98 <LL_ADC_IsEnabled>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	bf0c      	ite	eq
 8005df6:	2301      	moveq	r3, #1
 8005df8:	2300      	movne	r3, #0
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d07d      	beq.n	8005efc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a51      	ldr	r2, [pc, #324]	; (8005f4c <HAL_ADC_ConfigChannel+0x68c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d130      	bne.n	8005e6c <HAL_ADC_ConfigChannel+0x5ac>
 8005e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d12b      	bne.n	8005e6c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a4b      	ldr	r2, [pc, #300]	; (8005f48 <HAL_ADC_ConfigChannel+0x688>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	f040 8081 	bne.w	8005f22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a44      	ldr	r2, [pc, #272]	; (8005f38 <HAL_ADC_ConfigChannel+0x678>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d004      	beq.n	8005e34 <HAL_ADC_ConfigChannel+0x574>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a43      	ldr	r2, [pc, #268]	; (8005f3c <HAL_ADC_ConfigChannel+0x67c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d101      	bne.n	8005e38 <HAL_ADC_ConfigChannel+0x578>
 8005e34:	4a42      	ldr	r2, [pc, #264]	; (8005f40 <HAL_ADC_ConfigChannel+0x680>)
 8005e36:	e000      	b.n	8005e3a <HAL_ADC_ConfigChannel+0x57a>
 8005e38:	4a42      	ldr	r2, [pc, #264]	; (8005f44 <HAL_ADC_ConfigChannel+0x684>)
 8005e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e40:	4619      	mov	r1, r3
 8005e42:	4610      	mov	r0, r2
 8005e44:	f7fe fce5 	bl	8004812 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e48:	4b41      	ldr	r3, [pc, #260]	; (8005f50 <HAL_ADC_ConfigChannel+0x690>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	099b      	lsrs	r3, r3, #6
 8005e4e:	4a41      	ldr	r2, [pc, #260]	; (8005f54 <HAL_ADC_ConfigChannel+0x694>)
 8005e50:	fba2 2303 	umull	r2, r3, r2, r3
 8005e54:	099b      	lsrs	r3, r3, #6
 8005e56:	3301      	adds	r3, #1
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005e5c:	e002      	b.n	8005e64 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1f9      	bne.n	8005e5e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e6a:	e05a      	b.n	8005f22 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a39      	ldr	r2, [pc, #228]	; (8005f58 <HAL_ADC_ConfigChannel+0x698>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d11e      	bne.n	8005eb4 <HAL_ADC_ConfigChannel+0x5f4>
 8005e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d119      	bne.n	8005eb4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a30      	ldr	r2, [pc, #192]	; (8005f48 <HAL_ADC_ConfigChannel+0x688>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d14b      	bne.n	8005f22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a2a      	ldr	r2, [pc, #168]	; (8005f38 <HAL_ADC_ConfigChannel+0x678>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d004      	beq.n	8005e9e <HAL_ADC_ConfigChannel+0x5de>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a28      	ldr	r2, [pc, #160]	; (8005f3c <HAL_ADC_ConfigChannel+0x67c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d101      	bne.n	8005ea2 <HAL_ADC_ConfigChannel+0x5e2>
 8005e9e:	4a28      	ldr	r2, [pc, #160]	; (8005f40 <HAL_ADC_ConfigChannel+0x680>)
 8005ea0:	e000      	b.n	8005ea4 <HAL_ADC_ConfigChannel+0x5e4>
 8005ea2:	4a28      	ldr	r2, [pc, #160]	; (8005f44 <HAL_ADC_ConfigChannel+0x684>)
 8005ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4610      	mov	r0, r2
 8005eae:	f7fe fcb0 	bl	8004812 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005eb2:	e036      	b.n	8005f22 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a28      	ldr	r2, [pc, #160]	; (8005f5c <HAL_ADC_ConfigChannel+0x69c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d131      	bne.n	8005f22 <HAL_ADC_ConfigChannel+0x662>
 8005ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d12c      	bne.n	8005f22 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a1e      	ldr	r2, [pc, #120]	; (8005f48 <HAL_ADC_ConfigChannel+0x688>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d127      	bne.n	8005f22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a18      	ldr	r2, [pc, #96]	; (8005f38 <HAL_ADC_ConfigChannel+0x678>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d004      	beq.n	8005ee6 <HAL_ADC_ConfigChannel+0x626>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a16      	ldr	r2, [pc, #88]	; (8005f3c <HAL_ADC_ConfigChannel+0x67c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d101      	bne.n	8005eea <HAL_ADC_ConfigChannel+0x62a>
 8005ee6:	4a16      	ldr	r2, [pc, #88]	; (8005f40 <HAL_ADC_ConfigChannel+0x680>)
 8005ee8:	e000      	b.n	8005eec <HAL_ADC_ConfigChannel+0x62c>
 8005eea:	4a16      	ldr	r2, [pc, #88]	; (8005f44 <HAL_ADC_ConfigChannel+0x684>)
 8005eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	f7fe fc8c 	bl	8004812 <LL_ADC_SetCommonPathInternalCh>
 8005efa:	e012      	b.n	8005f22 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f00:	f043 0220 	orr.w	r2, r3, #32
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005f0e:	e008      	b.n	8005f22 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f14:	f043 0220 	orr.w	r2, r3, #32
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005f2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3784      	adds	r7, #132	; 0x84
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd90      	pop	{r4, r7, pc}
 8005f36:	bf00      	nop
 8005f38:	40022000 	.word	0x40022000
 8005f3c:	40022100 	.word	0x40022100
 8005f40:	40022300 	.word	0x40022300
 8005f44:	58026300 	.word	0x58026300
 8005f48:	58026000 	.word	0x58026000
 8005f4c:	cb840000 	.word	0xcb840000
 8005f50:	20000158 	.word	0x20000158
 8005f54:	053e2d63 	.word	0x053e2d63
 8005f58:	c7520000 	.word	0xc7520000
 8005f5c:	cfb80000 	.word	0xcfb80000

08005f60 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b094      	sub	sp, #80	; 0x50
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f78:	d003      	beq.n	8005f82 <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005f7e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d101      	bne.n	8005f90 <HAL_ADC_AnalogWDGConfig+0x30>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e304      	b.n	800659a <HAL_ADC_AnalogWDGConfig+0x63a>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fe fe23 	bl	8004be8 <LL_ADC_REG_IsConversionOngoing>
 8005fa2:	64b8      	str	r0, [r7, #72]	; 0x48
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fe fe30 	bl	8004c0e <LL_ADC_INJ_IsConversionOngoing>
 8005fae:	6478      	str	r0, [r7, #68]	; 0x44
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f040 82e2 	bne.w	800657c <HAL_ADC_AnalogWDGConfig+0x61c>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f040 82de 	bne.w	800657c <HAL_ADC_AnalogWDGConfig+0x61c>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a9b      	ldr	r2, [pc, #620]	; (8006234 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	f040 80fa 	bne.w	80061c0 <HAL_ADC_AnalogWDGConfig+0x260>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8005fd4:	d034      	beq.n	8006040 <HAL_ADC_AnalogWDGConfig+0xe0>
 8005fd6:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8005fda:	d856      	bhi.n	800608a <HAL_ADC_AnalogWDGConfig+0x12a>
 8005fdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fe0:	d04b      	beq.n	800607a <HAL_ADC_AnalogWDGConfig+0x11a>
 8005fe2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fe6:	d850      	bhi.n	800608a <HAL_ADC_AnalogWDGConfig+0x12a>
 8005fe8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005fec:	d01b      	beq.n	8006026 <HAL_ADC_AnalogWDGConfig+0xc6>
 8005fee:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005ff2:	d84a      	bhi.n	800608a <HAL_ADC_AnalogWDGConfig+0x12a>
 8005ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ff8:	d037      	beq.n	800606a <HAL_ADC_AnalogWDGConfig+0x10a>
 8005ffa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ffe:	d844      	bhi.n	800608a <HAL_ADC_AnalogWDGConfig+0x12a>
 8006000:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006004:	d029      	beq.n	800605a <HAL_ADC_AnalogWDGConfig+0xfa>
 8006006:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800600a:	d13e      	bne.n	800608a <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6818      	ldr	r0, [r3, #0]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8006018:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800601c:	461a      	mov	r2, r3
 800601e:	4985      	ldr	r1, [pc, #532]	; (8006234 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8006020:	f7fe fd0e 	bl	8004a40 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8006024:	e039      	b.n	800609a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8006032:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8006036:	461a      	mov	r2, r3
 8006038:	497e      	ldr	r1, [pc, #504]	; (8006234 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800603a:	f7fe fd01 	bl	8004a40 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 800603e:	e02c      	b.n	800609a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6818      	ldr	r0, [r3, #0]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800604c:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8006050:	461a      	mov	r2, r3
 8006052:	4978      	ldr	r1, [pc, #480]	; (8006234 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8006054:	f7fe fcf4 	bl	8004a40 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8006058:	e01f      	b.n	800609a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a76      	ldr	r2, [pc, #472]	; (8006238 <HAL_ADC_AnalogWDGConfig+0x2d8>)
 8006060:	4974      	ldr	r1, [pc, #464]	; (8006234 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe fcec 	bl	8004a40 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006068:	e017      	b.n	800609a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a73      	ldr	r2, [pc, #460]	; (800623c <HAL_ADC_AnalogWDGConfig+0x2dc>)
 8006070:	4970      	ldr	r1, [pc, #448]	; (8006234 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8006072:	4618      	mov	r0, r3
 8006074:	f7fe fce4 	bl	8004a40 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006078:	e00f      	b.n	800609a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a70      	ldr	r2, [pc, #448]	; (8006240 <HAL_ADC_AnalogWDGConfig+0x2e0>)
 8006080:	496c      	ldr	r1, [pc, #432]	; (8006234 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8006082:	4618      	mov	r0, r3
 8006084:	f7fe fcdc 	bl	8004a40 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006088:	e007      	b.n	800609a <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2200      	movs	r2, #0
 8006090:	4968      	ldr	r1, [pc, #416]	; (8006234 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 8006092:	4618      	mov	r0, r3
 8006094:	f7fe fcd4 	bl	8004a40 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006098:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800609a:	4b6a      	ldr	r3, [pc, #424]	; (8006244 <HAL_ADC_AnalogWDGConfig+0x2e4>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80060a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060a6:	d10b      	bne.n	80060c0 <HAL_ADC_AnalogWDGConfig+0x160>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	691a      	ldr	r2, [r3, #16]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	089b      	lsrs	r3, r3, #2
 80060b4:	f003 0307 	and.w	r3, r3, #7
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	fa02 f303 	lsl.w	r3, r2, r3
 80060be:	e01d      	b.n	80060fc <HAL_ADC_AnalogWDGConfig+0x19c>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f003 0310 	and.w	r3, r3, #16
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10b      	bne.n	80060e6 <HAL_ADC_AnalogWDGConfig+0x186>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	691a      	ldr	r2, [r3, #16]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	089b      	lsrs	r3, r3, #2
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	fa02 f303 	lsl.w	r3, r2, r3
 80060e4:	e00a      	b.n	80060fc <HAL_ADC_AnalogWDGConfig+0x19c>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	691a      	ldr	r2, [r3, #16]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	089b      	lsrs	r3, r3, #2
 80060f2:	f003 0304 	and.w	r3, r3, #4
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	643b      	str	r3, [r7, #64]	; 0x40
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80060fe:	4b51      	ldr	r3, [pc, #324]	; (8006244 <HAL_ADC_AnalogWDGConfig+0x2e4>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006106:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800610a:	d10b      	bne.n	8006124 <HAL_ADC_AnalogWDGConfig+0x1c4>
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	695a      	ldr	r2, [r3, #20]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	089b      	lsrs	r3, r3, #2
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
 8006122:	e01d      	b.n	8006160 <HAL_ADC_AnalogWDGConfig+0x200>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f003 0310 	and.w	r3, r3, #16
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10b      	bne.n	800614a <HAL_ADC_AnalogWDGConfig+0x1ea>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	695a      	ldr	r2, [r3, #20]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	089b      	lsrs	r3, r3, #2
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	fa02 f303 	lsl.w	r3, r2, r3
 8006148:	e00a      	b.n	8006160 <HAL_ADC_AnalogWDGConfig+0x200>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	695a      	ldr	r2, [r3, #20]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	089b      	lsrs	r3, r3, #2
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	fa02 f303 	lsl.w	r3, r2, r3
 8006160:	63fb      	str	r3, [r7, #60]	; 0x3c

        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
        MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
      }
#else
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006172:	430a      	orrs	r2, r1
 8006174:	621a      	str	r2, [r3, #32]
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006186:	430a      	orrs	r2, r1
 8006188:	625a      	str	r2, [r3, #36]	; 0x24
#endif

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4618      	mov	r0, r3
 800619c:	f7fe fd4a 	bl	8004c34 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	7b1b      	ldrb	r3, [r3, #12]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d105      	bne.n	80061b4 <HAL_ADC_AnalogWDGConfig+0x254>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fe fd6a 	bl	8004c86 <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80061b2:	e1ec      	b.n	800658e <HAL_ADC_AnalogWDGConfig+0x62e>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fe fd94 	bl	8004ce6 <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80061be:	e1e6      	b.n	800658e <HAL_ADC_AnalogWDGConfig+0x62e>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80061c8:	d020      	beq.n	800620c <HAL_ADC_AnalogWDGConfig+0x2ac>
 80061ca:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80061ce:	f200 80f3 	bhi.w	80063b8 <HAL_ADC_AnalogWDGConfig+0x458>
 80061d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061d6:	f000 808a 	beq.w	80062ee <HAL_ADC_AnalogWDGConfig+0x38e>
 80061da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061de:	f200 80eb 	bhi.w	80063b8 <HAL_ADC_AnalogWDGConfig+0x458>
 80061e2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80061e6:	d011      	beq.n	800620c <HAL_ADC_AnalogWDGConfig+0x2ac>
 80061e8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80061ec:	f200 80e4 	bhi.w	80063b8 <HAL_ADC_AnalogWDGConfig+0x458>
 80061f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061f4:	d07b      	beq.n	80062ee <HAL_ADC_AnalogWDGConfig+0x38e>
 80061f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061fa:	f200 80dd 	bhi.w	80063b8 <HAL_ADC_AnalogWDGConfig+0x458>
 80061fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006202:	d074      	beq.n	80062ee <HAL_ADC_AnalogWDGConfig+0x38e>
 8006204:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006208:	f040 80d6 	bne.w	80063b8 <HAL_ADC_AnalogWDGConfig+0x458>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a0d      	ldr	r2, [pc, #52]	; (8006248 <HAL_ADC_AnalogWDGConfig+0x2e8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d13b      	bne.n	800628e <HAL_ADC_AnalogWDGConfig+0x32e>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800621e:	2b00      	cmp	r3, #0
 8006220:	d114      	bne.n	800624c <HAL_ADC_AnalogWDGConfig+0x2ec>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	0e9b      	lsrs	r3, r3, #26
 8006228:	f003 031f 	and.w	r3, r3, #31
 800622c:	2201      	movs	r2, #1
 800622e:	fa02 f303 	lsl.w	r3, r2, r3
 8006232:	e022      	b.n	800627a <HAL_ADC_AnalogWDGConfig+0x31a>
 8006234:	7dc00000 	.word	0x7dc00000
 8006238:	008fffff 	.word	0x008fffff
 800623c:	010fffff 	.word	0x010fffff
 8006240:	018fffff 	.word	0x018fffff
 8006244:	5c001000 	.word	0x5c001000
 8006248:	001fffff 	.word	0x001fffff
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006254:	fa93 f3a3 	rbit	r3, r3
 8006258:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800625e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <HAL_ADC_AnalogWDGConfig+0x308>
    return 32U;
 8006264:	2320      	movs	r3, #32
 8006266:	e003      	b.n	8006270 <HAL_ADC_AnalogWDGConfig+0x310>
  return __builtin_clz(value);
 8006268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626a:	fab3 f383 	clz	r3, r3
 800626e:	b2db      	uxtb	r3, r3
 8006270:	f003 031f 	and.w	r3, r3, #31
 8006274:	2201      	movs	r2, #1
 8006276:	fa02 f303 	lsl.w	r3, r2, r3
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6812      	ldr	r2, [r2, #0]
 8006286:	430b      	orrs	r3, r1
 8006288:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 800628c:	e09d      	b.n	80063ca <HAL_ADC_AnalogWDGConfig+0x46a>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006296:	2b00      	cmp	r3, #0
 8006298:	d108      	bne.n	80062ac <HAL_ADC_AnalogWDGConfig+0x34c>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	0e9b      	lsrs	r3, r3, #26
 80062a0:	f003 031f 	and.w	r3, r3, #31
 80062a4:	2201      	movs	r2, #1
 80062a6:	fa02 f303 	lsl.w	r3, r2, r3
 80062aa:	e016      	b.n	80062da <HAL_ADC_AnalogWDGConfig+0x37a>
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b4:	fa93 f3a3 	rbit	r3, r3
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80062be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <HAL_ADC_AnalogWDGConfig+0x368>
    return 32U;
 80062c4:	2320      	movs	r3, #32
 80062c6:	e003      	b.n	80062d0 <HAL_ADC_AnalogWDGConfig+0x370>
  return __builtin_clz(value);
 80062c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ca:	fab3 f383 	clz	r3, r3
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	f003 031f 	and.w	r3, r3, #31
 80062d4:	2201      	movs	r2, #1
 80062d6:	fa02 f303 	lsl.w	r3, r2, r3
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6812      	ldr	r2, [r2, #0]
 80062de:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	6812      	ldr	r2, [r2, #0]
 80062e6:	430b      	orrs	r3, r1
 80062e8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 80062ec:	e06d      	b.n	80063ca <HAL_ADC_AnalogWDGConfig+0x46a>
          else
          {
#endif  /*ADC_VER_V5_V90*/
            /* Update AWD by bitfield to keep the possibility to monitor        */
            /* several channels by successive calls of this function.           */
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4aa0      	ldr	r2, [pc, #640]	; (8006574 <HAL_ADC_AnalogWDGConfig+0x614>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d12f      	bne.n	8006358 <HAL_ADC_AnalogWDGConfig+0x3f8>
            {
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006300:	2b00      	cmp	r3, #0
 8006302:	d108      	bne.n	8006316 <HAL_ADC_AnalogWDGConfig+0x3b6>
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	0e9b      	lsrs	r3, r3, #26
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	2201      	movs	r2, #1
 8006310:	fa02 f303 	lsl.w	r3, r2, r3
 8006314:	e016      	b.n	8006344 <HAL_ADC_AnalogWDGConfig+0x3e4>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	fa93 f3a3 	rbit	r3, r3
 8006322:	61bb      	str	r3, [r7, #24]
  return result;
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_ADC_AnalogWDGConfig+0x3d2>
    return 32U;
 800632e:	2320      	movs	r3, #32
 8006330:	e003      	b.n	800633a <HAL_ADC_AnalogWDGConfig+0x3da>
  return __builtin_clz(value);
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	fab3 f383 	clz	r3, r3
 8006338:	b2db      	uxtb	r3, r3
 800633a:	f003 031f 	and.w	r3, r3, #31
 800633e:	2201      	movs	r2, #1
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6812      	ldr	r2, [r2, #0]
 8006348:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6812      	ldr	r2, [r2, #0]
 8006350:	430b      	orrs	r3, r1
 8006352:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
            }
#if defined(ADC_VER_V5_V90)
          }
#endif  /*ADC_VER_V5_V90*/
          break;
 8006356:	e038      	b.n	80063ca <HAL_ADC_AnalogWDGConfig+0x46a>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006360:	2b00      	cmp	r3, #0
 8006362:	d108      	bne.n	8006376 <HAL_ADC_AnalogWDGConfig+0x416>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	0e9b      	lsrs	r3, r3, #26
 800636a:	f003 031f 	and.w	r3, r3, #31
 800636e:	2201      	movs	r2, #1
 8006370:	fa02 f303 	lsl.w	r3, r2, r3
 8006374:	e016      	b.n	80063a4 <HAL_ADC_AnalogWDGConfig+0x444>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	fa93 f3a3 	rbit	r3, r3
 8006382:	60fb      	str	r3, [r7, #12]
  return result;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_ADC_AnalogWDGConfig+0x432>
    return 32U;
 800638e:	2320      	movs	r3, #32
 8006390:	e003      	b.n	800639a <HAL_ADC_AnalogWDGConfig+0x43a>
  return __builtin_clz(value);
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	fab3 f383 	clz	r3, r3
 8006398:	b2db      	uxtb	r3, r3
 800639a:	f003 031f 	and.w	r3, r3, #31
 800639e:	2201      	movs	r2, #1
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6812      	ldr	r2, [r2, #0]
 80063a8:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	6812      	ldr	r2, [r2, #0]
 80063b0:	430b      	orrs	r3, r1
 80063b2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 80063b6:	e008      	b.n	80063ca <HAL_ADC_AnalogWDGConfig+0x46a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2200      	movs	r2, #0
 80063c2:	4619      	mov	r1, r3
 80063c4:	f7fe fb3c 	bl	8004a40 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80063c8:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80063ca:	4b6b      	ldr	r3, [pc, #428]	; (8006578 <HAL_ADC_AnalogWDGConfig+0x618>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80063d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063d6:	d10b      	bne.n	80063f0 <HAL_ADC_AnalogWDGConfig+0x490>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	691a      	ldr	r2, [r3, #16]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	089b      	lsrs	r3, r3, #2
 80063e4:	f003 0307 	and.w	r3, r3, #7
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	fa02 f303 	lsl.w	r3, r2, r3
 80063ee:	e01d      	b.n	800642c <HAL_ADC_AnalogWDGConfig+0x4cc>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f003 0310 	and.w	r3, r3, #16
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10b      	bne.n	8006416 <HAL_ADC_AnalogWDGConfig+0x4b6>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	691a      	ldr	r2, [r3, #16]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	089b      	lsrs	r3, r3, #2
 800640a:	f003 0307 	and.w	r3, r3, #7
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	fa02 f303 	lsl.w	r3, r2, r3
 8006414:	e00a      	b.n	800642c <HAL_ADC_AnalogWDGConfig+0x4cc>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	089b      	lsrs	r3, r3, #2
 8006422:	f003 0304 	and.w	r3, r3, #4
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	fa02 f303 	lsl.w	r3, r2, r3
 800642c:	643b      	str	r3, [r7, #64]	; 0x40
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800642e:	4b52      	ldr	r3, [pc, #328]	; (8006578 <HAL_ADC_AnalogWDGConfig+0x618>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800643a:	d10b      	bne.n	8006454 <HAL_ADC_AnalogWDGConfig+0x4f4>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	695a      	ldr	r2, [r3, #20]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	089b      	lsrs	r3, r3, #2
 8006448:	f003 0307 	and.w	r3, r3, #7
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	fa02 f303 	lsl.w	r3, r2, r3
 8006452:	e01d      	b.n	8006490 <HAL_ADC_AnalogWDGConfig+0x530>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f003 0310 	and.w	r3, r3, #16
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10b      	bne.n	800647a <HAL_ADC_AnalogWDGConfig+0x51a>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	695a      	ldr	r2, [r3, #20]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	089b      	lsrs	r3, r3, #2
 800646e:	f003 0307 	and.w	r3, r3, #7
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	fa02 f303 	lsl.w	r3, r2, r3
 8006478:	e00a      	b.n	8006490 <HAL_ADC_AnalogWDGConfig+0x530>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	695a      	ldr	r2, [r3, #20]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	089b      	lsrs	r3, r3, #2
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	fa02 f303 	lsl.w	r3, r2, r3
 8006490:	63fb      	str	r3, [r7, #60]	; 0x3c
          MODIFY_REG(hadc->Instance->LTR3_RES10,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
          MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
        }
      }
#else
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a37      	ldr	r2, [pc, #220]	; (8006574 <HAL_ADC_AnalogWDGConfig+0x614>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d118      	bne.n	80064ce <HAL_ADC_AnalogWDGConfig+0x56e>
      {
        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80064a4:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064ae:	430a      	orrs	r2, r1
 80064b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80064bc:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064c6:	430a      	orrs	r2, r1
 80064c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80064cc:	e017      	b.n	80064fe <HAL_ADC_AnalogWDGConfig+0x59e>
      }
      else
      {
        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80064d6:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064e0:	430a      	orrs	r2, r1
 80064e2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80064ee:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064f8:	430a      	orrs	r2, r1
 80064fa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
      }

#endif
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1c      	ldr	r2, [pc, #112]	; (8006574 <HAL_ADC_AnalogWDGConfig+0x614>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d11a      	bne.n	800653e <HAL_ADC_AnalogWDGConfig+0x5de>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4618      	mov	r0, r3
 800651a:	f7fe fb98 	bl	8004c4e <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	7b1b      	ldrb	r3, [r3, #12]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d105      	bne.n	8006532 <HAL_ADC_AnalogWDGConfig+0x5d2>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe fbbb 	bl	8004ca6 <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006530:	e02d      	b.n	800658e <HAL_ADC_AnalogWDGConfig+0x62e>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4618      	mov	r0, r3
 8006538:	f7fe fbe5 	bl	8004d06 <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800653c:	e027      	b.n	800658e <HAL_ADC_AnalogWDGConfig+0x62e>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006542:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4618      	mov	r0, r3
 8006550:	f7fe fb8b 	bl	8004c6a <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	7b1b      	ldrb	r3, [r3, #12]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d105      	bne.n	8006568 <HAL_ADC_AnalogWDGConfig+0x608>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4618      	mov	r0, r3
 8006562:	f7fe fbb0 	bl	8004cc6 <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006566:	e012      	b.n	800658e <HAL_ADC_AnalogWDGConfig+0x62e>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4618      	mov	r0, r3
 800656e:	f7fe fbda 	bl	8004d26 <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006572:	e00c      	b.n	800658e <HAL_ADC_AnalogWDGConfig+0x62e>
 8006574:	001fffff 	.word	0x001fffff
 8006578:	5c001000 	.word	0x5c001000
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006580:	f043 0220 	orr.w	r2, r3, #32
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006596:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800659a:	4618      	mov	r0, r3
 800659c:	3750      	adds	r7, #80	; 0x50
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop

080065a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fe faf1 	bl	8004b98 <LL_ADC_IsEnabled>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d16e      	bne.n	800669a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	4b38      	ldr	r3, [pc, #224]	; (80066a4 <ADC_Enable+0x100>)
 80065c4:	4013      	ands	r3, r2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00d      	beq.n	80065e6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ce:	f043 0210 	orr.w	r2, r3, #16
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065da:	f043 0201 	orr.w	r2, r3, #1
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e05a      	b.n	800669c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fe fac0 	bl	8004b70 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80065f0:	f7fe f8c0 	bl	8004774 <HAL_GetTick>
 80065f4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a2b      	ldr	r2, [pc, #172]	; (80066a8 <ADC_Enable+0x104>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d004      	beq.n	800660a <ADC_Enable+0x66>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a29      	ldr	r2, [pc, #164]	; (80066ac <ADC_Enable+0x108>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d101      	bne.n	800660e <ADC_Enable+0x6a>
 800660a:	4b29      	ldr	r3, [pc, #164]	; (80066b0 <ADC_Enable+0x10c>)
 800660c:	e000      	b.n	8006610 <ADC_Enable+0x6c>
 800660e:	4b29      	ldr	r3, [pc, #164]	; (80066b4 <ADC_Enable+0x110>)
 8006610:	4618      	mov	r0, r3
 8006612:	f7fe fa43 	bl	8004a9c <LL_ADC_GetMultimode>
 8006616:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a23      	ldr	r2, [pc, #140]	; (80066ac <ADC_Enable+0x108>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d002      	beq.n	8006628 <ADC_Enable+0x84>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	e000      	b.n	800662a <ADC_Enable+0x86>
 8006628:	4b1f      	ldr	r3, [pc, #124]	; (80066a8 <ADC_Enable+0x104>)
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6812      	ldr	r2, [r2, #0]
 800662e:	4293      	cmp	r3, r2
 8006630:	d02c      	beq.n	800668c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d130      	bne.n	800669a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006638:	e028      	b.n	800668c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f7fe faaa 	bl	8004b98 <LL_ADC_IsEnabled>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d104      	bne.n	8006654 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4618      	mov	r0, r3
 8006650:	f7fe fa8e 	bl	8004b70 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006654:	f7fe f88e 	bl	8004774 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b02      	cmp	r3, #2
 8006660:	d914      	bls.n	800668c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b01      	cmp	r3, #1
 800666e:	d00d      	beq.n	800668c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006674:	f043 0210 	orr.w	r2, r3, #16
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006680:	f043 0201 	orr.w	r2, r3, #1
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e007      	b.n	800669c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b01      	cmp	r3, #1
 8006698:	d1cf      	bne.n	800663a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	8000003f 	.word	0x8000003f
 80066a8:	40022000 	.word	0x40022000
 80066ac:	40022100 	.word	0x40022100
 80066b0:	40022300 	.word	0x40022300
 80066b4:	58026300 	.word	0x58026300

080066b8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a79      	ldr	r2, [pc, #484]	; (80068ac <ADC_ConfigureBoostMode+0x1f4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d004      	beq.n	80066d4 <ADC_ConfigureBoostMode+0x1c>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a78      	ldr	r2, [pc, #480]	; (80068b0 <ADC_ConfigureBoostMode+0x1f8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d109      	bne.n	80066e8 <ADC_ConfigureBoostMode+0x30>
 80066d4:	4b77      	ldr	r3, [pc, #476]	; (80068b4 <ADC_ConfigureBoostMode+0x1fc>)
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	bf14      	ite	ne
 80066e0:	2301      	movne	r3, #1
 80066e2:	2300      	moveq	r3, #0
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	e008      	b.n	80066fa <ADC_ConfigureBoostMode+0x42>
 80066e8:	4b73      	ldr	r3, [pc, #460]	; (80068b8 <ADC_ConfigureBoostMode+0x200>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	bf14      	ite	ne
 80066f4:	2301      	movne	r3, #1
 80066f6:	2300      	moveq	r3, #0
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d01c      	beq.n	8006738 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80066fe:	f002 f8ed 	bl	80088dc <HAL_RCC_GetHCLKFreq>
 8006702:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800670c:	d010      	beq.n	8006730 <ADC_ConfigureBoostMode+0x78>
 800670e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006712:	d871      	bhi.n	80067f8 <ADC_ConfigureBoostMode+0x140>
 8006714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006718:	d002      	beq.n	8006720 <ADC_ConfigureBoostMode+0x68>
 800671a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800671e:	d16b      	bne.n	80067f8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	0c1b      	lsrs	r3, r3, #16
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	fbb2 f3f3 	udiv	r3, r2, r3
 800672c:	60fb      	str	r3, [r7, #12]
        break;
 800672e:	e066      	b.n	80067fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	089b      	lsrs	r3, r3, #2
 8006734:	60fb      	str	r3, [r7, #12]
        break;
 8006736:	e062      	b.n	80067fe <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006738:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800673c:	f003 f8b2 	bl	80098a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006740:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800674a:	d051      	beq.n	80067f0 <ADC_ConfigureBoostMode+0x138>
 800674c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006750:	d854      	bhi.n	80067fc <ADC_ConfigureBoostMode+0x144>
 8006752:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006756:	d047      	beq.n	80067e8 <ADC_ConfigureBoostMode+0x130>
 8006758:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800675c:	d84e      	bhi.n	80067fc <ADC_ConfigureBoostMode+0x144>
 800675e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006762:	d03d      	beq.n	80067e0 <ADC_ConfigureBoostMode+0x128>
 8006764:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006768:	d848      	bhi.n	80067fc <ADC_ConfigureBoostMode+0x144>
 800676a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800676e:	d033      	beq.n	80067d8 <ADC_ConfigureBoostMode+0x120>
 8006770:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006774:	d842      	bhi.n	80067fc <ADC_ConfigureBoostMode+0x144>
 8006776:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800677a:	d029      	beq.n	80067d0 <ADC_ConfigureBoostMode+0x118>
 800677c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006780:	d83c      	bhi.n	80067fc <ADC_ConfigureBoostMode+0x144>
 8006782:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006786:	d01a      	beq.n	80067be <ADC_ConfigureBoostMode+0x106>
 8006788:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800678c:	d836      	bhi.n	80067fc <ADC_ConfigureBoostMode+0x144>
 800678e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006792:	d014      	beq.n	80067be <ADC_ConfigureBoostMode+0x106>
 8006794:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006798:	d830      	bhi.n	80067fc <ADC_ConfigureBoostMode+0x144>
 800679a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800679e:	d00e      	beq.n	80067be <ADC_ConfigureBoostMode+0x106>
 80067a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067a4:	d82a      	bhi.n	80067fc <ADC_ConfigureBoostMode+0x144>
 80067a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80067aa:	d008      	beq.n	80067be <ADC_ConfigureBoostMode+0x106>
 80067ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80067b0:	d824      	bhi.n	80067fc <ADC_ConfigureBoostMode+0x144>
 80067b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067b6:	d002      	beq.n	80067be <ADC_ConfigureBoostMode+0x106>
 80067b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80067bc:	d11e      	bne.n	80067fc <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	0c9b      	lsrs	r3, r3, #18
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067cc:	60fb      	str	r3, [r7, #12]
        break;
 80067ce:	e016      	b.n	80067fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	091b      	lsrs	r3, r3, #4
 80067d4:	60fb      	str	r3, [r7, #12]
        break;
 80067d6:	e012      	b.n	80067fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	095b      	lsrs	r3, r3, #5
 80067dc:	60fb      	str	r3, [r7, #12]
        break;
 80067de:	e00e      	b.n	80067fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	099b      	lsrs	r3, r3, #6
 80067e4:	60fb      	str	r3, [r7, #12]
        break;
 80067e6:	e00a      	b.n	80067fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	09db      	lsrs	r3, r3, #7
 80067ec:	60fb      	str	r3, [r7, #12]
        break;
 80067ee:	e006      	b.n	80067fe <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	0a1b      	lsrs	r3, r3, #8
 80067f4:	60fb      	str	r3, [r7, #12]
        break;
 80067f6:	e002      	b.n	80067fe <ADC_ConfigureBoostMode+0x146>
        break;
 80067f8:	bf00      	nop
 80067fa:	e000      	b.n	80067fe <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80067fc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80067fe:	f7fd ffe9 	bl	80047d4 <HAL_GetREVID>
 8006802:	4603      	mov	r3, r0
 8006804:	f241 0203 	movw	r2, #4099	; 0x1003
 8006808:	4293      	cmp	r3, r2
 800680a:	d815      	bhi.n	8006838 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4a2b      	ldr	r2, [pc, #172]	; (80068bc <ADC_ConfigureBoostMode+0x204>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d908      	bls.n	8006826 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689a      	ldr	r2, [r3, #8]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006822:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006824:	e03e      	b.n	80068a4 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689a      	ldr	r2, [r3, #8]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006834:	609a      	str	r2, [r3, #8]
}
 8006836:	e035      	b.n	80068a4 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	085b      	lsrs	r3, r3, #1
 800683c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	4a1f      	ldr	r2, [pc, #124]	; (80068c0 <ADC_ConfigureBoostMode+0x208>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d808      	bhi.n	8006858 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006854:	609a      	str	r2, [r3, #8]
}
 8006856:	e025      	b.n	80068a4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4a1a      	ldr	r2, [pc, #104]	; (80068c4 <ADC_ConfigureBoostMode+0x20c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d80a      	bhi.n	8006876 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006872:	609a      	str	r2, [r3, #8]
}
 8006874:	e016      	b.n	80068a4 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4a13      	ldr	r2, [pc, #76]	; (80068c8 <ADC_ConfigureBoostMode+0x210>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d80a      	bhi.n	8006894 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006890:	609a      	str	r2, [r3, #8]
}
 8006892:	e007      	b.n	80068a4 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80068a2:	609a      	str	r2, [r3, #8]
}
 80068a4:	bf00      	nop
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	40022000 	.word	0x40022000
 80068b0:	40022100 	.word	0x40022100
 80068b4:	40022300 	.word	0x40022300
 80068b8:	58026300 	.word	0x58026300
 80068bc:	01312d00 	.word	0x01312d00
 80068c0:	005f5e10 	.word	0x005f5e10
 80068c4:	00bebc20 	.word	0x00bebc20
 80068c8:	017d7840 	.word	0x017d7840

080068cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f003 0307 	and.w	r3, r3, #7
 800693e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006940:	4b0b      	ldr	r3, [pc, #44]	; (8006970 <__NVIC_SetPriorityGrouping+0x40>)
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800694c:	4013      	ands	r3, r2
 800694e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006958:	4b06      	ldr	r3, [pc, #24]	; (8006974 <__NVIC_SetPriorityGrouping+0x44>)
 800695a:	4313      	orrs	r3, r2
 800695c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800695e:	4a04      	ldr	r2, [pc, #16]	; (8006970 <__NVIC_SetPriorityGrouping+0x40>)
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	60d3      	str	r3, [r2, #12]
}
 8006964:	bf00      	nop
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	e000ed00 	.word	0xe000ed00
 8006974:	05fa0000 	.word	0x05fa0000

08006978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800697c:	4b04      	ldr	r3, [pc, #16]	; (8006990 <__NVIC_GetPriorityGrouping+0x18>)
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	0a1b      	lsrs	r3, r3, #8
 8006982:	f003 0307 	and.w	r3, r3, #7
}
 8006986:	4618      	mov	r0, r3
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	e000ed00 	.word	0xe000ed00

08006994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	4603      	mov	r3, r0
 800699c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800699e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	db0b      	blt.n	80069be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069a6:	88fb      	ldrh	r3, [r7, #6]
 80069a8:	f003 021f 	and.w	r2, r3, #31
 80069ac:	4907      	ldr	r1, [pc, #28]	; (80069cc <__NVIC_EnableIRQ+0x38>)
 80069ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069b2:	095b      	lsrs	r3, r3, #5
 80069b4:	2001      	movs	r0, #1
 80069b6:	fa00 f202 	lsl.w	r2, r0, r2
 80069ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80069be:	bf00      	nop
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	e000e100 	.word	0xe000e100

080069d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	4603      	mov	r3, r0
 80069d8:	6039      	str	r1, [r7, #0]
 80069da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80069dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	db0a      	blt.n	80069fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	490c      	ldr	r1, [pc, #48]	; (8006a1c <__NVIC_SetPriority+0x4c>)
 80069ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069ee:	0112      	lsls	r2, r2, #4
 80069f0:	b2d2      	uxtb	r2, r2
 80069f2:	440b      	add	r3, r1
 80069f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80069f8:	e00a      	b.n	8006a10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	4908      	ldr	r1, [pc, #32]	; (8006a20 <__NVIC_SetPriority+0x50>)
 8006a00:	88fb      	ldrh	r3, [r7, #6]
 8006a02:	f003 030f 	and.w	r3, r3, #15
 8006a06:	3b04      	subs	r3, #4
 8006a08:	0112      	lsls	r2, r2, #4
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	440b      	add	r3, r1
 8006a0e:	761a      	strb	r2, [r3, #24]
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	e000e100 	.word	0xe000e100
 8006a20:	e000ed00 	.word	0xe000ed00

08006a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b089      	sub	sp, #36	; 0x24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f003 0307 	and.w	r3, r3, #7
 8006a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	f1c3 0307 	rsb	r3, r3, #7
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	bf28      	it	cs
 8006a42:	2304      	movcs	r3, #4
 8006a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	3304      	adds	r3, #4
 8006a4a:	2b06      	cmp	r3, #6
 8006a4c:	d902      	bls.n	8006a54 <NVIC_EncodePriority+0x30>
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	3b03      	subs	r3, #3
 8006a52:	e000      	b.n	8006a56 <NVIC_EncodePriority+0x32>
 8006a54:	2300      	movs	r3, #0
 8006a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a58:	f04f 32ff 	mov.w	r2, #4294967295
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a62:	43da      	mvns	r2, r3
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	401a      	ands	r2, r3
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	fa01 f303 	lsl.w	r3, r1, r3
 8006a76:	43d9      	mvns	r1, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a7c:	4313      	orrs	r3, r2
         );
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3724      	adds	r7, #36	; 0x24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b082      	sub	sp, #8
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7ff ff4c 	bl	8006930 <__NVIC_SetPriorityGrouping>
}
 8006a98:	bf00      	nop
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006aae:	f7ff ff63 	bl	8006978 <__NVIC_GetPriorityGrouping>
 8006ab2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	68b9      	ldr	r1, [r7, #8]
 8006ab8:	6978      	ldr	r0, [r7, #20]
 8006aba:	f7ff ffb3 	bl	8006a24 <NVIC_EncodePriority>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7ff ff82 	bl	80069d0 <__NVIC_SetPriority>
}
 8006acc:	bf00      	nop
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	4603      	mov	r3, r0
 8006adc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7ff ff56 	bl	8006994 <__NVIC_EnableIRQ>
}
 8006ae8:	bf00      	nop
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e054      	b.n	8006bac <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	7f5b      	ldrb	r3, [r3, #29]
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d105      	bne.n	8006b18 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7f9 feb4 	bl	8000880 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	791b      	ldrb	r3, [r3, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10c      	bne.n	8006b40 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a22      	ldr	r2, [pc, #136]	; (8006bb4 <HAL_CRC_Init+0xc4>)
 8006b2c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 0218 	bic.w	r2, r2, #24
 8006b3c:	609a      	str	r2, [r3, #8]
 8006b3e:	e00c      	b.n	8006b5a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6899      	ldr	r1, [r3, #8]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f834 	bl	8006bb8 <HAL_CRCEx_Polynomial_Set>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e028      	b.n	8006bac <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	795b      	ldrb	r3, [r3, #5]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d105      	bne.n	8006b6e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f04f 32ff 	mov.w	r2, #4294967295
 8006b6a:	611a      	str	r2, [r3, #16]
 8006b6c:	e004      	b.n	8006b78 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	6912      	ldr	r2, [r2, #16]
 8006b76:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	695a      	ldr	r2, [r3, #20]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	699a      	ldr	r2, [r3, #24]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	04c11db7 	.word	0x04c11db7

08006bb8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006bc8:	231f      	movs	r3, #31
 8006bca:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006bcc:	bf00      	nop
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1e5a      	subs	r2, r3, #1
 8006bd2:	613a      	str	r2, [r7, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d009      	beq.n	8006bec <HAL_CRCEx_Polynomial_Set+0x34>
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	f003 031f 	and.w	r3, r3, #31
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	fa22 f303 	lsr.w	r3, r2, r3
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0f0      	beq.n	8006bce <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b18      	cmp	r3, #24
 8006bf0:	d846      	bhi.n	8006c80 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006bf2:	a201      	add	r2, pc, #4	; (adr r2, 8006bf8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8006bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf8:	08006c87 	.word	0x08006c87
 8006bfc:	08006c81 	.word	0x08006c81
 8006c00:	08006c81 	.word	0x08006c81
 8006c04:	08006c81 	.word	0x08006c81
 8006c08:	08006c81 	.word	0x08006c81
 8006c0c:	08006c81 	.word	0x08006c81
 8006c10:	08006c81 	.word	0x08006c81
 8006c14:	08006c81 	.word	0x08006c81
 8006c18:	08006c75 	.word	0x08006c75
 8006c1c:	08006c81 	.word	0x08006c81
 8006c20:	08006c81 	.word	0x08006c81
 8006c24:	08006c81 	.word	0x08006c81
 8006c28:	08006c81 	.word	0x08006c81
 8006c2c:	08006c81 	.word	0x08006c81
 8006c30:	08006c81 	.word	0x08006c81
 8006c34:	08006c81 	.word	0x08006c81
 8006c38:	08006c69 	.word	0x08006c69
 8006c3c:	08006c81 	.word	0x08006c81
 8006c40:	08006c81 	.word	0x08006c81
 8006c44:	08006c81 	.word	0x08006c81
 8006c48:	08006c81 	.word	0x08006c81
 8006c4c:	08006c81 	.word	0x08006c81
 8006c50:	08006c81 	.word	0x08006c81
 8006c54:	08006c81 	.word	0x08006c81
 8006c58:	08006c5d 	.word	0x08006c5d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	2b06      	cmp	r3, #6
 8006c60:	d913      	bls.n	8006c8a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c66:	e010      	b.n	8006c8a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	2b07      	cmp	r3, #7
 8006c6c:	d90f      	bls.n	8006c8e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c72:	e00c      	b.n	8006c8e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	2b0f      	cmp	r3, #15
 8006c78:	d90b      	bls.n	8006c92 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c7e:	e008      	b.n	8006c92 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	75fb      	strb	r3, [r7, #23]
      break;
 8006c84:	e006      	b.n	8006c94 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c86:	bf00      	nop
 8006c88:	e004      	b.n	8006c94 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c8a:	bf00      	nop
 8006c8c:	e002      	b.n	8006c94 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c8e:	bf00      	nop
 8006c90:	e000      	b.n	8006c94 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c92:	bf00      	nop
  }
  if (status == HAL_OK)
 8006c94:	7dfb      	ldrb	r3, [r7, #23]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10d      	bne.n	8006cb6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f023 0118 	bic.w	r1, r3, #24
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	371c      	adds	r7, #28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e04f      	b.n	8006d76 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d106      	bne.n	8006cf0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7f9 fe24 	bl	8000938 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4b20      	ldr	r3, [pc, #128]	; (8006d80 <HAL_DMA2D_Init+0xbc>)
 8006d00:	4013      	ands	r3, r2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	6851      	ldr	r1, [r2, #4]
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	69d2      	ldr	r2, [r2, #28]
 8006d0a:	4311      	orrs	r1, r2
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	6812      	ldr	r2, [r2, #0]
 8006d10:	430b      	orrs	r3, r1
 8006d12:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d1a:	4b1a      	ldr	r3, [pc, #104]	; (8006d84 <HAL_DMA2D_Init+0xc0>)
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	6891      	ldr	r1, [r2, #8]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	6992      	ldr	r2, [r2, #24]
 8006d26:	4311      	orrs	r1, r2
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	6812      	ldr	r2, [r2, #0]
 8006d2c:	430b      	orrs	r3, r1
 8006d2e:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d36:	4b14      	ldr	r3, [pc, #80]	; (8006d88 <HAL_DMA2D_Init+0xc4>)
 8006d38:	4013      	ands	r3, r2
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	68d1      	ldr	r1, [r2, #12]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6812      	ldr	r2, [r2, #0]
 8006d42:	430b      	orrs	r3, r1
 8006d44:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d4c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	051a      	lsls	r2, r3, #20
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	055b      	lsls	r3, r3, #21
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	fff8ffbf 	.word	0xfff8ffbf
 8006d84:	fffffef8 	.word	0xfffffef8
 8006d88:	ffff0000 	.word	0xffff0000

08006d8c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b087      	sub	sp, #28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d101      	bne.n	8006db0 <HAL_DMA2D_ConfigLayer+0x24>
 8006dac:	2302      	movs	r3, #2
 8006dae:	e092      	b.n	8006ed6 <HAL_DMA2D_ConfigLayer+0x14a>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	00db      	lsls	r3, r3, #3
 8006dc6:	1a9b      	subs	r3, r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	3328      	adds	r3, #40	; 0x28
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	4413      	add	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	041b      	lsls	r3, r3, #16
 8006ddc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006de4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006dec:	4313      	orrs	r3, r2
 8006dee:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006df0:	4b3c      	ldr	r3, [pc, #240]	; (8006ee4 <HAL_DMA2D_ConfigLayer+0x158>)
 8006df2:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	2b0a      	cmp	r3, #10
 8006dfa:	d003      	beq.n	8006e04 <HAL_DMA2D_ConfigLayer+0x78>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	2b09      	cmp	r3, #9
 8006e02:	d107      	bne.n	8006e14 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	613b      	str	r3, [r7, #16]
 8006e12:	e005      	b.n	8006e20 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	061b      	lsls	r3, r3, #24
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d120      	bne.n	8006e68 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	43db      	mvns	r3, r3
 8006e30:	ea02 0103 	and.w	r1, r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	6812      	ldr	r2, [r2, #0]
 8006e46:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	2b0a      	cmp	r3, #10
 8006e4e:	d003      	beq.n	8006e58 <HAL_DMA2D_ConfigLayer+0xcc>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	2b09      	cmp	r3, #9
 8006e56:	d135      	bne.n	8006ec4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	68da      	ldr	r2, [r3, #12]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006e64:	629a      	str	r2, [r3, #40]	; 0x28
 8006e66:	e02d      	b.n	8006ec4 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	2b0b      	cmp	r3, #11
 8006e6e:	d109      	bne.n	8006e84 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	049b      	lsls	r3, r3, #18
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8006e82:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	69da      	ldr	r2, [r3, #28]
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	43db      	mvns	r3, r3
 8006e8e:	ea02 0103 	and.w	r1, r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	6812      	ldr	r2, [r2, #0]
 8006ea4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	2b0a      	cmp	r3, #10
 8006eac:	d003      	beq.n	8006eb6 <HAL_DMA2D_ConfigLayer+0x12a>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	2b09      	cmp	r3, #9
 8006eb4:	d106      	bne.n	8006ec4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	68da      	ldr	r2, [r3, #12]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006ec2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	ff33000f 	.word	0xff33000f

08006ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b089      	sub	sp, #36	; 0x24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006ef6:	4b89      	ldr	r3, [pc, #548]	; (800711c <HAL_GPIO_Init+0x234>)
 8006ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006efa:	e194      	b.n	8007226 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	2101      	movs	r1, #1
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	fa01 f303 	lsl.w	r3, r1, r3
 8006f08:	4013      	ands	r3, r2
 8006f0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 8186 	beq.w	8007220 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f003 0303 	and.w	r3, r3, #3
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d005      	beq.n	8006f2c <HAL_GPIO_Init+0x44>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f003 0303 	and.w	r3, r3, #3
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d130      	bne.n	8006f8e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	005b      	lsls	r3, r3, #1
 8006f36:	2203      	movs	r2, #3
 8006f38:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3c:	43db      	mvns	r3, r3
 8006f3e:	69ba      	ldr	r2, [r7, #24]
 8006f40:	4013      	ands	r3, r2
 8006f42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	69ba      	ldr	r2, [r7, #24]
 8006f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f62:	2201      	movs	r2, #1
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6a:	43db      	mvns	r3, r3
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	4013      	ands	r3, r2
 8006f70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	091b      	lsrs	r3, r3, #4
 8006f78:	f003 0201 	and.w	r2, r3, #1
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	69ba      	ldr	r2, [r7, #24]
 8006f8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f003 0303 	and.w	r3, r3, #3
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	d017      	beq.n	8006fca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	2203      	movs	r2, #3
 8006fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006faa:	43db      	mvns	r3, r3
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	4013      	ands	r3, r2
 8006fb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	689a      	ldr	r2, [r3, #8]
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	fa02 f303 	lsl.w	r3, r2, r3
 8006fbe:	69ba      	ldr	r2, [r7, #24]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	69ba      	ldr	r2, [r7, #24]
 8006fc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f003 0303 	and.w	r3, r3, #3
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d123      	bne.n	800701e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	08da      	lsrs	r2, r3, #3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	3208      	adds	r2, #8
 8006fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	220f      	movs	r2, #15
 8006fee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff2:	43db      	mvns	r3, r3
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	691a      	ldr	r2, [r3, #16]
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	f003 0307 	and.w	r3, r3, #7
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	fa02 f303 	lsl.w	r3, r2, r3
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	4313      	orrs	r3, r2
 800700e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	08da      	lsrs	r2, r3, #3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3208      	adds	r2, #8
 8007018:	69b9      	ldr	r1, [r7, #24]
 800701a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	005b      	lsls	r3, r3, #1
 8007028:	2203      	movs	r2, #3
 800702a:	fa02 f303 	lsl.w	r3, r2, r3
 800702e:	43db      	mvns	r3, r3
 8007030:	69ba      	ldr	r2, [r7, #24]
 8007032:	4013      	ands	r3, r2
 8007034:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f003 0203 	and.w	r2, r3, #3
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	005b      	lsls	r3, r3, #1
 8007042:	fa02 f303 	lsl.w	r3, r2, r3
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	4313      	orrs	r3, r2
 800704a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	69ba      	ldr	r2, [r7, #24]
 8007050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 80e0 	beq.w	8007220 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007060:	4b2f      	ldr	r3, [pc, #188]	; (8007120 <HAL_GPIO_Init+0x238>)
 8007062:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007066:	4a2e      	ldr	r2, [pc, #184]	; (8007120 <HAL_GPIO_Init+0x238>)
 8007068:	f043 0302 	orr.w	r3, r3, #2
 800706c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007070:	4b2b      	ldr	r3, [pc, #172]	; (8007120 <HAL_GPIO_Init+0x238>)
 8007072:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800707e:	4a29      	ldr	r2, [pc, #164]	; (8007124 <HAL_GPIO_Init+0x23c>)
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	089b      	lsrs	r3, r3, #2
 8007084:	3302      	adds	r3, #2
 8007086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800708a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	f003 0303 	and.w	r3, r3, #3
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	220f      	movs	r2, #15
 8007096:	fa02 f303 	lsl.w	r3, r2, r3
 800709a:	43db      	mvns	r3, r3
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	4013      	ands	r3, r2
 80070a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a20      	ldr	r2, [pc, #128]	; (8007128 <HAL_GPIO_Init+0x240>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d052      	beq.n	8007150 <HAL_GPIO_Init+0x268>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a1f      	ldr	r2, [pc, #124]	; (800712c <HAL_GPIO_Init+0x244>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d031      	beq.n	8007116 <HAL_GPIO_Init+0x22e>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a1e      	ldr	r2, [pc, #120]	; (8007130 <HAL_GPIO_Init+0x248>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d02b      	beq.n	8007112 <HAL_GPIO_Init+0x22a>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a1d      	ldr	r2, [pc, #116]	; (8007134 <HAL_GPIO_Init+0x24c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d025      	beq.n	800710e <HAL_GPIO_Init+0x226>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a1c      	ldr	r2, [pc, #112]	; (8007138 <HAL_GPIO_Init+0x250>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d01f      	beq.n	800710a <HAL_GPIO_Init+0x222>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a1b      	ldr	r2, [pc, #108]	; (800713c <HAL_GPIO_Init+0x254>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d019      	beq.n	8007106 <HAL_GPIO_Init+0x21e>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a1a      	ldr	r2, [pc, #104]	; (8007140 <HAL_GPIO_Init+0x258>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d013      	beq.n	8007102 <HAL_GPIO_Init+0x21a>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a19      	ldr	r2, [pc, #100]	; (8007144 <HAL_GPIO_Init+0x25c>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d00d      	beq.n	80070fe <HAL_GPIO_Init+0x216>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a18      	ldr	r2, [pc, #96]	; (8007148 <HAL_GPIO_Init+0x260>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d007      	beq.n	80070fa <HAL_GPIO_Init+0x212>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a17      	ldr	r2, [pc, #92]	; (800714c <HAL_GPIO_Init+0x264>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d101      	bne.n	80070f6 <HAL_GPIO_Init+0x20e>
 80070f2:	2309      	movs	r3, #9
 80070f4:	e02d      	b.n	8007152 <HAL_GPIO_Init+0x26a>
 80070f6:	230a      	movs	r3, #10
 80070f8:	e02b      	b.n	8007152 <HAL_GPIO_Init+0x26a>
 80070fa:	2308      	movs	r3, #8
 80070fc:	e029      	b.n	8007152 <HAL_GPIO_Init+0x26a>
 80070fe:	2307      	movs	r3, #7
 8007100:	e027      	b.n	8007152 <HAL_GPIO_Init+0x26a>
 8007102:	2306      	movs	r3, #6
 8007104:	e025      	b.n	8007152 <HAL_GPIO_Init+0x26a>
 8007106:	2305      	movs	r3, #5
 8007108:	e023      	b.n	8007152 <HAL_GPIO_Init+0x26a>
 800710a:	2304      	movs	r3, #4
 800710c:	e021      	b.n	8007152 <HAL_GPIO_Init+0x26a>
 800710e:	2303      	movs	r3, #3
 8007110:	e01f      	b.n	8007152 <HAL_GPIO_Init+0x26a>
 8007112:	2302      	movs	r3, #2
 8007114:	e01d      	b.n	8007152 <HAL_GPIO_Init+0x26a>
 8007116:	2301      	movs	r3, #1
 8007118:	e01b      	b.n	8007152 <HAL_GPIO_Init+0x26a>
 800711a:	bf00      	nop
 800711c:	58000080 	.word	0x58000080
 8007120:	58024400 	.word	0x58024400
 8007124:	58000400 	.word	0x58000400
 8007128:	58020000 	.word	0x58020000
 800712c:	58020400 	.word	0x58020400
 8007130:	58020800 	.word	0x58020800
 8007134:	58020c00 	.word	0x58020c00
 8007138:	58021000 	.word	0x58021000
 800713c:	58021400 	.word	0x58021400
 8007140:	58021800 	.word	0x58021800
 8007144:	58021c00 	.word	0x58021c00
 8007148:	58022000 	.word	0x58022000
 800714c:	58022400 	.word	0x58022400
 8007150:	2300      	movs	r3, #0
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	f002 0203 	and.w	r2, r2, #3
 8007158:	0092      	lsls	r2, r2, #2
 800715a:	4093      	lsls	r3, r2
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	4313      	orrs	r3, r2
 8007160:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007162:	4938      	ldr	r1, [pc, #224]	; (8007244 <HAL_GPIO_Init+0x35c>)
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	089b      	lsrs	r3, r3, #2
 8007168:	3302      	adds	r3, #2
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	43db      	mvns	r3, r3
 800717c:	69ba      	ldr	r2, [r7, #24]
 800717e:	4013      	ands	r3, r2
 8007180:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	4313      	orrs	r3, r2
 8007194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007196:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800719e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	43db      	mvns	r3, r3
 80071aa:	69ba      	ldr	r2, [r7, #24]
 80071ac:	4013      	ands	r3, r2
 80071ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80071c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	43db      	mvns	r3, r3
 80071d6:	69ba      	ldr	r2, [r7, #24]
 80071d8:	4013      	ands	r3, r2
 80071da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	43db      	mvns	r3, r3
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	4013      	ands	r3, r2
 8007204:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d003      	beq.n	800721a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	4313      	orrs	r3, r2
 8007218:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	69ba      	ldr	r2, [r7, #24]
 800721e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	3301      	adds	r3, #1
 8007224:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	fa22 f303 	lsr.w	r3, r2, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	f47f ae63 	bne.w	8006efc <HAL_GPIO_Init+0x14>
  }
}
 8007236:	bf00      	nop
 8007238:	bf00      	nop
 800723a:	3724      	adds	r7, #36	; 0x24
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	58000400 	.word	0x58000400

08007248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	807b      	strh	r3, [r7, #2]
 8007254:	4613      	mov	r3, r2
 8007256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007258:	787b      	ldrb	r3, [r7, #1]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800725e:	887a      	ldrh	r2, [r7, #2]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007264:	e003      	b.n	800726e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007266:	887b      	ldrh	r3, [r7, #2]
 8007268:	041a      	lsls	r2, r3, #16
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	619a      	str	r2, [r3, #24]
}
 800726e:	bf00      	nop
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
	...

0800727c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e0bf      	b.n	800740e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d106      	bne.n	80072a8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fb ffaa 	bl	80031fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	699a      	ldr	r2, [r3, #24]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80072be:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6999      	ldr	r1, [r3, #24]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685a      	ldr	r2, [r3, #4]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072d4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6899      	ldr	r1, [r3, #8]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	4b4a      	ldr	r3, [pc, #296]	; (8007418 <HAL_LTDC_Init+0x19c>)
 80072f0:	400b      	ands	r3, r1
 80072f2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	041b      	lsls	r3, r3, #16
 80072fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6899      	ldr	r1, [r3, #8]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	699a      	ldr	r2, [r3, #24]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	431a      	orrs	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68d9      	ldr	r1, [r3, #12]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	4b3e      	ldr	r3, [pc, #248]	; (8007418 <HAL_LTDC_Init+0x19c>)
 800731e:	400b      	ands	r3, r1
 8007320:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	041b      	lsls	r3, r3, #16
 8007328:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68d9      	ldr	r1, [r3, #12]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a1a      	ldr	r2, [r3, #32]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	431a      	orrs	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	430a      	orrs	r2, r1
 800733e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6919      	ldr	r1, [r3, #16]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	4b33      	ldr	r3, [pc, #204]	; (8007418 <HAL_LTDC_Init+0x19c>)
 800734c:	400b      	ands	r3, r1
 800734e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	041b      	lsls	r3, r3, #16
 8007356:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6919      	ldr	r1, [r3, #16]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	431a      	orrs	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6959      	ldr	r1, [r3, #20]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	4b27      	ldr	r3, [pc, #156]	; (8007418 <HAL_LTDC_Init+0x19c>)
 800737a:	400b      	ands	r3, r1
 800737c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007382:	041b      	lsls	r3, r3, #16
 8007384:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6959      	ldr	r1, [r3, #20]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073a2:	021b      	lsls	r3, r3, #8
 80073a4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80073ac:	041b      	lsls	r3, r3, #16
 80073ae:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80073be:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	430a      	orrs	r2, r1
 80073da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f042 0206 	orr.w	r2, r2, #6
 80073ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	699a      	ldr	r2, [r3, #24]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f042 0201 	orr.w	r2, r2, #1
 80073fa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	f000f800 	.word	0xf000f800

0800741c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007432:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f003 0304 	and.w	r3, r3, #4
 800743a:	2b00      	cmp	r3, #0
 800743c:	d023      	beq.n	8007486 <HAL_LTDC_IRQHandler+0x6a>
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b00      	cmp	r3, #0
 8007446:	d01e      	beq.n	8007486 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 0204 	bic.w	r2, r2, #4
 8007456:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2204      	movs	r2, #4
 800745e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007466:	f043 0201 	orr.w	r2, r3, #1
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2204      	movs	r2, #4
 8007474:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f86f 	bl	8007564 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d023      	beq.n	80074d8 <HAL_LTDC_IRQHandler+0xbc>
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d01e      	beq.n	80074d8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0202 	bic.w	r2, r2, #2
 80074a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2202      	movs	r2, #2
 80074b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80074b8:	f043 0202 	orr.w	r2, r3, #2
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2204      	movs	r2, #4
 80074c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f846 	bl	8007564 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d01b      	beq.n	800751a <HAL_LTDC_IRQHandler+0xfe>
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	f003 0301 	and.w	r3, r3, #1
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d016      	beq.n	800751a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f022 0201 	bic.w	r2, r2, #1
 80074fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2201      	movs	r2, #1
 8007502:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f00e fd09 	bl	8015f2c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f003 0308 	and.w	r3, r3, #8
 8007520:	2b00      	cmp	r3, #0
 8007522:	d01b      	beq.n	800755c <HAL_LTDC_IRQHandler+0x140>
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f003 0308 	and.w	r3, r3, #8
 800752a:	2b00      	cmp	r3, #0
 800752c:	d016      	beq.n	800755c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 0208 	bic.w	r2, r2, #8
 800753c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2208      	movs	r2, #8
 8007544:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f80e 	bl	8007578 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800755c:	bf00      	nop
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800758c:	b5b0      	push	{r4, r5, r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d101      	bne.n	80075a6 <HAL_LTDC_ConfigLayer+0x1a>
 80075a2:	2302      	movs	r3, #2
 80075a4:	e02c      	b.n	8007600 <HAL_LTDC_ConfigLayer+0x74>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2202      	movs	r2, #2
 80075b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2134      	movs	r1, #52	; 0x34
 80075bc:	fb01 f303 	mul.w	r3, r1, r3
 80075c0:	4413      	add	r3, r2
 80075c2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	4614      	mov	r4, r2
 80075ca:	461d      	mov	r5, r3
 80075cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075d8:	682b      	ldr	r3, [r5, #0]
 80075da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	68b9      	ldr	r1, [r7, #8]
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 f849 	bl	8007678 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2201      	movs	r2, #1
 80075ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bdb0      	pop	{r4, r5, r7, pc}

08007608 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007618:	2b01      	cmp	r3, #1
 800761a:	d101      	bne.n	8007620 <HAL_LTDC_ProgramLineEvent+0x18>
 800761c:	2302      	movs	r3, #2
 800761e:	e023      	b.n	8007668 <HAL_LTDC_ProgramLineEvent+0x60>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2202      	movs	r2, #2
 800762c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f022 0201 	bic.w	r2, r2, #1
 800763e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8007640:	4a0c      	ldr	r2, [pc, #48]	; (8007674 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f042 0201 	orr.w	r2, r2, #1
 8007654:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	50001000 	.word	0x50001000

08007678 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007678:	b480      	push	{r7}
 800767a:	b089      	sub	sp, #36	; 0x24
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	0c1b      	lsrs	r3, r3, #16
 8007690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007694:	4413      	add	r3, r2
 8007696:	041b      	lsls	r3, r3, #16
 8007698:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	01db      	lsls	r3, r3, #7
 80076a4:	4413      	add	r3, r2
 80076a6:	3384      	adds	r3, #132	; 0x84
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	6812      	ldr	r2, [r2, #0]
 80076ae:	4611      	mov	r1, r2
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	01d2      	lsls	r2, r2, #7
 80076b4:	440a      	add	r2, r1
 80076b6:	3284      	adds	r2, #132	; 0x84
 80076b8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80076bc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	0c1b      	lsrs	r3, r3, #16
 80076ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076ce:	4413      	add	r3, r2
 80076d0:	1c5a      	adds	r2, r3, #1
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4619      	mov	r1, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	01db      	lsls	r3, r3, #7
 80076dc:	440b      	add	r3, r1
 80076de:	3384      	adds	r3, #132	; 0x84
 80076e0:	4619      	mov	r1, r3
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	68da      	ldr	r2, [r3, #12]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076f6:	4413      	add	r3, r2
 80076f8:	041b      	lsls	r3, r3, #16
 80076fa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	461a      	mov	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	01db      	lsls	r3, r3, #7
 8007706:	4413      	add	r3, r2
 8007708:	3384      	adds	r3, #132	; 0x84
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	6812      	ldr	r2, [r2, #0]
 8007710:	4611      	mov	r1, r2
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	01d2      	lsls	r2, r2, #7
 8007716:	440a      	add	r2, r1
 8007718:	3284      	adds	r2, #132	; 0x84
 800771a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800771e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	689a      	ldr	r2, [r3, #8]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800772e:	4413      	add	r3, r2
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4619      	mov	r1, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	01db      	lsls	r3, r3, #7
 800773c:	440b      	add	r3, r1
 800773e:	3384      	adds	r3, #132	; 0x84
 8007740:	4619      	mov	r1, r3
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	4313      	orrs	r3, r2
 8007746:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	461a      	mov	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	01db      	lsls	r3, r3, #7
 8007752:	4413      	add	r3, r2
 8007754:	3384      	adds	r3, #132	; 0x84
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	6812      	ldr	r2, [r2, #0]
 800775c:	4611      	mov	r1, r2
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	01d2      	lsls	r2, r2, #7
 8007762:	440a      	add	r2, r1
 8007764:	3284      	adds	r2, #132	; 0x84
 8007766:	f023 0307 	bic.w	r3, r3, #7
 800776a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	461a      	mov	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	01db      	lsls	r3, r3, #7
 8007776:	4413      	add	r3, r2
 8007778:	3384      	adds	r3, #132	; 0x84
 800777a:	461a      	mov	r2, r3
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007788:	021b      	lsls	r3, r3, #8
 800778a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007792:	041b      	lsls	r3, r3, #16
 8007794:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	061b      	lsls	r3, r3, #24
 800779c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	01db      	lsls	r3, r3, #7
 80077a8:	4413      	add	r3, r2
 80077aa:	3384      	adds	r3, #132	; 0x84
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	01db      	lsls	r3, r3, #7
 80077b8:	4413      	add	r3, r2
 80077ba:	3384      	adds	r3, #132	; 0x84
 80077bc:	461a      	mov	r2, r3
 80077be:	2300      	movs	r3, #0
 80077c0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80077c8:	461a      	mov	r2, r3
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	431a      	orrs	r2, r3
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	431a      	orrs	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4619      	mov	r1, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	01db      	lsls	r3, r3, #7
 80077dc:	440b      	add	r3, r1
 80077de:	3384      	adds	r3, #132	; 0x84
 80077e0:	4619      	mov	r1, r3
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	461a      	mov	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	01db      	lsls	r3, r3, #7
 80077f2:	4413      	add	r3, r2
 80077f4:	3384      	adds	r3, #132	; 0x84
 80077f6:	695b      	ldr	r3, [r3, #20]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	6812      	ldr	r2, [r2, #0]
 80077fc:	4611      	mov	r1, r2
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	01d2      	lsls	r2, r2, #7
 8007802:	440a      	add	r2, r1
 8007804:	3284      	adds	r2, #132	; 0x84
 8007806:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800780a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	461a      	mov	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	01db      	lsls	r3, r3, #7
 8007816:	4413      	add	r3, r2
 8007818:	3384      	adds	r3, #132	; 0x84
 800781a:	461a      	mov	r2, r3
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	01db      	lsls	r3, r3, #7
 800782c:	4413      	add	r3, r2
 800782e:	3384      	adds	r3, #132	; 0x84
 8007830:	69da      	ldr	r2, [r3, #28]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4619      	mov	r1, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	01db      	lsls	r3, r3, #7
 800783c:	440b      	add	r3, r1
 800783e:	3384      	adds	r3, #132	; 0x84
 8007840:	4619      	mov	r1, r3
 8007842:	4b58      	ldr	r3, [pc, #352]	; (80079a4 <LTDC_SetConfig+0x32c>)
 8007844:	4013      	ands	r3, r2
 8007846:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	69da      	ldr	r2, [r3, #28]
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	6a1b      	ldr	r3, [r3, #32]
 8007850:	68f9      	ldr	r1, [r7, #12]
 8007852:	6809      	ldr	r1, [r1, #0]
 8007854:	4608      	mov	r0, r1
 8007856:	6879      	ldr	r1, [r7, #4]
 8007858:	01c9      	lsls	r1, r1, #7
 800785a:	4401      	add	r1, r0
 800785c:	3184      	adds	r1, #132	; 0x84
 800785e:	4313      	orrs	r3, r2
 8007860:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	01db      	lsls	r3, r3, #7
 800786c:	4413      	add	r3, r2
 800786e:	3384      	adds	r3, #132	; 0x84
 8007870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	01db      	lsls	r3, r3, #7
 800787c:	4413      	add	r3, r2
 800787e:	3384      	adds	r3, #132	; 0x84
 8007880:	461a      	mov	r2, r3
 8007882:	2300      	movs	r3, #0
 8007884:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	461a      	mov	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	01db      	lsls	r3, r3, #7
 8007890:	4413      	add	r3, r2
 8007892:	3384      	adds	r3, #132	; 0x84
 8007894:	461a      	mov	r2, r3
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d102      	bne.n	80078aa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80078a4:	2304      	movs	r3, #4
 80078a6:	61fb      	str	r3, [r7, #28]
 80078a8:	e01b      	b.n	80078e2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d102      	bne.n	80078b8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80078b2:	2303      	movs	r3, #3
 80078b4:	61fb      	str	r3, [r7, #28]
 80078b6:	e014      	b.n	80078e2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d00b      	beq.n	80078d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d007      	beq.n	80078d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d003      	beq.n	80078d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80078d4:	2b07      	cmp	r3, #7
 80078d6:	d102      	bne.n	80078de <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80078d8:	2302      	movs	r3, #2
 80078da:	61fb      	str	r3, [r7, #28]
 80078dc:	e001      	b.n	80078e2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80078de:	2301      	movs	r3, #1
 80078e0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	01db      	lsls	r3, r3, #7
 80078ec:	4413      	add	r3, r2
 80078ee:	3384      	adds	r3, #132	; 0x84
 80078f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	6812      	ldr	r2, [r2, #0]
 80078f6:	4611      	mov	r1, r2
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	01d2      	lsls	r2, r2, #7
 80078fc:	440a      	add	r2, r1
 80078fe:	3284      	adds	r2, #132	; 0x84
 8007900:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007904:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790a:	69fa      	ldr	r2, [r7, #28]
 800790c:	fb02 f303 	mul.w	r3, r2, r3
 8007910:	041a      	lsls	r2, r3, #16
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	6859      	ldr	r1, [r3, #4]
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	1acb      	subs	r3, r1, r3
 800791c:	69f9      	ldr	r1, [r7, #28]
 800791e:	fb01 f303 	mul.w	r3, r1, r3
 8007922:	3307      	adds	r3, #7
 8007924:	68f9      	ldr	r1, [r7, #12]
 8007926:	6809      	ldr	r1, [r1, #0]
 8007928:	4608      	mov	r0, r1
 800792a:	6879      	ldr	r1, [r7, #4]
 800792c:	01c9      	lsls	r1, r1, #7
 800792e:	4401      	add	r1, r0
 8007930:	3184      	adds	r1, #132	; 0x84
 8007932:	4313      	orrs	r3, r2
 8007934:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	01db      	lsls	r3, r3, #7
 8007940:	4413      	add	r3, r2
 8007942:	3384      	adds	r3, #132	; 0x84
 8007944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4619      	mov	r1, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	01db      	lsls	r3, r3, #7
 8007950:	440b      	add	r3, r1
 8007952:	3384      	adds	r3, #132	; 0x84
 8007954:	4619      	mov	r1, r3
 8007956:	4b14      	ldr	r3, [pc, #80]	; (80079a8 <LTDC_SetConfig+0x330>)
 8007958:	4013      	ands	r3, r2
 800795a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	01db      	lsls	r3, r3, #7
 8007966:	4413      	add	r3, r2
 8007968:	3384      	adds	r3, #132	; 0x84
 800796a:	461a      	mov	r2, r3
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	01db      	lsls	r3, r3, #7
 800797c:	4413      	add	r3, r2
 800797e:	3384      	adds	r3, #132	; 0x84
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	6812      	ldr	r2, [r2, #0]
 8007986:	4611      	mov	r1, r2
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	01d2      	lsls	r2, r2, #7
 800798c:	440a      	add	r2, r1
 800798e:	3284      	adds	r2, #132	; 0x84
 8007990:	f043 0301 	orr.w	r3, r3, #1
 8007994:	6013      	str	r3, [r2, #0]
}
 8007996:	bf00      	nop
 8007998:	3724      	adds	r7, #36	; 0x24
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	fffff8f8 	.word	0xfffff8f8
 80079a8:	fffff800 	.word	0xfffff800

080079ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80079b4:	4b19      	ldr	r3, [pc, #100]	; (8007a1c <HAL_PWREx_ConfigSupply+0x70>)
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	f003 0304 	and.w	r3, r3, #4
 80079bc:	2b04      	cmp	r3, #4
 80079be:	d00a      	beq.n	80079d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80079c0:	4b16      	ldr	r3, [pc, #88]	; (8007a1c <HAL_PWREx_ConfigSupply+0x70>)
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	f003 0307 	and.w	r3, r3, #7
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d001      	beq.n	80079d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e01f      	b.n	8007a12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	e01d      	b.n	8007a12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80079d6:	4b11      	ldr	r3, [pc, #68]	; (8007a1c <HAL_PWREx_ConfigSupply+0x70>)
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	f023 0207 	bic.w	r2, r3, #7
 80079de:	490f      	ldr	r1, [pc, #60]	; (8007a1c <HAL_PWREx_ConfigSupply+0x70>)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80079e6:	f7fc fec5 	bl	8004774 <HAL_GetTick>
 80079ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80079ec:	e009      	b.n	8007a02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80079ee:	f7fc fec1 	bl	8004774 <HAL_GetTick>
 80079f2:	4602      	mov	r2, r0
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079fc:	d901      	bls.n	8007a02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e007      	b.n	8007a12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a02:	4b06      	ldr	r3, [pc, #24]	; (8007a1c <HAL_PWREx_ConfigSupply+0x70>)
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a0e:	d1ee      	bne.n	80079ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	58024800 	.word	0x58024800

08007a20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b08c      	sub	sp, #48	; 0x30
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d102      	bne.n	8007a34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	f000 bc1d 	b.w	800826e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 8087 	beq.w	8007b50 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a42:	4b99      	ldr	r3, [pc, #612]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a4c:	4b96      	ldr	r3, [pc, #600]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a50:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a54:	2b10      	cmp	r3, #16
 8007a56:	d007      	beq.n	8007a68 <HAL_RCC_OscConfig+0x48>
 8007a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5a:	2b18      	cmp	r3, #24
 8007a5c:	d110      	bne.n	8007a80 <HAL_RCC_OscConfig+0x60>
 8007a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a60:	f003 0303 	and.w	r3, r3, #3
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d10b      	bne.n	8007a80 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a68:	4b8f      	ldr	r3, [pc, #572]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d06c      	beq.n	8007b4e <HAL_RCC_OscConfig+0x12e>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d168      	bne.n	8007b4e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e3f6      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a88:	d106      	bne.n	8007a98 <HAL_RCC_OscConfig+0x78>
 8007a8a:	4b87      	ldr	r3, [pc, #540]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a86      	ldr	r2, [pc, #536]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a94:	6013      	str	r3, [r2, #0]
 8007a96:	e02e      	b.n	8007af6 <HAL_RCC_OscConfig+0xd6>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10c      	bne.n	8007aba <HAL_RCC_OscConfig+0x9a>
 8007aa0:	4b81      	ldr	r3, [pc, #516]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a80      	ldr	r2, [pc, #512]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aaa:	6013      	str	r3, [r2, #0]
 8007aac:	4b7e      	ldr	r3, [pc, #504]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a7d      	ldr	r2, [pc, #500]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	e01d      	b.n	8007af6 <HAL_RCC_OscConfig+0xd6>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ac2:	d10c      	bne.n	8007ade <HAL_RCC_OscConfig+0xbe>
 8007ac4:	4b78      	ldr	r3, [pc, #480]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a77      	ldr	r2, [pc, #476]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007aca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ace:	6013      	str	r3, [r2, #0]
 8007ad0:	4b75      	ldr	r3, [pc, #468]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a74      	ldr	r2, [pc, #464]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ada:	6013      	str	r3, [r2, #0]
 8007adc:	e00b      	b.n	8007af6 <HAL_RCC_OscConfig+0xd6>
 8007ade:	4b72      	ldr	r3, [pc, #456]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a71      	ldr	r2, [pc, #452]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ae8:	6013      	str	r3, [r2, #0]
 8007aea:	4b6f      	ldr	r3, [pc, #444]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a6e      	ldr	r2, [pc, #440]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007af4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d013      	beq.n	8007b26 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007afe:	f7fc fe39 	bl	8004774 <HAL_GetTick>
 8007b02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b04:	e008      	b.n	8007b18 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b06:	f7fc fe35 	bl	8004774 <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	2b64      	cmp	r3, #100	; 0x64
 8007b12:	d901      	bls.n	8007b18 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e3aa      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b18:	4b63      	ldr	r3, [pc, #396]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d0f0      	beq.n	8007b06 <HAL_RCC_OscConfig+0xe6>
 8007b24:	e014      	b.n	8007b50 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b26:	f7fc fe25 	bl	8004774 <HAL_GetTick>
 8007b2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b2c:	e008      	b.n	8007b40 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b2e:	f7fc fe21 	bl	8004774 <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	2b64      	cmp	r3, #100	; 0x64
 8007b3a:	d901      	bls.n	8007b40 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e396      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b40:	4b59      	ldr	r3, [pc, #356]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1f0      	bne.n	8007b2e <HAL_RCC_OscConfig+0x10e>
 8007b4c:	e000      	b.n	8007b50 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b4e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 80cb 	beq.w	8007cf4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b5e:	4b52      	ldr	r3, [pc, #328]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b66:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b68:	4b4f      	ldr	r3, [pc, #316]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d007      	beq.n	8007b84 <HAL_RCC_OscConfig+0x164>
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	2b18      	cmp	r3, #24
 8007b78:	d156      	bne.n	8007c28 <HAL_RCC_OscConfig+0x208>
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	f003 0303 	and.w	r3, r3, #3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d151      	bne.n	8007c28 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b84:	4b48      	ldr	r3, [pc, #288]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0304 	and.w	r3, r3, #4
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d005      	beq.n	8007b9c <HAL_RCC_OscConfig+0x17c>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e368      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007b9c:	4b42      	ldr	r3, [pc, #264]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f023 0219 	bic.w	r2, r3, #25
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	493f      	ldr	r1, [pc, #252]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007bae:	f7fc fde1 	bl	8004774 <HAL_GetTick>
 8007bb2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bb4:	e008      	b.n	8007bc8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bb6:	f7fc fddd 	bl	8004774 <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d901      	bls.n	8007bc8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e352      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bc8:	4b37      	ldr	r3, [pc, #220]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0304 	and.w	r3, r3, #4
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0f0      	beq.n	8007bb6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bd4:	f7fc fdfe 	bl	80047d4 <HAL_GetREVID>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	f241 0203 	movw	r2, #4099	; 0x1003
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d817      	bhi.n	8007c12 <HAL_RCC_OscConfig+0x1f2>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	2b40      	cmp	r3, #64	; 0x40
 8007be8:	d108      	bne.n	8007bfc <HAL_RCC_OscConfig+0x1dc>
 8007bea:	4b2f      	ldr	r3, [pc, #188]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007bf2:	4a2d      	ldr	r2, [pc, #180]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bf8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bfa:	e07b      	b.n	8007cf4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bfc:	4b2a      	ldr	r3, [pc, #168]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	031b      	lsls	r3, r3, #12
 8007c0a:	4927      	ldr	r1, [pc, #156]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c10:	e070      	b.n	8007cf4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c12:	4b25      	ldr	r3, [pc, #148]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	061b      	lsls	r3, r3, #24
 8007c20:	4921      	ldr	r1, [pc, #132]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007c22:	4313      	orrs	r3, r2
 8007c24:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c26:	e065      	b.n	8007cf4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d048      	beq.n	8007cc2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c30:	4b1d      	ldr	r3, [pc, #116]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f023 0219 	bic.w	r2, r3, #25
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	491a      	ldr	r1, [pc, #104]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c42:	f7fc fd97 	bl	8004774 <HAL_GetTick>
 8007c46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c48:	e008      	b.n	8007c5c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c4a:	f7fc fd93 	bl	8004774 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d901      	bls.n	8007c5c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e308      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c5c:	4b12      	ldr	r3, [pc, #72]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0304 	and.w	r3, r3, #4
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d0f0      	beq.n	8007c4a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c68:	f7fc fdb4 	bl	80047d4 <HAL_GetREVID>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d81a      	bhi.n	8007cac <HAL_RCC_OscConfig+0x28c>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	2b40      	cmp	r3, #64	; 0x40
 8007c7c:	d108      	bne.n	8007c90 <HAL_RCC_OscConfig+0x270>
 8007c7e:	4b0a      	ldr	r3, [pc, #40]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007c86:	4a08      	ldr	r2, [pc, #32]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c8c:	6053      	str	r3, [r2, #4]
 8007c8e:	e031      	b.n	8007cf4 <HAL_RCC_OscConfig+0x2d4>
 8007c90:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	031b      	lsls	r3, r3, #12
 8007c9e:	4902      	ldr	r1, [pc, #8]	; (8007ca8 <HAL_RCC_OscConfig+0x288>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	604b      	str	r3, [r1, #4]
 8007ca4:	e026      	b.n	8007cf4 <HAL_RCC_OscConfig+0x2d4>
 8007ca6:	bf00      	nop
 8007ca8:	58024400 	.word	0x58024400
 8007cac:	4b9a      	ldr	r3, [pc, #616]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	061b      	lsls	r3, r3, #24
 8007cba:	4997      	ldr	r1, [pc, #604]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	604b      	str	r3, [r1, #4]
 8007cc0:	e018      	b.n	8007cf4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007cc2:	4b95      	ldr	r3, [pc, #596]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a94      	ldr	r2, [pc, #592]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007cc8:	f023 0301 	bic.w	r3, r3, #1
 8007ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cce:	f7fc fd51 	bl	8004774 <HAL_GetTick>
 8007cd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007cd4:	e008      	b.n	8007ce8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cd6:	f7fc fd4d 	bl	8004774 <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d901      	bls.n	8007ce8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e2c2      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ce8:	4b8b      	ldr	r3, [pc, #556]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0304 	and.w	r3, r3, #4
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1f0      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0310 	and.w	r3, r3, #16
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f000 80a9 	beq.w	8007e54 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d02:	4b85      	ldr	r3, [pc, #532]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d0c:	4b82      	ldr	r3, [pc, #520]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d10:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d007      	beq.n	8007d28 <HAL_RCC_OscConfig+0x308>
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	2b18      	cmp	r3, #24
 8007d1c:	d13a      	bne.n	8007d94 <HAL_RCC_OscConfig+0x374>
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f003 0303 	and.w	r3, r3, #3
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d135      	bne.n	8007d94 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d28:	4b7b      	ldr	r3, [pc, #492]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d005      	beq.n	8007d40 <HAL_RCC_OscConfig+0x320>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	2b80      	cmp	r3, #128	; 0x80
 8007d3a:	d001      	beq.n	8007d40 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e296      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d40:	f7fc fd48 	bl	80047d4 <HAL_GetREVID>
 8007d44:	4603      	mov	r3, r0
 8007d46:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d817      	bhi.n	8007d7e <HAL_RCC_OscConfig+0x35e>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	2b20      	cmp	r3, #32
 8007d54:	d108      	bne.n	8007d68 <HAL_RCC_OscConfig+0x348>
 8007d56:	4b70      	ldr	r3, [pc, #448]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007d5e:	4a6e      	ldr	r2, [pc, #440]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007d60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d64:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d66:	e075      	b.n	8007e54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d68:	4b6b      	ldr	r3, [pc, #428]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	069b      	lsls	r3, r3, #26
 8007d76:	4968      	ldr	r1, [pc, #416]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d7c:	e06a      	b.n	8007e54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d7e:	4b66      	ldr	r3, [pc, #408]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	061b      	lsls	r3, r3, #24
 8007d8c:	4962      	ldr	r1, [pc, #392]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d92:	e05f      	b.n	8007e54 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	69db      	ldr	r3, [r3, #28]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d042      	beq.n	8007e22 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007d9c:	4b5e      	ldr	r3, [pc, #376]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a5d      	ldr	r2, [pc, #372]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da8:	f7fc fce4 	bl	8004774 <HAL_GetTick>
 8007dac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007dae:	e008      	b.n	8007dc2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007db0:	f7fc fce0 	bl	8004774 <HAL_GetTick>
 8007db4:	4602      	mov	r2, r0
 8007db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d901      	bls.n	8007dc2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e255      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007dc2:	4b55      	ldr	r3, [pc, #340]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0f0      	beq.n	8007db0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007dce:	f7fc fd01 	bl	80047d4 <HAL_GetREVID>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d817      	bhi.n	8007e0c <HAL_RCC_OscConfig+0x3ec>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a1b      	ldr	r3, [r3, #32]
 8007de0:	2b20      	cmp	r3, #32
 8007de2:	d108      	bne.n	8007df6 <HAL_RCC_OscConfig+0x3d6>
 8007de4:	4b4c      	ldr	r3, [pc, #304]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007dec:	4a4a      	ldr	r2, [pc, #296]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007dee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007df2:	6053      	str	r3, [r2, #4]
 8007df4:	e02e      	b.n	8007e54 <HAL_RCC_OscConfig+0x434>
 8007df6:	4b48      	ldr	r3, [pc, #288]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	069b      	lsls	r3, r3, #26
 8007e04:	4944      	ldr	r1, [pc, #272]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	604b      	str	r3, [r1, #4]
 8007e0a:	e023      	b.n	8007e54 <HAL_RCC_OscConfig+0x434>
 8007e0c:	4b42      	ldr	r3, [pc, #264]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a1b      	ldr	r3, [r3, #32]
 8007e18:	061b      	lsls	r3, r3, #24
 8007e1a:	493f      	ldr	r1, [pc, #252]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	60cb      	str	r3, [r1, #12]
 8007e20:	e018      	b.n	8007e54 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007e22:	4b3d      	ldr	r3, [pc, #244]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a3c      	ldr	r2, [pc, #240]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e2e:	f7fc fca1 	bl	8004774 <HAL_GetTick>
 8007e32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e34:	e008      	b.n	8007e48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007e36:	f7fc fc9d 	bl	8004774 <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d901      	bls.n	8007e48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e212      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e48:	4b33      	ldr	r3, [pc, #204]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1f0      	bne.n	8007e36 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0308 	and.w	r3, r3, #8
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d036      	beq.n	8007ece <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	695b      	ldr	r3, [r3, #20]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d019      	beq.n	8007e9c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e68:	4b2b      	ldr	r3, [pc, #172]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e6c:	4a2a      	ldr	r2, [pc, #168]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007e6e:	f043 0301 	orr.w	r3, r3, #1
 8007e72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e74:	f7fc fc7e 	bl	8004774 <HAL_GetTick>
 8007e78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e7a:	e008      	b.n	8007e8e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e7c:	f7fc fc7a 	bl	8004774 <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d901      	bls.n	8007e8e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e1ef      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e8e:	4b22      	ldr	r3, [pc, #136]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e92:	f003 0302 	and.w	r3, r3, #2
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d0f0      	beq.n	8007e7c <HAL_RCC_OscConfig+0x45c>
 8007e9a:	e018      	b.n	8007ece <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e9c:	4b1e      	ldr	r3, [pc, #120]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ea0:	4a1d      	ldr	r2, [pc, #116]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007ea2:	f023 0301 	bic.w	r3, r3, #1
 8007ea6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ea8:	f7fc fc64 	bl	8004774 <HAL_GetTick>
 8007eac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007eae:	e008      	b.n	8007ec2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007eb0:	f7fc fc60 	bl	8004774 <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d901      	bls.n	8007ec2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e1d5      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ec2:	4b15      	ldr	r3, [pc, #84]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ec6:	f003 0302 	and.w	r3, r3, #2
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1f0      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0320 	and.w	r3, r3, #32
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d039      	beq.n	8007f4e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d01c      	beq.n	8007f1c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007ee2:	4b0d      	ldr	r3, [pc, #52]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a0c      	ldr	r2, [pc, #48]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007ee8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007eec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007eee:	f7fc fc41 	bl	8004774 <HAL_GetTick>
 8007ef2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ef4:	e008      	b.n	8007f08 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007ef6:	f7fc fc3d 	bl	8004774 <HAL_GetTick>
 8007efa:	4602      	mov	r2, r0
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d901      	bls.n	8007f08 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007f04:	2303      	movs	r3, #3
 8007f06:	e1b2      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f08:	4b03      	ldr	r3, [pc, #12]	; (8007f18 <HAL_RCC_OscConfig+0x4f8>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d0f0      	beq.n	8007ef6 <HAL_RCC_OscConfig+0x4d6>
 8007f14:	e01b      	b.n	8007f4e <HAL_RCC_OscConfig+0x52e>
 8007f16:	bf00      	nop
 8007f18:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007f1c:	4b9b      	ldr	r3, [pc, #620]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a9a      	ldr	r2, [pc, #616]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8007f22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f28:	f7fc fc24 	bl	8004774 <HAL_GetTick>
 8007f2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f2e:	e008      	b.n	8007f42 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007f30:	f7fc fc20 	bl	8004774 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d901      	bls.n	8007f42 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e195      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f42:	4b92      	ldr	r3, [pc, #584]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1f0      	bne.n	8007f30 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0304 	and.w	r3, r3, #4
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f000 8081 	beq.w	800805e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f5c:	4b8c      	ldr	r3, [pc, #560]	; (8008190 <HAL_RCC_OscConfig+0x770>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a8b      	ldr	r2, [pc, #556]	; (8008190 <HAL_RCC_OscConfig+0x770>)
 8007f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f68:	f7fc fc04 	bl	8004774 <HAL_GetTick>
 8007f6c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f6e:	e008      	b.n	8007f82 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007f70:	f7fc fc00 	bl	8004774 <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	2b64      	cmp	r3, #100	; 0x64
 8007f7c:	d901      	bls.n	8007f82 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e175      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f82:	4b83      	ldr	r3, [pc, #524]	; (8008190 <HAL_RCC_OscConfig+0x770>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d0f0      	beq.n	8007f70 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d106      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x584>
 8007f96:	4b7d      	ldr	r3, [pc, #500]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8007f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f9a:	4a7c      	ldr	r2, [pc, #496]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8007f9c:	f043 0301 	orr.w	r3, r3, #1
 8007fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8007fa2:	e02d      	b.n	8008000 <HAL_RCC_OscConfig+0x5e0>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10c      	bne.n	8007fc6 <HAL_RCC_OscConfig+0x5a6>
 8007fac:	4b77      	ldr	r3, [pc, #476]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8007fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb0:	4a76      	ldr	r2, [pc, #472]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8007fb2:	f023 0301 	bic.w	r3, r3, #1
 8007fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8007fb8:	4b74      	ldr	r3, [pc, #464]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8007fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fbc:	4a73      	ldr	r2, [pc, #460]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8007fbe:	f023 0304 	bic.w	r3, r3, #4
 8007fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8007fc4:	e01c      	b.n	8008000 <HAL_RCC_OscConfig+0x5e0>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	2b05      	cmp	r3, #5
 8007fcc:	d10c      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x5c8>
 8007fce:	4b6f      	ldr	r3, [pc, #444]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8007fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd2:	4a6e      	ldr	r2, [pc, #440]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8007fd4:	f043 0304 	orr.w	r3, r3, #4
 8007fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8007fda:	4b6c      	ldr	r3, [pc, #432]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8007fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fde:	4a6b      	ldr	r2, [pc, #428]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8007fe0:	f043 0301 	orr.w	r3, r3, #1
 8007fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8007fe6:	e00b      	b.n	8008000 <HAL_RCC_OscConfig+0x5e0>
 8007fe8:	4b68      	ldr	r3, [pc, #416]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8007fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fec:	4a67      	ldr	r2, [pc, #412]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8007fee:	f023 0301 	bic.w	r3, r3, #1
 8007ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ff4:	4b65      	ldr	r3, [pc, #404]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8007ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff8:	4a64      	ldr	r2, [pc, #400]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8007ffa:	f023 0304 	bic.w	r3, r3, #4
 8007ffe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d015      	beq.n	8008034 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008008:	f7fc fbb4 	bl	8004774 <HAL_GetTick>
 800800c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800800e:	e00a      	b.n	8008026 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008010:	f7fc fbb0 	bl	8004774 <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	f241 3288 	movw	r2, #5000	; 0x1388
 800801e:	4293      	cmp	r3, r2
 8008020:	d901      	bls.n	8008026 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e123      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008026:	4b59      	ldr	r3, [pc, #356]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8008028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b00      	cmp	r3, #0
 8008030:	d0ee      	beq.n	8008010 <HAL_RCC_OscConfig+0x5f0>
 8008032:	e014      	b.n	800805e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008034:	f7fc fb9e 	bl	8004774 <HAL_GetTick>
 8008038:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800803a:	e00a      	b.n	8008052 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800803c:	f7fc fb9a 	bl	8004774 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	f241 3288 	movw	r2, #5000	; 0x1388
 800804a:	4293      	cmp	r3, r2
 800804c:	d901      	bls.n	8008052 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e10d      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008052:	4b4e      	ldr	r3, [pc, #312]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8008054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008056:	f003 0302 	and.w	r3, r3, #2
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1ee      	bne.n	800803c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 8102 	beq.w	800826c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008068:	4b48      	ldr	r3, [pc, #288]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008070:	2b18      	cmp	r3, #24
 8008072:	f000 80bd 	beq.w	80081f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	2b02      	cmp	r3, #2
 800807c:	f040 809e 	bne.w	80081bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008080:	4b42      	ldr	r3, [pc, #264]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a41      	ldr	r2, [pc, #260]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8008086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800808a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800808c:	f7fc fb72 	bl	8004774 <HAL_GetTick>
 8008090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008092:	e008      	b.n	80080a6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008094:	f7fc fb6e 	bl	8004774 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d901      	bls.n	80080a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e0e3      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080a6:	4b39      	ldr	r3, [pc, #228]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1f0      	bne.n	8008094 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080b2:	4b36      	ldr	r3, [pc, #216]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 80080b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080b6:	4b37      	ldr	r3, [pc, #220]	; (8008194 <HAL_RCC_OscConfig+0x774>)
 80080b8:	4013      	ands	r3, r2
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80080c2:	0112      	lsls	r2, r2, #4
 80080c4:	430a      	orrs	r2, r1
 80080c6:	4931      	ldr	r1, [pc, #196]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	628b      	str	r3, [r1, #40]	; 0x28
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d0:	3b01      	subs	r3, #1
 80080d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080da:	3b01      	subs	r3, #1
 80080dc:	025b      	lsls	r3, r3, #9
 80080de:	b29b      	uxth	r3, r3
 80080e0:	431a      	orrs	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e6:	3b01      	subs	r3, #1
 80080e8:	041b      	lsls	r3, r3, #16
 80080ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80080ee:	431a      	orrs	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f4:	3b01      	subs	r3, #1
 80080f6:	061b      	lsls	r3, r3, #24
 80080f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80080fc:	4923      	ldr	r1, [pc, #140]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 80080fe:	4313      	orrs	r3, r2
 8008100:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008102:	4b22      	ldr	r3, [pc, #136]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8008104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008106:	4a21      	ldr	r2, [pc, #132]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8008108:	f023 0301 	bic.w	r3, r3, #1
 800810c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800810e:	4b1f      	ldr	r3, [pc, #124]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8008110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008112:	4b21      	ldr	r3, [pc, #132]	; (8008198 <HAL_RCC_OscConfig+0x778>)
 8008114:	4013      	ands	r3, r2
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800811a:	00d2      	lsls	r2, r2, #3
 800811c:	491b      	ldr	r1, [pc, #108]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 800811e:	4313      	orrs	r3, r2
 8008120:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008122:	4b1a      	ldr	r3, [pc, #104]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8008124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008126:	f023 020c 	bic.w	r2, r3, #12
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812e:	4917      	ldr	r1, [pc, #92]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8008130:	4313      	orrs	r3, r2
 8008132:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008134:	4b15      	ldr	r3, [pc, #84]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8008136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008138:	f023 0202 	bic.w	r2, r3, #2
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008140:	4912      	ldr	r1, [pc, #72]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8008142:	4313      	orrs	r3, r2
 8008144:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008146:	4b11      	ldr	r3, [pc, #68]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8008148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814a:	4a10      	ldr	r2, [pc, #64]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 800814c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008150:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008152:	4b0e      	ldr	r3, [pc, #56]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8008154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008156:	4a0d      	ldr	r2, [pc, #52]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8008158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800815c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800815e:	4b0b      	ldr	r3, [pc, #44]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8008160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008162:	4a0a      	ldr	r2, [pc, #40]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8008164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008168:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800816a:	4b08      	ldr	r3, [pc, #32]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 800816c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816e:	4a07      	ldr	r2, [pc, #28]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8008170:	f043 0301 	orr.w	r3, r3, #1
 8008174:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008176:	4b05      	ldr	r3, [pc, #20]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a04      	ldr	r2, [pc, #16]	; (800818c <HAL_RCC_OscConfig+0x76c>)
 800817c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008182:	f7fc faf7 	bl	8004774 <HAL_GetTick>
 8008186:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008188:	e011      	b.n	80081ae <HAL_RCC_OscConfig+0x78e>
 800818a:	bf00      	nop
 800818c:	58024400 	.word	0x58024400
 8008190:	58024800 	.word	0x58024800
 8008194:	fffffc0c 	.word	0xfffffc0c
 8008198:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800819c:	f7fc faea 	bl	8004774 <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d901      	bls.n	80081ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e05f      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081ae:	4b32      	ldr	r3, [pc, #200]	; (8008278 <HAL_RCC_OscConfig+0x858>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d0f0      	beq.n	800819c <HAL_RCC_OscConfig+0x77c>
 80081ba:	e057      	b.n	800826c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081bc:	4b2e      	ldr	r3, [pc, #184]	; (8008278 <HAL_RCC_OscConfig+0x858>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a2d      	ldr	r2, [pc, #180]	; (8008278 <HAL_RCC_OscConfig+0x858>)
 80081c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c8:	f7fc fad4 	bl	8004774 <HAL_GetTick>
 80081cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081ce:	e008      	b.n	80081e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081d0:	f7fc fad0 	bl	8004774 <HAL_GetTick>
 80081d4:	4602      	mov	r2, r0
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d901      	bls.n	80081e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e045      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081e2:	4b25      	ldr	r3, [pc, #148]	; (8008278 <HAL_RCC_OscConfig+0x858>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1f0      	bne.n	80081d0 <HAL_RCC_OscConfig+0x7b0>
 80081ee:	e03d      	b.n	800826c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80081f0:	4b21      	ldr	r3, [pc, #132]	; (8008278 <HAL_RCC_OscConfig+0x858>)
 80081f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80081f6:	4b20      	ldr	r3, [pc, #128]	; (8008278 <HAL_RCC_OscConfig+0x858>)
 80081f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008200:	2b01      	cmp	r3, #1
 8008202:	d031      	beq.n	8008268 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	f003 0203 	and.w	r2, r3, #3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800820e:	429a      	cmp	r2, r3
 8008210:	d12a      	bne.n	8008268 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	091b      	lsrs	r3, r3, #4
 8008216:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800821e:	429a      	cmp	r2, r3
 8008220:	d122      	bne.n	8008268 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800822e:	429a      	cmp	r2, r3
 8008230:	d11a      	bne.n	8008268 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	0a5b      	lsrs	r3, r3, #9
 8008236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800823e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008240:	429a      	cmp	r2, r3
 8008242:	d111      	bne.n	8008268 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	0c1b      	lsrs	r3, r3, #16
 8008248:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008250:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008252:	429a      	cmp	r2, r3
 8008254:	d108      	bne.n	8008268 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	0e1b      	lsrs	r3, r3, #24
 800825a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008262:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008264:	429a      	cmp	r2, r3
 8008266:	d001      	beq.n	800826c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e000      	b.n	800826e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3730      	adds	r7, #48	; 0x30
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	58024400 	.word	0x58024400

0800827c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d101      	bne.n	8008290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e19c      	b.n	80085ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008290:	4b8a      	ldr	r3, [pc, #552]	; (80084bc <HAL_RCC_ClockConfig+0x240>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 030f 	and.w	r3, r3, #15
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	429a      	cmp	r2, r3
 800829c:	d910      	bls.n	80082c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800829e:	4b87      	ldr	r3, [pc, #540]	; (80084bc <HAL_RCC_ClockConfig+0x240>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f023 020f 	bic.w	r2, r3, #15
 80082a6:	4985      	ldr	r1, [pc, #532]	; (80084bc <HAL_RCC_ClockConfig+0x240>)
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ae:	4b83      	ldr	r3, [pc, #524]	; (80084bc <HAL_RCC_ClockConfig+0x240>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 030f 	and.w	r3, r3, #15
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d001      	beq.n	80082c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e184      	b.n	80085ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0304 	and.w	r3, r3, #4
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d010      	beq.n	80082ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	691a      	ldr	r2, [r3, #16]
 80082d0:	4b7b      	ldr	r3, [pc, #492]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 80082d2:	699b      	ldr	r3, [r3, #24]
 80082d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082d8:	429a      	cmp	r2, r3
 80082da:	d908      	bls.n	80082ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80082dc:	4b78      	ldr	r3, [pc, #480]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	4975      	ldr	r1, [pc, #468]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 0308 	and.w	r3, r3, #8
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d010      	beq.n	800831c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	695a      	ldr	r2, [r3, #20]
 80082fe:	4b70      	ldr	r3, [pc, #448]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 8008300:	69db      	ldr	r3, [r3, #28]
 8008302:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008306:	429a      	cmp	r2, r3
 8008308:	d908      	bls.n	800831c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800830a:	4b6d      	ldr	r3, [pc, #436]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	496a      	ldr	r1, [pc, #424]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 8008318:	4313      	orrs	r3, r2
 800831a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 0310 	and.w	r3, r3, #16
 8008324:	2b00      	cmp	r3, #0
 8008326:	d010      	beq.n	800834a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	699a      	ldr	r2, [r3, #24]
 800832c:	4b64      	ldr	r3, [pc, #400]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 800832e:	69db      	ldr	r3, [r3, #28]
 8008330:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008334:	429a      	cmp	r2, r3
 8008336:	d908      	bls.n	800834a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008338:	4b61      	ldr	r3, [pc, #388]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 800833a:	69db      	ldr	r3, [r3, #28]
 800833c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	495e      	ldr	r1, [pc, #376]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 8008346:	4313      	orrs	r3, r2
 8008348:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0320 	and.w	r3, r3, #32
 8008352:	2b00      	cmp	r3, #0
 8008354:	d010      	beq.n	8008378 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	69da      	ldr	r2, [r3, #28]
 800835a:	4b59      	ldr	r3, [pc, #356]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008362:	429a      	cmp	r2, r3
 8008364:	d908      	bls.n	8008378 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008366:	4b56      	ldr	r3, [pc, #344]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	69db      	ldr	r3, [r3, #28]
 8008372:	4953      	ldr	r1, [pc, #332]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 8008374:	4313      	orrs	r3, r2
 8008376:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0302 	and.w	r3, r3, #2
 8008380:	2b00      	cmp	r3, #0
 8008382:	d010      	beq.n	80083a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68da      	ldr	r2, [r3, #12]
 8008388:	4b4d      	ldr	r3, [pc, #308]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	f003 030f 	and.w	r3, r3, #15
 8008390:	429a      	cmp	r2, r3
 8008392:	d908      	bls.n	80083a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008394:	4b4a      	ldr	r3, [pc, #296]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	f023 020f 	bic.w	r2, r3, #15
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	4947      	ldr	r1, [pc, #284]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d055      	beq.n	800845e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80083b2:	4b43      	ldr	r3, [pc, #268]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	4940      	ldr	r1, [pc, #256]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 80083c0:	4313      	orrs	r3, r2
 80083c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d107      	bne.n	80083dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083cc:	4b3c      	ldr	r3, [pc, #240]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d121      	bne.n	800841c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e0f6      	b.n	80085ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	2b03      	cmp	r3, #3
 80083e2:	d107      	bne.n	80083f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083e4:	4b36      	ldr	r3, [pc, #216]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d115      	bne.n	800841c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e0ea      	b.n	80085ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d107      	bne.n	800840c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083fc:	4b30      	ldr	r3, [pc, #192]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008404:	2b00      	cmp	r3, #0
 8008406:	d109      	bne.n	800841c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e0de      	b.n	80085ca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800840c:	4b2c      	ldr	r3, [pc, #176]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0304 	and.w	r3, r3, #4
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e0d6      	b.n	80085ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800841c:	4b28      	ldr	r3, [pc, #160]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	f023 0207 	bic.w	r2, r3, #7
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	4925      	ldr	r1, [pc, #148]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 800842a:	4313      	orrs	r3, r2
 800842c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800842e:	f7fc f9a1 	bl	8004774 <HAL_GetTick>
 8008432:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008434:	e00a      	b.n	800844c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008436:	f7fc f99d 	bl	8004774 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	f241 3288 	movw	r2, #5000	; 0x1388
 8008444:	4293      	cmp	r3, r2
 8008446:	d901      	bls.n	800844c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	e0be      	b.n	80085ca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800844c:	4b1c      	ldr	r3, [pc, #112]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	00db      	lsls	r3, r3, #3
 800845a:	429a      	cmp	r2, r3
 800845c:	d1eb      	bne.n	8008436 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b00      	cmp	r3, #0
 8008468:	d010      	beq.n	800848c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68da      	ldr	r2, [r3, #12]
 800846e:	4b14      	ldr	r3, [pc, #80]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	f003 030f 	and.w	r3, r3, #15
 8008476:	429a      	cmp	r2, r3
 8008478:	d208      	bcs.n	800848c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800847a:	4b11      	ldr	r3, [pc, #68]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	f023 020f 	bic.w	r2, r3, #15
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	490e      	ldr	r1, [pc, #56]	; (80084c0 <HAL_RCC_ClockConfig+0x244>)
 8008488:	4313      	orrs	r3, r2
 800848a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800848c:	4b0b      	ldr	r3, [pc, #44]	; (80084bc <HAL_RCC_ClockConfig+0x240>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 030f 	and.w	r3, r3, #15
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	429a      	cmp	r2, r3
 8008498:	d214      	bcs.n	80084c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800849a:	4b08      	ldr	r3, [pc, #32]	; (80084bc <HAL_RCC_ClockConfig+0x240>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f023 020f 	bic.w	r2, r3, #15
 80084a2:	4906      	ldr	r1, [pc, #24]	; (80084bc <HAL_RCC_ClockConfig+0x240>)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084aa:	4b04      	ldr	r3, [pc, #16]	; (80084bc <HAL_RCC_ClockConfig+0x240>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 030f 	and.w	r3, r3, #15
 80084b2:	683a      	ldr	r2, [r7, #0]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d005      	beq.n	80084c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e086      	b.n	80085ca <HAL_RCC_ClockConfig+0x34e>
 80084bc:	52002000 	.word	0x52002000
 80084c0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0304 	and.w	r3, r3, #4
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d010      	beq.n	80084f2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	691a      	ldr	r2, [r3, #16]
 80084d4:	4b3f      	ldr	r3, [pc, #252]	; (80085d4 <HAL_RCC_ClockConfig+0x358>)
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084dc:	429a      	cmp	r2, r3
 80084de:	d208      	bcs.n	80084f2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80084e0:	4b3c      	ldr	r3, [pc, #240]	; (80085d4 <HAL_RCC_ClockConfig+0x358>)
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	4939      	ldr	r1, [pc, #228]	; (80085d4 <HAL_RCC_ClockConfig+0x358>)
 80084ee:	4313      	orrs	r3, r2
 80084f0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0308 	and.w	r3, r3, #8
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d010      	beq.n	8008520 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	695a      	ldr	r2, [r3, #20]
 8008502:	4b34      	ldr	r3, [pc, #208]	; (80085d4 <HAL_RCC_ClockConfig+0x358>)
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800850a:	429a      	cmp	r2, r3
 800850c:	d208      	bcs.n	8008520 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800850e:	4b31      	ldr	r3, [pc, #196]	; (80085d4 <HAL_RCC_ClockConfig+0x358>)
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	492e      	ldr	r1, [pc, #184]	; (80085d4 <HAL_RCC_ClockConfig+0x358>)
 800851c:	4313      	orrs	r3, r2
 800851e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0310 	and.w	r3, r3, #16
 8008528:	2b00      	cmp	r3, #0
 800852a:	d010      	beq.n	800854e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	699a      	ldr	r2, [r3, #24]
 8008530:	4b28      	ldr	r3, [pc, #160]	; (80085d4 <HAL_RCC_ClockConfig+0x358>)
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008538:	429a      	cmp	r2, r3
 800853a:	d208      	bcs.n	800854e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800853c:	4b25      	ldr	r3, [pc, #148]	; (80085d4 <HAL_RCC_ClockConfig+0x358>)
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	4922      	ldr	r1, [pc, #136]	; (80085d4 <HAL_RCC_ClockConfig+0x358>)
 800854a:	4313      	orrs	r3, r2
 800854c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0320 	and.w	r3, r3, #32
 8008556:	2b00      	cmp	r3, #0
 8008558:	d010      	beq.n	800857c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	69da      	ldr	r2, [r3, #28]
 800855e:	4b1d      	ldr	r3, [pc, #116]	; (80085d4 <HAL_RCC_ClockConfig+0x358>)
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008566:	429a      	cmp	r2, r3
 8008568:	d208      	bcs.n	800857c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800856a:	4b1a      	ldr	r3, [pc, #104]	; (80085d4 <HAL_RCC_ClockConfig+0x358>)
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	4917      	ldr	r1, [pc, #92]	; (80085d4 <HAL_RCC_ClockConfig+0x358>)
 8008578:	4313      	orrs	r3, r2
 800857a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800857c:	f000 f834 	bl	80085e8 <HAL_RCC_GetSysClockFreq>
 8008580:	4602      	mov	r2, r0
 8008582:	4b14      	ldr	r3, [pc, #80]	; (80085d4 <HAL_RCC_ClockConfig+0x358>)
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	0a1b      	lsrs	r3, r3, #8
 8008588:	f003 030f 	and.w	r3, r3, #15
 800858c:	4912      	ldr	r1, [pc, #72]	; (80085d8 <HAL_RCC_ClockConfig+0x35c>)
 800858e:	5ccb      	ldrb	r3, [r1, r3]
 8008590:	f003 031f 	and.w	r3, r3, #31
 8008594:	fa22 f303 	lsr.w	r3, r2, r3
 8008598:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800859a:	4b0e      	ldr	r3, [pc, #56]	; (80085d4 <HAL_RCC_ClockConfig+0x358>)
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	f003 030f 	and.w	r3, r3, #15
 80085a2:	4a0d      	ldr	r2, [pc, #52]	; (80085d8 <HAL_RCC_ClockConfig+0x35c>)
 80085a4:	5cd3      	ldrb	r3, [r2, r3]
 80085a6:	f003 031f 	and.w	r3, r3, #31
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	fa22 f303 	lsr.w	r3, r2, r3
 80085b0:	4a0a      	ldr	r2, [pc, #40]	; (80085dc <HAL_RCC_ClockConfig+0x360>)
 80085b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80085b4:	4a0a      	ldr	r2, [pc, #40]	; (80085e0 <HAL_RCC_ClockConfig+0x364>)
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80085ba:	4b0a      	ldr	r3, [pc, #40]	; (80085e4 <HAL_RCC_ClockConfig+0x368>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fb fa52 	bl	8003a68 <HAL_InitTick>
 80085c4:	4603      	mov	r3, r0
 80085c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3718      	adds	r7, #24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	58024400 	.word	0x58024400
 80085d8:	0802a4a8 	.word	0x0802a4a8
 80085dc:	2000015c 	.word	0x2000015c
 80085e0:	20000158 	.word	0x20000158
 80085e4:	20000160 	.word	0x20000160

080085e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b089      	sub	sp, #36	; 0x24
 80085ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085ee:	4bb3      	ldr	r3, [pc, #716]	; (80088bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085f6:	2b18      	cmp	r3, #24
 80085f8:	f200 8155 	bhi.w	80088a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80085fc:	a201      	add	r2, pc, #4	; (adr r2, 8008604 <HAL_RCC_GetSysClockFreq+0x1c>)
 80085fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008602:	bf00      	nop
 8008604:	08008669 	.word	0x08008669
 8008608:	080088a7 	.word	0x080088a7
 800860c:	080088a7 	.word	0x080088a7
 8008610:	080088a7 	.word	0x080088a7
 8008614:	080088a7 	.word	0x080088a7
 8008618:	080088a7 	.word	0x080088a7
 800861c:	080088a7 	.word	0x080088a7
 8008620:	080088a7 	.word	0x080088a7
 8008624:	0800868f 	.word	0x0800868f
 8008628:	080088a7 	.word	0x080088a7
 800862c:	080088a7 	.word	0x080088a7
 8008630:	080088a7 	.word	0x080088a7
 8008634:	080088a7 	.word	0x080088a7
 8008638:	080088a7 	.word	0x080088a7
 800863c:	080088a7 	.word	0x080088a7
 8008640:	080088a7 	.word	0x080088a7
 8008644:	08008695 	.word	0x08008695
 8008648:	080088a7 	.word	0x080088a7
 800864c:	080088a7 	.word	0x080088a7
 8008650:	080088a7 	.word	0x080088a7
 8008654:	080088a7 	.word	0x080088a7
 8008658:	080088a7 	.word	0x080088a7
 800865c:	080088a7 	.word	0x080088a7
 8008660:	080088a7 	.word	0x080088a7
 8008664:	0800869b 	.word	0x0800869b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008668:	4b94      	ldr	r3, [pc, #592]	; (80088bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0320 	and.w	r3, r3, #32
 8008670:	2b00      	cmp	r3, #0
 8008672:	d009      	beq.n	8008688 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008674:	4b91      	ldr	r3, [pc, #580]	; (80088bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	08db      	lsrs	r3, r3, #3
 800867a:	f003 0303 	and.w	r3, r3, #3
 800867e:	4a90      	ldr	r2, [pc, #576]	; (80088c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008680:	fa22 f303 	lsr.w	r3, r2, r3
 8008684:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008686:	e111      	b.n	80088ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008688:	4b8d      	ldr	r3, [pc, #564]	; (80088c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800868a:	61bb      	str	r3, [r7, #24]
    break;
 800868c:	e10e      	b.n	80088ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800868e:	4b8d      	ldr	r3, [pc, #564]	; (80088c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008690:	61bb      	str	r3, [r7, #24]
    break;
 8008692:	e10b      	b.n	80088ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008694:	4b8c      	ldr	r3, [pc, #560]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008696:	61bb      	str	r3, [r7, #24]
    break;
 8008698:	e108      	b.n	80088ac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800869a:	4b88      	ldr	r3, [pc, #544]	; (80088bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800869c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869e:	f003 0303 	and.w	r3, r3, #3
 80086a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80086a4:	4b85      	ldr	r3, [pc, #532]	; (80088bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a8:	091b      	lsrs	r3, r3, #4
 80086aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80086b0:	4b82      	ldr	r3, [pc, #520]	; (80088bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b4:	f003 0301 	and.w	r3, r3, #1
 80086b8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80086ba:	4b80      	ldr	r3, [pc, #512]	; (80088bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086be:	08db      	lsrs	r3, r3, #3
 80086c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	fb02 f303 	mul.w	r3, r2, r3
 80086ca:	ee07 3a90 	vmov	s15, r3
 80086ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f000 80e1 	beq.w	80088a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	f000 8083 	beq.w	80087ec <HAL_RCC_GetSysClockFreq+0x204>
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	f200 80a1 	bhi.w	8008830 <HAL_RCC_GetSysClockFreq+0x248>
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d003      	beq.n	80086fc <HAL_RCC_GetSysClockFreq+0x114>
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d056      	beq.n	80087a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80086fa:	e099      	b.n	8008830 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086fc:	4b6f      	ldr	r3, [pc, #444]	; (80088bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 0320 	and.w	r3, r3, #32
 8008704:	2b00      	cmp	r3, #0
 8008706:	d02d      	beq.n	8008764 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008708:	4b6c      	ldr	r3, [pc, #432]	; (80088bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	08db      	lsrs	r3, r3, #3
 800870e:	f003 0303 	and.w	r3, r3, #3
 8008712:	4a6b      	ldr	r2, [pc, #428]	; (80088c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008714:	fa22 f303 	lsr.w	r3, r2, r3
 8008718:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	ee07 3a90 	vmov	s15, r3
 8008720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	ee07 3a90 	vmov	s15, r3
 800872a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800872e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008732:	4b62      	ldr	r3, [pc, #392]	; (80088bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800873a:	ee07 3a90 	vmov	s15, r3
 800873e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008742:	ed97 6a02 	vldr	s12, [r7, #8]
 8008746:	eddf 5a61 	vldr	s11, [pc, #388]	; 80088cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800874a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800874e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800875a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800875e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008762:	e087      	b.n	8008874 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	ee07 3a90 	vmov	s15, r3
 800876a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800876e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80088d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008776:	4b51      	ldr	r3, [pc, #324]	; (80088bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800877e:	ee07 3a90 	vmov	s15, r3
 8008782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008786:	ed97 6a02 	vldr	s12, [r7, #8]
 800878a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80088cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800878e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800879a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800879e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087a6:	e065      	b.n	8008874 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	ee07 3a90 	vmov	s15, r3
 80087ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80088d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80087b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ba:	4b40      	ldr	r3, [pc, #256]	; (80088bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c2:	ee07 3a90 	vmov	s15, r3
 80087c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80087ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80088cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80087d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087ea:	e043      	b.n	8008874 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	ee07 3a90 	vmov	s15, r3
 80087f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80088d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80087fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087fe:	4b2f      	ldr	r3, [pc, #188]	; (80088bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008806:	ee07 3a90 	vmov	s15, r3
 800880a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800880e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008812:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80088cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800881a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800881e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800882a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800882e:	e021      	b.n	8008874 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800883a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80088d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800883e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008842:	4b1e      	ldr	r3, [pc, #120]	; (80088bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800884a:	ee07 3a90 	vmov	s15, r3
 800884e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008852:	ed97 6a02 	vldr	s12, [r7, #8]
 8008856:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80088cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800885a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800885e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800886a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800886e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008872:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008874:	4b11      	ldr	r3, [pc, #68]	; (80088bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008878:	0a5b      	lsrs	r3, r3, #9
 800887a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800887e:	3301      	adds	r3, #1
 8008880:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	ee07 3a90 	vmov	s15, r3
 8008888:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800888c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008898:	ee17 3a90 	vmov	r3, s15
 800889c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800889e:	e005      	b.n	80088ac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	61bb      	str	r3, [r7, #24]
    break;
 80088a4:	e002      	b.n	80088ac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80088a6:	4b07      	ldr	r3, [pc, #28]	; (80088c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80088a8:	61bb      	str	r3, [r7, #24]
    break;
 80088aa:	bf00      	nop
  }

  return sysclockfreq;
 80088ac:	69bb      	ldr	r3, [r7, #24]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3724      	adds	r7, #36	; 0x24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	58024400 	.word	0x58024400
 80088c0:	03d09000 	.word	0x03d09000
 80088c4:	003d0900 	.word	0x003d0900
 80088c8:	007a1200 	.word	0x007a1200
 80088cc:	46000000 	.word	0x46000000
 80088d0:	4c742400 	.word	0x4c742400
 80088d4:	4a742400 	.word	0x4a742400
 80088d8:	4af42400 	.word	0x4af42400

080088dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80088e2:	f7ff fe81 	bl	80085e8 <HAL_RCC_GetSysClockFreq>
 80088e6:	4602      	mov	r2, r0
 80088e8:	4b10      	ldr	r3, [pc, #64]	; (800892c <HAL_RCC_GetHCLKFreq+0x50>)
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	0a1b      	lsrs	r3, r3, #8
 80088ee:	f003 030f 	and.w	r3, r3, #15
 80088f2:	490f      	ldr	r1, [pc, #60]	; (8008930 <HAL_RCC_GetHCLKFreq+0x54>)
 80088f4:	5ccb      	ldrb	r3, [r1, r3]
 80088f6:	f003 031f 	and.w	r3, r3, #31
 80088fa:	fa22 f303 	lsr.w	r3, r2, r3
 80088fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008900:	4b0a      	ldr	r3, [pc, #40]	; (800892c <HAL_RCC_GetHCLKFreq+0x50>)
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	f003 030f 	and.w	r3, r3, #15
 8008908:	4a09      	ldr	r2, [pc, #36]	; (8008930 <HAL_RCC_GetHCLKFreq+0x54>)
 800890a:	5cd3      	ldrb	r3, [r2, r3]
 800890c:	f003 031f 	and.w	r3, r3, #31
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	fa22 f303 	lsr.w	r3, r2, r3
 8008916:	4a07      	ldr	r2, [pc, #28]	; (8008934 <HAL_RCC_GetHCLKFreq+0x58>)
 8008918:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800891a:	4a07      	ldr	r2, [pc, #28]	; (8008938 <HAL_RCC_GetHCLKFreq+0x5c>)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008920:	4b04      	ldr	r3, [pc, #16]	; (8008934 <HAL_RCC_GetHCLKFreq+0x58>)
 8008922:	681b      	ldr	r3, [r3, #0]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	58024400 	.word	0x58024400
 8008930:	0802a4a8 	.word	0x0802a4a8
 8008934:	2000015c 	.word	0x2000015c
 8008938:	20000158 	.word	0x20000158

0800893c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008940:	f7ff ffcc 	bl	80088dc <HAL_RCC_GetHCLKFreq>
 8008944:	4602      	mov	r2, r0
 8008946:	4b06      	ldr	r3, [pc, #24]	; (8008960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	091b      	lsrs	r3, r3, #4
 800894c:	f003 0307 	and.w	r3, r3, #7
 8008950:	4904      	ldr	r1, [pc, #16]	; (8008964 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008952:	5ccb      	ldrb	r3, [r1, r3]
 8008954:	f003 031f 	and.w	r3, r3, #31
 8008958:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800895c:	4618      	mov	r0, r3
 800895e:	bd80      	pop	{r7, pc}
 8008960:	58024400 	.word	0x58024400
 8008964:	0802a4a8 	.word	0x0802a4a8

08008968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800896c:	f7ff ffb6 	bl	80088dc <HAL_RCC_GetHCLKFreq>
 8008970:	4602      	mov	r2, r0
 8008972:	4b06      	ldr	r3, [pc, #24]	; (800898c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008974:	69db      	ldr	r3, [r3, #28]
 8008976:	0a1b      	lsrs	r3, r3, #8
 8008978:	f003 0307 	and.w	r3, r3, #7
 800897c:	4904      	ldr	r1, [pc, #16]	; (8008990 <HAL_RCC_GetPCLK2Freq+0x28>)
 800897e:	5ccb      	ldrb	r3, [r1, r3]
 8008980:	f003 031f 	and.w	r3, r3, #31
 8008984:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008988:	4618      	mov	r0, r3
 800898a:	bd80      	pop	{r7, pc}
 800898c:	58024400 	.word	0x58024400
 8008990:	0802a4a8 	.word	0x0802a4a8

08008994 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	223f      	movs	r2, #63	; 0x3f
 80089a2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80089a4:	4b1a      	ldr	r3, [pc, #104]	; (8008a10 <HAL_RCC_GetClockConfig+0x7c>)
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	f003 0207 	and.w	r2, r3, #7
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80089b0:	4b17      	ldr	r3, [pc, #92]	; (8008a10 <HAL_RCC_GetClockConfig+0x7c>)
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80089bc:	4b14      	ldr	r3, [pc, #80]	; (8008a10 <HAL_RCC_GetClockConfig+0x7c>)
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	f003 020f 	and.w	r2, r3, #15
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80089c8:	4b11      	ldr	r3, [pc, #68]	; (8008a10 <HAL_RCC_GetClockConfig+0x7c>)
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80089d4:	4b0e      	ldr	r3, [pc, #56]	; (8008a10 <HAL_RCC_GetClockConfig+0x7c>)
 80089d6:	69db      	ldr	r3, [r3, #28]
 80089d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80089e0:	4b0b      	ldr	r3, [pc, #44]	; (8008a10 <HAL_RCC_GetClockConfig+0x7c>)
 80089e2:	69db      	ldr	r3, [r3, #28]
 80089e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80089ec:	4b08      	ldr	r3, [pc, #32]	; (8008a10 <HAL_RCC_GetClockConfig+0x7c>)
 80089ee:	6a1b      	ldr	r3, [r3, #32]
 80089f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80089f8:	4b06      	ldr	r3, [pc, #24]	; (8008a14 <HAL_RCC_GetClockConfig+0x80>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 020f 	and.w	r2, r3, #15
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	601a      	str	r2, [r3, #0]
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	58024400 	.word	0x58024400
 8008a14:	52002000 	.word	0x52002000

08008a18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008a20:	2300      	movs	r3, #0
 8008a22:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008a24:	2300      	movs	r3, #0
 8008a26:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d03f      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a3c:	d02a      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008a3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a42:	d824      	bhi.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008a44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a48:	d018      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008a4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a4e:	d81e      	bhi.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d003      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a58:	d007      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008a5a:	e018      	b.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a5c:	4ba3      	ldr	r3, [pc, #652]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a60:	4aa2      	ldr	r2, [pc, #648]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008a68:	e015      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	2102      	movs	r1, #2
 8008a70:	4618      	mov	r0, r3
 8008a72:	f001 fff9 	bl	800aa68 <RCCEx_PLL2_Config>
 8008a76:	4603      	mov	r3, r0
 8008a78:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008a7a:	e00c      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	3324      	adds	r3, #36	; 0x24
 8008a80:	2102      	movs	r1, #2
 8008a82:	4618      	mov	r0, r3
 8008a84:	f002 f8a2 	bl	800abcc <RCCEx_PLL3_Config>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008a8c:	e003      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	75fb      	strb	r3, [r7, #23]
      break;
 8008a92:	e000      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a96:	7dfb      	ldrb	r3, [r7, #23]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d109      	bne.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008a9c:	4b93      	ldr	r3, [pc, #588]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aa8:	4990      	ldr	r1, [pc, #576]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	650b      	str	r3, [r1, #80]	; 0x50
 8008aae:	e001      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab0:	7dfb      	ldrb	r3, [r7, #23]
 8008ab2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d03d      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac4:	2b04      	cmp	r3, #4
 8008ac6:	d826      	bhi.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008ac8:	a201      	add	r2, pc, #4	; (adr r2, 8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ace:	bf00      	nop
 8008ad0:	08008ae5 	.word	0x08008ae5
 8008ad4:	08008af3 	.word	0x08008af3
 8008ad8:	08008b05 	.word	0x08008b05
 8008adc:	08008b1d 	.word	0x08008b1d
 8008ae0:	08008b1d 	.word	0x08008b1d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ae4:	4b81      	ldr	r3, [pc, #516]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae8:	4a80      	ldr	r2, [pc, #512]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008af0:	e015      	b.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	3304      	adds	r3, #4
 8008af6:	2100      	movs	r1, #0
 8008af8:	4618      	mov	r0, r3
 8008afa:	f001 ffb5 	bl	800aa68 <RCCEx_PLL2_Config>
 8008afe:	4603      	mov	r3, r0
 8008b00:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b02:	e00c      	b.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	3324      	adds	r3, #36	; 0x24
 8008b08:	2100      	movs	r1, #0
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f002 f85e 	bl	800abcc <RCCEx_PLL3_Config>
 8008b10:	4603      	mov	r3, r0
 8008b12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b14:	e003      	b.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	75fb      	strb	r3, [r7, #23]
      break;
 8008b1a:	e000      	b.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008b1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d109      	bne.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b24:	4b71      	ldr	r3, [pc, #452]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b28:	f023 0207 	bic.w	r2, r3, #7
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b30:	496e      	ldr	r1, [pc, #440]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	650b      	str	r3, [r1, #80]	; 0x50
 8008b36:	e001      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b38:	7dfb      	ldrb	r3, [r7, #23]
 8008b3a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d042      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b50:	d02b      	beq.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b56:	d825      	bhi.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008b58:	2bc0      	cmp	r3, #192	; 0xc0
 8008b5a:	d028      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008b5c:	2bc0      	cmp	r3, #192	; 0xc0
 8008b5e:	d821      	bhi.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008b60:	2b80      	cmp	r3, #128	; 0x80
 8008b62:	d016      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008b64:	2b80      	cmp	r3, #128	; 0x80
 8008b66:	d81d      	bhi.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d002      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008b6c:	2b40      	cmp	r3, #64	; 0x40
 8008b6e:	d007      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008b70:	e018      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b72:	4b5e      	ldr	r3, [pc, #376]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b76:	4a5d      	ldr	r2, [pc, #372]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008b7e:	e017      	b.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	3304      	adds	r3, #4
 8008b84:	2100      	movs	r1, #0
 8008b86:	4618      	mov	r0, r3
 8008b88:	f001 ff6e 	bl	800aa68 <RCCEx_PLL2_Config>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008b90:	e00e      	b.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	3324      	adds	r3, #36	; 0x24
 8008b96:	2100      	movs	r1, #0
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f002 f817 	bl	800abcc <RCCEx_PLL3_Config>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008ba2:	e005      	b.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ba8:	e002      	b.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008baa:	bf00      	nop
 8008bac:	e000      	b.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008bae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bb0:	7dfb      	ldrb	r3, [r7, #23]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d109      	bne.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008bb6:	4b4d      	ldr	r3, [pc, #308]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc2:	494a      	ldr	r1, [pc, #296]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	650b      	str	r3, [r1, #80]	; 0x50
 8008bc8:	e001      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bca:	7dfb      	ldrb	r3, [r7, #23]
 8008bcc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d049      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008be0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008be4:	d030      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008be6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bea:	d82a      	bhi.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008bec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008bf0:	d02c      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008bf2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008bf6:	d824      	bhi.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008bf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bfc:	d018      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c02:	d81e      	bhi.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d003      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008c08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c0c:	d007      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008c0e:	e018      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c10:	4b36      	ldr	r3, [pc, #216]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c14:	4a35      	ldr	r2, [pc, #212]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c1c:	e017      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	3304      	adds	r3, #4
 8008c22:	2100      	movs	r1, #0
 8008c24:	4618      	mov	r0, r3
 8008c26:	f001 ff1f 	bl	800aa68 <RCCEx_PLL2_Config>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008c2e:	e00e      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	3324      	adds	r3, #36	; 0x24
 8008c34:	2100      	movs	r1, #0
 8008c36:	4618      	mov	r0, r3
 8008c38:	f001 ffc8 	bl	800abcc <RCCEx_PLL3_Config>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c40:	e005      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	75fb      	strb	r3, [r7, #23]
      break;
 8008c46:	e002      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008c48:	bf00      	nop
 8008c4a:	e000      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008c4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d10a      	bne.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008c54:	4b25      	ldr	r3, [pc, #148]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c58:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c62:	4922      	ldr	r1, [pc, #136]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008c64:	4313      	orrs	r3, r2
 8008c66:	658b      	str	r3, [r1, #88]	; 0x58
 8008c68:	e001      	b.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c6a:	7dfb      	ldrb	r3, [r7, #23]
 8008c6c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d04b      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008c80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c84:	d030      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008c86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c8a:	d82a      	bhi.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008c8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c90:	d02e      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008c92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c96:	d824      	bhi.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008c98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c9c:	d018      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008c9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ca2:	d81e      	bhi.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d003      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cac:	d007      	beq.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008cae:	e018      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cb0:	4b0e      	ldr	r3, [pc, #56]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb4:	4a0d      	ldr	r2, [pc, #52]	; (8008cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cbc:	e019      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f001 fecf 	bl	800aa68 <RCCEx_PLL2_Config>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008cce:	e010      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	3324      	adds	r3, #36	; 0x24
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f001 ff78 	bl	800abcc <RCCEx_PLL3_Config>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ce0:	e007      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ce6:	e004      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8008ce8:	bf00      	nop
 8008cea:	e002      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008cec:	58024400 	.word	0x58024400
      break;
 8008cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10a      	bne.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008cf8:	4b99      	ldr	r3, [pc, #612]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cfc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008d06:	4996      	ldr	r1, [pc, #600]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	658b      	str	r3, [r1, #88]	; 0x58
 8008d0c:	e001      	b.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d0e:	7dfb      	ldrb	r3, [r7, #23]
 8008d10:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d032      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d22:	2b30      	cmp	r3, #48	; 0x30
 8008d24:	d01c      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008d26:	2b30      	cmp	r3, #48	; 0x30
 8008d28:	d817      	bhi.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008d2a:	2b20      	cmp	r3, #32
 8008d2c:	d00c      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008d2e:	2b20      	cmp	r3, #32
 8008d30:	d813      	bhi.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d016      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008d36:	2b10      	cmp	r3, #16
 8008d38:	d10f      	bne.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d3a:	4b89      	ldr	r3, [pc, #548]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3e:	4a88      	ldr	r2, [pc, #544]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008d46:	e00e      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3304      	adds	r3, #4
 8008d4c:	2102      	movs	r1, #2
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f001 fe8a 	bl	800aa68 <RCCEx_PLL2_Config>
 8008d54:	4603      	mov	r3, r0
 8008d56:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008d58:	e005      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8008d5e:	e002      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008d60:	bf00      	nop
 8008d62:	e000      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d66:	7dfb      	ldrb	r3, [r7, #23]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d109      	bne.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008d6c:	4b7c      	ldr	r3, [pc, #496]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d78:	4979      	ldr	r1, [pc, #484]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008d7e:	e001      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
 8008d82:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d047      	beq.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d98:	d030      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008d9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d9e:	d82a      	bhi.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008da0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008da4:	d02c      	beq.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008da6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008daa:	d824      	bhi.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008db0:	d018      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008db6:	d81e      	bhi.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d003      	beq.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dc0:	d007      	beq.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008dc2:	e018      	b.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dc4:	4b66      	ldr	r3, [pc, #408]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc8:	4a65      	ldr	r2, [pc, #404]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008dd0:	e017      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f001 fe45 	bl	800aa68 <RCCEx_PLL2_Config>
 8008dde:	4603      	mov	r3, r0
 8008de0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008de2:	e00e      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	3324      	adds	r3, #36	; 0x24
 8008de8:	2100      	movs	r1, #0
 8008dea:	4618      	mov	r0, r3
 8008dec:	f001 feee 	bl	800abcc <RCCEx_PLL3_Config>
 8008df0:	4603      	mov	r3, r0
 8008df2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008df4:	e005      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	75fb      	strb	r3, [r7, #23]
      break;
 8008dfa:	e002      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008dfc:	bf00      	nop
 8008dfe:	e000      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d109      	bne.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008e08:	4b55      	ldr	r3, [pc, #340]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e0c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e14:	4952      	ldr	r1, [pc, #328]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008e16:	4313      	orrs	r3, r2
 8008e18:	650b      	str	r3, [r1, #80]	; 0x50
 8008e1a:	e001      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e1c:	7dfb      	ldrb	r3, [r7, #23]
 8008e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d049      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e34:	d02e      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008e36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e3a:	d828      	bhi.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008e3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e40:	d02a      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008e42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e46:	d822      	bhi.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008e48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e4c:	d026      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008e4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e52:	d81c      	bhi.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008e54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e58:	d010      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008e5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e5e:	d816      	bhi.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d01d      	beq.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e68:	d111      	bne.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	2101      	movs	r1, #1
 8008e70:	4618      	mov	r0, r3
 8008e72:	f001 fdf9 	bl	800aa68 <RCCEx_PLL2_Config>
 8008e76:	4603      	mov	r3, r0
 8008e78:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008e7a:	e012      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3324      	adds	r3, #36	; 0x24
 8008e80:	2101      	movs	r1, #1
 8008e82:	4618      	mov	r0, r3
 8008e84:	f001 fea2 	bl	800abcc <RCCEx_PLL3_Config>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008e8c:	e009      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	75fb      	strb	r3, [r7, #23]
      break;
 8008e92:	e006      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008e94:	bf00      	nop
 8008e96:	e004      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008e98:	bf00      	nop
 8008e9a:	e002      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008e9c:	bf00      	nop
 8008e9e:	e000      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d109      	bne.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008ea8:	4b2d      	ldr	r3, [pc, #180]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eb4:	492a      	ldr	r1, [pc, #168]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	650b      	str	r3, [r1, #80]	; 0x50
 8008eba:	e001      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ebc:	7dfb      	ldrb	r3, [r7, #23]
 8008ebe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d04d      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ed6:	d02e      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008edc:	d828      	bhi.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ee2:	d02a      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ee8:	d822      	bhi.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008eea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008eee:	d026      	beq.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008ef0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ef4:	d81c      	bhi.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008efa:	d010      	beq.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f00:	d816      	bhi.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d01d      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f0a:	d111      	bne.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	3304      	adds	r3, #4
 8008f10:	2101      	movs	r1, #1
 8008f12:	4618      	mov	r0, r3
 8008f14:	f001 fda8 	bl	800aa68 <RCCEx_PLL2_Config>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008f1c:	e012      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	3324      	adds	r3, #36	; 0x24
 8008f22:	2101      	movs	r1, #1
 8008f24:	4618      	mov	r0, r3
 8008f26:	f001 fe51 	bl	800abcc <RCCEx_PLL3_Config>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008f2e:	e009      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	75fb      	strb	r3, [r7, #23]
      break;
 8008f34:	e006      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008f36:	bf00      	nop
 8008f38:	e004      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008f3a:	bf00      	nop
 8008f3c:	e002      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008f3e:	bf00      	nop
 8008f40:	e000      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10c      	bne.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008f4a:	4b05      	ldr	r3, [pc, #20]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008f58:	4901      	ldr	r1, [pc, #4]	; (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	658b      	str	r3, [r1, #88]	; 0x58
 8008f5e:	e003      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008f60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f64:	7dfb      	ldrb	r3, [r7, #23]
 8008f66:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d02f      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f7c:	d00e      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f82:	d814      	bhi.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d015      	beq.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008f88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f8c:	d10f      	bne.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f8e:	4baf      	ldr	r3, [pc, #700]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f92:	4aae      	ldr	r2, [pc, #696]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008f9a:	e00c      	b.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3304      	adds	r3, #4
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f001 fd60 	bl	800aa68 <RCCEx_PLL2_Config>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008fac:	e003      	b.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8008fb2:	e000      	b.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fb6:	7dfb      	ldrb	r3, [r7, #23]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d109      	bne.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008fbc:	4ba3      	ldr	r3, [pc, #652]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fc0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fc8:	49a0      	ldr	r1, [pc, #640]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	650b      	str	r3, [r1, #80]	; 0x50
 8008fce:	e001      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd0:	7dfb      	ldrb	r3, [r7, #23]
 8008fd2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d032      	beq.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe4:	2b03      	cmp	r3, #3
 8008fe6:	d81b      	bhi.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008fe8:	a201      	add	r2, pc, #4	; (adr r2, 8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fee:	bf00      	nop
 8008ff0:	08009027 	.word	0x08009027
 8008ff4:	08009001 	.word	0x08009001
 8008ff8:	0800900f 	.word	0x0800900f
 8008ffc:	08009027 	.word	0x08009027
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009000:	4b92      	ldr	r3, [pc, #584]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009004:	4a91      	ldr	r2, [pc, #580]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800900a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800900c:	e00c      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	3304      	adds	r3, #4
 8009012:	2102      	movs	r1, #2
 8009014:	4618      	mov	r0, r3
 8009016:	f001 fd27 	bl	800aa68 <RCCEx_PLL2_Config>
 800901a:	4603      	mov	r3, r0
 800901c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800901e:	e003      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	75fb      	strb	r3, [r7, #23]
      break;
 8009024:	e000      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009028:	7dfb      	ldrb	r3, [r7, #23]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d109      	bne.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800902e:	4b87      	ldr	r3, [pc, #540]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009032:	f023 0203 	bic.w	r2, r3, #3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800903a:	4984      	ldr	r1, [pc, #528]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800903c:	4313      	orrs	r3, r2
 800903e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009040:	e001      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009042:	7dfb      	ldrb	r3, [r7, #23]
 8009044:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 8086 	beq.w	8009160 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009054:	4b7e      	ldr	r3, [pc, #504]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a7d      	ldr	r2, [pc, #500]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800905a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800905e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009060:	f7fb fb88 	bl	8004774 <HAL_GetTick>
 8009064:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009066:	e009      	b.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009068:	f7fb fb84 	bl	8004774 <HAL_GetTick>
 800906c:	4602      	mov	r2, r0
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	1ad3      	subs	r3, r2, r3
 8009072:	2b64      	cmp	r3, #100	; 0x64
 8009074:	d902      	bls.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009076:	2303      	movs	r3, #3
 8009078:	75fb      	strb	r3, [r7, #23]
        break;
 800907a:	e005      	b.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800907c:	4b74      	ldr	r3, [pc, #464]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009084:	2b00      	cmp	r3, #0
 8009086:	d0ef      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009088:	7dfb      	ldrb	r3, [r7, #23]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d166      	bne.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800908e:	4b6f      	ldr	r3, [pc, #444]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009090:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009098:	4053      	eors	r3, r2
 800909a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d013      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80090a2:	4b6a      	ldr	r3, [pc, #424]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090aa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80090ac:	4b67      	ldr	r3, [pc, #412]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b0:	4a66      	ldr	r2, [pc, #408]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090b6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80090b8:	4b64      	ldr	r3, [pc, #400]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090bc:	4a63      	ldr	r2, [pc, #396]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090c2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80090c4:	4a61      	ldr	r2, [pc, #388]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090d4:	d115      	bne.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d6:	f7fb fb4d 	bl	8004774 <HAL_GetTick>
 80090da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090dc:	e00b      	b.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090de:	f7fb fb49 	bl	8004774 <HAL_GetTick>
 80090e2:	4602      	mov	r2, r0
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d902      	bls.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80090f0:	2303      	movs	r3, #3
 80090f2:	75fb      	strb	r3, [r7, #23]
            break;
 80090f4:	e005      	b.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090f6:	4b55      	ldr	r3, [pc, #340]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80090f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090fa:	f003 0302 	and.w	r3, r3, #2
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d0ed      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009102:	7dfb      	ldrb	r3, [r7, #23]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d126      	bne.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800910e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009112:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009116:	d10d      	bne.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009118:	4b4c      	ldr	r3, [pc, #304]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009126:	0919      	lsrs	r1, r3, #4
 8009128:	4b4a      	ldr	r3, [pc, #296]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800912a:	400b      	ands	r3, r1
 800912c:	4947      	ldr	r1, [pc, #284]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800912e:	4313      	orrs	r3, r2
 8009130:	610b      	str	r3, [r1, #16]
 8009132:	e005      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009134:	4b45      	ldr	r3, [pc, #276]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	4a44      	ldr	r2, [pc, #272]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800913a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800913e:	6113      	str	r3, [r2, #16]
 8009140:	4b42      	ldr	r3, [pc, #264]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009142:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800914a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800914e:	493f      	ldr	r1, [pc, #252]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009150:	4313      	orrs	r3, r2
 8009152:	670b      	str	r3, [r1, #112]	; 0x70
 8009154:	e004      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009156:	7dfb      	ldrb	r3, [r7, #23]
 8009158:	75bb      	strb	r3, [r7, #22]
 800915a:	e001      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800915c:	7dfb      	ldrb	r3, [r7, #23]
 800915e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	f000 8085 	beq.w	8009278 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009172:	2b28      	cmp	r3, #40	; 0x28
 8009174:	d866      	bhi.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009176:	a201      	add	r2, pc, #4	; (adr r2, 800917c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917c:	08009259 	.word	0x08009259
 8009180:	08009245 	.word	0x08009245
 8009184:	08009245 	.word	0x08009245
 8009188:	08009245 	.word	0x08009245
 800918c:	08009245 	.word	0x08009245
 8009190:	08009245 	.word	0x08009245
 8009194:	08009245 	.word	0x08009245
 8009198:	08009245 	.word	0x08009245
 800919c:	08009221 	.word	0x08009221
 80091a0:	08009245 	.word	0x08009245
 80091a4:	08009245 	.word	0x08009245
 80091a8:	08009245 	.word	0x08009245
 80091ac:	08009245 	.word	0x08009245
 80091b0:	08009245 	.word	0x08009245
 80091b4:	08009245 	.word	0x08009245
 80091b8:	08009245 	.word	0x08009245
 80091bc:	08009233 	.word	0x08009233
 80091c0:	08009245 	.word	0x08009245
 80091c4:	08009245 	.word	0x08009245
 80091c8:	08009245 	.word	0x08009245
 80091cc:	08009245 	.word	0x08009245
 80091d0:	08009245 	.word	0x08009245
 80091d4:	08009245 	.word	0x08009245
 80091d8:	08009245 	.word	0x08009245
 80091dc:	08009259 	.word	0x08009259
 80091e0:	08009245 	.word	0x08009245
 80091e4:	08009245 	.word	0x08009245
 80091e8:	08009245 	.word	0x08009245
 80091ec:	08009245 	.word	0x08009245
 80091f0:	08009245 	.word	0x08009245
 80091f4:	08009245 	.word	0x08009245
 80091f8:	08009245 	.word	0x08009245
 80091fc:	08009259 	.word	0x08009259
 8009200:	08009245 	.word	0x08009245
 8009204:	08009245 	.word	0x08009245
 8009208:	08009245 	.word	0x08009245
 800920c:	08009245 	.word	0x08009245
 8009210:	08009245 	.word	0x08009245
 8009214:	08009245 	.word	0x08009245
 8009218:	08009245 	.word	0x08009245
 800921c:	08009259 	.word	0x08009259
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	3304      	adds	r3, #4
 8009224:	2101      	movs	r1, #1
 8009226:	4618      	mov	r0, r3
 8009228:	f001 fc1e 	bl	800aa68 <RCCEx_PLL2_Config>
 800922c:	4603      	mov	r3, r0
 800922e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009230:	e013      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	3324      	adds	r3, #36	; 0x24
 8009236:	2101      	movs	r1, #1
 8009238:	4618      	mov	r0, r3
 800923a:	f001 fcc7 	bl	800abcc <RCCEx_PLL3_Config>
 800923e:	4603      	mov	r3, r0
 8009240:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009242:	e00a      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	75fb      	strb	r3, [r7, #23]
      break;
 8009248:	e007      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800924a:	bf00      	nop
 800924c:	58024400 	.word	0x58024400
 8009250:	58024800 	.word	0x58024800
 8009254:	00ffffcf 	.word	0x00ffffcf
      break;
 8009258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800925a:	7dfb      	ldrb	r3, [r7, #23]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d109      	bne.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009260:	4b96      	ldr	r3, [pc, #600]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009264:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800926c:	4993      	ldr	r1, [pc, #588]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800926e:	4313      	orrs	r3, r2
 8009270:	654b      	str	r3, [r1, #84]	; 0x54
 8009272:	e001      	b.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009274:	7dfb      	ldrb	r3, [r7, #23]
 8009276:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 0302 	and.w	r3, r3, #2
 8009280:	2b00      	cmp	r3, #0
 8009282:	d038      	beq.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009288:	2b05      	cmp	r3, #5
 800928a:	d821      	bhi.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800928c:	a201      	add	r2, pc, #4	; (adr r2, 8009294 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800928e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009292:	bf00      	nop
 8009294:	080092d7 	.word	0x080092d7
 8009298:	080092ad 	.word	0x080092ad
 800929c:	080092bf 	.word	0x080092bf
 80092a0:	080092d7 	.word	0x080092d7
 80092a4:	080092d7 	.word	0x080092d7
 80092a8:	080092d7 	.word	0x080092d7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	3304      	adds	r3, #4
 80092b0:	2101      	movs	r1, #1
 80092b2:	4618      	mov	r0, r3
 80092b4:	f001 fbd8 	bl	800aa68 <RCCEx_PLL2_Config>
 80092b8:	4603      	mov	r3, r0
 80092ba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80092bc:	e00c      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	3324      	adds	r3, #36	; 0x24
 80092c2:	2101      	movs	r1, #1
 80092c4:	4618      	mov	r0, r3
 80092c6:	f001 fc81 	bl	800abcc <RCCEx_PLL3_Config>
 80092ca:	4603      	mov	r3, r0
 80092cc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80092ce:	e003      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	75fb      	strb	r3, [r7, #23]
      break;
 80092d4:	e000      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80092d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092d8:	7dfb      	ldrb	r3, [r7, #23]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d109      	bne.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80092de:	4b77      	ldr	r3, [pc, #476]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80092e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e2:	f023 0207 	bic.w	r2, r3, #7
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092ea:	4974      	ldr	r1, [pc, #464]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80092ec:	4313      	orrs	r3, r2
 80092ee:	654b      	str	r3, [r1, #84]	; 0x54
 80092f0:	e001      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f2:	7dfb      	ldrb	r3, [r7, #23]
 80092f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 0304 	and.w	r3, r3, #4
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d03a      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009308:	2b05      	cmp	r3, #5
 800930a:	d821      	bhi.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800930c:	a201      	add	r2, pc, #4	; (adr r2, 8009314 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800930e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009312:	bf00      	nop
 8009314:	08009357 	.word	0x08009357
 8009318:	0800932d 	.word	0x0800932d
 800931c:	0800933f 	.word	0x0800933f
 8009320:	08009357 	.word	0x08009357
 8009324:	08009357 	.word	0x08009357
 8009328:	08009357 	.word	0x08009357
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3304      	adds	r3, #4
 8009330:	2101      	movs	r1, #1
 8009332:	4618      	mov	r0, r3
 8009334:	f001 fb98 	bl	800aa68 <RCCEx_PLL2_Config>
 8009338:	4603      	mov	r3, r0
 800933a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800933c:	e00c      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3324      	adds	r3, #36	; 0x24
 8009342:	2101      	movs	r1, #1
 8009344:	4618      	mov	r0, r3
 8009346:	f001 fc41 	bl	800abcc <RCCEx_PLL3_Config>
 800934a:	4603      	mov	r3, r0
 800934c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800934e:	e003      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	75fb      	strb	r3, [r7, #23]
      break;
 8009354:	e000      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009356:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009358:	7dfb      	ldrb	r3, [r7, #23]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10a      	bne.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800935e:	4b57      	ldr	r3, [pc, #348]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009362:	f023 0207 	bic.w	r2, r3, #7
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800936c:	4953      	ldr	r1, [pc, #332]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800936e:	4313      	orrs	r3, r2
 8009370:	658b      	str	r3, [r1, #88]	; 0x58
 8009372:	e001      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009374:	7dfb      	ldrb	r3, [r7, #23]
 8009376:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0320 	and.w	r3, r3, #32
 8009380:	2b00      	cmp	r3, #0
 8009382:	d04b      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800938a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800938e:	d02e      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009390:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009394:	d828      	bhi.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8009396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800939a:	d02a      	beq.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800939c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093a0:	d822      	bhi.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80093a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093a6:	d026      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80093a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093ac:	d81c      	bhi.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80093ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093b2:	d010      	beq.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80093b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093b8:	d816      	bhi.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d01d      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80093be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093c2:	d111      	bne.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	3304      	adds	r3, #4
 80093c8:	2100      	movs	r1, #0
 80093ca:	4618      	mov	r0, r3
 80093cc:	f001 fb4c 	bl	800aa68 <RCCEx_PLL2_Config>
 80093d0:	4603      	mov	r3, r0
 80093d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80093d4:	e012      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	3324      	adds	r3, #36	; 0x24
 80093da:	2102      	movs	r1, #2
 80093dc:	4618      	mov	r0, r3
 80093de:	f001 fbf5 	bl	800abcc <RCCEx_PLL3_Config>
 80093e2:	4603      	mov	r3, r0
 80093e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80093e6:	e009      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	75fb      	strb	r3, [r7, #23]
      break;
 80093ec:	e006      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80093ee:	bf00      	nop
 80093f0:	e004      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80093f2:	bf00      	nop
 80093f4:	e002      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80093f6:	bf00      	nop
 80093f8:	e000      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80093fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10a      	bne.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009402:	4b2e      	ldr	r3, [pc, #184]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009406:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009410:	492a      	ldr	r1, [pc, #168]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009412:	4313      	orrs	r3, r2
 8009414:	654b      	str	r3, [r1, #84]	; 0x54
 8009416:	e001      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009418:	7dfb      	ldrb	r3, [r7, #23]
 800941a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009424:	2b00      	cmp	r3, #0
 8009426:	d04d      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800942e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009432:	d02e      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009434:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009438:	d828      	bhi.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800943a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800943e:	d02a      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009444:	d822      	bhi.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009446:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800944a:	d026      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800944c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009450:	d81c      	bhi.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009456:	d010      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800945c:	d816      	bhi.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800945e:	2b00      	cmp	r3, #0
 8009460:	d01d      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009466:	d111      	bne.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	3304      	adds	r3, #4
 800946c:	2100      	movs	r1, #0
 800946e:	4618      	mov	r0, r3
 8009470:	f001 fafa 	bl	800aa68 <RCCEx_PLL2_Config>
 8009474:	4603      	mov	r3, r0
 8009476:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009478:	e012      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	3324      	adds	r3, #36	; 0x24
 800947e:	2102      	movs	r1, #2
 8009480:	4618      	mov	r0, r3
 8009482:	f001 fba3 	bl	800abcc <RCCEx_PLL3_Config>
 8009486:	4603      	mov	r3, r0
 8009488:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800948a:	e009      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	75fb      	strb	r3, [r7, #23]
      break;
 8009490:	e006      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009492:	bf00      	nop
 8009494:	e004      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009496:	bf00      	nop
 8009498:	e002      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800949a:	bf00      	nop
 800949c:	e000      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800949e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094a0:	7dfb      	ldrb	r3, [r7, #23]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10c      	bne.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80094a6:	4b05      	ldr	r3, [pc, #20]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80094a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094b4:	4901      	ldr	r1, [pc, #4]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80094b6:	4313      	orrs	r3, r2
 80094b8:	658b      	str	r3, [r1, #88]	; 0x58
 80094ba:	e003      	b.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80094bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d04b      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094d6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80094da:	d02e      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80094dc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80094e0:	d828      	bhi.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80094e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094e6:	d02a      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80094e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094ec:	d822      	bhi.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80094ee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80094f2:	d026      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80094f4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80094f8:	d81c      	bhi.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80094fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094fe:	d010      	beq.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009500:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009504:	d816      	bhi.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009506:	2b00      	cmp	r3, #0
 8009508:	d01d      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800950a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800950e:	d111      	bne.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	3304      	adds	r3, #4
 8009514:	2100      	movs	r1, #0
 8009516:	4618      	mov	r0, r3
 8009518:	f001 faa6 	bl	800aa68 <RCCEx_PLL2_Config>
 800951c:	4603      	mov	r3, r0
 800951e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009520:	e012      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	3324      	adds	r3, #36	; 0x24
 8009526:	2102      	movs	r1, #2
 8009528:	4618      	mov	r0, r3
 800952a:	f001 fb4f 	bl	800abcc <RCCEx_PLL3_Config>
 800952e:	4603      	mov	r3, r0
 8009530:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009532:	e009      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	75fb      	strb	r3, [r7, #23]
      break;
 8009538:	e006      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800953a:	bf00      	nop
 800953c:	e004      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800953e:	bf00      	nop
 8009540:	e002      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009542:	bf00      	nop
 8009544:	e000      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009546:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009548:	7dfb      	ldrb	r3, [r7, #23]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10a      	bne.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800954e:	4b9d      	ldr	r3, [pc, #628]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800955c:	4999      	ldr	r1, [pc, #612]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800955e:	4313      	orrs	r3, r2
 8009560:	658b      	str	r3, [r1, #88]	; 0x58
 8009562:	e001      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009564:	7dfb      	ldrb	r3, [r7, #23]
 8009566:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 0308 	and.w	r3, r3, #8
 8009570:	2b00      	cmp	r3, #0
 8009572:	d01a      	beq.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800957a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800957e:	d10a      	bne.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	3324      	adds	r3, #36	; 0x24
 8009584:	2102      	movs	r1, #2
 8009586:	4618      	mov	r0, r3
 8009588:	f001 fb20 	bl	800abcc <RCCEx_PLL3_Config>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009596:	4b8b      	ldr	r3, [pc, #556]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800959a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095a4:	4987      	ldr	r1, [pc, #540]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f003 0310 	and.w	r3, r3, #16
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d01a      	beq.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095c0:	d10a      	bne.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	3324      	adds	r3, #36	; 0x24
 80095c6:	2102      	movs	r1, #2
 80095c8:	4618      	mov	r0, r3
 80095ca:	f001 faff 	bl	800abcc <RCCEx_PLL3_Config>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80095d8:	4b7a      	ldr	r3, [pc, #488]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095e6:	4977      	ldr	r1, [pc, #476]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80095e8:	4313      	orrs	r3, r2
 80095ea:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d034      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80095fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009602:	d01d      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009608:	d817      	bhi.n	800963a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800960a:	2b00      	cmp	r3, #0
 800960c:	d003      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800960e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009612:	d009      	beq.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009614:	e011      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	3304      	adds	r3, #4
 800961a:	2100      	movs	r1, #0
 800961c:	4618      	mov	r0, r3
 800961e:	f001 fa23 	bl	800aa68 <RCCEx_PLL2_Config>
 8009622:	4603      	mov	r3, r0
 8009624:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009626:	e00c      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	3324      	adds	r3, #36	; 0x24
 800962c:	2102      	movs	r1, #2
 800962e:	4618      	mov	r0, r3
 8009630:	f001 facc 	bl	800abcc <RCCEx_PLL3_Config>
 8009634:	4603      	mov	r3, r0
 8009636:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009638:	e003      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	75fb      	strb	r3, [r7, #23]
      break;
 800963e:	e000      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10a      	bne.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009648:	4b5e      	ldr	r3, [pc, #376]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800964a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800964c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009656:	495b      	ldr	r1, [pc, #364]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009658:	4313      	orrs	r3, r2
 800965a:	658b      	str	r3, [r1, #88]	; 0x58
 800965c:	e001      	b.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800965e:	7dfb      	ldrb	r3, [r7, #23]
 8009660:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d033      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009674:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009678:	d01c      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800967a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800967e:	d816      	bhi.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009684:	d003      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009686:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800968a:	d007      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800968c:	e00f      	b.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800968e:	4b4d      	ldr	r3, [pc, #308]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009692:	4a4c      	ldr	r2, [pc, #304]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009698:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800969a:	e00c      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	3324      	adds	r3, #36	; 0x24
 80096a0:	2101      	movs	r1, #1
 80096a2:	4618      	mov	r0, r3
 80096a4:	f001 fa92 	bl	800abcc <RCCEx_PLL3_Config>
 80096a8:	4603      	mov	r3, r0
 80096aa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80096ac:	e003      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	75fb      	strb	r3, [r7, #23]
      break;
 80096b2:	e000      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80096b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096b6:	7dfb      	ldrb	r3, [r7, #23]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10a      	bne.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80096bc:	4b41      	ldr	r3, [pc, #260]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096ca:	493e      	ldr	r1, [pc, #248]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096cc:	4313      	orrs	r3, r2
 80096ce:	654b      	str	r3, [r1, #84]	; 0x54
 80096d0:	e001      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096d2:	7dfb      	ldrb	r3, [r7, #23]
 80096d4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d029      	beq.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80096ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096ee:	d007      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80096f0:	e00f      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096f2:	4b34      	ldr	r3, [pc, #208]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f6:	4a33      	ldr	r2, [pc, #204]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80096f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80096fe:	e00b      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	3304      	adds	r3, #4
 8009704:	2102      	movs	r1, #2
 8009706:	4618      	mov	r0, r3
 8009708:	f001 f9ae 	bl	800aa68 <RCCEx_PLL2_Config>
 800970c:	4603      	mov	r3, r0
 800970e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009710:	e002      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	75fb      	strb	r3, [r7, #23]
      break;
 8009716:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009718:	7dfb      	ldrb	r3, [r7, #23]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d109      	bne.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800971e:	4b29      	ldr	r3, [pc, #164]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009722:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800972a:	4926      	ldr	r1, [pc, #152]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800972c:	4313      	orrs	r3, r2
 800972e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009730:	e001      	b.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009732:	7dfb      	ldrb	r3, [r7, #23]
 8009734:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00a      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	3324      	adds	r3, #36	; 0x24
 8009746:	2102      	movs	r1, #2
 8009748:	4618      	mov	r0, r3
 800974a:	f001 fa3f 	bl	800abcc <RCCEx_PLL3_Config>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d033      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009768:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800976c:	d017      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800976e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009772:	d811      	bhi.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009778:	d013      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800977a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800977e:	d80b      	bhi.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009780:	2b00      	cmp	r3, #0
 8009782:	d010      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009788:	d106      	bne.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800978a:	4b0e      	ldr	r3, [pc, #56]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800978c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978e:	4a0d      	ldr	r2, [pc, #52]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009794:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009796:	e007      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	75fb      	strb	r3, [r7, #23]
      break;
 800979c:	e004      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800979e:	bf00      	nop
 80097a0:	e002      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80097a2:	bf00      	nop
 80097a4:	e000      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80097a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097a8:	7dfb      	ldrb	r3, [r7, #23]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10c      	bne.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80097ae:	4b05      	ldr	r3, [pc, #20]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80097b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097ba:	4902      	ldr	r1, [pc, #8]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80097bc:	4313      	orrs	r3, r2
 80097be:	654b      	str	r3, [r1, #84]	; 0x54
 80097c0:	e004      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80097c2:	bf00      	nop
 80097c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c8:	7dfb      	ldrb	r3, [r7, #23]
 80097ca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d008      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80097d8:	4b31      	ldr	r3, [pc, #196]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e4:	492e      	ldr	r1, [pc, #184]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097e6:	4313      	orrs	r3, r2
 80097e8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d009      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80097f6:	4b2a      	ldr	r3, [pc, #168]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009804:	4926      	ldr	r1, [pc, #152]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009806:	4313      	orrs	r3, r2
 8009808:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009812:	2b00      	cmp	r3, #0
 8009814:	d008      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009816:	4b22      	ldr	r3, [pc, #136]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800981a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009822:	491f      	ldr	r1, [pc, #124]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009824:	4313      	orrs	r3, r2
 8009826:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00d      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009834:	4b1a      	ldr	r3, [pc, #104]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	4a19      	ldr	r2, [pc, #100]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800983a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800983e:	6113      	str	r3, [r2, #16]
 8009840:	4b17      	ldr	r3, [pc, #92]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009842:	691a      	ldr	r2, [r3, #16]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800984a:	4915      	ldr	r1, [pc, #84]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800984c:	4313      	orrs	r3, r2
 800984e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	da08      	bge.n	800986a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009858:	4b11      	ldr	r3, [pc, #68]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800985a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800985c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009864:	490e      	ldr	r1, [pc, #56]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009866:	4313      	orrs	r3, r2
 8009868:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009872:	2b00      	cmp	r3, #0
 8009874:	d009      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009876:	4b0a      	ldr	r3, [pc, #40]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800987a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009884:	4906      	ldr	r1, [pc, #24]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009886:	4313      	orrs	r3, r2
 8009888:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800988a:	7dbb      	ldrb	r3, [r7, #22]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d101      	bne.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	e000      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009894:	2301      	movs	r3, #1
}
 8009896:	4618      	mov	r0, r3
 8009898:	3718      	adds	r7, #24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	58024400 	.word	0x58024400

080098a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b090      	sub	sp, #64	; 0x40
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098b2:	f040 8095 	bne.w	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80098b6:	4b97      	ldr	r3, [pc, #604]	; (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80098b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098ba:	f003 0307 	and.w	r3, r3, #7
 80098be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80098c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c2:	2b04      	cmp	r3, #4
 80098c4:	f200 8088 	bhi.w	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80098c8:	a201      	add	r2, pc, #4	; (adr r2, 80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80098ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ce:	bf00      	nop
 80098d0:	080098e5 	.word	0x080098e5
 80098d4:	0800990d 	.word	0x0800990d
 80098d8:	08009935 	.word	0x08009935
 80098dc:	080099d1 	.word	0x080099d1
 80098e0:	0800995d 	.word	0x0800995d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098e4:	4b8b      	ldr	r3, [pc, #556]	; (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098f0:	d108      	bne.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098f6:	4618      	mov	r0, r3
 80098f8:	f000 ff64 	bl	800a7c4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80098fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009900:	f000 bc94 	b.w	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009904:	2300      	movs	r3, #0
 8009906:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009908:	f000 bc90 	b.w	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800990c:	4b81      	ldr	r3, [pc, #516]	; (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009918:	d108      	bne.n	800992c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800991a:	f107 0318 	add.w	r3, r7, #24
 800991e:	4618      	mov	r0, r3
 8009920:	f000 fca8 	bl	800a274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009928:	f000 bc80 	b.w	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800992c:	2300      	movs	r3, #0
 800992e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009930:	f000 bc7c 	b.w	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009934:	4b77      	ldr	r3, [pc, #476]	; (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800993c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009940:	d108      	bne.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009942:	f107 030c 	add.w	r3, r7, #12
 8009946:	4618      	mov	r0, r3
 8009948:	f000 fde8 	bl	800a51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009950:	f000 bc6c 	b.w	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009954:	2300      	movs	r3, #0
 8009956:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009958:	f000 bc68 	b.w	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800995c:	4b6d      	ldr	r3, [pc, #436]	; (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800995e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009960:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009964:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009966:	4b6b      	ldr	r3, [pc, #428]	; (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f003 0304 	and.w	r3, r3, #4
 800996e:	2b04      	cmp	r3, #4
 8009970:	d10c      	bne.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8009972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009974:	2b00      	cmp	r3, #0
 8009976:	d109      	bne.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009978:	4b66      	ldr	r3, [pc, #408]	; (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	08db      	lsrs	r3, r3, #3
 800997e:	f003 0303 	and.w	r3, r3, #3
 8009982:	4a65      	ldr	r2, [pc, #404]	; (8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009984:	fa22 f303 	lsr.w	r3, r2, r3
 8009988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800998a:	e01f      	b.n	80099cc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800998c:	4b61      	ldr	r3, [pc, #388]	; (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009998:	d106      	bne.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800999a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800999c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099a0:	d102      	bne.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80099a2:	4b5e      	ldr	r3, [pc, #376]	; (8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80099a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099a6:	e011      	b.n	80099cc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099a8:	4b5a      	ldr	r3, [pc, #360]	; (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099b4:	d106      	bne.n	80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80099b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099bc:	d102      	bne.n	80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80099be:	4b58      	ldr	r3, [pc, #352]	; (8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80099c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099c2:	e003      	b.n	80099cc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80099c4:	2300      	movs	r3, #0
 80099c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80099c8:	f000 bc30 	b.w	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80099cc:	f000 bc2e 	b.w	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80099d0:	4b54      	ldr	r3, [pc, #336]	; (8009b24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80099d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099d4:	f000 bc2a 	b.w	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099dc:	f000 bc26 	b.w	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099e6:	f040 809f 	bne.w	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80099ea:	4b4a      	ldr	r3, [pc, #296]	; (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80099ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ee:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80099f2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80099f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099fa:	d04d      	beq.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80099fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a02:	f200 8084 	bhi.w	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a08:	2bc0      	cmp	r3, #192	; 0xc0
 8009a0a:	d07d      	beq.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0e:	2bc0      	cmp	r3, #192	; 0xc0
 8009a10:	d87d      	bhi.n	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a14:	2b80      	cmp	r3, #128	; 0x80
 8009a16:	d02d      	beq.n	8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8009a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1a:	2b80      	cmp	r3, #128	; 0x80
 8009a1c:	d877      	bhi.n	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d003      	beq.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8009a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a26:	2b40      	cmp	r3, #64	; 0x40
 8009a28:	d012      	beq.n	8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8009a2a:	e070      	b.n	8009b0e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a2c:	4b39      	ldr	r3, [pc, #228]	; (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a38:	d107      	bne.n	8009a4a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f000 fec0 	bl	800a7c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a48:	e3f0      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a4e:	e3ed      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a50:	4b30      	ldr	r3, [pc, #192]	; (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a5c:	d107      	bne.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a5e:	f107 0318 	add.w	r3, r7, #24
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 fc06 	bl	800a274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a6c:	e3de      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a72:	e3db      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a74:	4b27      	ldr	r3, [pc, #156]	; (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a80:	d107      	bne.n	8009a92 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a82:	f107 030c 	add.w	r3, r7, #12
 8009a86:	4618      	mov	r0, r3
 8009a88:	f000 fd48 	bl	800a51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a90:	e3cc      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009a92:	2300      	movs	r3, #0
 8009a94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a96:	e3c9      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009a98:	4b1e      	ldr	r3, [pc, #120]	; (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009aa0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009aa2:	4b1c      	ldr	r3, [pc, #112]	; (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 0304 	and.w	r3, r3, #4
 8009aaa:	2b04      	cmp	r3, #4
 8009aac:	d10c      	bne.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8009aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d109      	bne.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ab4:	4b17      	ldr	r3, [pc, #92]	; (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	08db      	lsrs	r3, r3, #3
 8009aba:	f003 0303 	and.w	r3, r3, #3
 8009abe:	4a16      	ldr	r2, [pc, #88]	; (8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ac6:	e01e      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ac8:	4b12      	ldr	r3, [pc, #72]	; (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ad4:	d106      	bne.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8009ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009adc:	d102      	bne.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009ade:	4b0f      	ldr	r3, [pc, #60]	; (8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ae2:	e010      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ae4:	4b0b      	ldr	r3, [pc, #44]	; (8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009af0:	d106      	bne.n	8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8009af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009af8:	d102      	bne.n	8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009afa:	4b09      	ldr	r3, [pc, #36]	; (8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009afe:	e002      	b.n	8009b06 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009b00:	2300      	movs	r3, #0
 8009b02:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009b04:	e392      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009b06:	e391      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009b08:	4b06      	ldr	r3, [pc, #24]	; (8009b24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b0c:	e38e      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b12:	e38b      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009b14:	58024400 	.word	0x58024400
 8009b18:	03d09000 	.word	0x03d09000
 8009b1c:	003d0900 	.word	0x003d0900
 8009b20:	007a1200 	.word	0x007a1200
 8009b24:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b2e:	f040 809c 	bne.w	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009b32:	4b9d      	ldr	r3, [pc, #628]	; (8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b36:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009b3a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b42:	d054      	beq.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8009b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b4a:	f200 808b 	bhi.w	8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b50:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009b54:	f000 8083 	beq.w	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8009b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009b5e:	f200 8081 	bhi.w	8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b68:	d02f      	beq.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b70:	d878      	bhi.n	8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d004      	beq.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8009b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b7e:	d012      	beq.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8009b80:	e070      	b.n	8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b82:	4b89      	ldr	r3, [pc, #548]	; (8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b8e:	d107      	bne.n	8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b94:	4618      	mov	r0, r3
 8009b96:	f000 fe15 	bl	800a7c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b9e:	e345      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ba4:	e342      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ba6:	4b80      	ldr	r3, [pc, #512]	; (8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bb2:	d107      	bne.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bb4:	f107 0318 	add.w	r3, r7, #24
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f000 fb5b 	bl	800a274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009bc2:	e333      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bc8:	e330      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009bca:	4b77      	ldr	r3, [pc, #476]	; (8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bd6:	d107      	bne.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bd8:	f107 030c 	add.w	r3, r7, #12
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f000 fc9d 	bl	800a51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009be6:	e321      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009be8:	2300      	movs	r3, #0
 8009bea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bec:	e31e      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009bee:	4b6e      	ldr	r3, [pc, #440]	; (8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009bf6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009bf8:	4b6b      	ldr	r3, [pc, #428]	; (8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f003 0304 	and.w	r3, r3, #4
 8009c00:	2b04      	cmp	r3, #4
 8009c02:	d10c      	bne.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8009c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d109      	bne.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c0a:	4b67      	ldr	r3, [pc, #412]	; (8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	08db      	lsrs	r3, r3, #3
 8009c10:	f003 0303 	and.w	r3, r3, #3
 8009c14:	4a65      	ldr	r2, [pc, #404]	; (8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009c16:	fa22 f303 	lsr.w	r3, r2, r3
 8009c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c1c:	e01e      	b.n	8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c1e:	4b62      	ldr	r3, [pc, #392]	; (8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c2a:	d106      	bne.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c32:	d102      	bne.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009c34:	4b5e      	ldr	r3, [pc, #376]	; (8009db0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c38:	e010      	b.n	8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c3a:	4b5b      	ldr	r3, [pc, #364]	; (8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c46:	d106      	bne.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c4e:	d102      	bne.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009c50:	4b58      	ldr	r3, [pc, #352]	; (8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c54:	e002      	b.n	8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009c5a:	e2e7      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009c5c:	e2e6      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009c5e:	4b56      	ldr	r3, [pc, #344]	; (8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009c60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c62:	e2e3      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8009c64:	2300      	movs	r3, #0
 8009c66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c68:	e2e0      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c70:	f040 80a7 	bne.w	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009c74:	4b4c      	ldr	r3, [pc, #304]	; (8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c78:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009c7c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c84:	d055      	beq.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8009c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c8c:	f200 8096 	bhi.w	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8009c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009c96:	f000 8084 	beq.w	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8009c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009ca0:	f200 808c 	bhi.w	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8009ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009caa:	d030      	beq.n	8009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8009cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cb2:	f200 8083 	bhi.w	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8009cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d004      	beq.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009cc2:	d012      	beq.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8009cc4:	e07a      	b.n	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009cc6:	4b38      	ldr	r3, [pc, #224]	; (8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cd2:	d107      	bne.n	8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f000 fd73 	bl	800a7c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ce2:	e2a3      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ce8:	e2a0      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009cea:	4b2f      	ldr	r3, [pc, #188]	; (8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cf6:	d107      	bne.n	8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cf8:	f107 0318 	add.w	r3, r7, #24
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f000 fab9 	bl	800a274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8009d06:	e291      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d0c:	e28e      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d0e:	4b26      	ldr	r3, [pc, #152]	; (8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d1a:	d107      	bne.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d1c:	f107 030c 	add.w	r3, r7, #12
 8009d20:	4618      	mov	r0, r3
 8009d22:	f000 fbfb 	bl	800a51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009d2a:	e27f      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d30:	e27c      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d32:	4b1d      	ldr	r3, [pc, #116]	; (8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d3a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d3c:	4b1a      	ldr	r3, [pc, #104]	; (8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f003 0304 	and.w	r3, r3, #4
 8009d44:	2b04      	cmp	r3, #4
 8009d46:	d10c      	bne.n	8009d62 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d109      	bne.n	8009d62 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d4e:	4b16      	ldr	r3, [pc, #88]	; (8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	08db      	lsrs	r3, r3, #3
 8009d54:	f003 0303 	and.w	r3, r3, #3
 8009d58:	4a14      	ldr	r2, [pc, #80]	; (8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d60:	e01e      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d62:	4b11      	ldr	r3, [pc, #68]	; (8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d6e:	d106      	bne.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8009d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d76:	d102      	bne.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009d78:	4b0d      	ldr	r3, [pc, #52]	; (8009db0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d7c:	e010      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d7e:	4b0a      	ldr	r3, [pc, #40]	; (8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d8a:	d106      	bne.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d92:	d102      	bne.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009d94:	4b07      	ldr	r3, [pc, #28]	; (8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d98:	e002      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009d9e:	e245      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009da0:	e244      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009da2:	4b05      	ldr	r3, [pc, #20]	; (8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009da4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009da6:	e241      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009da8:	58024400 	.word	0x58024400
 8009dac:	03d09000 	.word	0x03d09000
 8009db0:	003d0900 	.word	0x003d0900
 8009db4:	007a1200 	.word	0x007a1200
 8009db8:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009dc0:	e234      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dc8:	f040 809c 	bne.w	8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009dcc:	4b9b      	ldr	r3, [pc, #620]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dd0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009dd4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ddc:	d054      	beq.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8009dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009de4:	f200 808b 	bhi.w	8009efe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009dee:	f000 8083 	beq.w	8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8009df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009df8:	f200 8081 	bhi.w	8009efe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e02:	d02f      	beq.n	8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8009e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e0a:	d878      	bhi.n	8009efe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8009e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d004      	beq.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8009e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e18:	d012      	beq.n	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8009e1a:	e070      	b.n	8009efe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e1c:	4b87      	ldr	r3, [pc, #540]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e28:	d107      	bne.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f000 fcc8 	bl	800a7c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009e38:	e1f8      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e3e:	e1f5      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e40:	4b7e      	ldr	r3, [pc, #504]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e4c:	d107      	bne.n	8009e5e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e4e:	f107 0318 	add.w	r3, r7, #24
 8009e52:	4618      	mov	r0, r3
 8009e54:	f000 fa0e 	bl	800a274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009e5c:	e1e6      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e62:	e1e3      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e64:	4b75      	ldr	r3, [pc, #468]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e70:	d107      	bne.n	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e72:	f107 030c 	add.w	r3, r7, #12
 8009e76:	4618      	mov	r0, r3
 8009e78:	f000 fb50 	bl	800a51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009e80:	e1d4      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009e82:	2300      	movs	r3, #0
 8009e84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e86:	e1d1      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009e88:	4b6c      	ldr	r3, [pc, #432]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e90:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e92:	4b6a      	ldr	r3, [pc, #424]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f003 0304 	and.w	r3, r3, #4
 8009e9a:	2b04      	cmp	r3, #4
 8009e9c:	d10c      	bne.n	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d109      	bne.n	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ea4:	4b65      	ldr	r3, [pc, #404]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	08db      	lsrs	r3, r3, #3
 8009eaa:	f003 0303 	and.w	r3, r3, #3
 8009eae:	4a64      	ldr	r2, [pc, #400]	; (800a040 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8009eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009eb6:	e01e      	b.n	8009ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009eb8:	4b60      	ldr	r3, [pc, #384]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ec4:	d106      	bne.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8009ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ecc:	d102      	bne.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009ece:	4b5d      	ldr	r3, [pc, #372]	; (800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8009ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ed2:	e010      	b.n	8009ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ed4:	4b59      	ldr	r3, [pc, #356]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ee0:	d106      	bne.n	8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ee8:	d102      	bne.n	8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009eea:	4b57      	ldr	r3, [pc, #348]	; (800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8009eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009eee:	e002      	b.n	8009ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009ef4:	e19a      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009ef6:	e199      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009ef8:	4b54      	ldr	r3, [pc, #336]	; (800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009efa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009efc:	e196      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8009efe:	2300      	movs	r3, #0
 8009f00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f02:	e193      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009f0a:	d173      	bne.n	8009ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009f0c:	4b4b      	ldr	r3, [pc, #300]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009f14:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f1c:	d02f      	beq.n	8009f7e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8009f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f24:	d863      	bhi.n	8009fee <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8009f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d004      	beq.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8009f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f32:	d012      	beq.n	8009f5a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8009f34:	e05b      	b.n	8009fee <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f36:	4b41      	ldr	r3, [pc, #260]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f42:	d107      	bne.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f44:	f107 0318 	add.w	r3, r7, #24
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f000 f993 	bl	800a274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009f52:	e16b      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009f54:	2300      	movs	r3, #0
 8009f56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f58:	e168      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f5a:	4b38      	ldr	r3, [pc, #224]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f66:	d107      	bne.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f68:	f107 030c 	add.w	r3, r7, #12
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f000 fad5 	bl	800a51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009f76:	e159      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f7c:	e156      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009f7e:	4b2f      	ldr	r3, [pc, #188]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f86:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f88:	4b2c      	ldr	r3, [pc, #176]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 0304 	and.w	r3, r3, #4
 8009f90:	2b04      	cmp	r3, #4
 8009f92:	d10c      	bne.n	8009fae <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8009f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d109      	bne.n	8009fae <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f9a:	4b28      	ldr	r3, [pc, #160]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	08db      	lsrs	r3, r3, #3
 8009fa0:	f003 0303 	and.w	r3, r3, #3
 8009fa4:	4a26      	ldr	r2, [pc, #152]	; (800a040 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8009fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8009faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fac:	e01e      	b.n	8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fae:	4b23      	ldr	r3, [pc, #140]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fba:	d106      	bne.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8009fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fc2:	d102      	bne.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009fc4:	4b1f      	ldr	r3, [pc, #124]	; (800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8009fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fc8:	e010      	b.n	8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fca:	4b1c      	ldr	r3, [pc, #112]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fd6:	d106      	bne.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8009fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fde:	d102      	bne.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009fe0:	4b19      	ldr	r3, [pc, #100]	; (800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8009fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fe4:	e002      	b.n	8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009fea:	e11f      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009fec:	e11e      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ff2:	e11b      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ffa:	d13e      	bne.n	800a07a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009ffc:	4b0f      	ldr	r3, [pc, #60]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a004:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d004      	beq.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800a00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a012:	d01d      	beq.n	800a050 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a014:	e02e      	b.n	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a016:	4b09      	ldr	r3, [pc, #36]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a01e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a022:	d107      	bne.n	800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 fbcb 	bl	800a7c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a030:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a032:	e0fb      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a034:	2300      	movs	r3, #0
 800a036:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a038:	e0f8      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a03a:	bf00      	nop
 800a03c:	58024400 	.word	0x58024400
 800a040:	03d09000 	.word	0x03d09000
 800a044:	003d0900 	.word	0x003d0900
 800a048:	007a1200 	.word	0x007a1200
 800a04c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a050:	4b79      	ldr	r3, [pc, #484]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a058:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a05c:	d107      	bne.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a05e:	f107 0318 	add.w	r3, r7, #24
 800a062:	4618      	mov	r0, r3
 800a064:	f000 f906 	bl	800a274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a068:	6a3b      	ldr	r3, [r7, #32]
 800a06a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a06c:	e0de      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a06e:	2300      	movs	r3, #0
 800a070:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a072:	e0db      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800a074:	2300      	movs	r3, #0
 800a076:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a078:	e0d8      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a080:	f040 8085 	bne.w	800a18e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a084:	4b6c      	ldr	r3, [pc, #432]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a088:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a08c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a094:	d06b      	beq.n	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800a096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a098:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a09c:	d874      	bhi.n	800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0a4:	d056      	beq.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800a0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0ac:	d86c      	bhi.n	800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0b4:	d03b      	beq.n	800a12e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800a0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0bc:	d864      	bhi.n	800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0c4:	d021      	beq.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800a0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0cc:	d85c      	bhi.n	800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800a0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d004      	beq.n	800a0de <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0da:	d004      	beq.n	800a0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800a0dc:	e054      	b.n	800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a0de:	f000 f8b3 	bl	800a248 <HAL_RCCEx_GetD3PCLK1Freq>
 800a0e2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a0e4:	e0a2      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0e6:	4b54      	ldr	r3, [pc, #336]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0f2:	d107      	bne.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0f4:	f107 0318 	add.w	r3, r7, #24
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f000 f8bb 	bl	800a274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a102:	e093      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a104:	2300      	movs	r3, #0
 800a106:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a108:	e090      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a10a:	4b4b      	ldr	r3, [pc, #300]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a112:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a116:	d107      	bne.n	800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a118:	f107 030c 	add.w	r3, r7, #12
 800a11c:	4618      	mov	r0, r3
 800a11e:	f000 f9fd 	bl	800a51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a126:	e081      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a128:	2300      	movs	r3, #0
 800a12a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a12c:	e07e      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a12e:	4b42      	ldr	r3, [pc, #264]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f003 0304 	and.w	r3, r3, #4
 800a136:	2b04      	cmp	r3, #4
 800a138:	d109      	bne.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a13a:	4b3f      	ldr	r3, [pc, #252]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	08db      	lsrs	r3, r3, #3
 800a140:	f003 0303 	and.w	r3, r3, #3
 800a144:	4a3d      	ldr	r2, [pc, #244]	; (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a146:	fa22 f303 	lsr.w	r3, r2, r3
 800a14a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a14c:	e06e      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a14e:	2300      	movs	r3, #0
 800a150:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a152:	e06b      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a154:	4b38      	ldr	r3, [pc, #224]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a15c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a160:	d102      	bne.n	800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800a162:	4b37      	ldr	r3, [pc, #220]	; (800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a164:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a166:	e061      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a168:	2300      	movs	r3, #0
 800a16a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a16c:	e05e      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a16e:	4b32      	ldr	r3, [pc, #200]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a176:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a17a:	d102      	bne.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800a17c:	4b31      	ldr	r3, [pc, #196]	; (800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a17e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a180:	e054      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a182:	2300      	movs	r3, #0
 800a184:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a186:	e051      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a18c:	e04e      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a194:	d148      	bne.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a196:	4b28      	ldr	r3, [pc, #160]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a19a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a19e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1a6:	d02a      	beq.n	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1ae:	d838      	bhi.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800a1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d004      	beq.n	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800a1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1bc:	d00d      	beq.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800a1be:	e030      	b.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a1c0:	4b1d      	ldr	r3, [pc, #116]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1cc:	d102      	bne.n	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800a1ce:	4b1d      	ldr	r3, [pc, #116]	; (800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a1d2:	e02b      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1d8:	e028      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1da:	4b17      	ldr	r3, [pc, #92]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1e6:	d107      	bne.n	800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 fae9 	bl	800a7c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a1f6:	e019      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1fc:	e016      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1fe:	4b0e      	ldr	r3, [pc, #56]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a20a:	d107      	bne.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a20c:	f107 0318 	add.w	r3, r7, #24
 800a210:	4618      	mov	r0, r3
 800a212:	f000 f82f 	bl	800a274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a21a:	e007      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800a21c:	2300      	movs	r3, #0
 800a21e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a220:	e004      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a222:	2300      	movs	r3, #0
 800a224:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a226:	e001      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3740      	adds	r7, #64	; 0x40
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	58024400 	.word	0x58024400
 800a23c:	03d09000 	.word	0x03d09000
 800a240:	003d0900 	.word	0x003d0900
 800a244:	007a1200 	.word	0x007a1200

0800a248 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a24c:	f7fe fb46 	bl	80088dc <HAL_RCC_GetHCLKFreq>
 800a250:	4602      	mov	r2, r0
 800a252:	4b06      	ldr	r3, [pc, #24]	; (800a26c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a254:	6a1b      	ldr	r3, [r3, #32]
 800a256:	091b      	lsrs	r3, r3, #4
 800a258:	f003 0307 	and.w	r3, r3, #7
 800a25c:	4904      	ldr	r1, [pc, #16]	; (800a270 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a25e:	5ccb      	ldrb	r3, [r1, r3]
 800a260:	f003 031f 	and.w	r3, r3, #31
 800a264:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a268:	4618      	mov	r0, r3
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	58024400 	.word	0x58024400
 800a270:	0802a4a8 	.word	0x0802a4a8

0800a274 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a274:	b480      	push	{r7}
 800a276:	b089      	sub	sp, #36	; 0x24
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a27c:	4ba1      	ldr	r3, [pc, #644]	; (800a504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a280:	f003 0303 	and.w	r3, r3, #3
 800a284:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a286:	4b9f      	ldr	r3, [pc, #636]	; (800a504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a28a:	0b1b      	lsrs	r3, r3, #12
 800a28c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a290:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a292:	4b9c      	ldr	r3, [pc, #624]	; (800a504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a296:	091b      	lsrs	r3, r3, #4
 800a298:	f003 0301 	and.w	r3, r3, #1
 800a29c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a29e:	4b99      	ldr	r3, [pc, #612]	; (800a504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a2:	08db      	lsrs	r3, r3, #3
 800a2a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	fb02 f303 	mul.w	r3, r2, r3
 800a2ae:	ee07 3a90 	vmov	s15, r3
 800a2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f000 8111 	beq.w	800a4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	f000 8083 	beq.w	800a3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	2b02      	cmp	r3, #2
 800a2ce:	f200 80a1 	bhi.w	800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d003      	beq.n	800a2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d056      	beq.n	800a38c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a2de:	e099      	b.n	800a414 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2e0:	4b88      	ldr	r3, [pc, #544]	; (800a504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f003 0320 	and.w	r3, r3, #32
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d02d      	beq.n	800a348 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2ec:	4b85      	ldr	r3, [pc, #532]	; (800a504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	08db      	lsrs	r3, r3, #3
 800a2f2:	f003 0303 	and.w	r3, r3, #3
 800a2f6:	4a84      	ldr	r2, [pc, #528]	; (800a508 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a2f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a2fc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	ee07 3a90 	vmov	s15, r3
 800a304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	ee07 3a90 	vmov	s15, r3
 800a30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a316:	4b7b      	ldr	r3, [pc, #492]	; (800a504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a31a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a31e:	ee07 3a90 	vmov	s15, r3
 800a322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a326:	ed97 6a03 	vldr	s12, [r7, #12]
 800a32a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a50c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a32e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a33a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a33e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a342:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a346:	e087      	b.n	800a458 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	ee07 3a90 	vmov	s15, r3
 800a34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a352:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a510 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a35a:	4b6a      	ldr	r3, [pc, #424]	; (800a504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a35c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a35e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a362:	ee07 3a90 	vmov	s15, r3
 800a366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a36a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a36e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a50c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a37a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a37e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a382:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a386:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a38a:	e065      	b.n	800a458 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	ee07 3a90 	vmov	s15, r3
 800a392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a396:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a514 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a39a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a39e:	4b59      	ldr	r3, [pc, #356]	; (800a504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3a6:	ee07 3a90 	vmov	s15, r3
 800a3aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a50c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a3b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3ce:	e043      	b.n	800a458 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	ee07 3a90 	vmov	s15, r3
 800a3d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a518 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a3de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3e2:	4b48      	ldr	r3, [pc, #288]	; (800a504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ea:	ee07 3a90 	vmov	s15, r3
 800a3ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a50c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a3fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a40a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a40e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a412:	e021      	b.n	800a458 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	ee07 3a90 	vmov	s15, r3
 800a41a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a41e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a514 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a426:	4b37      	ldr	r3, [pc, #220]	; (800a504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a42a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a42e:	ee07 3a90 	vmov	s15, r3
 800a432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a436:	ed97 6a03 	vldr	s12, [r7, #12]
 800a43a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a50c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a43e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a44a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a44e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a452:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a456:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a458:	4b2a      	ldr	r3, [pc, #168]	; (800a504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a45c:	0a5b      	lsrs	r3, r3, #9
 800a45e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a462:	ee07 3a90 	vmov	s15, r3
 800a466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a46a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a46e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a472:	edd7 6a07 	vldr	s13, [r7, #28]
 800a476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a47a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a47e:	ee17 2a90 	vmov	r2, s15
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a486:	4b1f      	ldr	r3, [pc, #124]	; (800a504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48a:	0c1b      	lsrs	r3, r3, #16
 800a48c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a490:	ee07 3a90 	vmov	s15, r3
 800a494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a498:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a49c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4ac:	ee17 2a90 	vmov	r2, s15
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a4b4:	4b13      	ldr	r3, [pc, #76]	; (800a504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b8:	0e1b      	lsrs	r3, r3, #24
 800a4ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4be:	ee07 3a90 	vmov	s15, r3
 800a4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4da:	ee17 2a90 	vmov	r2, s15
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a4e2:	e008      	b.n	800a4f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	609a      	str	r2, [r3, #8]
}
 800a4f6:	bf00      	nop
 800a4f8:	3724      	adds	r7, #36	; 0x24
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	58024400 	.word	0x58024400
 800a508:	03d09000 	.word	0x03d09000
 800a50c:	46000000 	.word	0x46000000
 800a510:	4c742400 	.word	0x4c742400
 800a514:	4a742400 	.word	0x4a742400
 800a518:	4af42400 	.word	0x4af42400

0800a51c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b089      	sub	sp, #36	; 0x24
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a524:	4ba1      	ldr	r3, [pc, #644]	; (800a7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a528:	f003 0303 	and.w	r3, r3, #3
 800a52c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a52e:	4b9f      	ldr	r3, [pc, #636]	; (800a7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a532:	0d1b      	lsrs	r3, r3, #20
 800a534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a538:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a53a:	4b9c      	ldr	r3, [pc, #624]	; (800a7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53e:	0a1b      	lsrs	r3, r3, #8
 800a540:	f003 0301 	and.w	r3, r3, #1
 800a544:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a546:	4b99      	ldr	r3, [pc, #612]	; (800a7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a54a:	08db      	lsrs	r3, r3, #3
 800a54c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a550:	693a      	ldr	r2, [r7, #16]
 800a552:	fb02 f303 	mul.w	r3, r2, r3
 800a556:	ee07 3a90 	vmov	s15, r3
 800a55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a55e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	2b00      	cmp	r3, #0
 800a566:	f000 8111 	beq.w	800a78c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	f000 8083 	beq.w	800a678 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	2b02      	cmp	r3, #2
 800a576:	f200 80a1 	bhi.w	800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d003      	beq.n	800a588 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	2b01      	cmp	r3, #1
 800a584:	d056      	beq.n	800a634 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a586:	e099      	b.n	800a6bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a588:	4b88      	ldr	r3, [pc, #544]	; (800a7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 0320 	and.w	r3, r3, #32
 800a590:	2b00      	cmp	r3, #0
 800a592:	d02d      	beq.n	800a5f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a594:	4b85      	ldr	r3, [pc, #532]	; (800a7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	08db      	lsrs	r3, r3, #3
 800a59a:	f003 0303 	and.w	r3, r3, #3
 800a59e:	4a84      	ldr	r2, [pc, #528]	; (800a7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a5a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5a4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	ee07 3a90 	vmov	s15, r3
 800a5ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	ee07 3a90 	vmov	s15, r3
 800a5b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5be:	4b7b      	ldr	r3, [pc, #492]	; (800a7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5c6:	ee07 3a90 	vmov	s15, r3
 800a5ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a5d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a5ee:	e087      	b.n	800a700 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	ee07 3a90 	vmov	s15, r3
 800a5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a5fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a602:	4b6a      	ldr	r3, [pc, #424]	; (800a7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a60a:	ee07 3a90 	vmov	s15, r3
 800a60e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a612:	ed97 6a03 	vldr	s12, [r7, #12]
 800a616:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a61a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a61e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a62a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a62e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a632:	e065      	b.n	800a700 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	ee07 3a90 	vmov	s15, r3
 800a63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a63e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a646:	4b59      	ldr	r3, [pc, #356]	; (800a7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a64e:	ee07 3a90 	vmov	s15, r3
 800a652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a656:	ed97 6a03 	vldr	s12, [r7, #12]
 800a65a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a65e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a66a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a66e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a672:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a676:	e043      	b.n	800a700 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	ee07 3a90 	vmov	s15, r3
 800a67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a682:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a68a:	4b48      	ldr	r3, [pc, #288]	; (800a7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a68c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a68e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a692:	ee07 3a90 	vmov	s15, r3
 800a696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a69a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a69e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a6a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a6ba:	e021      	b.n	800a700 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	ee07 3a90 	vmov	s15, r3
 800a6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a6ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ce:	4b37      	ldr	r3, [pc, #220]	; (800a7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6d6:	ee07 3a90 	vmov	s15, r3
 800a6da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6de:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a6e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a6fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a700:	4b2a      	ldr	r3, [pc, #168]	; (800a7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a704:	0a5b      	lsrs	r3, r3, #9
 800a706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a70a:	ee07 3a90 	vmov	s15, r3
 800a70e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a712:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a716:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a71a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a71e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a726:	ee17 2a90 	vmov	r2, s15
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a72e:	4b1f      	ldr	r3, [pc, #124]	; (800a7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a732:	0c1b      	lsrs	r3, r3, #16
 800a734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a738:	ee07 3a90 	vmov	s15, r3
 800a73c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a740:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a744:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a748:	edd7 6a07 	vldr	s13, [r7, #28]
 800a74c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a754:	ee17 2a90 	vmov	r2, s15
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a75c:	4b13      	ldr	r3, [pc, #76]	; (800a7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a75e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a760:	0e1b      	lsrs	r3, r3, #24
 800a762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a766:	ee07 3a90 	vmov	s15, r3
 800a76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a76e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a772:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a776:	edd7 6a07 	vldr	s13, [r7, #28]
 800a77a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a77e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a782:	ee17 2a90 	vmov	r2, s15
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a78a:	e008      	b.n	800a79e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	609a      	str	r2, [r3, #8]
}
 800a79e:	bf00      	nop
 800a7a0:	3724      	adds	r7, #36	; 0x24
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	58024400 	.word	0x58024400
 800a7b0:	03d09000 	.word	0x03d09000
 800a7b4:	46000000 	.word	0x46000000
 800a7b8:	4c742400 	.word	0x4c742400
 800a7bc:	4a742400 	.word	0x4a742400
 800a7c0:	4af42400 	.word	0x4af42400

0800a7c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b089      	sub	sp, #36	; 0x24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a7cc:	4ba0      	ldr	r3, [pc, #640]	; (800aa50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d0:	f003 0303 	and.w	r3, r3, #3
 800a7d4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a7d6:	4b9e      	ldr	r3, [pc, #632]	; (800aa50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7da:	091b      	lsrs	r3, r3, #4
 800a7dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7e0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a7e2:	4b9b      	ldr	r3, [pc, #620]	; (800aa50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a7ec:	4b98      	ldr	r3, [pc, #608]	; (800aa50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7f0:	08db      	lsrs	r3, r3, #3
 800a7f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a7f6:	693a      	ldr	r2, [r7, #16]
 800a7f8:	fb02 f303 	mul.w	r3, r2, r3
 800a7fc:	ee07 3a90 	vmov	s15, r3
 800a800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a804:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	f000 8111 	beq.w	800aa32 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	2b02      	cmp	r3, #2
 800a814:	f000 8083 	beq.w	800a91e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	f200 80a1 	bhi.w	800a962 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d003      	beq.n	800a82e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a826:	69bb      	ldr	r3, [r7, #24]
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d056      	beq.n	800a8da <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a82c:	e099      	b.n	800a962 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a82e:	4b88      	ldr	r3, [pc, #544]	; (800aa50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 0320 	and.w	r3, r3, #32
 800a836:	2b00      	cmp	r3, #0
 800a838:	d02d      	beq.n	800a896 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a83a:	4b85      	ldr	r3, [pc, #532]	; (800aa50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	08db      	lsrs	r3, r3, #3
 800a840:	f003 0303 	and.w	r3, r3, #3
 800a844:	4a83      	ldr	r2, [pc, #524]	; (800aa54 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a846:	fa22 f303 	lsr.w	r3, r2, r3
 800a84a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	ee07 3a90 	vmov	s15, r3
 800a852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	ee07 3a90 	vmov	s15, r3
 800a85c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a864:	4b7a      	ldr	r3, [pc, #488]	; (800aa50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a86c:	ee07 3a90 	vmov	s15, r3
 800a870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a874:	ed97 6a03 	vldr	s12, [r7, #12]
 800a878:	eddf 5a77 	vldr	s11, [pc, #476]	; 800aa58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a87c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a880:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a884:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a888:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a88c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a890:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a894:	e087      	b.n	800a9a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	ee07 3a90 	vmov	s15, r3
 800a89c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8a0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800aa5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a8a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8a8:	4b69      	ldr	r3, [pc, #420]	; (800aa50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8b0:	ee07 3a90 	vmov	s15, r3
 800a8b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8bc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800aa58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a8c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8d8:	e065      	b.n	800a9a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	ee07 3a90 	vmov	s15, r3
 800a8e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8e4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800aa60 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a8e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ec:	4b58      	ldr	r3, [pc, #352]	; (800aa50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8f4:	ee07 3a90 	vmov	s15, r3
 800a8f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a900:	eddf 5a55 	vldr	s11, [pc, #340]	; 800aa58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a904:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a908:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a90c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a910:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a914:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a918:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a91c:	e043      	b.n	800a9a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	ee07 3a90 	vmov	s15, r3
 800a924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a928:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800aa64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a92c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a930:	4b47      	ldr	r3, [pc, #284]	; (800aa50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a938:	ee07 3a90 	vmov	s15, r3
 800a93c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a940:	ed97 6a03 	vldr	s12, [r7, #12]
 800a944:	eddf 5a44 	vldr	s11, [pc, #272]	; 800aa58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a948:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a94c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a950:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a95c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a960:	e021      	b.n	800a9a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	ee07 3a90 	vmov	s15, r3
 800a968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a96c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800aa5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a970:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a974:	4b36      	ldr	r3, [pc, #216]	; (800aa50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a97c:	ee07 3a90 	vmov	s15, r3
 800a980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a984:	ed97 6a03 	vldr	s12, [r7, #12]
 800a988:	eddf 5a33 	vldr	s11, [pc, #204]	; 800aa58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a98c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a990:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a994:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a998:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a99c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a9a4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a9a6:	4b2a      	ldr	r3, [pc, #168]	; (800aa50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9aa:	0a5b      	lsrs	r3, r3, #9
 800a9ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9b0:	ee07 3a90 	vmov	s15, r3
 800a9b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9cc:	ee17 2a90 	vmov	r2, s15
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a9d4:	4b1e      	ldr	r3, [pc, #120]	; (800aa50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d8:	0c1b      	lsrs	r3, r3, #16
 800a9da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9de:	ee07 3a90 	vmov	s15, r3
 800a9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9fa:	ee17 2a90 	vmov	r2, s15
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800aa02:	4b13      	ldr	r3, [pc, #76]	; (800aa50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa06:	0e1b      	lsrs	r3, r3, #24
 800aa08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa0c:	ee07 3a90 	vmov	s15, r3
 800aa10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa28:	ee17 2a90 	vmov	r2, s15
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800aa30:	e008      	b.n	800aa44 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	609a      	str	r2, [r3, #8]
}
 800aa44:	bf00      	nop
 800aa46:	3724      	adds	r7, #36	; 0x24
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr
 800aa50:	58024400 	.word	0x58024400
 800aa54:	03d09000 	.word	0x03d09000
 800aa58:	46000000 	.word	0x46000000
 800aa5c:	4c742400 	.word	0x4c742400
 800aa60:	4a742400 	.word	0x4a742400
 800aa64:	4af42400 	.word	0x4af42400

0800aa68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa72:	2300      	movs	r3, #0
 800aa74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aa76:	4b53      	ldr	r3, [pc, #332]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800aa78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa7a:	f003 0303 	and.w	r3, r3, #3
 800aa7e:	2b03      	cmp	r3, #3
 800aa80:	d101      	bne.n	800aa86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e099      	b.n	800abba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aa86:	4b4f      	ldr	r3, [pc, #316]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a4e      	ldr	r2, [pc, #312]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800aa8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aa90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa92:	f7f9 fe6f 	bl	8004774 <HAL_GetTick>
 800aa96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aa98:	e008      	b.n	800aaac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aa9a:	f7f9 fe6b 	bl	8004774 <HAL_GetTick>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	1ad3      	subs	r3, r2, r3
 800aaa4:	2b02      	cmp	r3, #2
 800aaa6:	d901      	bls.n	800aaac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aaa8:	2303      	movs	r3, #3
 800aaaa:	e086      	b.n	800abba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aaac:	4b45      	ldr	r3, [pc, #276]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1f0      	bne.n	800aa9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aab8:	4b42      	ldr	r3, [pc, #264]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800aaba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aabc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	031b      	lsls	r3, r3, #12
 800aac6:	493f      	ldr	r1, [pc, #252]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800aac8:	4313      	orrs	r3, r2
 800aaca:	628b      	str	r3, [r1, #40]	; 0x28
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	3b01      	subs	r3, #1
 800aad2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	689b      	ldr	r3, [r3, #8]
 800aada:	3b01      	subs	r3, #1
 800aadc:	025b      	lsls	r3, r3, #9
 800aade:	b29b      	uxth	r3, r3
 800aae0:	431a      	orrs	r2, r3
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	3b01      	subs	r3, #1
 800aae8:	041b      	lsls	r3, r3, #16
 800aaea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aaee:	431a      	orrs	r2, r3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	061b      	lsls	r3, r3, #24
 800aaf8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aafc:	4931      	ldr	r1, [pc, #196]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800aafe:	4313      	orrs	r3, r2
 800ab00:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ab02:	4b30      	ldr	r3, [pc, #192]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800ab04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	695b      	ldr	r3, [r3, #20]
 800ab0e:	492d      	ldr	r1, [pc, #180]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800ab10:	4313      	orrs	r3, r2
 800ab12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ab14:	4b2b      	ldr	r3, [pc, #172]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800ab16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab18:	f023 0220 	bic.w	r2, r3, #32
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	699b      	ldr	r3, [r3, #24]
 800ab20:	4928      	ldr	r1, [pc, #160]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800ab22:	4313      	orrs	r3, r2
 800ab24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ab26:	4b27      	ldr	r3, [pc, #156]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800ab28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2a:	4a26      	ldr	r2, [pc, #152]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800ab2c:	f023 0310 	bic.w	r3, r3, #16
 800ab30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ab32:	4b24      	ldr	r3, [pc, #144]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800ab34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab36:	4b24      	ldr	r3, [pc, #144]	; (800abc8 <RCCEx_PLL2_Config+0x160>)
 800ab38:	4013      	ands	r3, r2
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	69d2      	ldr	r2, [r2, #28]
 800ab3e:	00d2      	lsls	r2, r2, #3
 800ab40:	4920      	ldr	r1, [pc, #128]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800ab42:	4313      	orrs	r3, r2
 800ab44:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ab46:	4b1f      	ldr	r3, [pc, #124]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800ab48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4a:	4a1e      	ldr	r2, [pc, #120]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800ab4c:	f043 0310 	orr.w	r3, r3, #16
 800ab50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d106      	bne.n	800ab66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ab58:	4b1a      	ldr	r3, [pc, #104]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800ab5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5c:	4a19      	ldr	r2, [pc, #100]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800ab5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab62:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab64:	e00f      	b.n	800ab86 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d106      	bne.n	800ab7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ab6c:	4b15      	ldr	r3, [pc, #84]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800ab6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab70:	4a14      	ldr	r2, [pc, #80]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800ab72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab76:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab78:	e005      	b.n	800ab86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ab7a:	4b12      	ldr	r3, [pc, #72]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800ab7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7e:	4a11      	ldr	r2, [pc, #68]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800ab80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ab84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ab86:	4b0f      	ldr	r3, [pc, #60]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a0e      	ldr	r2, [pc, #56]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800ab8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ab90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab92:	f7f9 fdef 	bl	8004774 <HAL_GetTick>
 800ab96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ab98:	e008      	b.n	800abac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ab9a:	f7f9 fdeb 	bl	8004774 <HAL_GetTick>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	1ad3      	subs	r3, r2, r3
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	d901      	bls.n	800abac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aba8:	2303      	movs	r3, #3
 800abaa:	e006      	b.n	800abba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800abac:	4b05      	ldr	r3, [pc, #20]	; (800abc4 <RCCEx_PLL2_Config+0x15c>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d0f0      	beq.n	800ab9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	58024400 	.word	0x58024400
 800abc8:	ffff0007 	.word	0xffff0007

0800abcc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800abd6:	2300      	movs	r3, #0
 800abd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800abda:	4b53      	ldr	r3, [pc, #332]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800abdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abde:	f003 0303 	and.w	r3, r3, #3
 800abe2:	2b03      	cmp	r3, #3
 800abe4:	d101      	bne.n	800abea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e099      	b.n	800ad1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800abea:	4b4f      	ldr	r3, [pc, #316]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a4e      	ldr	r2, [pc, #312]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800abf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800abf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abf6:	f7f9 fdbd 	bl	8004774 <HAL_GetTick>
 800abfa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800abfc:	e008      	b.n	800ac10 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800abfe:	f7f9 fdb9 	bl	8004774 <HAL_GetTick>
 800ac02:	4602      	mov	r2, r0
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	1ad3      	subs	r3, r2, r3
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	d901      	bls.n	800ac10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	e086      	b.n	800ad1e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ac10:	4b45      	ldr	r3, [pc, #276]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d1f0      	bne.n	800abfe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ac1c:	4b42      	ldr	r3, [pc, #264]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800ac1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac20:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	051b      	lsls	r3, r3, #20
 800ac2a:	493f      	ldr	r1, [pc, #252]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	628b      	str	r3, [r1, #40]	; 0x28
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	3b01      	subs	r3, #1
 800ac36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	025b      	lsls	r3, r3, #9
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	431a      	orrs	r2, r3
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	041b      	lsls	r3, r3, #16
 800ac4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ac52:	431a      	orrs	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	691b      	ldr	r3, [r3, #16]
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	061b      	lsls	r3, r3, #24
 800ac5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ac60:	4931      	ldr	r1, [pc, #196]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800ac62:	4313      	orrs	r3, r2
 800ac64:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ac66:	4b30      	ldr	r3, [pc, #192]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800ac68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	695b      	ldr	r3, [r3, #20]
 800ac72:	492d      	ldr	r1, [pc, #180]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800ac74:	4313      	orrs	r3, r2
 800ac76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ac78:	4b2b      	ldr	r3, [pc, #172]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800ac7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	699b      	ldr	r3, [r3, #24]
 800ac84:	4928      	ldr	r1, [pc, #160]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800ac86:	4313      	orrs	r3, r2
 800ac88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ac8a:	4b27      	ldr	r3, [pc, #156]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800ac8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac8e:	4a26      	ldr	r2, [pc, #152]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800ac90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ac96:	4b24      	ldr	r3, [pc, #144]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800ac98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac9a:	4b24      	ldr	r3, [pc, #144]	; (800ad2c <RCCEx_PLL3_Config+0x160>)
 800ac9c:	4013      	ands	r3, r2
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	69d2      	ldr	r2, [r2, #28]
 800aca2:	00d2      	lsls	r2, r2, #3
 800aca4:	4920      	ldr	r1, [pc, #128]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800aca6:	4313      	orrs	r3, r2
 800aca8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800acaa:	4b1f      	ldr	r3, [pc, #124]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800acac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acae:	4a1e      	ldr	r2, [pc, #120]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800acb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d106      	bne.n	800acca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800acbc:	4b1a      	ldr	r3, [pc, #104]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800acbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc0:	4a19      	ldr	r2, [pc, #100]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800acc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800acc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800acc8:	e00f      	b.n	800acea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	2b01      	cmp	r3, #1
 800acce:	d106      	bne.n	800acde <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800acd0:	4b15      	ldr	r3, [pc, #84]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800acd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd4:	4a14      	ldr	r2, [pc, #80]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800acd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800acda:	62d3      	str	r3, [r2, #44]	; 0x2c
 800acdc:	e005      	b.n	800acea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800acde:	4b12      	ldr	r3, [pc, #72]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800ace0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace2:	4a11      	ldr	r2, [pc, #68]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800ace4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ace8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800acea:	4b0f      	ldr	r3, [pc, #60]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a0e      	ldr	r2, [pc, #56]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800acf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acf6:	f7f9 fd3d 	bl	8004774 <HAL_GetTick>
 800acfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800acfc:	e008      	b.n	800ad10 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800acfe:	f7f9 fd39 	bl	8004774 <HAL_GetTick>
 800ad02:	4602      	mov	r2, r0
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	1ad3      	subs	r3, r2, r3
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	d901      	bls.n	800ad10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ad0c:	2303      	movs	r3, #3
 800ad0e:	e006      	b.n	800ad1e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ad10:	4b05      	ldr	r3, [pc, #20]	; (800ad28 <RCCEx_PLL3_Config+0x15c>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d0f0      	beq.n	800acfe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	58024400 	.word	0x58024400
 800ad2c:	ffff0007 	.word	0xffff0007

0800ad30 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d101      	bne.n	800ad42 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e0a8      	b.n	800ae94 <HAL_SMBUS_Init+0x164>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d106      	bne.n	800ad58 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f7f5 ffec 	bl	8000d30 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2202      	movs	r2, #2
 800ad5c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f022 0201 	bic.w	r2, r2, #1
 800ad6c:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685a      	ldr	r2, [r3, #4]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ad7a:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	695a      	ldr	r2, [r3, #20]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad8a:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	695a      	ldr	r2, [r3, #20]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800ad9a:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ada4:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	689a      	ldr	r2, [r3, #8]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800adb4:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d012      	beq.n	800ade4 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d107      	bne.n	800add6 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	68da      	ldr	r2, [r3, #12]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800add2:	609a      	str	r2, [r3, #8]
 800add4:	e006      	b.n	800ade4 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	68da      	ldr	r2, [r3, #12]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ade2:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d104      	bne.n	800adf6 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800adf4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	6859      	ldr	r1, [r3, #4]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	4b26      	ldr	r3, [pc, #152]	; (800ae9c <HAL_SMBUS_Init+0x16c>)
 800ae02:	430b      	orrs	r3, r1
 800ae04:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	695a      	ldr	r2, [r3, #20]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	69db      	ldr	r3, [r3, #28]
 800ae16:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	430a      	orrs	r2, r1
 800ae1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6a1a      	ldr	r2, [r3, #32]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae28:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800ae2e:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae34:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800ae40:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800ae42:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae4c:	d110      	bne.n	800ae70 <HAL_SMBUS_Init+0x140>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d004      	beq.n	800ae60 <HAL_SMBUS_Init+0x130>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800ae5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae5e:	d107      	bne.n	800ae70 <HAL_SMBUS_Init+0x140>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ae6e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f042 0201 	orr.w	r2, r2, #1
 800ae7e:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3708      	adds	r7, #8
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	02008000 	.word	0x02008000

0800aea0 <HAL_SMBUS_ConfigDigitalFilter>:
  *                the configuration information for the specified SMBUS.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_ConfigDigitalFilter(SMBUS_HandleTypeDef *hsmbus, uint32_t DigitalFilter)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_DIGITAL_FILTER(DigitalFilter));

  if (hsmbus->State == HAL_SMBUS_STATE_READY)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d137      	bne.n	800af22 <HAL_SMBUS_ConfigDigitalFilter+0x82>
  {
    /* Process Locked */
    __HAL_LOCK(hsmbus);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d101      	bne.n	800aec0 <HAL_SMBUS_ConfigDigitalFilter+0x20>
 800aebc:	2302      	movs	r3, #2
 800aebe:	e031      	b.n	800af24 <HAL_SMBUS_ConfigDigitalFilter+0x84>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2202      	movs	r2, #2
 800aecc:	649a      	str	r2, [r3, #72]	; 0x48

    /* Disable the selected SMBUS peripheral */
    __HAL_SMBUS_DISABLE(hsmbus);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f022 0201 	bic.w	r2, r2, #1
 800aedc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hsmbus->Instance->CR1;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	60fb      	str	r3, [r7, #12]

    /* Reset I2C DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800aeec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << I2C_CR1_DNF_Pos;
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	021b      	lsls	r3, r3, #8
 800aef2:	68fa      	ldr	r2, [r7, #12]
 800aef4:	4313      	orrs	r3, r2
 800aef6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hsmbus->Instance->CR1 = tmpreg;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	601a      	str	r2, [r3, #0]

    __HAL_SMBUS_ENABLE(hsmbus);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f042 0201 	orr.w	r2, r2, #1
 800af0e:	601a      	str	r2, [r3, #0]

    hsmbus->State = HAL_SMBUS_STATE_READY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	649a      	str	r2, [r3, #72]	; 0x48

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    return HAL_OK;
 800af1e:	2300      	movs	r3, #0
 800af20:	e000      	b.n	800af24 <HAL_SMBUS_ConfigDigitalFilter+0x84>
  }
  else
  {
    return HAL_BUSY;
 800af22:	2302      	movs	r3, #2
  }
}
 800af24:	4618      	mov	r0, r3
 800af26:	3714      	adds	r7, #20
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d101      	bne.n	800af42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	e0f1      	b.n	800b126 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a78      	ldr	r2, [pc, #480]	; (800b130 <HAL_SPI_Init+0x200>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d00f      	beq.n	800af72 <HAL_SPI_Init+0x42>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a77      	ldr	r2, [pc, #476]	; (800b134 <HAL_SPI_Init+0x204>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d00a      	beq.n	800af72 <HAL_SPI_Init+0x42>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a75      	ldr	r2, [pc, #468]	; (800b138 <HAL_SPI_Init+0x208>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d005      	beq.n	800af72 <HAL_SPI_Init+0x42>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	2b0f      	cmp	r3, #15
 800af6c:	d901      	bls.n	800af72 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e0d9      	b.n	800b126 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fc9c 	bl	800b8b0 <SPI_GetPacketSize>
 800af78:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a6c      	ldr	r2, [pc, #432]	; (800b130 <HAL_SPI_Init+0x200>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d00c      	beq.n	800af9e <HAL_SPI_Init+0x6e>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a6a      	ldr	r2, [pc, #424]	; (800b134 <HAL_SPI_Init+0x204>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d007      	beq.n	800af9e <HAL_SPI_Init+0x6e>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4a69      	ldr	r2, [pc, #420]	; (800b138 <HAL_SPI_Init+0x208>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d002      	beq.n	800af9e <HAL_SPI_Init+0x6e>
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2b08      	cmp	r3, #8
 800af9c:	d811      	bhi.n	800afc2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800afa2:	4a63      	ldr	r2, [pc, #396]	; (800b130 <HAL_SPI_Init+0x200>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d009      	beq.n	800afbc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a61      	ldr	r2, [pc, #388]	; (800b134 <HAL_SPI_Init+0x204>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d004      	beq.n	800afbc <HAL_SPI_Init+0x8c>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a60      	ldr	r2, [pc, #384]	; (800b138 <HAL_SPI_Init+0x208>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d104      	bne.n	800afc6 <HAL_SPI_Init+0x96>
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2b10      	cmp	r3, #16
 800afc0:	d901      	bls.n	800afc6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	e0af      	b.n	800b126 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d106      	bne.n	800afe0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f7f8 fcc0 	bl	8003960 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2202      	movs	r2, #2
 800afe4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f022 0201 	bic.w	r2, r2, #1
 800aff6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b002:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b00c:	d119      	bne.n	800b042 <HAL_SPI_Init+0x112>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b016:	d103      	bne.n	800b020 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d008      	beq.n	800b032 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b024:	2b00      	cmp	r3, #0
 800b026:	d10c      	bne.n	800b042 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b02c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b030:	d107      	bne.n	800b042 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b040:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	69da      	ldr	r2, [r3, #28]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b04a:	431a      	orrs	r2, r3
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	431a      	orrs	r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b054:	ea42 0103 	orr.w	r1, r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	68da      	ldr	r2, [r3, #12]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	430a      	orrs	r2, r1
 800b062:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06c:	431a      	orrs	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b072:	431a      	orrs	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	699b      	ldr	r3, [r3, #24]
 800b078:	431a      	orrs	r2, r3
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	431a      	orrs	r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	695b      	ldr	r3, [r3, #20]
 800b084:	431a      	orrs	r2, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6a1b      	ldr	r3, [r3, #32]
 800b08a:	431a      	orrs	r2, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	431a      	orrs	r2, r3
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b096:	431a      	orrs	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	431a      	orrs	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0a2:	ea42 0103 	orr.w	r1, r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	430a      	orrs	r2, r1
 800b0b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d113      	bne.n	800b0e2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0cc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b0e0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f022 0201 	bic.w	r2, r2, #1
 800b0f0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00a      	beq.n	800b114 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	430a      	orrs	r2, r1
 800b112:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2201      	movs	r2, #1
 800b120:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	40013000 	.word	0x40013000
 800b134:	40003800 	.word	0x40003800
 800b138:	40003c00 	.word	0x40003c00

0800b13c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b08e      	sub	sp, #56	; 0x38
 800b140:	af02      	add	r7, sp, #8
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
 800b148:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b14a:	2300      	movs	r3, #0
 800b14c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	3320      	adds	r3, #32
 800b156:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	3330      	adds	r3, #48	; 0x30
 800b15e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b166:	2b01      	cmp	r3, #1
 800b168:	d101      	bne.n	800b16e <HAL_SPI_TransmitReceive+0x32>
 800b16a:	2302      	movs	r3, #2
 800b16c:	e2ce      	b.n	800b70c <HAL_SPI_TransmitReceive+0x5d0>
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2201      	movs	r2, #1
 800b172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b176:	f7f9 fafd 	bl	8004774 <HAL_GetTick>
 800b17a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800b17c:	887b      	ldrh	r3, [r7, #2]
 800b17e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800b180:	887b      	ldrh	r3, [r7, #2]
 800b182:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b18a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b192:	7efb      	ldrb	r3, [r7, #27]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d014      	beq.n	800b1c2 <HAL_SPI_TransmitReceive+0x86>
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b19e:	d106      	bne.n	800b1ae <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d102      	bne.n	800b1ae <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b1a8:	7efb      	ldrb	r3, [r7, #27]
 800b1aa:	2b04      	cmp	r3, #4
 800b1ac:	d009      	beq.n	800b1c2 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800b1ae:	2302      	movs	r3, #2
 800b1b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b1bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b1c0:	e2a4      	b.n	800b70c <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d005      	beq.n	800b1d4 <HAL_SPI_TransmitReceive+0x98>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d002      	beq.n	800b1d4 <HAL_SPI_TransmitReceive+0x98>
 800b1ce:	887b      	ldrh	r3, [r7, #2]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d109      	bne.n	800b1e8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b1e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b1e6:	e291      	b.n	800b70c <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	2b04      	cmp	r3, #4
 800b1f2:	d003      	beq.n	800b1fc <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2205      	movs	r2, #5
 800b1f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	887a      	ldrh	r2, [r7, #2]
 800b20e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	887a      	ldrh	r2, [r7, #2]
 800b216:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	68ba      	ldr	r2, [r7, #8]
 800b21e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	887a      	ldrh	r2, [r7, #2]
 800b224:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	887a      	ldrh	r2, [r7, #2]
 800b22c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2200      	movs	r2, #0
 800b234:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2200      	movs	r2, #0
 800b23a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	685a      	ldr	r2, [r3, #4]
 800b242:	4b81      	ldr	r3, [pc, #516]	; (800b448 <HAL_SPI_TransmitReceive+0x30c>)
 800b244:	4013      	ands	r3, r2
 800b246:	8879      	ldrh	r1, [r7, #2]
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	6812      	ldr	r2, [r2, #0]
 800b24c:	430b      	orrs	r3, r1
 800b24e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f042 0201 	orr.w	r2, r2, #1
 800b25e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b268:	d107      	bne.n	800b27a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b278:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	2b0f      	cmp	r3, #15
 800b280:	d970      	bls.n	800b364 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b282:	e068      	b.n	800b356 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	695b      	ldr	r3, [r3, #20]
 800b28a:	f003 0302 	and.w	r3, r3, #2
 800b28e:	2b02      	cmp	r3, #2
 800b290:	d11a      	bne.n	800b2c8 <HAL_SPI_TransmitReceive+0x18c>
 800b292:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b294:	2b00      	cmp	r3, #0
 800b296:	d017      	beq.n	800b2c8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6812      	ldr	r2, [r2, #0]
 800b2a2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2a8:	1d1a      	adds	r2, r3, #4
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	3b01      	subs	r3, #1
 800b2b8:	b29a      	uxth	r2, r3
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	695a      	ldr	r2, [r3, #20]
 800b2ce:	f248 0308 	movw	r3, #32776	; 0x8008
 800b2d2:	4013      	ands	r3, r2
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d01a      	beq.n	800b30e <HAL_SPI_TransmitReceive+0x1d2>
 800b2d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d017      	beq.n	800b30e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b2e8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2ee:	1d1a      	adds	r2, r3, #4
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	b29a      	uxth	r2, r3
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b30c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b30e:	f7f9 fa31 	bl	8004774 <HAL_GetTick>
 800b312:	4602      	mov	r2, r0
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	1ad3      	subs	r3, r2, r3
 800b318:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d803      	bhi.n	800b326 <HAL_SPI_TransmitReceive+0x1ea>
 800b31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b324:	d102      	bne.n	800b32c <HAL_SPI_TransmitReceive+0x1f0>
 800b326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d114      	bne.n	800b356 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	f000 f9f1 	bl	800b714 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b340:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2201      	movs	r2, #1
 800b34e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b352:	2303      	movs	r3, #3
 800b354:	e1da      	b.n	800b70c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b356:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d193      	bne.n	800b284 <HAL_SPI_TransmitReceive+0x148>
 800b35c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d190      	bne.n	800b284 <HAL_SPI_TransmitReceive+0x148>
 800b362:	e1ac      	b.n	800b6be <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	2b07      	cmp	r3, #7
 800b36a:	f240 81a0 	bls.w	800b6ae <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b36e:	e0a9      	b.n	800b4c4 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	695b      	ldr	r3, [r3, #20]
 800b376:	f003 0302 	and.w	r3, r3, #2
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d139      	bne.n	800b3f2 <HAL_SPI_TransmitReceive+0x2b6>
 800b37e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b380:	2b00      	cmp	r3, #0
 800b382:	d036      	beq.n	800b3f2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b384:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b386:	2b01      	cmp	r3, #1
 800b388:	d91c      	bls.n	800b3c4 <HAL_SPI_TransmitReceive+0x288>
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d018      	beq.n	800b3c4 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	6812      	ldr	r2, [r2, #0]
 800b39c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3a2:	1d1a      	adds	r2, r3, #4
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	3b02      	subs	r3, #2
 800b3b2:	b29a      	uxth	r2, r3
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b3c2:	e016      	b.n	800b3f2 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3c8:	881a      	ldrh	r2, [r3, #0]
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3cc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3d2:	1c9a      	adds	r2, r3, #2
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	3b01      	subs	r3, #1
 800b3e2:	b29a      	uxth	r2, r3
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b3f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	695b      	ldr	r3, [r3, #20]
 800b3f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d03d      	beq.n	800b47c <HAL_SPI_TransmitReceive+0x340>
 800b400:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b402:	2b00      	cmp	r3, #0
 800b404:	d03a      	beq.n	800b47c <HAL_SPI_TransmitReceive+0x340>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	695b      	ldr	r3, [r3, #20]
 800b40c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b410:	2b00      	cmp	r3, #0
 800b412:	d01b      	beq.n	800b44c <HAL_SPI_TransmitReceive+0x310>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b41c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b41e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b424:	1d1a      	adds	r2, r3, #4
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b430:	b29b      	uxth	r3, r3
 800b432:	3b02      	subs	r3, #2
 800b434:	b29a      	uxth	r2, r3
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b442:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b444:	e01a      	b.n	800b47c <HAL_SPI_TransmitReceive+0x340>
 800b446:	bf00      	nop
 800b448:	ffff0000 	.word	0xffff0000
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b450:	6a3a      	ldr	r2, [r7, #32]
 800b452:	8812      	ldrh	r2, [r2, #0]
 800b454:	b292      	uxth	r2, r2
 800b456:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b45c:	1c9a      	adds	r2, r3, #2
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b468:	b29b      	uxth	r3, r3
 800b46a:	3b01      	subs	r3, #1
 800b46c:	b29a      	uxth	r2, r3
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b47a:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b47c:	f7f9 f97a 	bl	8004774 <HAL_GetTick>
 800b480:	4602      	mov	r2, r0
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	1ad3      	subs	r3, r2, r3
 800b486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b488:	429a      	cmp	r2, r3
 800b48a:	d803      	bhi.n	800b494 <HAL_SPI_TransmitReceive+0x358>
 800b48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b492:	d102      	bne.n	800b49a <HAL_SPI_TransmitReceive+0x35e>
 800b494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b496:	2b00      	cmp	r3, #0
 800b498:	d114      	bne.n	800b4c4 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f000 f93a 	bl	800b714 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b4c0:	2303      	movs	r3, #3
 800b4c2:	e123      	b.n	800b70c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b4c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	f47f af52 	bne.w	800b370 <HAL_SPI_TransmitReceive+0x234>
 800b4cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f47f af4e 	bne.w	800b370 <HAL_SPI_TransmitReceive+0x234>
 800b4d4:	e0f3      	b.n	800b6be <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	695b      	ldr	r3, [r3, #20]
 800b4dc:	f003 0302 	and.w	r3, r3, #2
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d15a      	bne.n	800b59a <HAL_SPI_TransmitReceive+0x45e>
 800b4e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d057      	beq.n	800b59a <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b4ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b4ec:	2b03      	cmp	r3, #3
 800b4ee:	d91c      	bls.n	800b52a <HAL_SPI_TransmitReceive+0x3ee>
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4f4:	2b40      	cmp	r3, #64	; 0x40
 800b4f6:	d918      	bls.n	800b52a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	6812      	ldr	r2, [r2, #0]
 800b502:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b508:	1d1a      	adds	r2, r3, #4
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b514:	b29b      	uxth	r3, r3
 800b516:	3b04      	subs	r3, #4
 800b518:	b29a      	uxth	r2, r3
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b526:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b528:	e037      	b.n	800b59a <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b52a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d91b      	bls.n	800b568 <HAL_SPI_TransmitReceive+0x42c>
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b534:	2b00      	cmp	r3, #0
 800b536:	d017      	beq.n	800b568 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b53c:	881a      	ldrh	r2, [r3, #0]
 800b53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b540:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b546:	1c9a      	adds	r2, r3, #2
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b552:	b29b      	uxth	r3, r3
 800b554:	3b02      	subs	r3, #2
 800b556:	b29a      	uxth	r2, r3
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b564:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b566:	e018      	b.n	800b59a <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	3320      	adds	r3, #32
 800b572:	7812      	ldrb	r2, [r2, #0]
 800b574:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b57a:	1c5a      	adds	r2, r3, #1
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b586:	b29b      	uxth	r3, r3
 800b588:	3b01      	subs	r3, #1
 800b58a:	b29a      	uxth	r2, r3
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b598:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	695b      	ldr	r3, [r3, #20]
 800b5a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d05e      	beq.n	800b666 <HAL_SPI_TransmitReceive+0x52a>
 800b5a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d05b      	beq.n	800b666 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	695b      	ldr	r3, [r3, #20]
 800b5b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d018      	beq.n	800b5ee <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b5c6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5cc:	1d1a      	adds	r2, r3, #4
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	3b04      	subs	r3, #4
 800b5dc:	b29a      	uxth	r2, r3
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b5ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b5ec:	e03b      	b.n	800b666 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800b5f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5fc:	d918      	bls.n	800b630 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b602:	6a3a      	ldr	r2, [r7, #32]
 800b604:	8812      	ldrh	r2, [r2, #0]
 800b606:	b292      	uxth	r2, r2
 800b608:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b60e:	1c9a      	adds	r2, r3, #2
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	3b02      	subs	r3, #2
 800b61e:	b29a      	uxth	r2, r3
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b62c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b62e:	e01a      	b.n	800b666 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b63c:	7812      	ldrb	r2, [r2, #0]
 800b63e:	b2d2      	uxtb	r2, r2
 800b640:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b646:	1c5a      	adds	r2, r3, #1
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b652:	b29b      	uxth	r3, r3
 800b654:	3b01      	subs	r3, #1
 800b656:	b29a      	uxth	r2, r3
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b664:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b666:	f7f9 f885 	bl	8004774 <HAL_GetTick>
 800b66a:	4602      	mov	r2, r0
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b672:	429a      	cmp	r2, r3
 800b674:	d803      	bhi.n	800b67e <HAL_SPI_TransmitReceive+0x542>
 800b676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b67c:	d102      	bne.n	800b684 <HAL_SPI_TransmitReceive+0x548>
 800b67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b680:	2b00      	cmp	r3, #0
 800b682:	d114      	bne.n	800b6ae <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b684:	68f8      	ldr	r0, [r7, #12]
 800b686:	f000 f845 	bl	800b714 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2200      	movs	r2, #0
 800b68e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b698:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	e02e      	b.n	800b70c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b6ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	f47f af10 	bne.w	800b4d6 <HAL_SPI_TransmitReceive+0x39a>
 800b6b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f47f af0c 	bne.w	800b4d6 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c0:	9300      	str	r3, [sp, #0]
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	2108      	movs	r1, #8
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f000 f8c3 	bl	800b854 <SPI_WaitOnFlagUntilTimeout>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d007      	beq.n	800b6e4 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6da:	f043 0220 	orr.w	r2, r3, #32
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f000 f815 	bl	800b714 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b700:	2b00      	cmp	r3, #0
 800b702:	d001      	beq.n	800b708 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800b704:	2301      	movs	r3, #1
 800b706:	e001      	b.n	800b70c <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800b708:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3730      	adds	r7, #48	; 0x30
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b714:	b480      	push	{r7}
 800b716:	b085      	sub	sp, #20
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	695b      	ldr	r3, [r3, #20]
 800b722:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	699a      	ldr	r2, [r3, #24]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f042 0208 	orr.w	r2, r2, #8
 800b732:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	699a      	ldr	r2, [r3, #24]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f042 0210 	orr.w	r2, r2, #16
 800b742:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f022 0201 	bic.w	r2, r2, #1
 800b752:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	6919      	ldr	r1, [r3, #16]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681a      	ldr	r2, [r3, #0]
 800b75e:	4b3c      	ldr	r3, [pc, #240]	; (800b850 <SPI_CloseTransfer+0x13c>)
 800b760:	400b      	ands	r3, r1
 800b762:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	689a      	ldr	r2, [r3, #8]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b772:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	2b04      	cmp	r3, #4
 800b77e:	d014      	beq.n	800b7aa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f003 0320 	and.w	r3, r3, #32
 800b786:	2b00      	cmp	r3, #0
 800b788:	d00f      	beq.n	800b7aa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b790:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	699a      	ldr	r2, [r3, #24]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f042 0220 	orr.w	r2, r2, #32
 800b7a8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	2b03      	cmp	r3, #3
 800b7b4:	d014      	beq.n	800b7e0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d00f      	beq.n	800b7e0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7c6:	f043 0204 	orr.w	r2, r3, #4
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	699a      	ldr	r2, [r3, #24]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7de:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00f      	beq.n	800b80a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7f0:	f043 0201 	orr.w	r2, r3, #1
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	699a      	ldr	r2, [r3, #24]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b808:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00f      	beq.n	800b834 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b81a:	f043 0208 	orr.w	r2, r3, #8
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	699a      	ldr	r2, [r3, #24]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b832:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b844:	bf00      	nop
 800b846:	3714      	adds	r7, #20
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr
 800b850:	fffffc90 	.word	0xfffffc90

0800b854 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	603b      	str	r3, [r7, #0]
 800b860:	4613      	mov	r3, r2
 800b862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b864:	e010      	b.n	800b888 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b866:	f7f8 ff85 	bl	8004774 <HAL_GetTick>
 800b86a:	4602      	mov	r2, r0
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	1ad3      	subs	r3, r2, r3
 800b870:	69ba      	ldr	r2, [r7, #24]
 800b872:	429a      	cmp	r2, r3
 800b874:	d803      	bhi.n	800b87e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b87c:	d102      	bne.n	800b884 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d101      	bne.n	800b888 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b884:	2303      	movs	r3, #3
 800b886:	e00f      	b.n	800b8a8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	695a      	ldr	r2, [r3, #20]
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	4013      	ands	r3, r2
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	429a      	cmp	r2, r3
 800b896:	bf0c      	ite	eq
 800b898:	2301      	moveq	r3, #1
 800b89a:	2300      	movne	r3, #0
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	461a      	mov	r2, r3
 800b8a0:	79fb      	ldrb	r3, [r7, #7]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d0df      	beq.n	800b866 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3710      	adds	r7, #16
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b085      	sub	sp, #20
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8bc:	095b      	lsrs	r3, r3, #5
 800b8be:	3301      	adds	r3, #1
 800b8c0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	3307      	adds	r3, #7
 800b8ce:	08db      	lsrs	r3, r3, #3
 800b8d0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	68fa      	ldr	r2, [r7, #12]
 800b8d6:	fb02 f303 	mul.w	r3, r2, r3
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3714      	adds	r7, #20
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr

0800b8e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b082      	sub	sp, #8
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d101      	bne.n	800b8f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	e049      	b.n	800b98c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8fe:	b2db      	uxtb	r3, r3
 800b900:	2b00      	cmp	r3, #0
 800b902:	d106      	bne.n	800b912 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 f841 	bl	800b994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2202      	movs	r2, #2
 800b916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	3304      	adds	r3, #4
 800b922:	4619      	mov	r1, r3
 800b924:	4610      	mov	r0, r2
 800b926:	f000 fd5b 	bl	800c3e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2201      	movs	r2, #1
 800b936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2201      	movs	r2, #1
 800b93e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2201      	movs	r2, #1
 800b946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2201      	movs	r2, #1
 800b94e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2201      	movs	r2, #1
 800b956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2201      	movs	r2, #1
 800b95e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2201      	movs	r2, #1
 800b966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2201      	movs	r2, #1
 800b96e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2201      	movs	r2, #1
 800b976:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2201      	movs	r2, #1
 800b97e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2201      	movs	r2, #1
 800b986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b98a:	2300      	movs	r3, #0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3708      	adds	r7, #8
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b99c:	bf00      	nop
 800b99e:	370c      	adds	r7, #12
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr

0800b9a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d001      	beq.n	800b9c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e054      	b.n	800ba6a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68da      	ldr	r2, [r3, #12]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f042 0201 	orr.w	r2, r2, #1
 800b9d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a26      	ldr	r2, [pc, #152]	; (800ba78 <HAL_TIM_Base_Start_IT+0xd0>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d022      	beq.n	800ba28 <HAL_TIM_Base_Start_IT+0x80>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9ea:	d01d      	beq.n	800ba28 <HAL_TIM_Base_Start_IT+0x80>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a22      	ldr	r2, [pc, #136]	; (800ba7c <HAL_TIM_Base_Start_IT+0xd4>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d018      	beq.n	800ba28 <HAL_TIM_Base_Start_IT+0x80>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a21      	ldr	r2, [pc, #132]	; (800ba80 <HAL_TIM_Base_Start_IT+0xd8>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d013      	beq.n	800ba28 <HAL_TIM_Base_Start_IT+0x80>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a1f      	ldr	r2, [pc, #124]	; (800ba84 <HAL_TIM_Base_Start_IT+0xdc>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d00e      	beq.n	800ba28 <HAL_TIM_Base_Start_IT+0x80>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a1e      	ldr	r2, [pc, #120]	; (800ba88 <HAL_TIM_Base_Start_IT+0xe0>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d009      	beq.n	800ba28 <HAL_TIM_Base_Start_IT+0x80>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a1c      	ldr	r2, [pc, #112]	; (800ba8c <HAL_TIM_Base_Start_IT+0xe4>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d004      	beq.n	800ba28 <HAL_TIM_Base_Start_IT+0x80>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4a1b      	ldr	r2, [pc, #108]	; (800ba90 <HAL_TIM_Base_Start_IT+0xe8>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d115      	bne.n	800ba54 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	689a      	ldr	r2, [r3, #8]
 800ba2e:	4b19      	ldr	r3, [pc, #100]	; (800ba94 <HAL_TIM_Base_Start_IT+0xec>)
 800ba30:	4013      	ands	r3, r2
 800ba32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2b06      	cmp	r3, #6
 800ba38:	d015      	beq.n	800ba66 <HAL_TIM_Base_Start_IT+0xbe>
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba40:	d011      	beq.n	800ba66 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f042 0201 	orr.w	r2, r2, #1
 800ba50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba52:	e008      	b.n	800ba66 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f042 0201 	orr.w	r2, r2, #1
 800ba62:	601a      	str	r2, [r3, #0]
 800ba64:	e000      	b.n	800ba68 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3714      	adds	r7, #20
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	40010000 	.word	0x40010000
 800ba7c:	40000400 	.word	0x40000400
 800ba80:	40000800 	.word	0x40000800
 800ba84:	40000c00 	.word	0x40000c00
 800ba88:	40010400 	.word	0x40010400
 800ba8c:	40001800 	.word	0x40001800
 800ba90:	40014000 	.word	0x40014000
 800ba94:	00010007 	.word	0x00010007

0800ba98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d101      	bne.n	800baaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800baa6:	2301      	movs	r3, #1
 800baa8:	e049      	b.n	800bb3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d106      	bne.n	800bac4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f7f8 fa1a 	bl	8003ef8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2202      	movs	r2, #2
 800bac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	3304      	adds	r3, #4
 800bad4:	4619      	mov	r1, r3
 800bad6:	4610      	mov	r0, r2
 800bad8:	f000 fc82 	bl	800c3e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2201      	movs	r2, #1
 800bae0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2201      	movs	r2, #1
 800bae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2201      	movs	r2, #1
 800baf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2201      	movs	r2, #1
 800bb00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2201      	movs	r2, #1
 800bb08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2201      	movs	r2, #1
 800bb18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2201      	movs	r2, #1
 800bb28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2201      	movs	r2, #1
 800bb38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb3c:	2300      	movs	r3, #0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
	...

0800bb48 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	2200      	movs	r2, #0
 800bb58:	6839      	ldr	r1, [r7, #0]
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f000 ffb0 	bl	800cac0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a3e      	ldr	r2, [pc, #248]	; (800bc60 <HAL_TIM_PWM_Stop+0x118>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d013      	beq.n	800bb92 <HAL_TIM_PWM_Stop+0x4a>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a3d      	ldr	r2, [pc, #244]	; (800bc64 <HAL_TIM_PWM_Stop+0x11c>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d00e      	beq.n	800bb92 <HAL_TIM_PWM_Stop+0x4a>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a3b      	ldr	r2, [pc, #236]	; (800bc68 <HAL_TIM_PWM_Stop+0x120>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d009      	beq.n	800bb92 <HAL_TIM_PWM_Stop+0x4a>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a3a      	ldr	r2, [pc, #232]	; (800bc6c <HAL_TIM_PWM_Stop+0x124>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d004      	beq.n	800bb92 <HAL_TIM_PWM_Stop+0x4a>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a38      	ldr	r2, [pc, #224]	; (800bc70 <HAL_TIM_PWM_Stop+0x128>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d101      	bne.n	800bb96 <HAL_TIM_PWM_Stop+0x4e>
 800bb92:	2301      	movs	r3, #1
 800bb94:	e000      	b.n	800bb98 <HAL_TIM_PWM_Stop+0x50>
 800bb96:	2300      	movs	r3, #0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d017      	beq.n	800bbcc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	6a1a      	ldr	r2, [r3, #32]
 800bba2:	f241 1311 	movw	r3, #4369	; 0x1111
 800bba6:	4013      	ands	r3, r2
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d10f      	bne.n	800bbcc <HAL_TIM_PWM_Stop+0x84>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	6a1a      	ldr	r2, [r3, #32]
 800bbb2:	f240 4344 	movw	r3, #1092	; 0x444
 800bbb6:	4013      	ands	r3, r2
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d107      	bne.n	800bbcc <HAL_TIM_PWM_Stop+0x84>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bbca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	6a1a      	ldr	r2, [r3, #32]
 800bbd2:	f241 1311 	movw	r3, #4369	; 0x1111
 800bbd6:	4013      	ands	r3, r2
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d10f      	bne.n	800bbfc <HAL_TIM_PWM_Stop+0xb4>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	6a1a      	ldr	r2, [r3, #32]
 800bbe2:	f240 4344 	movw	r3, #1092	; 0x444
 800bbe6:	4013      	ands	r3, r2
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d107      	bne.n	800bbfc <HAL_TIM_PWM_Stop+0xb4>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f022 0201 	bic.w	r2, r2, #1
 800bbfa:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d104      	bne.n	800bc0c <HAL_TIM_PWM_Stop+0xc4>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2201      	movs	r2, #1
 800bc06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc0a:	e023      	b.n	800bc54 <HAL_TIM_PWM_Stop+0x10c>
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	2b04      	cmp	r3, #4
 800bc10:	d104      	bne.n	800bc1c <HAL_TIM_PWM_Stop+0xd4>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2201      	movs	r2, #1
 800bc16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc1a:	e01b      	b.n	800bc54 <HAL_TIM_PWM_Stop+0x10c>
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	2b08      	cmp	r3, #8
 800bc20:	d104      	bne.n	800bc2c <HAL_TIM_PWM_Stop+0xe4>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2201      	movs	r2, #1
 800bc26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc2a:	e013      	b.n	800bc54 <HAL_TIM_PWM_Stop+0x10c>
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	2b0c      	cmp	r3, #12
 800bc30:	d104      	bne.n	800bc3c <HAL_TIM_PWM_Stop+0xf4>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2201      	movs	r2, #1
 800bc36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc3a:	e00b      	b.n	800bc54 <HAL_TIM_PWM_Stop+0x10c>
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	2b10      	cmp	r3, #16
 800bc40:	d104      	bne.n	800bc4c <HAL_TIM_PWM_Stop+0x104>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2201      	movs	r2, #1
 800bc46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc4a:	e003      	b.n	800bc54 <HAL_TIM_PWM_Stop+0x10c>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800bc54:	2300      	movs	r3, #0
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3708      	adds	r7, #8
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	40010000 	.word	0x40010000
 800bc64:	40010400 	.word	0x40010400
 800bc68:	40014000 	.word	0x40014000
 800bc6c:	40014400 	.word	0x40014400
 800bc70:	40014800 	.word	0x40014800

0800bc74 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d109      	bne.n	800bc9c <HAL_TIM_PWM_Start_IT+0x28>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	bf14      	ite	ne
 800bc94:	2301      	movne	r3, #1
 800bc96:	2300      	moveq	r3, #0
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	e03c      	b.n	800bd16 <HAL_TIM_PWM_Start_IT+0xa2>
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	2b04      	cmp	r3, #4
 800bca0:	d109      	bne.n	800bcb6 <HAL_TIM_PWM_Start_IT+0x42>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	bf14      	ite	ne
 800bcae:	2301      	movne	r3, #1
 800bcb0:	2300      	moveq	r3, #0
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	e02f      	b.n	800bd16 <HAL_TIM_PWM_Start_IT+0xa2>
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	2b08      	cmp	r3, #8
 800bcba:	d109      	bne.n	800bcd0 <HAL_TIM_PWM_Start_IT+0x5c>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	bf14      	ite	ne
 800bcc8:	2301      	movne	r3, #1
 800bcca:	2300      	moveq	r3, #0
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	e022      	b.n	800bd16 <HAL_TIM_PWM_Start_IT+0xa2>
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	2b0c      	cmp	r3, #12
 800bcd4:	d109      	bne.n	800bcea <HAL_TIM_PWM_Start_IT+0x76>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	bf14      	ite	ne
 800bce2:	2301      	movne	r3, #1
 800bce4:	2300      	moveq	r3, #0
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	e015      	b.n	800bd16 <HAL_TIM_PWM_Start_IT+0xa2>
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	2b10      	cmp	r3, #16
 800bcee:	d109      	bne.n	800bd04 <HAL_TIM_PWM_Start_IT+0x90>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	bf14      	ite	ne
 800bcfc:	2301      	movne	r3, #1
 800bcfe:	2300      	moveq	r3, #0
 800bd00:	b2db      	uxtb	r3, r3
 800bd02:	e008      	b.n	800bd16 <HAL_TIM_PWM_Start_IT+0xa2>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	bf14      	ite	ne
 800bd10:	2301      	movne	r3, #1
 800bd12:	2300      	moveq	r3, #0
 800bd14:	b2db      	uxtb	r3, r3
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d001      	beq.n	800bd1e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e0ec      	b.n	800bef8 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d104      	bne.n	800bd2e <HAL_TIM_PWM_Start_IT+0xba>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2202      	movs	r2, #2
 800bd28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd2c:	e023      	b.n	800bd76 <HAL_TIM_PWM_Start_IT+0x102>
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	2b04      	cmp	r3, #4
 800bd32:	d104      	bne.n	800bd3e <HAL_TIM_PWM_Start_IT+0xca>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2202      	movs	r2, #2
 800bd38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd3c:	e01b      	b.n	800bd76 <HAL_TIM_PWM_Start_IT+0x102>
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	2b08      	cmp	r3, #8
 800bd42:	d104      	bne.n	800bd4e <HAL_TIM_PWM_Start_IT+0xda>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2202      	movs	r2, #2
 800bd48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd4c:	e013      	b.n	800bd76 <HAL_TIM_PWM_Start_IT+0x102>
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	2b0c      	cmp	r3, #12
 800bd52:	d104      	bne.n	800bd5e <HAL_TIM_PWM_Start_IT+0xea>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2202      	movs	r2, #2
 800bd58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd5c:	e00b      	b.n	800bd76 <HAL_TIM_PWM_Start_IT+0x102>
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	2b10      	cmp	r3, #16
 800bd62:	d104      	bne.n	800bd6e <HAL_TIM_PWM_Start_IT+0xfa>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2202      	movs	r2, #2
 800bd68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd6c:	e003      	b.n	800bd76 <HAL_TIM_PWM_Start_IT+0x102>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2202      	movs	r2, #2
 800bd72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	2b0c      	cmp	r3, #12
 800bd7a:	d841      	bhi.n	800be00 <HAL_TIM_PWM_Start_IT+0x18c>
 800bd7c:	a201      	add	r2, pc, #4	; (adr r2, 800bd84 <HAL_TIM_PWM_Start_IT+0x110>)
 800bd7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd82:	bf00      	nop
 800bd84:	0800bdb9 	.word	0x0800bdb9
 800bd88:	0800be01 	.word	0x0800be01
 800bd8c:	0800be01 	.word	0x0800be01
 800bd90:	0800be01 	.word	0x0800be01
 800bd94:	0800bdcb 	.word	0x0800bdcb
 800bd98:	0800be01 	.word	0x0800be01
 800bd9c:	0800be01 	.word	0x0800be01
 800bda0:	0800be01 	.word	0x0800be01
 800bda4:	0800bddd 	.word	0x0800bddd
 800bda8:	0800be01 	.word	0x0800be01
 800bdac:	0800be01 	.word	0x0800be01
 800bdb0:	0800be01 	.word	0x0800be01
 800bdb4:	0800bdef 	.word	0x0800bdef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	68da      	ldr	r2, [r3, #12]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f042 0202 	orr.w	r2, r2, #2
 800bdc6:	60da      	str	r2, [r3, #12]
      break;
 800bdc8:	e01d      	b.n	800be06 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	68da      	ldr	r2, [r3, #12]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f042 0204 	orr.w	r2, r2, #4
 800bdd8:	60da      	str	r2, [r3, #12]
      break;
 800bdda:	e014      	b.n	800be06 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	68da      	ldr	r2, [r3, #12]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f042 0208 	orr.w	r2, r2, #8
 800bdea:	60da      	str	r2, [r3, #12]
      break;
 800bdec:	e00b      	b.n	800be06 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	68da      	ldr	r2, [r3, #12]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f042 0210 	orr.w	r2, r2, #16
 800bdfc:	60da      	str	r2, [r3, #12]
      break;
 800bdfe:	e002      	b.n	800be06 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800be00:	2301      	movs	r3, #1
 800be02:	73fb      	strb	r3, [r7, #15]
      break;
 800be04:	bf00      	nop
  }

  if (status == HAL_OK)
 800be06:	7bfb      	ldrb	r3, [r7, #15]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d174      	bne.n	800bef6 <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2201      	movs	r2, #1
 800be12:	6839      	ldr	r1, [r7, #0]
 800be14:	4618      	mov	r0, r3
 800be16:	f000 fe53 	bl	800cac0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a38      	ldr	r2, [pc, #224]	; (800bf00 <HAL_TIM_PWM_Start_IT+0x28c>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d013      	beq.n	800be4c <HAL_TIM_PWM_Start_IT+0x1d8>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a36      	ldr	r2, [pc, #216]	; (800bf04 <HAL_TIM_PWM_Start_IT+0x290>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d00e      	beq.n	800be4c <HAL_TIM_PWM_Start_IT+0x1d8>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4a35      	ldr	r2, [pc, #212]	; (800bf08 <HAL_TIM_PWM_Start_IT+0x294>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d009      	beq.n	800be4c <HAL_TIM_PWM_Start_IT+0x1d8>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a33      	ldr	r2, [pc, #204]	; (800bf0c <HAL_TIM_PWM_Start_IT+0x298>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d004      	beq.n	800be4c <HAL_TIM_PWM_Start_IT+0x1d8>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4a32      	ldr	r2, [pc, #200]	; (800bf10 <HAL_TIM_PWM_Start_IT+0x29c>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d101      	bne.n	800be50 <HAL_TIM_PWM_Start_IT+0x1dc>
 800be4c:	2301      	movs	r3, #1
 800be4e:	e000      	b.n	800be52 <HAL_TIM_PWM_Start_IT+0x1de>
 800be50:	2300      	movs	r3, #0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d007      	beq.n	800be66 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a25      	ldr	r2, [pc, #148]	; (800bf00 <HAL_TIM_PWM_Start_IT+0x28c>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d022      	beq.n	800beb6 <HAL_TIM_PWM_Start_IT+0x242>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be78:	d01d      	beq.n	800beb6 <HAL_TIM_PWM_Start_IT+0x242>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4a25      	ldr	r2, [pc, #148]	; (800bf14 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d018      	beq.n	800beb6 <HAL_TIM_PWM_Start_IT+0x242>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4a23      	ldr	r2, [pc, #140]	; (800bf18 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d013      	beq.n	800beb6 <HAL_TIM_PWM_Start_IT+0x242>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4a22      	ldr	r2, [pc, #136]	; (800bf1c <HAL_TIM_PWM_Start_IT+0x2a8>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d00e      	beq.n	800beb6 <HAL_TIM_PWM_Start_IT+0x242>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4a19      	ldr	r2, [pc, #100]	; (800bf04 <HAL_TIM_PWM_Start_IT+0x290>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d009      	beq.n	800beb6 <HAL_TIM_PWM_Start_IT+0x242>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4a1e      	ldr	r2, [pc, #120]	; (800bf20 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d004      	beq.n	800beb6 <HAL_TIM_PWM_Start_IT+0x242>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a15      	ldr	r2, [pc, #84]	; (800bf08 <HAL_TIM_PWM_Start_IT+0x294>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d115      	bne.n	800bee2 <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	689a      	ldr	r2, [r3, #8]
 800bebc:	4b19      	ldr	r3, [pc, #100]	; (800bf24 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800bebe:	4013      	ands	r3, r2
 800bec0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	2b06      	cmp	r3, #6
 800bec6:	d015      	beq.n	800bef4 <HAL_TIM_PWM_Start_IT+0x280>
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bece:	d011      	beq.n	800bef4 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f042 0201 	orr.w	r2, r2, #1
 800bede:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bee0:	e008      	b.n	800bef4 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f042 0201 	orr.w	r2, r2, #1
 800bef0:	601a      	str	r2, [r3, #0]
 800bef2:	e000      	b.n	800bef6 <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bef4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800bef6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3710      	adds	r7, #16
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	40010000 	.word	0x40010000
 800bf04:	40010400 	.word	0x40010400
 800bf08:	40014000 	.word	0x40014000
 800bf0c:	40014400 	.word	0x40014400
 800bf10:	40014800 	.word	0x40014800
 800bf14:	40000400 	.word	0x40000400
 800bf18:	40000800 	.word	0x40000800
 800bf1c:	40000c00 	.word	0x40000c00
 800bf20:	40001800 	.word	0x40001800
 800bf24:	00010007 	.word	0x00010007

0800bf28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	f003 0302 	and.w	r3, r3, #2
 800bf3a:	2b02      	cmp	r3, #2
 800bf3c:	d122      	bne.n	800bf84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	f003 0302 	and.w	r3, r3, #2
 800bf48:	2b02      	cmp	r3, #2
 800bf4a:	d11b      	bne.n	800bf84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f06f 0202 	mvn.w	r2, #2
 800bf54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2201      	movs	r2, #1
 800bf5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	699b      	ldr	r3, [r3, #24]
 800bf62:	f003 0303 	and.w	r3, r3, #3
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d003      	beq.n	800bf72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 fa1a 	bl	800c3a4 <HAL_TIM_IC_CaptureCallback>
 800bf70:	e005      	b.n	800bf7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 fa0c 	bl	800c390 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fa1d 	bl	800c3b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	691b      	ldr	r3, [r3, #16]
 800bf8a:	f003 0304 	and.w	r3, r3, #4
 800bf8e:	2b04      	cmp	r3, #4
 800bf90:	d122      	bne.n	800bfd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	f003 0304 	and.w	r3, r3, #4
 800bf9c:	2b04      	cmp	r3, #4
 800bf9e:	d11b      	bne.n	800bfd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f06f 0204 	mvn.w	r2, #4
 800bfa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2202      	movs	r2, #2
 800bfae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	699b      	ldr	r3, [r3, #24]
 800bfb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d003      	beq.n	800bfc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 f9f0 	bl	800c3a4 <HAL_TIM_IC_CaptureCallback>
 800bfc4:	e005      	b.n	800bfd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 f9e2 	bl	800c390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 f9f3 	bl	800c3b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	691b      	ldr	r3, [r3, #16]
 800bfde:	f003 0308 	and.w	r3, r3, #8
 800bfe2:	2b08      	cmp	r3, #8
 800bfe4:	d122      	bne.n	800c02c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	f003 0308 	and.w	r3, r3, #8
 800bff0:	2b08      	cmp	r3, #8
 800bff2:	d11b      	bne.n	800c02c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f06f 0208 	mvn.w	r2, #8
 800bffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2204      	movs	r2, #4
 800c002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	69db      	ldr	r3, [r3, #28]
 800c00a:	f003 0303 	and.w	r3, r3, #3
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d003      	beq.n	800c01a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 f9c6 	bl	800c3a4 <HAL_TIM_IC_CaptureCallback>
 800c018:	e005      	b.n	800c026 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 f9b8 	bl	800c390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 f9c9 	bl	800c3b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	691b      	ldr	r3, [r3, #16]
 800c032:	f003 0310 	and.w	r3, r3, #16
 800c036:	2b10      	cmp	r3, #16
 800c038:	d122      	bne.n	800c080 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	68db      	ldr	r3, [r3, #12]
 800c040:	f003 0310 	and.w	r3, r3, #16
 800c044:	2b10      	cmp	r3, #16
 800c046:	d11b      	bne.n	800c080 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f06f 0210 	mvn.w	r2, #16
 800c050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2208      	movs	r2, #8
 800c056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	69db      	ldr	r3, [r3, #28]
 800c05e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c062:	2b00      	cmp	r3, #0
 800c064:	d003      	beq.n	800c06e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 f99c 	bl	800c3a4 <HAL_TIM_IC_CaptureCallback>
 800c06c:	e005      	b.n	800c07a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 f98e 	bl	800c390 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 f99f 	bl	800c3b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2200      	movs	r2, #0
 800c07e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	691b      	ldr	r3, [r3, #16]
 800c086:	f003 0301 	and.w	r3, r3, #1
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d10e      	bne.n	800c0ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	f003 0301 	and.w	r3, r3, #1
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d107      	bne.n	800c0ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f06f 0201 	mvn.w	r2, #1
 800c0a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f7f7 fb1e 	bl	80036e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	691b      	ldr	r3, [r3, #16]
 800c0b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0b6:	2b80      	cmp	r3, #128	; 0x80
 800c0b8:	d10e      	bne.n	800c0d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0c4:	2b80      	cmp	r3, #128	; 0x80
 800c0c6:	d107      	bne.n	800c0d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c0d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 fdb2 	bl	800cc3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0e6:	d10e      	bne.n	800c106 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	68db      	ldr	r3, [r3, #12]
 800c0ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0f2:	2b80      	cmp	r3, #128	; 0x80
 800c0f4:	d107      	bne.n	800c106 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c0fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 fda5 	bl	800cc50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	691b      	ldr	r3, [r3, #16]
 800c10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c110:	2b40      	cmp	r3, #64	; 0x40
 800c112:	d10e      	bne.n	800c132 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	68db      	ldr	r3, [r3, #12]
 800c11a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c11e:	2b40      	cmp	r3, #64	; 0x40
 800c120:	d107      	bne.n	800c132 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c12a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 f94d 	bl	800c3cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	691b      	ldr	r3, [r3, #16]
 800c138:	f003 0320 	and.w	r3, r3, #32
 800c13c:	2b20      	cmp	r3, #32
 800c13e:	d10e      	bne.n	800c15e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	f003 0320 	and.w	r3, r3, #32
 800c14a:	2b20      	cmp	r3, #32
 800c14c:	d107      	bne.n	800c15e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f06f 0220 	mvn.w	r2, #32
 800c156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 fd65 	bl	800cc28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c15e:	bf00      	nop
 800c160:	3708      	adds	r7, #8
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
	...

0800c168 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b086      	sub	sp, #24
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c174:	2300      	movs	r3, #0
 800c176:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d101      	bne.n	800c186 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c182:	2302      	movs	r3, #2
 800c184:	e0ff      	b.n	800c386 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2201      	movs	r2, #1
 800c18a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2b14      	cmp	r3, #20
 800c192:	f200 80f0 	bhi.w	800c376 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c196:	a201      	add	r2, pc, #4	; (adr r2, 800c19c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c19c:	0800c1f1 	.word	0x0800c1f1
 800c1a0:	0800c377 	.word	0x0800c377
 800c1a4:	0800c377 	.word	0x0800c377
 800c1a8:	0800c377 	.word	0x0800c377
 800c1ac:	0800c231 	.word	0x0800c231
 800c1b0:	0800c377 	.word	0x0800c377
 800c1b4:	0800c377 	.word	0x0800c377
 800c1b8:	0800c377 	.word	0x0800c377
 800c1bc:	0800c273 	.word	0x0800c273
 800c1c0:	0800c377 	.word	0x0800c377
 800c1c4:	0800c377 	.word	0x0800c377
 800c1c8:	0800c377 	.word	0x0800c377
 800c1cc:	0800c2b3 	.word	0x0800c2b3
 800c1d0:	0800c377 	.word	0x0800c377
 800c1d4:	0800c377 	.word	0x0800c377
 800c1d8:	0800c377 	.word	0x0800c377
 800c1dc:	0800c2f5 	.word	0x0800c2f5
 800c1e0:	0800c377 	.word	0x0800c377
 800c1e4:	0800c377 	.word	0x0800c377
 800c1e8:	0800c377 	.word	0x0800c377
 800c1ec:	0800c335 	.word	0x0800c335
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	68b9      	ldr	r1, [r7, #8]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f000 f98c 	bl	800c514 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	699a      	ldr	r2, [r3, #24]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f042 0208 	orr.w	r2, r2, #8
 800c20a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	699a      	ldr	r2, [r3, #24]
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f022 0204 	bic.w	r2, r2, #4
 800c21a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	6999      	ldr	r1, [r3, #24]
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	691a      	ldr	r2, [r3, #16]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	430a      	orrs	r2, r1
 800c22c:	619a      	str	r2, [r3, #24]
      break;
 800c22e:	e0a5      	b.n	800c37c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	68b9      	ldr	r1, [r7, #8]
 800c236:	4618      	mov	r0, r3
 800c238:	f000 f9fc 	bl	800c634 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	699a      	ldr	r2, [r3, #24]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c24a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	699a      	ldr	r2, [r3, #24]
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c25a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	6999      	ldr	r1, [r3, #24]
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	691b      	ldr	r3, [r3, #16]
 800c266:	021a      	lsls	r2, r3, #8
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	430a      	orrs	r2, r1
 800c26e:	619a      	str	r2, [r3, #24]
      break;
 800c270:	e084      	b.n	800c37c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	68b9      	ldr	r1, [r7, #8]
 800c278:	4618      	mov	r0, r3
 800c27a:	f000 fa65 	bl	800c748 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	69da      	ldr	r2, [r3, #28]
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f042 0208 	orr.w	r2, r2, #8
 800c28c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	69da      	ldr	r2, [r3, #28]
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f022 0204 	bic.w	r2, r2, #4
 800c29c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	69d9      	ldr	r1, [r3, #28]
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	691a      	ldr	r2, [r3, #16]
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	430a      	orrs	r2, r1
 800c2ae:	61da      	str	r2, [r3, #28]
      break;
 800c2b0:	e064      	b.n	800c37c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	68b9      	ldr	r1, [r7, #8]
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f000 facd 	bl	800c858 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	69da      	ldr	r2, [r3, #28]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c2cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	69da      	ldr	r2, [r3, #28]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c2dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	69d9      	ldr	r1, [r3, #28]
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	691b      	ldr	r3, [r3, #16]
 800c2e8:	021a      	lsls	r2, r3, #8
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	430a      	orrs	r2, r1
 800c2f0:	61da      	str	r2, [r3, #28]
      break;
 800c2f2:	e043      	b.n	800c37c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	68b9      	ldr	r1, [r7, #8]
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f000 fb16 	bl	800c92c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f042 0208 	orr.w	r2, r2, #8
 800c30e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f022 0204 	bic.w	r2, r2, #4
 800c31e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	691a      	ldr	r2, [r3, #16]
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	430a      	orrs	r2, r1
 800c330:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c332:	e023      	b.n	800c37c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	68b9      	ldr	r1, [r7, #8]
 800c33a:	4618      	mov	r0, r3
 800c33c:	f000 fb5a 	bl	800c9f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c34e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c35e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	691b      	ldr	r3, [r3, #16]
 800c36a:	021a      	lsls	r2, r3, #8
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	430a      	orrs	r2, r1
 800c372:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c374:	e002      	b.n	800c37c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c376:	2301      	movs	r3, #1
 800c378:	75fb      	strb	r3, [r7, #23]
      break;
 800c37a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2200      	movs	r2, #0
 800c380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c384:	7dfb      	ldrb	r3, [r7, #23]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3718      	adds	r7, #24
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop

0800c390 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c390:	b480      	push	{r7}
 800c392:	b083      	sub	sp, #12
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c398:	bf00      	nop
 800c39a:	370c      	adds	r7, #12
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c3ac:	bf00      	nop
 800c3ae:	370c      	adds	r7, #12
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c3c0:	bf00      	nop
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c3d4:	bf00      	nop
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	4a40      	ldr	r2, [pc, #256]	; (800c4f4 <TIM_Base_SetConfig+0x114>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d013      	beq.n	800c420 <TIM_Base_SetConfig+0x40>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3fe:	d00f      	beq.n	800c420 <TIM_Base_SetConfig+0x40>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	4a3d      	ldr	r2, [pc, #244]	; (800c4f8 <TIM_Base_SetConfig+0x118>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d00b      	beq.n	800c420 <TIM_Base_SetConfig+0x40>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	4a3c      	ldr	r2, [pc, #240]	; (800c4fc <TIM_Base_SetConfig+0x11c>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d007      	beq.n	800c420 <TIM_Base_SetConfig+0x40>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	4a3b      	ldr	r2, [pc, #236]	; (800c500 <TIM_Base_SetConfig+0x120>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d003      	beq.n	800c420 <TIM_Base_SetConfig+0x40>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	4a3a      	ldr	r2, [pc, #232]	; (800c504 <TIM_Base_SetConfig+0x124>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d108      	bne.n	800c432 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	4313      	orrs	r3, r2
 800c430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	4a2f      	ldr	r2, [pc, #188]	; (800c4f4 <TIM_Base_SetConfig+0x114>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d01f      	beq.n	800c47a <TIM_Base_SetConfig+0x9a>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c440:	d01b      	beq.n	800c47a <TIM_Base_SetConfig+0x9a>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4a2c      	ldr	r2, [pc, #176]	; (800c4f8 <TIM_Base_SetConfig+0x118>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d017      	beq.n	800c47a <TIM_Base_SetConfig+0x9a>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	4a2b      	ldr	r2, [pc, #172]	; (800c4fc <TIM_Base_SetConfig+0x11c>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d013      	beq.n	800c47a <TIM_Base_SetConfig+0x9a>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	4a2a      	ldr	r2, [pc, #168]	; (800c500 <TIM_Base_SetConfig+0x120>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d00f      	beq.n	800c47a <TIM_Base_SetConfig+0x9a>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4a29      	ldr	r2, [pc, #164]	; (800c504 <TIM_Base_SetConfig+0x124>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d00b      	beq.n	800c47a <TIM_Base_SetConfig+0x9a>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	4a28      	ldr	r2, [pc, #160]	; (800c508 <TIM_Base_SetConfig+0x128>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d007      	beq.n	800c47a <TIM_Base_SetConfig+0x9a>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	4a27      	ldr	r2, [pc, #156]	; (800c50c <TIM_Base_SetConfig+0x12c>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d003      	beq.n	800c47a <TIM_Base_SetConfig+0x9a>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	4a26      	ldr	r2, [pc, #152]	; (800c510 <TIM_Base_SetConfig+0x130>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d108      	bne.n	800c48c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	4313      	orrs	r3, r2
 800c48a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	695b      	ldr	r3, [r3, #20]
 800c496:	4313      	orrs	r3, r2
 800c498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	689a      	ldr	r2, [r3, #8]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	4a10      	ldr	r2, [pc, #64]	; (800c4f4 <TIM_Base_SetConfig+0x114>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d00f      	beq.n	800c4d8 <TIM_Base_SetConfig+0xf8>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	4a12      	ldr	r2, [pc, #72]	; (800c504 <TIM_Base_SetConfig+0x124>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d00b      	beq.n	800c4d8 <TIM_Base_SetConfig+0xf8>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	4a11      	ldr	r2, [pc, #68]	; (800c508 <TIM_Base_SetConfig+0x128>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d007      	beq.n	800c4d8 <TIM_Base_SetConfig+0xf8>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	4a10      	ldr	r2, [pc, #64]	; (800c50c <TIM_Base_SetConfig+0x12c>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d003      	beq.n	800c4d8 <TIM_Base_SetConfig+0xf8>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	4a0f      	ldr	r2, [pc, #60]	; (800c510 <TIM_Base_SetConfig+0x130>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d103      	bne.n	800c4e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	691a      	ldr	r2, [r3, #16]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	615a      	str	r2, [r3, #20]
}
 800c4e6:	bf00      	nop
 800c4e8:	3714      	adds	r7, #20
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	40010000 	.word	0x40010000
 800c4f8:	40000400 	.word	0x40000400
 800c4fc:	40000800 	.word	0x40000800
 800c500:	40000c00 	.word	0x40000c00
 800c504:	40010400 	.word	0x40010400
 800c508:	40014000 	.word	0x40014000
 800c50c:	40014400 	.word	0x40014400
 800c510:	40014800 	.word	0x40014800

0800c514 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c514:	b480      	push	{r7}
 800c516:	b087      	sub	sp, #28
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6a1b      	ldr	r3, [r3, #32]
 800c522:	f023 0201 	bic.w	r2, r3, #1
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a1b      	ldr	r3, [r3, #32]
 800c52e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	699b      	ldr	r3, [r3, #24]
 800c53a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c53c:	68fa      	ldr	r2, [r7, #12]
 800c53e:	4b37      	ldr	r3, [pc, #220]	; (800c61c <TIM_OC1_SetConfig+0x108>)
 800c540:	4013      	ands	r3, r2
 800c542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f023 0303 	bic.w	r3, r3, #3
 800c54a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	68fa      	ldr	r2, [r7, #12]
 800c552:	4313      	orrs	r3, r2
 800c554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	f023 0302 	bic.w	r3, r3, #2
 800c55c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	697a      	ldr	r2, [r7, #20]
 800c564:	4313      	orrs	r3, r2
 800c566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	4a2d      	ldr	r2, [pc, #180]	; (800c620 <TIM_OC1_SetConfig+0x10c>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d00f      	beq.n	800c590 <TIM_OC1_SetConfig+0x7c>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	4a2c      	ldr	r2, [pc, #176]	; (800c624 <TIM_OC1_SetConfig+0x110>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d00b      	beq.n	800c590 <TIM_OC1_SetConfig+0x7c>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4a2b      	ldr	r2, [pc, #172]	; (800c628 <TIM_OC1_SetConfig+0x114>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d007      	beq.n	800c590 <TIM_OC1_SetConfig+0x7c>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	4a2a      	ldr	r2, [pc, #168]	; (800c62c <TIM_OC1_SetConfig+0x118>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d003      	beq.n	800c590 <TIM_OC1_SetConfig+0x7c>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	4a29      	ldr	r2, [pc, #164]	; (800c630 <TIM_OC1_SetConfig+0x11c>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d10c      	bne.n	800c5aa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	f023 0308 	bic.w	r3, r3, #8
 800c596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	697a      	ldr	r2, [r7, #20]
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	f023 0304 	bic.w	r3, r3, #4
 800c5a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	4a1c      	ldr	r2, [pc, #112]	; (800c620 <TIM_OC1_SetConfig+0x10c>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d00f      	beq.n	800c5d2 <TIM_OC1_SetConfig+0xbe>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	4a1b      	ldr	r2, [pc, #108]	; (800c624 <TIM_OC1_SetConfig+0x110>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d00b      	beq.n	800c5d2 <TIM_OC1_SetConfig+0xbe>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	4a1a      	ldr	r2, [pc, #104]	; (800c628 <TIM_OC1_SetConfig+0x114>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d007      	beq.n	800c5d2 <TIM_OC1_SetConfig+0xbe>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	4a19      	ldr	r2, [pc, #100]	; (800c62c <TIM_OC1_SetConfig+0x118>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d003      	beq.n	800c5d2 <TIM_OC1_SetConfig+0xbe>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	4a18      	ldr	r2, [pc, #96]	; (800c630 <TIM_OC1_SetConfig+0x11c>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d111      	bne.n	800c5f6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c5d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c5e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	695b      	ldr	r3, [r3, #20]
 800c5e6:	693a      	ldr	r2, [r7, #16]
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	699b      	ldr	r3, [r3, #24]
 800c5f0:	693a      	ldr	r2, [r7, #16]
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	693a      	ldr	r2, [r7, #16]
 800c5fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	68fa      	ldr	r2, [r7, #12]
 800c600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	685a      	ldr	r2, [r3, #4]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	697a      	ldr	r2, [r7, #20]
 800c60e:	621a      	str	r2, [r3, #32]
}
 800c610:	bf00      	nop
 800c612:	371c      	adds	r7, #28
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr
 800c61c:	fffeff8f 	.word	0xfffeff8f
 800c620:	40010000 	.word	0x40010000
 800c624:	40010400 	.word	0x40010400
 800c628:	40014000 	.word	0x40014000
 800c62c:	40014400 	.word	0x40014400
 800c630:	40014800 	.word	0x40014800

0800c634 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c634:	b480      	push	{r7}
 800c636:	b087      	sub	sp, #28
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6a1b      	ldr	r3, [r3, #32]
 800c642:	f023 0210 	bic.w	r2, r3, #16
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6a1b      	ldr	r3, [r3, #32]
 800c64e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	699b      	ldr	r3, [r3, #24]
 800c65a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	4b34      	ldr	r3, [pc, #208]	; (800c730 <TIM_OC2_SetConfig+0xfc>)
 800c660:	4013      	ands	r3, r2
 800c662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c66a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	021b      	lsls	r3, r3, #8
 800c672:	68fa      	ldr	r2, [r7, #12]
 800c674:	4313      	orrs	r3, r2
 800c676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	f023 0320 	bic.w	r3, r3, #32
 800c67e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	689b      	ldr	r3, [r3, #8]
 800c684:	011b      	lsls	r3, r3, #4
 800c686:	697a      	ldr	r2, [r7, #20]
 800c688:	4313      	orrs	r3, r2
 800c68a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	4a29      	ldr	r2, [pc, #164]	; (800c734 <TIM_OC2_SetConfig+0x100>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d003      	beq.n	800c69c <TIM_OC2_SetConfig+0x68>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4a28      	ldr	r2, [pc, #160]	; (800c738 <TIM_OC2_SetConfig+0x104>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d10d      	bne.n	800c6b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	011b      	lsls	r3, r3, #4
 800c6aa:	697a      	ldr	r2, [r7, #20]
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	4a1e      	ldr	r2, [pc, #120]	; (800c734 <TIM_OC2_SetConfig+0x100>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d00f      	beq.n	800c6e0 <TIM_OC2_SetConfig+0xac>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	4a1d      	ldr	r2, [pc, #116]	; (800c738 <TIM_OC2_SetConfig+0x104>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d00b      	beq.n	800c6e0 <TIM_OC2_SetConfig+0xac>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	4a1c      	ldr	r2, [pc, #112]	; (800c73c <TIM_OC2_SetConfig+0x108>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d007      	beq.n	800c6e0 <TIM_OC2_SetConfig+0xac>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	4a1b      	ldr	r2, [pc, #108]	; (800c740 <TIM_OC2_SetConfig+0x10c>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d003      	beq.n	800c6e0 <TIM_OC2_SetConfig+0xac>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	4a1a      	ldr	r2, [pc, #104]	; (800c744 <TIM_OC2_SetConfig+0x110>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d113      	bne.n	800c708 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c6e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c6ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	695b      	ldr	r3, [r3, #20]
 800c6f4:	009b      	lsls	r3, r3, #2
 800c6f6:	693a      	ldr	r2, [r7, #16]
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	699b      	ldr	r3, [r3, #24]
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	693a      	ldr	r2, [r7, #16]
 800c704:	4313      	orrs	r3, r2
 800c706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	693a      	ldr	r2, [r7, #16]
 800c70c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	685a      	ldr	r2, [r3, #4]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	697a      	ldr	r2, [r7, #20]
 800c720:	621a      	str	r2, [r3, #32]
}
 800c722:	bf00      	nop
 800c724:	371c      	adds	r7, #28
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr
 800c72e:	bf00      	nop
 800c730:	feff8fff 	.word	0xfeff8fff
 800c734:	40010000 	.word	0x40010000
 800c738:	40010400 	.word	0x40010400
 800c73c:	40014000 	.word	0x40014000
 800c740:	40014400 	.word	0x40014400
 800c744:	40014800 	.word	0x40014800

0800c748 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c748:	b480      	push	{r7}
 800c74a:	b087      	sub	sp, #28
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6a1b      	ldr	r3, [r3, #32]
 800c756:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6a1b      	ldr	r3, [r3, #32]
 800c762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	69db      	ldr	r3, [r3, #28]
 800c76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	4b33      	ldr	r3, [pc, #204]	; (800c840 <TIM_OC3_SetConfig+0xf8>)
 800c774:	4013      	ands	r3, r2
 800c776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f023 0303 	bic.w	r3, r3, #3
 800c77e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	68fa      	ldr	r2, [r7, #12]
 800c786:	4313      	orrs	r3, r2
 800c788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	021b      	lsls	r3, r3, #8
 800c798:	697a      	ldr	r2, [r7, #20]
 800c79a:	4313      	orrs	r3, r2
 800c79c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	4a28      	ldr	r2, [pc, #160]	; (800c844 <TIM_OC3_SetConfig+0xfc>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d003      	beq.n	800c7ae <TIM_OC3_SetConfig+0x66>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	4a27      	ldr	r2, [pc, #156]	; (800c848 <TIM_OC3_SetConfig+0x100>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d10d      	bne.n	800c7ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c7b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	68db      	ldr	r3, [r3, #12]
 800c7ba:	021b      	lsls	r3, r3, #8
 800c7bc:	697a      	ldr	r2, [r7, #20]
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c7c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	4a1d      	ldr	r2, [pc, #116]	; (800c844 <TIM_OC3_SetConfig+0xfc>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d00f      	beq.n	800c7f2 <TIM_OC3_SetConfig+0xaa>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	4a1c      	ldr	r2, [pc, #112]	; (800c848 <TIM_OC3_SetConfig+0x100>)
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	d00b      	beq.n	800c7f2 <TIM_OC3_SetConfig+0xaa>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	4a1b      	ldr	r2, [pc, #108]	; (800c84c <TIM_OC3_SetConfig+0x104>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d007      	beq.n	800c7f2 <TIM_OC3_SetConfig+0xaa>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	4a1a      	ldr	r2, [pc, #104]	; (800c850 <TIM_OC3_SetConfig+0x108>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d003      	beq.n	800c7f2 <TIM_OC3_SetConfig+0xaa>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	4a19      	ldr	r2, [pc, #100]	; (800c854 <TIM_OC3_SetConfig+0x10c>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d113      	bne.n	800c81a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	695b      	ldr	r3, [r3, #20]
 800c806:	011b      	lsls	r3, r3, #4
 800c808:	693a      	ldr	r2, [r7, #16]
 800c80a:	4313      	orrs	r3, r2
 800c80c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	699b      	ldr	r3, [r3, #24]
 800c812:	011b      	lsls	r3, r3, #4
 800c814:	693a      	ldr	r2, [r7, #16]
 800c816:	4313      	orrs	r3, r2
 800c818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	693a      	ldr	r2, [r7, #16]
 800c81e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	685a      	ldr	r2, [r3, #4]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	697a      	ldr	r2, [r7, #20]
 800c832:	621a      	str	r2, [r3, #32]
}
 800c834:	bf00      	nop
 800c836:	371c      	adds	r7, #28
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr
 800c840:	fffeff8f 	.word	0xfffeff8f
 800c844:	40010000 	.word	0x40010000
 800c848:	40010400 	.word	0x40010400
 800c84c:	40014000 	.word	0x40014000
 800c850:	40014400 	.word	0x40014400
 800c854:	40014800 	.word	0x40014800

0800c858 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c858:	b480      	push	{r7}
 800c85a:	b087      	sub	sp, #28
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6a1b      	ldr	r3, [r3, #32]
 800c866:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6a1b      	ldr	r3, [r3, #32]
 800c872:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	69db      	ldr	r3, [r3, #28]
 800c87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c880:	68fa      	ldr	r2, [r7, #12]
 800c882:	4b24      	ldr	r3, [pc, #144]	; (800c914 <TIM_OC4_SetConfig+0xbc>)
 800c884:	4013      	ands	r3, r2
 800c886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c88e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	021b      	lsls	r3, r3, #8
 800c896:	68fa      	ldr	r2, [r7, #12]
 800c898:	4313      	orrs	r3, r2
 800c89a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c8a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	689b      	ldr	r3, [r3, #8]
 800c8a8:	031b      	lsls	r3, r3, #12
 800c8aa:	693a      	ldr	r2, [r7, #16]
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	4a19      	ldr	r2, [pc, #100]	; (800c918 <TIM_OC4_SetConfig+0xc0>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d00f      	beq.n	800c8d8 <TIM_OC4_SetConfig+0x80>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	4a18      	ldr	r2, [pc, #96]	; (800c91c <TIM_OC4_SetConfig+0xc4>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d00b      	beq.n	800c8d8 <TIM_OC4_SetConfig+0x80>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4a17      	ldr	r2, [pc, #92]	; (800c920 <TIM_OC4_SetConfig+0xc8>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d007      	beq.n	800c8d8 <TIM_OC4_SetConfig+0x80>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	4a16      	ldr	r2, [pc, #88]	; (800c924 <TIM_OC4_SetConfig+0xcc>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d003      	beq.n	800c8d8 <TIM_OC4_SetConfig+0x80>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4a15      	ldr	r2, [pc, #84]	; (800c928 <TIM_OC4_SetConfig+0xd0>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d109      	bne.n	800c8ec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c8de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	695b      	ldr	r3, [r3, #20]
 800c8e4:	019b      	lsls	r3, r3, #6
 800c8e6:	697a      	ldr	r2, [r7, #20]
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	697a      	ldr	r2, [r7, #20]
 800c8f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	685a      	ldr	r2, [r3, #4]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	693a      	ldr	r2, [r7, #16]
 800c904:	621a      	str	r2, [r3, #32]
}
 800c906:	bf00      	nop
 800c908:	371c      	adds	r7, #28
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	feff8fff 	.word	0xfeff8fff
 800c918:	40010000 	.word	0x40010000
 800c91c:	40010400 	.word	0x40010400
 800c920:	40014000 	.word	0x40014000
 800c924:	40014400 	.word	0x40014400
 800c928:	40014800 	.word	0x40014800

0800c92c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b087      	sub	sp, #28
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6a1b      	ldr	r3, [r3, #32]
 800c93a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6a1b      	ldr	r3, [r3, #32]
 800c946:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c954:	68fa      	ldr	r2, [r7, #12]
 800c956:	4b21      	ldr	r3, [pc, #132]	; (800c9dc <TIM_OC5_SetConfig+0xb0>)
 800c958:	4013      	ands	r3, r2
 800c95a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	68fa      	ldr	r2, [r7, #12]
 800c962:	4313      	orrs	r3, r2
 800c964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c96c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	689b      	ldr	r3, [r3, #8]
 800c972:	041b      	lsls	r3, r3, #16
 800c974:	693a      	ldr	r2, [r7, #16]
 800c976:	4313      	orrs	r3, r2
 800c978:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	4a18      	ldr	r2, [pc, #96]	; (800c9e0 <TIM_OC5_SetConfig+0xb4>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d00f      	beq.n	800c9a2 <TIM_OC5_SetConfig+0x76>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4a17      	ldr	r2, [pc, #92]	; (800c9e4 <TIM_OC5_SetConfig+0xb8>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d00b      	beq.n	800c9a2 <TIM_OC5_SetConfig+0x76>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4a16      	ldr	r2, [pc, #88]	; (800c9e8 <TIM_OC5_SetConfig+0xbc>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d007      	beq.n	800c9a2 <TIM_OC5_SetConfig+0x76>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	4a15      	ldr	r2, [pc, #84]	; (800c9ec <TIM_OC5_SetConfig+0xc0>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d003      	beq.n	800c9a2 <TIM_OC5_SetConfig+0x76>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4a14      	ldr	r2, [pc, #80]	; (800c9f0 <TIM_OC5_SetConfig+0xc4>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d109      	bne.n	800c9b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c9a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	695b      	ldr	r3, [r3, #20]
 800c9ae:	021b      	lsls	r3, r3, #8
 800c9b0:	697a      	ldr	r2, [r7, #20]
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	697a      	ldr	r2, [r7, #20]
 800c9ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	68fa      	ldr	r2, [r7, #12]
 800c9c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	685a      	ldr	r2, [r3, #4]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	693a      	ldr	r2, [r7, #16]
 800c9ce:	621a      	str	r2, [r3, #32]
}
 800c9d0:	bf00      	nop
 800c9d2:	371c      	adds	r7, #28
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr
 800c9dc:	fffeff8f 	.word	0xfffeff8f
 800c9e0:	40010000 	.word	0x40010000
 800c9e4:	40010400 	.word	0x40010400
 800c9e8:	40014000 	.word	0x40014000
 800c9ec:	40014400 	.word	0x40014400
 800c9f0:	40014800 	.word	0x40014800

0800c9f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b087      	sub	sp, #28
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6a1b      	ldr	r3, [r3, #32]
 800ca02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6a1b      	ldr	r3, [r3, #32]
 800ca0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ca1c:	68fa      	ldr	r2, [r7, #12]
 800ca1e:	4b22      	ldr	r3, [pc, #136]	; (800caa8 <TIM_OC6_SetConfig+0xb4>)
 800ca20:	4013      	ands	r3, r2
 800ca22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	021b      	lsls	r3, r3, #8
 800ca2a:	68fa      	ldr	r2, [r7, #12]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ca36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	689b      	ldr	r3, [r3, #8]
 800ca3c:	051b      	lsls	r3, r3, #20
 800ca3e:	693a      	ldr	r2, [r7, #16]
 800ca40:	4313      	orrs	r3, r2
 800ca42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4a19      	ldr	r2, [pc, #100]	; (800caac <TIM_OC6_SetConfig+0xb8>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d00f      	beq.n	800ca6c <TIM_OC6_SetConfig+0x78>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	4a18      	ldr	r2, [pc, #96]	; (800cab0 <TIM_OC6_SetConfig+0xbc>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d00b      	beq.n	800ca6c <TIM_OC6_SetConfig+0x78>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	4a17      	ldr	r2, [pc, #92]	; (800cab4 <TIM_OC6_SetConfig+0xc0>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d007      	beq.n	800ca6c <TIM_OC6_SetConfig+0x78>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	4a16      	ldr	r2, [pc, #88]	; (800cab8 <TIM_OC6_SetConfig+0xc4>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d003      	beq.n	800ca6c <TIM_OC6_SetConfig+0x78>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	4a15      	ldr	r2, [pc, #84]	; (800cabc <TIM_OC6_SetConfig+0xc8>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d109      	bne.n	800ca80 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	695b      	ldr	r3, [r3, #20]
 800ca78:	029b      	lsls	r3, r3, #10
 800ca7a:	697a      	ldr	r2, [r7, #20]
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	697a      	ldr	r2, [r7, #20]
 800ca84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	685a      	ldr	r2, [r3, #4]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	693a      	ldr	r2, [r7, #16]
 800ca98:	621a      	str	r2, [r3, #32]
}
 800ca9a:	bf00      	nop
 800ca9c:	371c      	adds	r7, #28
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	feff8fff 	.word	0xfeff8fff
 800caac:	40010000 	.word	0x40010000
 800cab0:	40010400 	.word	0x40010400
 800cab4:	40014000 	.word	0x40014000
 800cab8:	40014400 	.word	0x40014400
 800cabc:	40014800 	.word	0x40014800

0800cac0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b087      	sub	sp, #28
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	f003 031f 	and.w	r3, r3, #31
 800cad2:	2201      	movs	r2, #1
 800cad4:	fa02 f303 	lsl.w	r3, r2, r3
 800cad8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	6a1a      	ldr	r2, [r3, #32]
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	43db      	mvns	r3, r3
 800cae2:	401a      	ands	r2, r3
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6a1a      	ldr	r2, [r3, #32]
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	f003 031f 	and.w	r3, r3, #31
 800caf2:	6879      	ldr	r1, [r7, #4]
 800caf4:	fa01 f303 	lsl.w	r3, r1, r3
 800caf8:	431a      	orrs	r2, r3
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	621a      	str	r2, [r3, #32]
}
 800cafe:	bf00      	nop
 800cb00:	371c      	adds	r7, #28
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr
	...

0800cb0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b085      	sub	sp, #20
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d101      	bne.n	800cb24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cb20:	2302      	movs	r3, #2
 800cb22:	e06d      	b.n	800cc00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2201      	movs	r2, #1
 800cb28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2202      	movs	r2, #2
 800cb30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	685b      	ldr	r3, [r3, #4]
 800cb3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	689b      	ldr	r3, [r3, #8]
 800cb42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4a30      	ldr	r2, [pc, #192]	; (800cc0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d004      	beq.n	800cb58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	4a2f      	ldr	r2, [pc, #188]	; (800cc10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d108      	bne.n	800cb6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cb5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	68fa      	ldr	r2, [r7, #12]
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	68fa      	ldr	r2, [r7, #12]
 800cb82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a20      	ldr	r2, [pc, #128]	; (800cc0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d022      	beq.n	800cbd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb96:	d01d      	beq.n	800cbd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a1d      	ldr	r2, [pc, #116]	; (800cc14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d018      	beq.n	800cbd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a1c      	ldr	r2, [pc, #112]	; (800cc18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d013      	beq.n	800cbd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a1a      	ldr	r2, [pc, #104]	; (800cc1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d00e      	beq.n	800cbd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4a15      	ldr	r2, [pc, #84]	; (800cc10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d009      	beq.n	800cbd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a16      	ldr	r2, [pc, #88]	; (800cc20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d004      	beq.n	800cbd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a15      	ldr	r2, [pc, #84]	; (800cc24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d10c      	bne.n	800cbee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	689b      	ldr	r3, [r3, #8]
 800cbe0:	68ba      	ldr	r2, [r7, #8]
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	68ba      	ldr	r2, [r7, #8]
 800cbec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cbfe:	2300      	movs	r3, #0
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3714      	adds	r7, #20
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr
 800cc0c:	40010000 	.word	0x40010000
 800cc10:	40010400 	.word	0x40010400
 800cc14:	40000400 	.word	0x40000400
 800cc18:	40000800 	.word	0x40000800
 800cc1c:	40000c00 	.word	0x40000c00
 800cc20:	40001800 	.word	0x40001800
 800cc24:	40014000 	.word	0x40014000

0800cc28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b083      	sub	sp, #12
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc30:	bf00      	nop
 800cc32:	370c      	adds	r7, #12
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr

0800cc3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b083      	sub	sp, #12
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc44:	bf00      	nop
 800cc46:	370c      	adds	r7, #12
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr

0800cc50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cc58:	bf00      	nop
 800cc5a:	370c      	adds	r7, #12
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d101      	bne.n	800cc76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc72:	2301      	movs	r3, #1
 800cc74:	e042      	b.n	800ccfc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d106      	bne.n	800cc8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f7f7 f9db 	bl	8004044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2224      	movs	r2, #36	; 0x24
 800cc92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f022 0201 	bic.w	r2, r2, #1
 800cca4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 f82c 	bl	800cd04 <UART_SetConfig>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d101      	bne.n	800ccb6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e022      	b.n	800ccfc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d002      	beq.n	800ccc4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 fd88 	bl	800d7d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	685a      	ldr	r2, [r3, #4]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ccd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	689a      	ldr	r2, [r3, #8]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cce2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f042 0201 	orr.w	r2, r2, #1
 800ccf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f000 fe0f 	bl	800d918 <UART_CheckIdleState>
 800ccfa:	4603      	mov	r3, r0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd08:	b092      	sub	sp, #72	; 0x48
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	689a      	ldr	r2, [r3, #8]
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	691b      	ldr	r3, [r3, #16]
 800cd1c:	431a      	orrs	r2, r3
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	695b      	ldr	r3, [r3, #20]
 800cd22:	431a      	orrs	r2, r3
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	69db      	ldr	r3, [r3, #28]
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	4bbe      	ldr	r3, [pc, #760]	; (800d02c <UART_SetConfig+0x328>)
 800cd34:	4013      	ands	r3, r2
 800cd36:	697a      	ldr	r2, [r7, #20]
 800cd38:	6812      	ldr	r2, [r2, #0]
 800cd3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd3c:	430b      	orrs	r3, r1
 800cd3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	68da      	ldr	r2, [r3, #12]
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	430a      	orrs	r2, r1
 800cd54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	699b      	ldr	r3, [r3, #24]
 800cd5a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4ab3      	ldr	r2, [pc, #716]	; (800d030 <UART_SetConfig+0x32c>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d004      	beq.n	800cd70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	6a1b      	ldr	r3, [r3, #32]
 800cd6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd6c:	4313      	orrs	r3, r2
 800cd6e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	689a      	ldr	r2, [r3, #8]
 800cd76:	4baf      	ldr	r3, [pc, #700]	; (800d034 <UART_SetConfig+0x330>)
 800cd78:	4013      	ands	r3, r2
 800cd7a:	697a      	ldr	r2, [r7, #20]
 800cd7c:	6812      	ldr	r2, [r2, #0]
 800cd7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd80:	430b      	orrs	r3, r1
 800cd82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd8a:	f023 010f 	bic.w	r1, r3, #15
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	430a      	orrs	r2, r1
 800cd98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4aa6      	ldr	r2, [pc, #664]	; (800d038 <UART_SetConfig+0x334>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d177      	bne.n	800ce94 <UART_SetConfig+0x190>
 800cda4:	4ba5      	ldr	r3, [pc, #660]	; (800d03c <UART_SetConfig+0x338>)
 800cda6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cda8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cdac:	2b28      	cmp	r3, #40	; 0x28
 800cdae:	d86d      	bhi.n	800ce8c <UART_SetConfig+0x188>
 800cdb0:	a201      	add	r2, pc, #4	; (adr r2, 800cdb8 <UART_SetConfig+0xb4>)
 800cdb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb6:	bf00      	nop
 800cdb8:	0800ce5d 	.word	0x0800ce5d
 800cdbc:	0800ce8d 	.word	0x0800ce8d
 800cdc0:	0800ce8d 	.word	0x0800ce8d
 800cdc4:	0800ce8d 	.word	0x0800ce8d
 800cdc8:	0800ce8d 	.word	0x0800ce8d
 800cdcc:	0800ce8d 	.word	0x0800ce8d
 800cdd0:	0800ce8d 	.word	0x0800ce8d
 800cdd4:	0800ce8d 	.word	0x0800ce8d
 800cdd8:	0800ce65 	.word	0x0800ce65
 800cddc:	0800ce8d 	.word	0x0800ce8d
 800cde0:	0800ce8d 	.word	0x0800ce8d
 800cde4:	0800ce8d 	.word	0x0800ce8d
 800cde8:	0800ce8d 	.word	0x0800ce8d
 800cdec:	0800ce8d 	.word	0x0800ce8d
 800cdf0:	0800ce8d 	.word	0x0800ce8d
 800cdf4:	0800ce8d 	.word	0x0800ce8d
 800cdf8:	0800ce6d 	.word	0x0800ce6d
 800cdfc:	0800ce8d 	.word	0x0800ce8d
 800ce00:	0800ce8d 	.word	0x0800ce8d
 800ce04:	0800ce8d 	.word	0x0800ce8d
 800ce08:	0800ce8d 	.word	0x0800ce8d
 800ce0c:	0800ce8d 	.word	0x0800ce8d
 800ce10:	0800ce8d 	.word	0x0800ce8d
 800ce14:	0800ce8d 	.word	0x0800ce8d
 800ce18:	0800ce75 	.word	0x0800ce75
 800ce1c:	0800ce8d 	.word	0x0800ce8d
 800ce20:	0800ce8d 	.word	0x0800ce8d
 800ce24:	0800ce8d 	.word	0x0800ce8d
 800ce28:	0800ce8d 	.word	0x0800ce8d
 800ce2c:	0800ce8d 	.word	0x0800ce8d
 800ce30:	0800ce8d 	.word	0x0800ce8d
 800ce34:	0800ce8d 	.word	0x0800ce8d
 800ce38:	0800ce7d 	.word	0x0800ce7d
 800ce3c:	0800ce8d 	.word	0x0800ce8d
 800ce40:	0800ce8d 	.word	0x0800ce8d
 800ce44:	0800ce8d 	.word	0x0800ce8d
 800ce48:	0800ce8d 	.word	0x0800ce8d
 800ce4c:	0800ce8d 	.word	0x0800ce8d
 800ce50:	0800ce8d 	.word	0x0800ce8d
 800ce54:	0800ce8d 	.word	0x0800ce8d
 800ce58:	0800ce85 	.word	0x0800ce85
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce62:	e222      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800ce64:	2304      	movs	r3, #4
 800ce66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce6a:	e21e      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800ce6c:	2308      	movs	r3, #8
 800ce6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce72:	e21a      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800ce74:	2310      	movs	r3, #16
 800ce76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce7a:	e216      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800ce7c:	2320      	movs	r3, #32
 800ce7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce82:	e212      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800ce84:	2340      	movs	r3, #64	; 0x40
 800ce86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce8a:	e20e      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800ce8c:	2380      	movs	r3, #128	; 0x80
 800ce8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce92:	e20a      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4a69      	ldr	r2, [pc, #420]	; (800d040 <UART_SetConfig+0x33c>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d130      	bne.n	800cf00 <UART_SetConfig+0x1fc>
 800ce9e:	4b67      	ldr	r3, [pc, #412]	; (800d03c <UART_SetConfig+0x338>)
 800cea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cea2:	f003 0307 	and.w	r3, r3, #7
 800cea6:	2b05      	cmp	r3, #5
 800cea8:	d826      	bhi.n	800cef8 <UART_SetConfig+0x1f4>
 800ceaa:	a201      	add	r2, pc, #4	; (adr r2, 800ceb0 <UART_SetConfig+0x1ac>)
 800ceac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceb0:	0800cec9 	.word	0x0800cec9
 800ceb4:	0800ced1 	.word	0x0800ced1
 800ceb8:	0800ced9 	.word	0x0800ced9
 800cebc:	0800cee1 	.word	0x0800cee1
 800cec0:	0800cee9 	.word	0x0800cee9
 800cec4:	0800cef1 	.word	0x0800cef1
 800cec8:	2300      	movs	r3, #0
 800ceca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cece:	e1ec      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800ced0:	2304      	movs	r3, #4
 800ced2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ced6:	e1e8      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800ced8:	2308      	movs	r3, #8
 800ceda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cede:	e1e4      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800cee0:	2310      	movs	r3, #16
 800cee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cee6:	e1e0      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800cee8:	2320      	movs	r3, #32
 800ceea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceee:	e1dc      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800cef0:	2340      	movs	r3, #64	; 0x40
 800cef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cef6:	e1d8      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800cef8:	2380      	movs	r3, #128	; 0x80
 800cefa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cefe:	e1d4      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	4a4f      	ldr	r2, [pc, #316]	; (800d044 <UART_SetConfig+0x340>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d130      	bne.n	800cf6c <UART_SetConfig+0x268>
 800cf0a:	4b4c      	ldr	r3, [pc, #304]	; (800d03c <UART_SetConfig+0x338>)
 800cf0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf0e:	f003 0307 	and.w	r3, r3, #7
 800cf12:	2b05      	cmp	r3, #5
 800cf14:	d826      	bhi.n	800cf64 <UART_SetConfig+0x260>
 800cf16:	a201      	add	r2, pc, #4	; (adr r2, 800cf1c <UART_SetConfig+0x218>)
 800cf18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf1c:	0800cf35 	.word	0x0800cf35
 800cf20:	0800cf3d 	.word	0x0800cf3d
 800cf24:	0800cf45 	.word	0x0800cf45
 800cf28:	0800cf4d 	.word	0x0800cf4d
 800cf2c:	0800cf55 	.word	0x0800cf55
 800cf30:	0800cf5d 	.word	0x0800cf5d
 800cf34:	2300      	movs	r3, #0
 800cf36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf3a:	e1b6      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800cf3c:	2304      	movs	r3, #4
 800cf3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf42:	e1b2      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800cf44:	2308      	movs	r3, #8
 800cf46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf4a:	e1ae      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800cf4c:	2310      	movs	r3, #16
 800cf4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf52:	e1aa      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800cf54:	2320      	movs	r3, #32
 800cf56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf5a:	e1a6      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800cf5c:	2340      	movs	r3, #64	; 0x40
 800cf5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf62:	e1a2      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800cf64:	2380      	movs	r3, #128	; 0x80
 800cf66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf6a:	e19e      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4a35      	ldr	r2, [pc, #212]	; (800d048 <UART_SetConfig+0x344>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d130      	bne.n	800cfd8 <UART_SetConfig+0x2d4>
 800cf76:	4b31      	ldr	r3, [pc, #196]	; (800d03c <UART_SetConfig+0x338>)
 800cf78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf7a:	f003 0307 	and.w	r3, r3, #7
 800cf7e:	2b05      	cmp	r3, #5
 800cf80:	d826      	bhi.n	800cfd0 <UART_SetConfig+0x2cc>
 800cf82:	a201      	add	r2, pc, #4	; (adr r2, 800cf88 <UART_SetConfig+0x284>)
 800cf84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf88:	0800cfa1 	.word	0x0800cfa1
 800cf8c:	0800cfa9 	.word	0x0800cfa9
 800cf90:	0800cfb1 	.word	0x0800cfb1
 800cf94:	0800cfb9 	.word	0x0800cfb9
 800cf98:	0800cfc1 	.word	0x0800cfc1
 800cf9c:	0800cfc9 	.word	0x0800cfc9
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfa6:	e180      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800cfa8:	2304      	movs	r3, #4
 800cfaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfae:	e17c      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800cfb0:	2308      	movs	r3, #8
 800cfb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfb6:	e178      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800cfb8:	2310      	movs	r3, #16
 800cfba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfbe:	e174      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800cfc0:	2320      	movs	r3, #32
 800cfc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfc6:	e170      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800cfc8:	2340      	movs	r3, #64	; 0x40
 800cfca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfce:	e16c      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800cfd0:	2380      	movs	r3, #128	; 0x80
 800cfd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfd6:	e168      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a1b      	ldr	r2, [pc, #108]	; (800d04c <UART_SetConfig+0x348>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d142      	bne.n	800d068 <UART_SetConfig+0x364>
 800cfe2:	4b16      	ldr	r3, [pc, #88]	; (800d03c <UART_SetConfig+0x338>)
 800cfe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfe6:	f003 0307 	and.w	r3, r3, #7
 800cfea:	2b05      	cmp	r3, #5
 800cfec:	d838      	bhi.n	800d060 <UART_SetConfig+0x35c>
 800cfee:	a201      	add	r2, pc, #4	; (adr r2, 800cff4 <UART_SetConfig+0x2f0>)
 800cff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cff4:	0800d00d 	.word	0x0800d00d
 800cff8:	0800d015 	.word	0x0800d015
 800cffc:	0800d01d 	.word	0x0800d01d
 800d000:	0800d025 	.word	0x0800d025
 800d004:	0800d051 	.word	0x0800d051
 800d008:	0800d059 	.word	0x0800d059
 800d00c:	2300      	movs	r3, #0
 800d00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d012:	e14a      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d014:	2304      	movs	r3, #4
 800d016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d01a:	e146      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d01c:	2308      	movs	r3, #8
 800d01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d022:	e142      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d024:	2310      	movs	r3, #16
 800d026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d02a:	e13e      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d02c:	cfff69f3 	.word	0xcfff69f3
 800d030:	58000c00 	.word	0x58000c00
 800d034:	11fff4ff 	.word	0x11fff4ff
 800d038:	40011000 	.word	0x40011000
 800d03c:	58024400 	.word	0x58024400
 800d040:	40004400 	.word	0x40004400
 800d044:	40004800 	.word	0x40004800
 800d048:	40004c00 	.word	0x40004c00
 800d04c:	40005000 	.word	0x40005000
 800d050:	2320      	movs	r3, #32
 800d052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d056:	e128      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d058:	2340      	movs	r3, #64	; 0x40
 800d05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d05e:	e124      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d060:	2380      	movs	r3, #128	; 0x80
 800d062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d066:	e120      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4acb      	ldr	r2, [pc, #812]	; (800d39c <UART_SetConfig+0x698>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d176      	bne.n	800d160 <UART_SetConfig+0x45c>
 800d072:	4bcb      	ldr	r3, [pc, #812]	; (800d3a0 <UART_SetConfig+0x69c>)
 800d074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d076:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d07a:	2b28      	cmp	r3, #40	; 0x28
 800d07c:	d86c      	bhi.n	800d158 <UART_SetConfig+0x454>
 800d07e:	a201      	add	r2, pc, #4	; (adr r2, 800d084 <UART_SetConfig+0x380>)
 800d080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d084:	0800d129 	.word	0x0800d129
 800d088:	0800d159 	.word	0x0800d159
 800d08c:	0800d159 	.word	0x0800d159
 800d090:	0800d159 	.word	0x0800d159
 800d094:	0800d159 	.word	0x0800d159
 800d098:	0800d159 	.word	0x0800d159
 800d09c:	0800d159 	.word	0x0800d159
 800d0a0:	0800d159 	.word	0x0800d159
 800d0a4:	0800d131 	.word	0x0800d131
 800d0a8:	0800d159 	.word	0x0800d159
 800d0ac:	0800d159 	.word	0x0800d159
 800d0b0:	0800d159 	.word	0x0800d159
 800d0b4:	0800d159 	.word	0x0800d159
 800d0b8:	0800d159 	.word	0x0800d159
 800d0bc:	0800d159 	.word	0x0800d159
 800d0c0:	0800d159 	.word	0x0800d159
 800d0c4:	0800d139 	.word	0x0800d139
 800d0c8:	0800d159 	.word	0x0800d159
 800d0cc:	0800d159 	.word	0x0800d159
 800d0d0:	0800d159 	.word	0x0800d159
 800d0d4:	0800d159 	.word	0x0800d159
 800d0d8:	0800d159 	.word	0x0800d159
 800d0dc:	0800d159 	.word	0x0800d159
 800d0e0:	0800d159 	.word	0x0800d159
 800d0e4:	0800d141 	.word	0x0800d141
 800d0e8:	0800d159 	.word	0x0800d159
 800d0ec:	0800d159 	.word	0x0800d159
 800d0f0:	0800d159 	.word	0x0800d159
 800d0f4:	0800d159 	.word	0x0800d159
 800d0f8:	0800d159 	.word	0x0800d159
 800d0fc:	0800d159 	.word	0x0800d159
 800d100:	0800d159 	.word	0x0800d159
 800d104:	0800d149 	.word	0x0800d149
 800d108:	0800d159 	.word	0x0800d159
 800d10c:	0800d159 	.word	0x0800d159
 800d110:	0800d159 	.word	0x0800d159
 800d114:	0800d159 	.word	0x0800d159
 800d118:	0800d159 	.word	0x0800d159
 800d11c:	0800d159 	.word	0x0800d159
 800d120:	0800d159 	.word	0x0800d159
 800d124:	0800d151 	.word	0x0800d151
 800d128:	2301      	movs	r3, #1
 800d12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d12e:	e0bc      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d130:	2304      	movs	r3, #4
 800d132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d136:	e0b8      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d138:	2308      	movs	r3, #8
 800d13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d13e:	e0b4      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d140:	2310      	movs	r3, #16
 800d142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d146:	e0b0      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d148:	2320      	movs	r3, #32
 800d14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d14e:	e0ac      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d150:	2340      	movs	r3, #64	; 0x40
 800d152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d156:	e0a8      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d158:	2380      	movs	r3, #128	; 0x80
 800d15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d15e:	e0a4      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a8f      	ldr	r2, [pc, #572]	; (800d3a4 <UART_SetConfig+0x6a0>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d130      	bne.n	800d1cc <UART_SetConfig+0x4c8>
 800d16a:	4b8d      	ldr	r3, [pc, #564]	; (800d3a0 <UART_SetConfig+0x69c>)
 800d16c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d16e:	f003 0307 	and.w	r3, r3, #7
 800d172:	2b05      	cmp	r3, #5
 800d174:	d826      	bhi.n	800d1c4 <UART_SetConfig+0x4c0>
 800d176:	a201      	add	r2, pc, #4	; (adr r2, 800d17c <UART_SetConfig+0x478>)
 800d178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d17c:	0800d195 	.word	0x0800d195
 800d180:	0800d19d 	.word	0x0800d19d
 800d184:	0800d1a5 	.word	0x0800d1a5
 800d188:	0800d1ad 	.word	0x0800d1ad
 800d18c:	0800d1b5 	.word	0x0800d1b5
 800d190:	0800d1bd 	.word	0x0800d1bd
 800d194:	2300      	movs	r3, #0
 800d196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d19a:	e086      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d19c:	2304      	movs	r3, #4
 800d19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1a2:	e082      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d1a4:	2308      	movs	r3, #8
 800d1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1aa:	e07e      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d1ac:	2310      	movs	r3, #16
 800d1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1b2:	e07a      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d1b4:	2320      	movs	r3, #32
 800d1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ba:	e076      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d1bc:	2340      	movs	r3, #64	; 0x40
 800d1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1c2:	e072      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d1c4:	2380      	movs	r3, #128	; 0x80
 800d1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ca:	e06e      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a75      	ldr	r2, [pc, #468]	; (800d3a8 <UART_SetConfig+0x6a4>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d130      	bne.n	800d238 <UART_SetConfig+0x534>
 800d1d6:	4b72      	ldr	r3, [pc, #456]	; (800d3a0 <UART_SetConfig+0x69c>)
 800d1d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1da:	f003 0307 	and.w	r3, r3, #7
 800d1de:	2b05      	cmp	r3, #5
 800d1e0:	d826      	bhi.n	800d230 <UART_SetConfig+0x52c>
 800d1e2:	a201      	add	r2, pc, #4	; (adr r2, 800d1e8 <UART_SetConfig+0x4e4>)
 800d1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e8:	0800d201 	.word	0x0800d201
 800d1ec:	0800d209 	.word	0x0800d209
 800d1f0:	0800d211 	.word	0x0800d211
 800d1f4:	0800d219 	.word	0x0800d219
 800d1f8:	0800d221 	.word	0x0800d221
 800d1fc:	0800d229 	.word	0x0800d229
 800d200:	2300      	movs	r3, #0
 800d202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d206:	e050      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d208:	2304      	movs	r3, #4
 800d20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d20e:	e04c      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d210:	2308      	movs	r3, #8
 800d212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d216:	e048      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d218:	2310      	movs	r3, #16
 800d21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d21e:	e044      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d220:	2320      	movs	r3, #32
 800d222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d226:	e040      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d228:	2340      	movs	r3, #64	; 0x40
 800d22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d22e:	e03c      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d230:	2380      	movs	r3, #128	; 0x80
 800d232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d236:	e038      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4a5b      	ldr	r2, [pc, #364]	; (800d3ac <UART_SetConfig+0x6a8>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d130      	bne.n	800d2a4 <UART_SetConfig+0x5a0>
 800d242:	4b57      	ldr	r3, [pc, #348]	; (800d3a0 <UART_SetConfig+0x69c>)
 800d244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d246:	f003 0307 	and.w	r3, r3, #7
 800d24a:	2b05      	cmp	r3, #5
 800d24c:	d826      	bhi.n	800d29c <UART_SetConfig+0x598>
 800d24e:	a201      	add	r2, pc, #4	; (adr r2, 800d254 <UART_SetConfig+0x550>)
 800d250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d254:	0800d26d 	.word	0x0800d26d
 800d258:	0800d275 	.word	0x0800d275
 800d25c:	0800d27d 	.word	0x0800d27d
 800d260:	0800d285 	.word	0x0800d285
 800d264:	0800d28d 	.word	0x0800d28d
 800d268:	0800d295 	.word	0x0800d295
 800d26c:	2302      	movs	r3, #2
 800d26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d272:	e01a      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d274:	2304      	movs	r3, #4
 800d276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d27a:	e016      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d27c:	2308      	movs	r3, #8
 800d27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d282:	e012      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d284:	2310      	movs	r3, #16
 800d286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d28a:	e00e      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d28c:	2320      	movs	r3, #32
 800d28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d292:	e00a      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d294:	2340      	movs	r3, #64	; 0x40
 800d296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d29a:	e006      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d29c:	2380      	movs	r3, #128	; 0x80
 800d29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2a2:	e002      	b.n	800d2aa <UART_SetConfig+0x5a6>
 800d2a4:	2380      	movs	r3, #128	; 0x80
 800d2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a3f      	ldr	r2, [pc, #252]	; (800d3ac <UART_SetConfig+0x6a8>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	f040 80f8 	bne.w	800d4a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d2b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d2ba:	2b20      	cmp	r3, #32
 800d2bc:	dc46      	bgt.n	800d34c <UART_SetConfig+0x648>
 800d2be:	2b02      	cmp	r3, #2
 800d2c0:	f2c0 8082 	blt.w	800d3c8 <UART_SetConfig+0x6c4>
 800d2c4:	3b02      	subs	r3, #2
 800d2c6:	2b1e      	cmp	r3, #30
 800d2c8:	d87e      	bhi.n	800d3c8 <UART_SetConfig+0x6c4>
 800d2ca:	a201      	add	r2, pc, #4	; (adr r2, 800d2d0 <UART_SetConfig+0x5cc>)
 800d2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2d0:	0800d353 	.word	0x0800d353
 800d2d4:	0800d3c9 	.word	0x0800d3c9
 800d2d8:	0800d35b 	.word	0x0800d35b
 800d2dc:	0800d3c9 	.word	0x0800d3c9
 800d2e0:	0800d3c9 	.word	0x0800d3c9
 800d2e4:	0800d3c9 	.word	0x0800d3c9
 800d2e8:	0800d36b 	.word	0x0800d36b
 800d2ec:	0800d3c9 	.word	0x0800d3c9
 800d2f0:	0800d3c9 	.word	0x0800d3c9
 800d2f4:	0800d3c9 	.word	0x0800d3c9
 800d2f8:	0800d3c9 	.word	0x0800d3c9
 800d2fc:	0800d3c9 	.word	0x0800d3c9
 800d300:	0800d3c9 	.word	0x0800d3c9
 800d304:	0800d3c9 	.word	0x0800d3c9
 800d308:	0800d37b 	.word	0x0800d37b
 800d30c:	0800d3c9 	.word	0x0800d3c9
 800d310:	0800d3c9 	.word	0x0800d3c9
 800d314:	0800d3c9 	.word	0x0800d3c9
 800d318:	0800d3c9 	.word	0x0800d3c9
 800d31c:	0800d3c9 	.word	0x0800d3c9
 800d320:	0800d3c9 	.word	0x0800d3c9
 800d324:	0800d3c9 	.word	0x0800d3c9
 800d328:	0800d3c9 	.word	0x0800d3c9
 800d32c:	0800d3c9 	.word	0x0800d3c9
 800d330:	0800d3c9 	.word	0x0800d3c9
 800d334:	0800d3c9 	.word	0x0800d3c9
 800d338:	0800d3c9 	.word	0x0800d3c9
 800d33c:	0800d3c9 	.word	0x0800d3c9
 800d340:	0800d3c9 	.word	0x0800d3c9
 800d344:	0800d3c9 	.word	0x0800d3c9
 800d348:	0800d3bb 	.word	0x0800d3bb
 800d34c:	2b40      	cmp	r3, #64	; 0x40
 800d34e:	d037      	beq.n	800d3c0 <UART_SetConfig+0x6bc>
 800d350:	e03a      	b.n	800d3c8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d352:	f7fc ff79 	bl	800a248 <HAL_RCCEx_GetD3PCLK1Freq>
 800d356:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d358:	e03c      	b.n	800d3d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d35a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d35e:	4618      	mov	r0, r3
 800d360:	f7fc ff88 	bl	800a274 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d368:	e034      	b.n	800d3d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d36a:	f107 0318 	add.w	r3, r7, #24
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fd f8d4 	bl	800a51c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d374:	69fb      	ldr	r3, [r7, #28]
 800d376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d378:	e02c      	b.n	800d3d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d37a:	4b09      	ldr	r3, [pc, #36]	; (800d3a0 <UART_SetConfig+0x69c>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f003 0320 	and.w	r3, r3, #32
 800d382:	2b00      	cmp	r3, #0
 800d384:	d016      	beq.n	800d3b4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d386:	4b06      	ldr	r3, [pc, #24]	; (800d3a0 <UART_SetConfig+0x69c>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	08db      	lsrs	r3, r3, #3
 800d38c:	f003 0303 	and.w	r3, r3, #3
 800d390:	4a07      	ldr	r2, [pc, #28]	; (800d3b0 <UART_SetConfig+0x6ac>)
 800d392:	fa22 f303 	lsr.w	r3, r2, r3
 800d396:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d398:	e01c      	b.n	800d3d4 <UART_SetConfig+0x6d0>
 800d39a:	bf00      	nop
 800d39c:	40011400 	.word	0x40011400
 800d3a0:	58024400 	.word	0x58024400
 800d3a4:	40007800 	.word	0x40007800
 800d3a8:	40007c00 	.word	0x40007c00
 800d3ac:	58000c00 	.word	0x58000c00
 800d3b0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d3b4:	4b9d      	ldr	r3, [pc, #628]	; (800d62c <UART_SetConfig+0x928>)
 800d3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3b8:	e00c      	b.n	800d3d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d3ba:	4b9d      	ldr	r3, [pc, #628]	; (800d630 <UART_SetConfig+0x92c>)
 800d3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3be:	e009      	b.n	800d3d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d3c6:	e005      	b.n	800d3d4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d3d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d3d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f000 81de 	beq.w	800d798 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e0:	4a94      	ldr	r2, [pc, #592]	; (800d634 <UART_SetConfig+0x930>)
 800d3e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3ee:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	685a      	ldr	r2, [r3, #4]
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	005b      	lsls	r3, r3, #1
 800d3f8:	4413      	add	r3, r2
 800d3fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d305      	bcc.n	800d40c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d408:	429a      	cmp	r2, r3
 800d40a:	d903      	bls.n	800d414 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d40c:	2301      	movs	r3, #1
 800d40e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d412:	e1c1      	b.n	800d798 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d416:	2200      	movs	r2, #0
 800d418:	60bb      	str	r3, [r7, #8]
 800d41a:	60fa      	str	r2, [r7, #12]
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d420:	4a84      	ldr	r2, [pc, #528]	; (800d634 <UART_SetConfig+0x930>)
 800d422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d426:	b29b      	uxth	r3, r3
 800d428:	2200      	movs	r2, #0
 800d42a:	603b      	str	r3, [r7, #0]
 800d42c:	607a      	str	r2, [r7, #4]
 800d42e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d432:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d436:	f7f2 ffa3 	bl	8000380 <__aeabi_uldivmod>
 800d43a:	4602      	mov	r2, r0
 800d43c:	460b      	mov	r3, r1
 800d43e:	4610      	mov	r0, r2
 800d440:	4619      	mov	r1, r3
 800d442:	f04f 0200 	mov.w	r2, #0
 800d446:	f04f 0300 	mov.w	r3, #0
 800d44a:	020b      	lsls	r3, r1, #8
 800d44c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d450:	0202      	lsls	r2, r0, #8
 800d452:	6979      	ldr	r1, [r7, #20]
 800d454:	6849      	ldr	r1, [r1, #4]
 800d456:	0849      	lsrs	r1, r1, #1
 800d458:	2000      	movs	r0, #0
 800d45a:	460c      	mov	r4, r1
 800d45c:	4605      	mov	r5, r0
 800d45e:	eb12 0804 	adds.w	r8, r2, r4
 800d462:	eb43 0905 	adc.w	r9, r3, r5
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	2200      	movs	r2, #0
 800d46c:	469a      	mov	sl, r3
 800d46e:	4693      	mov	fp, r2
 800d470:	4652      	mov	r2, sl
 800d472:	465b      	mov	r3, fp
 800d474:	4640      	mov	r0, r8
 800d476:	4649      	mov	r1, r9
 800d478:	f7f2 ff82 	bl	8000380 <__aeabi_uldivmod>
 800d47c:	4602      	mov	r2, r0
 800d47e:	460b      	mov	r3, r1
 800d480:	4613      	mov	r3, r2
 800d482:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d48a:	d308      	bcc.n	800d49e <UART_SetConfig+0x79a>
 800d48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d492:	d204      	bcs.n	800d49e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d49a:	60da      	str	r2, [r3, #12]
 800d49c:	e17c      	b.n	800d798 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d4a4:	e178      	b.n	800d798 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	69db      	ldr	r3, [r3, #28]
 800d4aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d4ae:	f040 80c5 	bne.w	800d63c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d4b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d4b6:	2b20      	cmp	r3, #32
 800d4b8:	dc48      	bgt.n	800d54c <UART_SetConfig+0x848>
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	db7b      	blt.n	800d5b6 <UART_SetConfig+0x8b2>
 800d4be:	2b20      	cmp	r3, #32
 800d4c0:	d879      	bhi.n	800d5b6 <UART_SetConfig+0x8b2>
 800d4c2:	a201      	add	r2, pc, #4	; (adr r2, 800d4c8 <UART_SetConfig+0x7c4>)
 800d4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4c8:	0800d553 	.word	0x0800d553
 800d4cc:	0800d55b 	.word	0x0800d55b
 800d4d0:	0800d5b7 	.word	0x0800d5b7
 800d4d4:	0800d5b7 	.word	0x0800d5b7
 800d4d8:	0800d563 	.word	0x0800d563
 800d4dc:	0800d5b7 	.word	0x0800d5b7
 800d4e0:	0800d5b7 	.word	0x0800d5b7
 800d4e4:	0800d5b7 	.word	0x0800d5b7
 800d4e8:	0800d573 	.word	0x0800d573
 800d4ec:	0800d5b7 	.word	0x0800d5b7
 800d4f0:	0800d5b7 	.word	0x0800d5b7
 800d4f4:	0800d5b7 	.word	0x0800d5b7
 800d4f8:	0800d5b7 	.word	0x0800d5b7
 800d4fc:	0800d5b7 	.word	0x0800d5b7
 800d500:	0800d5b7 	.word	0x0800d5b7
 800d504:	0800d5b7 	.word	0x0800d5b7
 800d508:	0800d583 	.word	0x0800d583
 800d50c:	0800d5b7 	.word	0x0800d5b7
 800d510:	0800d5b7 	.word	0x0800d5b7
 800d514:	0800d5b7 	.word	0x0800d5b7
 800d518:	0800d5b7 	.word	0x0800d5b7
 800d51c:	0800d5b7 	.word	0x0800d5b7
 800d520:	0800d5b7 	.word	0x0800d5b7
 800d524:	0800d5b7 	.word	0x0800d5b7
 800d528:	0800d5b7 	.word	0x0800d5b7
 800d52c:	0800d5b7 	.word	0x0800d5b7
 800d530:	0800d5b7 	.word	0x0800d5b7
 800d534:	0800d5b7 	.word	0x0800d5b7
 800d538:	0800d5b7 	.word	0x0800d5b7
 800d53c:	0800d5b7 	.word	0x0800d5b7
 800d540:	0800d5b7 	.word	0x0800d5b7
 800d544:	0800d5b7 	.word	0x0800d5b7
 800d548:	0800d5a9 	.word	0x0800d5a9
 800d54c:	2b40      	cmp	r3, #64	; 0x40
 800d54e:	d02e      	beq.n	800d5ae <UART_SetConfig+0x8aa>
 800d550:	e031      	b.n	800d5b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d552:	f7fb f9f3 	bl	800893c <HAL_RCC_GetPCLK1Freq>
 800d556:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d558:	e033      	b.n	800d5c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d55a:	f7fb fa05 	bl	8008968 <HAL_RCC_GetPCLK2Freq>
 800d55e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d560:	e02f      	b.n	800d5c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d566:	4618      	mov	r0, r3
 800d568:	f7fc fe84 	bl	800a274 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d570:	e027      	b.n	800d5c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d572:	f107 0318 	add.w	r3, r7, #24
 800d576:	4618      	mov	r0, r3
 800d578:	f7fc ffd0 	bl	800a51c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d57c:	69fb      	ldr	r3, [r7, #28]
 800d57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d580:	e01f      	b.n	800d5c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d582:	4b2d      	ldr	r3, [pc, #180]	; (800d638 <UART_SetConfig+0x934>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f003 0320 	and.w	r3, r3, #32
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d009      	beq.n	800d5a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d58e:	4b2a      	ldr	r3, [pc, #168]	; (800d638 <UART_SetConfig+0x934>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	08db      	lsrs	r3, r3, #3
 800d594:	f003 0303 	and.w	r3, r3, #3
 800d598:	4a24      	ldr	r2, [pc, #144]	; (800d62c <UART_SetConfig+0x928>)
 800d59a:	fa22 f303 	lsr.w	r3, r2, r3
 800d59e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d5a0:	e00f      	b.n	800d5c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d5a2:	4b22      	ldr	r3, [pc, #136]	; (800d62c <UART_SetConfig+0x928>)
 800d5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5a6:	e00c      	b.n	800d5c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d5a8:	4b21      	ldr	r3, [pc, #132]	; (800d630 <UART_SetConfig+0x92c>)
 800d5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5ac:	e009      	b.n	800d5c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d5b4:	e005      	b.n	800d5c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d5c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	f000 80e7 	beq.w	800d798 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ce:	4a19      	ldr	r2, [pc, #100]	; (800d634 <UART_SetConfig+0x930>)
 800d5d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5d4:	461a      	mov	r2, r3
 800d5d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5dc:	005a      	lsls	r2, r3, #1
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	085b      	lsrs	r3, r3, #1
 800d5e4:	441a      	add	r2, r3
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5ee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f2:	2b0f      	cmp	r3, #15
 800d5f4:	d916      	bls.n	800d624 <UART_SetConfig+0x920>
 800d5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5fc:	d212      	bcs.n	800d624 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d600:	b29b      	uxth	r3, r3
 800d602:	f023 030f 	bic.w	r3, r3, #15
 800d606:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60a:	085b      	lsrs	r3, r3, #1
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	f003 0307 	and.w	r3, r3, #7
 800d612:	b29a      	uxth	r2, r3
 800d614:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d616:	4313      	orrs	r3, r2
 800d618:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d620:	60da      	str	r2, [r3, #12]
 800d622:	e0b9      	b.n	800d798 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d624:	2301      	movs	r3, #1
 800d626:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d62a:	e0b5      	b.n	800d798 <UART_SetConfig+0xa94>
 800d62c:	03d09000 	.word	0x03d09000
 800d630:	003d0900 	.word	0x003d0900
 800d634:	0802a4b8 	.word	0x0802a4b8
 800d638:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d63c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d640:	2b20      	cmp	r3, #32
 800d642:	dc49      	bgt.n	800d6d8 <UART_SetConfig+0x9d4>
 800d644:	2b00      	cmp	r3, #0
 800d646:	db7c      	blt.n	800d742 <UART_SetConfig+0xa3e>
 800d648:	2b20      	cmp	r3, #32
 800d64a:	d87a      	bhi.n	800d742 <UART_SetConfig+0xa3e>
 800d64c:	a201      	add	r2, pc, #4	; (adr r2, 800d654 <UART_SetConfig+0x950>)
 800d64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d652:	bf00      	nop
 800d654:	0800d6df 	.word	0x0800d6df
 800d658:	0800d6e7 	.word	0x0800d6e7
 800d65c:	0800d743 	.word	0x0800d743
 800d660:	0800d743 	.word	0x0800d743
 800d664:	0800d6ef 	.word	0x0800d6ef
 800d668:	0800d743 	.word	0x0800d743
 800d66c:	0800d743 	.word	0x0800d743
 800d670:	0800d743 	.word	0x0800d743
 800d674:	0800d6ff 	.word	0x0800d6ff
 800d678:	0800d743 	.word	0x0800d743
 800d67c:	0800d743 	.word	0x0800d743
 800d680:	0800d743 	.word	0x0800d743
 800d684:	0800d743 	.word	0x0800d743
 800d688:	0800d743 	.word	0x0800d743
 800d68c:	0800d743 	.word	0x0800d743
 800d690:	0800d743 	.word	0x0800d743
 800d694:	0800d70f 	.word	0x0800d70f
 800d698:	0800d743 	.word	0x0800d743
 800d69c:	0800d743 	.word	0x0800d743
 800d6a0:	0800d743 	.word	0x0800d743
 800d6a4:	0800d743 	.word	0x0800d743
 800d6a8:	0800d743 	.word	0x0800d743
 800d6ac:	0800d743 	.word	0x0800d743
 800d6b0:	0800d743 	.word	0x0800d743
 800d6b4:	0800d743 	.word	0x0800d743
 800d6b8:	0800d743 	.word	0x0800d743
 800d6bc:	0800d743 	.word	0x0800d743
 800d6c0:	0800d743 	.word	0x0800d743
 800d6c4:	0800d743 	.word	0x0800d743
 800d6c8:	0800d743 	.word	0x0800d743
 800d6cc:	0800d743 	.word	0x0800d743
 800d6d0:	0800d743 	.word	0x0800d743
 800d6d4:	0800d735 	.word	0x0800d735
 800d6d8:	2b40      	cmp	r3, #64	; 0x40
 800d6da:	d02e      	beq.n	800d73a <UART_SetConfig+0xa36>
 800d6dc:	e031      	b.n	800d742 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d6de:	f7fb f92d 	bl	800893c <HAL_RCC_GetPCLK1Freq>
 800d6e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d6e4:	e033      	b.n	800d74e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d6e6:	f7fb f93f 	bl	8008968 <HAL_RCC_GetPCLK2Freq>
 800d6ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d6ec:	e02f      	b.n	800d74e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7fc fdbe 	bl	800a274 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d6fc:	e027      	b.n	800d74e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d6fe:	f107 0318 	add.w	r3, r7, #24
 800d702:	4618      	mov	r0, r3
 800d704:	f7fc ff0a 	bl	800a51c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d708:	69fb      	ldr	r3, [r7, #28]
 800d70a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d70c:	e01f      	b.n	800d74e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d70e:	4b2d      	ldr	r3, [pc, #180]	; (800d7c4 <UART_SetConfig+0xac0>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f003 0320 	and.w	r3, r3, #32
 800d716:	2b00      	cmp	r3, #0
 800d718:	d009      	beq.n	800d72e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d71a:	4b2a      	ldr	r3, [pc, #168]	; (800d7c4 <UART_SetConfig+0xac0>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	08db      	lsrs	r3, r3, #3
 800d720:	f003 0303 	and.w	r3, r3, #3
 800d724:	4a28      	ldr	r2, [pc, #160]	; (800d7c8 <UART_SetConfig+0xac4>)
 800d726:	fa22 f303 	lsr.w	r3, r2, r3
 800d72a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d72c:	e00f      	b.n	800d74e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d72e:	4b26      	ldr	r3, [pc, #152]	; (800d7c8 <UART_SetConfig+0xac4>)
 800d730:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d732:	e00c      	b.n	800d74e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d734:	4b25      	ldr	r3, [pc, #148]	; (800d7cc <UART_SetConfig+0xac8>)
 800d736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d738:	e009      	b.n	800d74e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d73a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d740:	e005      	b.n	800d74e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d742:	2300      	movs	r3, #0
 800d744:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d746:	2301      	movs	r3, #1
 800d748:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d74c:	bf00      	nop
    }

    if (pclk != 0U)
 800d74e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d750:	2b00      	cmp	r3, #0
 800d752:	d021      	beq.n	800d798 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d758:	4a1d      	ldr	r2, [pc, #116]	; (800d7d0 <UART_SetConfig+0xacc>)
 800d75a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d75e:	461a      	mov	r2, r3
 800d760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d762:	fbb3 f2f2 	udiv	r2, r3, r2
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	685b      	ldr	r3, [r3, #4]
 800d76a:	085b      	lsrs	r3, r3, #1
 800d76c:	441a      	add	r2, r3
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	fbb2 f3f3 	udiv	r3, r2, r3
 800d776:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d77a:	2b0f      	cmp	r3, #15
 800d77c:	d909      	bls.n	800d792 <UART_SetConfig+0xa8e>
 800d77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d784:	d205      	bcs.n	800d792 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d788:	b29a      	uxth	r2, r3
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	60da      	str	r2, [r3, #12]
 800d790:	e002      	b.n	800d798 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d792:	2301      	movs	r3, #1
 800d794:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	2201      	movs	r2, #1
 800d79c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d7b4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3748      	adds	r7, #72	; 0x48
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d7c2:	bf00      	nop
 800d7c4:	58024400 	.word	0x58024400
 800d7c8:	03d09000 	.word	0x03d09000
 800d7cc:	003d0900 	.word	0x003d0900
 800d7d0:	0802a4b8 	.word	0x0802a4b8

0800d7d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7e0:	f003 0301 	and.w	r3, r3, #1
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d00a      	beq.n	800d7fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	430a      	orrs	r2, r1
 800d7fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d802:	f003 0302 	and.w	r3, r3, #2
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00a      	beq.n	800d820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	430a      	orrs	r2, r1
 800d81e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d824:	f003 0304 	and.w	r3, r3, #4
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d00a      	beq.n	800d842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	430a      	orrs	r2, r1
 800d840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d846:	f003 0308 	and.w	r3, r3, #8
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d00a      	beq.n	800d864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	430a      	orrs	r2, r1
 800d862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d868:	f003 0310 	and.w	r3, r3, #16
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d00a      	beq.n	800d886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	689b      	ldr	r3, [r3, #8]
 800d876:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	430a      	orrs	r2, r1
 800d884:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d88a:	f003 0320 	and.w	r3, r3, #32
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d00a      	beq.n	800d8a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	689b      	ldr	r3, [r3, #8]
 800d898:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	430a      	orrs	r2, r1
 800d8a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d01a      	beq.n	800d8ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	430a      	orrs	r2, r1
 800d8c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8d2:	d10a      	bne.n	800d8ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	685b      	ldr	r3, [r3, #4]
 800d8da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	430a      	orrs	r2, r1
 800d8e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d00a      	beq.n	800d90c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	430a      	orrs	r2, r1
 800d90a:	605a      	str	r2, [r3, #4]
  }
}
 800d90c:	bf00      	nop
 800d90e:	370c      	adds	r7, #12
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr

0800d918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b086      	sub	sp, #24
 800d91c:	af02      	add	r7, sp, #8
 800d91e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2200      	movs	r2, #0
 800d924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d928:	f7f6 ff24 	bl	8004774 <HAL_GetTick>
 800d92c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f003 0308 	and.w	r3, r3, #8
 800d938:	2b08      	cmp	r3, #8
 800d93a:	d10e      	bne.n	800d95a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d93c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d940:	9300      	str	r3, [sp, #0]
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2200      	movs	r2, #0
 800d946:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f000 f82f 	bl	800d9ae <UART_WaitOnFlagUntilTimeout>
 800d950:	4603      	mov	r3, r0
 800d952:	2b00      	cmp	r3, #0
 800d954:	d001      	beq.n	800d95a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d956:	2303      	movs	r3, #3
 800d958:	e025      	b.n	800d9a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f003 0304 	and.w	r3, r3, #4
 800d964:	2b04      	cmp	r3, #4
 800d966:	d10e      	bne.n	800d986 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d96c:	9300      	str	r3, [sp, #0]
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2200      	movs	r2, #0
 800d972:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 f819 	bl	800d9ae <UART_WaitOnFlagUntilTimeout>
 800d97c:	4603      	mov	r3, r0
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d001      	beq.n	800d986 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d982:	2303      	movs	r3, #3
 800d984:	e00f      	b.n	800d9a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2220      	movs	r2, #32
 800d98a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2220      	movs	r2, #32
 800d992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d9a4:	2300      	movs	r3, #0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3710      	adds	r7, #16
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}

0800d9ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d9ae:	b580      	push	{r7, lr}
 800d9b0:	b09c      	sub	sp, #112	; 0x70
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	60f8      	str	r0, [r7, #12]
 800d9b6:	60b9      	str	r1, [r7, #8]
 800d9b8:	603b      	str	r3, [r7, #0]
 800d9ba:	4613      	mov	r3, r2
 800d9bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9be:	e0a9      	b.n	800db14 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d9c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c6:	f000 80a5 	beq.w	800db14 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d9ca:	f7f6 fed3 	bl	8004774 <HAL_GetTick>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	1ad3      	subs	r3, r2, r3
 800d9d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d302      	bcc.n	800d9e0 <UART_WaitOnFlagUntilTimeout+0x32>
 800d9da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d140      	bne.n	800da62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9e8:	e853 3f00 	ldrex	r3, [r3]
 800d9ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d9ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d9f4:	667b      	str	r3, [r7, #100]	; 0x64
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da00:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800da04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800da06:	e841 2300 	strex	r3, r2, [r1]
 800da0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800da0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d1e6      	bne.n	800d9e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	3308      	adds	r3, #8
 800da18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da1c:	e853 3f00 	ldrex	r3, [r3]
 800da20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800da22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da24:	f023 0301 	bic.w	r3, r3, #1
 800da28:	663b      	str	r3, [r7, #96]	; 0x60
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	3308      	adds	r3, #8
 800da30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da32:	64ba      	str	r2, [r7, #72]	; 0x48
 800da34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da3a:	e841 2300 	strex	r3, r2, [r1]
 800da3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800da40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da42:	2b00      	cmp	r3, #0
 800da44:	d1e5      	bne.n	800da12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	2220      	movs	r2, #32
 800da4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	2220      	movs	r2, #32
 800da52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2200      	movs	r2, #0
 800da5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800da5e:	2303      	movs	r3, #3
 800da60:	e069      	b.n	800db36 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f003 0304 	and.w	r3, r3, #4
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d051      	beq.n	800db14 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	69db      	ldr	r3, [r3, #28]
 800da76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800da7e:	d149      	bne.n	800db14 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800da88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da92:	e853 3f00 	ldrex	r3, [r3]
 800da96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800da98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800da9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	461a      	mov	r2, r3
 800daa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daa8:	637b      	str	r3, [r7, #52]	; 0x34
 800daaa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800daae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dab0:	e841 2300 	strex	r3, r2, [r1]
 800dab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d1e6      	bne.n	800da8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	3308      	adds	r3, #8
 800dac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	e853 3f00 	ldrex	r3, [r3]
 800daca:	613b      	str	r3, [r7, #16]
   return(result);
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	f023 0301 	bic.w	r3, r3, #1
 800dad2:	66bb      	str	r3, [r7, #104]	; 0x68
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	3308      	adds	r3, #8
 800dada:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dadc:	623a      	str	r2, [r7, #32]
 800dade:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae0:	69f9      	ldr	r1, [r7, #28]
 800dae2:	6a3a      	ldr	r2, [r7, #32]
 800dae4:	e841 2300 	strex	r3, r2, [r1]
 800dae8:	61bb      	str	r3, [r7, #24]
   return(result);
 800daea:	69bb      	ldr	r3, [r7, #24]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d1e5      	bne.n	800dabc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	2220      	movs	r2, #32
 800daf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2220      	movs	r2, #32
 800dafc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2220      	movs	r2, #32
 800db04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2200      	movs	r2, #0
 800db0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800db10:	2303      	movs	r3, #3
 800db12:	e010      	b.n	800db36 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	69da      	ldr	r2, [r3, #28]
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	4013      	ands	r3, r2
 800db1e:	68ba      	ldr	r2, [r7, #8]
 800db20:	429a      	cmp	r2, r3
 800db22:	bf0c      	ite	eq
 800db24:	2301      	moveq	r3, #1
 800db26:	2300      	movne	r3, #0
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	461a      	mov	r2, r3
 800db2c:	79fb      	ldrb	r3, [r7, #7]
 800db2e:	429a      	cmp	r2, r3
 800db30:	f43f af46 	beq.w	800d9c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db34:	2300      	movs	r3, #0
}
 800db36:	4618      	mov	r0, r3
 800db38:	3770      	adds	r7, #112	; 0x70
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800db3e:	b480      	push	{r7}
 800db40:	b085      	sub	sp, #20
 800db42:	af00      	add	r7, sp, #0
 800db44:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d101      	bne.n	800db54 <HAL_UARTEx_DisableFifoMode+0x16>
 800db50:	2302      	movs	r3, #2
 800db52:	e027      	b.n	800dba4 <HAL_UARTEx_DisableFifoMode+0x66>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2201      	movs	r2, #1
 800db58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2224      	movs	r2, #36	; 0x24
 800db60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	681a      	ldr	r2, [r3, #0]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f022 0201 	bic.w	r2, r2, #1
 800db7a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800db82:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2200      	movs	r2, #0
 800db88:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	68fa      	ldr	r2, [r7, #12]
 800db90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2220      	movs	r2, #32
 800db96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2200      	movs	r2, #0
 800db9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dba2:	2300      	movs	r3, #0
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3714      	adds	r7, #20
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr

0800dbb0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b084      	sub	sp, #16
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d101      	bne.n	800dbc8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dbc4:	2302      	movs	r3, #2
 800dbc6:	e02d      	b.n	800dc24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2224      	movs	r2, #36	; 0x24
 800dbd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f022 0201 	bic.w	r2, r2, #1
 800dbee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	689b      	ldr	r3, [r3, #8]
 800dbf6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	683a      	ldr	r2, [r7, #0]
 800dc00:	430a      	orrs	r2, r1
 800dc02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f000 f84f 	bl	800dca8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	68fa      	ldr	r2, [r7, #12]
 800dc10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2220      	movs	r2, #32
 800dc16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc22:	2300      	movs	r3, #0
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3710      	adds	r7, #16
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b084      	sub	sp, #16
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d101      	bne.n	800dc44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dc40:	2302      	movs	r3, #2
 800dc42:	e02d      	b.n	800dca0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2201      	movs	r2, #1
 800dc48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2224      	movs	r2, #36	; 0x24
 800dc50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	681a      	ldr	r2, [r3, #0]
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f022 0201 	bic.w	r2, r2, #1
 800dc6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	689b      	ldr	r3, [r3, #8]
 800dc72:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	683a      	ldr	r2, [r7, #0]
 800dc7c:	430a      	orrs	r2, r1
 800dc7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f000 f811 	bl	800dca8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	68fa      	ldr	r2, [r7, #12]
 800dc8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2220      	movs	r2, #32
 800dc92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc9e:	2300      	movs	r3, #0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3710      	adds	r7, #16
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b085      	sub	sp, #20
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d108      	bne.n	800dcca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2201      	movs	r2, #1
 800dcbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dcc8:	e031      	b.n	800dd2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dcca:	2310      	movs	r3, #16
 800dccc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dcce:	2310      	movs	r3, #16
 800dcd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	0e5b      	lsrs	r3, r3, #25
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	f003 0307 	and.w	r3, r3, #7
 800dce0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	689b      	ldr	r3, [r3, #8]
 800dce8:	0f5b      	lsrs	r3, r3, #29
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	f003 0307 	and.w	r3, r3, #7
 800dcf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dcf2:	7bbb      	ldrb	r3, [r7, #14]
 800dcf4:	7b3a      	ldrb	r2, [r7, #12]
 800dcf6:	4911      	ldr	r1, [pc, #68]	; (800dd3c <UARTEx_SetNbDataToProcess+0x94>)
 800dcf8:	5c8a      	ldrb	r2, [r1, r2]
 800dcfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dcfe:	7b3a      	ldrb	r2, [r7, #12]
 800dd00:	490f      	ldr	r1, [pc, #60]	; (800dd40 <UARTEx_SetNbDataToProcess+0x98>)
 800dd02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd04:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd08:	b29a      	uxth	r2, r3
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd10:	7bfb      	ldrb	r3, [r7, #15]
 800dd12:	7b7a      	ldrb	r2, [r7, #13]
 800dd14:	4909      	ldr	r1, [pc, #36]	; (800dd3c <UARTEx_SetNbDataToProcess+0x94>)
 800dd16:	5c8a      	ldrb	r2, [r1, r2]
 800dd18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dd1c:	7b7a      	ldrb	r2, [r7, #13]
 800dd1e:	4908      	ldr	r1, [pc, #32]	; (800dd40 <UARTEx_SetNbDataToProcess+0x98>)
 800dd20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd22:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd26:	b29a      	uxth	r2, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dd2e:	bf00      	nop
 800dd30:	3714      	adds	r7, #20
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr
 800dd3a:	bf00      	nop
 800dd3c:	0802a4d0 	.word	0x0802a4d0
 800dd40:	0802a4d8 	.word	0x0802a4d8

0800dd44 <__NVIC_SetPriority>:
{
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	6039      	str	r1, [r7, #0]
 800dd4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800dd50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	db0a      	blt.n	800dd6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	b2da      	uxtb	r2, r3
 800dd5c:	490c      	ldr	r1, [pc, #48]	; (800dd90 <__NVIC_SetPriority+0x4c>)
 800dd5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd62:	0112      	lsls	r2, r2, #4
 800dd64:	b2d2      	uxtb	r2, r2
 800dd66:	440b      	add	r3, r1
 800dd68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800dd6c:	e00a      	b.n	800dd84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	b2da      	uxtb	r2, r3
 800dd72:	4908      	ldr	r1, [pc, #32]	; (800dd94 <__NVIC_SetPriority+0x50>)
 800dd74:	88fb      	ldrh	r3, [r7, #6]
 800dd76:	f003 030f 	and.w	r3, r3, #15
 800dd7a:	3b04      	subs	r3, #4
 800dd7c:	0112      	lsls	r2, r2, #4
 800dd7e:	b2d2      	uxtb	r2, r2
 800dd80:	440b      	add	r3, r1
 800dd82:	761a      	strb	r2, [r3, #24]
}
 800dd84:	bf00      	nop
 800dd86:	370c      	adds	r7, #12
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr
 800dd90:	e000e100 	.word	0xe000e100
 800dd94:	e000ed00 	.word	0xe000ed00

0800dd98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800dd9c:	4b05      	ldr	r3, [pc, #20]	; (800ddb4 <SysTick_Handler+0x1c>)
 800dd9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dda0:	f002 fa9a 	bl	80102d8 <xTaskGetSchedulerState>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b01      	cmp	r3, #1
 800dda8:	d001      	beq.n	800ddae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ddaa:	f003 f97d 	bl	80110a8 <xPortSysTickHandler>
  }
}
 800ddae:	bf00      	nop
 800ddb0:	bd80      	pop	{r7, pc}
 800ddb2:	bf00      	nop
 800ddb4:	e000e010 	.word	0xe000e010

0800ddb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ddbc:	2100      	movs	r1, #0
 800ddbe:	f06f 0004 	mvn.w	r0, #4
 800ddc2:	f7ff ffbf 	bl	800dd44 <__NVIC_SetPriority>
#endif
}
 800ddc6:	bf00      	nop
 800ddc8:	bd80      	pop	{r7, pc}
	...

0800ddcc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ddcc:	b480      	push	{r7}
 800ddce:	b083      	sub	sp, #12
 800ddd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddd2:	f3ef 8305 	mrs	r3, IPSR
 800ddd6:	603b      	str	r3, [r7, #0]
  return(result);
 800ddd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d003      	beq.n	800dde6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ddde:	f06f 0305 	mvn.w	r3, #5
 800dde2:	607b      	str	r3, [r7, #4]
 800dde4:	e00c      	b.n	800de00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dde6:	4b0a      	ldr	r3, [pc, #40]	; (800de10 <osKernelInitialize+0x44>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d105      	bne.n	800ddfa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ddee:	4b08      	ldr	r3, [pc, #32]	; (800de10 <osKernelInitialize+0x44>)
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	607b      	str	r3, [r7, #4]
 800ddf8:	e002      	b.n	800de00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ddfa:	f04f 33ff 	mov.w	r3, #4294967295
 800ddfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800de00:	687b      	ldr	r3, [r7, #4]
}
 800de02:	4618      	mov	r0, r3
 800de04:	370c      	adds	r7, #12
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop
 800de10:	2000083c 	.word	0x2000083c

0800de14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de1a:	f3ef 8305 	mrs	r3, IPSR
 800de1e:	603b      	str	r3, [r7, #0]
  return(result);
 800de20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800de22:	2b00      	cmp	r3, #0
 800de24:	d003      	beq.n	800de2e <osKernelStart+0x1a>
    stat = osErrorISR;
 800de26:	f06f 0305 	mvn.w	r3, #5
 800de2a:	607b      	str	r3, [r7, #4]
 800de2c:	e010      	b.n	800de50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800de2e:	4b0b      	ldr	r3, [pc, #44]	; (800de5c <osKernelStart+0x48>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	2b01      	cmp	r3, #1
 800de34:	d109      	bne.n	800de4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800de36:	f7ff ffbf 	bl	800ddb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800de3a:	4b08      	ldr	r3, [pc, #32]	; (800de5c <osKernelStart+0x48>)
 800de3c:	2202      	movs	r2, #2
 800de3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800de40:	f001 fdee 	bl	800fa20 <vTaskStartScheduler>
      stat = osOK;
 800de44:	2300      	movs	r3, #0
 800de46:	607b      	str	r3, [r7, #4]
 800de48:	e002      	b.n	800de50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800de4a:	f04f 33ff 	mov.w	r3, #4294967295
 800de4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800de50:	687b      	ldr	r3, [r7, #4]
}
 800de52:	4618      	mov	r0, r3
 800de54:	3708      	adds	r7, #8
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	2000083c 	.word	0x2000083c

0800de60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800de60:	b580      	push	{r7, lr}
 800de62:	b08e      	sub	sp, #56	; 0x38
 800de64:	af04      	add	r7, sp, #16
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800de6c:	2300      	movs	r3, #0
 800de6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de70:	f3ef 8305 	mrs	r3, IPSR
 800de74:	617b      	str	r3, [r7, #20]
  return(result);
 800de76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d17e      	bne.n	800df7a <osThreadNew+0x11a>
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d07b      	beq.n	800df7a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800de82:	2380      	movs	r3, #128	; 0x80
 800de84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800de86:	2318      	movs	r3, #24
 800de88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800de8a:	2300      	movs	r3, #0
 800de8c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800de8e:	f04f 33ff 	mov.w	r3, #4294967295
 800de92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d045      	beq.n	800df26 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d002      	beq.n	800dea8 <osThreadNew+0x48>
        name = attr->name;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	699b      	ldr	r3, [r3, #24]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d002      	beq.n	800deb6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	699b      	ldr	r3, [r3, #24]
 800deb4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800deb6:	69fb      	ldr	r3, [r7, #28]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d008      	beq.n	800dece <osThreadNew+0x6e>
 800debc:	69fb      	ldr	r3, [r7, #28]
 800debe:	2b38      	cmp	r3, #56	; 0x38
 800dec0:	d805      	bhi.n	800dece <osThreadNew+0x6e>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	f003 0301 	and.w	r3, r3, #1
 800deca:	2b00      	cmp	r3, #0
 800decc:	d001      	beq.n	800ded2 <osThreadNew+0x72>
        return (NULL);
 800dece:	2300      	movs	r3, #0
 800ded0:	e054      	b.n	800df7c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	695b      	ldr	r3, [r3, #20]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d003      	beq.n	800dee2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	695b      	ldr	r3, [r3, #20]
 800dede:	089b      	lsrs	r3, r3, #2
 800dee0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	689b      	ldr	r3, [r3, #8]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d00e      	beq.n	800df08 <osThreadNew+0xa8>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	68db      	ldr	r3, [r3, #12]
 800deee:	2bbb      	cmp	r3, #187	; 0xbb
 800def0:	d90a      	bls.n	800df08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800def6:	2b00      	cmp	r3, #0
 800def8:	d006      	beq.n	800df08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	695b      	ldr	r3, [r3, #20]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d002      	beq.n	800df08 <osThreadNew+0xa8>
        mem = 1;
 800df02:	2301      	movs	r3, #1
 800df04:	61bb      	str	r3, [r7, #24]
 800df06:	e010      	b.n	800df2a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	689b      	ldr	r3, [r3, #8]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d10c      	bne.n	800df2a <osThreadNew+0xca>
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	68db      	ldr	r3, [r3, #12]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d108      	bne.n	800df2a <osThreadNew+0xca>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	691b      	ldr	r3, [r3, #16]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d104      	bne.n	800df2a <osThreadNew+0xca>
          mem = 0;
 800df20:	2300      	movs	r3, #0
 800df22:	61bb      	str	r3, [r7, #24]
 800df24:	e001      	b.n	800df2a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800df26:	2300      	movs	r3, #0
 800df28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d110      	bne.n	800df52 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800df34:	687a      	ldr	r2, [r7, #4]
 800df36:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800df38:	9202      	str	r2, [sp, #8]
 800df3a:	9301      	str	r3, [sp, #4]
 800df3c:	69fb      	ldr	r3, [r7, #28]
 800df3e:	9300      	str	r3, [sp, #0]
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	6a3a      	ldr	r2, [r7, #32]
 800df44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df46:	68f8      	ldr	r0, [r7, #12]
 800df48:	f001 fb7e 	bl	800f648 <xTaskCreateStatic>
 800df4c:	4603      	mov	r3, r0
 800df4e:	613b      	str	r3, [r7, #16]
 800df50:	e013      	b.n	800df7a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800df52:	69bb      	ldr	r3, [r7, #24]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d110      	bne.n	800df7a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800df58:	6a3b      	ldr	r3, [r7, #32]
 800df5a:	b29a      	uxth	r2, r3
 800df5c:	f107 0310 	add.w	r3, r7, #16
 800df60:	9301      	str	r3, [sp, #4]
 800df62:	69fb      	ldr	r3, [r7, #28]
 800df64:	9300      	str	r3, [sp, #0]
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df6a:	68f8      	ldr	r0, [r7, #12]
 800df6c:	f001 fbc9 	bl	800f702 <xTaskCreate>
 800df70:	4603      	mov	r3, r0
 800df72:	2b01      	cmp	r3, #1
 800df74:	d001      	beq.n	800df7a <osThreadNew+0x11a>
            hTask = NULL;
 800df76:	2300      	movs	r3, #0
 800df78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800df7a:	693b      	ldr	r3, [r7, #16]
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3728      	adds	r7, #40	; 0x28
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}

0800df84 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df8c:	f3ef 8305 	mrs	r3, IPSR
 800df90:	60bb      	str	r3, [r7, #8]
  return(result);
 800df92:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df94:	2b00      	cmp	r3, #0
 800df96:	d003      	beq.n	800dfa0 <osDelay+0x1c>
    stat = osErrorISR;
 800df98:	f06f 0305 	mvn.w	r3, #5
 800df9c:	60fb      	str	r3, [r7, #12]
 800df9e:	e007      	b.n	800dfb0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d002      	beq.n	800dfb0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f001 fd04 	bl	800f9b8 <vTaskDelay>
    }
  }

  return (stat);
 800dfb0:	68fb      	ldr	r3, [r7, #12]
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3710      	adds	r7, #16
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}

0800dfba <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800dfba:	b580      	push	{r7, lr}
 800dfbc:	b08a      	sub	sp, #40	; 0x28
 800dfbe:	af02      	add	r7, sp, #8
 800dfc0:	60f8      	str	r0, [r7, #12]
 800dfc2:	60b9      	str	r1, [r7, #8]
 800dfc4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfca:	f3ef 8305 	mrs	r3, IPSR
 800dfce:	613b      	str	r3, [r7, #16]
  return(result);
 800dfd0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d175      	bne.n	800e0c2 <osSemaphoreNew+0x108>
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d072      	beq.n	800e0c2 <osSemaphoreNew+0x108>
 800dfdc:	68ba      	ldr	r2, [r7, #8]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d86e      	bhi.n	800e0c2 <osSemaphoreNew+0x108>
    mem = -1;
 800dfe4:	f04f 33ff 	mov.w	r3, #4294967295
 800dfe8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d015      	beq.n	800e01c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	689b      	ldr	r3, [r3, #8]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d006      	beq.n	800e006 <osSemaphoreNew+0x4c>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	68db      	ldr	r3, [r3, #12]
 800dffc:	2b4f      	cmp	r3, #79	; 0x4f
 800dffe:	d902      	bls.n	800e006 <osSemaphoreNew+0x4c>
        mem = 1;
 800e000:	2301      	movs	r3, #1
 800e002:	61bb      	str	r3, [r7, #24]
 800e004:	e00c      	b.n	800e020 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	689b      	ldr	r3, [r3, #8]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d108      	bne.n	800e020 <osSemaphoreNew+0x66>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	68db      	ldr	r3, [r3, #12]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d104      	bne.n	800e020 <osSemaphoreNew+0x66>
          mem = 0;
 800e016:	2300      	movs	r3, #0
 800e018:	61bb      	str	r3, [r7, #24]
 800e01a:	e001      	b.n	800e020 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800e01c:	2300      	movs	r3, #0
 800e01e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e026:	d04c      	beq.n	800e0c2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	d128      	bne.n	800e080 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800e02e:	69bb      	ldr	r3, [r7, #24]
 800e030:	2b01      	cmp	r3, #1
 800e032:	d10a      	bne.n	800e04a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	689b      	ldr	r3, [r3, #8]
 800e038:	2203      	movs	r2, #3
 800e03a:	9200      	str	r2, [sp, #0]
 800e03c:	2200      	movs	r2, #0
 800e03e:	2100      	movs	r1, #0
 800e040:	2001      	movs	r0, #1
 800e042:	f000 fb5b 	bl	800e6fc <xQueueGenericCreateStatic>
 800e046:	61f8      	str	r0, [r7, #28]
 800e048:	e005      	b.n	800e056 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800e04a:	2203      	movs	r2, #3
 800e04c:	2100      	movs	r1, #0
 800e04e:	2001      	movs	r0, #1
 800e050:	f000 fbcc 	bl	800e7ec <xQueueGenericCreate>
 800e054:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d022      	beq.n	800e0a2 <osSemaphoreNew+0xe8>
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d01f      	beq.n	800e0a2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e062:	2300      	movs	r3, #0
 800e064:	2200      	movs	r2, #0
 800e066:	2100      	movs	r1, #0
 800e068:	69f8      	ldr	r0, [r7, #28]
 800e06a:	f000 fc87 	bl	800e97c <xQueueGenericSend>
 800e06e:	4603      	mov	r3, r0
 800e070:	2b01      	cmp	r3, #1
 800e072:	d016      	beq.n	800e0a2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800e074:	69f8      	ldr	r0, [r7, #28]
 800e076:	f001 f913 	bl	800f2a0 <vQueueDelete>
            hSemaphore = NULL;
 800e07a:	2300      	movs	r3, #0
 800e07c:	61fb      	str	r3, [r7, #28]
 800e07e:	e010      	b.n	800e0a2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800e080:	69bb      	ldr	r3, [r7, #24]
 800e082:	2b01      	cmp	r3, #1
 800e084:	d108      	bne.n	800e098 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	689b      	ldr	r3, [r3, #8]
 800e08a:	461a      	mov	r2, r3
 800e08c:	68b9      	ldr	r1, [r7, #8]
 800e08e:	68f8      	ldr	r0, [r7, #12]
 800e090:	f000 fc09 	bl	800e8a6 <xQueueCreateCountingSemaphoreStatic>
 800e094:	61f8      	str	r0, [r7, #28]
 800e096:	e004      	b.n	800e0a2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e098:	68b9      	ldr	r1, [r7, #8]
 800e09a:	68f8      	ldr	r0, [r7, #12]
 800e09c:	f000 fc3a 	bl	800e914 <xQueueCreateCountingSemaphore>
 800e0a0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d00c      	beq.n	800e0c2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d003      	beq.n	800e0b6 <osSemaphoreNew+0xfc>
          name = attr->name;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	617b      	str	r3, [r7, #20]
 800e0b4:	e001      	b.n	800e0ba <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e0ba:	6979      	ldr	r1, [r7, #20]
 800e0bc:	69f8      	ldr	r0, [r7, #28]
 800e0be:	f001 fa3b 	bl	800f538 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e0c2:	69fb      	ldr	r3, [r7, #28]
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3720      	adds	r7, #32
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b086      	sub	sp, #24
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d103      	bne.n	800e0ec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e0e4:	f06f 0303 	mvn.w	r3, #3
 800e0e8:	617b      	str	r3, [r7, #20]
 800e0ea:	e039      	b.n	800e160 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0ec:	f3ef 8305 	mrs	r3, IPSR
 800e0f0:	60fb      	str	r3, [r7, #12]
  return(result);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d022      	beq.n	800e13e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d003      	beq.n	800e106 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800e0fe:	f06f 0303 	mvn.w	r3, #3
 800e102:	617b      	str	r3, [r7, #20]
 800e104:	e02c      	b.n	800e160 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800e106:	2300      	movs	r3, #0
 800e108:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e10a:	f107 0308 	add.w	r3, r7, #8
 800e10e:	461a      	mov	r2, r3
 800e110:	2100      	movs	r1, #0
 800e112:	6938      	ldr	r0, [r7, #16]
 800e114:	f001 f844 	bl	800f1a0 <xQueueReceiveFromISR>
 800e118:	4603      	mov	r3, r0
 800e11a:	2b01      	cmp	r3, #1
 800e11c:	d003      	beq.n	800e126 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800e11e:	f06f 0302 	mvn.w	r3, #2
 800e122:	617b      	str	r3, [r7, #20]
 800e124:	e01c      	b.n	800e160 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d019      	beq.n	800e160 <osSemaphoreAcquire+0x94>
 800e12c:	4b0f      	ldr	r3, [pc, #60]	; (800e16c <osSemaphoreAcquire+0xa0>)
 800e12e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e132:	601a      	str	r2, [r3, #0]
 800e134:	f3bf 8f4f 	dsb	sy
 800e138:	f3bf 8f6f 	isb	sy
 800e13c:	e010      	b.n	800e160 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e13e:	6839      	ldr	r1, [r7, #0]
 800e140:	6938      	ldr	r0, [r7, #16]
 800e142:	f000 ff21 	bl	800ef88 <xQueueSemaphoreTake>
 800e146:	4603      	mov	r3, r0
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d009      	beq.n	800e160 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d003      	beq.n	800e15a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800e152:	f06f 0301 	mvn.w	r3, #1
 800e156:	617b      	str	r3, [r7, #20]
 800e158:	e002      	b.n	800e160 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800e15a:	f06f 0302 	mvn.w	r3, #2
 800e15e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e160:	697b      	ldr	r3, [r7, #20]
}
 800e162:	4618      	mov	r0, r3
 800e164:	3718      	adds	r7, #24
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	e000ed04 	.word	0xe000ed04

0800e170 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e170:	b580      	push	{r7, lr}
 800e172:	b086      	sub	sp, #24
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e17c:	2300      	movs	r3, #0
 800e17e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d103      	bne.n	800e18e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e186:	f06f 0303 	mvn.w	r3, #3
 800e18a:	617b      	str	r3, [r7, #20]
 800e18c:	e02c      	b.n	800e1e8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e18e:	f3ef 8305 	mrs	r3, IPSR
 800e192:	60fb      	str	r3, [r7, #12]
  return(result);
 800e194:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e196:	2b00      	cmp	r3, #0
 800e198:	d01a      	beq.n	800e1d0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800e19a:	2300      	movs	r3, #0
 800e19c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e19e:	f107 0308 	add.w	r3, r7, #8
 800e1a2:	4619      	mov	r1, r3
 800e1a4:	6938      	ldr	r0, [r7, #16]
 800e1a6:	f000 fd82 	bl	800ecae <xQueueGiveFromISR>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d003      	beq.n	800e1b8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800e1b0:	f06f 0302 	mvn.w	r3, #2
 800e1b4:	617b      	str	r3, [r7, #20]
 800e1b6:	e017      	b.n	800e1e8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d014      	beq.n	800e1e8 <osSemaphoreRelease+0x78>
 800e1be:	4b0d      	ldr	r3, [pc, #52]	; (800e1f4 <osSemaphoreRelease+0x84>)
 800e1c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1c4:	601a      	str	r2, [r3, #0]
 800e1c6:	f3bf 8f4f 	dsb	sy
 800e1ca:	f3bf 8f6f 	isb	sy
 800e1ce:	e00b      	b.n	800e1e8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	2100      	movs	r1, #0
 800e1d6:	6938      	ldr	r0, [r7, #16]
 800e1d8:	f000 fbd0 	bl	800e97c <xQueueGenericSend>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	d002      	beq.n	800e1e8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800e1e2:	f06f 0302 	mvn.w	r3, #2
 800e1e6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e1e8:	697b      	ldr	r3, [r7, #20]
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3718      	adds	r7, #24
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	e000ed04 	.word	0xe000ed04

0800e1f8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b08a      	sub	sp, #40	; 0x28
 800e1fc:	af02      	add	r7, sp, #8
 800e1fe:	60f8      	str	r0, [r7, #12]
 800e200:	60b9      	str	r1, [r7, #8]
 800e202:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e204:	2300      	movs	r3, #0
 800e206:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e208:	f3ef 8305 	mrs	r3, IPSR
 800e20c:	613b      	str	r3, [r7, #16]
  return(result);
 800e20e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e210:	2b00      	cmp	r3, #0
 800e212:	d15f      	bne.n	800e2d4 <osMessageQueueNew+0xdc>
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d05c      	beq.n	800e2d4 <osMessageQueueNew+0xdc>
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d059      	beq.n	800e2d4 <osMessageQueueNew+0xdc>
    mem = -1;
 800e220:	f04f 33ff 	mov.w	r3, #4294967295
 800e224:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d029      	beq.n	800e280 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	689b      	ldr	r3, [r3, #8]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d012      	beq.n	800e25a <osMessageQueueNew+0x62>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	68db      	ldr	r3, [r3, #12]
 800e238:	2b4f      	cmp	r3, #79	; 0x4f
 800e23a:	d90e      	bls.n	800e25a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e240:	2b00      	cmp	r3, #0
 800e242:	d00a      	beq.n	800e25a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	695a      	ldr	r2, [r3, #20]
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	68b9      	ldr	r1, [r7, #8]
 800e24c:	fb01 f303 	mul.w	r3, r1, r3
 800e250:	429a      	cmp	r2, r3
 800e252:	d302      	bcc.n	800e25a <osMessageQueueNew+0x62>
        mem = 1;
 800e254:	2301      	movs	r3, #1
 800e256:	61bb      	str	r3, [r7, #24]
 800e258:	e014      	b.n	800e284 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	689b      	ldr	r3, [r3, #8]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d110      	bne.n	800e284 <osMessageQueueNew+0x8c>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	68db      	ldr	r3, [r3, #12]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d10c      	bne.n	800e284 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d108      	bne.n	800e284 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	695b      	ldr	r3, [r3, #20]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d104      	bne.n	800e284 <osMessageQueueNew+0x8c>
          mem = 0;
 800e27a:	2300      	movs	r3, #0
 800e27c:	61bb      	str	r3, [r7, #24]
 800e27e:	e001      	b.n	800e284 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800e280:	2300      	movs	r3, #0
 800e282:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e284:	69bb      	ldr	r3, [r7, #24]
 800e286:	2b01      	cmp	r3, #1
 800e288:	d10b      	bne.n	800e2a2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	691a      	ldr	r2, [r3, #16]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	689b      	ldr	r3, [r3, #8]
 800e292:	2100      	movs	r1, #0
 800e294:	9100      	str	r1, [sp, #0]
 800e296:	68b9      	ldr	r1, [r7, #8]
 800e298:	68f8      	ldr	r0, [r7, #12]
 800e29a:	f000 fa2f 	bl	800e6fc <xQueueGenericCreateStatic>
 800e29e:	61f8      	str	r0, [r7, #28]
 800e2a0:	e008      	b.n	800e2b4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800e2a2:	69bb      	ldr	r3, [r7, #24]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d105      	bne.n	800e2b4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	68b9      	ldr	r1, [r7, #8]
 800e2ac:	68f8      	ldr	r0, [r7, #12]
 800e2ae:	f000 fa9d 	bl	800e7ec <xQueueGenericCreate>
 800e2b2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d00c      	beq.n	800e2d4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d003      	beq.n	800e2c8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	617b      	str	r3, [r7, #20]
 800e2c6:	e001      	b.n	800e2cc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800e2cc:	6979      	ldr	r1, [r7, #20]
 800e2ce:	69f8      	ldr	r0, [r7, #28]
 800e2d0:	f001 f932 	bl	800f538 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e2d4:	69fb      	ldr	r3, [r7, #28]
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3720      	adds	r7, #32
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}
	...

0800e2e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b088      	sub	sp, #32
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	603b      	str	r3, [r7, #0]
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2f8:	f3ef 8305 	mrs	r3, IPSR
 800e2fc:	617b      	str	r3, [r7, #20]
  return(result);
 800e2fe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e300:	2b00      	cmp	r3, #0
 800e302:	d028      	beq.n	800e356 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e304:	69bb      	ldr	r3, [r7, #24]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d005      	beq.n	800e316 <osMessageQueuePut+0x36>
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d002      	beq.n	800e316 <osMessageQueuePut+0x36>
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d003      	beq.n	800e31e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e316:	f06f 0303 	mvn.w	r3, #3
 800e31a:	61fb      	str	r3, [r7, #28]
 800e31c:	e038      	b.n	800e390 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800e31e:	2300      	movs	r3, #0
 800e320:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e322:	f107 0210 	add.w	r2, r7, #16
 800e326:	2300      	movs	r3, #0
 800e328:	68b9      	ldr	r1, [r7, #8]
 800e32a:	69b8      	ldr	r0, [r7, #24]
 800e32c:	f000 fc24 	bl	800eb78 <xQueueGenericSendFromISR>
 800e330:	4603      	mov	r3, r0
 800e332:	2b01      	cmp	r3, #1
 800e334:	d003      	beq.n	800e33e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800e336:	f06f 0302 	mvn.w	r3, #2
 800e33a:	61fb      	str	r3, [r7, #28]
 800e33c:	e028      	b.n	800e390 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d025      	beq.n	800e390 <osMessageQueuePut+0xb0>
 800e344:	4b15      	ldr	r3, [pc, #84]	; (800e39c <osMessageQueuePut+0xbc>)
 800e346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e34a:	601a      	str	r2, [r3, #0]
 800e34c:	f3bf 8f4f 	dsb	sy
 800e350:	f3bf 8f6f 	isb	sy
 800e354:	e01c      	b.n	800e390 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e356:	69bb      	ldr	r3, [r7, #24]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d002      	beq.n	800e362 <osMessageQueuePut+0x82>
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d103      	bne.n	800e36a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800e362:	f06f 0303 	mvn.w	r3, #3
 800e366:	61fb      	str	r3, [r7, #28]
 800e368:	e012      	b.n	800e390 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e36a:	2300      	movs	r3, #0
 800e36c:	683a      	ldr	r2, [r7, #0]
 800e36e:	68b9      	ldr	r1, [r7, #8]
 800e370:	69b8      	ldr	r0, [r7, #24]
 800e372:	f000 fb03 	bl	800e97c <xQueueGenericSend>
 800e376:	4603      	mov	r3, r0
 800e378:	2b01      	cmp	r3, #1
 800e37a:	d009      	beq.n	800e390 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d003      	beq.n	800e38a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800e382:	f06f 0301 	mvn.w	r3, #1
 800e386:	61fb      	str	r3, [r7, #28]
 800e388:	e002      	b.n	800e390 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800e38a:	f06f 0302 	mvn.w	r3, #2
 800e38e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e390:	69fb      	ldr	r3, [r7, #28]
}
 800e392:	4618      	mov	r0, r3
 800e394:	3720      	adds	r7, #32
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}
 800e39a:	bf00      	nop
 800e39c:	e000ed04 	.word	0xe000ed04

0800e3a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b088      	sub	sp, #32
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	60f8      	str	r0, [r7, #12]
 800e3a8:	60b9      	str	r1, [r7, #8]
 800e3aa:	607a      	str	r2, [r7, #4]
 800e3ac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3b6:	f3ef 8305 	mrs	r3, IPSR
 800e3ba:	617b      	str	r3, [r7, #20]
  return(result);
 800e3bc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d028      	beq.n	800e414 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e3c2:	69bb      	ldr	r3, [r7, #24]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d005      	beq.n	800e3d4 <osMessageQueueGet+0x34>
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d002      	beq.n	800e3d4 <osMessageQueueGet+0x34>
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d003      	beq.n	800e3dc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800e3d4:	f06f 0303 	mvn.w	r3, #3
 800e3d8:	61fb      	str	r3, [r7, #28]
 800e3da:	e037      	b.n	800e44c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e3e0:	f107 0310 	add.w	r3, r7, #16
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	68b9      	ldr	r1, [r7, #8]
 800e3e8:	69b8      	ldr	r0, [r7, #24]
 800e3ea:	f000 fed9 	bl	800f1a0 <xQueueReceiveFromISR>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b01      	cmp	r3, #1
 800e3f2:	d003      	beq.n	800e3fc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800e3f4:	f06f 0302 	mvn.w	r3, #2
 800e3f8:	61fb      	str	r3, [r7, #28]
 800e3fa:	e027      	b.n	800e44c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d024      	beq.n	800e44c <osMessageQueueGet+0xac>
 800e402:	4b15      	ldr	r3, [pc, #84]	; (800e458 <osMessageQueueGet+0xb8>)
 800e404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e408:	601a      	str	r2, [r3, #0]
 800e40a:	f3bf 8f4f 	dsb	sy
 800e40e:	f3bf 8f6f 	isb	sy
 800e412:	e01b      	b.n	800e44c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e414:	69bb      	ldr	r3, [r7, #24]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d002      	beq.n	800e420 <osMessageQueueGet+0x80>
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d103      	bne.n	800e428 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e420:	f06f 0303 	mvn.w	r3, #3
 800e424:	61fb      	str	r3, [r7, #28]
 800e426:	e011      	b.n	800e44c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e428:	683a      	ldr	r2, [r7, #0]
 800e42a:	68b9      	ldr	r1, [r7, #8]
 800e42c:	69b8      	ldr	r0, [r7, #24]
 800e42e:	f000 fccb 	bl	800edc8 <xQueueReceive>
 800e432:	4603      	mov	r3, r0
 800e434:	2b01      	cmp	r3, #1
 800e436:	d009      	beq.n	800e44c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d003      	beq.n	800e446 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e43e:	f06f 0301 	mvn.w	r3, #1
 800e442:	61fb      	str	r3, [r7, #28]
 800e444:	e002      	b.n	800e44c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e446:	f06f 0302 	mvn.w	r3, #2
 800e44a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e44c:	69fb      	ldr	r3, [r7, #28]
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3720      	adds	r7, #32
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	e000ed04 	.word	0xe000ed04

0800e45c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e45c:	b480      	push	{r7}
 800e45e:	b085      	sub	sp, #20
 800e460:	af00      	add	r7, sp, #0
 800e462:	60f8      	str	r0, [r7, #12]
 800e464:	60b9      	str	r1, [r7, #8]
 800e466:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	4a07      	ldr	r2, [pc, #28]	; (800e488 <vApplicationGetIdleTaskMemory+0x2c>)
 800e46c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	4a06      	ldr	r2, [pc, #24]	; (800e48c <vApplicationGetIdleTaskMemory+0x30>)
 800e472:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2280      	movs	r2, #128	; 0x80
 800e478:	601a      	str	r2, [r3, #0]
}
 800e47a:	bf00      	nop
 800e47c:	3714      	adds	r7, #20
 800e47e:	46bd      	mov	sp, r7
 800e480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e484:	4770      	bx	lr
 800e486:	bf00      	nop
 800e488:	20000840 	.word	0x20000840
 800e48c:	200008fc 	.word	0x200008fc

0800e490 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e490:	b480      	push	{r7}
 800e492:	b085      	sub	sp, #20
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	4a07      	ldr	r2, [pc, #28]	; (800e4bc <vApplicationGetTimerTaskMemory+0x2c>)
 800e4a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	4a06      	ldr	r2, [pc, #24]	; (800e4c0 <vApplicationGetTimerTaskMemory+0x30>)
 800e4a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e4ae:	601a      	str	r2, [r3, #0]
}
 800e4b0:	bf00      	nop
 800e4b2:	3714      	adds	r7, #20
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr
 800e4bc:	20000afc 	.word	0x20000afc
 800e4c0:	20000bb8 	.word	0x20000bb8

0800e4c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b083      	sub	sp, #12
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f103 0208 	add.w	r2, r3, #8
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e4dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f103 0208 	add.w	r2, r3, #8
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f103 0208 	add.w	r2, r3, #8
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e4f8:	bf00      	nop
 800e4fa:	370c      	adds	r7, #12
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e504:	b480      	push	{r7}
 800e506:	b083      	sub	sp, #12
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e512:	bf00      	nop
 800e514:	370c      	adds	r7, #12
 800e516:	46bd      	mov	sp, r7
 800e518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51c:	4770      	bx	lr

0800e51e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e51e:	b480      	push	{r7}
 800e520:	b085      	sub	sp, #20
 800e522:	af00      	add	r7, sp, #0
 800e524:	6078      	str	r0, [r7, #4]
 800e526:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	685b      	ldr	r3, [r3, #4]
 800e52c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	68fa      	ldr	r2, [r7, #12]
 800e532:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	689a      	ldr	r2, [r3, #8]
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	689b      	ldr	r3, [r3, #8]
 800e540:	683a      	ldr	r2, [r7, #0]
 800e542:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	683a      	ldr	r2, [r7, #0]
 800e548:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	687a      	ldr	r2, [r7, #4]
 800e54e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	1c5a      	adds	r2, r3, #1
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	601a      	str	r2, [r3, #0]
}
 800e55a:	bf00      	nop
 800e55c:	3714      	adds	r7, #20
 800e55e:	46bd      	mov	sp, r7
 800e560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e564:	4770      	bx	lr

0800e566 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e566:	b480      	push	{r7}
 800e568:	b085      	sub	sp, #20
 800e56a:	af00      	add	r7, sp, #0
 800e56c:	6078      	str	r0, [r7, #4]
 800e56e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e57c:	d103      	bne.n	800e586 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	691b      	ldr	r3, [r3, #16]
 800e582:	60fb      	str	r3, [r7, #12]
 800e584:	e00c      	b.n	800e5a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	3308      	adds	r3, #8
 800e58a:	60fb      	str	r3, [r7, #12]
 800e58c:	e002      	b.n	800e594 <vListInsert+0x2e>
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	685b      	ldr	r3, [r3, #4]
 800e592:	60fb      	str	r3, [r7, #12]
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	68ba      	ldr	r2, [r7, #8]
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d2f6      	bcs.n	800e58e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	685a      	ldr	r2, [r3, #4]
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	683a      	ldr	r2, [r7, #0]
 800e5ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	68fa      	ldr	r2, [r7, #12]
 800e5b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	683a      	ldr	r2, [r7, #0]
 800e5ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	1c5a      	adds	r2, r3, #1
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	601a      	str	r2, [r3, #0]
}
 800e5cc:	bf00      	nop
 800e5ce:	3714      	adds	r7, #20
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr

0800e5d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b085      	sub	sp, #20
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	691b      	ldr	r3, [r3, #16]
 800e5e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	685b      	ldr	r3, [r3, #4]
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	6892      	ldr	r2, [r2, #8]
 800e5ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	689b      	ldr	r3, [r3, #8]
 800e5f4:	687a      	ldr	r2, [r7, #4]
 800e5f6:	6852      	ldr	r2, [r2, #4]
 800e5f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	685b      	ldr	r3, [r3, #4]
 800e5fe:	687a      	ldr	r2, [r7, #4]
 800e600:	429a      	cmp	r2, r3
 800e602:	d103      	bne.n	800e60c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	689a      	ldr	r2, [r3, #8]
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2200      	movs	r2, #0
 800e610:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	1e5a      	subs	r2, r3, #1
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
}
 800e620:	4618      	mov	r0, r3
 800e622:	3714      	adds	r7, #20
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr

0800e62c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b084      	sub	sp, #16
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d10a      	bne.n	800e656 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e644:	f383 8811 	msr	BASEPRI, r3
 800e648:	f3bf 8f6f 	isb	sy
 800e64c:	f3bf 8f4f 	dsb	sy
 800e650:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e652:	bf00      	nop
 800e654:	e7fe      	b.n	800e654 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e656:	f002 fc95 	bl	8010f84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e662:	68f9      	ldr	r1, [r7, #12]
 800e664:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e666:	fb01 f303 	mul.w	r3, r1, r3
 800e66a:	441a      	add	r2, r3
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	2200      	movs	r2, #0
 800e674:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681a      	ldr	r2, [r3, #0]
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e686:	3b01      	subs	r3, #1
 800e688:	68f9      	ldr	r1, [r7, #12]
 800e68a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e68c:	fb01 f303 	mul.w	r3, r1, r3
 800e690:	441a      	add	r2, r3
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	22ff      	movs	r2, #255	; 0xff
 800e69a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	22ff      	movs	r2, #255	; 0xff
 800e6a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d114      	bne.n	800e6d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	691b      	ldr	r3, [r3, #16]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d01a      	beq.n	800e6ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	3310      	adds	r3, #16
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f001 fc4b 	bl	800ff54 <xTaskRemoveFromEventList>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d012      	beq.n	800e6ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e6c4:	4b0c      	ldr	r3, [pc, #48]	; (800e6f8 <xQueueGenericReset+0xcc>)
 800e6c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6ca:	601a      	str	r2, [r3, #0]
 800e6cc:	f3bf 8f4f 	dsb	sy
 800e6d0:	f3bf 8f6f 	isb	sy
 800e6d4:	e009      	b.n	800e6ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	3310      	adds	r3, #16
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7ff fef2 	bl	800e4c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	3324      	adds	r3, #36	; 0x24
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f7ff feed 	bl	800e4c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e6ea:	f002 fc7b 	bl	8010fe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e6ee:	2301      	movs	r3, #1
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3710      	adds	r7, #16
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}
 800e6f8:	e000ed04 	.word	0xe000ed04

0800e6fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b08e      	sub	sp, #56	; 0x38
 800e700:	af02      	add	r7, sp, #8
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	607a      	str	r2, [r7, #4]
 800e708:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d10a      	bne.n	800e726 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e714:	f383 8811 	msr	BASEPRI, r3
 800e718:	f3bf 8f6f 	isb	sy
 800e71c:	f3bf 8f4f 	dsb	sy
 800e720:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e722:	bf00      	nop
 800e724:	e7fe      	b.n	800e724 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d10a      	bne.n	800e742 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e730:	f383 8811 	msr	BASEPRI, r3
 800e734:	f3bf 8f6f 	isb	sy
 800e738:	f3bf 8f4f 	dsb	sy
 800e73c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e73e:	bf00      	nop
 800e740:	e7fe      	b.n	800e740 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d002      	beq.n	800e74e <xQueueGenericCreateStatic+0x52>
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d001      	beq.n	800e752 <xQueueGenericCreateStatic+0x56>
 800e74e:	2301      	movs	r3, #1
 800e750:	e000      	b.n	800e754 <xQueueGenericCreateStatic+0x58>
 800e752:	2300      	movs	r3, #0
 800e754:	2b00      	cmp	r3, #0
 800e756:	d10a      	bne.n	800e76e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e75c:	f383 8811 	msr	BASEPRI, r3
 800e760:	f3bf 8f6f 	isb	sy
 800e764:	f3bf 8f4f 	dsb	sy
 800e768:	623b      	str	r3, [r7, #32]
}
 800e76a:	bf00      	nop
 800e76c:	e7fe      	b.n	800e76c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d102      	bne.n	800e77a <xQueueGenericCreateStatic+0x7e>
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d101      	bne.n	800e77e <xQueueGenericCreateStatic+0x82>
 800e77a:	2301      	movs	r3, #1
 800e77c:	e000      	b.n	800e780 <xQueueGenericCreateStatic+0x84>
 800e77e:	2300      	movs	r3, #0
 800e780:	2b00      	cmp	r3, #0
 800e782:	d10a      	bne.n	800e79a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e788:	f383 8811 	msr	BASEPRI, r3
 800e78c:	f3bf 8f6f 	isb	sy
 800e790:	f3bf 8f4f 	dsb	sy
 800e794:	61fb      	str	r3, [r7, #28]
}
 800e796:	bf00      	nop
 800e798:	e7fe      	b.n	800e798 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e79a:	2350      	movs	r3, #80	; 0x50
 800e79c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	2b50      	cmp	r3, #80	; 0x50
 800e7a2:	d00a      	beq.n	800e7ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a8:	f383 8811 	msr	BASEPRI, r3
 800e7ac:	f3bf 8f6f 	isb	sy
 800e7b0:	f3bf 8f4f 	dsb	sy
 800e7b4:	61bb      	str	r3, [r7, #24]
}
 800e7b6:	bf00      	nop
 800e7b8:	e7fe      	b.n	800e7b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e7ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00d      	beq.n	800e7e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c8:	2201      	movs	r2, #1
 800e7ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e7ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d4:	9300      	str	r3, [sp, #0]
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	687a      	ldr	r2, [r7, #4]
 800e7da:	68b9      	ldr	r1, [r7, #8]
 800e7dc:	68f8      	ldr	r0, [r7, #12]
 800e7de:	f000 f83f 	bl	800e860 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3730      	adds	r7, #48	; 0x30
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b08a      	sub	sp, #40	; 0x28
 800e7f0:	af02      	add	r7, sp, #8
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	60b9      	str	r1, [r7, #8]
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d10a      	bne.n	800e816 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e804:	f383 8811 	msr	BASEPRI, r3
 800e808:	f3bf 8f6f 	isb	sy
 800e80c:	f3bf 8f4f 	dsb	sy
 800e810:	613b      	str	r3, [r7, #16]
}
 800e812:	bf00      	nop
 800e814:	e7fe      	b.n	800e814 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	68ba      	ldr	r2, [r7, #8]
 800e81a:	fb02 f303 	mul.w	r3, r2, r3
 800e81e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	3350      	adds	r3, #80	; 0x50
 800e824:	4618      	mov	r0, r3
 800e826:	f002 fccf 	bl	80111c8 <pvPortMalloc>
 800e82a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d011      	beq.n	800e856 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e832:	69bb      	ldr	r3, [r7, #24]
 800e834:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	3350      	adds	r3, #80	; 0x50
 800e83a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e83c:	69bb      	ldr	r3, [r7, #24]
 800e83e:	2200      	movs	r2, #0
 800e840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e844:	79fa      	ldrb	r2, [r7, #7]
 800e846:	69bb      	ldr	r3, [r7, #24]
 800e848:	9300      	str	r3, [sp, #0]
 800e84a:	4613      	mov	r3, r2
 800e84c:	697a      	ldr	r2, [r7, #20]
 800e84e:	68b9      	ldr	r1, [r7, #8]
 800e850:	68f8      	ldr	r0, [r7, #12]
 800e852:	f000 f805 	bl	800e860 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e856:	69bb      	ldr	r3, [r7, #24]
	}
 800e858:	4618      	mov	r0, r3
 800e85a:	3720      	adds	r7, #32
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}

0800e860 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b084      	sub	sp, #16
 800e864:	af00      	add	r7, sp, #0
 800e866:	60f8      	str	r0, [r7, #12]
 800e868:	60b9      	str	r1, [r7, #8]
 800e86a:	607a      	str	r2, [r7, #4]
 800e86c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d103      	bne.n	800e87c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e874:	69bb      	ldr	r3, [r7, #24]
 800e876:	69ba      	ldr	r2, [r7, #24]
 800e878:	601a      	str	r2, [r3, #0]
 800e87a:	e002      	b.n	800e882 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e87c:	69bb      	ldr	r3, [r7, #24]
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e882:	69bb      	ldr	r3, [r7, #24]
 800e884:	68fa      	ldr	r2, [r7, #12]
 800e886:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	68ba      	ldr	r2, [r7, #8]
 800e88c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e88e:	2101      	movs	r1, #1
 800e890:	69b8      	ldr	r0, [r7, #24]
 800e892:	f7ff fecb 	bl	800e62c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e896:	69bb      	ldr	r3, [r7, #24]
 800e898:	78fa      	ldrb	r2, [r7, #3]
 800e89a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e89e:	bf00      	nop
 800e8a0:	3710      	adds	r7, #16
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}

0800e8a6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e8a6:	b580      	push	{r7, lr}
 800e8a8:	b08a      	sub	sp, #40	; 0x28
 800e8aa:	af02      	add	r7, sp, #8
 800e8ac:	60f8      	str	r0, [r7, #12]
 800e8ae:	60b9      	str	r1, [r7, #8]
 800e8b0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d10a      	bne.n	800e8ce <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800e8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8bc:	f383 8811 	msr	BASEPRI, r3
 800e8c0:	f3bf 8f6f 	isb	sy
 800e8c4:	f3bf 8f4f 	dsb	sy
 800e8c8:	61bb      	str	r3, [r7, #24]
}
 800e8ca:	bf00      	nop
 800e8cc:	e7fe      	b.n	800e8cc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e8ce:	68ba      	ldr	r2, [r7, #8]
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d90a      	bls.n	800e8ec <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800e8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8da:	f383 8811 	msr	BASEPRI, r3
 800e8de:	f3bf 8f6f 	isb	sy
 800e8e2:	f3bf 8f4f 	dsb	sy
 800e8e6:	617b      	str	r3, [r7, #20]
}
 800e8e8:	bf00      	nop
 800e8ea:	e7fe      	b.n	800e8ea <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e8ec:	2302      	movs	r3, #2
 800e8ee:	9300      	str	r3, [sp, #0]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	2100      	movs	r1, #0
 800e8f6:	68f8      	ldr	r0, [r7, #12]
 800e8f8:	f7ff ff00 	bl	800e6fc <xQueueGenericCreateStatic>
 800e8fc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e8fe:	69fb      	ldr	r3, [r7, #28]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d002      	beq.n	800e90a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	68ba      	ldr	r2, [r7, #8]
 800e908:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e90a:	69fb      	ldr	r3, [r7, #28]
	}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3720      	adds	r7, #32
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}

0800e914 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e914:	b580      	push	{r7, lr}
 800e916:	b086      	sub	sp, #24
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
 800e91c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d10a      	bne.n	800e93a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800e924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e928:	f383 8811 	msr	BASEPRI, r3
 800e92c:	f3bf 8f6f 	isb	sy
 800e930:	f3bf 8f4f 	dsb	sy
 800e934:	613b      	str	r3, [r7, #16]
}
 800e936:	bf00      	nop
 800e938:	e7fe      	b.n	800e938 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e93a:	683a      	ldr	r2, [r7, #0]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d90a      	bls.n	800e958 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800e942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e946:	f383 8811 	msr	BASEPRI, r3
 800e94a:	f3bf 8f6f 	isb	sy
 800e94e:	f3bf 8f4f 	dsb	sy
 800e952:	60fb      	str	r3, [r7, #12]
}
 800e954:	bf00      	nop
 800e956:	e7fe      	b.n	800e956 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e958:	2202      	movs	r2, #2
 800e95a:	2100      	movs	r1, #0
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f7ff ff45 	bl	800e7ec <xQueueGenericCreate>
 800e962:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d002      	beq.n	800e970 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	683a      	ldr	r2, [r7, #0]
 800e96e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e970:	697b      	ldr	r3, [r7, #20]
	}
 800e972:	4618      	mov	r0, r3
 800e974:	3718      	adds	r7, #24
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
	...

0800e97c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b08e      	sub	sp, #56	; 0x38
 800e980:	af00      	add	r7, sp, #0
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	607a      	str	r2, [r7, #4]
 800e988:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e98a:	2300      	movs	r3, #0
 800e98c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e994:	2b00      	cmp	r3, #0
 800e996:	d10a      	bne.n	800e9ae <xQueueGenericSend+0x32>
	__asm volatile
 800e998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99c:	f383 8811 	msr	BASEPRI, r3
 800e9a0:	f3bf 8f6f 	isb	sy
 800e9a4:	f3bf 8f4f 	dsb	sy
 800e9a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e9aa:	bf00      	nop
 800e9ac:	e7fe      	b.n	800e9ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d103      	bne.n	800e9bc <xQueueGenericSend+0x40>
 800e9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d101      	bne.n	800e9c0 <xQueueGenericSend+0x44>
 800e9bc:	2301      	movs	r3, #1
 800e9be:	e000      	b.n	800e9c2 <xQueueGenericSend+0x46>
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d10a      	bne.n	800e9dc <xQueueGenericSend+0x60>
	__asm volatile
 800e9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ca:	f383 8811 	msr	BASEPRI, r3
 800e9ce:	f3bf 8f6f 	isb	sy
 800e9d2:	f3bf 8f4f 	dsb	sy
 800e9d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e9d8:	bf00      	nop
 800e9da:	e7fe      	b.n	800e9da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	2b02      	cmp	r3, #2
 800e9e0:	d103      	bne.n	800e9ea <xQueueGenericSend+0x6e>
 800e9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d101      	bne.n	800e9ee <xQueueGenericSend+0x72>
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	e000      	b.n	800e9f0 <xQueueGenericSend+0x74>
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d10a      	bne.n	800ea0a <xQueueGenericSend+0x8e>
	__asm volatile
 800e9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f8:	f383 8811 	msr	BASEPRI, r3
 800e9fc:	f3bf 8f6f 	isb	sy
 800ea00:	f3bf 8f4f 	dsb	sy
 800ea04:	623b      	str	r3, [r7, #32]
}
 800ea06:	bf00      	nop
 800ea08:	e7fe      	b.n	800ea08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea0a:	f001 fc65 	bl	80102d8 <xTaskGetSchedulerState>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d102      	bne.n	800ea1a <xQueueGenericSend+0x9e>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d101      	bne.n	800ea1e <xQueueGenericSend+0xa2>
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	e000      	b.n	800ea20 <xQueueGenericSend+0xa4>
 800ea1e:	2300      	movs	r3, #0
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d10a      	bne.n	800ea3a <xQueueGenericSend+0xbe>
	__asm volatile
 800ea24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea28:	f383 8811 	msr	BASEPRI, r3
 800ea2c:	f3bf 8f6f 	isb	sy
 800ea30:	f3bf 8f4f 	dsb	sy
 800ea34:	61fb      	str	r3, [r7, #28]
}
 800ea36:	bf00      	nop
 800ea38:	e7fe      	b.n	800ea38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ea3a:	f002 faa3 	bl	8010f84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ea3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d302      	bcc.n	800ea50 <xQueueGenericSend+0xd4>
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	2b02      	cmp	r3, #2
 800ea4e:	d129      	bne.n	800eaa4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ea50:	683a      	ldr	r2, [r7, #0]
 800ea52:	68b9      	ldr	r1, [r7, #8]
 800ea54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea56:	f000 fc5e 	bl	800f316 <prvCopyDataToQueue>
 800ea5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d010      	beq.n	800ea86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea66:	3324      	adds	r3, #36	; 0x24
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f001 fa73 	bl	800ff54 <xTaskRemoveFromEventList>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d013      	beq.n	800ea9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ea74:	4b3f      	ldr	r3, [pc, #252]	; (800eb74 <xQueueGenericSend+0x1f8>)
 800ea76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea7a:	601a      	str	r2, [r3, #0]
 800ea7c:	f3bf 8f4f 	dsb	sy
 800ea80:	f3bf 8f6f 	isb	sy
 800ea84:	e00a      	b.n	800ea9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ea86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d007      	beq.n	800ea9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ea8c:	4b39      	ldr	r3, [pc, #228]	; (800eb74 <xQueueGenericSend+0x1f8>)
 800ea8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea92:	601a      	str	r2, [r3, #0]
 800ea94:	f3bf 8f4f 	dsb	sy
 800ea98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ea9c:	f002 faa2 	bl	8010fe4 <vPortExitCritical>
				return pdPASS;
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	e063      	b.n	800eb6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d103      	bne.n	800eab2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eaaa:	f002 fa9b 	bl	8010fe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800eaae:	2300      	movs	r3, #0
 800eab0:	e05c      	b.n	800eb6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d106      	bne.n	800eac6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eab8:	f107 0314 	add.w	r3, r7, #20
 800eabc:	4618      	mov	r0, r3
 800eabe:	f001 faad 	bl	801001c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eac2:	2301      	movs	r3, #1
 800eac4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eac6:	f002 fa8d 	bl	8010fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eaca:	f001 f819 	bl	800fb00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eace:	f002 fa59 	bl	8010f84 <vPortEnterCritical>
 800ead2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ead8:	b25b      	sxtb	r3, r3
 800eada:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eade:	d103      	bne.n	800eae8 <xQueueGenericSend+0x16c>
 800eae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae2:	2200      	movs	r2, #0
 800eae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eaee:	b25b      	sxtb	r3, r3
 800eaf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaf4:	d103      	bne.n	800eafe <xQueueGenericSend+0x182>
 800eaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf8:	2200      	movs	r2, #0
 800eafa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eafe:	f002 fa71 	bl	8010fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb02:	1d3a      	adds	r2, r7, #4
 800eb04:	f107 0314 	add.w	r3, r7, #20
 800eb08:	4611      	mov	r1, r2
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f001 fa9c 	bl	8010048 <xTaskCheckForTimeOut>
 800eb10:	4603      	mov	r3, r0
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d124      	bne.n	800eb60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800eb16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb18:	f000 fcf5 	bl	800f506 <prvIsQueueFull>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d018      	beq.n	800eb54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800eb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb24:	3310      	adds	r3, #16
 800eb26:	687a      	ldr	r2, [r7, #4]
 800eb28:	4611      	mov	r1, r2
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f001 f9c2 	bl	800feb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800eb30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb32:	f000 fc80 	bl	800f436 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800eb36:	f000 fff1 	bl	800fb1c <xTaskResumeAll>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	f47f af7c 	bne.w	800ea3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800eb42:	4b0c      	ldr	r3, [pc, #48]	; (800eb74 <xQueueGenericSend+0x1f8>)
 800eb44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb48:	601a      	str	r2, [r3, #0]
 800eb4a:	f3bf 8f4f 	dsb	sy
 800eb4e:	f3bf 8f6f 	isb	sy
 800eb52:	e772      	b.n	800ea3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800eb54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb56:	f000 fc6e 	bl	800f436 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eb5a:	f000 ffdf 	bl	800fb1c <xTaskResumeAll>
 800eb5e:	e76c      	b.n	800ea3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800eb60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb62:	f000 fc68 	bl	800f436 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eb66:	f000 ffd9 	bl	800fb1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800eb6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3738      	adds	r7, #56	; 0x38
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	e000ed04 	.word	0xe000ed04

0800eb78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b090      	sub	sp, #64	; 0x40
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	60f8      	str	r0, [r7, #12]
 800eb80:	60b9      	str	r1, [r7, #8]
 800eb82:	607a      	str	r2, [r7, #4]
 800eb84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800eb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d10a      	bne.n	800eba6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800eb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb94:	f383 8811 	msr	BASEPRI, r3
 800eb98:	f3bf 8f6f 	isb	sy
 800eb9c:	f3bf 8f4f 	dsb	sy
 800eba0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eba2:	bf00      	nop
 800eba4:	e7fe      	b.n	800eba4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d103      	bne.n	800ebb4 <xQueueGenericSendFromISR+0x3c>
 800ebac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d101      	bne.n	800ebb8 <xQueueGenericSendFromISR+0x40>
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	e000      	b.n	800ebba <xQueueGenericSendFromISR+0x42>
 800ebb8:	2300      	movs	r3, #0
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d10a      	bne.n	800ebd4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ebbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc2:	f383 8811 	msr	BASEPRI, r3
 800ebc6:	f3bf 8f6f 	isb	sy
 800ebca:	f3bf 8f4f 	dsb	sy
 800ebce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ebd0:	bf00      	nop
 800ebd2:	e7fe      	b.n	800ebd2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	2b02      	cmp	r3, #2
 800ebd8:	d103      	bne.n	800ebe2 <xQueueGenericSendFromISR+0x6a>
 800ebda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebde:	2b01      	cmp	r3, #1
 800ebe0:	d101      	bne.n	800ebe6 <xQueueGenericSendFromISR+0x6e>
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	e000      	b.n	800ebe8 <xQueueGenericSendFromISR+0x70>
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d10a      	bne.n	800ec02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ebec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf0:	f383 8811 	msr	BASEPRI, r3
 800ebf4:	f3bf 8f6f 	isb	sy
 800ebf8:	f3bf 8f4f 	dsb	sy
 800ebfc:	623b      	str	r3, [r7, #32]
}
 800ebfe:	bf00      	nop
 800ec00:	e7fe      	b.n	800ec00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ec02:	f002 faa1 	bl	8011148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ec06:	f3ef 8211 	mrs	r2, BASEPRI
 800ec0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec0e:	f383 8811 	msr	BASEPRI, r3
 800ec12:	f3bf 8f6f 	isb	sy
 800ec16:	f3bf 8f4f 	dsb	sy
 800ec1a:	61fa      	str	r2, [r7, #28]
 800ec1c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ec1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ec22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d302      	bcc.n	800ec34 <xQueueGenericSendFromISR+0xbc>
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	2b02      	cmp	r3, #2
 800ec32:	d12f      	bne.n	800ec94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ec34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ec44:	683a      	ldr	r2, [r7, #0]
 800ec46:	68b9      	ldr	r1, [r7, #8]
 800ec48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec4a:	f000 fb64 	bl	800f316 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ec4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ec52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec56:	d112      	bne.n	800ec7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d016      	beq.n	800ec8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec62:	3324      	adds	r3, #36	; 0x24
 800ec64:	4618      	mov	r0, r3
 800ec66:	f001 f975 	bl	800ff54 <xTaskRemoveFromEventList>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d00e      	beq.n	800ec8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d00b      	beq.n	800ec8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2201      	movs	r2, #1
 800ec7a:	601a      	str	r2, [r3, #0]
 800ec7c:	e007      	b.n	800ec8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ec7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ec82:	3301      	adds	r3, #1
 800ec84:	b2db      	uxtb	r3, r3
 800ec86:	b25a      	sxtb	r2, r3
 800ec88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ec92:	e001      	b.n	800ec98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ec94:	2300      	movs	r3, #0
 800ec96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec9a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800eca2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3740      	adds	r7, #64	; 0x40
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}

0800ecae <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ecae:	b580      	push	{r7, lr}
 800ecb0:	b08e      	sub	sp, #56	; 0x38
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	6078      	str	r0, [r7, #4]
 800ecb6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ecbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d10a      	bne.n	800ecd8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ecc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecc6:	f383 8811 	msr	BASEPRI, r3
 800ecca:	f3bf 8f6f 	isb	sy
 800ecce:	f3bf 8f4f 	dsb	sy
 800ecd2:	623b      	str	r3, [r7, #32]
}
 800ecd4:	bf00      	nop
 800ecd6:	e7fe      	b.n	800ecd6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ecd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d00a      	beq.n	800ecf6 <xQueueGiveFromISR+0x48>
	__asm volatile
 800ece0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ece4:	f383 8811 	msr	BASEPRI, r3
 800ece8:	f3bf 8f6f 	isb	sy
 800ecec:	f3bf 8f4f 	dsb	sy
 800ecf0:	61fb      	str	r3, [r7, #28]
}
 800ecf2:	bf00      	nop
 800ecf4:	e7fe      	b.n	800ecf4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ecf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d103      	bne.n	800ed06 <xQueueGiveFromISR+0x58>
 800ecfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed00:	689b      	ldr	r3, [r3, #8]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d101      	bne.n	800ed0a <xQueueGiveFromISR+0x5c>
 800ed06:	2301      	movs	r3, #1
 800ed08:	e000      	b.n	800ed0c <xQueueGiveFromISR+0x5e>
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d10a      	bne.n	800ed26 <xQueueGiveFromISR+0x78>
	__asm volatile
 800ed10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed14:	f383 8811 	msr	BASEPRI, r3
 800ed18:	f3bf 8f6f 	isb	sy
 800ed1c:	f3bf 8f4f 	dsb	sy
 800ed20:	61bb      	str	r3, [r7, #24]
}
 800ed22:	bf00      	nop
 800ed24:	e7fe      	b.n	800ed24 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed26:	f002 fa0f 	bl	8011148 <vPortValidateInterruptPriority>
	__asm volatile
 800ed2a:	f3ef 8211 	mrs	r2, BASEPRI
 800ed2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed32:	f383 8811 	msr	BASEPRI, r3
 800ed36:	f3bf 8f6f 	isb	sy
 800ed3a:	f3bf 8f4f 	dsb	sy
 800ed3e:	617a      	str	r2, [r7, #20]
 800ed40:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ed42:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed4a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ed4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d22b      	bcs.n	800edae <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ed56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ed60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed62:	1c5a      	adds	r2, r3, #1
 800ed64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed66:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ed68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ed6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed70:	d112      	bne.n	800ed98 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d016      	beq.n	800eda8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7c:	3324      	adds	r3, #36	; 0x24
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f001 f8e8 	bl	800ff54 <xTaskRemoveFromEventList>
 800ed84:	4603      	mov	r3, r0
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d00e      	beq.n	800eda8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d00b      	beq.n	800eda8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	2201      	movs	r2, #1
 800ed94:	601a      	str	r2, [r3, #0]
 800ed96:	e007      	b.n	800eda8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ed98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	b2db      	uxtb	r3, r3
 800eda0:	b25a      	sxtb	r2, r3
 800eda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eda8:	2301      	movs	r3, #1
 800edaa:	637b      	str	r3, [r7, #52]	; 0x34
 800edac:	e001      	b.n	800edb2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800edae:	2300      	movs	r3, #0
 800edb0:	637b      	str	r3, [r7, #52]	; 0x34
 800edb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	f383 8811 	msr	BASEPRI, r3
}
 800edbc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800edbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3738      	adds	r7, #56	; 0x38
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}

0800edc8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b08c      	sub	sp, #48	; 0x30
 800edcc:	af00      	add	r7, sp, #0
 800edce:	60f8      	str	r0, [r7, #12]
 800edd0:	60b9      	str	r1, [r7, #8]
 800edd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800edd4:	2300      	movs	r3, #0
 800edd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d10a      	bne.n	800edf8 <xQueueReceive+0x30>
	__asm volatile
 800ede2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede6:	f383 8811 	msr	BASEPRI, r3
 800edea:	f3bf 8f6f 	isb	sy
 800edee:	f3bf 8f4f 	dsb	sy
 800edf2:	623b      	str	r3, [r7, #32]
}
 800edf4:	bf00      	nop
 800edf6:	e7fe      	b.n	800edf6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d103      	bne.n	800ee06 <xQueueReceive+0x3e>
 800edfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d101      	bne.n	800ee0a <xQueueReceive+0x42>
 800ee06:	2301      	movs	r3, #1
 800ee08:	e000      	b.n	800ee0c <xQueueReceive+0x44>
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d10a      	bne.n	800ee26 <xQueueReceive+0x5e>
	__asm volatile
 800ee10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee14:	f383 8811 	msr	BASEPRI, r3
 800ee18:	f3bf 8f6f 	isb	sy
 800ee1c:	f3bf 8f4f 	dsb	sy
 800ee20:	61fb      	str	r3, [r7, #28]
}
 800ee22:	bf00      	nop
 800ee24:	e7fe      	b.n	800ee24 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee26:	f001 fa57 	bl	80102d8 <xTaskGetSchedulerState>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d102      	bne.n	800ee36 <xQueueReceive+0x6e>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d101      	bne.n	800ee3a <xQueueReceive+0x72>
 800ee36:	2301      	movs	r3, #1
 800ee38:	e000      	b.n	800ee3c <xQueueReceive+0x74>
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d10a      	bne.n	800ee56 <xQueueReceive+0x8e>
	__asm volatile
 800ee40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee44:	f383 8811 	msr	BASEPRI, r3
 800ee48:	f3bf 8f6f 	isb	sy
 800ee4c:	f3bf 8f4f 	dsb	sy
 800ee50:	61bb      	str	r3, [r7, #24]
}
 800ee52:	bf00      	nop
 800ee54:	e7fe      	b.n	800ee54 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ee56:	f002 f895 	bl	8010f84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ee60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d01f      	beq.n	800eea6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ee66:	68b9      	ldr	r1, [r7, #8]
 800ee68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee6a:	f000 fabe 	bl	800f3ea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ee6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee70:	1e5a      	subs	r2, r3, #1
 800ee72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee78:	691b      	ldr	r3, [r3, #16]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d00f      	beq.n	800ee9e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee80:	3310      	adds	r3, #16
 800ee82:	4618      	mov	r0, r3
 800ee84:	f001 f866 	bl	800ff54 <xTaskRemoveFromEventList>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d007      	beq.n	800ee9e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ee8e:	4b3d      	ldr	r3, [pc, #244]	; (800ef84 <xQueueReceive+0x1bc>)
 800ee90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee94:	601a      	str	r2, [r3, #0]
 800ee96:	f3bf 8f4f 	dsb	sy
 800ee9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ee9e:	f002 f8a1 	bl	8010fe4 <vPortExitCritical>
				return pdPASS;
 800eea2:	2301      	movs	r3, #1
 800eea4:	e069      	b.n	800ef7a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d103      	bne.n	800eeb4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eeac:	f002 f89a 	bl	8010fe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	e062      	b.n	800ef7a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eeb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d106      	bne.n	800eec8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eeba:	f107 0310 	add.w	r3, r7, #16
 800eebe:	4618      	mov	r0, r3
 800eec0:	f001 f8ac 	bl	801001c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eec4:	2301      	movs	r3, #1
 800eec6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eec8:	f002 f88c 	bl	8010fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eecc:	f000 fe18 	bl	800fb00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eed0:	f002 f858 	bl	8010f84 <vPortEnterCritical>
 800eed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eeda:	b25b      	sxtb	r3, r3
 800eedc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eee0:	d103      	bne.n	800eeea <xQueueReceive+0x122>
 800eee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee4:	2200      	movs	r2, #0
 800eee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eef0:	b25b      	sxtb	r3, r3
 800eef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eef6:	d103      	bne.n	800ef00 <xQueueReceive+0x138>
 800eef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefa:	2200      	movs	r2, #0
 800eefc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef00:	f002 f870 	bl	8010fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef04:	1d3a      	adds	r2, r7, #4
 800ef06:	f107 0310 	add.w	r3, r7, #16
 800ef0a:	4611      	mov	r1, r2
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f001 f89b 	bl	8010048 <xTaskCheckForTimeOut>
 800ef12:	4603      	mov	r3, r0
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d123      	bne.n	800ef60 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef1a:	f000 fade 	bl	800f4da <prvIsQueueEmpty>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d017      	beq.n	800ef54 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ef24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef26:	3324      	adds	r3, #36	; 0x24
 800ef28:	687a      	ldr	r2, [r7, #4]
 800ef2a:	4611      	mov	r1, r2
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f000 ffc1 	bl	800feb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ef32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef34:	f000 fa7f 	bl	800f436 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ef38:	f000 fdf0 	bl	800fb1c <xTaskResumeAll>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d189      	bne.n	800ee56 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ef42:	4b10      	ldr	r3, [pc, #64]	; (800ef84 <xQueueReceive+0x1bc>)
 800ef44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef48:	601a      	str	r2, [r3, #0]
 800ef4a:	f3bf 8f4f 	dsb	sy
 800ef4e:	f3bf 8f6f 	isb	sy
 800ef52:	e780      	b.n	800ee56 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ef54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef56:	f000 fa6e 	bl	800f436 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef5a:	f000 fddf 	bl	800fb1c <xTaskResumeAll>
 800ef5e:	e77a      	b.n	800ee56 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ef60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef62:	f000 fa68 	bl	800f436 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ef66:	f000 fdd9 	bl	800fb1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef6c:	f000 fab5 	bl	800f4da <prvIsQueueEmpty>
 800ef70:	4603      	mov	r3, r0
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	f43f af6f 	beq.w	800ee56 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ef78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3730      	adds	r7, #48	; 0x30
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	e000ed04 	.word	0xe000ed04

0800ef88 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b08e      	sub	sp, #56	; 0x38
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ef92:	2300      	movs	r3, #0
 800ef94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ef9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d10a      	bne.n	800efba <xQueueSemaphoreTake+0x32>
	__asm volatile
 800efa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa8:	f383 8811 	msr	BASEPRI, r3
 800efac:	f3bf 8f6f 	isb	sy
 800efb0:	f3bf 8f4f 	dsb	sy
 800efb4:	623b      	str	r3, [r7, #32]
}
 800efb6:	bf00      	nop
 800efb8:	e7fe      	b.n	800efb8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800efba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d00a      	beq.n	800efd8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800efc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc6:	f383 8811 	msr	BASEPRI, r3
 800efca:	f3bf 8f6f 	isb	sy
 800efce:	f3bf 8f4f 	dsb	sy
 800efd2:	61fb      	str	r3, [r7, #28]
}
 800efd4:	bf00      	nop
 800efd6:	e7fe      	b.n	800efd6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800efd8:	f001 f97e 	bl	80102d8 <xTaskGetSchedulerState>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d102      	bne.n	800efe8 <xQueueSemaphoreTake+0x60>
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d101      	bne.n	800efec <xQueueSemaphoreTake+0x64>
 800efe8:	2301      	movs	r3, #1
 800efea:	e000      	b.n	800efee <xQueueSemaphoreTake+0x66>
 800efec:	2300      	movs	r3, #0
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d10a      	bne.n	800f008 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800eff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff6:	f383 8811 	msr	BASEPRI, r3
 800effa:	f3bf 8f6f 	isb	sy
 800effe:	f3bf 8f4f 	dsb	sy
 800f002:	61bb      	str	r3, [r7, #24]
}
 800f004:	bf00      	nop
 800f006:	e7fe      	b.n	800f006 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f008:	f001 ffbc 	bl	8010f84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f010:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f014:	2b00      	cmp	r3, #0
 800f016:	d024      	beq.n	800f062 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f01a:	1e5a      	subs	r2, r3, #1
 800f01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f01e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d104      	bne.n	800f032 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f028:	f001 facc 	bl	80105c4 <pvTaskIncrementMutexHeldCount>
 800f02c:	4602      	mov	r2, r0
 800f02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f030:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f034:	691b      	ldr	r3, [r3, #16]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d00f      	beq.n	800f05a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03c:	3310      	adds	r3, #16
 800f03e:	4618      	mov	r0, r3
 800f040:	f000 ff88 	bl	800ff54 <xTaskRemoveFromEventList>
 800f044:	4603      	mov	r3, r0
 800f046:	2b00      	cmp	r3, #0
 800f048:	d007      	beq.n	800f05a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f04a:	4b54      	ldr	r3, [pc, #336]	; (800f19c <xQueueSemaphoreTake+0x214>)
 800f04c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f050:	601a      	str	r2, [r3, #0]
 800f052:	f3bf 8f4f 	dsb	sy
 800f056:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f05a:	f001 ffc3 	bl	8010fe4 <vPortExitCritical>
				return pdPASS;
 800f05e:	2301      	movs	r3, #1
 800f060:	e097      	b.n	800f192 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d111      	bne.n	800f08c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d00a      	beq.n	800f084 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f072:	f383 8811 	msr	BASEPRI, r3
 800f076:	f3bf 8f6f 	isb	sy
 800f07a:	f3bf 8f4f 	dsb	sy
 800f07e:	617b      	str	r3, [r7, #20]
}
 800f080:	bf00      	nop
 800f082:	e7fe      	b.n	800f082 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f084:	f001 ffae 	bl	8010fe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f088:	2300      	movs	r3, #0
 800f08a:	e082      	b.n	800f192 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f08c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d106      	bne.n	800f0a0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f092:	f107 030c 	add.w	r3, r7, #12
 800f096:	4618      	mov	r0, r3
 800f098:	f000 ffc0 	bl	801001c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f09c:	2301      	movs	r3, #1
 800f09e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f0a0:	f001 ffa0 	bl	8010fe4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f0a4:	f000 fd2c 	bl	800fb00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f0a8:	f001 ff6c 	bl	8010f84 <vPortEnterCritical>
 800f0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f0b2:	b25b      	sxtb	r3, r3
 800f0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b8:	d103      	bne.n	800f0c2 <xQueueSemaphoreTake+0x13a>
 800f0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0bc:	2200      	movs	r2, #0
 800f0be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0c8:	b25b      	sxtb	r3, r3
 800f0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ce:	d103      	bne.n	800f0d8 <xQueueSemaphoreTake+0x150>
 800f0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f0d8:	f001 ff84 	bl	8010fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f0dc:	463a      	mov	r2, r7
 800f0de:	f107 030c 	add.w	r3, r7, #12
 800f0e2:	4611      	mov	r1, r2
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f000 ffaf 	bl	8010048 <xTaskCheckForTimeOut>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d132      	bne.n	800f156 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f0f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0f2:	f000 f9f2 	bl	800f4da <prvIsQueueEmpty>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d026      	beq.n	800f14a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d109      	bne.n	800f118 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f104:	f001 ff3e 	bl	8010f84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10a:	689b      	ldr	r3, [r3, #8]
 800f10c:	4618      	mov	r0, r3
 800f10e:	f001 f901 	bl	8010314 <xTaskPriorityInherit>
 800f112:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f114:	f001 ff66 	bl	8010fe4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11a:	3324      	adds	r3, #36	; 0x24
 800f11c:	683a      	ldr	r2, [r7, #0]
 800f11e:	4611      	mov	r1, r2
 800f120:	4618      	mov	r0, r3
 800f122:	f000 fec7 	bl	800feb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f126:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f128:	f000 f985 	bl	800f436 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f12c:	f000 fcf6 	bl	800fb1c <xTaskResumeAll>
 800f130:	4603      	mov	r3, r0
 800f132:	2b00      	cmp	r3, #0
 800f134:	f47f af68 	bne.w	800f008 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f138:	4b18      	ldr	r3, [pc, #96]	; (800f19c <xQueueSemaphoreTake+0x214>)
 800f13a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f13e:	601a      	str	r2, [r3, #0]
 800f140:	f3bf 8f4f 	dsb	sy
 800f144:	f3bf 8f6f 	isb	sy
 800f148:	e75e      	b.n	800f008 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f14a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f14c:	f000 f973 	bl	800f436 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f150:	f000 fce4 	bl	800fb1c <xTaskResumeAll>
 800f154:	e758      	b.n	800f008 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f156:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f158:	f000 f96d 	bl	800f436 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f15c:	f000 fcde 	bl	800fb1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f160:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f162:	f000 f9ba 	bl	800f4da <prvIsQueueEmpty>
 800f166:	4603      	mov	r3, r0
 800f168:	2b00      	cmp	r3, #0
 800f16a:	f43f af4d 	beq.w	800f008 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f170:	2b00      	cmp	r3, #0
 800f172:	d00d      	beq.n	800f190 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f174:	f001 ff06 	bl	8010f84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f178:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f17a:	f000 f8b4 	bl	800f2e6 <prvGetDisinheritPriorityAfterTimeout>
 800f17e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f182:	689b      	ldr	r3, [r3, #8]
 800f184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f186:	4618      	mov	r0, r3
 800f188:	f001 f99a 	bl	80104c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f18c:	f001 ff2a 	bl	8010fe4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f190:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f192:	4618      	mov	r0, r3
 800f194:	3738      	adds	r7, #56	; 0x38
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	e000ed04 	.word	0xe000ed04

0800f1a0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b08e      	sub	sp, #56	; 0x38
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	60b9      	str	r1, [r7, #8]
 800f1aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d10a      	bne.n	800f1cc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ba:	f383 8811 	msr	BASEPRI, r3
 800f1be:	f3bf 8f6f 	isb	sy
 800f1c2:	f3bf 8f4f 	dsb	sy
 800f1c6:	623b      	str	r3, [r7, #32]
}
 800f1c8:	bf00      	nop
 800f1ca:	e7fe      	b.n	800f1ca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d103      	bne.n	800f1da <xQueueReceiveFromISR+0x3a>
 800f1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d101      	bne.n	800f1de <xQueueReceiveFromISR+0x3e>
 800f1da:	2301      	movs	r3, #1
 800f1dc:	e000      	b.n	800f1e0 <xQueueReceiveFromISR+0x40>
 800f1de:	2300      	movs	r3, #0
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d10a      	bne.n	800f1fa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1e8:	f383 8811 	msr	BASEPRI, r3
 800f1ec:	f3bf 8f6f 	isb	sy
 800f1f0:	f3bf 8f4f 	dsb	sy
 800f1f4:	61fb      	str	r3, [r7, #28]
}
 800f1f6:	bf00      	nop
 800f1f8:	e7fe      	b.n	800f1f8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f1fa:	f001 ffa5 	bl	8011148 <vPortValidateInterruptPriority>
	__asm volatile
 800f1fe:	f3ef 8211 	mrs	r2, BASEPRI
 800f202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f206:	f383 8811 	msr	BASEPRI, r3
 800f20a:	f3bf 8f6f 	isb	sy
 800f20e:	f3bf 8f4f 	dsb	sy
 800f212:	61ba      	str	r2, [r7, #24]
 800f214:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f216:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f218:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f21e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f222:	2b00      	cmp	r3, #0
 800f224:	d02f      	beq.n	800f286 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f22c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f230:	68b9      	ldr	r1, [r7, #8]
 800f232:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f234:	f000 f8d9 	bl	800f3ea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23a:	1e5a      	subs	r2, r3, #1
 800f23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f240:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f248:	d112      	bne.n	800f270 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f24c:	691b      	ldr	r3, [r3, #16]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d016      	beq.n	800f280 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f254:	3310      	adds	r3, #16
 800f256:	4618      	mov	r0, r3
 800f258:	f000 fe7c 	bl	800ff54 <xTaskRemoveFromEventList>
 800f25c:	4603      	mov	r3, r0
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d00e      	beq.n	800f280 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d00b      	beq.n	800f280 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2201      	movs	r2, #1
 800f26c:	601a      	str	r2, [r3, #0]
 800f26e:	e007      	b.n	800f280 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f274:	3301      	adds	r3, #1
 800f276:	b2db      	uxtb	r3, r3
 800f278:	b25a      	sxtb	r2, r3
 800f27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f27c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f280:	2301      	movs	r3, #1
 800f282:	637b      	str	r3, [r7, #52]	; 0x34
 800f284:	e001      	b.n	800f28a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f286:	2300      	movs	r3, #0
 800f288:	637b      	str	r3, [r7, #52]	; 0x34
 800f28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	f383 8811 	msr	BASEPRI, r3
}
 800f294:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f298:	4618      	mov	r0, r3
 800f29a:	3738      	adds	r7, #56	; 0x38
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d10a      	bne.n	800f2c8 <vQueueDelete+0x28>
	__asm volatile
 800f2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2b6:	f383 8811 	msr	BASEPRI, r3
 800f2ba:	f3bf 8f6f 	isb	sy
 800f2be:	f3bf 8f4f 	dsb	sy
 800f2c2:	60bb      	str	r3, [r7, #8]
}
 800f2c4:	bf00      	nop
 800f2c6:	e7fe      	b.n	800f2c6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f2c8:	68f8      	ldr	r0, [r7, #12]
 800f2ca:	f000 f95f 	bl	800f58c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d102      	bne.n	800f2de <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f2d8:	68f8      	ldr	r0, [r7, #12]
 800f2da:	f002 f841 	bl	8011360 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f2de:	bf00      	nop
 800f2e0:	3710      	adds	r7, #16
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}

0800f2e6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f2e6:	b480      	push	{r7}
 800f2e8:	b085      	sub	sp, #20
 800f2ea:	af00      	add	r7, sp, #0
 800f2ec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d006      	beq.n	800f304 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f300:	60fb      	str	r3, [r7, #12]
 800f302:	e001      	b.n	800f308 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f304:	2300      	movs	r3, #0
 800f306:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f308:	68fb      	ldr	r3, [r7, #12]
	}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3714      	adds	r7, #20
 800f30e:	46bd      	mov	sp, r7
 800f310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f314:	4770      	bx	lr

0800f316 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f316:	b580      	push	{r7, lr}
 800f318:	b086      	sub	sp, #24
 800f31a:	af00      	add	r7, sp, #0
 800f31c:	60f8      	str	r0, [r7, #12]
 800f31e:	60b9      	str	r1, [r7, #8]
 800f320:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f322:	2300      	movs	r3, #0
 800f324:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f32a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f330:	2b00      	cmp	r3, #0
 800f332:	d10d      	bne.n	800f350 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d14d      	bne.n	800f3d8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	689b      	ldr	r3, [r3, #8]
 800f340:	4618      	mov	r0, r3
 800f342:	f001 f84f 	bl	80103e4 <xTaskPriorityDisinherit>
 800f346:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	2200      	movs	r2, #0
 800f34c:	609a      	str	r2, [r3, #8]
 800f34e:	e043      	b.n	800f3d8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d119      	bne.n	800f38a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	6858      	ldr	r0, [r3, #4]
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f35e:	461a      	mov	r2, r3
 800f360:	68b9      	ldr	r1, [r7, #8]
 800f362:	f019 fb11 	bl	8028988 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	685a      	ldr	r2, [r3, #4]
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f36e:	441a      	add	r2, r3
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	685a      	ldr	r2, [r3, #4]
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	689b      	ldr	r3, [r3, #8]
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d32b      	bcc.n	800f3d8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	681a      	ldr	r2, [r3, #0]
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	605a      	str	r2, [r3, #4]
 800f388:	e026      	b.n	800f3d8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	68d8      	ldr	r0, [r3, #12]
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f392:	461a      	mov	r2, r3
 800f394:	68b9      	ldr	r1, [r7, #8]
 800f396:	f019 faf7 	bl	8028988 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	68da      	ldr	r2, [r3, #12]
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3a2:	425b      	negs	r3, r3
 800f3a4:	441a      	add	r2, r3
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	68da      	ldr	r2, [r3, #12]
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	d207      	bcs.n	800f3c6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	689a      	ldr	r2, [r3, #8]
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3be:	425b      	negs	r3, r3
 800f3c0:	441a      	add	r2, r3
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2b02      	cmp	r3, #2
 800f3ca:	d105      	bne.n	800f3d8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d002      	beq.n	800f3d8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	3b01      	subs	r3, #1
 800f3d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	1c5a      	adds	r2, r3, #1
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f3e0:	697b      	ldr	r3, [r7, #20]
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3718      	adds	r7, #24
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}

0800f3ea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f3ea:	b580      	push	{r7, lr}
 800f3ec:	b082      	sub	sp, #8
 800f3ee:	af00      	add	r7, sp, #0
 800f3f0:	6078      	str	r0, [r7, #4]
 800f3f2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d018      	beq.n	800f42e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	68da      	ldr	r2, [r3, #12]
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f404:	441a      	add	r2, r3
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	68da      	ldr	r2, [r3, #12]
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	689b      	ldr	r3, [r3, #8]
 800f412:	429a      	cmp	r2, r3
 800f414:	d303      	bcc.n	800f41e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681a      	ldr	r2, [r3, #0]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	68d9      	ldr	r1, [r3, #12]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f426:	461a      	mov	r2, r3
 800f428:	6838      	ldr	r0, [r7, #0]
 800f42a:	f019 faad 	bl	8028988 <memcpy>
	}
}
 800f42e:	bf00      	nop
 800f430:	3708      	adds	r7, #8
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f436:	b580      	push	{r7, lr}
 800f438:	b084      	sub	sp, #16
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f43e:	f001 fda1 	bl	8010f84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f448:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f44a:	e011      	b.n	800f470 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f450:	2b00      	cmp	r3, #0
 800f452:	d012      	beq.n	800f47a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	3324      	adds	r3, #36	; 0x24
 800f458:	4618      	mov	r0, r3
 800f45a:	f000 fd7b 	bl	800ff54 <xTaskRemoveFromEventList>
 800f45e:	4603      	mov	r3, r0
 800f460:	2b00      	cmp	r3, #0
 800f462:	d001      	beq.n	800f468 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f464:	f000 fe52 	bl	801010c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f468:	7bfb      	ldrb	r3, [r7, #15]
 800f46a:	3b01      	subs	r3, #1
 800f46c:	b2db      	uxtb	r3, r3
 800f46e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f474:	2b00      	cmp	r3, #0
 800f476:	dce9      	bgt.n	800f44c <prvUnlockQueue+0x16>
 800f478:	e000      	b.n	800f47c <prvUnlockQueue+0x46>
					break;
 800f47a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	22ff      	movs	r2, #255	; 0xff
 800f480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f484:	f001 fdae 	bl	8010fe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f488:	f001 fd7c 	bl	8010f84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f492:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f494:	e011      	b.n	800f4ba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	691b      	ldr	r3, [r3, #16]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d012      	beq.n	800f4c4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	3310      	adds	r3, #16
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f000 fd56 	bl	800ff54 <xTaskRemoveFromEventList>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d001      	beq.n	800f4b2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f4ae:	f000 fe2d 	bl	801010c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f4b2:	7bbb      	ldrb	r3, [r7, #14]
 800f4b4:	3b01      	subs	r3, #1
 800f4b6:	b2db      	uxtb	r3, r3
 800f4b8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	dce9      	bgt.n	800f496 <prvUnlockQueue+0x60>
 800f4c2:	e000      	b.n	800f4c6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f4c4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	22ff      	movs	r2, #255	; 0xff
 800f4ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f4ce:	f001 fd89 	bl	8010fe4 <vPortExitCritical>
}
 800f4d2:	bf00      	nop
 800f4d4:	3710      	adds	r7, #16
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}

0800f4da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f4da:	b580      	push	{r7, lr}
 800f4dc:	b084      	sub	sp, #16
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f4e2:	f001 fd4f 	bl	8010f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d102      	bne.n	800f4f4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	60fb      	str	r3, [r7, #12]
 800f4f2:	e001      	b.n	800f4f8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f4f8:	f001 fd74 	bl	8010fe4 <vPortExitCritical>

	return xReturn;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3710      	adds	r7, #16
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}

0800f506 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f506:	b580      	push	{r7, lr}
 800f508:	b084      	sub	sp, #16
 800f50a:	af00      	add	r7, sp, #0
 800f50c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f50e:	f001 fd39 	bl	8010f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d102      	bne.n	800f524 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f51e:	2301      	movs	r3, #1
 800f520:	60fb      	str	r3, [r7, #12]
 800f522:	e001      	b.n	800f528 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f524:	2300      	movs	r3, #0
 800f526:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f528:	f001 fd5c 	bl	8010fe4 <vPortExitCritical>

	return xReturn;
 800f52c:	68fb      	ldr	r3, [r7, #12]
}
 800f52e:	4618      	mov	r0, r3
 800f530:	3710      	adds	r7, #16
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
	...

0800f538 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f538:	b480      	push	{r7}
 800f53a:	b085      	sub	sp, #20
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f542:	2300      	movs	r3, #0
 800f544:	60fb      	str	r3, [r7, #12]
 800f546:	e014      	b.n	800f572 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f548:	4a0f      	ldr	r2, [pc, #60]	; (800f588 <vQueueAddToRegistry+0x50>)
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d10b      	bne.n	800f56c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f554:	490c      	ldr	r1, [pc, #48]	; (800f588 <vQueueAddToRegistry+0x50>)
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	683a      	ldr	r2, [r7, #0]
 800f55a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f55e:	4a0a      	ldr	r2, [pc, #40]	; (800f588 <vQueueAddToRegistry+0x50>)
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	00db      	lsls	r3, r3, #3
 800f564:	4413      	add	r3, r2
 800f566:	687a      	ldr	r2, [r7, #4]
 800f568:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f56a:	e006      	b.n	800f57a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	3301      	adds	r3, #1
 800f570:	60fb      	str	r3, [r7, #12]
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	2b07      	cmp	r3, #7
 800f576:	d9e7      	bls.n	800f548 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f578:	bf00      	nop
 800f57a:	bf00      	nop
 800f57c:	3714      	adds	r7, #20
 800f57e:	46bd      	mov	sp, r7
 800f580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f584:	4770      	bx	lr
 800f586:	bf00      	nop
 800f588:	20000fb8 	.word	0x20000fb8

0800f58c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f58c:	b480      	push	{r7}
 800f58e:	b085      	sub	sp, #20
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f594:	2300      	movs	r3, #0
 800f596:	60fb      	str	r3, [r7, #12]
 800f598:	e016      	b.n	800f5c8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f59a:	4a10      	ldr	r2, [pc, #64]	; (800f5dc <vQueueUnregisterQueue+0x50>)
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	00db      	lsls	r3, r3, #3
 800f5a0:	4413      	add	r3, r2
 800f5a2:	685b      	ldr	r3, [r3, #4]
 800f5a4:	687a      	ldr	r2, [r7, #4]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d10b      	bne.n	800f5c2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f5aa:	4a0c      	ldr	r2, [pc, #48]	; (800f5dc <vQueueUnregisterQueue+0x50>)
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2100      	movs	r1, #0
 800f5b0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f5b4:	4a09      	ldr	r2, [pc, #36]	; (800f5dc <vQueueUnregisterQueue+0x50>)
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	00db      	lsls	r3, r3, #3
 800f5ba:	4413      	add	r3, r2
 800f5bc:	2200      	movs	r2, #0
 800f5be:	605a      	str	r2, [r3, #4]
				break;
 800f5c0:	e006      	b.n	800f5d0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	3301      	adds	r3, #1
 800f5c6:	60fb      	str	r3, [r7, #12]
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	2b07      	cmp	r3, #7
 800f5cc:	d9e5      	bls.n	800f59a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f5ce:	bf00      	nop
 800f5d0:	bf00      	nop
 800f5d2:	3714      	adds	r7, #20
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5da:	4770      	bx	lr
 800f5dc:	20000fb8 	.word	0x20000fb8

0800f5e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b086      	sub	sp, #24
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	60f8      	str	r0, [r7, #12]
 800f5e8:	60b9      	str	r1, [r7, #8]
 800f5ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f5f0:	f001 fcc8 	bl	8010f84 <vPortEnterCritical>
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f5fa:	b25b      	sxtb	r3, r3
 800f5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f600:	d103      	bne.n	800f60a <vQueueWaitForMessageRestricted+0x2a>
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	2200      	movs	r2, #0
 800f606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f610:	b25b      	sxtb	r3, r3
 800f612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f616:	d103      	bne.n	800f620 <vQueueWaitForMessageRestricted+0x40>
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	2200      	movs	r2, #0
 800f61c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f620:	f001 fce0 	bl	8010fe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d106      	bne.n	800f63a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	3324      	adds	r3, #36	; 0x24
 800f630:	687a      	ldr	r2, [r7, #4]
 800f632:	68b9      	ldr	r1, [r7, #8]
 800f634:	4618      	mov	r0, r3
 800f636:	f000 fc61 	bl	800fefc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f63a:	6978      	ldr	r0, [r7, #20]
 800f63c:	f7ff fefb 	bl	800f436 <prvUnlockQueue>
	}
 800f640:	bf00      	nop
 800f642:	3718      	adds	r7, #24
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b08e      	sub	sp, #56	; 0x38
 800f64c:	af04      	add	r7, sp, #16
 800f64e:	60f8      	str	r0, [r7, #12]
 800f650:	60b9      	str	r1, [r7, #8]
 800f652:	607a      	str	r2, [r7, #4]
 800f654:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d10a      	bne.n	800f672 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f660:	f383 8811 	msr	BASEPRI, r3
 800f664:	f3bf 8f6f 	isb	sy
 800f668:	f3bf 8f4f 	dsb	sy
 800f66c:	623b      	str	r3, [r7, #32]
}
 800f66e:	bf00      	nop
 800f670:	e7fe      	b.n	800f670 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f674:	2b00      	cmp	r3, #0
 800f676:	d10a      	bne.n	800f68e <xTaskCreateStatic+0x46>
	__asm volatile
 800f678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f67c:	f383 8811 	msr	BASEPRI, r3
 800f680:	f3bf 8f6f 	isb	sy
 800f684:	f3bf 8f4f 	dsb	sy
 800f688:	61fb      	str	r3, [r7, #28]
}
 800f68a:	bf00      	nop
 800f68c:	e7fe      	b.n	800f68c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f68e:	23bc      	movs	r3, #188	; 0xbc
 800f690:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	2bbc      	cmp	r3, #188	; 0xbc
 800f696:	d00a      	beq.n	800f6ae <xTaskCreateStatic+0x66>
	__asm volatile
 800f698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f69c:	f383 8811 	msr	BASEPRI, r3
 800f6a0:	f3bf 8f6f 	isb	sy
 800f6a4:	f3bf 8f4f 	dsb	sy
 800f6a8:	61bb      	str	r3, [r7, #24]
}
 800f6aa:	bf00      	nop
 800f6ac:	e7fe      	b.n	800f6ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f6ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d01e      	beq.n	800f6f4 <xTaskCreateStatic+0xac>
 800f6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d01b      	beq.n	800f6f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c8:	2202      	movs	r2, #2
 800f6ca:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	9303      	str	r3, [sp, #12]
 800f6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d4:	9302      	str	r3, [sp, #8]
 800f6d6:	f107 0314 	add.w	r3, r7, #20
 800f6da:	9301      	str	r3, [sp, #4]
 800f6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6de:	9300      	str	r3, [sp, #0]
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	687a      	ldr	r2, [r7, #4]
 800f6e4:	68b9      	ldr	r1, [r7, #8]
 800f6e6:	68f8      	ldr	r0, [r7, #12]
 800f6e8:	f000 f850 	bl	800f78c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f6ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f6ee:	f000 f8f3 	bl	800f8d8 <prvAddNewTaskToReadyList>
 800f6f2:	e001      	b.n	800f6f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f6f8:	697b      	ldr	r3, [r7, #20]
	}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3728      	adds	r7, #40	; 0x28
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}

0800f702 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f702:	b580      	push	{r7, lr}
 800f704:	b08c      	sub	sp, #48	; 0x30
 800f706:	af04      	add	r7, sp, #16
 800f708:	60f8      	str	r0, [r7, #12]
 800f70a:	60b9      	str	r1, [r7, #8]
 800f70c:	603b      	str	r3, [r7, #0]
 800f70e:	4613      	mov	r3, r2
 800f710:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f712:	88fb      	ldrh	r3, [r7, #6]
 800f714:	009b      	lsls	r3, r3, #2
 800f716:	4618      	mov	r0, r3
 800f718:	f001 fd56 	bl	80111c8 <pvPortMalloc>
 800f71c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d00e      	beq.n	800f742 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f724:	20bc      	movs	r0, #188	; 0xbc
 800f726:	f001 fd4f 	bl	80111c8 <pvPortMalloc>
 800f72a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d003      	beq.n	800f73a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f732:	69fb      	ldr	r3, [r7, #28]
 800f734:	697a      	ldr	r2, [r7, #20]
 800f736:	631a      	str	r2, [r3, #48]	; 0x30
 800f738:	e005      	b.n	800f746 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f73a:	6978      	ldr	r0, [r7, #20]
 800f73c:	f001 fe10 	bl	8011360 <vPortFree>
 800f740:	e001      	b.n	800f746 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f742:	2300      	movs	r3, #0
 800f744:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f746:	69fb      	ldr	r3, [r7, #28]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d017      	beq.n	800f77c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f74c:	69fb      	ldr	r3, [r7, #28]
 800f74e:	2200      	movs	r2, #0
 800f750:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f754:	88fa      	ldrh	r2, [r7, #6]
 800f756:	2300      	movs	r3, #0
 800f758:	9303      	str	r3, [sp, #12]
 800f75a:	69fb      	ldr	r3, [r7, #28]
 800f75c:	9302      	str	r3, [sp, #8]
 800f75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f760:	9301      	str	r3, [sp, #4]
 800f762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f764:	9300      	str	r3, [sp, #0]
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	68b9      	ldr	r1, [r7, #8]
 800f76a:	68f8      	ldr	r0, [r7, #12]
 800f76c:	f000 f80e 	bl	800f78c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f770:	69f8      	ldr	r0, [r7, #28]
 800f772:	f000 f8b1 	bl	800f8d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f776:	2301      	movs	r3, #1
 800f778:	61bb      	str	r3, [r7, #24]
 800f77a:	e002      	b.n	800f782 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f77c:	f04f 33ff 	mov.w	r3, #4294967295
 800f780:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f782:	69bb      	ldr	r3, [r7, #24]
	}
 800f784:	4618      	mov	r0, r3
 800f786:	3720      	adds	r7, #32
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}

0800f78c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b088      	sub	sp, #32
 800f790:	af00      	add	r7, sp, #0
 800f792:	60f8      	str	r0, [r7, #12]
 800f794:	60b9      	str	r1, [r7, #8]
 800f796:	607a      	str	r2, [r7, #4]
 800f798:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	009b      	lsls	r3, r3, #2
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	21a5      	movs	r1, #165	; 0xa5
 800f7a6:	f019 f8fd 	bl	80289a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7ae:	6879      	ldr	r1, [r7, #4]
 800f7b0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f7b4:	440b      	add	r3, r1
 800f7b6:	009b      	lsls	r3, r3, #2
 800f7b8:	4413      	add	r3, r2
 800f7ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f7bc:	69bb      	ldr	r3, [r7, #24]
 800f7be:	f023 0307 	bic.w	r3, r3, #7
 800f7c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f7c4:	69bb      	ldr	r3, [r7, #24]
 800f7c6:	f003 0307 	and.w	r3, r3, #7
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d00a      	beq.n	800f7e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d2:	f383 8811 	msr	BASEPRI, r3
 800f7d6:	f3bf 8f6f 	isb	sy
 800f7da:	f3bf 8f4f 	dsb	sy
 800f7de:	617b      	str	r3, [r7, #20]
}
 800f7e0:	bf00      	nop
 800f7e2:	e7fe      	b.n	800f7e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d01f      	beq.n	800f82a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	61fb      	str	r3, [r7, #28]
 800f7ee:	e012      	b.n	800f816 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f7f0:	68ba      	ldr	r2, [r7, #8]
 800f7f2:	69fb      	ldr	r3, [r7, #28]
 800f7f4:	4413      	add	r3, r2
 800f7f6:	7819      	ldrb	r1, [r3, #0]
 800f7f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7fa:	69fb      	ldr	r3, [r7, #28]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	3334      	adds	r3, #52	; 0x34
 800f800:	460a      	mov	r2, r1
 800f802:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f804:	68ba      	ldr	r2, [r7, #8]
 800f806:	69fb      	ldr	r3, [r7, #28]
 800f808:	4413      	add	r3, r2
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d006      	beq.n	800f81e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	3301      	adds	r3, #1
 800f814:	61fb      	str	r3, [r7, #28]
 800f816:	69fb      	ldr	r3, [r7, #28]
 800f818:	2b0f      	cmp	r3, #15
 800f81a:	d9e9      	bls.n	800f7f0 <prvInitialiseNewTask+0x64>
 800f81c:	e000      	b.n	800f820 <prvInitialiseNewTask+0x94>
			{
				break;
 800f81e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f822:	2200      	movs	r2, #0
 800f824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f828:	e003      	b.n	800f832 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82c:	2200      	movs	r2, #0
 800f82e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f834:	2b37      	cmp	r3, #55	; 0x37
 800f836:	d901      	bls.n	800f83c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f838:	2337      	movs	r3, #55	; 0x37
 800f83a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f83e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f840:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f846:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f84a:	2200      	movs	r2, #0
 800f84c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f850:	3304      	adds	r3, #4
 800f852:	4618      	mov	r0, r3
 800f854:	f7fe fe56 	bl	800e504 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f85a:	3318      	adds	r3, #24
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7fe fe51 	bl	800e504 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f866:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f86a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f870:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f876:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f87a:	2200      	movs	r2, #0
 800f87c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f882:	2200      	movs	r2, #0
 800f884:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f88a:	3354      	adds	r3, #84	; 0x54
 800f88c:	2260      	movs	r2, #96	; 0x60
 800f88e:	2100      	movs	r1, #0
 800f890:	4618      	mov	r0, r3
 800f892:	f019 f887 	bl	80289a4 <memset>
 800f896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f898:	4a0c      	ldr	r2, [pc, #48]	; (800f8cc <prvInitialiseNewTask+0x140>)
 800f89a:	659a      	str	r2, [r3, #88]	; 0x58
 800f89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89e:	4a0c      	ldr	r2, [pc, #48]	; (800f8d0 <prvInitialiseNewTask+0x144>)
 800f8a0:	65da      	str	r2, [r3, #92]	; 0x5c
 800f8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a4:	4a0b      	ldr	r2, [pc, #44]	; (800f8d4 <prvInitialiseNewTask+0x148>)
 800f8a6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f8a8:	683a      	ldr	r2, [r7, #0]
 800f8aa:	68f9      	ldr	r1, [r7, #12]
 800f8ac:	69b8      	ldr	r0, [r7, #24]
 800f8ae:	f001 fa3f 	bl	8010d30 <pxPortInitialiseStack>
 800f8b2:	4602      	mov	r2, r0
 800f8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d002      	beq.n	800f8c4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8c4:	bf00      	nop
 800f8c6:	3720      	adds	r7, #32
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}
 800f8cc:	0802d76c 	.word	0x0802d76c
 800f8d0:	0802d78c 	.word	0x0802d78c
 800f8d4:	0802d74c 	.word	0x0802d74c

0800f8d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f8e0:	f001 fb50 	bl	8010f84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f8e4:	4b2d      	ldr	r3, [pc, #180]	; (800f99c <prvAddNewTaskToReadyList+0xc4>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	4a2c      	ldr	r2, [pc, #176]	; (800f99c <prvAddNewTaskToReadyList+0xc4>)
 800f8ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f8ee:	4b2c      	ldr	r3, [pc, #176]	; (800f9a0 <prvAddNewTaskToReadyList+0xc8>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d109      	bne.n	800f90a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f8f6:	4a2a      	ldr	r2, [pc, #168]	; (800f9a0 <prvAddNewTaskToReadyList+0xc8>)
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f8fc:	4b27      	ldr	r3, [pc, #156]	; (800f99c <prvAddNewTaskToReadyList+0xc4>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	2b01      	cmp	r3, #1
 800f902:	d110      	bne.n	800f926 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f904:	f000 fc26 	bl	8010154 <prvInitialiseTaskLists>
 800f908:	e00d      	b.n	800f926 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f90a:	4b26      	ldr	r3, [pc, #152]	; (800f9a4 <prvAddNewTaskToReadyList+0xcc>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d109      	bne.n	800f926 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f912:	4b23      	ldr	r3, [pc, #140]	; (800f9a0 <prvAddNewTaskToReadyList+0xc8>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d802      	bhi.n	800f926 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f920:	4a1f      	ldr	r2, [pc, #124]	; (800f9a0 <prvAddNewTaskToReadyList+0xc8>)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f926:	4b20      	ldr	r3, [pc, #128]	; (800f9a8 <prvAddNewTaskToReadyList+0xd0>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	3301      	adds	r3, #1
 800f92c:	4a1e      	ldr	r2, [pc, #120]	; (800f9a8 <prvAddNewTaskToReadyList+0xd0>)
 800f92e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f930:	4b1d      	ldr	r3, [pc, #116]	; (800f9a8 <prvAddNewTaskToReadyList+0xd0>)
 800f932:	681a      	ldr	r2, [r3, #0]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f93c:	4b1b      	ldr	r3, [pc, #108]	; (800f9ac <prvAddNewTaskToReadyList+0xd4>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	429a      	cmp	r2, r3
 800f942:	d903      	bls.n	800f94c <prvAddNewTaskToReadyList+0x74>
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f948:	4a18      	ldr	r2, [pc, #96]	; (800f9ac <prvAddNewTaskToReadyList+0xd4>)
 800f94a:	6013      	str	r3, [r2, #0]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f950:	4613      	mov	r3, r2
 800f952:	009b      	lsls	r3, r3, #2
 800f954:	4413      	add	r3, r2
 800f956:	009b      	lsls	r3, r3, #2
 800f958:	4a15      	ldr	r2, [pc, #84]	; (800f9b0 <prvAddNewTaskToReadyList+0xd8>)
 800f95a:	441a      	add	r2, r3
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	3304      	adds	r3, #4
 800f960:	4619      	mov	r1, r3
 800f962:	4610      	mov	r0, r2
 800f964:	f7fe fddb 	bl	800e51e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f968:	f001 fb3c 	bl	8010fe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f96c:	4b0d      	ldr	r3, [pc, #52]	; (800f9a4 <prvAddNewTaskToReadyList+0xcc>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d00e      	beq.n	800f992 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f974:	4b0a      	ldr	r3, [pc, #40]	; (800f9a0 <prvAddNewTaskToReadyList+0xc8>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f97e:	429a      	cmp	r2, r3
 800f980:	d207      	bcs.n	800f992 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f982:	4b0c      	ldr	r3, [pc, #48]	; (800f9b4 <prvAddNewTaskToReadyList+0xdc>)
 800f984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f988:	601a      	str	r2, [r3, #0]
 800f98a:	f3bf 8f4f 	dsb	sy
 800f98e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f992:	bf00      	nop
 800f994:	3708      	adds	r7, #8
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
 800f99a:	bf00      	nop
 800f99c:	200014cc 	.word	0x200014cc
 800f9a0:	20000ff8 	.word	0x20000ff8
 800f9a4:	200014d8 	.word	0x200014d8
 800f9a8:	200014e8 	.word	0x200014e8
 800f9ac:	200014d4 	.word	0x200014d4
 800f9b0:	20000ffc 	.word	0x20000ffc
 800f9b4:	e000ed04 	.word	0xe000ed04

0800f9b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b084      	sub	sp, #16
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d017      	beq.n	800f9fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f9ca:	4b13      	ldr	r3, [pc, #76]	; (800fa18 <vTaskDelay+0x60>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d00a      	beq.n	800f9e8 <vTaskDelay+0x30>
	__asm volatile
 800f9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d6:	f383 8811 	msr	BASEPRI, r3
 800f9da:	f3bf 8f6f 	isb	sy
 800f9de:	f3bf 8f4f 	dsb	sy
 800f9e2:	60bb      	str	r3, [r7, #8]
}
 800f9e4:	bf00      	nop
 800f9e6:	e7fe      	b.n	800f9e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f9e8:	f000 f88a 	bl	800fb00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f9ec:	2100      	movs	r1, #0
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f000 fdfc 	bl	80105ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f9f4:	f000 f892 	bl	800fb1c <xTaskResumeAll>
 800f9f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d107      	bne.n	800fa10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fa00:	4b06      	ldr	r3, [pc, #24]	; (800fa1c <vTaskDelay+0x64>)
 800fa02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa06:	601a      	str	r2, [r3, #0]
 800fa08:	f3bf 8f4f 	dsb	sy
 800fa0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa10:	bf00      	nop
 800fa12:	3710      	adds	r7, #16
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}
 800fa18:	200014f4 	.word	0x200014f4
 800fa1c:	e000ed04 	.word	0xe000ed04

0800fa20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b08a      	sub	sp, #40	; 0x28
 800fa24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fa26:	2300      	movs	r3, #0
 800fa28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fa2e:	463a      	mov	r2, r7
 800fa30:	1d39      	adds	r1, r7, #4
 800fa32:	f107 0308 	add.w	r3, r7, #8
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7fe fd10 	bl	800e45c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fa3c:	6839      	ldr	r1, [r7, #0]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	68ba      	ldr	r2, [r7, #8]
 800fa42:	9202      	str	r2, [sp, #8]
 800fa44:	9301      	str	r3, [sp, #4]
 800fa46:	2300      	movs	r3, #0
 800fa48:	9300      	str	r3, [sp, #0]
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	460a      	mov	r2, r1
 800fa4e:	4924      	ldr	r1, [pc, #144]	; (800fae0 <vTaskStartScheduler+0xc0>)
 800fa50:	4824      	ldr	r0, [pc, #144]	; (800fae4 <vTaskStartScheduler+0xc4>)
 800fa52:	f7ff fdf9 	bl	800f648 <xTaskCreateStatic>
 800fa56:	4603      	mov	r3, r0
 800fa58:	4a23      	ldr	r2, [pc, #140]	; (800fae8 <vTaskStartScheduler+0xc8>)
 800fa5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fa5c:	4b22      	ldr	r3, [pc, #136]	; (800fae8 <vTaskStartScheduler+0xc8>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d002      	beq.n	800fa6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fa64:	2301      	movs	r3, #1
 800fa66:	617b      	str	r3, [r7, #20]
 800fa68:	e001      	b.n	800fa6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fa6e:	697b      	ldr	r3, [r7, #20]
 800fa70:	2b01      	cmp	r3, #1
 800fa72:	d102      	bne.n	800fa7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fa74:	f000 fe0e 	bl	8010694 <xTimerCreateTimerTask>
 800fa78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	2b01      	cmp	r3, #1
 800fa7e:	d11b      	bne.n	800fab8 <vTaskStartScheduler+0x98>
	__asm volatile
 800fa80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa84:	f383 8811 	msr	BASEPRI, r3
 800fa88:	f3bf 8f6f 	isb	sy
 800fa8c:	f3bf 8f4f 	dsb	sy
 800fa90:	613b      	str	r3, [r7, #16]
}
 800fa92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa94:	4b15      	ldr	r3, [pc, #84]	; (800faec <vTaskStartScheduler+0xcc>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	3354      	adds	r3, #84	; 0x54
 800fa9a:	4a15      	ldr	r2, [pc, #84]	; (800faf0 <vTaskStartScheduler+0xd0>)
 800fa9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fa9e:	4b15      	ldr	r3, [pc, #84]	; (800faf4 <vTaskStartScheduler+0xd4>)
 800faa0:	f04f 32ff 	mov.w	r2, #4294967295
 800faa4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800faa6:	4b14      	ldr	r3, [pc, #80]	; (800faf8 <vTaskStartScheduler+0xd8>)
 800faa8:	2201      	movs	r2, #1
 800faaa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800faac:	4b13      	ldr	r3, [pc, #76]	; (800fafc <vTaskStartScheduler+0xdc>)
 800faae:	2200      	movs	r2, #0
 800fab0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fab2:	f001 f9c5 	bl	8010e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fab6:	e00e      	b.n	800fad6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fabe:	d10a      	bne.n	800fad6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800fac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac4:	f383 8811 	msr	BASEPRI, r3
 800fac8:	f3bf 8f6f 	isb	sy
 800facc:	f3bf 8f4f 	dsb	sy
 800fad0:	60fb      	str	r3, [r7, #12]
}
 800fad2:	bf00      	nop
 800fad4:	e7fe      	b.n	800fad4 <vTaskStartScheduler+0xb4>
}
 800fad6:	bf00      	nop
 800fad8:	3718      	adds	r7, #24
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}
 800fade:	bf00      	nop
 800fae0:	08029918 	.word	0x08029918
 800fae4:	08010125 	.word	0x08010125
 800fae8:	200014f0 	.word	0x200014f0
 800faec:	20000ff8 	.word	0x20000ff8
 800faf0:	200001ec 	.word	0x200001ec
 800faf4:	200014ec 	.word	0x200014ec
 800faf8:	200014d8 	.word	0x200014d8
 800fafc:	200014d0 	.word	0x200014d0

0800fb00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fb00:	b480      	push	{r7}
 800fb02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fb04:	4b04      	ldr	r3, [pc, #16]	; (800fb18 <vTaskSuspendAll+0x18>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	4a03      	ldr	r2, [pc, #12]	; (800fb18 <vTaskSuspendAll+0x18>)
 800fb0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fb0e:	bf00      	nop
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr
 800fb18:	200014f4 	.word	0x200014f4

0800fb1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b084      	sub	sp, #16
 800fb20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fb22:	2300      	movs	r3, #0
 800fb24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fb26:	2300      	movs	r3, #0
 800fb28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fb2a:	4b42      	ldr	r3, [pc, #264]	; (800fc34 <xTaskResumeAll+0x118>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d10a      	bne.n	800fb48 <xTaskResumeAll+0x2c>
	__asm volatile
 800fb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb36:	f383 8811 	msr	BASEPRI, r3
 800fb3a:	f3bf 8f6f 	isb	sy
 800fb3e:	f3bf 8f4f 	dsb	sy
 800fb42:	603b      	str	r3, [r7, #0]
}
 800fb44:	bf00      	nop
 800fb46:	e7fe      	b.n	800fb46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fb48:	f001 fa1c 	bl	8010f84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fb4c:	4b39      	ldr	r3, [pc, #228]	; (800fc34 <xTaskResumeAll+0x118>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	3b01      	subs	r3, #1
 800fb52:	4a38      	ldr	r2, [pc, #224]	; (800fc34 <xTaskResumeAll+0x118>)
 800fb54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb56:	4b37      	ldr	r3, [pc, #220]	; (800fc34 <xTaskResumeAll+0x118>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d162      	bne.n	800fc24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fb5e:	4b36      	ldr	r3, [pc, #216]	; (800fc38 <xTaskResumeAll+0x11c>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d05e      	beq.n	800fc24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb66:	e02f      	b.n	800fbc8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb68:	4b34      	ldr	r3, [pc, #208]	; (800fc3c <xTaskResumeAll+0x120>)
 800fb6a:	68db      	ldr	r3, [r3, #12]
 800fb6c:	68db      	ldr	r3, [r3, #12]
 800fb6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	3318      	adds	r3, #24
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7fe fd2f 	bl	800e5d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	3304      	adds	r3, #4
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7fe fd2a 	bl	800e5d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb88:	4b2d      	ldr	r3, [pc, #180]	; (800fc40 <xTaskResumeAll+0x124>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d903      	bls.n	800fb98 <xTaskResumeAll+0x7c>
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb94:	4a2a      	ldr	r2, [pc, #168]	; (800fc40 <xTaskResumeAll+0x124>)
 800fb96:	6013      	str	r3, [r2, #0]
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb9c:	4613      	mov	r3, r2
 800fb9e:	009b      	lsls	r3, r3, #2
 800fba0:	4413      	add	r3, r2
 800fba2:	009b      	lsls	r3, r3, #2
 800fba4:	4a27      	ldr	r2, [pc, #156]	; (800fc44 <xTaskResumeAll+0x128>)
 800fba6:	441a      	add	r2, r3
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	3304      	adds	r3, #4
 800fbac:	4619      	mov	r1, r3
 800fbae:	4610      	mov	r0, r2
 800fbb0:	f7fe fcb5 	bl	800e51e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbb8:	4b23      	ldr	r3, [pc, #140]	; (800fc48 <xTaskResumeAll+0x12c>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d302      	bcc.n	800fbc8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800fbc2:	4b22      	ldr	r3, [pc, #136]	; (800fc4c <xTaskResumeAll+0x130>)
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fbc8:	4b1c      	ldr	r3, [pc, #112]	; (800fc3c <xTaskResumeAll+0x120>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d1cb      	bne.n	800fb68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d001      	beq.n	800fbda <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fbd6:	f000 fb5f 	bl	8010298 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fbda:	4b1d      	ldr	r3, [pc, #116]	; (800fc50 <xTaskResumeAll+0x134>)
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d010      	beq.n	800fc08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fbe6:	f000 f847 	bl	800fc78 <xTaskIncrementTick>
 800fbea:	4603      	mov	r3, r0
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d002      	beq.n	800fbf6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fbf0:	4b16      	ldr	r3, [pc, #88]	; (800fc4c <xTaskResumeAll+0x130>)
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	3b01      	subs	r3, #1
 800fbfa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d1f1      	bne.n	800fbe6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fc02:	4b13      	ldr	r3, [pc, #76]	; (800fc50 <xTaskResumeAll+0x134>)
 800fc04:	2200      	movs	r2, #0
 800fc06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fc08:	4b10      	ldr	r3, [pc, #64]	; (800fc4c <xTaskResumeAll+0x130>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d009      	beq.n	800fc24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fc10:	2301      	movs	r3, #1
 800fc12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fc14:	4b0f      	ldr	r3, [pc, #60]	; (800fc54 <xTaskResumeAll+0x138>)
 800fc16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc1a:	601a      	str	r2, [r3, #0]
 800fc1c:	f3bf 8f4f 	dsb	sy
 800fc20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc24:	f001 f9de 	bl	8010fe4 <vPortExitCritical>

	return xAlreadyYielded;
 800fc28:	68bb      	ldr	r3, [r7, #8]
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3710      	adds	r7, #16
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop
 800fc34:	200014f4 	.word	0x200014f4
 800fc38:	200014cc 	.word	0x200014cc
 800fc3c:	2000148c 	.word	0x2000148c
 800fc40:	200014d4 	.word	0x200014d4
 800fc44:	20000ffc 	.word	0x20000ffc
 800fc48:	20000ff8 	.word	0x20000ff8
 800fc4c:	200014e0 	.word	0x200014e0
 800fc50:	200014dc 	.word	0x200014dc
 800fc54:	e000ed04 	.word	0xe000ed04

0800fc58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b083      	sub	sp, #12
 800fc5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fc5e:	4b05      	ldr	r3, [pc, #20]	; (800fc74 <xTaskGetTickCount+0x1c>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fc64:	687b      	ldr	r3, [r7, #4]
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	370c      	adds	r7, #12
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc70:	4770      	bx	lr
 800fc72:	bf00      	nop
 800fc74:	200014d0 	.word	0x200014d0

0800fc78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b086      	sub	sp, #24
 800fc7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc82:	4b4f      	ldr	r3, [pc, #316]	; (800fdc0 <xTaskIncrementTick+0x148>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	f040 808f 	bne.w	800fdaa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fc8c:	4b4d      	ldr	r3, [pc, #308]	; (800fdc4 <xTaskIncrementTick+0x14c>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	3301      	adds	r3, #1
 800fc92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fc94:	4a4b      	ldr	r2, [pc, #300]	; (800fdc4 <xTaskIncrementTick+0x14c>)
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fc9a:	693b      	ldr	r3, [r7, #16]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d120      	bne.n	800fce2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fca0:	4b49      	ldr	r3, [pc, #292]	; (800fdc8 <xTaskIncrementTick+0x150>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d00a      	beq.n	800fcc0 <xTaskIncrementTick+0x48>
	__asm volatile
 800fcaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcae:	f383 8811 	msr	BASEPRI, r3
 800fcb2:	f3bf 8f6f 	isb	sy
 800fcb6:	f3bf 8f4f 	dsb	sy
 800fcba:	603b      	str	r3, [r7, #0]
}
 800fcbc:	bf00      	nop
 800fcbe:	e7fe      	b.n	800fcbe <xTaskIncrementTick+0x46>
 800fcc0:	4b41      	ldr	r3, [pc, #260]	; (800fdc8 <xTaskIncrementTick+0x150>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	60fb      	str	r3, [r7, #12]
 800fcc6:	4b41      	ldr	r3, [pc, #260]	; (800fdcc <xTaskIncrementTick+0x154>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	4a3f      	ldr	r2, [pc, #252]	; (800fdc8 <xTaskIncrementTick+0x150>)
 800fccc:	6013      	str	r3, [r2, #0]
 800fcce:	4a3f      	ldr	r2, [pc, #252]	; (800fdcc <xTaskIncrementTick+0x154>)
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	6013      	str	r3, [r2, #0]
 800fcd4:	4b3e      	ldr	r3, [pc, #248]	; (800fdd0 <xTaskIncrementTick+0x158>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	3301      	adds	r3, #1
 800fcda:	4a3d      	ldr	r2, [pc, #244]	; (800fdd0 <xTaskIncrementTick+0x158>)
 800fcdc:	6013      	str	r3, [r2, #0]
 800fcde:	f000 fadb 	bl	8010298 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fce2:	4b3c      	ldr	r3, [pc, #240]	; (800fdd4 <xTaskIncrementTick+0x15c>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	693a      	ldr	r2, [r7, #16]
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d349      	bcc.n	800fd80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fcec:	4b36      	ldr	r3, [pc, #216]	; (800fdc8 <xTaskIncrementTick+0x150>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d104      	bne.n	800fd00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcf6:	4b37      	ldr	r3, [pc, #220]	; (800fdd4 <xTaskIncrementTick+0x15c>)
 800fcf8:	f04f 32ff 	mov.w	r2, #4294967295
 800fcfc:	601a      	str	r2, [r3, #0]
					break;
 800fcfe:	e03f      	b.n	800fd80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd00:	4b31      	ldr	r3, [pc, #196]	; (800fdc8 <xTaskIncrementTick+0x150>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	68db      	ldr	r3, [r3, #12]
 800fd06:	68db      	ldr	r3, [r3, #12]
 800fd08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fd0a:	68bb      	ldr	r3, [r7, #8]
 800fd0c:	685b      	ldr	r3, [r3, #4]
 800fd0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fd10:	693a      	ldr	r2, [r7, #16]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	429a      	cmp	r2, r3
 800fd16:	d203      	bcs.n	800fd20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fd18:	4a2e      	ldr	r2, [pc, #184]	; (800fdd4 <xTaskIncrementTick+0x15c>)
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fd1e:	e02f      	b.n	800fd80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	3304      	adds	r3, #4
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7fe fc57 	bl	800e5d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d004      	beq.n	800fd3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	3318      	adds	r3, #24
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7fe fc4e 	bl	800e5d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd40:	4b25      	ldr	r3, [pc, #148]	; (800fdd8 <xTaskIncrementTick+0x160>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	429a      	cmp	r2, r3
 800fd46:	d903      	bls.n	800fd50 <xTaskIncrementTick+0xd8>
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd4c:	4a22      	ldr	r2, [pc, #136]	; (800fdd8 <xTaskIncrementTick+0x160>)
 800fd4e:	6013      	str	r3, [r2, #0]
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd54:	4613      	mov	r3, r2
 800fd56:	009b      	lsls	r3, r3, #2
 800fd58:	4413      	add	r3, r2
 800fd5a:	009b      	lsls	r3, r3, #2
 800fd5c:	4a1f      	ldr	r2, [pc, #124]	; (800fddc <xTaskIncrementTick+0x164>)
 800fd5e:	441a      	add	r2, r3
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	3304      	adds	r3, #4
 800fd64:	4619      	mov	r1, r3
 800fd66:	4610      	mov	r0, r2
 800fd68:	f7fe fbd9 	bl	800e51e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd70:	4b1b      	ldr	r3, [pc, #108]	; (800fde0 <xTaskIncrementTick+0x168>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d3b8      	bcc.n	800fcec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd7e:	e7b5      	b.n	800fcec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fd80:	4b17      	ldr	r3, [pc, #92]	; (800fde0 <xTaskIncrementTick+0x168>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd86:	4915      	ldr	r1, [pc, #84]	; (800fddc <xTaskIncrementTick+0x164>)
 800fd88:	4613      	mov	r3, r2
 800fd8a:	009b      	lsls	r3, r3, #2
 800fd8c:	4413      	add	r3, r2
 800fd8e:	009b      	lsls	r3, r3, #2
 800fd90:	440b      	add	r3, r1
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	d901      	bls.n	800fd9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fd98:	2301      	movs	r3, #1
 800fd9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fd9c:	4b11      	ldr	r3, [pc, #68]	; (800fde4 <xTaskIncrementTick+0x16c>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d007      	beq.n	800fdb4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fda4:	2301      	movs	r3, #1
 800fda6:	617b      	str	r3, [r7, #20]
 800fda8:	e004      	b.n	800fdb4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fdaa:	4b0f      	ldr	r3, [pc, #60]	; (800fde8 <xTaskIncrementTick+0x170>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	3301      	adds	r3, #1
 800fdb0:	4a0d      	ldr	r2, [pc, #52]	; (800fde8 <xTaskIncrementTick+0x170>)
 800fdb2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fdb4:	697b      	ldr	r3, [r7, #20]
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3718      	adds	r7, #24
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	200014f4 	.word	0x200014f4
 800fdc4:	200014d0 	.word	0x200014d0
 800fdc8:	20001484 	.word	0x20001484
 800fdcc:	20001488 	.word	0x20001488
 800fdd0:	200014e4 	.word	0x200014e4
 800fdd4:	200014ec 	.word	0x200014ec
 800fdd8:	200014d4 	.word	0x200014d4
 800fddc:	20000ffc 	.word	0x20000ffc
 800fde0:	20000ff8 	.word	0x20000ff8
 800fde4:	200014e0 	.word	0x200014e0
 800fde8:	200014dc 	.word	0x200014dc

0800fdec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fdec:	b480      	push	{r7}
 800fdee:	b085      	sub	sp, #20
 800fdf0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fdf2:	4b2a      	ldr	r3, [pc, #168]	; (800fe9c <vTaskSwitchContext+0xb0>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d003      	beq.n	800fe02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fdfa:	4b29      	ldr	r3, [pc, #164]	; (800fea0 <vTaskSwitchContext+0xb4>)
 800fdfc:	2201      	movs	r2, #1
 800fdfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fe00:	e046      	b.n	800fe90 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800fe02:	4b27      	ldr	r3, [pc, #156]	; (800fea0 <vTaskSwitchContext+0xb4>)
 800fe04:	2200      	movs	r2, #0
 800fe06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe08:	4b26      	ldr	r3, [pc, #152]	; (800fea4 <vTaskSwitchContext+0xb8>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	60fb      	str	r3, [r7, #12]
 800fe0e:	e010      	b.n	800fe32 <vTaskSwitchContext+0x46>
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d10a      	bne.n	800fe2c <vTaskSwitchContext+0x40>
	__asm volatile
 800fe16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe1a:	f383 8811 	msr	BASEPRI, r3
 800fe1e:	f3bf 8f6f 	isb	sy
 800fe22:	f3bf 8f4f 	dsb	sy
 800fe26:	607b      	str	r3, [r7, #4]
}
 800fe28:	bf00      	nop
 800fe2a:	e7fe      	b.n	800fe2a <vTaskSwitchContext+0x3e>
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	3b01      	subs	r3, #1
 800fe30:	60fb      	str	r3, [r7, #12]
 800fe32:	491d      	ldr	r1, [pc, #116]	; (800fea8 <vTaskSwitchContext+0xbc>)
 800fe34:	68fa      	ldr	r2, [r7, #12]
 800fe36:	4613      	mov	r3, r2
 800fe38:	009b      	lsls	r3, r3, #2
 800fe3a:	4413      	add	r3, r2
 800fe3c:	009b      	lsls	r3, r3, #2
 800fe3e:	440b      	add	r3, r1
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d0e4      	beq.n	800fe10 <vTaskSwitchContext+0x24>
 800fe46:	68fa      	ldr	r2, [r7, #12]
 800fe48:	4613      	mov	r3, r2
 800fe4a:	009b      	lsls	r3, r3, #2
 800fe4c:	4413      	add	r3, r2
 800fe4e:	009b      	lsls	r3, r3, #2
 800fe50:	4a15      	ldr	r2, [pc, #84]	; (800fea8 <vTaskSwitchContext+0xbc>)
 800fe52:	4413      	add	r3, r2
 800fe54:	60bb      	str	r3, [r7, #8]
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	685b      	ldr	r3, [r3, #4]
 800fe5a:	685a      	ldr	r2, [r3, #4]
 800fe5c:	68bb      	ldr	r3, [r7, #8]
 800fe5e:	605a      	str	r2, [r3, #4]
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	685a      	ldr	r2, [r3, #4]
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	3308      	adds	r3, #8
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d104      	bne.n	800fe76 <vTaskSwitchContext+0x8a>
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	685a      	ldr	r2, [r3, #4]
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	605a      	str	r2, [r3, #4]
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	685b      	ldr	r3, [r3, #4]
 800fe7a:	68db      	ldr	r3, [r3, #12]
 800fe7c:	4a0b      	ldr	r2, [pc, #44]	; (800feac <vTaskSwitchContext+0xc0>)
 800fe7e:	6013      	str	r3, [r2, #0]
 800fe80:	4a08      	ldr	r2, [pc, #32]	; (800fea4 <vTaskSwitchContext+0xb8>)
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fe86:	4b09      	ldr	r3, [pc, #36]	; (800feac <vTaskSwitchContext+0xc0>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	3354      	adds	r3, #84	; 0x54
 800fe8c:	4a08      	ldr	r2, [pc, #32]	; (800feb0 <vTaskSwitchContext+0xc4>)
 800fe8e:	6013      	str	r3, [r2, #0]
}
 800fe90:	bf00      	nop
 800fe92:	3714      	adds	r7, #20
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr
 800fe9c:	200014f4 	.word	0x200014f4
 800fea0:	200014e0 	.word	0x200014e0
 800fea4:	200014d4 	.word	0x200014d4
 800fea8:	20000ffc 	.word	0x20000ffc
 800feac:	20000ff8 	.word	0x20000ff8
 800feb0:	200001ec 	.word	0x200001ec

0800feb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b084      	sub	sp, #16
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d10a      	bne.n	800feda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec8:	f383 8811 	msr	BASEPRI, r3
 800fecc:	f3bf 8f6f 	isb	sy
 800fed0:	f3bf 8f4f 	dsb	sy
 800fed4:	60fb      	str	r3, [r7, #12]
}
 800fed6:	bf00      	nop
 800fed8:	e7fe      	b.n	800fed8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800feda:	4b07      	ldr	r3, [pc, #28]	; (800fef8 <vTaskPlaceOnEventList+0x44>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	3318      	adds	r3, #24
 800fee0:	4619      	mov	r1, r3
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f7fe fb3f 	bl	800e566 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fee8:	2101      	movs	r1, #1
 800feea:	6838      	ldr	r0, [r7, #0]
 800feec:	f000 fb7e 	bl	80105ec <prvAddCurrentTaskToDelayedList>
}
 800fef0:	bf00      	nop
 800fef2:	3710      	adds	r7, #16
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	20000ff8 	.word	0x20000ff8

0800fefc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b086      	sub	sp, #24
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	60f8      	str	r0, [r7, #12]
 800ff04:	60b9      	str	r1, [r7, #8]
 800ff06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d10a      	bne.n	800ff24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ff0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff12:	f383 8811 	msr	BASEPRI, r3
 800ff16:	f3bf 8f6f 	isb	sy
 800ff1a:	f3bf 8f4f 	dsb	sy
 800ff1e:	617b      	str	r3, [r7, #20]
}
 800ff20:	bf00      	nop
 800ff22:	e7fe      	b.n	800ff22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff24:	4b0a      	ldr	r3, [pc, #40]	; (800ff50 <vTaskPlaceOnEventListRestricted+0x54>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	3318      	adds	r3, #24
 800ff2a:	4619      	mov	r1, r3
 800ff2c:	68f8      	ldr	r0, [r7, #12]
 800ff2e:	f7fe faf6 	bl	800e51e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d002      	beq.n	800ff3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ff38:	f04f 33ff 	mov.w	r3, #4294967295
 800ff3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ff3e:	6879      	ldr	r1, [r7, #4]
 800ff40:	68b8      	ldr	r0, [r7, #8]
 800ff42:	f000 fb53 	bl	80105ec <prvAddCurrentTaskToDelayedList>
	}
 800ff46:	bf00      	nop
 800ff48:	3718      	adds	r7, #24
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	20000ff8 	.word	0x20000ff8

0800ff54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b086      	sub	sp, #24
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	68db      	ldr	r3, [r3, #12]
 800ff60:	68db      	ldr	r3, [r3, #12]
 800ff62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d10a      	bne.n	800ff80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ff6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff6e:	f383 8811 	msr	BASEPRI, r3
 800ff72:	f3bf 8f6f 	isb	sy
 800ff76:	f3bf 8f4f 	dsb	sy
 800ff7a:	60fb      	str	r3, [r7, #12]
}
 800ff7c:	bf00      	nop
 800ff7e:	e7fe      	b.n	800ff7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	3318      	adds	r3, #24
 800ff84:	4618      	mov	r0, r3
 800ff86:	f7fe fb27 	bl	800e5d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff8a:	4b1e      	ldr	r3, [pc, #120]	; (8010004 <xTaskRemoveFromEventList+0xb0>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d11d      	bne.n	800ffce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ff92:	693b      	ldr	r3, [r7, #16]
 800ff94:	3304      	adds	r3, #4
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7fe fb1e 	bl	800e5d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ff9c:	693b      	ldr	r3, [r7, #16]
 800ff9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffa0:	4b19      	ldr	r3, [pc, #100]	; (8010008 <xTaskRemoveFromEventList+0xb4>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d903      	bls.n	800ffb0 <xTaskRemoveFromEventList+0x5c>
 800ffa8:	693b      	ldr	r3, [r7, #16]
 800ffaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffac:	4a16      	ldr	r2, [pc, #88]	; (8010008 <xTaskRemoveFromEventList+0xb4>)
 800ffae:	6013      	str	r3, [r2, #0]
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffb4:	4613      	mov	r3, r2
 800ffb6:	009b      	lsls	r3, r3, #2
 800ffb8:	4413      	add	r3, r2
 800ffba:	009b      	lsls	r3, r3, #2
 800ffbc:	4a13      	ldr	r2, [pc, #76]	; (801000c <xTaskRemoveFromEventList+0xb8>)
 800ffbe:	441a      	add	r2, r3
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	3304      	adds	r3, #4
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	4610      	mov	r0, r2
 800ffc8:	f7fe faa9 	bl	800e51e <vListInsertEnd>
 800ffcc:	e005      	b.n	800ffda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	3318      	adds	r3, #24
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	480e      	ldr	r0, [pc, #56]	; (8010010 <xTaskRemoveFromEventList+0xbc>)
 800ffd6:	f7fe faa2 	bl	800e51e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffde:	4b0d      	ldr	r3, [pc, #52]	; (8010014 <xTaskRemoveFromEventList+0xc0>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d905      	bls.n	800fff4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ffe8:	2301      	movs	r3, #1
 800ffea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ffec:	4b0a      	ldr	r3, [pc, #40]	; (8010018 <xTaskRemoveFromEventList+0xc4>)
 800ffee:	2201      	movs	r2, #1
 800fff0:	601a      	str	r2, [r3, #0]
 800fff2:	e001      	b.n	800fff8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fff4:	2300      	movs	r3, #0
 800fff6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fff8:	697b      	ldr	r3, [r7, #20]
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3718      	adds	r7, #24
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
 8010002:	bf00      	nop
 8010004:	200014f4 	.word	0x200014f4
 8010008:	200014d4 	.word	0x200014d4
 801000c:	20000ffc 	.word	0x20000ffc
 8010010:	2000148c 	.word	0x2000148c
 8010014:	20000ff8 	.word	0x20000ff8
 8010018:	200014e0 	.word	0x200014e0

0801001c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801001c:	b480      	push	{r7}
 801001e:	b083      	sub	sp, #12
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010024:	4b06      	ldr	r3, [pc, #24]	; (8010040 <vTaskInternalSetTimeOutState+0x24>)
 8010026:	681a      	ldr	r2, [r3, #0]
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801002c:	4b05      	ldr	r3, [pc, #20]	; (8010044 <vTaskInternalSetTimeOutState+0x28>)
 801002e:	681a      	ldr	r2, [r3, #0]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	605a      	str	r2, [r3, #4]
}
 8010034:	bf00      	nop
 8010036:	370c      	adds	r7, #12
 8010038:	46bd      	mov	sp, r7
 801003a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003e:	4770      	bx	lr
 8010040:	200014e4 	.word	0x200014e4
 8010044:	200014d0 	.word	0x200014d0

08010048 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b088      	sub	sp, #32
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d10a      	bne.n	801006e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005c:	f383 8811 	msr	BASEPRI, r3
 8010060:	f3bf 8f6f 	isb	sy
 8010064:	f3bf 8f4f 	dsb	sy
 8010068:	613b      	str	r3, [r7, #16]
}
 801006a:	bf00      	nop
 801006c:	e7fe      	b.n	801006c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d10a      	bne.n	801008a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010078:	f383 8811 	msr	BASEPRI, r3
 801007c:	f3bf 8f6f 	isb	sy
 8010080:	f3bf 8f4f 	dsb	sy
 8010084:	60fb      	str	r3, [r7, #12]
}
 8010086:	bf00      	nop
 8010088:	e7fe      	b.n	8010088 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801008a:	f000 ff7b 	bl	8010f84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801008e:	4b1d      	ldr	r3, [pc, #116]	; (8010104 <xTaskCheckForTimeOut+0xbc>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	685b      	ldr	r3, [r3, #4]
 8010098:	69ba      	ldr	r2, [r7, #24]
 801009a:	1ad3      	subs	r3, r2, r3
 801009c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100a6:	d102      	bne.n	80100ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80100a8:	2300      	movs	r3, #0
 80100aa:	61fb      	str	r3, [r7, #28]
 80100ac:	e023      	b.n	80100f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681a      	ldr	r2, [r3, #0]
 80100b2:	4b15      	ldr	r3, [pc, #84]	; (8010108 <xTaskCheckForTimeOut+0xc0>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d007      	beq.n	80100ca <xTaskCheckForTimeOut+0x82>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	69ba      	ldr	r2, [r7, #24]
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d302      	bcc.n	80100ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80100c4:	2301      	movs	r3, #1
 80100c6:	61fb      	str	r3, [r7, #28]
 80100c8:	e015      	b.n	80100f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	697a      	ldr	r2, [r7, #20]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d20b      	bcs.n	80100ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	1ad2      	subs	r2, r2, r3
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f7ff ff9b 	bl	801001c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80100e6:	2300      	movs	r3, #0
 80100e8:	61fb      	str	r3, [r7, #28]
 80100ea:	e004      	b.n	80100f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	2200      	movs	r2, #0
 80100f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80100f2:	2301      	movs	r3, #1
 80100f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80100f6:	f000 ff75 	bl	8010fe4 <vPortExitCritical>

	return xReturn;
 80100fa:	69fb      	ldr	r3, [r7, #28]
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3720      	adds	r7, #32
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	200014d0 	.word	0x200014d0
 8010108:	200014e4 	.word	0x200014e4

0801010c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801010c:	b480      	push	{r7}
 801010e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010110:	4b03      	ldr	r3, [pc, #12]	; (8010120 <vTaskMissedYield+0x14>)
 8010112:	2201      	movs	r2, #1
 8010114:	601a      	str	r2, [r3, #0]
}
 8010116:	bf00      	nop
 8010118:	46bd      	mov	sp, r7
 801011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011e:	4770      	bx	lr
 8010120:	200014e0 	.word	0x200014e0

08010124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b082      	sub	sp, #8
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801012c:	f000 f852 	bl	80101d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010130:	4b06      	ldr	r3, [pc, #24]	; (801014c <prvIdleTask+0x28>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	2b01      	cmp	r3, #1
 8010136:	d9f9      	bls.n	801012c <prvIdleTask+0x8>
			{
				taskYIELD();
 8010138:	4b05      	ldr	r3, [pc, #20]	; (8010150 <prvIdleTask+0x2c>)
 801013a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801013e:	601a      	str	r2, [r3, #0]
 8010140:	f3bf 8f4f 	dsb	sy
 8010144:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010148:	e7f0      	b.n	801012c <prvIdleTask+0x8>
 801014a:	bf00      	nop
 801014c:	20000ffc 	.word	0x20000ffc
 8010150:	e000ed04 	.word	0xe000ed04

08010154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801015a:	2300      	movs	r3, #0
 801015c:	607b      	str	r3, [r7, #4]
 801015e:	e00c      	b.n	801017a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010160:	687a      	ldr	r2, [r7, #4]
 8010162:	4613      	mov	r3, r2
 8010164:	009b      	lsls	r3, r3, #2
 8010166:	4413      	add	r3, r2
 8010168:	009b      	lsls	r3, r3, #2
 801016a:	4a12      	ldr	r2, [pc, #72]	; (80101b4 <prvInitialiseTaskLists+0x60>)
 801016c:	4413      	add	r3, r2
 801016e:	4618      	mov	r0, r3
 8010170:	f7fe f9a8 	bl	800e4c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	3301      	adds	r3, #1
 8010178:	607b      	str	r3, [r7, #4]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2b37      	cmp	r3, #55	; 0x37
 801017e:	d9ef      	bls.n	8010160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010180:	480d      	ldr	r0, [pc, #52]	; (80101b8 <prvInitialiseTaskLists+0x64>)
 8010182:	f7fe f99f 	bl	800e4c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010186:	480d      	ldr	r0, [pc, #52]	; (80101bc <prvInitialiseTaskLists+0x68>)
 8010188:	f7fe f99c 	bl	800e4c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801018c:	480c      	ldr	r0, [pc, #48]	; (80101c0 <prvInitialiseTaskLists+0x6c>)
 801018e:	f7fe f999 	bl	800e4c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010192:	480c      	ldr	r0, [pc, #48]	; (80101c4 <prvInitialiseTaskLists+0x70>)
 8010194:	f7fe f996 	bl	800e4c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010198:	480b      	ldr	r0, [pc, #44]	; (80101c8 <prvInitialiseTaskLists+0x74>)
 801019a:	f7fe f993 	bl	800e4c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801019e:	4b0b      	ldr	r3, [pc, #44]	; (80101cc <prvInitialiseTaskLists+0x78>)
 80101a0:	4a05      	ldr	r2, [pc, #20]	; (80101b8 <prvInitialiseTaskLists+0x64>)
 80101a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80101a4:	4b0a      	ldr	r3, [pc, #40]	; (80101d0 <prvInitialiseTaskLists+0x7c>)
 80101a6:	4a05      	ldr	r2, [pc, #20]	; (80101bc <prvInitialiseTaskLists+0x68>)
 80101a8:	601a      	str	r2, [r3, #0]
}
 80101aa:	bf00      	nop
 80101ac:	3708      	adds	r7, #8
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	20000ffc 	.word	0x20000ffc
 80101b8:	2000145c 	.word	0x2000145c
 80101bc:	20001470 	.word	0x20001470
 80101c0:	2000148c 	.word	0x2000148c
 80101c4:	200014a0 	.word	0x200014a0
 80101c8:	200014b8 	.word	0x200014b8
 80101cc:	20001484 	.word	0x20001484
 80101d0:	20001488 	.word	0x20001488

080101d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b082      	sub	sp, #8
 80101d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101da:	e019      	b.n	8010210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80101dc:	f000 fed2 	bl	8010f84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101e0:	4b10      	ldr	r3, [pc, #64]	; (8010224 <prvCheckTasksWaitingTermination+0x50>)
 80101e2:	68db      	ldr	r3, [r3, #12]
 80101e4:	68db      	ldr	r3, [r3, #12]
 80101e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	3304      	adds	r3, #4
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7fe f9f3 	bl	800e5d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80101f2:	4b0d      	ldr	r3, [pc, #52]	; (8010228 <prvCheckTasksWaitingTermination+0x54>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	3b01      	subs	r3, #1
 80101f8:	4a0b      	ldr	r2, [pc, #44]	; (8010228 <prvCheckTasksWaitingTermination+0x54>)
 80101fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80101fc:	4b0b      	ldr	r3, [pc, #44]	; (801022c <prvCheckTasksWaitingTermination+0x58>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	3b01      	subs	r3, #1
 8010202:	4a0a      	ldr	r2, [pc, #40]	; (801022c <prvCheckTasksWaitingTermination+0x58>)
 8010204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010206:	f000 feed 	bl	8010fe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f000 f810 	bl	8010230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010210:	4b06      	ldr	r3, [pc, #24]	; (801022c <prvCheckTasksWaitingTermination+0x58>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d1e1      	bne.n	80101dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010218:	bf00      	nop
 801021a:	bf00      	nop
 801021c:	3708      	adds	r7, #8
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
 8010222:	bf00      	nop
 8010224:	200014a0 	.word	0x200014a0
 8010228:	200014cc 	.word	0x200014cc
 801022c:	200014b4 	.word	0x200014b4

08010230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010230:	b580      	push	{r7, lr}
 8010232:	b084      	sub	sp, #16
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	3354      	adds	r3, #84	; 0x54
 801023c:	4618      	mov	r0, r3
 801023e:	f018 ff95 	bl	802916c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010248:	2b00      	cmp	r3, #0
 801024a:	d108      	bne.n	801025e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010250:	4618      	mov	r0, r3
 8010252:	f001 f885 	bl	8011360 <vPortFree>
				vPortFree( pxTCB );
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f001 f882 	bl	8011360 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801025c:	e018      	b.n	8010290 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010264:	2b01      	cmp	r3, #1
 8010266:	d103      	bne.n	8010270 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f001 f879 	bl	8011360 <vPortFree>
	}
 801026e:	e00f      	b.n	8010290 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010276:	2b02      	cmp	r3, #2
 8010278:	d00a      	beq.n	8010290 <prvDeleteTCB+0x60>
	__asm volatile
 801027a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801027e:	f383 8811 	msr	BASEPRI, r3
 8010282:	f3bf 8f6f 	isb	sy
 8010286:	f3bf 8f4f 	dsb	sy
 801028a:	60fb      	str	r3, [r7, #12]
}
 801028c:	bf00      	nop
 801028e:	e7fe      	b.n	801028e <prvDeleteTCB+0x5e>
	}
 8010290:	bf00      	nop
 8010292:	3710      	adds	r7, #16
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}

08010298 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010298:	b480      	push	{r7}
 801029a:	b083      	sub	sp, #12
 801029c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801029e:	4b0c      	ldr	r3, [pc, #48]	; (80102d0 <prvResetNextTaskUnblockTime+0x38>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d104      	bne.n	80102b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80102a8:	4b0a      	ldr	r3, [pc, #40]	; (80102d4 <prvResetNextTaskUnblockTime+0x3c>)
 80102aa:	f04f 32ff 	mov.w	r2, #4294967295
 80102ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80102b0:	e008      	b.n	80102c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102b2:	4b07      	ldr	r3, [pc, #28]	; (80102d0 <prvResetNextTaskUnblockTime+0x38>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	68db      	ldr	r3, [r3, #12]
 80102ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	685b      	ldr	r3, [r3, #4]
 80102c0:	4a04      	ldr	r2, [pc, #16]	; (80102d4 <prvResetNextTaskUnblockTime+0x3c>)
 80102c2:	6013      	str	r3, [r2, #0]
}
 80102c4:	bf00      	nop
 80102c6:	370c      	adds	r7, #12
 80102c8:	46bd      	mov	sp, r7
 80102ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ce:	4770      	bx	lr
 80102d0:	20001484 	.word	0x20001484
 80102d4:	200014ec 	.word	0x200014ec

080102d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80102d8:	b480      	push	{r7}
 80102da:	b083      	sub	sp, #12
 80102dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80102de:	4b0b      	ldr	r3, [pc, #44]	; (801030c <xTaskGetSchedulerState+0x34>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d102      	bne.n	80102ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80102e6:	2301      	movs	r3, #1
 80102e8:	607b      	str	r3, [r7, #4]
 80102ea:	e008      	b.n	80102fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102ec:	4b08      	ldr	r3, [pc, #32]	; (8010310 <xTaskGetSchedulerState+0x38>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d102      	bne.n	80102fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80102f4:	2302      	movs	r3, #2
 80102f6:	607b      	str	r3, [r7, #4]
 80102f8:	e001      	b.n	80102fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80102fa:	2300      	movs	r3, #0
 80102fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80102fe:	687b      	ldr	r3, [r7, #4]
	}
 8010300:	4618      	mov	r0, r3
 8010302:	370c      	adds	r7, #12
 8010304:	46bd      	mov	sp, r7
 8010306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030a:	4770      	bx	lr
 801030c:	200014d8 	.word	0x200014d8
 8010310:	200014f4 	.word	0x200014f4

08010314 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010320:	2300      	movs	r3, #0
 8010322:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d051      	beq.n	80103ce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801032e:	4b2a      	ldr	r3, [pc, #168]	; (80103d8 <xTaskPriorityInherit+0xc4>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010334:	429a      	cmp	r2, r3
 8010336:	d241      	bcs.n	80103bc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	699b      	ldr	r3, [r3, #24]
 801033c:	2b00      	cmp	r3, #0
 801033e:	db06      	blt.n	801034e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010340:	4b25      	ldr	r3, [pc, #148]	; (80103d8 <xTaskPriorityInherit+0xc4>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010346:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	6959      	ldr	r1, [r3, #20]
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010356:	4613      	mov	r3, r2
 8010358:	009b      	lsls	r3, r3, #2
 801035a:	4413      	add	r3, r2
 801035c:	009b      	lsls	r3, r3, #2
 801035e:	4a1f      	ldr	r2, [pc, #124]	; (80103dc <xTaskPriorityInherit+0xc8>)
 8010360:	4413      	add	r3, r2
 8010362:	4299      	cmp	r1, r3
 8010364:	d122      	bne.n	80103ac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	3304      	adds	r3, #4
 801036a:	4618      	mov	r0, r3
 801036c:	f7fe f934 	bl	800e5d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010370:	4b19      	ldr	r3, [pc, #100]	; (80103d8 <xTaskPriorityInherit+0xc4>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801037e:	4b18      	ldr	r3, [pc, #96]	; (80103e0 <xTaskPriorityInherit+0xcc>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	429a      	cmp	r2, r3
 8010384:	d903      	bls.n	801038e <xTaskPriorityInherit+0x7a>
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801038a:	4a15      	ldr	r2, [pc, #84]	; (80103e0 <xTaskPriorityInherit+0xcc>)
 801038c:	6013      	str	r3, [r2, #0]
 801038e:	68bb      	ldr	r3, [r7, #8]
 8010390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010392:	4613      	mov	r3, r2
 8010394:	009b      	lsls	r3, r3, #2
 8010396:	4413      	add	r3, r2
 8010398:	009b      	lsls	r3, r3, #2
 801039a:	4a10      	ldr	r2, [pc, #64]	; (80103dc <xTaskPriorityInherit+0xc8>)
 801039c:	441a      	add	r2, r3
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	3304      	adds	r3, #4
 80103a2:	4619      	mov	r1, r3
 80103a4:	4610      	mov	r0, r2
 80103a6:	f7fe f8ba 	bl	800e51e <vListInsertEnd>
 80103aa:	e004      	b.n	80103b6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80103ac:	4b0a      	ldr	r3, [pc, #40]	; (80103d8 <xTaskPriorityInherit+0xc4>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80103b6:	2301      	movs	r3, #1
 80103b8:	60fb      	str	r3, [r7, #12]
 80103ba:	e008      	b.n	80103ce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80103c0:	4b05      	ldr	r3, [pc, #20]	; (80103d8 <xTaskPriorityInherit+0xc4>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103c6:	429a      	cmp	r2, r3
 80103c8:	d201      	bcs.n	80103ce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80103ca:	2301      	movs	r3, #1
 80103cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80103ce:	68fb      	ldr	r3, [r7, #12]
	}
 80103d0:	4618      	mov	r0, r3
 80103d2:	3710      	adds	r7, #16
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}
 80103d8:	20000ff8 	.word	0x20000ff8
 80103dc:	20000ffc 	.word	0x20000ffc
 80103e0:	200014d4 	.word	0x200014d4

080103e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b086      	sub	sp, #24
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80103f0:	2300      	movs	r3, #0
 80103f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d056      	beq.n	80104a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80103fa:	4b2e      	ldr	r3, [pc, #184]	; (80104b4 <xTaskPriorityDisinherit+0xd0>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	693a      	ldr	r2, [r7, #16]
 8010400:	429a      	cmp	r2, r3
 8010402:	d00a      	beq.n	801041a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010408:	f383 8811 	msr	BASEPRI, r3
 801040c:	f3bf 8f6f 	isb	sy
 8010410:	f3bf 8f4f 	dsb	sy
 8010414:	60fb      	str	r3, [r7, #12]
}
 8010416:	bf00      	nop
 8010418:	e7fe      	b.n	8010418 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801041e:	2b00      	cmp	r3, #0
 8010420:	d10a      	bne.n	8010438 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010426:	f383 8811 	msr	BASEPRI, r3
 801042a:	f3bf 8f6f 	isb	sy
 801042e:	f3bf 8f4f 	dsb	sy
 8010432:	60bb      	str	r3, [r7, #8]
}
 8010434:	bf00      	nop
 8010436:	e7fe      	b.n	8010436 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801043c:	1e5a      	subs	r2, r3, #1
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010442:	693b      	ldr	r3, [r7, #16]
 8010444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801044a:	429a      	cmp	r2, r3
 801044c:	d02c      	beq.n	80104a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010452:	2b00      	cmp	r3, #0
 8010454:	d128      	bne.n	80104a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	3304      	adds	r3, #4
 801045a:	4618      	mov	r0, r3
 801045c:	f7fe f8bc 	bl	800e5d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010464:	693b      	ldr	r3, [r7, #16]
 8010466:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801046c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010474:	693b      	ldr	r3, [r7, #16]
 8010476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010478:	4b0f      	ldr	r3, [pc, #60]	; (80104b8 <xTaskPriorityDisinherit+0xd4>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	429a      	cmp	r2, r3
 801047e:	d903      	bls.n	8010488 <xTaskPriorityDisinherit+0xa4>
 8010480:	693b      	ldr	r3, [r7, #16]
 8010482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010484:	4a0c      	ldr	r2, [pc, #48]	; (80104b8 <xTaskPriorityDisinherit+0xd4>)
 8010486:	6013      	str	r3, [r2, #0]
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801048c:	4613      	mov	r3, r2
 801048e:	009b      	lsls	r3, r3, #2
 8010490:	4413      	add	r3, r2
 8010492:	009b      	lsls	r3, r3, #2
 8010494:	4a09      	ldr	r2, [pc, #36]	; (80104bc <xTaskPriorityDisinherit+0xd8>)
 8010496:	441a      	add	r2, r3
 8010498:	693b      	ldr	r3, [r7, #16]
 801049a:	3304      	adds	r3, #4
 801049c:	4619      	mov	r1, r3
 801049e:	4610      	mov	r0, r2
 80104a0:	f7fe f83d 	bl	800e51e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80104a4:	2301      	movs	r3, #1
 80104a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80104a8:	697b      	ldr	r3, [r7, #20]
	}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3718      	adds	r7, #24
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}
 80104b2:	bf00      	nop
 80104b4:	20000ff8 	.word	0x20000ff8
 80104b8:	200014d4 	.word	0x200014d4
 80104bc:	20000ffc 	.word	0x20000ffc

080104c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b088      	sub	sp, #32
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80104ce:	2301      	movs	r3, #1
 80104d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d06a      	beq.n	80105ae <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80104d8:	69bb      	ldr	r3, [r7, #24]
 80104da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d10a      	bne.n	80104f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80104e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e4:	f383 8811 	msr	BASEPRI, r3
 80104e8:	f3bf 8f6f 	isb	sy
 80104ec:	f3bf 8f4f 	dsb	sy
 80104f0:	60fb      	str	r3, [r7, #12]
}
 80104f2:	bf00      	nop
 80104f4:	e7fe      	b.n	80104f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80104f6:	69bb      	ldr	r3, [r7, #24]
 80104f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104fa:	683a      	ldr	r2, [r7, #0]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d902      	bls.n	8010506 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	61fb      	str	r3, [r7, #28]
 8010504:	e002      	b.n	801050c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010506:	69bb      	ldr	r3, [r7, #24]
 8010508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801050a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801050c:	69bb      	ldr	r3, [r7, #24]
 801050e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010510:	69fa      	ldr	r2, [r7, #28]
 8010512:	429a      	cmp	r2, r3
 8010514:	d04b      	beq.n	80105ae <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010516:	69bb      	ldr	r3, [r7, #24]
 8010518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801051a:	697a      	ldr	r2, [r7, #20]
 801051c:	429a      	cmp	r2, r3
 801051e:	d146      	bne.n	80105ae <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010520:	4b25      	ldr	r3, [pc, #148]	; (80105b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	69ba      	ldr	r2, [r7, #24]
 8010526:	429a      	cmp	r2, r3
 8010528:	d10a      	bne.n	8010540 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801052a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801052e:	f383 8811 	msr	BASEPRI, r3
 8010532:	f3bf 8f6f 	isb	sy
 8010536:	f3bf 8f4f 	dsb	sy
 801053a:	60bb      	str	r3, [r7, #8]
}
 801053c:	bf00      	nop
 801053e:	e7fe      	b.n	801053e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010540:	69bb      	ldr	r3, [r7, #24]
 8010542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010544:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	69fa      	ldr	r2, [r7, #28]
 801054a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801054c:	69bb      	ldr	r3, [r7, #24]
 801054e:	699b      	ldr	r3, [r3, #24]
 8010550:	2b00      	cmp	r3, #0
 8010552:	db04      	blt.n	801055e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010554:	69fb      	ldr	r3, [r7, #28]
 8010556:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801055a:	69bb      	ldr	r3, [r7, #24]
 801055c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801055e:	69bb      	ldr	r3, [r7, #24]
 8010560:	6959      	ldr	r1, [r3, #20]
 8010562:	693a      	ldr	r2, [r7, #16]
 8010564:	4613      	mov	r3, r2
 8010566:	009b      	lsls	r3, r3, #2
 8010568:	4413      	add	r3, r2
 801056a:	009b      	lsls	r3, r3, #2
 801056c:	4a13      	ldr	r2, [pc, #76]	; (80105bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801056e:	4413      	add	r3, r2
 8010570:	4299      	cmp	r1, r3
 8010572:	d11c      	bne.n	80105ae <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010574:	69bb      	ldr	r3, [r7, #24]
 8010576:	3304      	adds	r3, #4
 8010578:	4618      	mov	r0, r3
 801057a:	f7fe f82d 	bl	800e5d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801057e:	69bb      	ldr	r3, [r7, #24]
 8010580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010582:	4b0f      	ldr	r3, [pc, #60]	; (80105c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	429a      	cmp	r2, r3
 8010588:	d903      	bls.n	8010592 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801058a:	69bb      	ldr	r3, [r7, #24]
 801058c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801058e:	4a0c      	ldr	r2, [pc, #48]	; (80105c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010590:	6013      	str	r3, [r2, #0]
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010596:	4613      	mov	r3, r2
 8010598:	009b      	lsls	r3, r3, #2
 801059a:	4413      	add	r3, r2
 801059c:	009b      	lsls	r3, r3, #2
 801059e:	4a07      	ldr	r2, [pc, #28]	; (80105bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80105a0:	441a      	add	r2, r3
 80105a2:	69bb      	ldr	r3, [r7, #24]
 80105a4:	3304      	adds	r3, #4
 80105a6:	4619      	mov	r1, r3
 80105a8:	4610      	mov	r0, r2
 80105aa:	f7fd ffb8 	bl	800e51e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80105ae:	bf00      	nop
 80105b0:	3720      	adds	r7, #32
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	bf00      	nop
 80105b8:	20000ff8 	.word	0x20000ff8
 80105bc:	20000ffc 	.word	0x20000ffc
 80105c0:	200014d4 	.word	0x200014d4

080105c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80105c4:	b480      	push	{r7}
 80105c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80105c8:	4b07      	ldr	r3, [pc, #28]	; (80105e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d004      	beq.n	80105da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80105d0:	4b05      	ldr	r3, [pc, #20]	; (80105e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105d6:	3201      	adds	r2, #1
 80105d8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80105da:	4b03      	ldr	r3, [pc, #12]	; (80105e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80105dc:	681b      	ldr	r3, [r3, #0]
	}
 80105de:	4618      	mov	r0, r3
 80105e0:	46bd      	mov	sp, r7
 80105e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e6:	4770      	bx	lr
 80105e8:	20000ff8 	.word	0x20000ff8

080105ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b084      	sub	sp, #16
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80105f6:	4b21      	ldr	r3, [pc, #132]	; (801067c <prvAddCurrentTaskToDelayedList+0x90>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105fc:	4b20      	ldr	r3, [pc, #128]	; (8010680 <prvAddCurrentTaskToDelayedList+0x94>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	3304      	adds	r3, #4
 8010602:	4618      	mov	r0, r3
 8010604:	f7fd ffe8 	bl	800e5d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801060e:	d10a      	bne.n	8010626 <prvAddCurrentTaskToDelayedList+0x3a>
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d007      	beq.n	8010626 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010616:	4b1a      	ldr	r3, [pc, #104]	; (8010680 <prvAddCurrentTaskToDelayedList+0x94>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	3304      	adds	r3, #4
 801061c:	4619      	mov	r1, r3
 801061e:	4819      	ldr	r0, [pc, #100]	; (8010684 <prvAddCurrentTaskToDelayedList+0x98>)
 8010620:	f7fd ff7d 	bl	800e51e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010624:	e026      	b.n	8010674 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010626:	68fa      	ldr	r2, [r7, #12]
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	4413      	add	r3, r2
 801062c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801062e:	4b14      	ldr	r3, [pc, #80]	; (8010680 <prvAddCurrentTaskToDelayedList+0x94>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	68ba      	ldr	r2, [r7, #8]
 8010634:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010636:	68ba      	ldr	r2, [r7, #8]
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	429a      	cmp	r2, r3
 801063c:	d209      	bcs.n	8010652 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801063e:	4b12      	ldr	r3, [pc, #72]	; (8010688 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010640:	681a      	ldr	r2, [r3, #0]
 8010642:	4b0f      	ldr	r3, [pc, #60]	; (8010680 <prvAddCurrentTaskToDelayedList+0x94>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	3304      	adds	r3, #4
 8010648:	4619      	mov	r1, r3
 801064a:	4610      	mov	r0, r2
 801064c:	f7fd ff8b 	bl	800e566 <vListInsert>
}
 8010650:	e010      	b.n	8010674 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010652:	4b0e      	ldr	r3, [pc, #56]	; (801068c <prvAddCurrentTaskToDelayedList+0xa0>)
 8010654:	681a      	ldr	r2, [r3, #0]
 8010656:	4b0a      	ldr	r3, [pc, #40]	; (8010680 <prvAddCurrentTaskToDelayedList+0x94>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	3304      	adds	r3, #4
 801065c:	4619      	mov	r1, r3
 801065e:	4610      	mov	r0, r2
 8010660:	f7fd ff81 	bl	800e566 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010664:	4b0a      	ldr	r3, [pc, #40]	; (8010690 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	68ba      	ldr	r2, [r7, #8]
 801066a:	429a      	cmp	r2, r3
 801066c:	d202      	bcs.n	8010674 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801066e:	4a08      	ldr	r2, [pc, #32]	; (8010690 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	6013      	str	r3, [r2, #0]
}
 8010674:	bf00      	nop
 8010676:	3710      	adds	r7, #16
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}
 801067c:	200014d0 	.word	0x200014d0
 8010680:	20000ff8 	.word	0x20000ff8
 8010684:	200014b8 	.word	0x200014b8
 8010688:	20001488 	.word	0x20001488
 801068c:	20001484 	.word	0x20001484
 8010690:	200014ec 	.word	0x200014ec

08010694 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b08a      	sub	sp, #40	; 0x28
 8010698:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801069a:	2300      	movs	r3, #0
 801069c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801069e:	f000 fb07 	bl	8010cb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80106a2:	4b1c      	ldr	r3, [pc, #112]	; (8010714 <xTimerCreateTimerTask+0x80>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d021      	beq.n	80106ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80106aa:	2300      	movs	r3, #0
 80106ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80106ae:	2300      	movs	r3, #0
 80106b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80106b2:	1d3a      	adds	r2, r7, #4
 80106b4:	f107 0108 	add.w	r1, r7, #8
 80106b8:	f107 030c 	add.w	r3, r7, #12
 80106bc:	4618      	mov	r0, r3
 80106be:	f7fd fee7 	bl	800e490 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80106c2:	6879      	ldr	r1, [r7, #4]
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	68fa      	ldr	r2, [r7, #12]
 80106c8:	9202      	str	r2, [sp, #8]
 80106ca:	9301      	str	r3, [sp, #4]
 80106cc:	2302      	movs	r3, #2
 80106ce:	9300      	str	r3, [sp, #0]
 80106d0:	2300      	movs	r3, #0
 80106d2:	460a      	mov	r2, r1
 80106d4:	4910      	ldr	r1, [pc, #64]	; (8010718 <xTimerCreateTimerTask+0x84>)
 80106d6:	4811      	ldr	r0, [pc, #68]	; (801071c <xTimerCreateTimerTask+0x88>)
 80106d8:	f7fe ffb6 	bl	800f648 <xTaskCreateStatic>
 80106dc:	4603      	mov	r3, r0
 80106de:	4a10      	ldr	r2, [pc, #64]	; (8010720 <xTimerCreateTimerTask+0x8c>)
 80106e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80106e2:	4b0f      	ldr	r3, [pc, #60]	; (8010720 <xTimerCreateTimerTask+0x8c>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d001      	beq.n	80106ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80106ea:	2301      	movs	r3, #1
 80106ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d10a      	bne.n	801070a <xTimerCreateTimerTask+0x76>
	__asm volatile
 80106f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f8:	f383 8811 	msr	BASEPRI, r3
 80106fc:	f3bf 8f6f 	isb	sy
 8010700:	f3bf 8f4f 	dsb	sy
 8010704:	613b      	str	r3, [r7, #16]
}
 8010706:	bf00      	nop
 8010708:	e7fe      	b.n	8010708 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801070a:	697b      	ldr	r3, [r7, #20]
}
 801070c:	4618      	mov	r0, r3
 801070e:	3718      	adds	r7, #24
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}
 8010714:	20001528 	.word	0x20001528
 8010718:	08029920 	.word	0x08029920
 801071c:	08010859 	.word	0x08010859
 8010720:	2000152c 	.word	0x2000152c

08010724 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b08a      	sub	sp, #40	; 0x28
 8010728:	af00      	add	r7, sp, #0
 801072a:	60f8      	str	r0, [r7, #12]
 801072c:	60b9      	str	r1, [r7, #8]
 801072e:	607a      	str	r2, [r7, #4]
 8010730:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010732:	2300      	movs	r3, #0
 8010734:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d10a      	bne.n	8010752 <xTimerGenericCommand+0x2e>
	__asm volatile
 801073c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010740:	f383 8811 	msr	BASEPRI, r3
 8010744:	f3bf 8f6f 	isb	sy
 8010748:	f3bf 8f4f 	dsb	sy
 801074c:	623b      	str	r3, [r7, #32]
}
 801074e:	bf00      	nop
 8010750:	e7fe      	b.n	8010750 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010752:	4b1a      	ldr	r3, [pc, #104]	; (80107bc <xTimerGenericCommand+0x98>)
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d02a      	beq.n	80107b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	2b05      	cmp	r3, #5
 801076a:	dc18      	bgt.n	801079e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801076c:	f7ff fdb4 	bl	80102d8 <xTaskGetSchedulerState>
 8010770:	4603      	mov	r3, r0
 8010772:	2b02      	cmp	r3, #2
 8010774:	d109      	bne.n	801078a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010776:	4b11      	ldr	r3, [pc, #68]	; (80107bc <xTimerGenericCommand+0x98>)
 8010778:	6818      	ldr	r0, [r3, #0]
 801077a:	f107 0110 	add.w	r1, r7, #16
 801077e:	2300      	movs	r3, #0
 8010780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010782:	f7fe f8fb 	bl	800e97c <xQueueGenericSend>
 8010786:	6278      	str	r0, [r7, #36]	; 0x24
 8010788:	e012      	b.n	80107b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801078a:	4b0c      	ldr	r3, [pc, #48]	; (80107bc <xTimerGenericCommand+0x98>)
 801078c:	6818      	ldr	r0, [r3, #0]
 801078e:	f107 0110 	add.w	r1, r7, #16
 8010792:	2300      	movs	r3, #0
 8010794:	2200      	movs	r2, #0
 8010796:	f7fe f8f1 	bl	800e97c <xQueueGenericSend>
 801079a:	6278      	str	r0, [r7, #36]	; 0x24
 801079c:	e008      	b.n	80107b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801079e:	4b07      	ldr	r3, [pc, #28]	; (80107bc <xTimerGenericCommand+0x98>)
 80107a0:	6818      	ldr	r0, [r3, #0]
 80107a2:	f107 0110 	add.w	r1, r7, #16
 80107a6:	2300      	movs	r3, #0
 80107a8:	683a      	ldr	r2, [r7, #0]
 80107aa:	f7fe f9e5 	bl	800eb78 <xQueueGenericSendFromISR>
 80107ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80107b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	3728      	adds	r7, #40	; 0x28
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}
 80107ba:	bf00      	nop
 80107bc:	20001528 	.word	0x20001528

080107c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b088      	sub	sp, #32
 80107c4:	af02      	add	r7, sp, #8
 80107c6:	6078      	str	r0, [r7, #4]
 80107c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107ca:	4b22      	ldr	r3, [pc, #136]	; (8010854 <prvProcessExpiredTimer+0x94>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	68db      	ldr	r3, [r3, #12]
 80107d0:	68db      	ldr	r3, [r3, #12]
 80107d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	3304      	adds	r3, #4
 80107d8:	4618      	mov	r0, r3
 80107da:	f7fd fefd 	bl	800e5d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107e4:	f003 0304 	and.w	r3, r3, #4
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d022      	beq.n	8010832 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	699a      	ldr	r2, [r3, #24]
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	18d1      	adds	r1, r2, r3
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	683a      	ldr	r2, [r7, #0]
 80107f8:	6978      	ldr	r0, [r7, #20]
 80107fa:	f000 f8d1 	bl	80109a0 <prvInsertTimerInActiveList>
 80107fe:	4603      	mov	r3, r0
 8010800:	2b00      	cmp	r3, #0
 8010802:	d01f      	beq.n	8010844 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010804:	2300      	movs	r3, #0
 8010806:	9300      	str	r3, [sp, #0]
 8010808:	2300      	movs	r3, #0
 801080a:	687a      	ldr	r2, [r7, #4]
 801080c:	2100      	movs	r1, #0
 801080e:	6978      	ldr	r0, [r7, #20]
 8010810:	f7ff ff88 	bl	8010724 <xTimerGenericCommand>
 8010814:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010816:	693b      	ldr	r3, [r7, #16]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d113      	bne.n	8010844 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801081c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010820:	f383 8811 	msr	BASEPRI, r3
 8010824:	f3bf 8f6f 	isb	sy
 8010828:	f3bf 8f4f 	dsb	sy
 801082c:	60fb      	str	r3, [r7, #12]
}
 801082e:	bf00      	nop
 8010830:	e7fe      	b.n	8010830 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010832:	697b      	ldr	r3, [r7, #20]
 8010834:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010838:	f023 0301 	bic.w	r3, r3, #1
 801083c:	b2da      	uxtb	r2, r3
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010844:	697b      	ldr	r3, [r7, #20]
 8010846:	6a1b      	ldr	r3, [r3, #32]
 8010848:	6978      	ldr	r0, [r7, #20]
 801084a:	4798      	blx	r3
}
 801084c:	bf00      	nop
 801084e:	3718      	adds	r7, #24
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}
 8010854:	20001520 	.word	0x20001520

08010858 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b084      	sub	sp, #16
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010860:	f107 0308 	add.w	r3, r7, #8
 8010864:	4618      	mov	r0, r3
 8010866:	f000 f857 	bl	8010918 <prvGetNextExpireTime>
 801086a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	4619      	mov	r1, r3
 8010870:	68f8      	ldr	r0, [r7, #12]
 8010872:	f000 f803 	bl	801087c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010876:	f000 f8d5 	bl	8010a24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801087a:	e7f1      	b.n	8010860 <prvTimerTask+0x8>

0801087c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b084      	sub	sp, #16
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
 8010884:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010886:	f7ff f93b 	bl	800fb00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801088a:	f107 0308 	add.w	r3, r7, #8
 801088e:	4618      	mov	r0, r3
 8010890:	f000 f866 	bl	8010960 <prvSampleTimeNow>
 8010894:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d130      	bne.n	80108fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d10a      	bne.n	80108b8 <prvProcessTimerOrBlockTask+0x3c>
 80108a2:	687a      	ldr	r2, [r7, #4]
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d806      	bhi.n	80108b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80108aa:	f7ff f937 	bl	800fb1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80108ae:	68f9      	ldr	r1, [r7, #12]
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f7ff ff85 	bl	80107c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80108b6:	e024      	b.n	8010902 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d008      	beq.n	80108d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80108be:	4b13      	ldr	r3, [pc, #76]	; (801090c <prvProcessTimerOrBlockTask+0x90>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d101      	bne.n	80108cc <prvProcessTimerOrBlockTask+0x50>
 80108c8:	2301      	movs	r3, #1
 80108ca:	e000      	b.n	80108ce <prvProcessTimerOrBlockTask+0x52>
 80108cc:	2300      	movs	r3, #0
 80108ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80108d0:	4b0f      	ldr	r3, [pc, #60]	; (8010910 <prvProcessTimerOrBlockTask+0x94>)
 80108d2:	6818      	ldr	r0, [r3, #0]
 80108d4:	687a      	ldr	r2, [r7, #4]
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	1ad3      	subs	r3, r2, r3
 80108da:	683a      	ldr	r2, [r7, #0]
 80108dc:	4619      	mov	r1, r3
 80108de:	f7fe fe7f 	bl	800f5e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80108e2:	f7ff f91b 	bl	800fb1c <xTaskResumeAll>
 80108e6:	4603      	mov	r3, r0
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d10a      	bne.n	8010902 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80108ec:	4b09      	ldr	r3, [pc, #36]	; (8010914 <prvProcessTimerOrBlockTask+0x98>)
 80108ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108f2:	601a      	str	r2, [r3, #0]
 80108f4:	f3bf 8f4f 	dsb	sy
 80108f8:	f3bf 8f6f 	isb	sy
}
 80108fc:	e001      	b.n	8010902 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80108fe:	f7ff f90d 	bl	800fb1c <xTaskResumeAll>
}
 8010902:	bf00      	nop
 8010904:	3710      	adds	r7, #16
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
 801090a:	bf00      	nop
 801090c:	20001524 	.word	0x20001524
 8010910:	20001528 	.word	0x20001528
 8010914:	e000ed04 	.word	0xe000ed04

08010918 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010918:	b480      	push	{r7}
 801091a:	b085      	sub	sp, #20
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010920:	4b0e      	ldr	r3, [pc, #56]	; (801095c <prvGetNextExpireTime+0x44>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d101      	bne.n	801092e <prvGetNextExpireTime+0x16>
 801092a:	2201      	movs	r2, #1
 801092c:	e000      	b.n	8010930 <prvGetNextExpireTime+0x18>
 801092e:	2200      	movs	r2, #0
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d105      	bne.n	8010948 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801093c:	4b07      	ldr	r3, [pc, #28]	; (801095c <prvGetNextExpireTime+0x44>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	68db      	ldr	r3, [r3, #12]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	60fb      	str	r3, [r7, #12]
 8010946:	e001      	b.n	801094c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010948:	2300      	movs	r3, #0
 801094a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801094c:	68fb      	ldr	r3, [r7, #12]
}
 801094e:	4618      	mov	r0, r3
 8010950:	3714      	adds	r7, #20
 8010952:	46bd      	mov	sp, r7
 8010954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010958:	4770      	bx	lr
 801095a:	bf00      	nop
 801095c:	20001520 	.word	0x20001520

08010960 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b084      	sub	sp, #16
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010968:	f7ff f976 	bl	800fc58 <xTaskGetTickCount>
 801096c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801096e:	4b0b      	ldr	r3, [pc, #44]	; (801099c <prvSampleTimeNow+0x3c>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	68fa      	ldr	r2, [r7, #12]
 8010974:	429a      	cmp	r2, r3
 8010976:	d205      	bcs.n	8010984 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010978:	f000 f936 	bl	8010be8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2201      	movs	r2, #1
 8010980:	601a      	str	r2, [r3, #0]
 8010982:	e002      	b.n	801098a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	2200      	movs	r2, #0
 8010988:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801098a:	4a04      	ldr	r2, [pc, #16]	; (801099c <prvSampleTimeNow+0x3c>)
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010990:	68fb      	ldr	r3, [r7, #12]
}
 8010992:	4618      	mov	r0, r3
 8010994:	3710      	adds	r7, #16
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	20001530 	.word	0x20001530

080109a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b086      	sub	sp, #24
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	60f8      	str	r0, [r7, #12]
 80109a8:	60b9      	str	r1, [r7, #8]
 80109aa:	607a      	str	r2, [r7, #4]
 80109ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80109ae:	2300      	movs	r3, #0
 80109b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	68ba      	ldr	r2, [r7, #8]
 80109b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	68fa      	ldr	r2, [r7, #12]
 80109bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80109be:	68ba      	ldr	r2, [r7, #8]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d812      	bhi.n	80109ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109c6:	687a      	ldr	r2, [r7, #4]
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	1ad2      	subs	r2, r2, r3
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	699b      	ldr	r3, [r3, #24]
 80109d0:	429a      	cmp	r2, r3
 80109d2:	d302      	bcc.n	80109da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80109d4:	2301      	movs	r3, #1
 80109d6:	617b      	str	r3, [r7, #20]
 80109d8:	e01b      	b.n	8010a12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80109da:	4b10      	ldr	r3, [pc, #64]	; (8010a1c <prvInsertTimerInActiveList+0x7c>)
 80109dc:	681a      	ldr	r2, [r3, #0]
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	3304      	adds	r3, #4
 80109e2:	4619      	mov	r1, r3
 80109e4:	4610      	mov	r0, r2
 80109e6:	f7fd fdbe 	bl	800e566 <vListInsert>
 80109ea:	e012      	b.n	8010a12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80109ec:	687a      	ldr	r2, [r7, #4]
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	429a      	cmp	r2, r3
 80109f2:	d206      	bcs.n	8010a02 <prvInsertTimerInActiveList+0x62>
 80109f4:	68ba      	ldr	r2, [r7, #8]
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d302      	bcc.n	8010a02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80109fc:	2301      	movs	r3, #1
 80109fe:	617b      	str	r3, [r7, #20]
 8010a00:	e007      	b.n	8010a12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010a02:	4b07      	ldr	r3, [pc, #28]	; (8010a20 <prvInsertTimerInActiveList+0x80>)
 8010a04:	681a      	ldr	r2, [r3, #0]
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	3304      	adds	r3, #4
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	4610      	mov	r0, r2
 8010a0e:	f7fd fdaa 	bl	800e566 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010a12:	697b      	ldr	r3, [r7, #20]
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3718      	adds	r7, #24
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}
 8010a1c:	20001524 	.word	0x20001524
 8010a20:	20001520 	.word	0x20001520

08010a24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b08e      	sub	sp, #56	; 0x38
 8010a28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010a2a:	e0ca      	b.n	8010bc2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	da18      	bge.n	8010a64 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010a32:	1d3b      	adds	r3, r7, #4
 8010a34:	3304      	adds	r3, #4
 8010a36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d10a      	bne.n	8010a54 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a42:	f383 8811 	msr	BASEPRI, r3
 8010a46:	f3bf 8f6f 	isb	sy
 8010a4a:	f3bf 8f4f 	dsb	sy
 8010a4e:	61fb      	str	r3, [r7, #28]
}
 8010a50:	bf00      	nop
 8010a52:	e7fe      	b.n	8010a52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a5a:	6850      	ldr	r0, [r2, #4]
 8010a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a5e:	6892      	ldr	r2, [r2, #8]
 8010a60:	4611      	mov	r1, r2
 8010a62:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	f2c0 80aa 	blt.w	8010bc0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a72:	695b      	ldr	r3, [r3, #20]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d004      	beq.n	8010a82 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a7a:	3304      	adds	r3, #4
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f7fd fdab 	bl	800e5d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010a82:	463b      	mov	r3, r7
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7ff ff6b 	bl	8010960 <prvSampleTimeNow>
 8010a8a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2b09      	cmp	r3, #9
 8010a90:	f200 8097 	bhi.w	8010bc2 <prvProcessReceivedCommands+0x19e>
 8010a94:	a201      	add	r2, pc, #4	; (adr r2, 8010a9c <prvProcessReceivedCommands+0x78>)
 8010a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a9a:	bf00      	nop
 8010a9c:	08010ac5 	.word	0x08010ac5
 8010aa0:	08010ac5 	.word	0x08010ac5
 8010aa4:	08010ac5 	.word	0x08010ac5
 8010aa8:	08010b39 	.word	0x08010b39
 8010aac:	08010b4d 	.word	0x08010b4d
 8010ab0:	08010b97 	.word	0x08010b97
 8010ab4:	08010ac5 	.word	0x08010ac5
 8010ab8:	08010ac5 	.word	0x08010ac5
 8010abc:	08010b39 	.word	0x08010b39
 8010ac0:	08010b4d 	.word	0x08010b4d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010aca:	f043 0301 	orr.w	r3, r3, #1
 8010ace:	b2da      	uxtb	r2, r3
 8010ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010ad6:	68ba      	ldr	r2, [r7, #8]
 8010ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ada:	699b      	ldr	r3, [r3, #24]
 8010adc:	18d1      	adds	r1, r2, r3
 8010ade:	68bb      	ldr	r3, [r7, #8]
 8010ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ae4:	f7ff ff5c 	bl	80109a0 <prvInsertTimerInActiveList>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d069      	beq.n	8010bc2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010af0:	6a1b      	ldr	r3, [r3, #32]
 8010af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010af4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010af8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010afc:	f003 0304 	and.w	r3, r3, #4
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d05e      	beq.n	8010bc2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010b04:	68ba      	ldr	r2, [r7, #8]
 8010b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b08:	699b      	ldr	r3, [r3, #24]
 8010b0a:	441a      	add	r2, r3
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	9300      	str	r3, [sp, #0]
 8010b10:	2300      	movs	r3, #0
 8010b12:	2100      	movs	r1, #0
 8010b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b16:	f7ff fe05 	bl	8010724 <xTimerGenericCommand>
 8010b1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010b1c:	6a3b      	ldr	r3, [r7, #32]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d14f      	bne.n	8010bc2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b26:	f383 8811 	msr	BASEPRI, r3
 8010b2a:	f3bf 8f6f 	isb	sy
 8010b2e:	f3bf 8f4f 	dsb	sy
 8010b32:	61bb      	str	r3, [r7, #24]
}
 8010b34:	bf00      	nop
 8010b36:	e7fe      	b.n	8010b36 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b3e:	f023 0301 	bic.w	r3, r3, #1
 8010b42:	b2da      	uxtb	r2, r3
 8010b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010b4a:	e03a      	b.n	8010bc2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b52:	f043 0301 	orr.w	r3, r3, #1
 8010b56:	b2da      	uxtb	r2, r3
 8010b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010b5e:	68ba      	ldr	r2, [r7, #8]
 8010b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b66:	699b      	ldr	r3, [r3, #24]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d10a      	bne.n	8010b82 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b70:	f383 8811 	msr	BASEPRI, r3
 8010b74:	f3bf 8f6f 	isb	sy
 8010b78:	f3bf 8f4f 	dsb	sy
 8010b7c:	617b      	str	r3, [r7, #20]
}
 8010b7e:	bf00      	nop
 8010b80:	e7fe      	b.n	8010b80 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b84:	699a      	ldr	r2, [r3, #24]
 8010b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b88:	18d1      	adds	r1, r2, r3
 8010b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b90:	f7ff ff06 	bl	80109a0 <prvInsertTimerInActiveList>
					break;
 8010b94:	e015      	b.n	8010bc2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b9c:	f003 0302 	and.w	r3, r3, #2
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d103      	bne.n	8010bac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ba6:	f000 fbdb 	bl	8011360 <vPortFree>
 8010baa:	e00a      	b.n	8010bc2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010bb2:	f023 0301 	bic.w	r3, r3, #1
 8010bb6:	b2da      	uxtb	r2, r3
 8010bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010bbe:	e000      	b.n	8010bc2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010bc0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010bc2:	4b08      	ldr	r3, [pc, #32]	; (8010be4 <prvProcessReceivedCommands+0x1c0>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	1d39      	adds	r1, r7, #4
 8010bc8:	2200      	movs	r2, #0
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f7fe f8fc 	bl	800edc8 <xQueueReceive>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	f47f af2a 	bne.w	8010a2c <prvProcessReceivedCommands+0x8>
	}
}
 8010bd8:	bf00      	nop
 8010bda:	bf00      	nop
 8010bdc:	3730      	adds	r7, #48	; 0x30
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}
 8010be2:	bf00      	nop
 8010be4:	20001528 	.word	0x20001528

08010be8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b088      	sub	sp, #32
 8010bec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010bee:	e048      	b.n	8010c82 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010bf0:	4b2d      	ldr	r3, [pc, #180]	; (8010ca8 <prvSwitchTimerLists+0xc0>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	68db      	ldr	r3, [r3, #12]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bfa:	4b2b      	ldr	r3, [pc, #172]	; (8010ca8 <prvSwitchTimerLists+0xc0>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	68db      	ldr	r3, [r3, #12]
 8010c00:	68db      	ldr	r3, [r3, #12]
 8010c02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	3304      	adds	r3, #4
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7fd fce5 	bl	800e5d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	6a1b      	ldr	r3, [r3, #32]
 8010c12:	68f8      	ldr	r0, [r7, #12]
 8010c14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c1c:	f003 0304 	and.w	r3, r3, #4
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d02e      	beq.n	8010c82 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	699b      	ldr	r3, [r3, #24]
 8010c28:	693a      	ldr	r2, [r7, #16]
 8010c2a:	4413      	add	r3, r2
 8010c2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010c2e:	68ba      	ldr	r2, [r7, #8]
 8010c30:	693b      	ldr	r3, [r7, #16]
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d90e      	bls.n	8010c54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	68ba      	ldr	r2, [r7, #8]
 8010c3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	68fa      	ldr	r2, [r7, #12]
 8010c40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010c42:	4b19      	ldr	r3, [pc, #100]	; (8010ca8 <prvSwitchTimerLists+0xc0>)
 8010c44:	681a      	ldr	r2, [r3, #0]
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	3304      	adds	r3, #4
 8010c4a:	4619      	mov	r1, r3
 8010c4c:	4610      	mov	r0, r2
 8010c4e:	f7fd fc8a 	bl	800e566 <vListInsert>
 8010c52:	e016      	b.n	8010c82 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010c54:	2300      	movs	r3, #0
 8010c56:	9300      	str	r3, [sp, #0]
 8010c58:	2300      	movs	r3, #0
 8010c5a:	693a      	ldr	r2, [r7, #16]
 8010c5c:	2100      	movs	r1, #0
 8010c5e:	68f8      	ldr	r0, [r7, #12]
 8010c60:	f7ff fd60 	bl	8010724 <xTimerGenericCommand>
 8010c64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d10a      	bne.n	8010c82 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c70:	f383 8811 	msr	BASEPRI, r3
 8010c74:	f3bf 8f6f 	isb	sy
 8010c78:	f3bf 8f4f 	dsb	sy
 8010c7c:	603b      	str	r3, [r7, #0]
}
 8010c7e:	bf00      	nop
 8010c80:	e7fe      	b.n	8010c80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010c82:	4b09      	ldr	r3, [pc, #36]	; (8010ca8 <prvSwitchTimerLists+0xc0>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d1b1      	bne.n	8010bf0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010c8c:	4b06      	ldr	r3, [pc, #24]	; (8010ca8 <prvSwitchTimerLists+0xc0>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010c92:	4b06      	ldr	r3, [pc, #24]	; (8010cac <prvSwitchTimerLists+0xc4>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	4a04      	ldr	r2, [pc, #16]	; (8010ca8 <prvSwitchTimerLists+0xc0>)
 8010c98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010c9a:	4a04      	ldr	r2, [pc, #16]	; (8010cac <prvSwitchTimerLists+0xc4>)
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	6013      	str	r3, [r2, #0]
}
 8010ca0:	bf00      	nop
 8010ca2:	3718      	adds	r7, #24
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}
 8010ca8:	20001520 	.word	0x20001520
 8010cac:	20001524 	.word	0x20001524

08010cb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010cb6:	f000 f965 	bl	8010f84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010cba:	4b15      	ldr	r3, [pc, #84]	; (8010d10 <prvCheckForValidListAndQueue+0x60>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d120      	bne.n	8010d04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010cc2:	4814      	ldr	r0, [pc, #80]	; (8010d14 <prvCheckForValidListAndQueue+0x64>)
 8010cc4:	f7fd fbfe 	bl	800e4c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010cc8:	4813      	ldr	r0, [pc, #76]	; (8010d18 <prvCheckForValidListAndQueue+0x68>)
 8010cca:	f7fd fbfb 	bl	800e4c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010cce:	4b13      	ldr	r3, [pc, #76]	; (8010d1c <prvCheckForValidListAndQueue+0x6c>)
 8010cd0:	4a10      	ldr	r2, [pc, #64]	; (8010d14 <prvCheckForValidListAndQueue+0x64>)
 8010cd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010cd4:	4b12      	ldr	r3, [pc, #72]	; (8010d20 <prvCheckForValidListAndQueue+0x70>)
 8010cd6:	4a10      	ldr	r2, [pc, #64]	; (8010d18 <prvCheckForValidListAndQueue+0x68>)
 8010cd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010cda:	2300      	movs	r3, #0
 8010cdc:	9300      	str	r3, [sp, #0]
 8010cde:	4b11      	ldr	r3, [pc, #68]	; (8010d24 <prvCheckForValidListAndQueue+0x74>)
 8010ce0:	4a11      	ldr	r2, [pc, #68]	; (8010d28 <prvCheckForValidListAndQueue+0x78>)
 8010ce2:	2110      	movs	r1, #16
 8010ce4:	200a      	movs	r0, #10
 8010ce6:	f7fd fd09 	bl	800e6fc <xQueueGenericCreateStatic>
 8010cea:	4603      	mov	r3, r0
 8010cec:	4a08      	ldr	r2, [pc, #32]	; (8010d10 <prvCheckForValidListAndQueue+0x60>)
 8010cee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010cf0:	4b07      	ldr	r3, [pc, #28]	; (8010d10 <prvCheckForValidListAndQueue+0x60>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d005      	beq.n	8010d04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010cf8:	4b05      	ldr	r3, [pc, #20]	; (8010d10 <prvCheckForValidListAndQueue+0x60>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	490b      	ldr	r1, [pc, #44]	; (8010d2c <prvCheckForValidListAndQueue+0x7c>)
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f7fe fc1a 	bl	800f538 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010d04:	f000 f96e 	bl	8010fe4 <vPortExitCritical>
}
 8010d08:	bf00      	nop
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}
 8010d0e:	bf00      	nop
 8010d10:	20001528 	.word	0x20001528
 8010d14:	200014f8 	.word	0x200014f8
 8010d18:	2000150c 	.word	0x2000150c
 8010d1c:	20001520 	.word	0x20001520
 8010d20:	20001524 	.word	0x20001524
 8010d24:	200015d4 	.word	0x200015d4
 8010d28:	20001534 	.word	0x20001534
 8010d2c:	08029928 	.word	0x08029928

08010d30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010d30:	b480      	push	{r7}
 8010d32:	b085      	sub	sp, #20
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	60f8      	str	r0, [r7, #12]
 8010d38:	60b9      	str	r1, [r7, #8]
 8010d3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	3b04      	subs	r3, #4
 8010d40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	3b04      	subs	r3, #4
 8010d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	f023 0201 	bic.w	r2, r3, #1
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	3b04      	subs	r3, #4
 8010d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010d60:	4a0c      	ldr	r2, [pc, #48]	; (8010d94 <pxPortInitialiseStack+0x64>)
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	3b14      	subs	r3, #20
 8010d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010d6c:	687a      	ldr	r2, [r7, #4]
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	3b04      	subs	r3, #4
 8010d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	f06f 0202 	mvn.w	r2, #2
 8010d7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	3b20      	subs	r3, #32
 8010d84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010d86:	68fb      	ldr	r3, [r7, #12]
}
 8010d88:	4618      	mov	r0, r3
 8010d8a:	3714      	adds	r7, #20
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d92:	4770      	bx	lr
 8010d94:	08010d99 	.word	0x08010d99

08010d98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010d98:	b480      	push	{r7}
 8010d9a:	b085      	sub	sp, #20
 8010d9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010da2:	4b12      	ldr	r3, [pc, #72]	; (8010dec <prvTaskExitError+0x54>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010daa:	d00a      	beq.n	8010dc2 <prvTaskExitError+0x2a>
	__asm volatile
 8010dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db0:	f383 8811 	msr	BASEPRI, r3
 8010db4:	f3bf 8f6f 	isb	sy
 8010db8:	f3bf 8f4f 	dsb	sy
 8010dbc:	60fb      	str	r3, [r7, #12]
}
 8010dbe:	bf00      	nop
 8010dc0:	e7fe      	b.n	8010dc0 <prvTaskExitError+0x28>
	__asm volatile
 8010dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc6:	f383 8811 	msr	BASEPRI, r3
 8010dca:	f3bf 8f6f 	isb	sy
 8010dce:	f3bf 8f4f 	dsb	sy
 8010dd2:	60bb      	str	r3, [r7, #8]
}
 8010dd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010dd6:	bf00      	nop
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d0fc      	beq.n	8010dd8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010dde:	bf00      	nop
 8010de0:	bf00      	nop
 8010de2:	3714      	adds	r7, #20
 8010de4:	46bd      	mov	sp, r7
 8010de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dea:	4770      	bx	lr
 8010dec:	20000168 	.word	0x20000168

08010df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010df0:	4b07      	ldr	r3, [pc, #28]	; (8010e10 <pxCurrentTCBConst2>)
 8010df2:	6819      	ldr	r1, [r3, #0]
 8010df4:	6808      	ldr	r0, [r1, #0]
 8010df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dfa:	f380 8809 	msr	PSP, r0
 8010dfe:	f3bf 8f6f 	isb	sy
 8010e02:	f04f 0000 	mov.w	r0, #0
 8010e06:	f380 8811 	msr	BASEPRI, r0
 8010e0a:	4770      	bx	lr
 8010e0c:	f3af 8000 	nop.w

08010e10 <pxCurrentTCBConst2>:
 8010e10:	20000ff8 	.word	0x20000ff8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010e14:	bf00      	nop
 8010e16:	bf00      	nop

08010e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010e18:	4808      	ldr	r0, [pc, #32]	; (8010e3c <prvPortStartFirstTask+0x24>)
 8010e1a:	6800      	ldr	r0, [r0, #0]
 8010e1c:	6800      	ldr	r0, [r0, #0]
 8010e1e:	f380 8808 	msr	MSP, r0
 8010e22:	f04f 0000 	mov.w	r0, #0
 8010e26:	f380 8814 	msr	CONTROL, r0
 8010e2a:	b662      	cpsie	i
 8010e2c:	b661      	cpsie	f
 8010e2e:	f3bf 8f4f 	dsb	sy
 8010e32:	f3bf 8f6f 	isb	sy
 8010e36:	df00      	svc	0
 8010e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010e3a:	bf00      	nop
 8010e3c:	e000ed08 	.word	0xe000ed08

08010e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b086      	sub	sp, #24
 8010e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010e46:	4b46      	ldr	r3, [pc, #280]	; (8010f60 <xPortStartScheduler+0x120>)
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	4a46      	ldr	r2, [pc, #280]	; (8010f64 <xPortStartScheduler+0x124>)
 8010e4c:	4293      	cmp	r3, r2
 8010e4e:	d10a      	bne.n	8010e66 <xPortStartScheduler+0x26>
	__asm volatile
 8010e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e54:	f383 8811 	msr	BASEPRI, r3
 8010e58:	f3bf 8f6f 	isb	sy
 8010e5c:	f3bf 8f4f 	dsb	sy
 8010e60:	613b      	str	r3, [r7, #16]
}
 8010e62:	bf00      	nop
 8010e64:	e7fe      	b.n	8010e64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010e66:	4b3e      	ldr	r3, [pc, #248]	; (8010f60 <xPortStartScheduler+0x120>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	4a3f      	ldr	r2, [pc, #252]	; (8010f68 <xPortStartScheduler+0x128>)
 8010e6c:	4293      	cmp	r3, r2
 8010e6e:	d10a      	bne.n	8010e86 <xPortStartScheduler+0x46>
	__asm volatile
 8010e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e74:	f383 8811 	msr	BASEPRI, r3
 8010e78:	f3bf 8f6f 	isb	sy
 8010e7c:	f3bf 8f4f 	dsb	sy
 8010e80:	60fb      	str	r3, [r7, #12]
}
 8010e82:	bf00      	nop
 8010e84:	e7fe      	b.n	8010e84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010e86:	4b39      	ldr	r3, [pc, #228]	; (8010f6c <xPortStartScheduler+0x12c>)
 8010e88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	781b      	ldrb	r3, [r3, #0]
 8010e8e:	b2db      	uxtb	r3, r3
 8010e90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	22ff      	movs	r2, #255	; 0xff
 8010e96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010e98:	697b      	ldr	r3, [r7, #20]
 8010e9a:	781b      	ldrb	r3, [r3, #0]
 8010e9c:	b2db      	uxtb	r3, r3
 8010e9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010ea0:	78fb      	ldrb	r3, [r7, #3]
 8010ea2:	b2db      	uxtb	r3, r3
 8010ea4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010ea8:	b2da      	uxtb	r2, r3
 8010eaa:	4b31      	ldr	r3, [pc, #196]	; (8010f70 <xPortStartScheduler+0x130>)
 8010eac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010eae:	4b31      	ldr	r3, [pc, #196]	; (8010f74 <xPortStartScheduler+0x134>)
 8010eb0:	2207      	movs	r2, #7
 8010eb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010eb4:	e009      	b.n	8010eca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010eb6:	4b2f      	ldr	r3, [pc, #188]	; (8010f74 <xPortStartScheduler+0x134>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	3b01      	subs	r3, #1
 8010ebc:	4a2d      	ldr	r2, [pc, #180]	; (8010f74 <xPortStartScheduler+0x134>)
 8010ebe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010ec0:	78fb      	ldrb	r3, [r7, #3]
 8010ec2:	b2db      	uxtb	r3, r3
 8010ec4:	005b      	lsls	r3, r3, #1
 8010ec6:	b2db      	uxtb	r3, r3
 8010ec8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010eca:	78fb      	ldrb	r3, [r7, #3]
 8010ecc:	b2db      	uxtb	r3, r3
 8010ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ed2:	2b80      	cmp	r3, #128	; 0x80
 8010ed4:	d0ef      	beq.n	8010eb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010ed6:	4b27      	ldr	r3, [pc, #156]	; (8010f74 <xPortStartScheduler+0x134>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	f1c3 0307 	rsb	r3, r3, #7
 8010ede:	2b04      	cmp	r3, #4
 8010ee0:	d00a      	beq.n	8010ef8 <xPortStartScheduler+0xb8>
	__asm volatile
 8010ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ee6:	f383 8811 	msr	BASEPRI, r3
 8010eea:	f3bf 8f6f 	isb	sy
 8010eee:	f3bf 8f4f 	dsb	sy
 8010ef2:	60bb      	str	r3, [r7, #8]
}
 8010ef4:	bf00      	nop
 8010ef6:	e7fe      	b.n	8010ef6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010ef8:	4b1e      	ldr	r3, [pc, #120]	; (8010f74 <xPortStartScheduler+0x134>)
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	021b      	lsls	r3, r3, #8
 8010efe:	4a1d      	ldr	r2, [pc, #116]	; (8010f74 <xPortStartScheduler+0x134>)
 8010f00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010f02:	4b1c      	ldr	r3, [pc, #112]	; (8010f74 <xPortStartScheduler+0x134>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010f0a:	4a1a      	ldr	r2, [pc, #104]	; (8010f74 <xPortStartScheduler+0x134>)
 8010f0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	b2da      	uxtb	r2, r3
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010f16:	4b18      	ldr	r3, [pc, #96]	; (8010f78 <xPortStartScheduler+0x138>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	4a17      	ldr	r2, [pc, #92]	; (8010f78 <xPortStartScheduler+0x138>)
 8010f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010f20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010f22:	4b15      	ldr	r3, [pc, #84]	; (8010f78 <xPortStartScheduler+0x138>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	4a14      	ldr	r2, [pc, #80]	; (8010f78 <xPortStartScheduler+0x138>)
 8010f28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010f2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010f2e:	f000 f8dd 	bl	80110ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010f32:	4b12      	ldr	r3, [pc, #72]	; (8010f7c <xPortStartScheduler+0x13c>)
 8010f34:	2200      	movs	r2, #0
 8010f36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010f38:	f000 f8fc 	bl	8011134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010f3c:	4b10      	ldr	r3, [pc, #64]	; (8010f80 <xPortStartScheduler+0x140>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	4a0f      	ldr	r2, [pc, #60]	; (8010f80 <xPortStartScheduler+0x140>)
 8010f42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010f46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010f48:	f7ff ff66 	bl	8010e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010f4c:	f7fe ff4e 	bl	800fdec <vTaskSwitchContext>
	prvTaskExitError();
 8010f50:	f7ff ff22 	bl	8010d98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010f54:	2300      	movs	r3, #0
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3718      	adds	r7, #24
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	e000ed00 	.word	0xe000ed00
 8010f64:	410fc271 	.word	0x410fc271
 8010f68:	410fc270 	.word	0x410fc270
 8010f6c:	e000e400 	.word	0xe000e400
 8010f70:	20001624 	.word	0x20001624
 8010f74:	20001628 	.word	0x20001628
 8010f78:	e000ed20 	.word	0xe000ed20
 8010f7c:	20000168 	.word	0x20000168
 8010f80:	e000ef34 	.word	0xe000ef34

08010f84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010f84:	b480      	push	{r7}
 8010f86:	b083      	sub	sp, #12
 8010f88:	af00      	add	r7, sp, #0
	__asm volatile
 8010f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f8e:	f383 8811 	msr	BASEPRI, r3
 8010f92:	f3bf 8f6f 	isb	sy
 8010f96:	f3bf 8f4f 	dsb	sy
 8010f9a:	607b      	str	r3, [r7, #4]
}
 8010f9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010f9e:	4b0f      	ldr	r3, [pc, #60]	; (8010fdc <vPortEnterCritical+0x58>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	4a0d      	ldr	r2, [pc, #52]	; (8010fdc <vPortEnterCritical+0x58>)
 8010fa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010fa8:	4b0c      	ldr	r3, [pc, #48]	; (8010fdc <vPortEnterCritical+0x58>)
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	2b01      	cmp	r3, #1
 8010fae:	d10f      	bne.n	8010fd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010fb0:	4b0b      	ldr	r3, [pc, #44]	; (8010fe0 <vPortEnterCritical+0x5c>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	b2db      	uxtb	r3, r3
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d00a      	beq.n	8010fd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8010fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fbe:	f383 8811 	msr	BASEPRI, r3
 8010fc2:	f3bf 8f6f 	isb	sy
 8010fc6:	f3bf 8f4f 	dsb	sy
 8010fca:	603b      	str	r3, [r7, #0]
}
 8010fcc:	bf00      	nop
 8010fce:	e7fe      	b.n	8010fce <vPortEnterCritical+0x4a>
	}
}
 8010fd0:	bf00      	nop
 8010fd2:	370c      	adds	r7, #12
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fda:	4770      	bx	lr
 8010fdc:	20000168 	.word	0x20000168
 8010fe0:	e000ed04 	.word	0xe000ed04

08010fe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b083      	sub	sp, #12
 8010fe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010fea:	4b12      	ldr	r3, [pc, #72]	; (8011034 <vPortExitCritical+0x50>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d10a      	bne.n	8011008 <vPortExitCritical+0x24>
	__asm volatile
 8010ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ff6:	f383 8811 	msr	BASEPRI, r3
 8010ffa:	f3bf 8f6f 	isb	sy
 8010ffe:	f3bf 8f4f 	dsb	sy
 8011002:	607b      	str	r3, [r7, #4]
}
 8011004:	bf00      	nop
 8011006:	e7fe      	b.n	8011006 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011008:	4b0a      	ldr	r3, [pc, #40]	; (8011034 <vPortExitCritical+0x50>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	3b01      	subs	r3, #1
 801100e:	4a09      	ldr	r2, [pc, #36]	; (8011034 <vPortExitCritical+0x50>)
 8011010:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011012:	4b08      	ldr	r3, [pc, #32]	; (8011034 <vPortExitCritical+0x50>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d105      	bne.n	8011026 <vPortExitCritical+0x42>
 801101a:	2300      	movs	r3, #0
 801101c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	f383 8811 	msr	BASEPRI, r3
}
 8011024:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011026:	bf00      	nop
 8011028:	370c      	adds	r7, #12
 801102a:	46bd      	mov	sp, r7
 801102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011030:	4770      	bx	lr
 8011032:	bf00      	nop
 8011034:	20000168 	.word	0x20000168
	...

08011040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011040:	f3ef 8009 	mrs	r0, PSP
 8011044:	f3bf 8f6f 	isb	sy
 8011048:	4b15      	ldr	r3, [pc, #84]	; (80110a0 <pxCurrentTCBConst>)
 801104a:	681a      	ldr	r2, [r3, #0]
 801104c:	f01e 0f10 	tst.w	lr, #16
 8011050:	bf08      	it	eq
 8011052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801105a:	6010      	str	r0, [r2, #0]
 801105c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011064:	f380 8811 	msr	BASEPRI, r0
 8011068:	f3bf 8f4f 	dsb	sy
 801106c:	f3bf 8f6f 	isb	sy
 8011070:	f7fe febc 	bl	800fdec <vTaskSwitchContext>
 8011074:	f04f 0000 	mov.w	r0, #0
 8011078:	f380 8811 	msr	BASEPRI, r0
 801107c:	bc09      	pop	{r0, r3}
 801107e:	6819      	ldr	r1, [r3, #0]
 8011080:	6808      	ldr	r0, [r1, #0]
 8011082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011086:	f01e 0f10 	tst.w	lr, #16
 801108a:	bf08      	it	eq
 801108c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011090:	f380 8809 	msr	PSP, r0
 8011094:	f3bf 8f6f 	isb	sy
 8011098:	4770      	bx	lr
 801109a:	bf00      	nop
 801109c:	f3af 8000 	nop.w

080110a0 <pxCurrentTCBConst>:
 80110a0:	20000ff8 	.word	0x20000ff8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80110a4:	bf00      	nop
 80110a6:	bf00      	nop

080110a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b082      	sub	sp, #8
 80110ac:	af00      	add	r7, sp, #0
	__asm volatile
 80110ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b2:	f383 8811 	msr	BASEPRI, r3
 80110b6:	f3bf 8f6f 	isb	sy
 80110ba:	f3bf 8f4f 	dsb	sy
 80110be:	607b      	str	r3, [r7, #4]
}
 80110c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80110c2:	f7fe fdd9 	bl	800fc78 <xTaskIncrementTick>
 80110c6:	4603      	mov	r3, r0
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d003      	beq.n	80110d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80110cc:	4b06      	ldr	r3, [pc, #24]	; (80110e8 <xPortSysTickHandler+0x40>)
 80110ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110d2:	601a      	str	r2, [r3, #0]
 80110d4:	2300      	movs	r3, #0
 80110d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	f383 8811 	msr	BASEPRI, r3
}
 80110de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80110e0:	bf00      	nop
 80110e2:	3708      	adds	r7, #8
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}
 80110e8:	e000ed04 	.word	0xe000ed04

080110ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80110ec:	b480      	push	{r7}
 80110ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80110f0:	4b0b      	ldr	r3, [pc, #44]	; (8011120 <vPortSetupTimerInterrupt+0x34>)
 80110f2:	2200      	movs	r2, #0
 80110f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80110f6:	4b0b      	ldr	r3, [pc, #44]	; (8011124 <vPortSetupTimerInterrupt+0x38>)
 80110f8:	2200      	movs	r2, #0
 80110fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80110fc:	4b0a      	ldr	r3, [pc, #40]	; (8011128 <vPortSetupTimerInterrupt+0x3c>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	4a0a      	ldr	r2, [pc, #40]	; (801112c <vPortSetupTimerInterrupt+0x40>)
 8011102:	fba2 2303 	umull	r2, r3, r2, r3
 8011106:	099b      	lsrs	r3, r3, #6
 8011108:	4a09      	ldr	r2, [pc, #36]	; (8011130 <vPortSetupTimerInterrupt+0x44>)
 801110a:	3b01      	subs	r3, #1
 801110c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801110e:	4b04      	ldr	r3, [pc, #16]	; (8011120 <vPortSetupTimerInterrupt+0x34>)
 8011110:	2207      	movs	r2, #7
 8011112:	601a      	str	r2, [r3, #0]
}
 8011114:	bf00      	nop
 8011116:	46bd      	mov	sp, r7
 8011118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111c:	4770      	bx	lr
 801111e:	bf00      	nop
 8011120:	e000e010 	.word	0xe000e010
 8011124:	e000e018 	.word	0xe000e018
 8011128:	20000158 	.word	0x20000158
 801112c:	10624dd3 	.word	0x10624dd3
 8011130:	e000e014 	.word	0xe000e014

08011134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011144 <vPortEnableVFP+0x10>
 8011138:	6801      	ldr	r1, [r0, #0]
 801113a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801113e:	6001      	str	r1, [r0, #0]
 8011140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011142:	bf00      	nop
 8011144:	e000ed88 	.word	0xe000ed88

08011148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011148:	b480      	push	{r7}
 801114a:	b085      	sub	sp, #20
 801114c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801114e:	f3ef 8305 	mrs	r3, IPSR
 8011152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	2b0f      	cmp	r3, #15
 8011158:	d914      	bls.n	8011184 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801115a:	4a17      	ldr	r2, [pc, #92]	; (80111b8 <vPortValidateInterruptPriority+0x70>)
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	4413      	add	r3, r2
 8011160:	781b      	ldrb	r3, [r3, #0]
 8011162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011164:	4b15      	ldr	r3, [pc, #84]	; (80111bc <vPortValidateInterruptPriority+0x74>)
 8011166:	781b      	ldrb	r3, [r3, #0]
 8011168:	7afa      	ldrb	r2, [r7, #11]
 801116a:	429a      	cmp	r2, r3
 801116c:	d20a      	bcs.n	8011184 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801116e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011172:	f383 8811 	msr	BASEPRI, r3
 8011176:	f3bf 8f6f 	isb	sy
 801117a:	f3bf 8f4f 	dsb	sy
 801117e:	607b      	str	r3, [r7, #4]
}
 8011180:	bf00      	nop
 8011182:	e7fe      	b.n	8011182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011184:	4b0e      	ldr	r3, [pc, #56]	; (80111c0 <vPortValidateInterruptPriority+0x78>)
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801118c:	4b0d      	ldr	r3, [pc, #52]	; (80111c4 <vPortValidateInterruptPriority+0x7c>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	429a      	cmp	r2, r3
 8011192:	d90a      	bls.n	80111aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011198:	f383 8811 	msr	BASEPRI, r3
 801119c:	f3bf 8f6f 	isb	sy
 80111a0:	f3bf 8f4f 	dsb	sy
 80111a4:	603b      	str	r3, [r7, #0]
}
 80111a6:	bf00      	nop
 80111a8:	e7fe      	b.n	80111a8 <vPortValidateInterruptPriority+0x60>
	}
 80111aa:	bf00      	nop
 80111ac:	3714      	adds	r7, #20
 80111ae:	46bd      	mov	sp, r7
 80111b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b4:	4770      	bx	lr
 80111b6:	bf00      	nop
 80111b8:	e000e3f0 	.word	0xe000e3f0
 80111bc:	20001624 	.word	0x20001624
 80111c0:	e000ed0c 	.word	0xe000ed0c
 80111c4:	20001628 	.word	0x20001628

080111c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b08a      	sub	sp, #40	; 0x28
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80111d0:	2300      	movs	r3, #0
 80111d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80111d4:	f7fe fc94 	bl	800fb00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80111d8:	4b5b      	ldr	r3, [pc, #364]	; (8011348 <pvPortMalloc+0x180>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d101      	bne.n	80111e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80111e0:	f000 f920 	bl	8011424 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80111e4:	4b59      	ldr	r3, [pc, #356]	; (801134c <pvPortMalloc+0x184>)
 80111e6:	681a      	ldr	r2, [r3, #0]
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	4013      	ands	r3, r2
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	f040 8093 	bne.w	8011318 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d01d      	beq.n	8011234 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80111f8:	2208      	movs	r2, #8
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	4413      	add	r3, r2
 80111fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f003 0307 	and.w	r3, r3, #7
 8011206:	2b00      	cmp	r3, #0
 8011208:	d014      	beq.n	8011234 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	f023 0307 	bic.w	r3, r3, #7
 8011210:	3308      	adds	r3, #8
 8011212:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f003 0307 	and.w	r3, r3, #7
 801121a:	2b00      	cmp	r3, #0
 801121c:	d00a      	beq.n	8011234 <pvPortMalloc+0x6c>
	__asm volatile
 801121e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011222:	f383 8811 	msr	BASEPRI, r3
 8011226:	f3bf 8f6f 	isb	sy
 801122a:	f3bf 8f4f 	dsb	sy
 801122e:	617b      	str	r3, [r7, #20]
}
 8011230:	bf00      	nop
 8011232:	e7fe      	b.n	8011232 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d06e      	beq.n	8011318 <pvPortMalloc+0x150>
 801123a:	4b45      	ldr	r3, [pc, #276]	; (8011350 <pvPortMalloc+0x188>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	687a      	ldr	r2, [r7, #4]
 8011240:	429a      	cmp	r2, r3
 8011242:	d869      	bhi.n	8011318 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011244:	4b43      	ldr	r3, [pc, #268]	; (8011354 <pvPortMalloc+0x18c>)
 8011246:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011248:	4b42      	ldr	r3, [pc, #264]	; (8011354 <pvPortMalloc+0x18c>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801124e:	e004      	b.n	801125a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011252:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	687a      	ldr	r2, [r7, #4]
 8011260:	429a      	cmp	r2, r3
 8011262:	d903      	bls.n	801126c <pvPortMalloc+0xa4>
 8011264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d1f1      	bne.n	8011250 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801126c:	4b36      	ldr	r3, [pc, #216]	; (8011348 <pvPortMalloc+0x180>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011272:	429a      	cmp	r2, r3
 8011274:	d050      	beq.n	8011318 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011276:	6a3b      	ldr	r3, [r7, #32]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	2208      	movs	r2, #8
 801127c:	4413      	add	r3, r2
 801127e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011282:	681a      	ldr	r2, [r3, #0]
 8011284:	6a3b      	ldr	r3, [r7, #32]
 8011286:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801128a:	685a      	ldr	r2, [r3, #4]
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	1ad2      	subs	r2, r2, r3
 8011290:	2308      	movs	r3, #8
 8011292:	005b      	lsls	r3, r3, #1
 8011294:	429a      	cmp	r2, r3
 8011296:	d91f      	bls.n	80112d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	4413      	add	r3, r2
 801129e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80112a0:	69bb      	ldr	r3, [r7, #24]
 80112a2:	f003 0307 	and.w	r3, r3, #7
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d00a      	beq.n	80112c0 <pvPortMalloc+0xf8>
	__asm volatile
 80112aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ae:	f383 8811 	msr	BASEPRI, r3
 80112b2:	f3bf 8f6f 	isb	sy
 80112b6:	f3bf 8f4f 	dsb	sy
 80112ba:	613b      	str	r3, [r7, #16]
}
 80112bc:	bf00      	nop
 80112be:	e7fe      	b.n	80112be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80112c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c2:	685a      	ldr	r2, [r3, #4]
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	1ad2      	subs	r2, r2, r3
 80112c8:	69bb      	ldr	r3, [r7, #24]
 80112ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80112cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ce:	687a      	ldr	r2, [r7, #4]
 80112d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80112d2:	69b8      	ldr	r0, [r7, #24]
 80112d4:	f000 f908 	bl	80114e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80112d8:	4b1d      	ldr	r3, [pc, #116]	; (8011350 <pvPortMalloc+0x188>)
 80112da:	681a      	ldr	r2, [r3, #0]
 80112dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112de:	685b      	ldr	r3, [r3, #4]
 80112e0:	1ad3      	subs	r3, r2, r3
 80112e2:	4a1b      	ldr	r2, [pc, #108]	; (8011350 <pvPortMalloc+0x188>)
 80112e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80112e6:	4b1a      	ldr	r3, [pc, #104]	; (8011350 <pvPortMalloc+0x188>)
 80112e8:	681a      	ldr	r2, [r3, #0]
 80112ea:	4b1b      	ldr	r3, [pc, #108]	; (8011358 <pvPortMalloc+0x190>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	429a      	cmp	r2, r3
 80112f0:	d203      	bcs.n	80112fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80112f2:	4b17      	ldr	r3, [pc, #92]	; (8011350 <pvPortMalloc+0x188>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	4a18      	ldr	r2, [pc, #96]	; (8011358 <pvPortMalloc+0x190>)
 80112f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80112fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112fc:	685a      	ldr	r2, [r3, #4]
 80112fe:	4b13      	ldr	r3, [pc, #76]	; (801134c <pvPortMalloc+0x184>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	431a      	orrs	r2, r3
 8011304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011306:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130a:	2200      	movs	r2, #0
 801130c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801130e:	4b13      	ldr	r3, [pc, #76]	; (801135c <pvPortMalloc+0x194>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	3301      	adds	r3, #1
 8011314:	4a11      	ldr	r2, [pc, #68]	; (801135c <pvPortMalloc+0x194>)
 8011316:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011318:	f7fe fc00 	bl	800fb1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801131c:	69fb      	ldr	r3, [r7, #28]
 801131e:	f003 0307 	and.w	r3, r3, #7
 8011322:	2b00      	cmp	r3, #0
 8011324:	d00a      	beq.n	801133c <pvPortMalloc+0x174>
	__asm volatile
 8011326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801132a:	f383 8811 	msr	BASEPRI, r3
 801132e:	f3bf 8f6f 	isb	sy
 8011332:	f3bf 8f4f 	dsb	sy
 8011336:	60fb      	str	r3, [r7, #12]
}
 8011338:	bf00      	nop
 801133a:	e7fe      	b.n	801133a <pvPortMalloc+0x172>
	return pvReturn;
 801133c:	69fb      	ldr	r3, [r7, #28]
}
 801133e:	4618      	mov	r0, r3
 8011340:	3728      	adds	r7, #40	; 0x28
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}
 8011346:	bf00      	nop
 8011348:	20005234 	.word	0x20005234
 801134c:	20005248 	.word	0x20005248
 8011350:	20005238 	.word	0x20005238
 8011354:	2000522c 	.word	0x2000522c
 8011358:	2000523c 	.word	0x2000523c
 801135c:	20005240 	.word	0x20005240

08011360 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b086      	sub	sp, #24
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d04d      	beq.n	801140e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011372:	2308      	movs	r3, #8
 8011374:	425b      	negs	r3, r3
 8011376:	697a      	ldr	r2, [r7, #20]
 8011378:	4413      	add	r3, r2
 801137a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801137c:	697b      	ldr	r3, [r7, #20]
 801137e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	685a      	ldr	r2, [r3, #4]
 8011384:	4b24      	ldr	r3, [pc, #144]	; (8011418 <vPortFree+0xb8>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	4013      	ands	r3, r2
 801138a:	2b00      	cmp	r3, #0
 801138c:	d10a      	bne.n	80113a4 <vPortFree+0x44>
	__asm volatile
 801138e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011392:	f383 8811 	msr	BASEPRI, r3
 8011396:	f3bf 8f6f 	isb	sy
 801139a:	f3bf 8f4f 	dsb	sy
 801139e:	60fb      	str	r3, [r7, #12]
}
 80113a0:	bf00      	nop
 80113a2:	e7fe      	b.n	80113a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80113a4:	693b      	ldr	r3, [r7, #16]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d00a      	beq.n	80113c2 <vPortFree+0x62>
	__asm volatile
 80113ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b0:	f383 8811 	msr	BASEPRI, r3
 80113b4:	f3bf 8f6f 	isb	sy
 80113b8:	f3bf 8f4f 	dsb	sy
 80113bc:	60bb      	str	r3, [r7, #8]
}
 80113be:	bf00      	nop
 80113c0:	e7fe      	b.n	80113c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80113c2:	693b      	ldr	r3, [r7, #16]
 80113c4:	685a      	ldr	r2, [r3, #4]
 80113c6:	4b14      	ldr	r3, [pc, #80]	; (8011418 <vPortFree+0xb8>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	4013      	ands	r3, r2
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d01e      	beq.n	801140e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d11a      	bne.n	801140e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80113d8:	693b      	ldr	r3, [r7, #16]
 80113da:	685a      	ldr	r2, [r3, #4]
 80113dc:	4b0e      	ldr	r3, [pc, #56]	; (8011418 <vPortFree+0xb8>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	43db      	mvns	r3, r3
 80113e2:	401a      	ands	r2, r3
 80113e4:	693b      	ldr	r3, [r7, #16]
 80113e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80113e8:	f7fe fb8a 	bl	800fb00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80113ec:	693b      	ldr	r3, [r7, #16]
 80113ee:	685a      	ldr	r2, [r3, #4]
 80113f0:	4b0a      	ldr	r3, [pc, #40]	; (801141c <vPortFree+0xbc>)
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	4413      	add	r3, r2
 80113f6:	4a09      	ldr	r2, [pc, #36]	; (801141c <vPortFree+0xbc>)
 80113f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80113fa:	6938      	ldr	r0, [r7, #16]
 80113fc:	f000 f874 	bl	80114e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011400:	4b07      	ldr	r3, [pc, #28]	; (8011420 <vPortFree+0xc0>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	3301      	adds	r3, #1
 8011406:	4a06      	ldr	r2, [pc, #24]	; (8011420 <vPortFree+0xc0>)
 8011408:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801140a:	f7fe fb87 	bl	800fb1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801140e:	bf00      	nop
 8011410:	3718      	adds	r7, #24
 8011412:	46bd      	mov	sp, r7
 8011414:	bd80      	pop	{r7, pc}
 8011416:	bf00      	nop
 8011418:	20005248 	.word	0x20005248
 801141c:	20005238 	.word	0x20005238
 8011420:	20005244 	.word	0x20005244

08011424 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011424:	b480      	push	{r7}
 8011426:	b085      	sub	sp, #20
 8011428:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801142a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801142e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011430:	4b27      	ldr	r3, [pc, #156]	; (80114d0 <prvHeapInit+0xac>)
 8011432:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	f003 0307 	and.w	r3, r3, #7
 801143a:	2b00      	cmp	r3, #0
 801143c:	d00c      	beq.n	8011458 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	3307      	adds	r3, #7
 8011442:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	f023 0307 	bic.w	r3, r3, #7
 801144a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801144c:	68ba      	ldr	r2, [r7, #8]
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	1ad3      	subs	r3, r2, r3
 8011452:	4a1f      	ldr	r2, [pc, #124]	; (80114d0 <prvHeapInit+0xac>)
 8011454:	4413      	add	r3, r2
 8011456:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801145c:	4a1d      	ldr	r2, [pc, #116]	; (80114d4 <prvHeapInit+0xb0>)
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011462:	4b1c      	ldr	r3, [pc, #112]	; (80114d4 <prvHeapInit+0xb0>)
 8011464:	2200      	movs	r2, #0
 8011466:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	68ba      	ldr	r2, [r7, #8]
 801146c:	4413      	add	r3, r2
 801146e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011470:	2208      	movs	r2, #8
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	1a9b      	subs	r3, r3, r2
 8011476:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	f023 0307 	bic.w	r3, r3, #7
 801147e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	4a15      	ldr	r2, [pc, #84]	; (80114d8 <prvHeapInit+0xb4>)
 8011484:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011486:	4b14      	ldr	r3, [pc, #80]	; (80114d8 <prvHeapInit+0xb4>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	2200      	movs	r2, #0
 801148c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801148e:	4b12      	ldr	r3, [pc, #72]	; (80114d8 <prvHeapInit+0xb4>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	2200      	movs	r2, #0
 8011494:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	68fa      	ldr	r2, [r7, #12]
 801149e:	1ad2      	subs	r2, r2, r3
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80114a4:	4b0c      	ldr	r3, [pc, #48]	; (80114d8 <prvHeapInit+0xb4>)
 80114a6:	681a      	ldr	r2, [r3, #0]
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	4a0a      	ldr	r2, [pc, #40]	; (80114dc <prvHeapInit+0xb8>)
 80114b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	685b      	ldr	r3, [r3, #4]
 80114b8:	4a09      	ldr	r2, [pc, #36]	; (80114e0 <prvHeapInit+0xbc>)
 80114ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80114bc:	4b09      	ldr	r3, [pc, #36]	; (80114e4 <prvHeapInit+0xc0>)
 80114be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80114c2:	601a      	str	r2, [r3, #0]
}
 80114c4:	bf00      	nop
 80114c6:	3714      	adds	r7, #20
 80114c8:	46bd      	mov	sp, r7
 80114ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ce:	4770      	bx	lr
 80114d0:	2000162c 	.word	0x2000162c
 80114d4:	2000522c 	.word	0x2000522c
 80114d8:	20005234 	.word	0x20005234
 80114dc:	2000523c 	.word	0x2000523c
 80114e0:	20005238 	.word	0x20005238
 80114e4:	20005248 	.word	0x20005248

080114e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80114e8:	b480      	push	{r7}
 80114ea:	b085      	sub	sp, #20
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80114f0:	4b28      	ldr	r3, [pc, #160]	; (8011594 <prvInsertBlockIntoFreeList+0xac>)
 80114f2:	60fb      	str	r3, [r7, #12]
 80114f4:	e002      	b.n	80114fc <prvInsertBlockIntoFreeList+0x14>
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	60fb      	str	r3, [r7, #12]
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	687a      	ldr	r2, [r7, #4]
 8011502:	429a      	cmp	r2, r3
 8011504:	d8f7      	bhi.n	80114f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	685b      	ldr	r3, [r3, #4]
 801150e:	68ba      	ldr	r2, [r7, #8]
 8011510:	4413      	add	r3, r2
 8011512:	687a      	ldr	r2, [r7, #4]
 8011514:	429a      	cmp	r2, r3
 8011516:	d108      	bne.n	801152a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	685a      	ldr	r2, [r3, #4]
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	441a      	add	r2, r3
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	685b      	ldr	r3, [r3, #4]
 8011532:	68ba      	ldr	r2, [r7, #8]
 8011534:	441a      	add	r2, r3
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	429a      	cmp	r2, r3
 801153c:	d118      	bne.n	8011570 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	4b15      	ldr	r3, [pc, #84]	; (8011598 <prvInsertBlockIntoFreeList+0xb0>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	429a      	cmp	r2, r3
 8011548:	d00d      	beq.n	8011566 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	685a      	ldr	r2, [r3, #4]
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	441a      	add	r2, r3
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	681a      	ldr	r2, [r3, #0]
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	601a      	str	r2, [r3, #0]
 8011564:	e008      	b.n	8011578 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011566:	4b0c      	ldr	r3, [pc, #48]	; (8011598 <prvInsertBlockIntoFreeList+0xb0>)
 8011568:	681a      	ldr	r2, [r3, #0]
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	601a      	str	r2, [r3, #0]
 801156e:	e003      	b.n	8011578 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	681a      	ldr	r2, [r3, #0]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011578:	68fa      	ldr	r2, [r7, #12]
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	429a      	cmp	r2, r3
 801157e:	d002      	beq.n	8011586 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	687a      	ldr	r2, [r7, #4]
 8011584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011586:	bf00      	nop
 8011588:	3714      	adds	r7, #20
 801158a:	46bd      	mov	sp, r7
 801158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011590:	4770      	bx	lr
 8011592:	bf00      	nop
 8011594:	2000522c 	.word	0x2000522c
 8011598:	20005234 	.word	0x20005234

0801159c <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 80115a0:	f003 fffc 	bl	801559c <touchgfx_init>
}
 80115a4:	bf00      	nop
 80115a6:	bd80      	pop	{r7, pc}

080115a8 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 80115a8:	b480      	push	{r7}
 80115aa:	b083      	sub	sp, #12
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
    {
 80115b0:	4a04      	ldr	r2, [pc, #16]	; (80115c4 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	601a      	str	r2, [r3, #0]
    }
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	4618      	mov	r0, r3
 80115ba:	370c      	adds	r7, #12
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr
 80115c4:	0802a4fc 	.word	0x0802a4fc

080115c8 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b082      	sub	sp, #8
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
    }
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f7ff ffe9 	bl	80115a8 <_ZN8touchgfx12FontProviderD1Ev>
 80115d6:	2104      	movs	r1, #4
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f017 f82e 	bl	802863a <_ZdlPvj>
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	4618      	mov	r0, r3
 80115e2:	3708      	adds	r7, #8
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd80      	pop	{r7, pc}

080115e8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b082      	sub	sp, #8
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
 80115f0:	460b      	mov	r3, r1
 80115f2:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80115f4:	887b      	ldrh	r3, [r7, #2]
 80115f6:	2b02      	cmp	r3, #2
 80115f8:	d010      	beq.n	801161c <_ZN23ApplicationFontProvider7getFontEt+0x34>
 80115fa:	2b02      	cmp	r3, #2
 80115fc:	dc13      	bgt.n	8011626 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d002      	beq.n	8011608 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8011602:	2b01      	cmp	r3, #1
 8011604:	d005      	beq.n	8011612 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8011606:	e00e      	b.n	8011626 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8011608:	f002 fe22 	bl	8014250 <_ZN17TypedTextDatabase8getFontsEv>
 801160c:	4603      	mov	r3, r0
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	e00a      	b.n	8011628 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8011612:	f002 fe1d 	bl	8014250 <_ZN17TypedTextDatabase8getFontsEv>
 8011616:	4603      	mov	r3, r0
 8011618:	685b      	ldr	r3, [r3, #4]
 801161a:	e005      	b.n	8011628 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 801161c:	f002 fe18 	bl	8014250 <_ZN17TypedTextDatabase8getFontsEv>
 8011620:	4603      	mov	r3, r0
 8011622:	689b      	ldr	r3, [r3, #8]
 8011624:	e000      	b.n	8011628 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8011626:	2300      	movs	r3, #0
    }
}
 8011628:	4618      	mov	r0, r3
 801162a:	3708      	adds	r7, #8
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}

08011630 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8011630:	b580      	push	{r7, lr}
 8011632:	b082      	sub	sp, #8
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
 8011638:	4a05      	ldr	r2, [pc, #20]	; (8011650 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	601a      	str	r2, [r3, #0]
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	4618      	mov	r0, r3
 8011642:	f7ff ffb1 	bl	80115a8 <_ZN8touchgfx12FontProviderD1Ev>
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	4618      	mov	r0, r3
 801164a:	3708      	adds	r7, #8
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}
 8011650:	0802a4e8 	.word	0x0802a4e8

08011654 <_ZN23ApplicationFontProviderD0Ev>:
 8011654:	b580      	push	{r7, lr}
 8011656:	b082      	sub	sp, #8
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f7ff ffe7 	bl	8011630 <_ZN23ApplicationFontProviderD1Ev>
 8011662:	2104      	movs	r1, #4
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f016 ffe8 	bl	802863a <_ZdlPvj>
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	4618      	mov	r0, r3
 801166e:	3708      	adds	r7, #8
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}

08011674 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8011674:	b480      	push	{r7}
 8011676:	b083      	sub	sp, #12
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
    {
 801167c:	4a04      	ldr	r2, [pc, #16]	; (8011690 <_ZN8touchgfx4FontD1Ev+0x1c>)
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	601a      	str	r2, [r3, #0]
    }
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	4618      	mov	r0, r3
 8011686:	370c      	adds	r7, #12
 8011688:	46bd      	mov	sp, r7
 801168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168e:	4770      	bx	lr
 8011690:	0802a8bc 	.word	0x0802a8bc

08011694 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8011694:	b580      	push	{r7, lr}
 8011696:	b082      	sub	sp, #8
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
    }
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	f7ff ffe9 	bl	8011674 <_ZN8touchgfx4FontD1Ev>
 80116a2:	2110      	movs	r1, #16
 80116a4:	6878      	ldr	r0, [r7, #4]
 80116a6:	f016 ffc8 	bl	802863a <_ZdlPvj>
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	4618      	mov	r0, r3
 80116ae:	3708      	adds	r7, #8
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd80      	pop	{r7, pc}

080116b4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80116b4:	b590      	push	{r4, r7, lr}
 80116b6:	b087      	sub	sp, #28
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
 80116bc:	460b      	mov	r3, r1
 80116be:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 80116c0:	887b      	ldrh	r3, [r7, #2]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d101      	bne.n	80116ca <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 80116c6:	2300      	movs	r3, #0
 80116c8:	e010      	b.n	80116ec <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 80116ca:	2300      	movs	r3, #0
 80116cc:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 80116ce:	2300      	movs	r3, #0
 80116d0:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	3308      	adds	r3, #8
 80116d8:	681c      	ldr	r4, [r3, #0]
 80116da:	f107 030f 	add.w	r3, r7, #15
 80116de:	f107 0210 	add.w	r2, r7, #16
 80116e2:	8879      	ldrh	r1, [r7, #2]
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	47a0      	blx	r4
 80116e8:	6178      	str	r0, [r7, #20]
        return glyph;
 80116ea:	697b      	ldr	r3, [r7, #20]
    }
 80116ec:	4618      	mov	r0, r3
 80116ee:	371c      	adds	r7, #28
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd90      	pop	{r4, r7, pc}

080116f4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80116f4:	b480      	push	{r7}
 80116f6:	b083      	sub	sp, #12
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	895b      	ldrh	r3, [r3, #10]
    }
 8011700:	4618      	mov	r0, r3
 8011702:	370c      	adds	r7, #12
 8011704:	46bd      	mov	sp, r7
 8011706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170a:	4770      	bx	lr

0801170c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 801170c:	b480      	push	{r7}
 801170e:	b083      	sub	sp, #12
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	899b      	ldrh	r3, [r3, #12]
    }
 8011718:	4618      	mov	r0, r3
 801171a:	370c      	adds	r7, #12
 801171c:	46bd      	mov	sp, r7
 801171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011722:	4770      	bx	lr

08011724 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8011724:	b480      	push	{r7}
 8011726:	b083      	sub	sp, #12
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	889b      	ldrh	r3, [r3, #4]
    }
 8011730:	4618      	mov	r0, r3
 8011732:	370c      	adds	r7, #12
 8011734:	46bd      	mov	sp, r7
 8011736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173a:	4770      	bx	lr

0801173c <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 801173c:	b480      	push	{r7}
 801173e:	b083      	sub	sp, #12
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	889a      	ldrh	r2, [r3, #4]
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	799b      	ldrb	r3, [r3, #6]
 801174c:	b29b      	uxth	r3, r3
 801174e:	4413      	add	r3, r2
 8011750:	b29b      	uxth	r3, r3
    }
 8011752:	4618      	mov	r0, r3
 8011754:	370c      	adds	r7, #12
 8011756:	46bd      	mov	sp, r7
 8011758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175c:	4770      	bx	lr

0801175e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 801175e:	b480      	push	{r7}
 8011760:	b083      	sub	sp, #12
 8011762:	af00      	add	r7, sp, #0
 8011764:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	79db      	ldrb	r3, [r3, #7]
 801176a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 801176e:	b2db      	uxtb	r3, r3
    }
 8011770:	4618      	mov	r0, r3
 8011772:	370c      	adds	r7, #12
 8011774:	46bd      	mov	sp, r7
 8011776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177a:	4770      	bx	lr

0801177c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 801177c:	b480      	push	{r7}
 801177e:	b083      	sub	sp, #12
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	79db      	ldrb	r3, [r3, #7]
 8011788:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801178c:	b2db      	uxtb	r3, r3
    }
 801178e:	4618      	mov	r0, r3
 8011790:	370c      	adds	r7, #12
 8011792:	46bd      	mov	sp, r7
 8011794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011798:	4770      	bx	lr
	...

0801179c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 801179c:	b580      	push	{r7, lr}
 801179e:	b082      	sub	sp, #8
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
 80117a4:	4a05      	ldr	r2, [pc, #20]	; (80117bc <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	601a      	str	r2, [r3, #0]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	4618      	mov	r0, r3
 80117ae:	f7ff ff61 	bl	8011674 <_ZN8touchgfx4FontD1Ev>
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	4618      	mov	r0, r3
 80117b6:	3708      	adds	r7, #8
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}
 80117bc:	0802c2c8 	.word	0x0802c2c8

080117c0 <_ZN8touchgfx9ConstFontD0Ev>:
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b082      	sub	sp, #8
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f7ff ffe7 	bl	801179c <_ZN8touchgfx9ConstFontD1Ev>
 80117ce:	2118      	movs	r1, #24
 80117d0:	6878      	ldr	r0, [r7, #4]
 80117d2:	f016 ff32 	bl	802863a <_ZdlPvj>
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	4618      	mov	r0, r3
 80117da:	3708      	adds	r7, #8
 80117dc:	46bd      	mov	sp, r7
 80117de:	bd80      	pop	{r7, pc}

080117e0 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
 80117e8:	4a05      	ldr	r2, [pc, #20]	; (8011800 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	601a      	str	r2, [r3, #0]
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	4618      	mov	r0, r3
 80117f2:	f7ff ffd3 	bl	801179c <_ZN8touchgfx9ConstFontD1Ev>
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	4618      	mov	r0, r3
 80117fa:	3708      	adds	r7, #8
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}
 8011800:	0802a520 	.word	0x0802a520

08011804 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8011804:	b580      	push	{r7, lr}
 8011806:	b082      	sub	sp, #8
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f7ff ffe7 	bl	80117e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8011812:	2124      	movs	r1, #36	; 0x24
 8011814:	6878      	ldr	r0, [r7, #4]
 8011816:	f016 ff10 	bl	802863a <_ZdlPvj>
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	4618      	mov	r0, r3
 801181e:	3708      	adds	r7, #8
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}

08011824 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 8011824:	b480      	push	{r7}
 8011826:	b083      	sub	sp, #12
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
    {
 801182c:	4a04      	ldr	r2, [pc, #16]	; (8011840 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	601a      	str	r2, [r3, #0]
    }
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	4618      	mov	r0, r3
 8011836:	370c      	adds	r7, #12
 8011838:	46bd      	mov	sp, r7
 801183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183e:	4770      	bx	lr
 8011840:	0802a510 	.word	0x0802a510

08011844 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8011844:	b580      	push	{r7, lr}
 8011846:	b082      	sub	sp, #8
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
    }
 801184c:	6878      	ldr	r0, [r7, #4]
 801184e:	f7ff ffe9 	bl	8011824 <_ZN8touchgfx9TypedTextD1Ev>
 8011852:	2108      	movs	r1, #8
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f016 fef0 	bl	802863a <_ZdlPvj>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	4618      	mov	r0, r3
 801185e:	3708      	adds	r7, #8
 8011860:	46bd      	mov	sp, r7
 8011862:	bd80      	pop	{r7, pc}

08011864 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8011864:	b480      	push	{r7}
 8011866:	b083      	sub	sp, #12
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	6a1b      	ldr	r3, [r3, #32]
    }
 8011870:	4618      	mov	r0, r3
 8011872:	370c      	adds	r7, #12
 8011874:	46bd      	mov	sp, r7
 8011876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187a:	4770      	bx	lr

0801187c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 801187c:	b580      	push	{r7, lr}
 801187e:	b08c      	sub	sp, #48	; 0x30
 8011880:	af08      	add	r7, sp, #32
 8011882:	60f8      	str	r0, [r7, #12]
 8011884:	60b9      	str	r1, [r7, #8]
 8011886:	4611      	mov	r1, r2
 8011888:	461a      	mov	r2, r3
 801188a:	460b      	mov	r3, r1
 801188c:	80fb      	strh	r3, [r7, #6]
 801188e:	4613      	mov	r3, r2
 8011890:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 8011892:	68f8      	ldr	r0, [r7, #12]
 8011894:	88b9      	ldrh	r1, [r7, #4]
 8011896:	88fa      	ldrh	r2, [r7, #6]
 8011898:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801189a:	9306      	str	r3, [sp, #24]
 801189c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801189e:	9305      	str	r3, [sp, #20]
 80118a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80118a4:	9304      	str	r3, [sp, #16]
 80118a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80118aa:	9303      	str	r3, [sp, #12]
 80118ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80118b0:	9302      	str	r3, [sp, #8]
 80118b2:	7f3b      	ldrb	r3, [r7, #28]
 80118b4:	9301      	str	r3, [sp, #4]
 80118b6:	7e3b      	ldrb	r3, [r7, #24]
 80118b8:	9300      	str	r3, [sp, #0]
 80118ba:	460b      	mov	r3, r1
 80118bc:	68b9      	ldr	r1, [r7, #8]
 80118be:	f009 fb6f 	bl	801afa0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80118c2:	4a08      	ldr	r2, [pc, #32]	; (80118e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	601a      	str	r2, [r3, #0]
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118cc:	619a      	str	r2, [r3, #24]
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118d2:	61da      	str	r2, [r3, #28]
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80118d8:	621a      	str	r2, [r3, #32]
{
}
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	4618      	mov	r0, r3
 80118de:	3710      	adds	r7, #16
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}
 80118e4:	0802a520 	.word	0x0802a520

080118e8 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 80118e8:	b480      	push	{r7}
 80118ea:	b085      	sub	sp, #20
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
 80118f0:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	699b      	ldr	r3, [r3, #24]
 80118f6:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	889b      	ldrh	r3, [r3, #4]
 80118fc:	0adb      	lsrs	r3, r3, #11
 80118fe:	b29b      	uxth	r3, r3
 8011900:	009b      	lsls	r3, r3, #2
 8011902:	68fa      	ldr	r2, [r7, #12]
 8011904:	4413      	add	r3, r2
 8011906:	681a      	ldr	r2, [r3, #0]
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	4413      	add	r3, r2
}
 801190e:	4618      	mov	r0, r3
 8011910:	3714      	adds	r7, #20
 8011912:	46bd      	mov	sp, r7
 8011914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011918:	4770      	bx	lr

0801191a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 801191a:	b480      	push	{r7}
 801191c:	b089      	sub	sp, #36	; 0x24
 801191e:	af00      	add	r7, sp, #0
 8011920:	60f8      	str	r0, [r7, #12]
 8011922:	460b      	mov	r3, r1
 8011924:	607a      	str	r2, [r7, #4]
 8011926:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d003      	beq.n	8011936 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	7b1b      	ldrb	r3, [r3, #12]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d101      	bne.n	801193a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8011936:	2300      	movs	r3, #0
 8011938:	e030      	b.n	801199c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	69da      	ldr	r2, [r3, #28]
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8011942:	697b      	ldr	r3, [r7, #20]
 8011944:	7b5b      	ldrb	r3, [r3, #13]
 8011946:	021b      	lsls	r3, r3, #8
 8011948:	b21b      	sxth	r3, r3
 801194a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801194e:	b219      	sxth	r1, r3
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	7adb      	ldrb	r3, [r3, #11]
 8011954:	b21b      	sxth	r3, r3
 8011956:	430b      	orrs	r3, r1
 8011958:	b21b      	sxth	r3, r3
 801195a:	b29b      	uxth	r3, r3
 801195c:	009b      	lsls	r3, r3, #2
 801195e:	4413      	add	r3, r2
 8011960:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	7b1b      	ldrb	r3, [r3, #12]
 8011966:	837b      	strh	r3, [r7, #26]
 8011968:	8b7b      	ldrh	r3, [r7, #26]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d015      	beq.n	801199a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 801196e:	69fb      	ldr	r3, [r7, #28]
 8011970:	881b      	ldrh	r3, [r3, #0]
 8011972:	897a      	ldrh	r2, [r7, #10]
 8011974:	429a      	cmp	r2, r3
 8011976:	d103      	bne.n	8011980 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8011978:	69fb      	ldr	r3, [r7, #28]
 801197a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801197e:	e00d      	b.n	801199c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8011980:	69fb      	ldr	r3, [r7, #28]
 8011982:	881b      	ldrh	r3, [r3, #0]
 8011984:	897a      	ldrh	r2, [r7, #10]
 8011986:	429a      	cmp	r2, r3
 8011988:	d306      	bcc.n	8011998 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 801198a:	8b7b      	ldrh	r3, [r7, #26]
 801198c:	3b01      	subs	r3, #1
 801198e:	837b      	strh	r3, [r7, #26]
 8011990:	69fb      	ldr	r3, [r7, #28]
 8011992:	3304      	adds	r3, #4
 8011994:	61fb      	str	r3, [r7, #28]
 8011996:	e7e7      	b.n	8011968 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8011998:	bf00      	nop
        }
    }
    return 0;
 801199a:	2300      	movs	r3, #0
}
 801199c:	4618      	mov	r0, r3
 801199e:	3724      	adds	r7, #36	; 0x24
 80119a0:	46bd      	mov	sp, r7
 80119a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a6:	4770      	bx	lr

080119a8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 80119a8:	b580      	push	{r7, lr}
 80119aa:	af00      	add	r7, sp, #0
 80119ac:	4801      	ldr	r0, [pc, #4]	; (80119b4 <__tcf_0+0xc>)
 80119ae:	f7ff ff17 	bl	80117e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 80119b2:	bd80      	pop	{r7, pc}
 80119b4:	2000524c 	.word	0x2000524c

080119b8 <_Z23getFont_verdana_10_4bppv>:
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b08a      	sub	sp, #40	; 0x28
 80119bc:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 80119be:	4b1e      	ldr	r3, [pc, #120]	; (8011a38 <_Z23getFont_verdana_10_4bppv+0x80>)
 80119c0:	781b      	ldrb	r3, [r3, #0]
 80119c2:	f3bf 8f5b 	dmb	ish
 80119c6:	b2db      	uxtb	r3, r3
 80119c8:	f003 0301 	and.w	r3, r3, #1
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	bf0c      	ite	eq
 80119d0:	2301      	moveq	r3, #1
 80119d2:	2300      	movne	r3, #0
 80119d4:	b2db      	uxtb	r3, r3
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d02a      	beq.n	8011a30 <_Z23getFont_verdana_10_4bppv+0x78>
 80119da:	4817      	ldr	r0, [pc, #92]	; (8011a38 <_Z23getFont_verdana_10_4bppv+0x80>)
 80119dc:	f016 fe2f 	bl	802863e <__cxa_guard_acquire>
 80119e0:	4603      	mov	r3, r0
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	bf14      	ite	ne
 80119e6:	2301      	movne	r3, #1
 80119e8:	2300      	moveq	r3, #0
 80119ea:	b2db      	uxtb	r3, r3
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d01f      	beq.n	8011a30 <_Z23getFont_verdana_10_4bppv+0x78>
 80119f0:	2300      	movs	r3, #0
 80119f2:	9309      	str	r3, [sp, #36]	; 0x24
 80119f4:	2300      	movs	r3, #0
 80119f6:	9308      	str	r3, [sp, #32]
 80119f8:	233f      	movs	r3, #63	; 0x3f
 80119fa:	9307      	str	r3, [sp, #28]
 80119fc:	4b0f      	ldr	r3, [pc, #60]	; (8011a3c <_Z23getFont_verdana_10_4bppv+0x84>)
 80119fe:	9306      	str	r3, [sp, #24]
 8011a00:	4b0f      	ldr	r3, [pc, #60]	; (8011a40 <_Z23getFont_verdana_10_4bppv+0x88>)
 8011a02:	9305      	str	r3, [sp, #20]
 8011a04:	2300      	movs	r3, #0
 8011a06:	9304      	str	r3, [sp, #16]
 8011a08:	2300      	movs	r3, #0
 8011a0a:	9303      	str	r3, [sp, #12]
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	9302      	str	r3, [sp, #8]
 8011a10:	2304      	movs	r3, #4
 8011a12:	9301      	str	r3, [sp, #4]
 8011a14:	2300      	movs	r3, #0
 8011a16:	9300      	str	r3, [sp, #0]
 8011a18:	230a      	movs	r3, #10
 8011a1a:	2201      	movs	r2, #1
 8011a1c:	4909      	ldr	r1, [pc, #36]	; (8011a44 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8011a1e:	480a      	ldr	r0, [pc, #40]	; (8011a48 <_Z23getFont_verdana_10_4bppv+0x90>)
 8011a20:	f7ff ff2c 	bl	801187c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8011a24:	4809      	ldr	r0, [pc, #36]	; (8011a4c <_Z23getFont_verdana_10_4bppv+0x94>)
 8011a26:	f016 fe55 	bl	80286d4 <atexit>
 8011a2a:	4803      	ldr	r0, [pc, #12]	; (8011a38 <_Z23getFont_verdana_10_4bppv+0x80>)
 8011a2c:	f016 fe13 	bl	8028656 <__cxa_guard_release>
    return verdana_10_4bpp;
 8011a30:	4b05      	ldr	r3, [pc, #20]	; (8011a48 <_Z23getFont_verdana_10_4bppv+0x90>)
}
 8011a32:	4618      	mov	r0, r3
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}
 8011a38:	20005270 	.word	0x20005270
 8011a3c:	0802da54 	.word	0x0802da54
 8011a40:	0802a56c 	.word	0x0802a56c
 8011a44:	0802da08 	.word	0x0802da08
 8011a48:	2000524c 	.word	0x2000524c
 8011a4c:	080119a9 	.word	0x080119a9

08011a50 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 3, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8011a50:	b580      	push	{r7, lr}
 8011a52:	af00      	add	r7, sp, #0
 8011a54:	4801      	ldr	r0, [pc, #4]	; (8011a5c <__tcf_0+0xc>)
 8011a56:	f7ff fec3 	bl	80117e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8011a5a:	bd80      	pop	{r7, pc}
 8011a5c:	20005274 	.word	0x20005274

08011a60 <_Z23getFont_verdana_20_4bppv>:
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b08a      	sub	sp, #40	; 0x28
 8011a64:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 3, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8011a66:	4b1e      	ldr	r3, [pc, #120]	; (8011ae0 <_Z23getFont_verdana_20_4bppv+0x80>)
 8011a68:	781b      	ldrb	r3, [r3, #0]
 8011a6a:	f3bf 8f5b 	dmb	ish
 8011a6e:	b2db      	uxtb	r3, r3
 8011a70:	f003 0301 	and.w	r3, r3, #1
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	bf0c      	ite	eq
 8011a78:	2301      	moveq	r3, #1
 8011a7a:	2300      	movne	r3, #0
 8011a7c:	b2db      	uxtb	r3, r3
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d02a      	beq.n	8011ad8 <_Z23getFont_verdana_20_4bppv+0x78>
 8011a82:	4817      	ldr	r0, [pc, #92]	; (8011ae0 <_Z23getFont_verdana_20_4bppv+0x80>)
 8011a84:	f016 fddb 	bl	802863e <__cxa_guard_acquire>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	bf14      	ite	ne
 8011a8e:	2301      	movne	r3, #1
 8011a90:	2300      	moveq	r3, #0
 8011a92:	b2db      	uxtb	r3, r3
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d01f      	beq.n	8011ad8 <_Z23getFont_verdana_20_4bppv+0x78>
 8011a98:	2300      	movs	r3, #0
 8011a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	9308      	str	r3, [sp, #32]
 8011aa0:	233f      	movs	r3, #63	; 0x3f
 8011aa2:	9307      	str	r3, [sp, #28]
 8011aa4:	4b0f      	ldr	r3, [pc, #60]	; (8011ae4 <_Z23getFont_verdana_20_4bppv+0x84>)
 8011aa6:	9306      	str	r3, [sp, #24]
 8011aa8:	4b0f      	ldr	r3, [pc, #60]	; (8011ae8 <_Z23getFont_verdana_20_4bppv+0x88>)
 8011aaa:	9305      	str	r3, [sp, #20]
 8011aac:	2300      	movs	r3, #0
 8011aae:	9304      	str	r3, [sp, #16]
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	9303      	str	r3, [sp, #12]
 8011ab4:	2301      	movs	r3, #1
 8011ab6:	9302      	str	r3, [sp, #8]
 8011ab8:	2304      	movs	r3, #4
 8011aba:	9301      	str	r3, [sp, #4]
 8011abc:	2300      	movs	r3, #0
 8011abe:	9300      	str	r3, [sp, #0]
 8011ac0:	2314      	movs	r3, #20
 8011ac2:	2203      	movs	r2, #3
 8011ac4:	4909      	ldr	r1, [pc, #36]	; (8011aec <_Z23getFont_verdana_20_4bppv+0x8c>)
 8011ac6:	480a      	ldr	r0, [pc, #40]	; (8011af0 <_Z23getFont_verdana_20_4bppv+0x90>)
 8011ac8:	f7ff fed8 	bl	801187c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8011acc:	4809      	ldr	r0, [pc, #36]	; (8011af4 <_Z23getFont_verdana_20_4bppv+0x94>)
 8011ace:	f016 fe01 	bl	80286d4 <atexit>
 8011ad2:	4803      	ldr	r0, [pc, #12]	; (8011ae0 <_Z23getFont_verdana_20_4bppv+0x80>)
 8011ad4:	f016 fdbf 	bl	8028656 <__cxa_guard_release>
    return verdana_20_4bpp;
 8011ad8:	4b05      	ldr	r3, [pc, #20]	; (8011af0 <_Z23getFont_verdana_20_4bppv+0x90>)
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	46bd      	mov	sp, r7
 8011ade:	bd80      	pop	{r7, pc}
 8011ae0:	20005298 	.word	0x20005298
 8011ae4:	0802da58 	.word	0x0802da58
 8011ae8:	0802a570 	.word	0x0802a570
 8011aec:	0802da18 	.word	0x0802da18
 8011af0:	20005274 	.word	0x20005274
 8011af4:	08011a51 	.word	0x08011a51

08011af8 <__tcf_0>:

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8011af8:	b580      	push	{r7, lr}
 8011afa:	af00      	add	r7, sp, #0
 8011afc:	4801      	ldr	r0, [pc, #4]	; (8011b04 <__tcf_0+0xc>)
 8011afe:	f7ff fe6f 	bl	80117e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8011b02:	bd80      	pop	{r7, pc}
 8011b04:	2000529c 	.word	0x2000529c

08011b08 <_Z23getFont_verdana_40_4bppv>:
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b08a      	sub	sp, #40	; 0x28
 8011b0c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8011b0e:	4b1e      	ldr	r3, [pc, #120]	; (8011b88 <_Z23getFont_verdana_40_4bppv+0x80>)
 8011b10:	781b      	ldrb	r3, [r3, #0]
 8011b12:	f3bf 8f5b 	dmb	ish
 8011b16:	b2db      	uxtb	r3, r3
 8011b18:	f003 0301 	and.w	r3, r3, #1
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	bf0c      	ite	eq
 8011b20:	2301      	moveq	r3, #1
 8011b22:	2300      	movne	r3, #0
 8011b24:	b2db      	uxtb	r3, r3
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d02a      	beq.n	8011b80 <_Z23getFont_verdana_40_4bppv+0x78>
 8011b2a:	4817      	ldr	r0, [pc, #92]	; (8011b88 <_Z23getFont_verdana_40_4bppv+0x80>)
 8011b2c:	f016 fd87 	bl	802863e <__cxa_guard_acquire>
 8011b30:	4603      	mov	r3, r0
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	bf14      	ite	ne
 8011b36:	2301      	movne	r3, #1
 8011b38:	2300      	moveq	r3, #0
 8011b3a:	b2db      	uxtb	r3, r3
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d01f      	beq.n	8011b80 <_Z23getFont_verdana_40_4bppv+0x78>
 8011b40:	2300      	movs	r3, #0
 8011b42:	9309      	str	r3, [sp, #36]	; 0x24
 8011b44:	2300      	movs	r3, #0
 8011b46:	9308      	str	r3, [sp, #32]
 8011b48:	233f      	movs	r3, #63	; 0x3f
 8011b4a:	9307      	str	r3, [sp, #28]
 8011b4c:	4b0f      	ldr	r3, [pc, #60]	; (8011b8c <_Z23getFont_verdana_40_4bppv+0x84>)
 8011b4e:	9306      	str	r3, [sp, #24]
 8011b50:	4b0f      	ldr	r3, [pc, #60]	; (8011b90 <_Z23getFont_verdana_40_4bppv+0x88>)
 8011b52:	9305      	str	r3, [sp, #20]
 8011b54:	2300      	movs	r3, #0
 8011b56:	9304      	str	r3, [sp, #16]
 8011b58:	2300      	movs	r3, #0
 8011b5a:	9303      	str	r3, [sp, #12]
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	9302      	str	r3, [sp, #8]
 8011b60:	2304      	movs	r3, #4
 8011b62:	9301      	str	r3, [sp, #4]
 8011b64:	2300      	movs	r3, #0
 8011b66:	9300      	str	r3, [sp, #0]
 8011b68:	2328      	movs	r3, #40	; 0x28
 8011b6a:	2201      	movs	r2, #1
 8011b6c:	4909      	ldr	r1, [pc, #36]	; (8011b94 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8011b6e:	480a      	ldr	r0, [pc, #40]	; (8011b98 <_Z23getFont_verdana_40_4bppv+0x90>)
 8011b70:	f7ff fe84 	bl	801187c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8011b74:	4809      	ldr	r0, [pc, #36]	; (8011b9c <_Z23getFont_verdana_40_4bppv+0x94>)
 8011b76:	f016 fdad 	bl	80286d4 <atexit>
 8011b7a:	4803      	ldr	r0, [pc, #12]	; (8011b88 <_Z23getFont_verdana_40_4bppv+0x80>)
 8011b7c:	f016 fd6b 	bl	8028656 <__cxa_guard_release>
    return verdana_40_4bpp;
 8011b80:	4b05      	ldr	r3, [pc, #20]	; (8011b98 <_Z23getFont_verdana_40_4bppv+0x90>)
}
 8011b82:	4618      	mov	r0, r3
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}
 8011b88:	200052c0 	.word	0x200052c0
 8011b8c:	0802da5c 	.word	0x0802da5c
 8011b90:	0802a574 	.word	0x0802a574
 8011b94:	0802da44 	.word	0x0802da44
 8011b98:	2000529c 	.word	0x2000529c
 8011b9c:	08011af9 	.word	0x08011af9

08011ba0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8011ba0:	b480      	push	{r7}
 8011ba2:	b083      	sub	sp, #12
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
 8011ba8:	6039      	str	r1, [r7, #0]
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	4618      	mov	r0, r3
 8011bae:	370c      	adds	r7, #12
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb6:	4770      	bx	lr

08011bb8 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8011bb8:	b480      	push	{r7}
 8011bba:	b083      	sub	sp, #12
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
 8011bc0:	6039      	str	r1, [r7, #0]
    {
    }
 8011bc2:	bf00      	nop
 8011bc4:	370c      	adds	r7, #12
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bcc:	4770      	bx	lr

08011bce <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8011bce:	b480      	push	{r7}
 8011bd0:	b083      	sub	sp, #12
 8011bd2:	af00      	add	r7, sp, #0
 8011bd4:	6078      	str	r0, [r7, #4]
 8011bd6:	6039      	str	r1, [r7, #0]
    {
    }
 8011bd8:	bf00      	nop
 8011bda:	370c      	adds	r7, #12
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be2:	4770      	bx	lr

08011be4 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8011be4:	b480      	push	{r7}
 8011be6:	b083      	sub	sp, #12
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
 8011bec:	6039      	str	r1, [r7, #0]
    {
    }
 8011bee:	bf00      	nop
 8011bf0:	370c      	adds	r7, #12
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf8:	4770      	bx	lr

08011bfa <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8011bfa:	b480      	push	{r7}
 8011bfc:	b083      	sub	sp, #12
 8011bfe:	af00      	add	r7, sp, #0
 8011c00:	6078      	str	r0, [r7, #4]
 8011c02:	460b      	mov	r3, r1
 8011c04:	70fb      	strb	r3, [r7, #3]
    {
    }
 8011c06:	bf00      	nop
 8011c08:	370c      	adds	r7, #12
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c10:	4770      	bx	lr

08011c12 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8011c12:	b480      	push	{r7}
 8011c14:	b083      	sub	sp, #12
 8011c16:	af00      	add	r7, sp, #0
 8011c18:	6078      	str	r0, [r7, #4]
    {
    }
 8011c1a:	bf00      	nop
 8011c1c:	370c      	adds	r7, #12
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c24:	4770      	bx	lr

08011c26 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8011c26:	b480      	push	{r7}
 8011c28:	b083      	sub	sp, #12
 8011c2a:	af00      	add	r7, sp, #0
 8011c2c:	6078      	str	r0, [r7, #4]
    {
    }
 8011c2e:	bf00      	nop
 8011c30:	370c      	adds	r7, #12
 8011c32:	46bd      	mov	sp, r7
 8011c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c38:	4770      	bx	lr
	...

08011c3c <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8011c3c:	b480      	push	{r7}
 8011c3e:	b083      	sub	sp, #12
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
    {
 8011c44:	4a04      	ldr	r2, [pc, #16]	; (8011c58 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	601a      	str	r2, [r3, #0]
    }
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	370c      	adds	r7, #12
 8011c50:	46bd      	mov	sp, r7
 8011c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c56:	4770      	bx	lr
 8011c58:	0802a740 	.word	0x0802a740

08011c5c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b082      	sub	sp, #8
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
    }
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f7ff ffe9 	bl	8011c3c <_ZN8touchgfx15UIEventListenerD1Ev>
 8011c6a:	2104      	movs	r1, #4
 8011c6c:	6878      	ldr	r0, [r7, #4]
 8011c6e:	f016 fce4 	bl	802863a <_ZdlPvj>
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	4618      	mov	r0, r3
 8011c76:	3708      	adds	r7, #8
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}

08011c7c <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8011c7c:	b480      	push	{r7}
 8011c7e:	b083      	sub	sp, #12
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	460b      	mov	r3, r1
 8011c86:	70fb      	strb	r3, [r7, #3]
    {
    }
 8011c88:	bf00      	nop
 8011c8a:	370c      	adds	r7, #12
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c92:	4770      	bx	lr

08011c94 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8011c94:	b480      	push	{r7}
 8011c96:	b083      	sub	sp, #12
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
 8011c9c:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	683a      	ldr	r2, [r7, #0]
 8011ca2:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8011ca6:	6810      	ldr	r0, [r2, #0]
 8011ca8:	6851      	ldr	r1, [r2, #4]
 8011caa:	c303      	stmia	r3!, {r0, r1}
    };
 8011cac:	bf00      	nop
 8011cae:	370c      	adds	r7, #12
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb6:	4770      	bx	lr

08011cb8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8011cb8:	b480      	push	{r7}
 8011cba:	b083      	sub	sp, #12
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
    {
 8011cc0:	4a04      	ldr	r2, [pc, #16]	; (8011cd4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	601a      	str	r2, [r3, #0]
    }
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	4618      	mov	r0, r3
 8011cca:	370c      	adds	r7, #12
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd2:	4770      	bx	lr
 8011cd4:	0802a728 	.word	0x0802a728

08011cd8 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b082      	sub	sp, #8
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
    }
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f7ff ffe9 	bl	8011cb8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8011ce6:	2104      	movs	r1, #4
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f016 fca6 	bl	802863a <_ZdlPvj>
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3708      	adds	r7, #8
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}

08011cf8 <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8011cf8:	b480      	push	{r7}
 8011cfa:	b083      	sub	sp, #12
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
    {
 8011d00:	4a04      	ldr	r2, [pc, #16]	; (8011d14 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	601a      	str	r2, [r3, #0]
    }
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	4618      	mov	r0, r3
 8011d0a:	370c      	adds	r7, #12
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d12:	4770      	bx	lr
 8011d14:	0802c264 	.word	0x0802c264

08011d18 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b082      	sub	sp, #8
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
    }
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f7ff ffe9 	bl	8011cf8 <_ZN8touchgfx8DrawableD1Ev>
 8011d26:	2128      	movs	r1, #40	; 0x28
 8011d28:	6878      	ldr	r0, [r7, #4]
 8011d2a:	f016 fc86 	bl	802863a <_ZdlPvj>
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	4618      	mov	r0, r3
 8011d32:	3708      	adds	r7, #8
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}

08011d38 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8011d38:	b480      	push	{r7}
 8011d3a:	b083      	sub	sp, #12
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8011d40:	2300      	movs	r3, #0
    }
 8011d42:	4618      	mov	r0, r3
 8011d44:	370c      	adds	r7, #12
 8011d46:	46bd      	mov	sp, r7
 8011d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4c:	4770      	bx	lr

08011d4e <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8011d4e:	b580      	push	{r7, lr}
 8011d50:	b084      	sub	sp, #16
 8011d52:	af00      	add	r7, sp, #0
 8011d54:	60f8      	str	r0, [r7, #12]
 8011d56:	4608      	mov	r0, r1
 8011d58:	4611      	mov	r1, r2
 8011d5a:	461a      	mov	r2, r3
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	817b      	strh	r3, [r7, #10]
 8011d60:	460b      	mov	r3, r1
 8011d62:	813b      	strh	r3, [r7, #8]
 8011d64:	4613      	mov	r3, r2
 8011d66:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8011d68:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011d6c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011d70:	4619      	mov	r1, r3
 8011d72:	68f8      	ldr	r0, [r7, #12]
 8011d74:	f000 f837 	bl	8011de6 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8011d78:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8011d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011d80:	4619      	mov	r1, r3
 8011d82:	68f8      	ldr	r0, [r7, #12]
 8011d84:	f000 f88b 	bl	8011e9e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8011d88:	bf00      	nop
 8011d8a:	3710      	adds	r7, #16
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	bd80      	pop	{r7, pc}

08011d90 <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 8011d90:	b480      	push	{r7}
 8011d92:	b083      	sub	sp, #12
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8011d9e:	4618      	mov	r0, r3
 8011da0:	370c      	adds	r7, #12
 8011da2:	46bd      	mov	sp, r7
 8011da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da8:	4770      	bx	lr

08011daa <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8011daa:	b480      	push	{r7}
 8011dac:	b083      	sub	sp, #12
 8011dae:	af00      	add	r7, sp, #0
 8011db0:	6078      	str	r0, [r7, #4]
 8011db2:	460b      	mov	r3, r1
 8011db4:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	887a      	ldrh	r2, [r7, #2]
 8011dba:	809a      	strh	r2, [r3, #4]
    }
 8011dbc:	bf00      	nop
 8011dbe:	370c      	adds	r7, #12
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc6:	4770      	bx	lr

08011dc8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8011dc8:	b480      	push	{r7}
 8011dca:	b083      	sub	sp, #12
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	460b      	mov	r3, r1
 8011dd2:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	887a      	ldrh	r2, [r7, #2]
 8011dd8:	80da      	strh	r2, [r3, #6]
    }
 8011dda:	bf00      	nop
 8011ddc:	370c      	adds	r7, #12
 8011dde:	46bd      	mov	sp, r7
 8011de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de4:	4770      	bx	lr

08011de6 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8011de6:	b580      	push	{r7, lr}
 8011de8:	b082      	sub	sp, #8
 8011dea:	af00      	add	r7, sp, #0
 8011dec:	6078      	str	r0, [r7, #4]
 8011dee:	460b      	mov	r3, r1
 8011df0:	807b      	strh	r3, [r7, #2]
 8011df2:	4613      	mov	r3, r2
 8011df4:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	332c      	adds	r3, #44	; 0x2c
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011e02:	4611      	mov	r1, r2
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	4798      	blx	r3
        setY(y);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	3330      	adds	r3, #48	; 0x30
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	f9b7 2000 	ldrsh.w	r2, [r7]
 8011e14:	4611      	mov	r1, r2
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	4798      	blx	r3
    }
 8011e1a:	bf00      	nop
 8011e1c:	3708      	adds	r7, #8
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}

08011e22 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8011e22:	b480      	push	{r7}
 8011e24:	b083      	sub	sp, #12
 8011e26:	af00      	add	r7, sp, #0
 8011e28:	6078      	str	r0, [r7, #4]
 8011e2a:	460b      	mov	r3, r1
 8011e2c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	887a      	ldrh	r2, [r7, #2]
 8011e32:	811a      	strh	r2, [r3, #8]
    }
 8011e34:	bf00      	nop
 8011e36:	370c      	adds	r7, #12
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3e:	4770      	bx	lr

08011e40 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8011e40:	b480      	push	{r7}
 8011e42:	b083      	sub	sp, #12
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	460b      	mov	r3, r1
 8011e4a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	887a      	ldrh	r2, [r7, #2]
 8011e50:	815a      	strh	r2, [r3, #10]
    }
 8011e52:	bf00      	nop
 8011e54:	370c      	adds	r7, #12
 8011e56:	46bd      	mov	sp, r7
 8011e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5c:	4770      	bx	lr

08011e5e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8011e5e:	b480      	push	{r7}
 8011e60:	b083      	sub	sp, #12
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	6078      	str	r0, [r7, #4]
    {
    }
 8011e66:	bf00      	nop
 8011e68:	370c      	adds	r7, #12
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e70:	4770      	bx	lr

08011e72 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt)
 8011e72:	b480      	push	{r7}
 8011e74:	b083      	sub	sp, #12
 8011e76:	af00      	add	r7, sp, #0
 8011e78:	6078      	str	r0, [r7, #4]
 8011e7a:	6039      	str	r1, [r7, #0]
    {
    }
 8011e7c:	bf00      	nop
 8011e7e:	370c      	adds	r7, #12
 8011e80:	46bd      	mov	sp, r7
 8011e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e86:	4770      	bx	lr

08011e88 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt)
 8011e88:	b480      	push	{r7}
 8011e8a:	b083      	sub	sp, #12
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
 8011e90:	6039      	str	r1, [r7, #0]
    {
    }
 8011e92:	bf00      	nop
 8011e94:	370c      	adds	r7, #12
 8011e96:	46bd      	mov	sp, r7
 8011e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9c:	4770      	bx	lr

08011e9e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8011e9e:	b580      	push	{r7, lr}
 8011ea0:	b082      	sub	sp, #8
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	6078      	str	r0, [r7, #4]
 8011ea6:	460b      	mov	r3, r1
 8011ea8:	807b      	strh	r3, [r7, #2]
 8011eaa:	4613      	mov	r3, r2
 8011eac:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	3334      	adds	r3, #52	; 0x34
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011eba:	4611      	mov	r1, r2
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	4798      	blx	r3
        setHeight(height);
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	3338      	adds	r3, #56	; 0x38
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8011ecc:	4611      	mov	r1, r2
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	4798      	blx	r3
    }
 8011ed2:	bf00      	nop
 8011ed4:	3708      	adds	r7, #8
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}

08011eda <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt)
 8011eda:	b480      	push	{r7}
 8011edc:	b083      	sub	sp, #12
 8011ede:	af00      	add	r7, sp, #0
 8011ee0:	6078      	str	r0, [r7, #4]
 8011ee2:	6039      	str	r1, [r7, #0]
    {
    }
 8011ee4:	bf00      	nop
 8011ee6:	370c      	adds	r7, #12
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eee:	4770      	bx	lr

08011ef0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8011ef0:	b480      	push	{r7}
 8011ef2:	b083      	sub	sp, #12
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
    {
    }
 8011ef8:	bf00      	nop
 8011efa:	370c      	adds	r7, #12
 8011efc:	46bd      	mov	sp, r7
 8011efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f02:	4770      	bx	lr

08011f04 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8011f04:	b480      	push	{r7}
 8011f06:	b083      	sub	sp, #12
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8011f12:	4618      	mov	r0, r3
 8011f14:	370c      	adds	r7, #12
 8011f16:	46bd      	mov	sp, r7
 8011f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1c:	4770      	bx	lr

08011f1e <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8011f1e:	b480      	push	{r7}
 8011f20:	b083      	sub	sp, #12
 8011f22:	af00      	add	r7, sp, #0
 8011f24:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	370c      	adds	r7, #12
 8011f30:	46bd      	mov	sp, r7
 8011f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f36:	4770      	bx	lr

08011f38 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b082      	sub	sp, #8
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
 8011f40:	460b      	mov	r3, r1
 8011f42:	807b      	strh	r3, [r7, #2]
 8011f44:	4613      	mov	r3, r2
 8011f46:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	3350      	adds	r3, #80	; 0x50
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	8879      	ldrh	r1, [r7, #2]
 8011f52:	687a      	ldr	r2, [r7, #4]
 8011f54:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8011f58:	b292      	uxth	r2, r2
 8011f5a:	1a8a      	subs	r2, r1, r2
 8011f5c:	b292      	uxth	r2, r2
 8011f5e:	b210      	sxth	r0, r2
 8011f60:	8839      	ldrh	r1, [r7, #0]
 8011f62:	687a      	ldr	r2, [r7, #4]
 8011f64:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8011f68:	b292      	uxth	r2, r2
 8011f6a:	1a8a      	subs	r2, r1, r2
 8011f6c:	b292      	uxth	r2, r2
 8011f6e:	b212      	sxth	r2, r2
 8011f70:	4601      	mov	r1, r0
 8011f72:	6878      	ldr	r0, [r7, #4]
 8011f74:	4798      	blx	r3
    }
 8011f76:	bf00      	nop
 8011f78:	3708      	adds	r7, #8
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bd80      	pop	{r7, pc}

08011f7e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8011f7e:	b480      	push	{r7}
 8011f80:	b083      	sub	sp, #12
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f8c:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f94:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f9c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8011f9e:	bf00      	nop
 8011fa0:	370c      	adds	r7, #12
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa8:	4770      	bx	lr

08011faa <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8011faa:	b580      	push	{r7, lr}
 8011fac:	b084      	sub	sp, #16
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	60f8      	str	r0, [r7, #12]
 8011fb2:	60b9      	str	r1, [r7, #8]
 8011fb4:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8011fb6:	68f8      	ldr	r0, [r7, #12]
 8011fb8:	f7ff ffe1 	bl	8011f7e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	681a      	ldr	r2, [r3, #0]
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	68fa      	ldr	r2, [r7, #12]
 8011fc8:	601a      	str	r2, [r3, #0]
    }
 8011fca:	bf00      	nop
 8011fcc:	3710      	adds	r7, #16
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	bd80      	pop	{r7, pc}
	...

08011fd4 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8011fd4:	b480      	push	{r7}
 8011fd6:	af00      	add	r7, sp, #0
    {
        return instance;
 8011fd8:	4b03      	ldr	r3, [pc, #12]	; (8011fe8 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8011fda:	681b      	ldr	r3, [r3, #0]
    }
 8011fdc:	4618      	mov	r0, r3
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe4:	4770      	bx	lr
 8011fe6:	bf00      	nop
 8011fe8:	200057e0 	.word	0x200057e0

08011fec <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8011fec:	b480      	push	{r7}
 8011fee:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8011ff0:	4b0b      	ldr	r3, [pc, #44]	; (8012020 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d008      	beq.n	801200e <_ZN8touchgfx3HAL3lcdEv+0x22>
 8011ffc:	4b08      	ldr	r3, [pc, #32]	; (8012020 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012002:	2b00      	cmp	r3, #0
 8012004:	d003      	beq.n	801200e <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8012006:	4b06      	ldr	r3, [pc, #24]	; (8012020 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801200c:	e002      	b.n	8012014 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 801200e:	4b04      	ldr	r3, [pc, #16]	; (8012020 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	689b      	ldr	r3, [r3, #8]
        }
    }
 8012014:	4618      	mov	r0, r3
 8012016:	46bd      	mov	sp, r7
 8012018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201c:	4770      	bx	lr
 801201e:	bf00      	nop
 8012020:	200057e0 	.word	0x200057e0

08012024 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8012024:	b480      	push	{r7}
 8012026:	b083      	sub	sp, #12
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 801202c:	4a07      	ldr	r2, [pc, #28]	; (801204c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	601a      	str	r2, [r3, #0]
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2200      	movs	r2, #0
 8012036:	605a      	str	r2, [r3, #4]
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2200      	movs	r2, #0
 801203c:	721a      	strb	r2, [r3, #8]
    {
    }
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	4618      	mov	r0, r3
 8012042:	370c      	adds	r7, #12
 8012044:	46bd      	mov	sp, r7
 8012046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204a:	4770      	bx	lr
 801204c:	0802a704 	.word	0x0802a704

08012050 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8012050:	b480      	push	{r7}
 8012052:	b083      	sub	sp, #12
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
    {
 8012058:	4a04      	ldr	r2, [pc, #16]	; (801206c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	601a      	str	r2, [r3, #0]
    }
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	4618      	mov	r0, r3
 8012062:	370c      	adds	r7, #12
 8012064:	46bd      	mov	sp, r7
 8012066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206a:	4770      	bx	lr
 801206c:	0802a704 	.word	0x0802a704

08012070 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8012070:	b580      	push	{r7, lr}
 8012072:	b082      	sub	sp, #8
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
    }
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f7ff ffe9 	bl	8012050 <_ZN8touchgfx10TransitionD1Ev>
 801207e:	210c      	movs	r1, #12
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f016 fada 	bl	802863a <_ZdlPvj>
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	4618      	mov	r0, r3
 801208a:	3708      	adds	r7, #8
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}

08012090 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8012090:	b480      	push	{r7}
 8012092:	b083      	sub	sp, #12
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
    {
    }
 8012098:	bf00      	nop
 801209a:	370c      	adds	r7, #12
 801209c:	46bd      	mov	sp, r7
 801209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a2:	4770      	bx	lr

080120a4 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80120a4:	b480      	push	{r7}
 80120a6:	b083      	sub	sp, #12
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
    {
    }
 80120ac:	bf00      	nop
 80120ae:	370c      	adds	r7, #12
 80120b0:	46bd      	mov	sp, r7
 80120b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b6:	4770      	bx	lr

080120b8 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80120b8:	b480      	push	{r7}
 80120ba:	b083      	sub	sp, #12
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
    {
    }
 80120c0:	bf00      	nop
 80120c2:	370c      	adds	r7, #12
 80120c4:	46bd      	mov	sp, r7
 80120c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ca:	4770      	bx	lr

080120cc <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b082      	sub	sp, #8
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 80120d4:	f007 fefe 	bl	8019ed4 <_ZN8touchgfx11Application11getInstanceEv>
 80120d8:	4603      	mov	r3, r0
 80120da:	681a      	ldr	r2, [r3, #0]
 80120dc:	3230      	adds	r2, #48	; 0x30
 80120de:	6812      	ldr	r2, [r2, #0]
 80120e0:	4618      	mov	r0, r3
 80120e2:	4790      	blx	r2
    }
 80120e4:	bf00      	nop
 80120e6:	3708      	adds	r7, #8
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}

080120ec <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80120ec:	b480      	push	{r7}
 80120ee:	b083      	sub	sp, #12
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
 80120f4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	683a      	ldr	r2, [r7, #0]
 80120fa:	605a      	str	r2, [r3, #4]
    }
 80120fc:	bf00      	nop
 80120fe:	370c      	adds	r7, #12
 8012100:	46bd      	mov	sp, r7
 8012102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012106:	4770      	bx	lr

08012108 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8012108:	b580      	push	{r7, lr}
 801210a:	b082      	sub	sp, #8
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	4a05      	ldr	r2, [pc, #20]	; (8012128 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	601a      	str	r2, [r3, #0]
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	4618      	mov	r0, r3
 801211a:	f7ff fd8f 	bl	8011c3c <_ZN8touchgfx15UIEventListenerD1Ev>
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	4618      	mov	r0, r3
 8012122:	3708      	adds	r7, #8
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}
 8012128:	0802c130 	.word	0x0802c130

0801212c <_ZN8touchgfx11ApplicationD0Ev>:
 801212c:	b580      	push	{r7, lr}
 801212e:	b082      	sub	sp, #8
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
 8012134:	6878      	ldr	r0, [r7, #4]
 8012136:	f7ff ffe7 	bl	8012108 <_ZN8touchgfx11ApplicationD1Ev>
 801213a:	f44f 719c 	mov.w	r1, #312	; 0x138
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f016 fa7b 	bl	802863a <_ZdlPvj>
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	4618      	mov	r0, r3
 8012148:	3708      	adds	r7, #8
 801214a:	46bd      	mov	sp, r7
 801214c:	bd80      	pop	{r7, pc}
	...

08012150 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	4618      	mov	r0, r3
 801215c:	f007 ff24 	bl	8019fa8 <_ZN8touchgfx11ApplicationC1Ev>
 8012160:	4a09      	ldr	r2, [pc, #36]	; (8012188 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	601a      	str	r2, [r3, #0]
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2200      	movs	r2, #0
 801216a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2200      	movs	r2, #0
 8012172:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	4a04      	ldr	r2, [pc, #16]	; (801218c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 801217a:	6013      	str	r3, [r2, #0]
    }
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	4618      	mov	r0, r3
 8012180:	3708      	adds	r7, #8
 8012182:	46bd      	mov	sp, r7
 8012184:	bd80      	pop	{r7, pc}
 8012186:	bf00      	nop
 8012188:	0802a6c0 	.word	0x0802a6c0
 801218c:	2000582c 	.word	0x2000582c

08012190 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8012190:	b580      	push	{r7, lr}
 8012192:	b082      	sub	sp, #8
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f000 f804 	bl	80121a6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 801219e:	bf00      	nop
 80121a0:	3708      	adds	r7, #8
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}

080121a6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80121a6:	b580      	push	{r7, lr}
 80121a8:	b082      	sub	sp, #8
 80121aa:	af00      	add	r7, sp, #0
 80121ac:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d00f      	beq.n	80121d8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	330c      	adds	r3, #12
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	4610      	mov	r0, r2
 80121cc:	4798      	blx	r3
 80121ce:	4603      	mov	r3, r0
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d001      	beq.n	80121d8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80121d4:	2301      	movs	r3, #1
 80121d6:	e000      	b.n	80121da <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 80121d8:	2300      	movs	r3, #0
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d00e      	beq.n	80121fc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	3308      	adds	r3, #8
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	4610      	mov	r0, r2
 80121f2:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	2200      	movs	r2, #0
 80121f8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 80121fc:	bf00      	nop
 80121fe:	3708      	adds	r7, #8
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}

08012204 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8012204:	b480      	push	{r7}
 8012206:	b083      	sub	sp, #12
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
 801220c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	683a      	ldr	r2, [r7, #0]
 8012212:	601a      	str	r2, [r3, #0]
    }
 8012214:	bf00      	nop
 8012216:	370c      	adds	r7, #12
 8012218:	46bd      	mov	sp, r7
 801221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221e:	4770      	bx	lr

08012220 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8012220:	b580      	push	{r7, lr}
 8012222:	b082      	sub	sp, #8
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
 8012228:	4a05      	ldr	r2, [pc, #20]	; (8012240 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	601a      	str	r2, [r3, #0]
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	4618      	mov	r0, r3
 8012232:	f7ff ff69 	bl	8012108 <_ZN8touchgfx11ApplicationD1Ev>
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	4618      	mov	r0, r3
 801223a:	3708      	adds	r7, #8
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}
 8012240:	0802a6c0 	.word	0x0802a6c0

08012244 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8012244:	b580      	push	{r7, lr}
 8012246:	b082      	sub	sp, #8
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f7ff ffe7 	bl	8012220 <_ZN8touchgfx14MVPApplicationD1Ev>
 8012252:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012256:	6878      	ldr	r0, [r7, #4]
 8012258:	f016 f9ef 	bl	802863a <_ZdlPvj>
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	4618      	mov	r0, r3
 8012260:	3708      	adds	r7, #8
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
	...

08012268 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8012268:	b580      	push	{r7, lr}
 801226a:	b082      	sub	sp, #8
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	4a08      	ldr	r2, [pc, #32]	; (8012294 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	601a      	str	r2, [r3, #0]
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801227c:	4618      	mov	r0, r3
 801227e:	f000 fde9 	bl	8012e54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	4618      	mov	r0, r3
 8012286:	f7ff ffcb 	bl	8012220 <_ZN8touchgfx14MVPApplicationD1Ev>
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	4618      	mov	r0, r3
 801228e:	3708      	adds	r7, #8
 8012290:	46bd      	mov	sp, r7
 8012292:	bd80      	pop	{r7, pc}
 8012294:	0802a664 	.word	0x0802a664

08012298 <_ZN23FrontendApplicationBaseD0Ev>:
 8012298:	b580      	push	{r7, lr}
 801229a:	b082      	sub	sp, #8
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f7ff ffe1 	bl	8012268 <_ZN23FrontendApplicationBaseD1Ev>
 80122a6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f016 f9c5 	bl	802863a <_ZdlPvj>
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	4618      	mov	r0, r3
 80122b4:	3708      	adds	r7, #8
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}

080122ba <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80122ba:	b480      	push	{r7}
 80122bc:	b083      	sub	sp, #12
 80122be:	af00      	add	r7, sp, #0
 80122c0:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	2201      	movs	r2, #1
 80122c6:	721a      	strb	r2, [r3, #8]
    }
 80122c8:	bf00      	nop
 80122ca:	370c      	adds	r7, #12
 80122cc:	46bd      	mov	sp, r7
 80122ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d2:	4770      	bx	lr

080122d4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b084      	sub	sp, #16
 80122d8:	af00      	add	r7, sp, #0
 80122da:	60f8      	str	r0, [r7, #12]
 80122dc:	607b      	str	r3, [r7, #4]
 80122de:	460b      	mov	r3, r1
 80122e0:	817b      	strh	r3, [r7, #10]
 80122e2:	4613      	mov	r3, r2
 80122e4:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	4618      	mov	r0, r3
 80122ea:	f7ff fe0b 	bl	8011f04 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80122ee:	4603      	mov	r3, r0
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d008      	beq.n	8012306 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7ff fe11 	bl	8011f1e <_ZNK8touchgfx8Drawable11isTouchableEv>
 80122fc:	4603      	mov	r3, r0
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d001      	beq.n	8012306 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8012302:	2301      	movs	r3, #1
 8012304:	e000      	b.n	8012308 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8012306:	2300      	movs	r3, #0
 8012308:	2b00      	cmp	r3, #0
 801230a:	d002      	beq.n	8012312 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 801230c:	68fa      	ldr	r2, [r7, #12]
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	601a      	str	r2, [r3, #0]
        }
    }
 8012312:	bf00      	nop
 8012314:	3710      	adds	r7, #16
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}

0801231a <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 801231a:	b480      	push	{r7}
 801231c:	b083      	sub	sp, #12
 801231e:	af00      	add	r7, sp, #0
 8012320:	6078      	str	r0, [r7, #4]
 8012322:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	683a      	ldr	r2, [r7, #0]
 8012328:	605a      	str	r2, [r3, #4]
    }
 801232a:	bf00      	nop
 801232c:	370c      	adds	r7, #12
 801232e:	46bd      	mov	sp, r7
 8012330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012334:	4770      	bx	lr
	...

08012338 <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 8012338:	b580      	push	{r7, lr}
 801233a:	b082      	sub	sp, #8
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
 8012340:	4a05      	ldr	r2, [pc, #20]	; (8012358 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	601a      	str	r2, [r3, #0]
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	4618      	mov	r0, r3
 801234a:	f7ff fcd5 	bl	8011cf8 <_ZN8touchgfx8DrawableD1Ev>
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	4618      	mov	r0, r3
 8012352:	3708      	adds	r7, #8
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}
 8012358:	0802a5dc 	.word	0x0802a5dc

0801235c <_ZN8touchgfx6WidgetD0Ev>:
 801235c:	b580      	push	{r7, lr}
 801235e:	b082      	sub	sp, #8
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	f7ff ffe7 	bl	8012338 <_ZN8touchgfx6WidgetD1Ev>
 801236a:	2128      	movs	r1, #40	; 0x28
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f016 f964 	bl	802863a <_ZdlPvj>
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	4618      	mov	r0, r3
 8012376:	3708      	adds	r7, #8
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}

0801237c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 801237c:	b580      	push	{r7, lr}
 801237e:	b084      	sub	sp, #16
 8012380:	af00      	add	r7, sp, #0
 8012382:	60f8      	str	r0, [r7, #12]
 8012384:	60b9      	str	r1, [r7, #8]
 8012386:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	4618      	mov	r0, r3
 801238c:	f7ff fee0 	bl	8012150 <_ZN8touchgfx14MVPApplicationC1Ev>
 8012390:	4a13      	ldr	r2, [pc, #76]	; (80123e0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	601a      	str	r2, [r3, #0]
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801239c:	4618      	mov	r0, r3
 801239e:	f000 f8e5 	bl	801256c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	687a      	ldr	r2, [r7, #4]
 80123a6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	68ba      	ldr	r2, [r7, #8]
 80123ae:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80123b2:	f7ff fe0f 	bl	8011fd4 <_ZN8touchgfx3HAL11getInstanceEv>
 80123b6:	4603      	mov	r3, r0
 80123b8:	681a      	ldr	r2, [r3, #0]
 80123ba:	3208      	adds	r2, #8
 80123bc:	6812      	ldr	r2, [r2, #0]
 80123be:	2100      	movs	r1, #0
 80123c0:	4618      	mov	r0, r3
 80123c2:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 80123c4:	2000      	movs	r0, #0
 80123c6:	f001 fecb 	bl	8014160 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80123ca:	f7ff fe0f 	bl	8011fec <_ZN8touchgfx3HAL3lcdEv>
 80123ce:	4603      	mov	r3, r0
 80123d0:	4618      	mov	r0, r3
 80123d2:	f00f f80a 	bl	80213ea <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	4618      	mov	r0, r3
 80123da:	3710      	adds	r7, #16
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}
 80123e0:	0802a664 	.word	0x0802a664

080123e4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80123e4:	b480      	push	{r7}
 80123e6:	b083      	sub	sp, #12
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
 80123ec:	6039      	str	r1, [r7, #0]
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	4618      	mov	r0, r3
 80123f2:	370c      	adds	r7, #12
 80123f4:	46bd      	mov	sp, r7
 80123f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fa:	4770      	bx	lr

080123fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b082      	sub	sp, #8
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
 8012404:	6039      	str	r1, [r7, #0]
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	683a      	ldr	r2, [r7, #0]
 801240a:	4611      	mov	r1, r2
 801240c:	4618      	mov	r0, r3
 801240e:	f7ff ffe9 	bl	80123e4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	685a      	ldr	r2, [r3, #4]
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	605a      	str	r2, [r3, #4]
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	683a      	ldr	r2, [r7, #0]
 801241e:	3308      	adds	r3, #8
 8012420:	3208      	adds	r2, #8
 8012422:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012426:	e883 0003 	stmia.w	r3, {r0, r1}
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	4618      	mov	r0, r3
 801242e:	3708      	adds	r7, #8
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}

08012434 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 8012434:	b590      	push	{r4, r7, lr}
 8012436:	b089      	sub	sp, #36	; 0x24
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoscreenScreenNoTransitionImpl);
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8012442:	4b10      	ldr	r3, [pc, #64]	; (8012484 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 8012444:	61bb      	str	r3, [r7, #24]
 8012446:	2300      	movs	r3, #0
 8012448:	61fb      	str	r3, [r7, #28]
 801244a:	f107 0008 	add.w	r0, r7, #8
 801244e:	f107 0318 	add.w	r3, r7, #24
 8012452:	cb0c      	ldmia	r3, {r2, r3}
 8012454:	6879      	ldr	r1, [r7, #4]
 8012456:	f000 f8a5 	bl	80125a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801245a:	f107 0308 	add.w	r3, r7, #8
 801245e:	4619      	mov	r1, r3
 8012460:	4620      	mov	r0, r4
 8012462:	f7ff ffcb 	bl	80123fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8012466:	f107 0308 	add.w	r3, r7, #8
 801246a:	4618      	mov	r0, r3
 801246c:	f000 fcf2 	bl	8012e54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 801247c:	bf00      	nop
 801247e:	3724      	adds	r7, #36	; 0x24
 8012480:	46bd      	mov	sp, r7
 8012482:	bd90      	pop	{r4, r7, pc}
 8012484:	08012489 	.word	0x08012489

08012488 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b084      	sub	sp, #16
 801248c:	af02      	add	r7, sp, #8
 801248e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 801249c:	461a      	mov	r2, r3
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80124a4:	9300      	str	r3, [sp, #0]
 80124a6:	4b04      	ldr	r3, [pc, #16]	; (80124b8 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 80124a8:	4804      	ldr	r0, [pc, #16]	; (80124bc <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 80124aa:	f000 f8ad 	bl	8012608 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80124ae:	bf00      	nop
 80124b0:	3708      	adds	r7, #8
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}
 80124b6:	bf00      	nop
 80124b8:	20005820 	.word	0x20005820
 80124bc:	2000581c 	.word	0x2000581c

080124c0 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv>:

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEast()
{
 80124c0:	b590      	push	{r4, r7, lr}
 80124c2:	b089      	sub	sp, #36	; 0x24
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionEastImpl);
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80124ce:	4b10      	ldr	r3, [pc, #64]	; (8012510 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv+0x50>)
 80124d0:	61bb      	str	r3, [r7, #24]
 80124d2:	2300      	movs	r3, #0
 80124d4:	61fb      	str	r3, [r7, #28]
 80124d6:	f107 0008 	add.w	r0, r7, #8
 80124da:	f107 0318 	add.w	r3, r7, #24
 80124de:	cb0c      	ldmia	r3, {r2, r3}
 80124e0:	6879      	ldr	r1, [r7, #4]
 80124e2:	f000 f85f 	bl	80125a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80124e6:	f107 0308 	add.w	r3, r7, #8
 80124ea:	4619      	mov	r1, r3
 80124ec:	4620      	mov	r0, r4
 80124ee:	f7ff ff85 	bl	80123fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80124f2:	f107 0308 	add.w	r3, r7, #8
 80124f6:	4618      	mov	r0, r3
 80124f8:	f000 fcac 	bl	8012e54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8012508:	bf00      	nop
 801250a:	3724      	adds	r7, #36	; 0x24
 801250c:	46bd      	mov	sp, r7
 801250e:	bd90      	pop	{r4, r7, pc}
 8012510:	08012515 	.word	0x08012515

08012514 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEastImpl()
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b084      	sub	sp, #16
 8012518:	af02      	add	r7, sp, #8
 801251a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8012528:	461a      	mov	r2, r3
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8012530:	9300      	str	r3, [sp, #0]
 8012532:	4b04      	ldr	r3, [pc, #16]	; (8012544 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv+0x30>)
 8012534:	4804      	ldr	r0, [pc, #16]	; (8012548 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv+0x34>)
 8012536:	f000 f981 	bl	801283c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801253a:	bf00      	nop
 801253c:	3708      	adds	r7, #8
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
 8012542:	bf00      	nop
 8012544:	20005820 	.word	0x20005820
 8012548:	2000581c 	.word	0x2000581c

0801254c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 801254c:	b480      	push	{r7}
 801254e:	b083      	sub	sp, #12
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	4a04      	ldr	r2, [pc, #16]	; (8012568 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	601a      	str	r2, [r3, #0]
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	4618      	mov	r0, r3
 801255e:	370c      	adds	r7, #12
 8012560:	46bd      	mov	sp, r7
 8012562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012566:	4770      	bx	lr
 8012568:	0802a728 	.word	0x0802a728

0801256c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	4618      	mov	r0, r3
 8012578:	f7ff ffe8 	bl	801254c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801257c:	4a08      	ldr	r2, [pc, #32]	; (80125a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	601a      	str	r2, [r3, #0]
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	2200      	movs	r2, #0
 8012586:	605a      	str	r2, [r3, #4]
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	2200      	movs	r2, #0
 801258c:	609a      	str	r2, [r3, #8]
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	2200      	movs	r2, #0
 8012592:	60da      	str	r2, [r3, #12]
    {
    }
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	4618      	mov	r0, r3
 8012598:	3708      	adds	r7, #8
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}
 801259e:	bf00      	nop
 80125a0:	0802a6a8 	.word	0x0802a6a8

080125a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b084      	sub	sp, #16
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	60f8      	str	r0, [r7, #12]
 80125ac:	60b9      	str	r1, [r7, #8]
 80125ae:	4639      	mov	r1, r7
 80125b0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	4618      	mov	r0, r3
 80125b8:	f7ff ffc8 	bl	801254c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80125bc:	4a08      	ldr	r2, [pc, #32]	; (80125e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	68ba      	ldr	r2, [r7, #8]
 80125c6:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	3308      	adds	r3, #8
 80125cc:	463a      	mov	r2, r7
 80125ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80125d2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	4618      	mov	r0, r3
 80125da:	3710      	adds	r7, #16
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd80      	pop	{r7, pc}
 80125e0:	0802a6a8 	.word	0x0802a6a8

080125e4 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b082      	sub	sp, #8
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7ff fd18 	bl	8012024 <_ZN8touchgfx10TransitionC1Ev>
 80125f4:	4a03      	ldr	r2, [pc, #12]	; (8012604 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	601a      	str	r2, [r3, #0]
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	4618      	mov	r0, r3
 80125fe:	3708      	adds	r7, #8
 8012600:	46bd      	mov	sp, r7
 8012602:	bd80      	pop	{r7, pc}
 8012604:	0802a640 	.word	0x0802a640

08012608 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8012608:	b590      	push	{r4, r7, lr}
 801260a:	b08f      	sub	sp, #60	; 0x3c
 801260c:	af00      	add	r7, sp, #0
 801260e:	60f8      	str	r0, [r7, #12]
 8012610:	60b9      	str	r1, [r7, #8]
 8012612:	607a      	str	r2, [r7, #4]
 8012614:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	689a      	ldr	r2, [r3, #8]
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	689b      	ldr	r3, [r3, #8]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	3320      	adds	r3, #32
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	4610      	mov	r0, r2
 8012626:	4798      	blx	r3
 8012628:	4603      	mov	r3, r0
 801262a:	2baf      	cmp	r3, #175	; 0xaf
 801262c:	d805      	bhi.n	801263a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 801262e:	4b7e      	ldr	r3, [pc, #504]	; (8012828 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8012630:	4a7e      	ldr	r2, [pc, #504]	; (801282c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8012632:	21a7      	movs	r1, #167	; 0xa7
 8012634:	487e      	ldr	r0, [pc, #504]	; (8012830 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8012636:	f016 f82f 	bl	8028698 <__assert_func>
 801263a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	685a      	ldr	r2, [r3, #4]
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	685b      	ldr	r3, [r3, #4]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	3320      	adds	r3, #32
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	4610      	mov	r0, r2
 801264c:	4798      	blx	r3
 801264e:	4603      	mov	r3, r0
 8012650:	2b0f      	cmp	r3, #15
 8012652:	d805      	bhi.n	8012660 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8012654:	4b77      	ldr	r3, [pc, #476]	; (8012834 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8012656:	4a75      	ldr	r2, [pc, #468]	; (801282c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8012658:	21a8      	movs	r1, #168	; 0xa8
 801265a:	4875      	ldr	r0, [pc, #468]	; (8012830 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 801265c:	f016 f81c 	bl	8028698 <__assert_func>
 8012660:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	68da      	ldr	r2, [r3, #12]
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	68db      	ldr	r3, [r3, #12]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	3320      	adds	r3, #32
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	4610      	mov	r0, r2
 8012672:	4798      	blx	r3
 8012674:	4603      	mov	r3, r0
 8012676:	2b0b      	cmp	r3, #11
 8012678:	d805      	bhi.n	8012686 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 801267a:	4b6f      	ldr	r3, [pc, #444]	; (8012838 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 801267c:	4a6b      	ldr	r2, [pc, #428]	; (801282c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 801267e:	21a9      	movs	r1, #169	; 0xa9
 8012680:	486b      	ldr	r0, [pc, #428]	; (8012830 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8012682:	f016 f809 	bl	8028698 <__assert_func>
 8012686:	bf00      	nop
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	62bb      	str	r3, [r7, #40]	; 0x28
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	627b      	str	r3, [r7, #36]	; 0x24
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8012694:	f007 fc1e 	bl	8019ed4 <_ZN8touchgfx11Application11getInstanceEv>
 8012698:	4603      	mov	r3, r0
 801269a:	4618      	mov	r0, r3
 801269c:	f007 fc68 	bl	8019f70 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80126a0:	6a3b      	ldr	r3, [r7, #32]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d008      	beq.n	80126ba <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 80126a8:	6a3b      	ldr	r3, [r7, #32]
 80126aa:	681a      	ldr	r2, [r3, #0]
 80126ac:	6a3b      	ldr	r3, [r7, #32]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	330c      	adds	r3, #12
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	4610      	mov	r0, r2
 80126b8:	4798      	blx	r3
    if (*currentTrans)
 80126ba:	6a3b      	ldr	r3, [r7, #32]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d007      	beq.n	80126d2 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 80126c2:	6a3b      	ldr	r3, [r7, #32]
 80126c4:	681a      	ldr	r2, [r3, #0]
 80126c6:	6a3b      	ldr	r3, [r7, #32]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	4610      	mov	r0, r2
 80126d0:	4798      	blx	r3
    if (*currentScreen)
 80126d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d008      	beq.n	80126ec <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 80126da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126dc:	681a      	ldr	r2, [r3, #0]
 80126de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	3314      	adds	r3, #20
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	4610      	mov	r0, r2
 80126ea:	4798      	blx	r3
    if (*currentPresenter)
 80126ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d008      	beq.n	8012706 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 80126f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f6:	681a      	ldr	r2, [r3, #0]
 80126f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	3304      	adds	r3, #4
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	4610      	mov	r0, r2
 8012704:	4798      	blx	r3
    if (*currentScreen)
 8012706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d007      	beq.n	801271e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 801270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012710:	681a      	ldr	r2, [r3, #0]
 8012712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	4610      	mov	r0, r2
 801271c:	4798      	blx	r3
    if (*currentPresenter)
 801271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d008      	beq.n	8012738 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 8012726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012728:	681a      	ldr	r2, [r3, #0]
 801272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	3308      	adds	r3, #8
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	4610      	mov	r0, r2
 8012736:	4798      	blx	r3
}
 8012738:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	68db      	ldr	r3, [r3, #12]
 801273e:	2100      	movs	r1, #0
 8012740:	4618      	mov	r0, r3
 8012742:	f000 f999 	bl	8012a78 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8012746:	4603      	mov	r3, r0
 8012748:	4619      	mov	r1, r3
 801274a:	200c      	movs	r0, #12
 801274c:	f7ff fa28 	bl	8011ba0 <_ZnwjPv>
 8012750:	4604      	mov	r4, r0
 8012752:	4620      	mov	r0, r4
 8012754:	f7ff ff46 	bl	80125e4 <_ZN8touchgfx12NoTransitionC1Ev>
 8012758:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	689b      	ldr	r3, [r3, #8]
 801275e:	2100      	movs	r1, #0
 8012760:	4618      	mov	r0, r3
 8012762:	f000 f99c 	bl	8012a9e <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 8012766:	4603      	mov	r3, r0
 8012768:	4619      	mov	r1, r3
 801276a:	20b0      	movs	r0, #176	; 0xb0
 801276c:	f7ff fa18 	bl	8011ba0 <_ZnwjPv>
 8012770:	4604      	mov	r4, r0
 8012772:	4620      	mov	r0, r4
 8012774:	f001 ffd4 	bl	8014720 <_ZN10screenViewC1Ev>
 8012778:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	685b      	ldr	r3, [r3, #4]
 801277e:	2100      	movs	r1, #0
 8012780:	4618      	mov	r0, r3
 8012782:	f000 f99f 	bl	8012ac4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 8012786:	4603      	mov	r3, r0
 8012788:	4619      	mov	r1, r3
 801278a:	2010      	movs	r0, #16
 801278c:	f7ff fa08 	bl	8011ba0 <_ZnwjPv>
 8012790:	4604      	mov	r4, r0
 8012792:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012794:	4620      	mov	r0, r4
 8012796:	f001 ff6d 	bl	8014674 <_ZN15screenPresenterC1ER10screenView>
 801279a:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 801279c:	683b      	ldr	r3, [r7, #0]
 801279e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80127a0:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80127a2:	68bb      	ldr	r3, [r7, #8]
 80127a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80127a6:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127ac:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80127ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d002      	beq.n	80127ba <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 80127b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127b6:	3304      	adds	r3, #4
 80127b8:	e000      	b.n	80127bc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 80127ba:	2300      	movs	r3, #0
 80127bc:	4619      	mov	r1, r3
 80127be:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80127c0:	f7ff fd20 	bl	8012204 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80127c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c6:	3304      	adds	r3, #4
 80127c8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80127ca:	4618      	mov	r0, r3
 80127cc:	f7ff fda5 	bl	801231a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80127d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80127d4:	4618      	mov	r0, r3
 80127d6:	f000 f988 	bl	8012aea <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 80127da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127dc:	61fb      	str	r3, [r7, #28]
 80127de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e0:	61bb      	str	r3, [r7, #24]
 80127e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127e4:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80127e6:	69fb      	ldr	r3, [r7, #28]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	330c      	adds	r3, #12
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	69f8      	ldr	r0, [r7, #28]
 80127f0:	4798      	blx	r3
    newPresenter->activate();
 80127f2:	69bb      	ldr	r3, [r7, #24]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	69b8      	ldr	r0, [r7, #24]
 80127fa:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80127fc:	6979      	ldr	r1, [r7, #20]
 80127fe:	69f8      	ldr	r0, [r7, #28]
 8012800:	f009 f84b 	bl	801b89a <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8012804:	697b      	ldr	r3, [r7, #20]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	3310      	adds	r3, #16
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	6978      	ldr	r0, [r7, #20]
 801280e:	4798      	blx	r3
    newTransition->invalidate();
 8012810:	697b      	ldr	r3, [r7, #20]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	3314      	adds	r3, #20
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	6978      	ldr	r0, [r7, #20]
 801281a:	4798      	blx	r3
}
 801281c:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 801281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012820:	4618      	mov	r0, r3
 8012822:	373c      	adds	r7, #60	; 0x3c
 8012824:	46bd      	mov	sp, r7
 8012826:	bd90      	pop	{r4, r7, pc}
 8012828:	08029930 	.word	0x08029930
 801282c:	080299c0 	.word	0x080299c0
 8012830:	08029ac4 	.word	0x08029ac4
 8012834:	08029b08 	.word	0x08029b08
 8012838:	08029bac 	.word	0x08029bac

0801283c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801283c:	b590      	push	{r4, r7, lr}
 801283e:	b08f      	sub	sp, #60	; 0x3c
 8012840:	af00      	add	r7, sp, #0
 8012842:	60f8      	str	r0, [r7, #12]
 8012844:	60b9      	str	r1, [r7, #8]
 8012846:	607a      	str	r2, [r7, #4]
 8012848:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	689a      	ldr	r2, [r3, #8]
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	689b      	ldr	r3, [r3, #8]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	3320      	adds	r3, #32
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	4610      	mov	r0, r2
 801285a:	4798      	blx	r3
 801285c:	4603      	mov	r3, r0
 801285e:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 8012862:	d205      	bcs.n	8012870 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8012864:	4b7f      	ldr	r3, [pc, #508]	; (8012a64 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8012866:	4a80      	ldr	r2, [pc, #512]	; (8012a68 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8012868:	21a7      	movs	r1, #167	; 0xa7
 801286a:	4880      	ldr	r0, [pc, #512]	; (8012a6c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 801286c:	f015 ff14 	bl	8028698 <__assert_func>
 8012870:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	685a      	ldr	r2, [r3, #4]
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	685b      	ldr	r3, [r3, #4]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	3320      	adds	r3, #32
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	4610      	mov	r0, r2
 8012882:	4798      	blx	r3
 8012884:	4603      	mov	r3, r0
 8012886:	2b0f      	cmp	r3, #15
 8012888:	d805      	bhi.n	8012896 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 801288a:	4b79      	ldr	r3, [pc, #484]	; (8012a70 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 801288c:	4a76      	ldr	r2, [pc, #472]	; (8012a68 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 801288e:	21a8      	movs	r1, #168	; 0xa8
 8012890:	4876      	ldr	r0, [pc, #472]	; (8012a6c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8012892:	f015 ff01 	bl	8028698 <__assert_func>
 8012896:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	68da      	ldr	r2, [r3, #12]
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	68db      	ldr	r3, [r3, #12]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	3320      	adds	r3, #32
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	4610      	mov	r0, r2
 80128a8:	4798      	blx	r3
 80128aa:	4603      	mov	r3, r0
 80128ac:	2b53      	cmp	r3, #83	; 0x53
 80128ae:	d805      	bhi.n	80128bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80128b0:	4b70      	ldr	r3, [pc, #448]	; (8012a74 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 80128b2:	4a6d      	ldr	r2, [pc, #436]	; (8012a68 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80128b4:	21a9      	movs	r1, #169	; 0xa9
 80128b6:	486d      	ldr	r0, [pc, #436]	; (8012a6c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80128b8:	f015 feee 	bl	8028698 <__assert_func>
 80128bc:	bf00      	nop
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	627b      	str	r3, [r7, #36]	; 0x24
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80128ca:	f007 fb03 	bl	8019ed4 <_ZN8touchgfx11Application11getInstanceEv>
 80128ce:	4603      	mov	r3, r0
 80128d0:	4618      	mov	r0, r3
 80128d2:	f007 fb4d 	bl	8019f70 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80128d6:	6a3b      	ldr	r3, [r7, #32]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d008      	beq.n	80128f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 80128de:	6a3b      	ldr	r3, [r7, #32]
 80128e0:	681a      	ldr	r2, [r3, #0]
 80128e2:	6a3b      	ldr	r3, [r7, #32]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	330c      	adds	r3, #12
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	4610      	mov	r0, r2
 80128ee:	4798      	blx	r3
    if (*currentTrans)
 80128f0:	6a3b      	ldr	r3, [r7, #32]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d007      	beq.n	8012908 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 80128f8:	6a3b      	ldr	r3, [r7, #32]
 80128fa:	681a      	ldr	r2, [r3, #0]
 80128fc:	6a3b      	ldr	r3, [r7, #32]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	4610      	mov	r0, r2
 8012906:	4798      	blx	r3
    if (*currentScreen)
 8012908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d008      	beq.n	8012922 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8012910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012912:	681a      	ldr	r2, [r3, #0]
 8012914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	3314      	adds	r3, #20
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	4610      	mov	r0, r2
 8012920:	4798      	blx	r3
    if (*currentPresenter)
 8012922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d008      	beq.n	801293c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 801292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801292c:	681a      	ldr	r2, [r3, #0]
 801292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	3304      	adds	r3, #4
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	4610      	mov	r0, r2
 801293a:	4798      	blx	r3
    if (*currentScreen)
 801293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d007      	beq.n	8012954 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8012944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012946:	681a      	ldr	r2, [r3, #0]
 8012948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	4610      	mov	r0, r2
 8012952:	4798      	blx	r3
    if (*currentPresenter)
 8012954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d008      	beq.n	801296e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 801295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801295e:	681a      	ldr	r2, [r3, #0]
 8012960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	3308      	adds	r3, #8
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	4610      	mov	r0, r2
 801296c:	4798      	blx	r3
}
 801296e:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	68db      	ldr	r3, [r3, #12]
 8012974:	2100      	movs	r1, #0
 8012976:	4618      	mov	r0, r3
 8012978:	f000 f8c5 	bl	8012b06 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 801297c:	4603      	mov	r3, r0
 801297e:	4619      	mov	r1, r3
 8012980:	2054      	movs	r0, #84	; 0x54
 8012982:	f7ff f90d 	bl	8011ba0 <_ZnwjPv>
 8012986:	4604      	mov	r4, r0
 8012988:	2114      	movs	r1, #20
 801298a:	4620      	mov	r0, r4
 801298c:	f000 f912 	bl	8012bb4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 8012990:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	689b      	ldr	r3, [r3, #8]
 8012996:	2100      	movs	r1, #0
 8012998:	4618      	mov	r0, r3
 801299a:	f000 f96f 	bl	8012c7c <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 801299e:	4603      	mov	r3, r0
 80129a0:	4619      	mov	r1, r3
 80129a2:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 80129a6:	f7ff f8fb 	bl	8011ba0 <_ZnwjPv>
 80129aa:	4604      	mov	r4, r0
 80129ac:	4620      	mov	r0, r4
 80129ae:	f001 fdeb 	bl	8014588 <_ZN11Screen1ViewC1Ev>
 80129b2:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	685b      	ldr	r3, [r3, #4]
 80129b8:	2100      	movs	r1, #0
 80129ba:	4618      	mov	r0, r3
 80129bc:	f000 f971 	bl	8012ca2 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 80129c0:	4603      	mov	r3, r0
 80129c2:	4619      	mov	r1, r3
 80129c4:	2010      	movs	r0, #16
 80129c6:	f7ff f8eb 	bl	8011ba0 <_ZnwjPv>
 80129ca:	4604      	mov	r4, r0
 80129cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80129ce:	4620      	mov	r0, r4
 80129d0:	f001 fd82 	bl	80144d8 <_ZN16Screen1PresenterC1ER11Screen1View>
 80129d4:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80129da:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80129dc:	68bb      	ldr	r3, [r7, #8]
 80129de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129e0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129e6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80129e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d002      	beq.n	80129f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 80129ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f0:	3304      	adds	r3, #4
 80129f2:	e000      	b.n	80129f6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 80129f4:	2300      	movs	r3, #0
 80129f6:	4619      	mov	r1, r3
 80129f8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80129fa:	f7ff fc03 	bl	8012204 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80129fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a00:	3304      	adds	r3, #4
 8012a02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8012a04:	4618      	mov	r0, r3
 8012a06:	f7ff fc88 	bl	801231a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8012a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f000 f95a 	bl	8012cc8 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8012a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a16:	61fb      	str	r3, [r7, #28]
 8012a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a1a:	61bb      	str	r3, [r7, #24]
 8012a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a1e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8012a20:	69fb      	ldr	r3, [r7, #28]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	330c      	adds	r3, #12
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	69f8      	ldr	r0, [r7, #28]
 8012a2a:	4798      	blx	r3
    newPresenter->activate();
 8012a2c:	69bb      	ldr	r3, [r7, #24]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	69b8      	ldr	r0, [r7, #24]
 8012a34:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8012a36:	6979      	ldr	r1, [r7, #20]
 8012a38:	69f8      	ldr	r0, [r7, #28]
 8012a3a:	f008 ff2e 	bl	801b89a <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8012a3e:	697b      	ldr	r3, [r7, #20]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	3310      	adds	r3, #16
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	6978      	ldr	r0, [r7, #20]
 8012a48:	4798      	blx	r3
    newTransition->invalidate();
 8012a4a:	697b      	ldr	r3, [r7, #20]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	3314      	adds	r3, #20
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	6978      	ldr	r0, [r7, #20]
 8012a54:	4798      	blx	r3
}
 8012a56:	bf00      	nop
    return newPresenter;
 8012a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	373c      	adds	r7, #60	; 0x3c
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd90      	pop	{r4, r7, pc}
 8012a62:	bf00      	nop
 8012a64:	08029930 	.word	0x08029930
 8012a68:	08029c50 	.word	0x08029c50
 8012a6c:	08029ac4 	.word	0x08029ac4
 8012a70:	08029b08 	.word	0x08029b08
 8012a74:	08029bac 	.word	0x08029bac

08012a78 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b082      	sub	sp, #8
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
 8012a80:	460b      	mov	r3, r1
 8012a82:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	3324      	adds	r3, #36	; 0x24
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	887a      	ldrh	r2, [r7, #2]
 8012a8e:	4611      	mov	r1, r2
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	4798      	blx	r3
 8012a94:	4603      	mov	r3, r0
    }
 8012a96:	4618      	mov	r0, r3
 8012a98:	3708      	adds	r7, #8
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}

08012a9e <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 8012a9e:	b580      	push	{r7, lr}
 8012aa0:	b082      	sub	sp, #8
 8012aa2:	af00      	add	r7, sp, #0
 8012aa4:	6078      	str	r0, [r7, #4]
 8012aa6:	460b      	mov	r3, r1
 8012aa8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	3324      	adds	r3, #36	; 0x24
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	887a      	ldrh	r2, [r7, #2]
 8012ab4:	4611      	mov	r1, r2
 8012ab6:	6878      	ldr	r0, [r7, #4]
 8012ab8:	4798      	blx	r3
 8012aba:	4603      	mov	r3, r0
    }
 8012abc:	4618      	mov	r0, r3
 8012abe:	3708      	adds	r7, #8
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}

08012ac4 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b082      	sub	sp, #8
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
 8012acc:	460b      	mov	r3, r1
 8012ace:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	3324      	adds	r3, #36	; 0x24
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	887a      	ldrh	r2, [r7, #2]
 8012ada:	4611      	mov	r1, r2
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	4798      	blx	r3
 8012ae0:	4603      	mov	r3, r0
    }
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	3708      	adds	r7, #8
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}

08012aea <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8012aea:	b480      	push	{r7}
 8012aec:	b083      	sub	sp, #12
 8012aee:	af00      	add	r7, sp, #0
 8012af0:	6078      	str	r0, [r7, #4]
 8012af2:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	683a      	ldr	r2, [r7, #0]
 8012af8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012afa:	bf00      	nop
 8012afc:	370c      	adds	r7, #12
 8012afe:	46bd      	mov	sp, r7
 8012b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b04:	4770      	bx	lr

08012b06 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 8012b06:	b580      	push	{r7, lr}
 8012b08:	b082      	sub	sp, #8
 8012b0a:	af00      	add	r7, sp, #0
 8012b0c:	6078      	str	r0, [r7, #4]
 8012b0e:	460b      	mov	r3, r1
 8012b10:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	3324      	adds	r3, #36	; 0x24
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	887a      	ldrh	r2, [r7, #2]
 8012b1c:	4611      	mov	r1, r2
 8012b1e:	6878      	ldr	r0, [r7, #4]
 8012b20:	4798      	blx	r3
 8012b22:	4603      	mov	r3, r0
    }
 8012b24:	4618      	mov	r0, r3
 8012b26:	3708      	adds	r7, #8
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}

08012b2c <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b082      	sub	sp, #8
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
 8012b34:	4a05      	ldr	r2, [pc, #20]	; (8012b4c <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	601a      	str	r2, [r3, #0]
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7ff fbfb 	bl	8012338 <_ZN8touchgfx6WidgetD1Ev>
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	4618      	mov	r0, r3
 8012b46:	3708      	adds	r7, #8
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd80      	pop	{r7, pc}
 8012b4c:	0802bc64 	.word	0x0802bc64

08012b50 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	6878      	ldr	r0, [r7, #4]
 8012b5a:	f7ff ffe7 	bl	8012b2c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8012b5e:	212c      	movs	r1, #44	; 0x2c
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f015 fd6a 	bl	802863a <_ZdlPvj>
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3708      	adds	r7, #8
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}

08012b70 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b082      	sub	sp, #8
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
 8012b78:	4a05      	ldr	r2, [pc, #20]	; (8012b90 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	601a      	str	r2, [r3, #0]
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	4618      	mov	r0, r3
 8012b82:	f000 f8f9 	bl	8012d78 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	4618      	mov	r0, r3
 8012b8a:	3708      	adds	r7, #8
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	bd80      	pop	{r7, pc}
 8012b90:	0802a5ac 	.word	0x0802a5ac

08012b94 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b082      	sub	sp, #8
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	f7ff ffe7 	bl	8012b70 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8012ba2:	2110      	movs	r1, #16
 8012ba4:	6878      	ldr	r0, [r7, #4]
 8012ba6:	f015 fd48 	bl	802863a <_ZdlPvj>
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	4618      	mov	r0, r3
 8012bae:	3708      	adds	r7, #8
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	bd80      	pop	{r7, pc}

08012bb4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 8012bb4:	b590      	push	{r4, r7, lr}
 8012bb6:	b087      	sub	sp, #28
 8012bb8:	af02      	add	r7, sp, #8
 8012bba:	6078      	str	r0, [r7, #4]
 8012bbc:	460b      	mov	r3, r1
 8012bbe:	70fb      	strb	r3, [r7, #3]
          snapshot(),
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7ff fa2e 	bl	8012024 <_ZN8touchgfx10TransitionC1Ev>
 8012bc8:	4a27      	ldr	r2, [pc, #156]	; (8012c68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb4>)
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	601a      	str	r2, [r3, #0]
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	330c      	adds	r3, #12
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f004 ffe0 	bl	8017b98 <_ZN8touchgfx14SnapshotWidgetC1Ev>
          snapshotPtr(&snapshot),
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f103 020c 	add.w	r2, r3, #12
          calculatedValue(0)
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	639a      	str	r2, [r3, #56]	; 0x38
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8012be8:	4a20      	ldr	r2, [pc, #128]	; (8012c6c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb8>)
 8012bea:	f107 0308 	add.w	r3, r7, #8
 8012bee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012bf2:	e883 0003 	stmia.w	r3, {r0, r1}
 8012bf6:	f107 0308 	add.w	r3, r7, #8
 8012bfa:	cb0c      	ldmia	r3, {r2, r3}
 8012bfc:	6879      	ldr	r1, [r7, #4]
 8012bfe:	4620      	mov	r0, r4
 8012c00:	f000 f89a 	bl	8012d38 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	78fa      	ldrb	r2, [r7, #3]
 8012c08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2200      	movs	r2, #0
 8012c10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2200      	movs	r2, #0
 8012c18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    {
        if (HAL::USE_ANIMATION_STORAGE)
 8012c1c:	4b14      	ldr	r3, [pc, #80]	; (8012c70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xbc>)
 8012c1e:	781b      	ldrb	r3, [r3, #0]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d01c      	beq.n	8012c5e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xaa>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f103 000c 	add.w	r0, r3, #12
 8012c2a:	4b12      	ldr	r3, [pc, #72]	; (8012c74 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc0>)
 8012c2c:	881b      	ldrh	r3, [r3, #0]
 8012c2e:	b21a      	sxth	r2, r3
 8012c30:	4b11      	ldr	r3, [pc, #68]	; (8012c78 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc4>)
 8012c32:	881b      	ldrh	r3, [r3, #0]
 8012c34:	b21b      	sxth	r3, r3
 8012c36:	9300      	str	r3, [sp, #0]
 8012c38:	4613      	mov	r3, r2
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	2100      	movs	r1, #0
 8012c3e:	f7ff f886 	bl	8011d4e <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	330c      	adds	r3, #12
 8012c46:	4618      	mov	r0, r3
 8012c48:	f004 ff2a 	bl	8017aa0 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (templateDirection)
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 8012c4c:	4b09      	ldr	r3, [pc, #36]	; (8012c74 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc0>)
 8012c4e:	881b      	ldrh	r3, [r3, #0]
 8012c50:	425b      	negs	r3, r3
 8012c52:	b29b      	uxth	r3, r3
 8012c54:	b21a      	sxth	r2, r3
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                break;
 8012c5c:	bf00      	nop
                done = true;
                // Nothing to do here
                break;
            }
        }
    }
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	4618      	mov	r0, r3
 8012c62:	3714      	adds	r7, #20
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd90      	pop	{r4, r7, pc}
 8012c68:	0802a580 	.word	0x0802a580
 8012c6c:	08029d68 	.word	0x08029d68
 8012c70:	200057df 	.word	0x200057df
 8012c74:	200057d4 	.word	0x200057d4
 8012c78:	200057d6 	.word	0x200057d6

08012c7c <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b082      	sub	sp, #8
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
 8012c84:	460b      	mov	r3, r1
 8012c86:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	3324      	adds	r3, #36	; 0x24
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	887a      	ldrh	r2, [r7, #2]
 8012c92:	4611      	mov	r1, r2
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	4798      	blx	r3
 8012c98:	4603      	mov	r3, r0
    }
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	3708      	adds	r7, #8
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd80      	pop	{r7, pc}

08012ca2 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8012ca2:	b580      	push	{r7, lr}
 8012ca4:	b082      	sub	sp, #8
 8012ca6:	af00      	add	r7, sp, #0
 8012ca8:	6078      	str	r0, [r7, #4]
 8012caa:	460b      	mov	r3, r1
 8012cac:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	3324      	adds	r3, #36	; 0x24
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	887a      	ldrh	r2, [r7, #2]
 8012cb8:	4611      	mov	r1, r2
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	4798      	blx	r3
 8012cbe:	4603      	mov	r3, r0
    }
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	3708      	adds	r7, #8
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bd80      	pop	{r7, pc}

08012cc8 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
    void bind(T& presenter)
 8012cc8:	b480      	push	{r7}
 8012cca:	b083      	sub	sp, #12
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
 8012cd0:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	683a      	ldr	r2, [r7, #0]
 8012cd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8012cd8:	bf00      	nop
 8012cda:	370c      	adds	r7, #12
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce2:	4770      	bx	lr

08012ce4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b082      	sub	sp, #8
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cf2:	683a      	ldr	r2, [r7, #0]
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	d00a      	beq.n	8012d0e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x2a>

        switch (templateDirection)
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8012cf8:	683b      	ldr	r3, [r7, #0]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	3350      	adds	r3, #80	; 0x50
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	687a      	ldr	r2, [r7, #4]
 8012d02:	f9b2 1050 	ldrsh.w	r1, [r2, #80]	; 0x50
 8012d06:	2200      	movs	r2, #0
 8012d08:	6838      	ldr	r0, [r7, #0]
 8012d0a:	4798      	blx	r3
            break;
 8012d0c:	e000      	b.n	8012d10 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x2c>
            return;
 8012d0e:	bf00      	nop
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
            break;
        }
    }
 8012d10:	3708      	adds	r7, #8
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}
	...

08012d18 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8012d18:	b480      	push	{r7}
 8012d1a:	b083      	sub	sp, #12
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
 8012d20:	4a04      	ldr	r2, [pc, #16]	; (8012d34 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	601a      	str	r2, [r3, #0]
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	4618      	mov	r0, r3
 8012d2a:	370c      	adds	r7, #12
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d32:	4770      	bx	lr
 8012d34:	0802a5c4 	.word	0x0802a5c4

08012d38 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b084      	sub	sp, #16
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	60f8      	str	r0, [r7, #12]
 8012d40:	60b9      	str	r1, [r7, #8]
 8012d42:	4639      	mov	r1, r7
 8012d44:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f7ff ffe4 	bl	8012d18 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8012d50:	4a08      	ldr	r2, [pc, #32]	; (8012d74 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	68ba      	ldr	r2, [r7, #8]
 8012d5a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	3308      	adds	r3, #8
 8012d60:	463a      	mov	r2, r7
 8012d62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012d66:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	3710      	adds	r7, #16
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd80      	pop	{r7, pc}
 8012d74:	0802a5ac 	.word	0x0802a5ac

08012d78 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 8012d78:	b480      	push	{r7}
 8012d7a:	b083      	sub	sp, #12
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
    }
 8012d80:	4a04      	ldr	r2, [pc, #16]	; (8012d94 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	601a      	str	r2, [r3, #0]
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	4618      	mov	r0, r3
 8012d8a:	370c      	adds	r7, #12
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d92:	4770      	bx	lr
 8012d94:	0802a5c4 	.word	0x0802a5c4

08012d98 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b082      	sub	sp, #8
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
    }
 8012da0:	6878      	ldr	r0, [r7, #4]
 8012da2:	f7ff ffe9 	bl	8012d78 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8012da6:	2104      	movs	r1, #4
 8012da8:	6878      	ldr	r0, [r7, #4]
 8012daa:	f015 fc46 	bl	802863a <_ZdlPvj>
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	4618      	mov	r0, r3
 8012db2:	3708      	adds	r7, #8
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}

08012db8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
class SlideTransition : public Transition
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b082      	sub	sp, #8
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
 8012dc0:	4a0a      	ldr	r2, [pc, #40]	; (8012dec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	601a      	str	r2, [r3, #0]
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	333c      	adds	r3, #60	; 0x3c
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f7ff fed0 	bl	8012b70 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	330c      	adds	r3, #12
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f7ff fea9 	bl	8012b2c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f7ff f937 	bl	8012050 <_ZN8touchgfx10TransitionD1Ev>
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	4618      	mov	r0, r3
 8012de6:	3708      	adds	r7, #8
 8012de8:	46bd      	mov	sp, r7
 8012dea:	bd80      	pop	{r7, pc}
 8012dec:	0802a580 	.word	0x0802a580

08012df0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b082      	sub	sp, #8
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
 8012df8:	6878      	ldr	r0, [r7, #4]
 8012dfa:	f7ff ffdd 	bl	8012db8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 8012dfe:	2154      	movs	r1, #84	; 0x54
 8012e00:	6878      	ldr	r0, [r7, #4]
 8012e02:	f015 fc1a 	bl	802863a <_ZdlPvj>
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	4618      	mov	r0, r3
 8012e0a:	3708      	adds	r7, #8
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}

08012e10 <_ZN8touchgfx12NoTransitionD1Ev>:
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b082      	sub	sp, #8
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
 8012e18:	4a05      	ldr	r2, [pc, #20]	; (8012e30 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	601a      	str	r2, [r3, #0]
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	4618      	mov	r0, r3
 8012e22:	f7ff f915 	bl	8012050 <_ZN8touchgfx10TransitionD1Ev>
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	4618      	mov	r0, r3
 8012e2a:	3708      	adds	r7, #8
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	bd80      	pop	{r7, pc}
 8012e30:	0802a640 	.word	0x0802a640

08012e34 <_ZN8touchgfx12NoTransitionD0Ev>:
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b082      	sub	sp, #8
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
 8012e3c:	6878      	ldr	r0, [r7, #4]
 8012e3e:	f7ff ffe7 	bl	8012e10 <_ZN8touchgfx12NoTransitionD1Ev>
 8012e42:	210c      	movs	r1, #12
 8012e44:	6878      	ldr	r0, [r7, #4]
 8012e46:	f015 fbf8 	bl	802863a <_ZdlPvj>
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	3708      	adds	r7, #8
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}

08012e54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b082      	sub	sp, #8
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
 8012e5c:	4a05      	ldr	r2, [pc, #20]	; (8012e74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	601a      	str	r2, [r3, #0]
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	4618      	mov	r0, r3
 8012e66:	f7fe ff27 	bl	8011cb8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	3708      	adds	r7, #8
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bd80      	pop	{r7, pc}
 8012e74:	0802a6a8 	.word	0x0802a6a8

08012e78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b082      	sub	sp, #8
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
 8012e80:	6878      	ldr	r0, [r7, #4]
 8012e82:	f7ff ffe7 	bl	8012e54 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8012e86:	2110      	movs	r1, #16
 8012e88:	6878      	ldr	r0, [r7, #4]
 8012e8a:	f015 fbd6 	bl	802863a <_ZdlPvj>
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	4618      	mov	r0, r3
 8012e92:	3708      	adds	r7, #8
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd80      	pop	{r7, pc}

08012e98 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b082      	sub	sp, #8
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 8012ea0:	4b40      	ldr	r3, [pc, #256]	; (8012fa4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x10c>)
 8012ea2:	781b      	ldrb	r3, [r3, #0]
 8012ea4:	f083 0301 	eor.w	r3, r3, #1
 8012ea8:	b2db      	uxtb	r3, r3
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d003      	beq.n	8012eb6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	2201      	movs	r2, #1
 8012eb2:	721a      	strb	r2, [r3, #8]
            return;
 8012eb4:	e073      	b.n	8012f9e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x106>
        Transition::handleTickEvent();
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f7ff f8e9 	bl	8012090 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8012ec4:	3301      	adds	r3, #1
 8012ec6:	b2da      	uxtb	r2, r3
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (animationCounter <= animationSteps)
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d82f      	bhi.n	8012f3e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8012ee4:	b298      	uxth	r0, r3
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012ef2:	b29b      	uxth	r3, r3
 8012ef4:	2100      	movs	r1, #0
 8012ef6:	f008 fcd6 	bl	801b8a6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8012efa:	4603      	mov	r3, r0
 8012efc:	461a      	mov	r2, r3
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            if (calculatedValue % 2)
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8012f0a:	b29b      	uxth	r3, r3
 8012f0c:	f003 0301 	and.w	r3, r3, #1
 8012f10:	b29b      	uxth	r3, r3
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d01b      	beq.n	8012f4e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8012f1c:	b29b      	uxth	r3, r3
 8012f1e:	687a      	ldr	r2, [r7, #4]
 8012f20:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 8012f24:	2a00      	cmp	r2, #0
 8012f26:	dd01      	ble.n	8012f2c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 8012f28:	2201      	movs	r2, #1
 8012f2a:	e001      	b.n	8012f30 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 8012f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012f30:	4413      	add	r3, r2
 8012f32:	b29b      	uxth	r3, r3
 8012f34:	b21a      	sxth	r2, r3
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8012f3c:	e007      	b.n	8012f4e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	2201      	movs	r2, #1
 8012f42:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	2200      	movs	r2, #0
 8012f48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            return;
 8012f4c:	e027      	b.n	8012f9e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x106>
            calculatedValue -= snapshot.getX();
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	330c      	adds	r3, #12
 8012f52:	4618      	mov	r0, r3
 8012f54:	f7fe ff1c 	bl	8011d90 <_ZNK8touchgfx8Drawable4getXEv>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	4619      	mov	r1, r3
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8012f62:	b29a      	uxth	r2, r3
 8012f64:	b28b      	uxth	r3, r1
 8012f66:	1ad3      	subs	r3, r2, r3
 8012f68:	b29b      	uxth	r3, r3
 8012f6a:	b21a      	sxth	r2, r3
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            snapshot.moveRelative(calculatedValue, 0);
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	f103 000c 	add.w	r0, r3, #12
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8012f7e:	2200      	movs	r2, #0
 8012f80:	4619      	mov	r1, r3
 8012f82:	f007 ff7d 	bl	801ae80 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8012f86:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	6858      	ldr	r0, [r3, #4]
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	685b      	ldr	r3, [r3, #4]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	3374      	adds	r3, #116	; 0x74
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	687a      	ldr	r2, [r7, #4]
 8012f98:	323c      	adds	r2, #60	; 0x3c
 8012f9a:	4611      	mov	r1, r2
 8012f9c:	4798      	blx	r3
    }
 8012f9e:	3708      	adds	r7, #8
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}
 8012fa4:	200057df 	.word	0x200057df

08012fa8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b082      	sub	sp, #8
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8012fb0:	4b0b      	ldr	r3, [pc, #44]	; (8012fe0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 8012fb2:	781b      	ldrb	r3, [r3, #0]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d00e      	beq.n	8012fd6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	685b      	ldr	r3, [r3, #4]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d00a      	beq.n	8012fd6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	6858      	ldr	r0, [r3, #4]
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	3360      	adds	r3, #96	; 0x60
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	687a      	ldr	r2, [r7, #4]
 8012fd0:	320c      	adds	r2, #12
 8012fd2:	4611      	mov	r1, r2
 8012fd4:	4798      	blx	r3
    }
 8012fd6:	bf00      	nop
 8012fd8:	3708      	adds	r7, #8
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	bd80      	pop	{r7, pc}
 8012fde:	bf00      	nop
 8012fe0:	200057df 	.word	0x200057df

08012fe4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b088      	sub	sp, #32
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 8012fec:	4b1a      	ldr	r3, [pc, #104]	; (8013058 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 8012fee:	781b      	ldrb	r3, [r3, #0]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d02d      	beq.n	8013050 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f7ff f85e 	bl	80120b8 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8012ffc:	4a17      	ldr	r2, [pc, #92]	; (801305c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 8012ffe:	f107 0318 	add.w	r3, r7, #24
 8013002:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013006:	e883 0003 	stmia.w	r3, {r0, r1}
 801300a:	f107 0008 	add.w	r0, r7, #8
 801300e:	f107 0318 	add.w	r3, r7, #24
 8013012:	cb0c      	ldmia	r3, {r2, r3}
 8013014:	6879      	ldr	r1, [r7, #4]
 8013016:	f7ff fe8f 	bl	8012d38 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	685a      	ldr	r2, [r3, #4]
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	685b      	ldr	r3, [r3, #4]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	3374      	adds	r3, #116	; 0x74
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	f107 0108 	add.w	r1, r7, #8
 801302c:	4610      	mov	r0, r2
 801302e:	4798      	blx	r3
            screenContainer->add(snapshot);
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	6858      	ldr	r0, [r3, #4]
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	685b      	ldr	r3, [r3, #4]
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	335c      	adds	r3, #92	; 0x5c
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	687a      	ldr	r2, [r7, #4]
 8013040:	320c      	adds	r2, #12
 8013042:	4611      	mov	r1, r2
 8013044:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8013046:	f107 0308 	add.w	r3, r7, #8
 801304a:	4618      	mov	r0, r3
 801304c:	f7ff fd90 	bl	8012b70 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8013050:	bf00      	nop
 8013052:	3720      	adds	r7, #32
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}
 8013058:	200057df 	.word	0x200057df
 801305c:	08029d70 	.word	0x08029d70

08013060 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8013060:	b580      	push	{r7, lr}
 8013062:	b082      	sub	sp, #8
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
 8013068:	6039      	str	r1, [r7, #0]
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	3350      	adds	r3, #80	; 0x50
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	4a05      	ldr	r2, [pc, #20]	; (8013088 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x28>)
 8013074:	8812      	ldrh	r2, [r2, #0]
 8013076:	b211      	sxth	r1, r2
 8013078:	2200      	movs	r2, #0
 801307a:	6838      	ldr	r0, [r7, #0]
 801307c:	4798      	blx	r3
            break;
 801307e:	bf00      	nop
    }
 8013080:	bf00      	nop
 8013082:	3708      	adds	r7, #8
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}
 8013088:	200057d4 	.word	0x200057d4

0801308c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 801308c:	b580      	push	{r7, lr}
 801308e:	b082      	sub	sp, #8
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
 8013094:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	685b      	ldr	r3, [r3, #4]
 801309a:	687a      	ldr	r2, [r7, #4]
 801309c:	68d2      	ldr	r2, [r2, #12]
 801309e:	1052      	asrs	r2, r2, #1
 80130a0:	1898      	adds	r0, r3, r2
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	68db      	ldr	r3, [r3, #12]
 80130a6:	f003 0301 	and.w	r3, r3, #1
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d102      	bne.n	80130b4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	689b      	ldr	r3, [r3, #8]
 80130b2:	e00a      	b.n	80130ca <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	685b      	ldr	r3, [r3, #4]
 80130b8:	687a      	ldr	r2, [r7, #4]
 80130ba:	68d2      	ldr	r2, [r2, #12]
 80130bc:	1052      	asrs	r2, r2, #1
 80130be:	4413      	add	r3, r2
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	687a      	ldr	r2, [r7, #4]
 80130c4:	6892      	ldr	r2, [r2, #8]
 80130c6:	4413      	add	r3, r2
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	6839      	ldr	r1, [r7, #0]
 80130cc:	4798      	blx	r3
    }
 80130ce:	bf00      	nop
 80130d0:	3708      	adds	r7, #8
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}

080130d6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 80130d6:	b480      	push	{r7}
 80130d8:	b083      	sub	sp, #12
 80130da:	af00      	add	r7, sp, #0
 80130dc:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	685b      	ldr	r3, [r3, #4]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d010      	beq.n	8013108 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	689b      	ldr	r3, [r3, #8]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d107      	bne.n	80130fe <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	68db      	ldr	r3, [r3, #12]
 80130f2:	f003 0301 	and.w	r3, r3, #1
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d101      	bne.n	80130fe <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 80130fa:	2301      	movs	r3, #1
 80130fc:	e000      	b.n	8013100 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 80130fe:	2300      	movs	r3, #0
 8013100:	2b01      	cmp	r3, #1
 8013102:	d001      	beq.n	8013108 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8013104:	2301      	movs	r3, #1
 8013106:	e000      	b.n	801310a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 8013108:	2300      	movs	r3, #0
    }
 801310a:	4618      	mov	r0, r3
 801310c:	370c      	adds	r7, #12
 801310e:	46bd      	mov	sp, r7
 8013110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013114:	4770      	bx	lr

08013116 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8013116:	b580      	push	{r7, lr}
 8013118:	b082      	sub	sp, #8
 801311a:	af00      	add	r7, sp, #0
 801311c:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	685b      	ldr	r3, [r3, #4]
 8013122:	687a      	ldr	r2, [r7, #4]
 8013124:	68d2      	ldr	r2, [r2, #12]
 8013126:	1052      	asrs	r2, r2, #1
 8013128:	1899      	adds	r1, r3, r2
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	68db      	ldr	r3, [r3, #12]
 801312e:	f003 0301 	and.w	r3, r3, #1
 8013132:	2b00      	cmp	r3, #0
 8013134:	d102      	bne.n	801313c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	689b      	ldr	r3, [r3, #8]
 801313a:	e00a      	b.n	8013152 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	685b      	ldr	r3, [r3, #4]
 8013140:	687a      	ldr	r2, [r7, #4]
 8013142:	68d2      	ldr	r2, [r2, #12]
 8013144:	1052      	asrs	r2, r2, #1
 8013146:	4413      	add	r3, r2
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	687a      	ldr	r2, [r7, #4]
 801314c:	6892      	ldr	r2, [r2, #8]
 801314e:	4413      	add	r3, r2
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	4608      	mov	r0, r1
 8013154:	4798      	blx	r3
    }
 8013156:	bf00      	nop
 8013158:	3708      	adds	r7, #8
 801315a:	46bd      	mov	sp, r7
 801315c:	bd80      	pop	{r7, pc}

0801315e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 801315e:	b480      	push	{r7}
 8013160:	b083      	sub	sp, #12
 8013162:	af00      	add	r7, sp, #0
 8013164:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	685b      	ldr	r3, [r3, #4]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d010      	beq.n	8013190 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	689b      	ldr	r3, [r3, #8]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d107      	bne.n	8013186 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	68db      	ldr	r3, [r3, #12]
 801317a:	f003 0301 	and.w	r3, r3, #1
 801317e:	2b00      	cmp	r3, #0
 8013180:	d101      	bne.n	8013186 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8013182:	2301      	movs	r3, #1
 8013184:	e000      	b.n	8013188 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8013186:	2300      	movs	r3, #0
 8013188:	2b01      	cmp	r3, #1
 801318a:	d001      	beq.n	8013190 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801318c:	2301      	movs	r3, #1
 801318e:	e000      	b.n	8013192 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8013190:	2300      	movs	r3, #0
    }
 8013192:	4618      	mov	r0, r3
 8013194:	370c      	adds	r7, #12
 8013196:	46bd      	mov	sp, r7
 8013198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319c:	4770      	bx	lr

0801319e <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 801319e:	b480      	push	{r7}
 80131a0:	b083      	sub	sp, #12
 80131a2:	af00      	add	r7, sp, #0
 80131a4:	6078      	str	r0, [r7, #4]
 80131a6:	6039      	str	r1, [r7, #0]
    {
        color = col;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	683a      	ldr	r2, [r7, #0]
 80131ac:	601a      	str	r2, [r3, #0]
    }
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	4618      	mov	r0, r3
 80131b2:	370c      	adds	r7, #12
 80131b4:	46bd      	mov	sp, r7
 80131b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ba:	4770      	bx	lr

080131bc <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80131bc:	b480      	push	{r7}
 80131be:	b083      	sub	sp, #12
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
    {
        x = 0;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	2200      	movs	r2, #0
 80131c8:	801a      	strh	r2, [r3, #0]
        y = 0;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	2200      	movs	r2, #0
 80131ce:	805a      	strh	r2, [r3, #2]
        width = 0;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2200      	movs	r2, #0
 80131d4:	809a      	strh	r2, [r3, #4]
        height = 0;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	2200      	movs	r2, #0
 80131da:	80da      	strh	r2, [r3, #6]
    }
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	4618      	mov	r0, r3
 80131e0:	370c      	adds	r7, #12
 80131e2:	46bd      	mov	sp, r7
 80131e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e8:	4770      	bx	lr

080131ea <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 80131ea:	b480      	push	{r7}
 80131ec:	b085      	sub	sp, #20
 80131ee:	af00      	add	r7, sp, #0
 80131f0:	60f8      	str	r0, [r7, #12]
 80131f2:	4608      	mov	r0, r1
 80131f4:	4611      	mov	r1, r2
 80131f6:	461a      	mov	r2, r3
 80131f8:	4603      	mov	r3, r0
 80131fa:	817b      	strh	r3, [r7, #10]
 80131fc:	460b      	mov	r3, r1
 80131fe:	813b      	strh	r3, [r7, #8]
 8013200:	4613      	mov	r3, r2
 8013202:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	897a      	ldrh	r2, [r7, #10]
 8013208:	801a      	strh	r2, [r3, #0]
        this->y = y;
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	893a      	ldrh	r2, [r7, #8]
 801320e:	805a      	strh	r2, [r3, #2]
        this->width = width;
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	88fa      	ldrh	r2, [r7, #6]
 8013214:	809a      	strh	r2, [r3, #4]
        this->height = height;
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	8b3a      	ldrh	r2, [r7, #24]
 801321a:	80da      	strh	r2, [r3, #6]
    }
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	4618      	mov	r0, r3
 8013220:	3714      	adds	r7, #20
 8013222:	46bd      	mov	sp, r7
 8013224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013228:	4770      	bx	lr

0801322a <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 801322a:	b480      	push	{r7}
 801322c:	b083      	sub	sp, #12
 801322e:	af00      	add	r7, sp, #0
 8013230:	6078      	str	r0, [r7, #4]
 8013232:	460b      	mov	r3, r1
 8013234:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	887a      	ldrh	r2, [r7, #2]
 801323a:	801a      	strh	r2, [r3, #0]
    {
    }
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	4618      	mov	r0, r3
 8013240:	370c      	adds	r7, #12
 8013242:	46bd      	mov	sp, r7
 8013244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013248:	4770      	bx	lr
	...

0801324c <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 801324c:	b580      	push	{r7, lr}
 801324e:	b084      	sub	sp, #16
 8013250:	af02      	add	r7, sp, #8
 8013252:	6078      	str	r0, [r7, #4]
          visible(true)
 8013254:	4a13      	ldr	r2, [pc, #76]	; (80132a4 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	601a      	str	r2, [r3, #0]
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	1d18      	adds	r0, r3, #4
 801325e:	2300      	movs	r3, #0
 8013260:	9300      	str	r3, [sp, #0]
 8013262:	2300      	movs	r3, #0
 8013264:	2200      	movs	r2, #0
 8013266:	2100      	movs	r1, #0
 8013268:	f7ff ffbf 	bl	80131ea <_ZN8touchgfx4RectC1Essss>
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	330c      	adds	r3, #12
 8013270:	4618      	mov	r0, r3
 8013272:	f7ff ffa3 	bl	80131bc <_ZN8touchgfx4RectC1Ev>
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	2200      	movs	r2, #0
 801327a:	615a      	str	r2, [r3, #20]
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2200      	movs	r2, #0
 8013280:	619a      	str	r2, [r3, #24]
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2200      	movs	r2, #0
 8013286:	61da      	str	r2, [r3, #28]
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	2200      	movs	r2, #0
 801328c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2201      	movs	r2, #1
 8013294:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	4618      	mov	r0, r3
 801329c:	3708      	adds	r7, #8
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}
 80132a2:	bf00      	nop
 80132a4:	0802c264 	.word	0x0802c264

080132a8 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b082      	sub	sp, #8
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
    {
 80132b0:	4a06      	ldr	r2, [pc, #24]	; (80132cc <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	601a      	str	r2, [r3, #0]
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	3304      	adds	r3, #4
 80132ba:	4618      	mov	r0, r3
 80132bc:	f000 fa8e 	bl	80137dc <_ZN8touchgfx9ContainerD1Ev>
    }
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	4618      	mov	r0, r3
 80132c4:	3708      	adds	r7, #8
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}
 80132ca:	bf00      	nop
 80132cc:	0802c358 	.word	0x0802c358

080132d0 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b082      	sub	sp, #8
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
    }
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f7ff ffe5 	bl	80132a8 <_ZN8touchgfx6ScreenD1Ev>
 80132de:	213c      	movs	r1, #60	; 0x3c
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f015 f9aa 	bl	802863a <_ZdlPvj>
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	4618      	mov	r0, r3
 80132ea:	3708      	adds	r7, #8
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bd80      	pop	{r7, pc}

080132f0 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80132f0:	b480      	push	{r7}
 80132f2:	b083      	sub	sp, #12
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
    {
    }
 80132f8:	bf00      	nop
 80132fa:	370c      	adds	r7, #12
 80132fc:	46bd      	mov	sp, r7
 80132fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013302:	4770      	bx	lr

08013304 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8013304:	b480      	push	{r7}
 8013306:	b083      	sub	sp, #12
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
    {
    }
 801330c:	bf00      	nop
 801330e:	370c      	adds	r7, #12
 8013310:	46bd      	mov	sp, r7
 8013312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013316:	4770      	bx	lr

08013318 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8013318:	b480      	push	{r7}
 801331a:	b083      	sub	sp, #12
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
    {
    }
 8013320:	bf00      	nop
 8013322:	370c      	adds	r7, #12
 8013324:	46bd      	mov	sp, r7
 8013326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332a:	4770      	bx	lr

0801332c <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 801332c:	b480      	push	{r7}
 801332e:	b083      	sub	sp, #12
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
    {
    }
 8013334:	bf00      	nop
 8013336:	370c      	adds	r7, #12
 8013338:	46bd      	mov	sp, r7
 801333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333e:	4770      	bx	lr

08013340 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8013340:	b480      	push	{r7}
 8013342:	b083      	sub	sp, #12
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
 8013348:	460b      	mov	r3, r1
 801334a:	70fb      	strb	r3, [r7, #3]
    {
    }
 801334c:	bf00      	nop
 801334e:	370c      	adds	r7, #12
 8013350:	46bd      	mov	sp, r7
 8013352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013356:	4770      	bx	lr

08013358 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8013358:	b580      	push	{r7, lr}
 801335a:	b082      	sub	sp, #8
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	3304      	adds	r3, #4
 8013366:	6839      	ldr	r1, [r7, #0]
 8013368:	4618      	mov	r0, r3
 801336a:	f003 fb3d 	bl	80169e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801336e:	bf00      	nop
 8013370:	3708      	adds	r7, #8
 8013372:	46bd      	mov	sp, r7
 8013374:	bd80      	pop	{r7, pc}
	...

08013378 <_ZN8touchgfx6WidgetC1Ev>:
 8013378:	b580      	push	{r7, lr}
 801337a:	b082      	sub	sp, #8
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	4618      	mov	r0, r3
 8013384:	f7ff ff62 	bl	801324c <_ZN8touchgfx8DrawableC1Ev>
 8013388:	4a03      	ldr	r2, [pc, #12]	; (8013398 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	601a      	str	r2, [r3, #0]
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	4618      	mov	r0, r3
 8013392:	3708      	adds	r7, #8
 8013394:	46bd      	mov	sp, r7
 8013396:	bd80      	pop	{r7, pc}
 8013398:	0802a5dc 	.word	0x0802a5dc

0801339c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 801339c:	b580      	push	{r7, lr}
 801339e:	b082      	sub	sp, #8
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	4618      	mov	r0, r3
 80133a8:	2326      	movs	r3, #38	; 0x26
 80133aa:	461a      	mov	r2, r3
 80133ac:	2100      	movs	r1, #0
 80133ae:	f015 faf9 	bl	80289a4 <memset>
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7ff ffdf 	bl	8013378 <_ZN8touchgfx6WidgetC1Ev>
 80133ba:	4a09      	ldr	r2, [pc, #36]	; (80133e0 <_ZN8touchgfx3BoxC1Ev+0x44>)
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	601a      	str	r2, [r3, #0]
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	22ff      	movs	r2, #255	; 0xff
 80133c4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	3328      	adds	r3, #40	; 0x28
 80133cc:	2100      	movs	r1, #0
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7ff fee5 	bl	801319e <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	4618      	mov	r0, r3
 80133d8:	3708      	adds	r7, #8
 80133da:	46bd      	mov	sp, r7
 80133dc:	bd80      	pop	{r7, pc}
 80133de:	bf00      	nop
 80133e0:	0802be38 	.word	0x0802be38

080133e4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 80133e4:	b480      	push	{r7}
 80133e6:	b083      	sub	sp, #12
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
 80133ec:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	683a      	ldr	r2, [r7, #0]
 80133f2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80133f4:	bf00      	nop
 80133f6:	370c      	adds	r7, #12
 80133f8:	46bd      	mov	sp, r7
 80133fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fe:	4770      	bx	lr

08013400 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8013400:	b480      	push	{r7}
 8013402:	b083      	sub	sp, #12
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
 8013408:	460b      	mov	r3, r1
 801340a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 801340c:	4a06      	ldr	r2, [pc, #24]	; (8013428 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	601a      	str	r2, [r3, #0]
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	887a      	ldrh	r2, [r7, #2]
 8013416:	809a      	strh	r2, [r3, #4]
    }
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	4618      	mov	r0, r3
 801341c:	370c      	adds	r7, #12
 801341e:	46bd      	mov	sp, r7
 8013420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013424:	4770      	bx	lr
 8013426:	bf00      	nop
 8013428:	0802a510 	.word	0x0802a510

0801342c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 801342c:	b580      	push	{r7, lr}
 801342e:	b082      	sub	sp, #8
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	4618      	mov	r0, r3
 8013438:	2326      	movs	r3, #38	; 0x26
 801343a:	461a      	mov	r2, r3
 801343c:	2100      	movs	r1, #0
 801343e:	f015 fab1 	bl	80289a4 <memset>
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	4618      	mov	r0, r3
 8013446:	f7ff ff97 	bl	8013378 <_ZN8touchgfx6WidgetC1Ev>
 801344a:	4a14      	ldr	r2, [pc, #80]	; (801349c <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	601a      	str	r2, [r3, #0]
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	3328      	adds	r3, #40	; 0x28
 8013454:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013458:	4618      	mov	r0, r3
 801345a:	f7ff ffd1 	bl	8013400 <_ZN8touchgfx9TypedTextC1Et>
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	3330      	adds	r3, #48	; 0x30
 8013462:	2100      	movs	r1, #0
 8013464:	4618      	mov	r0, r3
 8013466:	f7ff fe9a 	bl	801319e <_ZN8touchgfx9colortypeC1Em>
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	2200      	movs	r2, #0
 801346e:	869a      	strh	r2, [r3, #52]	; 0x34
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	22ff      	movs	r2, #255	; 0xff
 8013474:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	2200      	movs	r2, #0
 801347c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2200      	movs	r2, #0
 8013484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	2200      	movs	r2, #0
 801348c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	4618      	mov	r0, r3
 8013494:	3708      	adds	r7, #8
 8013496:	46bd      	mov	sp, r7
 8013498:	bd80      	pop	{r7, pc}
 801349a:	bf00      	nop
 801349c:	0802bd90 	.word	0x0802bd90

080134a0 <_ZN8touchgfx5ImageD1Ev>:
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	4a05      	ldr	r2, [pc, #20]	; (80134c0 <_ZN8touchgfx5ImageD1Ev+0x20>)
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	601a      	str	r2, [r3, #0]
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	4618      	mov	r0, r3
 80134b2:	f7fe ff41 	bl	8012338 <_ZN8touchgfx6WidgetD1Ev>
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	4618      	mov	r0, r3
 80134ba:	3708      	adds	r7, #8
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}
 80134c0:	0802bfc0 	.word	0x0802bfc0

080134c4 <_ZN8touchgfx5ImageD0Ev>:
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b082      	sub	sp, #8
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
 80134cc:	6878      	ldr	r0, [r7, #4]
 80134ce:	f7ff ffe7 	bl	80134a0 <_ZN8touchgfx5ImageD1Ev>
 80134d2:	212c      	movs	r1, #44	; 0x2c
 80134d4:	6878      	ldr	r0, [r7, #4]
 80134d6:	f015 f8b0 	bl	802863a <_ZdlPvj>
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	4618      	mov	r0, r3
 80134de:	3708      	adds	r7, #8
 80134e0:	46bd      	mov	sp, r7
 80134e2:	bd80      	pop	{r7, pc}

080134e4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b082      	sub	sp, #8
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	4a05      	ldr	r2, [pc, #20]	; (8013504 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	601a      	str	r2, [r3, #0]
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	4618      	mov	r0, r3
 80134f6:	f7ff fed7 	bl	80132a8 <_ZN8touchgfx6ScreenD1Ev>
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	4618      	mov	r0, r3
 80134fe:	3708      	adds	r7, #8
 8013500:	46bd      	mov	sp, r7
 8013502:	bd80      	pop	{r7, pc}
 8013504:	0802a7a0 	.word	0x0802a7a0

08013508 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8013508:	b580      	push	{r7, lr}
 801350a:	b082      	sub	sp, #8
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
 8013510:	6878      	ldr	r0, [r7, #4]
 8013512:	f7ff ffe7 	bl	80134e4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8013516:	2140      	movs	r1, #64	; 0x40
 8013518:	6878      	ldr	r0, [r7, #4]
 801351a:	f015 f88e 	bl	802863a <_ZdlPvj>
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	4618      	mov	r0, r3
 8013522:	3708      	adds	r7, #8
 8013524:	46bd      	mov	sp, r7
 8013526:	bd80      	pop	{r7, pc}

08013528 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8013528:	b580      	push	{r7, lr}
 801352a:	b082      	sub	sp, #8
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
 8013530:	4a0d      	ldr	r2, [pc, #52]	; (8013568 <_ZN15Screen1ViewBaseD1Ev+0x40>)
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	601a      	str	r2, [r3, #0]
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	33a8      	adds	r3, #168	; 0xa8
 801353a:	4618      	mov	r0, r3
 801353c:	f000 fa2a 	bl	8013994 <_ZN8touchgfx13ImageProgressD1Ev>
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	336c      	adds	r3, #108	; 0x6c
 8013544:	4618      	mov	r0, r3
 8013546:	f000 f98d 	bl	8013864 <_ZN8touchgfx8TextAreaD1Ev>
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	3340      	adds	r3, #64	; 0x40
 801354e:	4618      	mov	r0, r3
 8013550:	f000 f966 	bl	8013820 <_ZN8touchgfx3BoxD1Ev>
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	4618      	mov	r0, r3
 8013558:	f7ff ffc4 	bl	80134e4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	4618      	mov	r0, r3
 8013560:	3708      	adds	r7, #8
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}
 8013566:	bf00      	nop
 8013568:	0802a768 	.word	0x0802a768

0801356c <_ZN15Screen1ViewBaseD0Ev>:
 801356c:	b580      	push	{r7, lr}
 801356e:	b082      	sub	sp, #8
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
 8013574:	6878      	ldr	r0, [r7, #4]
 8013576:	f7ff ffd7 	bl	8013528 <_ZN15Screen1ViewBaseD1Ev>
 801357a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 801357e:	6878      	ldr	r0, [r7, #4]
 8013580:	f015 f85b 	bl	802863a <_ZdlPvj>
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	4618      	mov	r0, r3
 8013588:	3708      	adds	r7, #8
 801358a:	46bd      	mov	sp, r7
 801358c:	bd80      	pop	{r7, pc}

0801358e <_ZN15Screen1ViewBase19syringePumpProgressEv>:
    virtual void afterTransition();

    /*
     * Virtual Action Handlers
     */
    virtual void syringePumpProgress()
 801358e:	b480      	push	{r7}
 8013590:	b083      	sub	sp, #12
 8013592:	af00      	add	r7, sp, #0
 8013594:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 8013596:	bf00      	nop
 8013598:	370c      	adds	r7, #12
 801359a:	46bd      	mov	sp, r7
 801359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a0:	4770      	bx	lr
	...

080135a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     *
     * @note This function is not available to call before the LCD has been setup, because the
     *       color depth is required. Consider using the function getColorFromRGB for a
     *       specific class, e.g. LCD16::getColorFromRGB().
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 80135a4:	b590      	push	{r4, r7, lr}
 80135a6:	b083      	sub	sp, #12
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	4603      	mov	r3, r0
 80135ac:	71fb      	strb	r3, [r7, #7]
 80135ae:	460b      	mov	r3, r1
 80135b0:	71bb      	strb	r3, [r7, #6]
 80135b2:	4613      	mov	r3, r2
 80135b4:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 80135b6:	f7fe fd0d 	bl	8011fd4 <_ZN8touchgfx3HAL11getInstanceEv>
 80135ba:	4603      	mov	r3, r0
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d105      	bne.n	80135cc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 80135c0:	4b0a      	ldr	r3, [pc, #40]	; (80135ec <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 80135c2:	4a0b      	ldr	r2, [pc, #44]	; (80135f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 80135c4:	2135      	movs	r1, #53	; 0x35
 80135c6:	480b      	ldr	r0, [pc, #44]	; (80135f4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 80135c8:	f015 f866 	bl	8028698 <__assert_func>
 80135cc:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 80135ce:	f7fe fd0d 	bl	8011fec <_ZN8touchgfx3HAL3lcdEv>
 80135d2:	6803      	ldr	r3, [r0, #0]
 80135d4:	3328      	adds	r3, #40	; 0x28
 80135d6:	681c      	ldr	r4, [r3, #0]
 80135d8:	797b      	ldrb	r3, [r7, #5]
 80135da:	79ba      	ldrb	r2, [r7, #6]
 80135dc:	79f9      	ldrb	r1, [r7, #7]
 80135de:	47a0      	blx	r4
 80135e0:	4603      	mov	r3, r0
    }
 80135e2:	4618      	mov	r0, r3
 80135e4:	370c      	adds	r7, #12
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd90      	pop	{r4, r7, pc}
 80135ea:	bf00      	nop
 80135ec:	08029d78 	.word	0x08029d78
 80135f0:	08029dbc 	.word	0x08029dbc
 80135f4:	08029e18 	.word	0x08029e18

080135f8 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

Screen1ViewBase::Screen1ViewBase()
 80135f8:	b590      	push	{r4, r7, lr}
 80135fa:	b08d      	sub	sp, #52	; 0x34
 80135fc:	af02      	add	r7, sp, #8
 80135fe:	6078      	str	r0, [r7, #4]
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	4618      	mov	r0, r3
 8013604:	f000 f8d4 	bl	80137b0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8013608:	4a5c      	ldr	r2, [pc, #368]	; (801377c <_ZN15Screen1ViewBaseC1Ev+0x184>)
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	601a      	str	r2, [r3, #0]
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	3340      	adds	r3, #64	; 0x40
 8013612:	4618      	mov	r0, r3
 8013614:	f7ff fec2 	bl	801339c <_ZN8touchgfx3BoxC1Ev>
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	336c      	adds	r3, #108	; 0x6c
 801361c:	4618      	mov	r0, r3
 801361e:	f7ff ff05 	bl	801342c <_ZN8touchgfx8TextAreaC1Ev>
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	33a8      	adds	r3, #168	; 0xa8
 8013626:	4618      	mov	r0, r3
 8013628:	f002 ff06 	bl	8016438 <_ZN8touchgfx13ImageProgressC1Ev>
{

    __background.setPosition(0, 0, 480, 272);
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8013632:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013636:	9300      	str	r3, [sp, #0]
 8013638:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801363c:	2200      	movs	r2, #0
 801363e:	2100      	movs	r1, #0
 8013640:	f7fe fb85 	bl	8011d4e <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801364a:	2200      	movs	r2, #0
 801364c:	2100      	movs	r1, #0
 801364e:	2000      	movs	r0, #0
 8013650:	f7ff ffa8 	bl	80135a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013654:	4603      	mov	r3, r0
 8013656:	4619      	mov	r1, r3
 8013658:	4620      	mov	r0, r4
 801365a:	f7ff fec3 	bl	80133e4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    textArea1.setXY(227, 124);
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	336c      	adds	r3, #108	; 0x6c
 8013662:	227c      	movs	r2, #124	; 0x7c
 8013664:	21e3      	movs	r1, #227	; 0xe3
 8013666:	4618      	mov	r0, r3
 8013668:	f7fe fbbd 	bl	8011de6 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(240, 18, 18));
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8013672:	2212      	movs	r2, #18
 8013674:	2112      	movs	r1, #18
 8013676:	20f0      	movs	r0, #240	; 0xf0
 8013678:	f7ff ff94 	bl	80135a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801367c:	4603      	mov	r3, r0
 801367e:	61fc      	str	r4, [r7, #28]
 8013680:	60fb      	str	r3, [r7, #12]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8013682:	69fb      	ldr	r3, [r7, #28]
 8013684:	68fa      	ldr	r2, [r7, #12]
 8013686:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013688:	bf00      	nop
    textArea1.setLinespacing(0);
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	336c      	adds	r3, #108	; 0x6c
 801368e:	627b      	str	r3, [r7, #36]	; 0x24
 8013690:	2300      	movs	r3, #0
 8013692:	847b      	strh	r3, [r7, #34]	; 0x22
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8013694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013696:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013698:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801369a:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80136a2:	f107 0310 	add.w	r3, r7, #16
 80136a6:	2100      	movs	r1, #0
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7ff fea9 	bl	8013400 <_ZN8touchgfx9TypedTextC1Et>
 80136ae:	f107 0310 	add.w	r3, r7, #16
 80136b2:	4619      	mov	r1, r3
 80136b4:	4620      	mov	r0, r4
 80136b6:	f004 fc66 	bl	8017f86 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
 80136ba:	f107 0310 	add.w	r3, r7, #16
 80136be:	4618      	mov	r0, r3
 80136c0:	f7fe f8b0 	bl	8011824 <_ZN8touchgfx9TypedTextD1Ev>

    imageProgress1.setXY(148, 79);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	33a8      	adds	r3, #168	; 0xa8
 80136c8:	224f      	movs	r2, #79	; 0x4f
 80136ca:	2194      	movs	r1, #148	; 0x94
 80136cc:	4618      	mov	r0, r3
 80136ce:	f7fe fb8a 	bl	8011de6 <_ZN8touchgfx8Drawable5setXYEss>
    imageProgress1.setProgressIndicatorPosition(2, 2, 180, 16);
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 80136d8:	2310      	movs	r3, #16
 80136da:	9300      	str	r3, [sp, #0]
 80136dc:	23b4      	movs	r3, #180	; 0xb4
 80136de:	2202      	movs	r2, #2
 80136e0:	2102      	movs	r1, #2
 80136e2:	f002 fd57 	bl	8016194 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    imageProgress1.setRange(0, 100);
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 80136ec:	2300      	movs	r3, #0
 80136ee:	9300      	str	r3, [sp, #0]
 80136f0:	2300      	movs	r3, #0
 80136f2:	2264      	movs	r2, #100	; 0x64
 80136f4:	2100      	movs	r1, #0
 80136f6:	f002 ffd3 	bl	80166a0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    imageProgress1.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	33a8      	adds	r3, #168	; 0xa8
 80136fe:	2100      	movs	r1, #0
 8013700:	4618      	mov	r0, r3
 8013702:	f002 fce6 	bl	80160d2 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    imageProgress1.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 801370c:	f107 0318 	add.w	r3, r7, #24
 8013710:	2102      	movs	r1, #2
 8013712:	4618      	mov	r0, r3
 8013714:	f7ff fd89 	bl	801322a <_ZN8touchgfx6BitmapC1Et>
 8013718:	f107 0318 	add.w	r3, r7, #24
 801371c:	4619      	mov	r1, r3
 801371e:	4620      	mov	r0, r4
 8013720:	f003 f866 	bl	80167f0 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    imageProgress1.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_PROGRESS_INDICATOR_FILL_STRIPED_NORMAL_HORIZONTAL_ID);
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	33a8      	adds	r3, #168	; 0xa8
 8013728:	2103      	movs	r1, #3
 801372a:	4618      	mov	r0, r3
 801372c:	f002 fd11 	bl	8016152 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    imageProgress1.setValue(60);
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	33a8      	adds	r3, #168	; 0xa8
 8013734:	213c      	movs	r1, #60	; 0x3c
 8013736:	4618      	mov	r0, r3
 8013738:	f002 fd44 	bl	80161c4 <_ZN8touchgfx13ImageProgress8setValueEi>
    imageProgress1.setAnchorAtZero(false);
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	33a8      	adds	r3, #168	; 0xa8
 8013740:	2100      	movs	r1, #0
 8013742:	4618      	mov	r0, r3
 8013744:	f002 fcec 	bl	8016120 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    add(__background);
 8013748:	687a      	ldr	r2, [r7, #4]
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	3340      	adds	r3, #64	; 0x40
 801374e:	4619      	mov	r1, r3
 8013750:	4610      	mov	r0, r2
 8013752:	f7ff fe01 	bl	8013358 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8013756:	687a      	ldr	r2, [r7, #4]
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	336c      	adds	r3, #108	; 0x6c
 801375c:	4619      	mov	r1, r3
 801375e:	4610      	mov	r0, r2
 8013760:	f7ff fdfa 	bl	8013358 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(imageProgress1);
 8013764:	687a      	ldr	r2, [r7, #4]
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	33a8      	adds	r3, #168	; 0xa8
 801376a:	4619      	mov	r1, r3
 801376c:	4610      	mov	r0, r2
 801376e:	f7ff fdf3 	bl	8013358 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	4618      	mov	r0, r3
 8013776:	372c      	adds	r7, #44	; 0x2c
 8013778:	46bd      	mov	sp, r7
 801377a:	bd90      	pop	{r4, r7, pc}
 801377c:	0802a768 	.word	0x0802a768

08013780 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8013780:	b480      	push	{r7}
 8013782:	b083      	sub	sp, #12
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]

}
 8013788:	bf00      	nop
 801378a:	370c      	adds	r7, #12
 801378c:	46bd      	mov	sp, r7
 801378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013792:	4770      	bx	lr

08013794 <_ZN15Screen1ViewBase15afterTransitionEv>:

//Called when the screen transition ends
void Screen1ViewBase::afterTransition()
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b082      	sub	sp, #8
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
    //Interaction1
    //When screen transition ends call virtual function
    //Call syringePumpProgress
    syringePumpProgress();
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	332c      	adds	r3, #44	; 0x2c
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	6878      	ldr	r0, [r7, #4]
 80137a6:	4798      	blx	r3
}
 80137a8:	bf00      	nop
 80137aa:	3708      	adds	r7, #8
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}

080137b0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b082      	sub	sp, #8
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	4618      	mov	r0, r3
 80137bc:	f007 fef2 	bl	801b5a4 <_ZN8touchgfx6ScreenC1Ev>
 80137c0:	4a05      	ldr	r2, [pc, #20]	; (80137d8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	601a      	str	r2, [r3, #0]
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	2200      	movs	r2, #0
 80137ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	4618      	mov	r0, r3
 80137d0:	3708      	adds	r7, #8
 80137d2:	46bd      	mov	sp, r7
 80137d4:	bd80      	pop	{r7, pc}
 80137d6:	bf00      	nop
 80137d8:	0802a7a0 	.word	0x0802a7a0

080137dc <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 80137dc:	b580      	push	{r7, lr}
 80137de:	b082      	sub	sp, #8
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
 80137e4:	4a05      	ldr	r2, [pc, #20]	; (80137fc <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	601a      	str	r2, [r3, #0]
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	4618      	mov	r0, r3
 80137ee:	f7fe fa83 	bl	8011cf8 <_ZN8touchgfx8DrawableD1Ev>
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	4618      	mov	r0, r3
 80137f6:	3708      	adds	r7, #8
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bd80      	pop	{r7, pc}
 80137fc:	0802b3e4 	.word	0x0802b3e4

08013800 <_ZN8touchgfx9ContainerD0Ev>:
 8013800:	b580      	push	{r7, lr}
 8013802:	b082      	sub	sp, #8
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
 8013808:	6878      	ldr	r0, [r7, #4]
 801380a:	f7ff ffe7 	bl	80137dc <_ZN8touchgfx9ContainerD1Ev>
 801380e:	212c      	movs	r1, #44	; 0x2c
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f014 ff12 	bl	802863a <_ZdlPvj>
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	4618      	mov	r0, r3
 801381a:	3708      	adds	r7, #8
 801381c:	46bd      	mov	sp, r7
 801381e:	bd80      	pop	{r7, pc}

08013820 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8013820:	b580      	push	{r7, lr}
 8013822:	b082      	sub	sp, #8
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
 8013828:	4a05      	ldr	r2, [pc, #20]	; (8013840 <_ZN8touchgfx3BoxD1Ev+0x20>)
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	601a      	str	r2, [r3, #0]
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	4618      	mov	r0, r3
 8013832:	f7fe fd81 	bl	8012338 <_ZN8touchgfx6WidgetD1Ev>
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	4618      	mov	r0, r3
 801383a:	3708      	adds	r7, #8
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}
 8013840:	0802be38 	.word	0x0802be38

08013844 <_ZN8touchgfx3BoxD0Ev>:
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	6878      	ldr	r0, [r7, #4]
 801384e:	f7ff ffe7 	bl	8013820 <_ZN8touchgfx3BoxD1Ev>
 8013852:	212c      	movs	r1, #44	; 0x2c
 8013854:	6878      	ldr	r0, [r7, #4]
 8013856:	f014 fef0 	bl	802863a <_ZdlPvj>
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	4618      	mov	r0, r3
 801385e:	3708      	adds	r7, #8
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}

08013864 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8013864:	b580      	push	{r7, lr}
 8013866:	b082      	sub	sp, #8
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
 801386c:	4a08      	ldr	r2, [pc, #32]	; (8013890 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	601a      	str	r2, [r3, #0]
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	3328      	adds	r3, #40	; 0x28
 8013876:	4618      	mov	r0, r3
 8013878:	f7fd ffd4 	bl	8011824 <_ZN8touchgfx9TypedTextD1Ev>
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	4618      	mov	r0, r3
 8013880:	f7fe fd5a 	bl	8012338 <_ZN8touchgfx6WidgetD1Ev>
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	4618      	mov	r0, r3
 8013888:	3708      	adds	r7, #8
 801388a:	46bd      	mov	sp, r7
 801388c:	bd80      	pop	{r7, pc}
 801388e:	bf00      	nop
 8013890:	0802bd90 	.word	0x0802bd90

08013894 <_ZN8touchgfx8TextAreaD0Ev>:
 8013894:	b580      	push	{r7, lr}
 8013896:	b082      	sub	sp, #8
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
 801389c:	6878      	ldr	r0, [r7, #4]
 801389e:	f7ff ffe1 	bl	8013864 <_ZN8touchgfx8TextAreaD1Ev>
 80138a2:	213c      	movs	r1, #60	; 0x3c
 80138a4:	6878      	ldr	r0, [r7, #4]
 80138a6:	f014 fec8 	bl	802863a <_ZdlPvj>
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	4618      	mov	r0, r3
 80138ae:	3708      	adds	r7, #8
 80138b0:	46bd      	mov	sp, r7
 80138b2:	bd80      	pop	{r7, pc}

080138b4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b082      	sub	sp, #8
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]
 80138bc:	4a0a      	ldr	r2, [pc, #40]	; (80138e8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	601a      	str	r2, [r3, #0]
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	3358      	adds	r3, #88	; 0x58
 80138c6:	4618      	mov	r0, r3
 80138c8:	f7ff ff88 	bl	80137dc <_ZN8touchgfx9ContainerD1Ev>
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	332c      	adds	r3, #44	; 0x2c
 80138d0:	4618      	mov	r0, r3
 80138d2:	f7ff fde5 	bl	80134a0 <_ZN8touchgfx5ImageD1Ev>
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	4618      	mov	r0, r3
 80138da:	f7ff ff7f 	bl	80137dc <_ZN8touchgfx9ContainerD1Ev>
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	4618      	mov	r0, r3
 80138e2:	3708      	adds	r7, #8
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd80      	pop	{r7, pc}
 80138e8:	0802b1f0 	.word	0x0802b1f0

080138ec <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b082      	sub	sp, #8
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
 80138f4:	6878      	ldr	r0, [r7, #4]
 80138f6:	f7ff ffdd 	bl	80138b4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 80138fa:	21b0      	movs	r1, #176	; 0xb0
 80138fc:	6878      	ldr	r0, [r7, #4]
 80138fe:	f014 fe9c 	bl	802863a <_ZdlPvj>
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	4618      	mov	r0, r3
 8013906:	3708      	adds	r7, #8
 8013908:	46bd      	mov	sp, r7
 801390a:	bd80      	pop	{r7, pc}

0801390c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
{
/**
 * An abstract class for progress indicators that need a horizontal or vertical direction to be
 * specified.
 */
class AbstractDirectionProgress : public AbstractProgressIndicator
 801390c:	b580      	push	{r7, lr}
 801390e:	b082      	sub	sp, #8
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
 8013914:	4a05      	ldr	r2, [pc, #20]	; (801392c <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x20>)
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	601a      	str	r2, [r3, #0]
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	4618      	mov	r0, r3
 801391e:	f7ff ffc9 	bl	80138b4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	4618      	mov	r0, r3
 8013926:	3708      	adds	r7, #8
 8013928:	46bd      	mov	sp, r7
 801392a:	bd80      	pop	{r7, pc}
 801392c:	0802af14 	.word	0x0802af14

08013930 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8013930:	b580      	push	{r7, lr}
 8013932:	b082      	sub	sp, #8
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
 8013938:	6878      	ldr	r0, [r7, #4]
 801393a:	f7ff ffe7 	bl	801390c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801393e:	21b4      	movs	r1, #180	; 0xb4
 8013940:	6878      	ldr	r0, [r7, #4]
 8013942:	f014 fe7a 	bl	802863a <_ZdlPvj>
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	4618      	mov	r0, r3
 801394a:	3708      	adds	r7, #8
 801394c:	46bd      	mov	sp, r7
 801394e:	bd80      	pop	{r7, pc}

08013950 <_ZN8touchgfx10TiledImageD1Ev>:
 * Simple widget capable of showing a bitmap tiled indefinitely horizontally and vertically.
 * This means that when the TiledImage Widget is larger than the provided Bitmap, the
 * Bitmap is repeated over and over horizontally and vertically. The bitmap can be alpha-
 * blended with the background and have areas of transparency.
 */
class TiledImage : public Image
 8013950:	b580      	push	{r7, lr}
 8013952:	b082      	sub	sp, #8
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]
 8013958:	4a05      	ldr	r2, [pc, #20]	; (8013970 <_ZN8touchgfx10TiledImageD1Ev+0x20>)
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	601a      	str	r2, [r3, #0]
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	4618      	mov	r0, r3
 8013962:	f7ff fd9d 	bl	80134a0 <_ZN8touchgfx5ImageD1Ev>
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	4618      	mov	r0, r3
 801396a:	3708      	adds	r7, #8
 801396c:	46bd      	mov	sp, r7
 801396e:	bd80      	pop	{r7, pc}
 8013970:	0802be9c 	.word	0x0802be9c

08013974 <_ZN8touchgfx10TiledImageD0Ev>:
 8013974:	b580      	push	{r7, lr}
 8013976:	b082      	sub	sp, #8
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
 801397c:	6878      	ldr	r0, [r7, #4]
 801397e:	f7ff ffe7 	bl	8013950 <_ZN8touchgfx10TiledImageD1Ev>
 8013982:	2130      	movs	r1, #48	; 0x30
 8013984:	6878      	ldr	r0, [r7, #4]
 8013986:	f014 fe58 	bl	802863a <_ZdlPvj>
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	4618      	mov	r0, r3
 801398e:	3708      	adds	r7, #8
 8013990:	46bd      	mov	sp, r7
 8013992:	bd80      	pop	{r7, pc}

08013994 <_ZN8touchgfx13ImageProgressD1Ev>:
 * An image progress will show parts of an image as a progress indicator. The image can progress
 * from the left, the right, the bottom or the top of the given area, and can visually
 * be fixed with a larger and larger portion of the image showing, or it can be moved
 * into view.
 */
class ImageProgress : public AbstractDirectionProgress
 8013994:	b580      	push	{r7, lr}
 8013996:	b082      	sub	sp, #8
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
 801399c:	4a0a      	ldr	r2, [pc, #40]	; (80139c8 <_ZN8touchgfx13ImageProgressD1Ev+0x34>)
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	601a      	str	r2, [r3, #0]
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	33e0      	adds	r3, #224	; 0xe0
 80139a6:	4618      	mov	r0, r3
 80139a8:	f7ff ffd2 	bl	8013950 <_ZN8touchgfx10TiledImageD1Ev>
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	33b4      	adds	r3, #180	; 0xb4
 80139b0:	4618      	mov	r0, r3
 80139b2:	f7ff ff13 	bl	80137dc <_ZN8touchgfx9ContainerD1Ev>
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	4618      	mov	r0, r3
 80139ba:	f7ff ffa7 	bl	801390c <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	4618      	mov	r0, r3
 80139c2:	3708      	adds	r7, #8
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}
 80139c8:	0802b050 	.word	0x0802b050

080139cc <_ZN8touchgfx13ImageProgressD0Ev>:
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b082      	sub	sp, #8
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
 80139d4:	6878      	ldr	r0, [r7, #4]
 80139d6:	f7ff ffdd 	bl	8013994 <_ZN8touchgfx13ImageProgressD1Ev>
 80139da:	f44f 718a 	mov.w	r1, #276	; 0x114
 80139de:	6878      	ldr	r0, [r7, #4]
 80139e0:	f014 fe2b 	bl	802863a <_ZdlPvj>
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	4618      	mov	r0, r3
 80139e8:	3708      	adds	r7, #8
 80139ea:	46bd      	mov	sp, r7
 80139ec:	bd80      	pop	{r7, pc}

080139ee <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 80139ee:	b480      	push	{r7}
 80139f0:	b083      	sub	sp, #12
 80139f2:	af00      	add	r7, sp, #0
 80139f4:	6078      	str	r0, [r7, #4]
 80139f6:	460b      	mov	r3, r1
 80139f8:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	78fa      	ldrb	r2, [r7, #3]
 80139fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8013a02:	bf00      	nop
 8013a04:	370c      	adds	r7, #12
 8013a06:	46bd      	mov	sp, r7
 8013a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a0c:	4770      	bx	lr
	...

08013a10 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b082      	sub	sp, #8
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	2326      	movs	r3, #38	; 0x26
 8013a1e:	461a      	mov	r2, r3
 8013a20:	2100      	movs	r1, #0
 8013a22:	f014 ffbf 	bl	80289a4 <memset>
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f7ff fca5 	bl	8013378 <_ZN8touchgfx6WidgetC1Ev>
 8013a2e:	4a0a      	ldr	r2, [pc, #40]	; (8013a58 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	601a      	str	r2, [r3, #0]
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	2200      	movs	r2, #0
 8013a38:	629a      	str	r2, [r3, #40]	; 0x28
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	2101      	movs	r1, #1
 8013a46:	4618      	mov	r0, r3
 8013a48:	f7ff ffd1 	bl	80139ee <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	4618      	mov	r0, r3
 8013a50:	3708      	adds	r7, #8
 8013a52:	46bd      	mov	sp, r7
 8013a54:	bd80      	pop	{r7, pc}
 8013a56:	bf00      	nop
 8013a58:	0802bbf8 	.word	0x0802bbf8

08013a5c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8013a5c:	b480      	push	{r7}
 8013a5e:	b083      	sub	sp, #12
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	6078      	str	r0, [r7, #4]
 8013a64:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	683a      	ldr	r2, [r7, #0]
 8013a6a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8013a6c:	bf00      	nop
 8013a6e:	370c      	adds	r7, #12
 8013a70:	46bd      	mov	sp, r7
 8013a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a76:	4770      	bx	lr

08013a78 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	b082      	sub	sp, #8
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
 8013a80:	4a05      	ldr	r2, [pc, #20]	; (8013a98 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	601a      	str	r2, [r3, #0]
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	4618      	mov	r0, r3
 8013a8a:	f7fe fc55 	bl	8012338 <_ZN8touchgfx6WidgetD1Ev>
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	4618      	mov	r0, r3
 8013a92:	3708      	adds	r7, #8
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}
 8013a98:	0802bbf8 	.word	0x0802bbf8

08013a9c <_ZN8touchgfx14AbstractButtonD0Ev>:
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b082      	sub	sp, #8
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
 8013aa4:	6878      	ldr	r0, [r7, #4]
 8013aa6:	f7ff ffe7 	bl	8013a78 <_ZN8touchgfx14AbstractButtonD1Ev>
 8013aaa:	2130      	movs	r1, #48	; 0x30
 8013aac:	6878      	ldr	r0, [r7, #4]
 8013aae:	f014 fdc4 	bl	802863a <_ZdlPvj>
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	3708      	adds	r7, #8
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	bd80      	pop	{r7, pc}

08013abc <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b082      	sub	sp, #8
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f7ff ffa2 	bl	8013a10 <_ZN8touchgfx14AbstractButtonC1Ev>
 8013acc:	4a0c      	ldr	r2, [pc, #48]	; (8013b00 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	601a      	str	r2, [r3, #0]
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	332e      	adds	r3, #46	; 0x2e
 8013ad6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013ada:	4618      	mov	r0, r3
 8013adc:	f7ff fba5 	bl	801322a <_ZN8touchgfx6BitmapC1Et>
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	3330      	adds	r3, #48	; 0x30
 8013ae4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f7ff fb9e 	bl	801322a <_ZN8touchgfx6BitmapC1Et>
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	22ff      	movs	r2, #255	; 0xff
 8013af2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	4618      	mov	r0, r3
 8013afa:	3708      	adds	r7, #8
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}
 8013b00:	0802bf1c 	.word	0x0802bf1c

08013b04 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b082      	sub	sp, #8
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
 8013b0c:	4a05      	ldr	r2, [pc, #20]	; (8013b24 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	601a      	str	r2, [r3, #0]
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	4618      	mov	r0, r3
 8013b16:	f7ff fbc7 	bl	80132a8 <_ZN8touchgfx6ScreenD1Ev>
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	3708      	adds	r7, #8
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}
 8013b24:	0802a820 	.word	0x0802a820

08013b28 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b082      	sub	sp, #8
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	6878      	ldr	r0, [r7, #4]
 8013b32:	f7ff ffe7 	bl	8013b04 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8013b36:	2140      	movs	r1, #64	; 0x40
 8013b38:	6878      	ldr	r0, [r7, #4]
 8013b3a:	f014 fd7e 	bl	802863a <_ZdlPvj>
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	4618      	mov	r0, r3
 8013b42:	3708      	adds	r7, #8
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}

08013b48 <_ZN14screenViewBaseD1Ev>:

class screenViewBase : public touchgfx::View<screenPresenter>
{
public:
    screenViewBase();
    virtual ~screenViewBase() {}
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b082      	sub	sp, #8
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
 8013b50:	4a0d      	ldr	r2, [pc, #52]	; (8013b88 <_ZN14screenViewBaseD1Ev+0x40>)
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	601a      	str	r2, [r3, #0]
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	33a0      	adds	r3, #160	; 0xa0
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f000 f932 	bl	8013dc4 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	336c      	adds	r3, #108	; 0x6c
 8013b64:	4618      	mov	r0, r3
 8013b66:	f000 f94f 	bl	8013e08 <_ZN8touchgfx6ButtonD1Ev>
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	3340      	adds	r3, #64	; 0x40
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f7ff fe56 	bl	8013820 <_ZN8touchgfx3BoxD1Ev>
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	4618      	mov	r0, r3
 8013b78:	f7ff ffc4 	bl	8013b04 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	4618      	mov	r0, r3
 8013b80:	3708      	adds	r7, #8
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bd80      	pop	{r7, pc}
 8013b86:	bf00      	nop
 8013b88:	0802a7d4 	.word	0x0802a7d4

08013b8c <_ZN14screenViewBaseD0Ev>:
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b082      	sub	sp, #8
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
 8013b94:	6878      	ldr	r0, [r7, #4]
 8013b96:	f7ff ffd7 	bl	8013b48 <_ZN14screenViewBaseD1Ev>
 8013b9a:	21b0      	movs	r1, #176	; 0xb0
 8013b9c:	6878      	ldr	r0, [r7, #4]
 8013b9e:	f014 fd4c 	bl	802863a <_ZdlPvj>
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	3708      	adds	r7, #8
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	bd80      	pop	{r7, pc}

08013bac <_ZN14screenViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b082      	sub	sp, #8
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8013bb4:	f006 f98e 	bl	8019ed4 <_ZN8touchgfx11Application11getInstanceEv>
 8013bb8:	4603      	mov	r3, r0
    }
 8013bba:	4618      	mov	r0, r3
 8013bbc:	3708      	adds	r7, #8
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}
	...

08013bc4 <_ZN14screenViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"

screenViewBase::screenViewBase() :
 8013bc4:	b590      	push	{r4, r7, lr}
 8013bc6:	b089      	sub	sp, #36	; 0x24
 8013bc8:	af02      	add	r7, sp, #8
 8013bca:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &screenViewBase::buttonCallbackHandler)
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f000 f892 	bl	8013cf8 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 8013bd4:	4a36      	ldr	r2, [pc, #216]	; (8013cb0 <_ZN14screenViewBaseC1Ev+0xec>)
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	601a      	str	r2, [r3, #0]
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	3340      	adds	r3, #64	; 0x40
 8013bde:	4618      	mov	r0, r3
 8013be0:	f7ff fbdc 	bl	801339c <_ZN8touchgfx3BoxC1Ev>
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	336c      	adds	r3, #108	; 0x6c
 8013be8:	4618      	mov	r0, r3
 8013bea:	f7ff ff67 	bl	8013abc <_ZN8touchgfx6ButtonC1Ev>
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8013bf4:	4b2f      	ldr	r3, [pc, #188]	; (8013cb4 <_ZN14screenViewBaseC1Ev+0xf0>)
 8013bf6:	60bb      	str	r3, [r7, #8]
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	60fb      	str	r3, [r7, #12]
 8013bfc:	f107 0308 	add.w	r3, r7, #8
 8013c00:	cb0c      	ldmia	r3, {r2, r3}
 8013c02:	6879      	ldr	r1, [r7, #4]
 8013c04:	f000 f89e 	bl	8013d44 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8013c0e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013c12:	9300      	str	r3, [sp, #0]
 8013c14:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013c18:	2200      	movs	r2, #0
 8013c1a:	2100      	movs	r1, #0
 8013c1c:	f7fe f897 	bl	8011d4e <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8013c26:	2200      	movs	r2, #0
 8013c28:	2100      	movs	r1, #0
 8013c2a:	2000      	movs	r0, #0
 8013c2c:	f7ff fcba 	bl	80135a4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013c30:	4603      	mov	r3, r0
 8013c32:	4619      	mov	r1, r3
 8013c34:	4620      	mov	r0, r4
 8013c36:	f7ff fbd5 	bl	80133e4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(155, 106);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	336c      	adds	r3, #108	; 0x6c
 8013c3e:	226a      	movs	r2, #106	; 0x6a
 8013c40:	219b      	movs	r1, #155	; 0x9b
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7fe f8cf 	bl	8011de6 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8013c4e:	f107 0310 	add.w	r3, r7, #16
 8013c52:	2100      	movs	r1, #0
 8013c54:	4618      	mov	r0, r3
 8013c56:	f7ff fae8 	bl	801322a <_ZN8touchgfx6BitmapC1Et>
 8013c5a:	f107 0314 	add.w	r3, r7, #20
 8013c5e:	2101      	movs	r1, #1
 8013c60:	4618      	mov	r0, r3
 8013c62:	f7ff fae2 	bl	801322a <_ZN8touchgfx6BitmapC1Et>
 8013c66:	f107 0214 	add.w	r2, r7, #20
 8013c6a:	f107 0310 	add.w	r3, r7, #16
 8013c6e:	4619      	mov	r1, r3
 8013c70:	4620      	mov	r0, r4
 8013c72:	f004 fb8b 	bl	801838c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	33a0      	adds	r3, #160	; 0xa0
 8013c80:	4619      	mov	r1, r3
 8013c82:	4610      	mov	r0, r2
 8013c84:	f7ff feea 	bl	8013a5c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 8013c88:	687a      	ldr	r2, [r7, #4]
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	3340      	adds	r3, #64	; 0x40
 8013c8e:	4619      	mov	r1, r3
 8013c90:	4610      	mov	r0, r2
 8013c92:	f7ff fb61 	bl	8013358 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 8013c96:	687a      	ldr	r2, [r7, #4]
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	336c      	adds	r3, #108	; 0x6c
 8013c9c:	4619      	mov	r1, r3
 8013c9e:	4610      	mov	r0, r2
 8013ca0:	f7ff fb5a 	bl	8013358 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	371c      	adds	r7, #28
 8013caa:	46bd      	mov	sp, r7
 8013cac:	bd90      	pop	{r4, r7, pc}
 8013cae:	bf00      	nop
 8013cb0:	0802a7d4 	.word	0x0802a7d4
 8013cb4:	08013ccd 	.word	0x08013ccd

08013cb8 <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 8013cb8:	b480      	push	{r7}
 8013cba:	b083      	sub	sp, #12
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]

}
 8013cc0:	bf00      	nop
 8013cc2:	370c      	adds	r7, #12
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cca:	4770      	bx	lr

08013ccc <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b082      	sub	sp, #8
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
 8013cd4:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	336c      	adds	r3, #108	; 0x6c
 8013cda:	683a      	ldr	r2, [r7, #0]
 8013cdc:	429a      	cmp	r2, r3
 8013cde:	d106      	bne.n	8013cee <_ZN14screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenSlideTransitionEast();
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f7ff ff63 	bl	8013bac <_ZN14screenViewBase11applicationEv>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7fe fbe9 	bl	80124c0 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv>
    }
}
 8013cee:	bf00      	nop
 8013cf0:	3708      	adds	r7, #8
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	bd80      	pop	{r7, pc}
	...

08013cf8 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	4618      	mov	r0, r3
 8013d04:	f007 fc4e 	bl	801b5a4 <_ZN8touchgfx6ScreenC1Ev>
 8013d08:	4a05      	ldr	r2, [pc, #20]	; (8013d20 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	601a      	str	r2, [r3, #0]
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	2200      	movs	r2, #0
 8013d12:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	4618      	mov	r0, r3
 8013d18:	3708      	adds	r7, #8
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bd80      	pop	{r7, pc}
 8013d1e:	bf00      	nop
 8013d20:	0802a820 	.word	0x0802a820

08013d24 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8013d24:	b480      	push	{r7}
 8013d26:	b083      	sub	sp, #12
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
 8013d2c:	4a04      	ldr	r2, [pc, #16]	; (8013d40 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	601a      	str	r2, [r3, #0]
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	4618      	mov	r0, r3
 8013d36:	370c      	adds	r7, #12
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3e:	4770      	bx	lr
 8013d40:	0802a854 	.word	0x0802a854

08013d44 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b084      	sub	sp, #16
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	60f8      	str	r0, [r7, #12]
 8013d4c:	60b9      	str	r1, [r7, #8]
 8013d4e:	4639      	mov	r1, r7
 8013d50:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	4618      	mov	r0, r3
 8013d58:	f7ff ffe4 	bl	8013d24 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8013d5c:	4a08      	ldr	r2, [pc, #32]	; (8013d80 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	68ba      	ldr	r2, [r7, #8]
 8013d66:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	3308      	adds	r3, #8
 8013d6c:	463a      	mov	r2, r7
 8013d6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013d72:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	4618      	mov	r0, r3
 8013d7a:	3710      	adds	r7, #16
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bd80      	pop	{r7, pc}
 8013d80:	0802a808 	.word	0x0802a808

08013d84 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8013d84:	b480      	push	{r7}
 8013d86:	b083      	sub	sp, #12
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
    }
 8013d8c:	4a04      	ldr	r2, [pc, #16]	; (8013da0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	601a      	str	r2, [r3, #0]
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	4618      	mov	r0, r3
 8013d96:	370c      	adds	r7, #12
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9e:	4770      	bx	lr
 8013da0:	0802a854 	.word	0x0802a854

08013da4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b082      	sub	sp, #8
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
    }
 8013dac:	6878      	ldr	r0, [r7, #4]
 8013dae:	f7ff ffe9 	bl	8013d84 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8013db2:	2104      	movs	r1, #4
 8013db4:	6878      	ldr	r0, [r7, #4]
 8013db6:	f014 fc40 	bl	802863a <_ZdlPvj>
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3708      	adds	r7, #8
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}

08013dc4 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b082      	sub	sp, #8
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
 8013dcc:	4a05      	ldr	r2, [pc, #20]	; (8013de4 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	601a      	str	r2, [r3, #0]
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f7ff ffd5 	bl	8013d84 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	4618      	mov	r0, r3
 8013dde:	3708      	adds	r7, #8
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd80      	pop	{r7, pc}
 8013de4:	0802a808 	.word	0x0802a808

08013de8 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
 8013df0:	6878      	ldr	r0, [r7, #4]
 8013df2:	f7ff ffe7 	bl	8013dc4 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8013df6:	2110      	movs	r1, #16
 8013df8:	6878      	ldr	r0, [r7, #4]
 8013dfa:	f014 fc1e 	bl	802863a <_ZdlPvj>
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	4618      	mov	r0, r3
 8013e02:	3708      	adds	r7, #8
 8013e04:	46bd      	mov	sp, r7
 8013e06:	bd80      	pop	{r7, pc}

08013e08 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b082      	sub	sp, #8
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
 8013e10:	4a05      	ldr	r2, [pc, #20]	; (8013e28 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	601a      	str	r2, [r3, #0]
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	4618      	mov	r0, r3
 8013e1a:	f7ff fe2d 	bl	8013a78 <_ZN8touchgfx14AbstractButtonD1Ev>
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	4618      	mov	r0, r3
 8013e22:	3708      	adds	r7, #8
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bd80      	pop	{r7, pc}
 8013e28:	0802bf1c 	.word	0x0802bf1c

08013e2c <_ZN8touchgfx6ButtonD0Ev>:
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b082      	sub	sp, #8
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	f7ff ffe7 	bl	8013e08 <_ZN8touchgfx6ButtonD1Ev>
 8013e3a:	2134      	movs	r1, #52	; 0x34
 8013e3c:	6878      	ldr	r0, [r7, #4]
 8013e3e:	f014 fbfc 	bl	802863a <_ZdlPvj>
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	4618      	mov	r0, r3
 8013e46:	3708      	adds	r7, #8
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	bd80      	pop	{r7, pc}

08013e4c <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b082      	sub	sp, #8
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
 8013e54:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	685b      	ldr	r3, [r3, #4]
 8013e5a:	687a      	ldr	r2, [r7, #4]
 8013e5c:	68d2      	ldr	r2, [r2, #12]
 8013e5e:	1052      	asrs	r2, r2, #1
 8013e60:	1898      	adds	r0, r3, r2
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	68db      	ldr	r3, [r3, #12]
 8013e66:	f003 0301 	and.w	r3, r3, #1
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d102      	bne.n	8013e74 <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	689b      	ldr	r3, [r3, #8]
 8013e72:	e00a      	b.n	8013e8a <_ZN8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	685b      	ldr	r3, [r3, #4]
 8013e78:	687a      	ldr	r2, [r7, #4]
 8013e7a:	68d2      	ldr	r2, [r2, #12]
 8013e7c:	1052      	asrs	r2, r2, #1
 8013e7e:	4413      	add	r3, r2
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	687a      	ldr	r2, [r7, #4]
 8013e84:	6892      	ldr	r2, [r2, #8]
 8013e86:	4413      	add	r3, r2
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	6839      	ldr	r1, [r7, #0]
 8013e8c:	4798      	blx	r3
    }
 8013e8e:	bf00      	nop
 8013e90:	3708      	adds	r7, #8
 8013e92:	46bd      	mov	sp, r7
 8013e94:	bd80      	pop	{r7, pc}

08013e96 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8013e96:	b480      	push	{r7}
 8013e98:	b083      	sub	sp, #12
 8013e9a:	af00      	add	r7, sp, #0
 8013e9c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	685b      	ldr	r3, [r3, #4]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d010      	beq.n	8013ec8 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	689b      	ldr	r3, [r3, #8]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d107      	bne.n	8013ebe <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	68db      	ldr	r3, [r3, #12]
 8013eb2:	f003 0301 	and.w	r3, r3, #1
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d101      	bne.n	8013ebe <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8013eba:	2301      	movs	r3, #1
 8013ebc:	e000      	b.n	8013ec0 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	2b01      	cmp	r3, #1
 8013ec2:	d001      	beq.n	8013ec8 <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8013ec4:	2301      	movs	r3, #1
 8013ec6:	e000      	b.n	8013eca <_ZNK8touchgfx8CallbackI14screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8013ec8:	2300      	movs	r3, #0
    }
 8013eca:	4618      	mov	r0, r3
 8013ecc:	370c      	adds	r7, #12
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed4:	4770      	bx	lr
	...

08013ed8 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8013ed8:	b480      	push	{r7}
 8013eda:	af00      	add	r7, sp, #0
    return bitmap_database;
 8013edc:	4b02      	ldr	r3, [pc, #8]	; (8013ee8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8013ede:	4618      	mov	r0, r3
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee6:	4770      	bx	lr
 8013ee8:	0802a864 	.word	0x0802a864

08013eec <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8013eec:	b480      	push	{r7}
 8013eee:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8013ef0:	2304      	movs	r3, #4
}
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efa:	4770      	bx	lr

08013efc <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8013efc:	b480      	push	{r7}
 8013efe:	b085      	sub	sp, #20
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	60f8      	str	r0, [r7, #12]
 8013f04:	460b      	mov	r3, r1
 8013f06:	607a      	str	r2, [r7, #4]
 8013f08:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8013f0a:	2300      	movs	r3, #0
    }
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	3714      	adds	r7, #20
 8013f10:	46bd      	mov	sp, r7
 8013f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f16:	4770      	bx	lr

08013f18 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8013f18:	b480      	push	{r7}
 8013f1a:	b083      	sub	sp, #12
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8013f20:	2300      	movs	r3, #0
    }
 8013f22:	4618      	mov	r0, r3
 8013f24:	370c      	adds	r7, #12
 8013f26:	46bd      	mov	sp, r7
 8013f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2c:	4770      	bx	lr
	...

08013f30 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8013f30:	b480      	push	{r7}
 8013f32:	b085      	sub	sp, #20
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	60f8      	str	r0, [r7, #12]
 8013f38:	60b9      	str	r1, [r7, #8]
 8013f3a:	4613      	mov	r3, r2
 8013f3c:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8013f3e:	4a07      	ldr	r2, [pc, #28]	; (8013f5c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	6013      	str	r3, [r2, #0]
        fonts = f;
 8013f44:	4a06      	ldr	r2, [pc, #24]	; (8013f60 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8013f46:	68bb      	ldr	r3, [r7, #8]
 8013f48:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8013f4a:	4a06      	ldr	r2, [pc, #24]	; (8013f64 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8013f4c:	88fb      	ldrh	r3, [r7, #6]
 8013f4e:	8013      	strh	r3, [r2, #0]
    }
 8013f50:	bf00      	nop
 8013f52:	3714      	adds	r7, #20
 8013f54:	46bd      	mov	sp, r7
 8013f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5a:	4770      	bx	lr
 8013f5c:	20005830 	.word	0x20005830
 8013f60:	20005838 	.word	0x20005838
 8013f64:	20005834 	.word	0x20005834

08013f68 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8013f68:	b40e      	push	{r1, r2, r3}
 8013f6a:	b580      	push	{r7, lr}
 8013f6c:	b085      	sub	sp, #20
 8013f6e:	af00      	add	r7, sp, #0
 8013f70:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8013f72:	f107 0320 	add.w	r3, r7, #32
 8013f76:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8013f78:	68bb      	ldr	r3, [r7, #8]
 8013f7a:	69fa      	ldr	r2, [r7, #28]
 8013f7c:	2100      	movs	r1, #0
 8013f7e:	6878      	ldr	r0, [r7, #4]
 8013f80:	f006 fe44 	bl	801ac0c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8013f84:	4603      	mov	r3, r0
 8013f86:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8013f88:	89fb      	ldrh	r3, [r7, #14]
}
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	3714      	adds	r7, #20
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013f94:	b003      	add	sp, #12
 8013f96:	4770      	bx	lr

08013f98 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8013f98:	b40c      	push	{r2, r3}
 8013f9a:	b580      	push	{r7, lr}
 8013f9c:	b084      	sub	sp, #16
 8013f9e:	af00      	add	r7, sp, #0
 8013fa0:	6078      	str	r0, [r7, #4]
 8013fa2:	460b      	mov	r3, r1
 8013fa4:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8013fa6:	f107 031c 	add.w	r3, r7, #28
 8013faa:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8013fac:	78f9      	ldrb	r1, [r7, #3]
 8013fae:	68bb      	ldr	r3, [r7, #8]
 8013fb0:	69ba      	ldr	r2, [r7, #24]
 8013fb2:	6878      	ldr	r0, [r7, #4]
 8013fb4:	f006 fe2a 	bl	801ac0c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8013fb8:	4603      	mov	r3, r0
 8013fba:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8013fbc:	89fb      	ldrh	r3, [r7, #14]
}
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	3710      	adds	r7, #16
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013fc8:	b002      	add	sp, #8
 8013fca:	4770      	bx	lr

08013fcc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b08a      	sub	sp, #40	; 0x28
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
 8013fd4:	460b      	mov	r3, r1
 8013fd6:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d016      	beq.n	801400e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	331a      	adds	r3, #26
 8013fe4:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8013fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fe8:	8adb      	ldrh	r3, [r3, #22]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d105      	bne.n	8013ffa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8013fee:	4b43      	ldr	r3, [pc, #268]	; (80140fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8013ff0:	4a43      	ldr	r2, [pc, #268]	; (8014100 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8013ff2:	21c0      	movs	r1, #192	; 0xc0
 8013ff4:	4843      	ldr	r0, [pc, #268]	; (8014104 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8013ff6:	f014 fb4f 	bl	8028698 <__assert_func>
            return buffer[pos];
 8013ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ffc:	8a9b      	ldrh	r3, [r3, #20]
 8013ffe:	461a      	mov	r2, r3
 8014000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014002:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d001      	beq.n	801400e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 801400a:	2301      	movs	r3, #1
 801400c:	e000      	b.n	8014010 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 801400e:	2300      	movs	r3, #0
 8014010:	2b00      	cmp	r3, #0
 8014012:	d06a      	beq.n	80140ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8014014:	6878      	ldr	r0, [r7, #4]
 8014016:	f008 f9fd 	bl	801c414 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	331a      	adds	r3, #26
 801401e:	623b      	str	r3, [r7, #32]
 8014020:	2301      	movs	r3, #1
 8014022:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8014024:	6a3b      	ldr	r3, [r7, #32]
 8014026:	8adb      	ldrh	r3, [r3, #22]
 8014028:	8bfa      	ldrh	r2, [r7, #30]
 801402a:	429a      	cmp	r2, r3
 801402c:	d305      	bcc.n	801403a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 801402e:	4b36      	ldr	r3, [pc, #216]	; (8014108 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8014030:	4a36      	ldr	r2, [pc, #216]	; (801410c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8014032:	21c5      	movs	r1, #197	; 0xc5
 8014034:	4833      	ldr	r0, [pc, #204]	; (8014104 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8014036:	f014 fb2f 	bl	8028698 <__assert_func>
            const uint16_t index = pos + offset;
 801403a:	6a3b      	ldr	r3, [r7, #32]
 801403c:	8a9a      	ldrh	r2, [r3, #20]
 801403e:	8bfb      	ldrh	r3, [r7, #30]
 8014040:	4413      	add	r3, r2
 8014042:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8014044:	8bbb      	ldrh	r3, [r7, #28]
 8014046:	2b09      	cmp	r3, #9
 8014048:	d801      	bhi.n	801404e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 801404a:	8bbb      	ldrh	r3, [r7, #28]
 801404c:	e001      	b.n	8014052 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 801404e:	8bbb      	ldrh	r3, [r7, #28]
 8014050:	3b0a      	subs	r3, #10
 8014052:	6a3a      	ldr	r2, [r7, #32]
 8014054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014058:	f640 123f 	movw	r2, #2367	; 0x93f
 801405c:	4293      	cmp	r3, r2
 801405e:	bf0c      	ite	eq
 8014060:	2301      	moveq	r3, #1
 8014062:	2300      	movne	r3, #0
 8014064:	b2db      	uxtb	r3, r3
 8014066:	2b00      	cmp	r3, #0
 8014068:	d03f      	beq.n	80140ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	331a      	adds	r3, #26
 801406e:	687a      	ldr	r2, [r7, #4]
 8014070:	321a      	adds	r2, #26
 8014072:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8014074:	68ba      	ldr	r2, [r7, #8]
 8014076:	8ad2      	ldrh	r2, [r2, #22]
 8014078:	2a00      	cmp	r2, #0
 801407a:	d105      	bne.n	8014088 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 801407c:	4b1f      	ldr	r3, [pc, #124]	; (80140fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 801407e:	4a20      	ldr	r2, [pc, #128]	; (8014100 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8014080:	21c0      	movs	r1, #192	; 0xc0
 8014082:	4820      	ldr	r0, [pc, #128]	; (8014104 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8014084:	f014 fb08 	bl	8028698 <__assert_func>
            return buffer[pos];
 8014088:	68ba      	ldr	r2, [r7, #8]
 801408a:	8a92      	ldrh	r2, [r2, #20]
 801408c:	4611      	mov	r1, r2
 801408e:	68ba      	ldr	r2, [r7, #8]
 8014090:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8014094:	613b      	str	r3, [r7, #16]
 8014096:	4613      	mov	r3, r2
 8014098:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 801409a:	693b      	ldr	r3, [r7, #16]
 801409c:	8adb      	ldrh	r3, [r3, #22]
 801409e:	2b01      	cmp	r3, #1
 80140a0:	d806      	bhi.n	80140b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80140a2:	4b1b      	ldr	r3, [pc, #108]	; (8014110 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80140a4:	4a1b      	ldr	r2, [pc, #108]	; (8014114 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80140a6:	f240 110d 	movw	r1, #269	; 0x10d
 80140aa:	4816      	ldr	r0, [pc, #88]	; (8014104 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80140ac:	f014 faf4 	bl	8028698 <__assert_func>
            const uint16_t index = pos + 1;
 80140b0:	693b      	ldr	r3, [r7, #16]
 80140b2:	8a9b      	ldrh	r3, [r3, #20]
 80140b4:	3301      	adds	r3, #1
 80140b6:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80140b8:	89bb      	ldrh	r3, [r7, #12]
 80140ba:	2b09      	cmp	r3, #9
 80140bc:	d801      	bhi.n	80140c2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80140be:	89bb      	ldrh	r3, [r7, #12]
 80140c0:	e000      	b.n	80140c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80140c2:	2300      	movs	r3, #0
 80140c4:	693a      	ldr	r2, [r7, #16]
 80140c6:	89f9      	ldrh	r1, [r7, #14]
 80140c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80140cc:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	331a      	adds	r3, #26
 80140d2:	61bb      	str	r3, [r7, #24]
 80140d4:	f640 133f 	movw	r3, #2367	; 0x93f
 80140d8:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 80140da:	69bb      	ldr	r3, [r7, #24]
 80140dc:	8a9b      	ldrh	r3, [r3, #20]
 80140de:	4619      	mov	r1, r3
 80140e0:	69bb      	ldr	r3, [r7, #24]
 80140e2:	8afa      	ldrh	r2, [r7, #22]
 80140e4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80140e8:	bf00      	nop
        }
    }
    return getNextChar();
 80140ea:	6878      	ldr	r0, [r7, #4]
 80140ec:	f008 f876 	bl	801c1dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 80140f0:	4603      	mov	r3, r0
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	3728      	adds	r7, #40	; 0x28
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}
 80140fa:	bf00      	nop
 80140fc:	08029e58 	.word	0x08029e58
 8014100:	08029e64 	.word	0x08029e64
 8014104:	08029f10 	.word	0x08029f10
 8014108:	08029f58 	.word	0x08029f58
 801410c:	08029f68 	.word	0x08029f68
 8014110:	0802a03c 	.word	0x0802a03c
 8014114:	0802a048 	.word	0x0802a048

08014118 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b082      	sub	sp, #8
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8014120:	6878      	ldr	r0, [r7, #4]
 8014122:	f008 f815 	bl	801c150 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8014126:	bf00      	nop
 8014128:	3708      	adds	r7, #8
 801412a:	46bd      	mov	sp, r7
 801412c:	bd80      	pop	{r7, pc}

0801412e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 801412e:	b580      	push	{r7, lr}
 8014130:	b088      	sub	sp, #32
 8014132:	af02      	add	r7, sp, #8
 8014134:	60f8      	str	r0, [r7, #12]
 8014136:	1d38      	adds	r0, r7, #4
 8014138:	e880 0006 	stmia.w	r0, {r1, r2}
 801413c:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 801413e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014142:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8014144:	1d39      	adds	r1, r7, #4
 8014146:	697b      	ldr	r3, [r7, #20]
 8014148:	9301      	str	r3, [sp, #4]
 801414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801414c:	9300      	str	r3, [sp, #0]
 801414e:	6a3b      	ldr	r3, [r7, #32]
 8014150:	683a      	ldr	r2, [r7, #0]
 8014152:	68f8      	ldr	r0, [r7, #12]
 8014154:	f005 fa58 	bl	8019608 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8014158:	bf00      	nop
 801415a:	3718      	adds	r7, #24
 801415c:	46bd      	mov	sp, r7
 801415e:	bd80      	pop	{r7, pc}

08014160 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8014160:	b590      	push	{r4, r7, lr}
 8014162:	b085      	sub	sp, #20
 8014164:	af00      	add	r7, sp, #0
 8014166:	4603      	mov	r3, r0
 8014168:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 801416a:	2300      	movs	r3, #0
 801416c:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 801416e:	88fb      	ldrh	r3, [r7, #6]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d127      	bne.n	80141c4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8014174:	88fb      	ldrh	r3, [r7, #6]
 8014176:	4a1e      	ldr	r2, [pc, #120]	; (80141f0 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d016      	beq.n	80141ae <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8014180:	88fb      	ldrh	r3, [r7, #6]
 8014182:	4a1b      	ldr	r2, [pc, #108]	; (80141f0 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014188:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 801418a:	68bb      	ldr	r3, [r7, #8]
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	68ba      	ldr	r2, [r7, #8]
 8014190:	4413      	add	r3, r2
 8014192:	4a18      	ldr	r2, [pc, #96]	; (80141f4 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8014194:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8014196:	68bb      	ldr	r3, [r7, #8]
 8014198:	685b      	ldr	r3, [r3, #4]
 801419a:	68ba      	ldr	r2, [r7, #8]
 801419c:	4413      	add	r3, r2
 801419e:	4a16      	ldr	r2, [pc, #88]	; (80141f8 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80141a0:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	689b      	ldr	r3, [r3, #8]
 80141a6:	68ba      	ldr	r2, [r7, #8]
 80141a8:	4413      	add	r3, r2
 80141aa:	60fb      	str	r3, [r7, #12]
 80141ac:	e00a      	b.n	80141c4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80141ae:	4b11      	ldr	r3, [pc, #68]	; (80141f4 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80141b0:	4a12      	ldr	r2, [pc, #72]	; (80141fc <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80141b2:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80141b4:	4a12      	ldr	r2, [pc, #72]	; (8014200 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80141b6:	4b10      	ldr	r3, [pc, #64]	; (80141f8 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80141b8:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80141ba:	88fb      	ldrh	r3, [r7, #6]
 80141bc:	4a11      	ldr	r2, [pc, #68]	; (8014204 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80141be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80141c2:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d00d      	beq.n	80141e6 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80141ca:	4a0f      	ldr	r2, [pc, #60]	; (8014208 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80141cc:	88fb      	ldrh	r3, [r7, #6]
 80141ce:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80141d0:	f000 f83e 	bl	8014250 <_ZN17TypedTextDatabase8getFontsEv>
 80141d4:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80141d6:	f000 f833 	bl	8014240 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80141da:	4603      	mov	r3, r0
 80141dc:	461a      	mov	r2, r3
 80141de:	4621      	mov	r1, r4
 80141e0:	68f8      	ldr	r0, [r7, #12]
 80141e2:	f7ff fea5 	bl	8013f30 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80141e6:	bf00      	nop
 80141e8:	3714      	adds	r7, #20
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd90      	pop	{r4, r7, pc}
 80141ee:	bf00      	nop
 80141f0:	200052c4 	.word	0x200052c4
 80141f4:	200052cc 	.word	0x200052cc
 80141f8:	200052d0 	.word	0x200052d0
 80141fc:	080448a4 	.word	0x080448a4
 8014200:	080448a0 	.word	0x080448a0
 8014204:	080448b0 	.word	0x080448b0
 8014208:	200052c8 	.word	0x200052c8

0801420c <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 801420c:	b480      	push	{r7}
 801420e:	b083      	sub	sp, #12
 8014210:	af00      	add	r7, sp, #0
 8014212:	6078      	str	r0, [r7, #4]
 8014214:	460b      	mov	r3, r1
 8014216:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8014218:	4b07      	ldr	r3, [pc, #28]	; (8014238 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 801421a:	681a      	ldr	r2, [r3, #0]
 801421c:	4b07      	ldr	r3, [pc, #28]	; (801423c <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 801421e:	6819      	ldr	r1, [r3, #0]
 8014220:	887b      	ldrh	r3, [r7, #2]
 8014222:	009b      	lsls	r3, r3, #2
 8014224:	440b      	add	r3, r1
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	005b      	lsls	r3, r3, #1
 801422a:	4413      	add	r3, r2
}
 801422c:	4618      	mov	r0, r3
 801422e:	370c      	adds	r7, #12
 8014230:	46bd      	mov	sp, r7
 8014232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014236:	4770      	bx	lr
 8014238:	200052cc 	.word	0x200052cc
 801423c:	200052d0 	.word	0x200052d0

08014240 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8014240:	b480      	push	{r7}
 8014242:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8014244:	2301      	movs	r3, #1
}
 8014246:	4618      	mov	r0, r3
 8014248:	46bd      	mov	sp, r7
 801424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424e:	4770      	bx	lr

08014250 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8014250:	b480      	push	{r7}
 8014252:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8014254:	4b02      	ldr	r3, [pc, #8]	; (8014260 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8014256:	4618      	mov	r0, r3
 8014258:	46bd      	mov	sp, r7
 801425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425e:	4770      	bx	lr
 8014260:	200052d4 	.word	0x200052d4

08014264 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8014264:	b580      	push	{r7, lr}
 8014266:	b082      	sub	sp, #8
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
 801426c:	6039      	str	r1, [r7, #0]
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	2b01      	cmp	r3, #1
 8014272:	d113      	bne.n	801429c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8014274:	683b      	ldr	r3, [r7, #0]
 8014276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801427a:	4293      	cmp	r3, r2
 801427c:	d10e      	bne.n	801429c <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 801427e:	f7fd fbef 	bl	8011a60 <_Z23getFont_verdana_20_4bppv>
 8014282:	4603      	mov	r3, r0
};
 8014284:	4a07      	ldr	r2, [pc, #28]	; (80142a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8014286:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8014288:	f7fd fc3e 	bl	8011b08 <_Z23getFont_verdana_40_4bppv>
 801428c:	4603      	mov	r3, r0
};
 801428e:	4a05      	ldr	r2, [pc, #20]	; (80142a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8014290:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8014292:	f7fd fb91 	bl	80119b8 <_Z23getFont_verdana_10_4bppv>
 8014296:	4603      	mov	r3, r0
};
 8014298:	4a02      	ldr	r2, [pc, #8]	; (80142a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801429a:	6093      	str	r3, [r2, #8]
}  // namespace TypedTextDatabase
 801429c:	bf00      	nop
 801429e:	3708      	adds	r7, #8
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	200052d4 	.word	0x200052d4

080142a8 <_GLOBAL__sub_I_touchgfx_fonts>:
 80142a8:	b580      	push	{r7, lr}
 80142aa:	af00      	add	r7, sp, #0
 80142ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80142b0:	2001      	movs	r0, #1
 80142b2:	f7ff ffd7 	bl	8014264 <_Z41__static_initialization_and_destruction_0ii>
 80142b6:	bd80      	pop	{r7, pc}

080142b8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b082      	sub	sp, #8
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
 80142c0:	4a05      	ldr	r2, [pc, #20]	; (80142d8 <_ZN19FrontendApplicationD1Ev+0x20>)
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	601a      	str	r2, [r3, #0]
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	4618      	mov	r0, r3
 80142ca:	f7fd ffcd 	bl	8012268 <_ZN23FrontendApplicationBaseD1Ev>
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	4618      	mov	r0, r3
 80142d2:	3708      	adds	r7, #8
 80142d4:	46bd      	mov	sp, r7
 80142d6:	bd80      	pop	{r7, pc}
 80142d8:	0802a90c 	.word	0x0802a90c

080142dc <_ZN19FrontendApplicationD0Ev>:
 80142dc:	b580      	push	{r7, lr}
 80142de:	b082      	sub	sp, #8
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
 80142e4:	6878      	ldr	r0, [r7, #4]
 80142e6:	f7ff ffe7 	bl	80142b8 <_ZN19FrontendApplicationD1Ev>
 80142ea:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80142ee:	6878      	ldr	r0, [r7, #4]
 80142f0:	f014 f9a3 	bl	802863a <_ZdlPvj>
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	4618      	mov	r0, r3
 80142f8:	3708      	adds	r7, #8
 80142fa:	46bd      	mov	sp, r7
 80142fc:	bd80      	pop	{r7, pc}

080142fe <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80142fe:	b580      	push	{r7, lr}
 8014300:	b082      	sub	sp, #8
 8014302:	af00      	add	r7, sp, #0
 8014304:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 801430c:	4618      	mov	r0, r3
 801430e:	f000 f82d 	bl	801436c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	4618      	mov	r0, r3
 8014316:	f005 fcbf 	bl	8019c98 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801431a:	bf00      	nop
 801431c:	3708      	adds	r7, #8
 801431e:	46bd      	mov	sp, r7
 8014320:	bd80      	pop	{r7, pc}
	...

08014324 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8014324:	b580      	push	{r7, lr}
 8014326:	b084      	sub	sp, #16
 8014328:	af00      	add	r7, sp, #0
 801432a:	60f8      	str	r0, [r7, #12]
 801432c:	60b9      	str	r1, [r7, #8]
 801432e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	687a      	ldr	r2, [r7, #4]
 8014334:	68b9      	ldr	r1, [r7, #8]
 8014336:	4618      	mov	r0, r3
 8014338:	f7fe f820 	bl	801237c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801433c:	4a03      	ldr	r2, [pc, #12]	; (801434c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	601a      	str	r2, [r3, #0]
{

}
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	4618      	mov	r0, r3
 8014346:	3710      	adds	r7, #16
 8014348:	46bd      	mov	sp, r7
 801434a:	bd80      	pop	{r7, pc}
 801434c:	0802a90c 	.word	0x0802a90c

08014350 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8014350:	b480      	push	{r7}
 8014352:	b083      	sub	sp, #12
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	2200      	movs	r2, #0
 801435c:	601a      	str	r2, [r3, #0]
{

}
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	4618      	mov	r0, r3
 8014362:	370c      	adds	r7, #12
 8014364:	46bd      	mov	sp, r7
 8014366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436a:	4770      	bx	lr

0801436c <_ZN5Model4tickEv>:

void Model::tick()
{
 801436c:	b480      	push	{r7}
 801436e:	b083      	sub	sp, #12
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]

}
 8014374:	bf00      	nop
 8014376:	370c      	adds	r7, #12
 8014378:	46bd      	mov	sp, r7
 801437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437e:	4770      	bx	lr

08014380 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8014380:	b480      	push	{r7}
 8014382:	b083      	sub	sp, #12
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
    {
    }
 8014388:	bf00      	nop
 801438a:	370c      	adds	r7, #12
 801438c:	46bd      	mov	sp, r7
 801438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014392:	4770      	bx	lr

08014394 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8014394:	b480      	push	{r7}
 8014396:	b083      	sub	sp, #12
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
    {
    }
 801439c:	bf00      	nop
 801439e:	370c      	adds	r7, #12
 80143a0:	46bd      	mov	sp, r7
 80143a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a6:	4770      	bx	lr

080143a8 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 80143a8:	b480      	push	{r7}
 80143aa:	b083      	sub	sp, #12
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
    {
 80143b0:	4a04      	ldr	r2, [pc, #16]	; (80143c4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	601a      	str	r2, [r3, #0]
    }
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	4618      	mov	r0, r3
 80143ba:	370c      	adds	r7, #12
 80143bc:	46bd      	mov	sp, r7
 80143be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c2:	4770      	bx	lr
 80143c4:	0802a988 	.word	0x0802a988

080143c8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b082      	sub	sp, #8
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
    }
 80143d0:	6878      	ldr	r0, [r7, #4]
 80143d2:	f7ff ffe9 	bl	80143a8 <_ZN8touchgfx9PresenterD1Ev>
 80143d6:	2104      	movs	r1, #4
 80143d8:	6878      	ldr	r0, [r7, #4]
 80143da:	f014 f92e 	bl	802863a <_ZdlPvj>
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	4618      	mov	r0, r3
 80143e2:	3708      	adds	r7, #8
 80143e4:	46bd      	mov	sp, r7
 80143e6:	bd80      	pop	{r7, pc}

080143e8 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80143e8:	b480      	push	{r7}
 80143ea:	b083      	sub	sp, #12
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
    {
 80143f0:	4a04      	ldr	r2, [pc, #16]	; (8014404 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	601a      	str	r2, [r3, #0]
    }
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	4618      	mov	r0, r3
 80143fa:	370c      	adds	r7, #12
 80143fc:	46bd      	mov	sp, r7
 80143fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014402:	4770      	bx	lr
 8014404:	0802a988 	.word	0x0802a988

08014408 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8014408:	b480      	push	{r7}
 801440a:	b083      	sub	sp, #12
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
 8014410:	4a06      	ldr	r2, [pc, #24]	; (801442c <_ZN13ModelListenerC1Ev+0x24>)
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	601a      	str	r2, [r3, #0]
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	2200      	movs	r2, #0
 801441a:	605a      	str	r2, [r3, #4]
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	4618      	mov	r0, r3
 8014420:	370c      	adds	r7, #12
 8014422:	46bd      	mov	sp, r7
 8014424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014428:	4770      	bx	lr
 801442a:	bf00      	nop
 801442c:	0802a978 	.word	0x0802a978

08014430 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8014430:	b480      	push	{r7}
 8014432:	b083      	sub	sp, #12
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
 8014438:	4a04      	ldr	r2, [pc, #16]	; (801444c <_ZN13ModelListenerD1Ev+0x1c>)
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	601a      	str	r2, [r3, #0]
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	4618      	mov	r0, r3
 8014442:	370c      	adds	r7, #12
 8014444:	46bd      	mov	sp, r7
 8014446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444a:	4770      	bx	lr
 801444c:	0802a978 	.word	0x0802a978

08014450 <_ZN13ModelListenerD0Ev>:
 8014450:	b580      	push	{r7, lr}
 8014452:	b082      	sub	sp, #8
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
 8014458:	6878      	ldr	r0, [r7, #4]
 801445a:	f7ff ffe9 	bl	8014430 <_ZN13ModelListenerD1Ev>
 801445e:	2108      	movs	r1, #8
 8014460:	6878      	ldr	r0, [r7, #4]
 8014462:	f014 f8ea 	bl	802863a <_ZdlPvj>
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	4618      	mov	r0, r3
 801446a:	3708      	adds	r7, #8
 801446c:	46bd      	mov	sp, r7
 801446e:	bd80      	pop	{r7, pc}

08014470 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8014470:	b580      	push	{r7, lr}
 8014472:	b082      	sub	sp, #8
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
 8014478:	4a09      	ldr	r2, [pc, #36]	; (80144a0 <_ZN16Screen1PresenterD1Ev+0x30>)
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	601a      	str	r2, [r3, #0]
 801447e:	4a09      	ldr	r2, [pc, #36]	; (80144a4 <_ZN16Screen1PresenterD1Ev+0x34>)
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	605a      	str	r2, [r3, #4]
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	3304      	adds	r3, #4
 8014488:	4618      	mov	r0, r3
 801448a:	f7ff ffd1 	bl	8014430 <_ZN13ModelListenerD1Ev>
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	4618      	mov	r0, r3
 8014492:	f7ff ff89 	bl	80143a8 <_ZN8touchgfx9PresenterD1Ev>
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	4618      	mov	r0, r3
 801449a:	3708      	adds	r7, #8
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}
 80144a0:	0802a950 	.word	0x0802a950
 80144a4:	0802a968 	.word	0x0802a968

080144a8 <_ZThn4_N16Screen1PresenterD1Ev>:
 80144a8:	f1a0 0004 	sub.w	r0, r0, #4
 80144ac:	e7e0      	b.n	8014470 <_ZN16Screen1PresenterD1Ev>
 80144ae:	bf00      	nop

080144b0 <_ZN16Screen1PresenterD0Ev>:
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b082      	sub	sp, #8
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
 80144b8:	6878      	ldr	r0, [r7, #4]
 80144ba:	f7ff ffd9 	bl	8014470 <_ZN16Screen1PresenterD1Ev>
 80144be:	2110      	movs	r1, #16
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	f014 f8ba 	bl	802863a <_ZdlPvj>
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	4618      	mov	r0, r3
 80144ca:	3708      	adds	r7, #8
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}

080144d0 <_ZThn4_N16Screen1PresenterD0Ev>:
 80144d0:	f1a0 0004 	sub.w	r0, r0, #4
 80144d4:	e7ec      	b.n	80144b0 <_ZN16Screen1PresenterD0Ev>
	...

080144d8 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 80144d8:	b580      	push	{r7, lr}
 80144da:	b082      	sub	sp, #8
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
 80144e0:	6039      	str	r1, [r7, #0]
    : view(v)
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	4618      	mov	r0, r3
 80144e6:	f7ff ff7f 	bl	80143e8 <_ZN8touchgfx9PresenterC1Ev>
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	3304      	adds	r3, #4
 80144ee:	4618      	mov	r0, r3
 80144f0:	f7ff ff8a 	bl	8014408 <_ZN13ModelListenerC1Ev>
 80144f4:	4a06      	ldr	r2, [pc, #24]	; (8014510 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	601a      	str	r2, [r3, #0]
 80144fa:	4a06      	ldr	r2, [pc, #24]	; (8014514 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	605a      	str	r2, [r3, #4]
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	683a      	ldr	r2, [r7, #0]
 8014504:	60da      	str	r2, [r3, #12]
{

}
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	4618      	mov	r0, r3
 801450a:	3708      	adds	r7, #8
 801450c:	46bd      	mov	sp, r7
 801450e:	bd80      	pop	{r7, pc}
 8014510:	0802a950 	.word	0x0802a950
 8014514:	0802a968 	.word	0x0802a968

08014518 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8014518:	b480      	push	{r7}
 801451a:	b083      	sub	sp, #12
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]

}
 8014520:	bf00      	nop
 8014522:	370c      	adds	r7, #12
 8014524:	46bd      	mov	sp, r7
 8014526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801452a:	4770      	bx	lr

0801452c <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 801452c:	b480      	push	{r7}
 801452e:	b083      	sub	sp, #12
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]

}
 8014534:	bf00      	nop
 8014536:	370c      	adds	r7, #12
 8014538:	46bd      	mov	sp, r7
 801453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453e:	4770      	bx	lr

08014540 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8014540:	b580      	push	{r7, lr}
 8014542:	b082      	sub	sp, #8
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
 8014548:	4a05      	ldr	r2, [pc, #20]	; (8014560 <_ZN11Screen1ViewD1Ev+0x20>)
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	601a      	str	r2, [r3, #0]
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	4618      	mov	r0, r3
 8014552:	f7fe ffe9 	bl	8013528 <_ZN15Screen1ViewBaseD1Ev>
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	4618      	mov	r0, r3
 801455a:	3708      	adds	r7, #8
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}
 8014560:	0802a9a0 	.word	0x0802a9a0

08014564 <_ZN11Screen1ViewD0Ev>:
 8014564:	b580      	push	{r7, lr}
 8014566:	b082      	sub	sp, #8
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
 801456c:	6878      	ldr	r0, [r7, #4]
 801456e:	f7ff ffe7 	bl	8014540 <_ZN11Screen1ViewD1Ev>
 8014572:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	f014 f85f 	bl	802863a <_ZdlPvj>
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	4618      	mov	r0, r3
 8014580:	3708      	adds	r7, #8
 8014582:	46bd      	mov	sp, r7
 8014584:	bd80      	pop	{r7, pc}
	...

08014588 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8014588:	b580      	push	{r7, lr}
 801458a:	b082      	sub	sp, #8
 801458c:	af00      	add	r7, sp, #0
 801458e:	6078      	str	r0, [r7, #4]
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	4618      	mov	r0, r3
 8014594:	f7ff f830 	bl	80135f8 <_ZN15Screen1ViewBaseC1Ev>
 8014598:	4a03      	ldr	r2, [pc, #12]	; (80145a8 <_ZN11Screen1ViewC1Ev+0x20>)
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	601a      	str	r2, [r3, #0]
{

}
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	4618      	mov	r0, r3
 80145a2:	3708      	adds	r7, #8
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bd80      	pop	{r7, pc}
 80145a8:	0802a9a0 	.word	0x0802a9a0

080145ac <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b082      	sub	sp, #8
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	4618      	mov	r0, r3
 80145b8:	f7ff f8e2 	bl	8013780 <_ZN15Screen1ViewBase11setupScreenEv>
}
 80145bc:	bf00      	nop
 80145be:	3708      	adds	r7, #8
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd80      	pop	{r7, pc}

080145c4 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b082      	sub	sp, #8
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	4618      	mov	r0, r3
 80145d0:	f7fe fea2 	bl	8013318 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80145d4:	bf00      	nop
 80145d6:	3708      	adds	r7, #8
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}

080145dc <_ZN11Screen1View19syringePumpProgressEv>:

void Screen1View::syringePumpProgress(){
 80145dc:	b580      	push	{r7, lr}
 80145de:	b084      	sub	sp, #16
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
	for(int i=0;i<100;i++){
 80145e4:	2300      	movs	r3, #0
 80145e6:	60fb      	str	r3, [r7, #12]
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	2b63      	cmp	r3, #99	; 0x63
 80145ec:	dc09      	bgt.n	8014602 <_ZN11Screen1View19syringePumpProgressEv+0x26>
	imageProgress1.setValue(i);
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	33a8      	adds	r3, #168	; 0xa8
 80145f2:	68f9      	ldr	r1, [r7, #12]
 80145f4:	4618      	mov	r0, r3
 80145f6:	f001 fde5 	bl	80161c4 <_ZN8touchgfx13ImageProgress8setValueEi>
	for(int i=0;i<100;i++){
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	3301      	adds	r3, #1
 80145fe:	60fb      	str	r3, [r7, #12]
 8014600:	e7f2      	b.n	80145e8 <_ZN11Screen1View19syringePumpProgressEv+0xc>
	}
}
 8014602:	bf00      	nop
 8014604:	3710      	adds	r7, #16
 8014606:	46bd      	mov	sp, r7
 8014608:	bd80      	pop	{r7, pc}
	...

0801460c <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {};
 801460c:	b580      	push	{r7, lr}
 801460e:	b082      	sub	sp, #8
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
 8014614:	4a09      	ldr	r2, [pc, #36]	; (801463c <_ZN15screenPresenterD1Ev+0x30>)
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	601a      	str	r2, [r3, #0]
 801461a:	4a09      	ldr	r2, [pc, #36]	; (8014640 <_ZN15screenPresenterD1Ev+0x34>)
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	605a      	str	r2, [r3, #4]
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	3304      	adds	r3, #4
 8014624:	4618      	mov	r0, r3
 8014626:	f7ff ff03 	bl	8014430 <_ZN13ModelListenerD1Ev>
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	4618      	mov	r0, r3
 801462e:	f7ff febb 	bl	80143a8 <_ZN8touchgfx9PresenterD1Ev>
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	4618      	mov	r0, r3
 8014636:	3708      	adds	r7, #8
 8014638:	46bd      	mov	sp, r7
 801463a:	bd80      	pop	{r7, pc}
 801463c:	0802a9d8 	.word	0x0802a9d8
 8014640:	0802a9f0 	.word	0x0802a9f0

08014644 <_ZThn4_N15screenPresenterD1Ev>:
 8014644:	f1a0 0004 	sub.w	r0, r0, #4
 8014648:	e7e0      	b.n	801460c <_ZN15screenPresenterD1Ev>
 801464a:	bf00      	nop

0801464c <_ZN15screenPresenterD0Ev>:
 801464c:	b580      	push	{r7, lr}
 801464e:	b082      	sub	sp, #8
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f7ff ffd9 	bl	801460c <_ZN15screenPresenterD1Ev>
 801465a:	2110      	movs	r1, #16
 801465c:	6878      	ldr	r0, [r7, #4]
 801465e:	f013 ffec 	bl	802863a <_ZdlPvj>
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	4618      	mov	r0, r3
 8014666:	3708      	adds	r7, #8
 8014668:	46bd      	mov	sp, r7
 801466a:	bd80      	pop	{r7, pc}

0801466c <_ZThn4_N15screenPresenterD0Ev>:
 801466c:	f1a0 0004 	sub.w	r0, r0, #4
 8014670:	e7ec      	b.n	801464c <_ZN15screenPresenterD0Ev>
	...

08014674 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 8014674:	b580      	push	{r7, lr}
 8014676:	b082      	sub	sp, #8
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
 801467c:	6039      	str	r1, [r7, #0]
    : view(v)
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	4618      	mov	r0, r3
 8014682:	f7ff feb1 	bl	80143e8 <_ZN8touchgfx9PresenterC1Ev>
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	3304      	adds	r3, #4
 801468a:	4618      	mov	r0, r3
 801468c:	f7ff febc 	bl	8014408 <_ZN13ModelListenerC1Ev>
 8014690:	4a06      	ldr	r2, [pc, #24]	; (80146ac <_ZN15screenPresenterC1ER10screenView+0x38>)
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	601a      	str	r2, [r3, #0]
 8014696:	4a06      	ldr	r2, [pc, #24]	; (80146b0 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	605a      	str	r2, [r3, #4]
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	683a      	ldr	r2, [r7, #0]
 80146a0:	60da      	str	r2, [r3, #12]
{

}
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	4618      	mov	r0, r3
 80146a6:	3708      	adds	r7, #8
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd80      	pop	{r7, pc}
 80146ac:	0802a9d8 	.word	0x0802a9d8
 80146b0:	0802a9f0 	.word	0x0802a9f0

080146b4 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 80146b4:	b480      	push	{r7}
 80146b6:	b083      	sub	sp, #12
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	6078      	str	r0, [r7, #4]

}
 80146bc:	bf00      	nop
 80146be:	370c      	adds	r7, #12
 80146c0:	46bd      	mov	sp, r7
 80146c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c6:	4770      	bx	lr

080146c8 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 80146c8:	b480      	push	{r7}
 80146ca:	b083      	sub	sp, #12
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	6078      	str	r0, [r7, #4]

}
 80146d0:	bf00      	nop
 80146d2:	370c      	adds	r7, #12
 80146d4:	46bd      	mov	sp, r7
 80146d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146da:	4770      	bx	lr

080146dc <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 80146dc:	b580      	push	{r7, lr}
 80146de:	b082      	sub	sp, #8
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
 80146e4:	4a05      	ldr	r2, [pc, #20]	; (80146fc <_ZN10screenViewD1Ev+0x20>)
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	601a      	str	r2, [r3, #0]
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	4618      	mov	r0, r3
 80146ee:	f7ff fa2b 	bl	8013b48 <_ZN14screenViewBaseD1Ev>
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	4618      	mov	r0, r3
 80146f6:	3708      	adds	r7, #8
 80146f8:	46bd      	mov	sp, r7
 80146fa:	bd80      	pop	{r7, pc}
 80146fc:	0802aa00 	.word	0x0802aa00

08014700 <_ZN10screenViewD0Ev>:
 8014700:	b580      	push	{r7, lr}
 8014702:	b082      	sub	sp, #8
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f7ff ffe7 	bl	80146dc <_ZN10screenViewD1Ev>
 801470e:	21b0      	movs	r1, #176	; 0xb0
 8014710:	6878      	ldr	r0, [r7, #4]
 8014712:	f013 ff92 	bl	802863a <_ZdlPvj>
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	4618      	mov	r0, r3
 801471a:	3708      	adds	r7, #8
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}

08014720 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 8014720:	b580      	push	{r7, lr}
 8014722:	b082      	sub	sp, #8
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	4618      	mov	r0, r3
 801472c:	f7ff fa4a 	bl	8013bc4 <_ZN14screenViewBaseC1Ev>
 8014730:	4a03      	ldr	r2, [pc, #12]	; (8014740 <_ZN10screenViewC1Ev+0x20>)
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	601a      	str	r2, [r3, #0]
{

}
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	4618      	mov	r0, r3
 801473a:	3708      	adds	r7, #8
 801473c:	46bd      	mov	sp, r7
 801473e:	bd80      	pop	{r7, pc}
 8014740:	0802aa00 	.word	0x0802aa00

08014744 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b082      	sub	sp, #8
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	4618      	mov	r0, r3
 8014750:	f7ff fab2 	bl	8013cb8 <_ZN14screenViewBase11setupScreenEv>
}
 8014754:	bf00      	nop
 8014756:	3708      	adds	r7, #8
 8014758:	46bd      	mov	sp, r7
 801475a:	bd80      	pop	{r7, pc}

0801475c <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b082      	sub	sp, #8
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	4618      	mov	r0, r3
 8014768:	f7fe fdd6 	bl	8013318 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801476c:	bf00      	nop
 801476e:	3708      	adds	r7, #8
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}

08014774 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8014774:	b480      	push	{r7}
 8014776:	b083      	sub	sp, #12
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
    {
 801477c:	4a04      	ldr	r2, [pc, #16]	; (8014790 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	601a      	str	r2, [r3, #0]
    }
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	4618      	mov	r0, r3
 8014786:	370c      	adds	r7, #12
 8014788:	46bd      	mov	sp, r7
 801478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801478e:	4770      	bx	lr
 8014790:	0802aa4c 	.word	0x0802aa4c

08014794 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8014794:	b580      	push	{r7, lr}
 8014796:	b082      	sub	sp, #8
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
    }
 801479c:	6878      	ldr	r0, [r7, #4]
 801479e:	f7ff ffe9 	bl	8014774 <_ZN8touchgfx15TouchControllerD1Ev>
 80147a2:	2104      	movs	r1, #4
 80147a4:	6878      	ldr	r0, [r7, #4]
 80147a6:	f013 ff48 	bl	802863a <_ZdlPvj>
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	4618      	mov	r0, r3
 80147ae:	3708      	adds	r7, #8
 80147b0:	46bd      	mov	sp, r7
 80147b2:	bd80      	pop	{r7, pc}

080147b4 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 80147b4:	b480      	push	{r7}
 80147b6:	b083      	sub	sp, #12
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 80147bc:	bf00      	nop
 80147be:	370c      	adds	r7, #12
 80147c0:	46bd      	mov	sp, r7
 80147c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c6:	4770      	bx	lr

080147c8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80147c8:	b480      	push	{r7}
 80147ca:	b085      	sub	sp, #20
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	60f8      	str	r0, [r7, #12]
 80147d0:	60b9      	str	r1, [r7, #8]
 80147d2:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 80147d4:	2300      	movs	r3, #0
}
 80147d6:	4618      	mov	r0, r3
 80147d8:	3714      	adds	r7, #20
 80147da:	46bd      	mov	sp, r7
 80147dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e0:	4770      	bx	lr
	...

080147e4 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b082      	sub	sp, #8
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
 80147ec:	4a05      	ldr	r2, [pc, #20]	; (8014804 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	601a      	str	r2, [r3, #0]
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	4618      	mov	r0, r3
 80147f6:	f7ff ffbd 	bl	8014774 <_ZN8touchgfx15TouchControllerD1Ev>
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	4618      	mov	r0, r3
 80147fe:	3708      	adds	r7, #8
 8014800:	46bd      	mov	sp, r7
 8014802:	bd80      	pop	{r7, pc}
 8014804:	0802aa34 	.word	0x0802aa34

08014808 <_ZN20STM32TouchControllerD0Ev>:
 8014808:	b580      	push	{r7, lr}
 801480a:	b082      	sub	sp, #8
 801480c:	af00      	add	r7, sp, #0
 801480e:	6078      	str	r0, [r7, #4]
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f7ff ffe7 	bl	80147e4 <_ZN20STM32TouchControllerD1Ev>
 8014816:	2104      	movs	r1, #4
 8014818:	6878      	ldr	r0, [r7, #4]
 801481a:	f013 ff0e 	bl	802863a <_ZdlPvj>
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	4618      	mov	r0, r3
 8014822:	3708      	adds	r7, #8
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}

08014828 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8014828:	b480      	push	{r7}
 801482a:	b083      	sub	sp, #12
 801482c:	af00      	add	r7, sp, #0
 801482e:	4603      	mov	r3, r0
 8014830:	71fb      	strb	r3, [r7, #7]

}
 8014832:	bf00      	nop
 8014834:	370c      	adds	r7, #12
 8014836:	46bd      	mov	sp, r7
 8014838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801483c:	4770      	bx	lr

0801483e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 801483e:	b480      	push	{r7}
 8014840:	b083      	sub	sp, #12
 8014842:	af00      	add	r7, sp, #0
 8014844:	4603      	mov	r3, r0
 8014846:	71fb      	strb	r3, [r7, #7]

}
 8014848:	bf00      	nop
 801484a:	370c      	adds	r7, #12
 801484c:	46bd      	mov	sp, r7
 801484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014852:	4770      	bx	lr

08014854 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8014854:	b480      	push	{r7}
 8014856:	b083      	sub	sp, #12
 8014858:	af00      	add	r7, sp, #0
 801485a:	4603      	mov	r3, r0
 801485c:	71fb      	strb	r3, [r7, #7]

}
 801485e:	bf00      	nop
 8014860:	370c      	adds	r7, #12
 8014862:	46bd      	mov	sp, r7
 8014864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014868:	4770      	bx	lr
	...

0801486c <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 801486c:	b480      	push	{r7}
 801486e:	b083      	sub	sp, #12
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
    {
 8014874:	4a04      	ldr	r2, [pc, #16]	; (8014888 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	601a      	str	r2, [r3, #0]
    }
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	4618      	mov	r0, r3
 801487e:	370c      	adds	r7, #12
 8014880:	46bd      	mov	sp, r7
 8014882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014886:	4770      	bx	lr
 8014888:	0802b688 	.word	0x0802b688

0801488c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 801488c:	b580      	push	{r7, lr}
 801488e:	b082      	sub	sp, #8
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
    }
 8014894:	6878      	ldr	r0, [r7, #4]
 8014896:	f7ff ffe9 	bl	801486c <_ZN8touchgfx3HALD1Ev>
 801489a:	217c      	movs	r1, #124	; 0x7c
 801489c:	6878      	ldr	r0, [r7, #4]
 801489e:	f013 fecc 	bl	802863a <_ZdlPvj>
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	4618      	mov	r0, r3
 80148a6:	3708      	adds	r7, #8
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}

080148ac <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80148ac:	b480      	push	{r7}
 80148ae:	b083      	sub	sp, #12
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]
 80148b4:	460b      	mov	r3, r1
 80148b6:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	78fa      	ldrb	r2, [r7, #3]
 80148bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	2201      	movs	r2, #1
 80148c4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80148c8:	bf00      	nop
 80148ca:	370c      	adds	r7, #12
 80148cc:	46bd      	mov	sp, r7
 80148ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d2:	4770      	bx	lr

080148d4 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b082      	sub	sp, #8
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d009      	beq.n	80148fa <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	685a      	ldr	r2, [r3, #4]
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	685b      	ldr	r3, [r3, #4]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	4610      	mov	r0, r2
 80148f4:	4798      	blx	r3
 80148f6:	4603      	mov	r3, r0
 80148f8:	e000      	b.n	80148fc <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        else
        {
            return static_cast<BlitOperations>(0);
 80148fa:	2300      	movs	r3, #0
        }
    }
 80148fc:	4618      	mov	r0, r3
 80148fe:	3708      	adds	r7, #8
 8014900:	46bd      	mov	sp, r7
 8014902:	bd80      	pop	{r7, pc}

08014904 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8014904:	b580      	push	{r7, lr}
 8014906:	b082      	sub	sp, #8
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f002 ff29 	bl	8017764 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	3390      	adds	r3, #144	; 0x90
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	6878      	ldr	r0, [r7, #4]
 801491c:	4798      	blx	r3
    }
 801491e:	bf00      	nop
 8014920:	3708      	adds	r7, #8
 8014922:	46bd      	mov	sp, r7
 8014924:	bd80      	pop	{r7, pc}

08014926 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8014926:	b480      	push	{r7}
 8014928:	b083      	sub	sp, #12
 801492a:	af00      	add	r7, sp, #0
 801492c:	6078      	str	r0, [r7, #4]
 801492e:	6039      	str	r1, [r7, #0]
    {
        return false;
 8014930:	2300      	movs	r3, #0
    }
 8014932:	4618      	mov	r0, r3
 8014934:	370c      	adds	r7, #12
 8014936:	46bd      	mov	sp, r7
 8014938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801493c:	4770      	bx	lr
	...

08014940 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8014940:	b580      	push	{r7, lr}
 8014942:	b084      	sub	sp, #16
 8014944:	af00      	add	r7, sp, #0
 8014946:	60f8      	str	r0, [r7, #12]
 8014948:	60b9      	str	r1, [r7, #8]
 801494a:	607a      	str	r2, [r7, #4]
 801494c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801494e:	68bb      	ldr	r3, [r7, #8]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d106      	bne.n	8014962 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8014954:	4b11      	ldr	r3, [pc, #68]	; (801499c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8014956:	4a12      	ldr	r2, [pc, #72]	; (80149a0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8014958:	f240 216b 	movw	r1, #619	; 0x26b
 801495c:	4811      	ldr	r0, [pc, #68]	; (80149a4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 801495e:	f013 fe9b 	bl	8028698 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	68ba      	ldr	r2, [r7, #8]
 8014966:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	687a      	ldr	r2, [r7, #4]
 801496c:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	683a      	ldr	r2, [r7, #0]
 8014972:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2b00      	cmp	r3, #0
 8014978:	bf14      	ite	ne
 801497a:	2301      	movne	r3, #1
 801497c:	2300      	moveq	r3, #0
 801497e:	b2da      	uxtb	r2, r3
 8014980:	4b09      	ldr	r3, [pc, #36]	; (80149a8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8014982:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8014984:	683b      	ldr	r3, [r7, #0]
 8014986:	2b00      	cmp	r3, #0
 8014988:	bf14      	ite	ne
 801498a:	2301      	movne	r3, #1
 801498c:	2300      	moveq	r3, #0
 801498e:	b2da      	uxtb	r2, r3
 8014990:	4b06      	ldr	r3, [pc, #24]	; (80149ac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8014992:	701a      	strb	r2, [r3, #0]
    }
 8014994:	bf00      	nop
 8014996:	3710      	adds	r7, #16
 8014998:	46bd      	mov	sp, r7
 801499a:	bd80      	pop	{r7, pc}
 801499c:	0802a0fc 	.word	0x0802a0fc
 80149a0:	0802a134 	.word	0x0802a134
 80149a4:	0802a184 	.word	0x0802a184
 80149a8:	200057de 	.word	0x200057de
 80149ac:	200057df 	.word	0x200057df

080149b0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 80149b0:	b480      	push	{r7}
 80149b2:	b083      	sub	sp, #12
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80149b8:	2300      	movs	r3, #0
    }
 80149ba:	4618      	mov	r0, r3
 80149bc:	370c      	adds	r7, #12
 80149be:	46bd      	mov	sp, r7
 80149c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c4:	4770      	bx	lr

080149c6 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 80149c6:	b580      	push	{r7, lr}
 80149c8:	b082      	sub	sp, #8
 80149ca:	af00      	add	r7, sp, #0
 80149cc:	6078      	str	r0, [r7, #4]
 80149ce:	460b      	mov	r3, r1
 80149d0:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d004      	beq.n	80149e4 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149de:	887a      	ldrh	r2, [r7, #2]
 80149e0:	4610      	mov	r0, r2
 80149e2:	4798      	blx	r3
        }
    }
 80149e4:	bf00      	nop
 80149e6:	3708      	adds	r7, #8
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd80      	pop	{r7, pc}

080149ec <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b082      	sub	sp, #8
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	685a      	ldr	r2, [r3, #4]
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	685b      	ldr	r3, [r3, #4]
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	3318      	adds	r3, #24
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	4610      	mov	r0, r2
 8014a04:	4798      	blx	r3
 8014a06:	4603      	mov	r3, r0
    }
 8014a08:	4618      	mov	r0, r3
 8014a0a:	3708      	adds	r7, #8
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	bd80      	pop	{r7, pc}

08014a10 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8014a10:	b480      	push	{r7}
 8014a12:	b083      	sub	sp, #12
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014a24:	429a      	cmp	r2, r3
 8014a26:	d017      	beq.n	8014a58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8014a28:	4b1a      	ldr	r3, [pc, #104]	; (8014a94 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8014a2a:	781b      	ldrb	r3, [r3, #0]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d12a      	bne.n	8014a86 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8014a30:	4b19      	ldr	r3, [pc, #100]	; (8014a98 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8014a32:	881a      	ldrh	r2, [r3, #0]
 8014a34:	4b19      	ldr	r3, [pc, #100]	; (8014a9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8014a36:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8014a38:	4b19      	ldr	r3, [pc, #100]	; (8014aa0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8014a3a:	881a      	ldrh	r2, [r3, #0]
 8014a3c:	4b19      	ldr	r3, [pc, #100]	; (8014aa4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8014a3e:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8014a40:	4b16      	ldr	r3, [pc, #88]	; (8014a9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8014a42:	881a      	ldrh	r2, [r3, #0]
 8014a44:	4b16      	ldr	r3, [pc, #88]	; (8014aa0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8014a46:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8014a48:	4b16      	ldr	r3, [pc, #88]	; (8014aa4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8014a4a:	881a      	ldrh	r2, [r3, #0]
 8014a4c:	4b12      	ldr	r3, [pc, #72]	; (8014a98 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8014a4e:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8014a50:	4b10      	ldr	r3, [pc, #64]	; (8014a94 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8014a52:	2201      	movs	r2, #1
 8014a54:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8014a56:	e016      	b.n	8014a86 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8014a58:	4b0e      	ldr	r3, [pc, #56]	; (8014a94 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8014a5a:	781b      	ldrb	r3, [r3, #0]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d012      	beq.n	8014a86 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8014a60:	4b0f      	ldr	r3, [pc, #60]	; (8014aa0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8014a62:	881a      	ldrh	r2, [r3, #0]
 8014a64:	4b0d      	ldr	r3, [pc, #52]	; (8014a9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8014a66:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8014a68:	4b0b      	ldr	r3, [pc, #44]	; (8014a98 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8014a6a:	881a      	ldrh	r2, [r3, #0]
 8014a6c:	4b0d      	ldr	r3, [pc, #52]	; (8014aa4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8014a6e:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8014a70:	4b0c      	ldr	r3, [pc, #48]	; (8014aa4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8014a72:	881a      	ldrh	r2, [r3, #0]
 8014a74:	4b0a      	ldr	r3, [pc, #40]	; (8014aa0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8014a76:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8014a78:	4b08      	ldr	r3, [pc, #32]	; (8014a9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8014a7a:	881a      	ldrh	r2, [r3, #0]
 8014a7c:	4b06      	ldr	r3, [pc, #24]	; (8014a98 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8014a7e:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8014a80:	4b04      	ldr	r3, [pc, #16]	; (8014a94 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8014a82:	2200      	movs	r2, #0
 8014a84:	701a      	strb	r2, [r3, #0]
    }
 8014a86:	bf00      	nop
 8014a88:	370c      	adds	r7, #12
 8014a8a:	46bd      	mov	sp, r7
 8014a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a90:	4770      	bx	lr
 8014a92:	bf00      	nop
 8014a94:	200057d8 	.word	0x200057d8
 8014a98:	200057d4 	.word	0x200057d4
 8014a9c:	200057da 	.word	0x200057da
 8014aa0:	200057d6 	.word	0x200057d6
 8014aa4:	200057dc 	.word	0x200057dc

08014aa8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b082      	sub	sp, #8
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f002 f8dd 	bl	8016c72 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8014ab8:	bf00      	nop
 8014aba:	3708      	adds	r7, #8
 8014abc:	46bd      	mov	sp, r7
 8014abe:	bd80      	pop	{r7, pc}

08014ac0 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b082      	sub	sp, #8
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
 8014ac8:	4a05      	ldr	r2, [pc, #20]	; (8014ae0 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	601a      	str	r2, [r3, #0]
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	f7ff fecb 	bl	801486c <_ZN8touchgfx3HALD1Ev>
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	4618      	mov	r0, r3
 8014ada:	3708      	adds	r7, #8
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bd80      	pop	{r7, pc}
 8014ae0:	0802ac68 	.word	0x0802ac68

08014ae4 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b082      	sub	sp, #8
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
 8014aec:	6878      	ldr	r0, [r7, #4]
 8014aee:	f7ff ffe7 	bl	8014ac0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8014af2:	217c      	movs	r1, #124	; 0x7c
 8014af4:	6878      	ldr	r0, [r7, #4]
 8014af6:	f013 fda0 	bl	802863a <_ZdlPvj>
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	4618      	mov	r0, r3
 8014afe:	3708      	adds	r7, #8
 8014b00:	46bd      	mov	sp, r7
 8014b02:	bd80      	pop	{r7, pc}

08014b04 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b082      	sub	sp, #8
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f7ff ffca 	bl	8014aa8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8014b14:	bf00      	nop
 8014b16:	3708      	adds	r7, #8
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	bd80      	pop	{r7, pc}

08014b1c <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8014b1c:	b580      	push	{r7, lr}
 8014b1e:	b082      	sub	sp, #8
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	4618      	mov	r0, r3
 8014b28:	f001 f844 	bl	8015bb4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8014b2c:	bf00      	nop
 8014b2e:	3708      	adds	r7, #8
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd80      	pop	{r7, pc}

08014b34 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b082      	sub	sp, #8
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f001 f8ba 	bl	8015cb8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8014b44:	4603      	mov	r3, r0
}
 8014b46:	4618      	mov	r0, r3
 8014b48:	3708      	adds	r7, #8
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	bd80      	pop	{r7, pc}

08014b4e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8014b4e:	b580      	push	{r7, lr}
 8014b50:	b082      	sub	sp, #8
 8014b52:	af00      	add	r7, sp, #0
 8014b54:	6078      	str	r0, [r7, #4]
 8014b56:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	6839      	ldr	r1, [r7, #0]
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	f001 f8b9 	bl	8015cd4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8014b62:	bf00      	nop
 8014b64:	3708      	adds	r7, #8
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bd80      	pop	{r7, pc}

08014b6a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8014b6a:	b580      	push	{r7, lr}
 8014b6c:	b082      	sub	sp, #8
 8014b6e:	af00      	add	r7, sp, #0
 8014b70:	6078      	str	r0, [r7, #4]
 8014b72:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	6839      	ldr	r1, [r7, #0]
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f001 f8c1 	bl	8015d00 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8014b7e:	bf00      	nop
 8014b80:	3708      	adds	r7, #8
 8014b82:	46bd      	mov	sp, r7
 8014b84:	bd80      	pop	{r7, pc}

08014b86 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8014b86:	b580      	push	{r7, lr}
 8014b88:	b084      	sub	sp, #16
 8014b8a:	af00      	add	r7, sp, #0
 8014b8c:	60f8      	str	r0, [r7, #12]
 8014b8e:	60b9      	str	r1, [r7, #8]
 8014b90:	607a      	str	r2, [r7, #4]
 8014b92:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8014b94:	68f8      	ldr	r0, [r7, #12]
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	687a      	ldr	r2, [r7, #4]
 8014b9a:	68b9      	ldr	r1, [r7, #8]
 8014b9c:	f001 f8fe 	bl	8015d9c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8014ba0:	4603      	mov	r3, r0
}
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	3710      	adds	r7, #16
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	bd80      	pop	{r7, pc}

08014baa <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8014baa:	b580      	push	{r7, lr}
 8014bac:	b082      	sub	sp, #8
 8014bae:	af00      	add	r7, sp, #0
 8014bb0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f001 f82f 	bl	8015c18 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8014bba:	bf00      	nop
 8014bbc:	3708      	adds	r7, #8
 8014bbe:	46bd      	mov	sp, r7
 8014bc0:	bd80      	pop	{r7, pc}

08014bc2 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8014bc2:	b580      	push	{r7, lr}
 8014bc4:	b082      	sub	sp, #8
 8014bc6:	af00      	add	r7, sp, #0
 8014bc8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f001 f82f 	bl	8015c30 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8014bd2:	bf00      	nop
 8014bd4:	3708      	adds	r7, #8
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bd80      	pop	{r7, pc}

08014bda <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8014bda:	b580      	push	{r7, lr}
 8014bdc:	b082      	sub	sp, #8
 8014bde:	af00      	add	r7, sp, #0
 8014be0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	4618      	mov	r0, r3
 8014be6:	f001 f82e 	bl	8015c46 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8014bea:	bf00      	nop
 8014bec:	3708      	adds	r7, #8
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	bd80      	pop	{r7, pc}

08014bf2 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8014bf2:	b580      	push	{r7, lr}
 8014bf4:	b082      	sub	sp, #8
 8014bf6:	af00      	add	r7, sp, #0
 8014bf8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f001 f82d 	bl	8015c5c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8014c02:	bf00      	nop
 8014c04:	3708      	adds	r7, #8
 8014c06:	46bd      	mov	sp, r7
 8014c08:	bd80      	pop	{r7, pc}
	...

08014c0c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b082      	sub	sp, #8
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
 8014c14:	4a05      	ldr	r2, [pc, #20]	; (8014c2c <_ZN11TouchGFXHALD1Ev+0x20>)
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	601a      	str	r2, [r3, #0]
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f7ff ff4f 	bl	8014ac0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	4618      	mov	r0, r3
 8014c26:	3708      	adds	r7, #8
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	bd80      	pop	{r7, pc}
 8014c2c:	0802aa64 	.word	0x0802aa64

08014c30 <_ZN11TouchGFXHALD0Ev>:
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b082      	sub	sp, #8
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
 8014c38:	6878      	ldr	r0, [r7, #4]
 8014c3a:	f7ff ffe7 	bl	8014c0c <_ZN11TouchGFXHALD1Ev>
 8014c3e:	217c      	movs	r1, #124	; 0x7c
 8014c40:	6878      	ldr	r0, [r7, #4]
 8014c42:	f013 fcfa 	bl	802863a <_ZdlPvj>
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	4618      	mov	r0, r3
 8014c4a:	3708      	adds	r7, #8
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	bd80      	pop	{r7, pc}

08014c50 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8014c50:	b580      	push	{r7, lr}
 8014c52:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8014c54:	2200      	movs	r2, #0
 8014c56:	2101      	movs	r1, #1
 8014c58:	2001      	movs	r0, #1
 8014c5a:	f7f9 f9ae 	bl	800dfba <osSemaphoreNew>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	4a0f      	ldr	r2, [pc, #60]	; (8014ca0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8014c62:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8014c64:	4b0e      	ldr	r3, [pc, #56]	; (8014ca0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d105      	bne.n	8014c78 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8014c6c:	4b0d      	ldr	r3, [pc, #52]	; (8014ca4 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8014c6e:	4a0e      	ldr	r2, [pc, #56]	; (8014ca8 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8014c70:	2125      	movs	r1, #37	; 0x25
 8014c72:	480e      	ldr	r0, [pc, #56]	; (8014cac <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8014c74:	f013 fd10 	bl	8028698 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8014c78:	2200      	movs	r2, #0
 8014c7a:	2104      	movs	r1, #4
 8014c7c:	2001      	movs	r0, #1
 8014c7e:	f7f9 fabb 	bl	800e1f8 <osMessageQueueNew>
 8014c82:	4603      	mov	r3, r0
 8014c84:	4a0a      	ldr	r2, [pc, #40]	; (8014cb0 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8014c86:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8014c88:	4b09      	ldr	r3, [pc, #36]	; (8014cb0 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d105      	bne.n	8014c9c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8014c90:	4b08      	ldr	r3, [pc, #32]	; (8014cb4 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8014c92:	4a05      	ldr	r2, [pc, #20]	; (8014ca8 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8014c94:	2129      	movs	r1, #41	; 0x29
 8014c96:	4805      	ldr	r0, [pc, #20]	; (8014cac <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8014c98:	f013 fcfe 	bl	8028698 <__assert_func>
}
 8014c9c:	bf00      	nop
 8014c9e:	bd80      	pop	{r7, pc}
 8014ca0:	200052e0 	.word	0x200052e0
 8014ca4:	0802a1c8 	.word	0x0802a1c8
 8014ca8:	0802a214 	.word	0x0802a214
 8014cac:	0802a244 	.word	0x0802a244
 8014cb0:	200052e4 	.word	0x200052e4
 8014cb4:	0802a270 	.word	0x0802a270

08014cb8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8014cbc:	4b04      	ldr	r3, [pc, #16]	; (8014cd0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	f7f9 fa01 	bl	800e0cc <osSemaphoreAcquire>
}
 8014cca:	bf00      	nop
 8014ccc:	bd80      	pop	{r7, pc}
 8014cce:	bf00      	nop
 8014cd0:	200052e0 	.word	0x200052e0

08014cd4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8014cd8:	4b03      	ldr	r3, [pc, #12]	; (8014ce8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	4618      	mov	r0, r3
 8014cde:	f7f9 fa47 	bl	800e170 <osSemaphoreRelease>
}
 8014ce2:	bf00      	nop
 8014ce4:	bd80      	pop	{r7, pc}
 8014ce6:	bf00      	nop
 8014ce8:	200052e0 	.word	0x200052e0

08014cec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8014cf0:	4b03      	ldr	r3, [pc, #12]	; (8014d00 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	2100      	movs	r1, #0
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	f7f9 f9e8 	bl	800e0cc <osSemaphoreAcquire>
}
 8014cfc:	bf00      	nop
 8014cfe:	bd80      	pop	{r7, pc}
 8014d00:	200052e0 	.word	0x200052e0

08014d04 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8014d08:	4b03      	ldr	r3, [pc, #12]	; (8014d18 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	f7f9 fa2f 	bl	800e170 <osSemaphoreRelease>
}
 8014d12:	bf00      	nop
 8014d14:	bd80      	pop	{r7, pc}
 8014d16:	bf00      	nop
 8014d18:	200052e0 	.word	0x200052e0

08014d1c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8014d20:	4b04      	ldr	r3, [pc, #16]	; (8014d34 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8014d22:	6818      	ldr	r0, [r3, #0]
 8014d24:	2300      	movs	r3, #0
 8014d26:	2200      	movs	r2, #0
 8014d28:	4903      	ldr	r1, [pc, #12]	; (8014d38 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8014d2a:	f7f9 fad9 	bl	800e2e0 <osMessageQueuePut>
}
 8014d2e:	bf00      	nop
 8014d30:	bd80      	pop	{r7, pc}
 8014d32:	bf00      	nop
 8014d34:	200052e4 	.word	0x200052e4
 8014d38:	2000016c 	.word	0x2000016c

08014d3c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b082      	sub	sp, #8
 8014d40:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8014d42:	4b09      	ldr	r3, [pc, #36]	; (8014d68 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8014d44:	6818      	ldr	r0, [r3, #0]
 8014d46:	1d39      	adds	r1, r7, #4
 8014d48:	2300      	movs	r3, #0
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	f7f9 fb28 	bl	800e3a0 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8014d50:	4b05      	ldr	r3, [pc, #20]	; (8014d68 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8014d52:	6818      	ldr	r0, [r3, #0]
 8014d54:	1d39      	adds	r1, r7, #4
 8014d56:	f04f 33ff 	mov.w	r3, #4294967295
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	f7f9 fb20 	bl	800e3a0 <osMessageQueueGet>
}
 8014d60:	bf00      	nop
 8014d62:	3708      	adds	r7, #8
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd80      	pop	{r7, pc}
 8014d68:	200052e4 	.word	0x200052e4

08014d6c <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b082      	sub	sp, #8
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	4603      	mov	r3, r0
 8014d74:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8014d76:	88fb      	ldrh	r3, [r7, #6]
 8014d78:	4618      	mov	r0, r3
 8014d7a:	f7f9 f903 	bl	800df84 <osDelay>
}
 8014d7e:	bf00      	nop
 8014d80:	3708      	adds	r7, #8
 8014d82:	46bd      	mov	sp, r7
 8014d84:	bd80      	pop	{r7, pc}

08014d86 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8014d86:	b480      	push	{r7}
 8014d88:	b083      	sub	sp, #12
 8014d8a:	af00      	add	r7, sp, #0
 8014d8c:	6078      	str	r0, [r7, #4]
        : color(0)
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	2200      	movs	r2, #0
 8014d92:	601a      	str	r2, [r3, #0]
    }
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	4618      	mov	r0, r3
 8014d98:	370c      	adds	r7, #12
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da0:	4770      	bx	lr
	...

08014da4 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8014da4:	b480      	push	{r7}
 8014da6:	b083      	sub	sp, #12
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
    {
 8014dac:	4a04      	ldr	r2, [pc, #16]	; (8014dc0 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	601a      	str	r2, [r3, #0]
    }
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	4618      	mov	r0, r3
 8014db6:	370c      	adds	r7, #12
 8014db8:	46bd      	mov	sp, r7
 8014dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dbe:	4770      	bx	lr
 8014dc0:	0802ab20 	.word	0x0802ab20

08014dc4 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8014dc4:	b580      	push	{r7, lr}
 8014dc6:	b082      	sub	sp, #8
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
    }
 8014dcc:	6878      	ldr	r0, [r7, #4]
 8014dce:	f7ff ffe9 	bl	8014da4 <_ZN8touchgfx9DMA_QueueD1Ev>
 8014dd2:	2104      	movs	r1, #4
 8014dd4:	6878      	ldr	r0, [r7, #4]
 8014dd6:	f013 fc30 	bl	802863a <_ZdlPvj>
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3708      	adds	r7, #8
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}

08014de4 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b082      	sub	sp, #8
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	3344      	adds	r3, #68	; 0x44
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	6878      	ldr	r0, [r7, #4]
 8014df6:	4798      	blx	r3
    }
 8014df8:	bf00      	nop
 8014dfa:	3708      	adds	r7, #8
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	bd80      	pop	{r7, pc}

08014e00 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8014e00:	b480      	push	{r7}
 8014e02:	b083      	sub	sp, #12
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
    {
 8014e08:	4a04      	ldr	r2, [pc, #16]	; (8014e1c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	601a      	str	r2, [r3, #0]
    }
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	4618      	mov	r0, r3
 8014e12:	370c      	adds	r7, #12
 8014e14:	46bd      	mov	sp, r7
 8014e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e1a:	4770      	bx	lr
 8014e1c:	0802bad4 	.word	0x0802bad4

08014e20 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b082      	sub	sp, #8
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	6078      	str	r0, [r7, #4]
    }
 8014e28:	6878      	ldr	r0, [r7, #4]
 8014e2a:	f7ff ffe9 	bl	8014e00 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8014e2e:	210c      	movs	r1, #12
 8014e30:	6878      	ldr	r0, [r7, #4]
 8014e32:	f013 fc02 	bl	802863a <_ZdlPvj>
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	4618      	mov	r0, r3
 8014e3a:	3708      	adds	r7, #8
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	bd80      	pop	{r7, pc}

08014e40 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8014e40:	b480      	push	{r7}
 8014e42:	b083      	sub	sp, #12
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
 8014e48:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8014e4a:	4a09      	ldr	r2, [pc, #36]	; (8014e70 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	601a      	str	r2, [r3, #0]
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	683a      	ldr	r2, [r7, #0]
 8014e54:	605a      	str	r2, [r3, #4]
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	2200      	movs	r2, #0
 8014e5a:	721a      	strb	r2, [r3, #8]
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	2200      	movs	r2, #0
 8014e60:	725a      	strb	r2, [r3, #9]
    {
    }
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	4618      	mov	r0, r3
 8014e66:	370c      	adds	r7, #12
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6e:	4770      	bx	lr
 8014e70:	0802bad4 	.word	0x0802bad4

08014e74 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b082      	sub	sp, #8
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	685a      	ldr	r2, [r3, #4]
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	685b      	ldr	r3, [r3, #4]
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	3314      	adds	r3, #20
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	4610      	mov	r0, r2
 8014e8c:	4798      	blx	r3
    }
 8014e8e:	bf00      	nop
 8014e90:	3708      	adds	r7, #8
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}
	...

08014e98 <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 8014e9c:	4b13      	ldr	r3, [pc, #76]	; (8014eec <DMA2D_IRQHandler+0x54>)
 8014e9e:	685b      	ldr	r3, [r3, #4]
 8014ea0:	f003 0302 	and.w	r3, r3, #2
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	bf14      	ite	ne
 8014ea8:	2301      	movne	r3, #1
 8014eaa:	2300      	moveq	r3, #0
 8014eac:	b2db      	uxtb	r3, r3
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d019      	beq.n	8014ee6 <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 8014eb2:	4b0e      	ldr	r3, [pc, #56]	; (8014eec <DMA2D_IRQHandler+0x54>)
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	bf14      	ite	ne
 8014ebe:	2301      	movne	r3, #1
 8014ec0:	2300      	moveq	r3, #0
 8014ec2:	b2db      	uxtb	r3, r3
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d00e      	beq.n	8014ee6 <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 8014ec8:	4b08      	ldr	r3, [pc, #32]	; (8014eec <DMA2D_IRQHandler+0x54>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	4a07      	ldr	r2, [pc, #28]	; (8014eec <DMA2D_IRQHandler+0x54>)
 8014ece:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014ed2:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 8014ed4:	4b05      	ldr	r3, [pc, #20]	; (8014eec <DMA2D_IRQHandler+0x54>)
 8014ed6:	2202      	movs	r2, #2
 8014ed8:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8014eda:	f7fd f87b 	bl	8011fd4 <_ZN8touchgfx3HAL11getInstanceEv>
 8014ede:	4603      	mov	r3, r0
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	f7ff ffc7 	bl	8014e74 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 8014ee6:	bf00      	nop
 8014ee8:	bd80      	pop	{r7, pc}
 8014eea:	bf00      	nop
 8014eec:	52001000 	.word	0x52001000

08014ef0 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b082      	sub	sp, #8
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	3318      	adds	r3, #24
 8014efc:	4618      	mov	r0, r3
 8014efe:	f7ff ff42 	bl	8014d86 <_ZN8touchgfx9colortypeC1Ev>
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	4618      	mov	r0, r3
 8014f06:	3708      	adds	r7, #8
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd80      	pop	{r7, pc}

08014f0c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b082      	sub	sp, #8
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
 8014f14:	4a05      	ldr	r2, [pc, #20]	; (8014f2c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	601a      	str	r2, [r3, #0]
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	f7ff ff41 	bl	8014da4 <_ZN8touchgfx9DMA_QueueD1Ev>
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	4618      	mov	r0, r3
 8014f26:	3708      	adds	r7, #8
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	bd80      	pop	{r7, pc}
 8014f2c:	0802bb24 	.word	0x0802bb24

08014f30 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b082      	sub	sp, #8
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
 8014f38:	6878      	ldr	r0, [r7, #4]
 8014f3a:	f7ff ffe7 	bl	8014f0c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014f3e:	2114      	movs	r1, #20
 8014f40:	6878      	ldr	r0, [r7, #4]
 8014f42:	f013 fb7a 	bl	802863a <_ZdlPvj>
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	4618      	mov	r0, r3
 8014f4a:	3708      	adds	r7, #8
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bd80      	pop	{r7, pc}

08014f50 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8014f50:	b480      	push	{r7}
 8014f52:	b083      	sub	sp, #12
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8014f58:	4a04      	ldr	r2, [pc, #16]	; (8014f6c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	6013      	str	r3, [r2, #0]
    }
 8014f5e:	bf00      	nop
 8014f60:	370c      	adds	r7, #12
 8014f62:	46bd      	mov	sp, r7
 8014f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f68:	4770      	bx	lr
 8014f6a:	bf00      	nop
 8014f6c:	2000583c 	.word	0x2000583c

08014f70 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8014f70:	b480      	push	{r7}
 8014f72:	b085      	sub	sp, #20
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	60f8      	str	r0, [r7, #12]
 8014f78:	60b9      	str	r1, [r7, #8]
 8014f7a:	607a      	str	r2, [r7, #4]
 8014f7c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8014f7e:	4a0b      	ldr	r2, [pc, #44]	; (8014fac <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	601a      	str	r2, [r3, #0]
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	68ba      	ldr	r2, [r7, #8]
 8014f88:	605a      	str	r2, [r3, #4]
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	687a      	ldr	r2, [r7, #4]
 8014f8e:	609a      	str	r2, [r3, #8]
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	683a      	ldr	r2, [r7, #0]
 8014f94:	60da      	str	r2, [r3, #12]
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	69ba      	ldr	r2, [r7, #24]
 8014f9a:	611a      	str	r2, [r3, #16]
    {
    }
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	3714      	adds	r7, #20
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa8:	4770      	bx	lr
 8014faa:	bf00      	nop
 8014fac:	0802ac58 	.word	0x0802ac58

08014fb0 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8014fb0:	b480      	push	{r7}
 8014fb2:	b083      	sub	sp, #12
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
    {
 8014fb8:	4a04      	ldr	r2, [pc, #16]	; (8014fcc <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	601a      	str	r2, [r3, #0]
    }
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	370c      	adds	r7, #12
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fca:	4770      	bx	lr
 8014fcc:	0802ac58 	.word	0x0802ac58

08014fd0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b082      	sub	sp, #8
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
    }
 8014fd8:	6878      	ldr	r0, [r7, #4]
 8014fda:	f7ff ffe9 	bl	8014fb0 <_ZN8touchgfx7MVPHeapD1Ev>
 8014fde:	2114      	movs	r1, #20
 8014fe0:	6878      	ldr	r0, [r7, #4]
 8014fe2:	f013 fb2a 	bl	802863a <_ZdlPvj>
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	4618      	mov	r0, r3
 8014fea:	3708      	adds	r7, #8
 8014fec:	46bd      	mov	sp, r7
 8014fee:	bd80      	pop	{r7, pc}

08014ff0 <_ZN8touchgfx3LCDD1Ev>:
 */
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8014ff0:	b480      	push	{r7}
 8014ff2:	b083      	sub	sp, #12
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
    {
 8014ff8:	4a04      	ldr	r2, [pc, #16]	; (801500c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	601a      	str	r2, [r3, #0]
    }
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	4618      	mov	r0, r3
 8015002:	370c      	adds	r7, #12
 8015004:	46bd      	mov	sp, r7
 8015006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801500a:	4770      	bx	lr
 801500c:	0802c028 	.word	0x0802c028

08015010 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8015010:	b580      	push	{r7, lr}
 8015012:	b082      	sub	sp, #8
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
    }
 8015018:	6878      	ldr	r0, [r7, #4]
 801501a:	f7ff ffe9 	bl	8014ff0 <_ZN8touchgfx3LCDD1Ev>
 801501e:	2108      	movs	r1, #8
 8015020:	6878      	ldr	r0, [r7, #4]
 8015022:	f013 fb0a 	bl	802863a <_ZdlPvj>
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	4618      	mov	r0, r3
 801502a:	3708      	adds	r7, #8
 801502c:	46bd      	mov	sp, r7
 801502e:	bd80      	pop	{r7, pc}

08015030 <_ZN8touchgfx13DMA_Interface10initializeEv>:
    virtual void initialize()
 8015030:	b480      	push	{r7}
 8015032:	b083      	sub	sp, #12
 8015034:	af00      	add	r7, sp, #0
 8015036:	6078      	str	r0, [r7, #4]
    }
 8015038:	bf00      	nop
 801503a:	370c      	adds	r7, #12
 801503c:	46bd      	mov	sp, r7
 801503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015042:	4770      	bx	lr

08015044 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
    virtual DMAType getDMAType(void)
 8015044:	b480      	push	{r7}
 8015046:	b083      	sub	sp, #12
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
        return DMA_TYPE_GENERIC;
 801504c:	2300      	movs	r3, #0
    }
 801504e:	4618      	mov	r0, r3
 8015050:	370c      	adds	r7, #12
 8015052:	46bd      	mov	sp, r7
 8015054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015058:	4770      	bx	lr

0801505a <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 801505a:	b480      	push	{r7}
 801505c:	b083      	sub	sp, #12
 801505e:	af00      	add	r7, sp, #0
 8015060:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	2200      	movs	r2, #0
 8015066:	801a      	strh	r2, [r3, #0]
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	2200      	movs	r2, #0
 801506c:	805a      	strh	r2, [r3, #2]
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	2200      	movs	r2, #0
 8015072:	809a      	strh	r2, [r3, #4]
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	2200      	movs	r2, #0
 8015078:	80da      	strh	r2, [r3, #6]
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	2200      	movs	r2, #0
 801507e:	811a      	strh	r2, [r3, #8]
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	2200      	movs	r2, #0
 8015084:	815a      	strh	r2, [r3, #10]
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	2200      	movs	r2, #0
 801508a:	819a      	strh	r2, [r3, #12]
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2200      	movs	r2, #0
 8015090:	739a      	strb	r2, [r3, #14]
        {
        }
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	4618      	mov	r0, r3
 8015096:	370c      	adds	r7, #12
 8015098:	46bd      	mov	sp, r7
 801509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509e:	4770      	bx	lr

080150a0 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b082      	sub	sp, #8
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
        : listener(0), dragThresholdValue(0)
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7ff ffd5 	bl	801505a <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	2200      	movs	r2, #0
 80150b4:	611a      	str	r2, [r3, #16]
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	2200      	movs	r2, #0
 80150ba:	829a      	strh	r2, [r3, #20]
    {
    }
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	4618      	mov	r0, r3
 80150c0:	3708      	adds	r7, #8
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd80      	pop	{r7, pc}
	...

080150c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b084      	sub	sp, #16
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	60f8      	str	r0, [r7, #12]
 80150d0:	60b9      	str	r1, [r7, #8]
 80150d2:	607a      	str	r2, [r7, #4]
 80150d4:	603b      	str	r3, [r7, #0]
          lastRenderVariant(HARDWARE)
 80150d6:	4a4a      	ldr	r2, [pc, #296]	; (8015200 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	601a      	str	r2, [r3, #0]
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	68ba      	ldr	r2, [r7, #8]
 80150e0:	605a      	str	r2, [r3, #4]
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	687a      	ldr	r2, [r7, #4]
 80150e6:	609a      	str	r2, [r3, #8]
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	683a      	ldr	r2, [r7, #0]
 80150ec:	60da      	str	r2, [r3, #12]
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	2200      	movs	r2, #0
 80150f2:	611a      	str	r2, [r3, #16]
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	2200      	movs	r2, #0
 80150f8:	615a      	str	r2, [r3, #20]
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	2200      	movs	r2, #0
 80150fe:	619a      	str	r2, [r3, #24]
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	331c      	adds	r3, #28
 8015104:	4618      	mov	r0, r3
 8015106:	f7ff ffcb 	bl	80150a0 <_ZN8touchgfx8GesturesC1Ev>
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	2200      	movs	r2, #0
 801510e:	639a      	str	r2, [r3, #56]	; 0x38
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	2200      	movs	r2, #0
 8015114:	63da      	str	r2, [r3, #60]	; 0x3c
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	2200      	movs	r2, #0
 801511a:	641a      	str	r2, [r3, #64]	; 0x40
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	2200      	movs	r2, #0
 8015120:	645a      	str	r2, [r3, #68]	; 0x44
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	2200      	movs	r2, #0
 8015126:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	2201      	movs	r2, #1
 801512e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	2200      	movs	r2, #0
 8015136:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	2200      	movs	r2, #0
 801513e:	64da      	str	r2, [r3, #76]	; 0x4c
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	3350      	adds	r3, #80	; 0x50
 8015144:	4618      	mov	r0, r3
 8015146:	f7fe f839 	bl	80131bc <_ZN8touchgfx4RectC1Ev>
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	2201      	movs	r2, #1
 801514e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	2200      	movs	r2, #0
 8015156:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	2200      	movs	r2, #0
 801515e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	2201      	movs	r2, #1
 8015166:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	2200      	movs	r2, #0
 801516e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	2200      	movs	r2, #0
 8015176:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	2200      	movs	r2, #0
 801517e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	2200      	movs	r2, #0
 8015186:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	2200      	movs	r2, #0
 801518e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	2200      	movs	r2, #0
 8015196:	671a      	str	r2, [r3, #112]	; 0x70
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	2200      	movs	r2, #0
 801519c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	2200      	movs	r2, #0
 80151a4:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	2201      	movs	r2, #1
 80151ac:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	2201      	movs	r2, #1
 80151b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 80151b8:	4a12      	ldr	r2, [pc, #72]	; (8015204 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x13c>)
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 80151be:	4a12      	ldr	r2, [pc, #72]	; (8015208 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 80151c0:	8b3b      	ldrh	r3, [r7, #24]
 80151c2:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80151c4:	4a11      	ldr	r2, [pc, #68]	; (801520c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 80151c6:	8bbb      	ldrh	r3, [r7, #28]
 80151c8:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80151ca:	4b11      	ldr	r3, [pc, #68]	; (8015210 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x148>)
 80151cc:	2200      	movs	r2, #0
 80151ce:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80151d0:	4b0d      	ldr	r3, [pc, #52]	; (8015208 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x140>)
 80151d2:	881a      	ldrh	r2, [r3, #0]
 80151d4:	4b0f      	ldr	r3, [pc, #60]	; (8015214 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x14c>)
 80151d6:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80151d8:	4b0c      	ldr	r3, [pc, #48]	; (801520c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x144>)
 80151da:	881a      	ldrh	r2, [r3, #0]
 80151dc:	4b0e      	ldr	r3, [pc, #56]	; (8015218 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x150>)
 80151de:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80151e0:	8b3a      	ldrh	r2, [r7, #24]
 80151e2:	8bbb      	ldrh	r3, [r7, #28]
 80151e4:	429a      	cmp	r2, r3
 80151e6:	bf34      	ite	cc
 80151e8:	2301      	movcc	r3, #1
 80151ea:	2300      	movcs	r3, #0
 80151ec:	b2db      	uxtb	r3, r3
 80151ee:	461a      	mov	r2, r3
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	4618      	mov	r0, r3
 80151fa:	3710      	adds	r7, #16
 80151fc:	46bd      	mov	sp, r7
 80151fe:	bd80      	pop	{r7, pc}
 8015200:	0802b688 	.word	0x0802b688
 8015204:	200057e0 	.word	0x200057e0
 8015208:	200057d4 	.word	0x200057d4
 801520c:	200057d6 	.word	0x200057d6
 8015210:	200057d8 	.word	0x200057d8
 8015214:	200057da 	.word	0x200057da
 8015218:	200057dc 	.word	0x200057dc

0801521c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801521c:	b580      	push	{r7, lr}
 801521e:	b082      	sub	sp, #8
 8015220:	af00      	add	r7, sp, #0
 8015222:	6078      	str	r0, [r7, #4]
 8015224:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 8015226:	683b      	ldr	r3, [r7, #0]
 8015228:	4618      	mov	r0, r3
 801522a:	f7fd f903 	bl	8012434 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 801522e:	bf00      	nop
 8015230:	3708      	adds	r7, #8
 8015232:	46bd      	mov	sp, r7
 8015234:	bd80      	pop	{r7, pc}
	...

08015238 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8015238:	b580      	push	{r7, lr}
 801523a:	b086      	sub	sp, #24
 801523c:	af02      	add	r7, sp, #8
 801523e:	60f8      	str	r0, [r7, #12]
 8015240:	60b9      	str	r1, [r7, #8]
 8015242:	607a      	str	r2, [r7, #4]
 8015244:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8015246:	68f8      	ldr	r0, [r7, #12]
 8015248:	69bb      	ldr	r3, [r7, #24]
 801524a:	9300      	str	r3, [sp, #0]
 801524c:	683b      	ldr	r3, [r7, #0]
 801524e:	687a      	ldr	r2, [r7, #4]
 8015250:	68b9      	ldr	r1, [r7, #8]
 8015252:	f7ff fe8d 	bl	8014f70 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8015256:	4a04      	ldr	r2, [pc, #16]	; (8015268 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	601a      	str	r2, [r3, #0]
    {

    }
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	4618      	mov	r0, r3
 8015260:	3710      	adds	r7, #16
 8015262:	46bd      	mov	sp, r7
 8015264:	bd80      	pop	{r7, pc}
 8015266:	bf00      	nop
 8015268:	0802ac44 	.word	0x0802ac44

0801526c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 801526c:	b580      	push	{r7, lr}
 801526e:	af00      	add	r7, sp, #0
 8015270:	4801      	ldr	r0, [pc, #4]	; (8015278 <__tcf_0+0xc>)
 8015272:	f000 f9e5 	bl	8015640 <_ZN12FrontendHeapD1Ev>
 8015276:	bd80      	pop	{r7, pc}
 8015278:	200052e8 	.word	0x200052e8

0801527c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 801527c:	b580      	push	{r7, lr}
 801527e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8015280:	4b12      	ldr	r3, [pc, #72]	; (80152cc <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8015282:	781b      	ldrb	r3, [r3, #0]
 8015284:	f3bf 8f5b 	dmb	ish
 8015288:	b2db      	uxtb	r3, r3
 801528a:	f003 0301 	and.w	r3, r3, #1
 801528e:	2b00      	cmp	r3, #0
 8015290:	bf0c      	ite	eq
 8015292:	2301      	moveq	r3, #1
 8015294:	2300      	movne	r3, #0
 8015296:	b2db      	uxtb	r3, r3
 8015298:	2b00      	cmp	r3, #0
 801529a:	d013      	beq.n	80152c4 <_ZN12FrontendHeap11getInstanceEv+0x48>
 801529c:	480b      	ldr	r0, [pc, #44]	; (80152cc <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801529e:	f013 f9ce 	bl	802863e <__cxa_guard_acquire>
 80152a2:	4603      	mov	r3, r0
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	bf14      	ite	ne
 80152a8:	2301      	movne	r3, #1
 80152aa:	2300      	moveq	r3, #0
 80152ac:	b2db      	uxtb	r3, r3
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d008      	beq.n	80152c4 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80152b2:	4807      	ldr	r0, [pc, #28]	; (80152d0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80152b4:	f000 f868 	bl	8015388 <_ZN12FrontendHeapC1Ev>
 80152b8:	4806      	ldr	r0, [pc, #24]	; (80152d4 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 80152ba:	f013 fa0b 	bl	80286d4 <atexit>
 80152be:	4803      	ldr	r0, [pc, #12]	; (80152cc <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80152c0:	f013 f9c9 	bl	8028656 <__cxa_guard_release>
        return instance;
 80152c4:	4b02      	ldr	r3, [pc, #8]	; (80152d0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 80152c6:	4618      	mov	r0, r3
 80152c8:	bd80      	pop	{r7, pc}
 80152ca:	bf00      	nop
 80152cc:	20005690 	.word	0x20005690
 80152d0:	200052e8 	.word	0x200052e8
 80152d4:	0801526d 	.word	0x0801526d

080152d8 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80152d8:	b580      	push	{r7, lr}
 80152da:	b082      	sub	sp, #8
 80152dc:	af00      	add	r7, sp, #0
 80152de:	6078      	str	r0, [r7, #4]
 80152e0:	4a05      	ldr	r2, [pc, #20]	; (80152f8 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	601a      	str	r2, [r3, #0]
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	4618      	mov	r0, r3
 80152ea:	f7ff fe61 	bl	8014fb0 <_ZN8touchgfx7MVPHeapD1Ev>
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	4618      	mov	r0, r3
 80152f2:	3708      	adds	r7, #8
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bd80      	pop	{r7, pc}
 80152f8:	0802ac44 	.word	0x0802ac44

080152fc <_ZN16FrontendHeapBaseD0Ev>:
 80152fc:	b580      	push	{r7, lr}
 80152fe:	b082      	sub	sp, #8
 8015300:	af00      	add	r7, sp, #0
 8015302:	6078      	str	r0, [r7, #4]
 8015304:	6878      	ldr	r0, [r7, #4]
 8015306:	f7ff ffe7 	bl	80152d8 <_ZN16FrontendHeapBaseD1Ev>
 801530a:	2114      	movs	r1, #20
 801530c:	6878      	ldr	r0, [r7, #4]
 801530e:	f013 f994 	bl	802863a <_ZdlPvj>
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	4618      	mov	r0, r3
 8015316:	3708      	adds	r7, #8
 8015318:	46bd      	mov	sp, r7
 801531a:	bd80      	pop	{r7, pc}

0801531c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 801531c:	b580      	push	{r7, lr}
 801531e:	b082      	sub	sp, #8
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	4618      	mov	r0, r3
 8015328:	f000 fec6 	bl	80160b8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801532c:	4a03      	ldr	r2, [pc, #12]	; (801533c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	601a      	str	r2, [r3, #0]
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	4618      	mov	r0, r3
 8015336:	3708      	adds	r7, #8
 8015338:	46bd      	mov	sp, r7
 801533a:	bd80      	pop	{r7, pc}
 801533c:	0802ac10 	.word	0x0802ac10

08015340 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8015340:	b580      	push	{r7, lr}
 8015342:	b082      	sub	sp, #8
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	4618      	mov	r0, r3
 801534c:	f000 feb4 	bl	80160b8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015350:	4a03      	ldr	r2, [pc, #12]	; (8015360 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	601a      	str	r2, [r3, #0]
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	4618      	mov	r0, r3
 801535a:	3708      	adds	r7, #8
 801535c:	46bd      	mov	sp, r7
 801535e:	bd80      	pop	{r7, pc}
 8015360:	0802abdc 	.word	0x0802abdc

08015364 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8015364:	b580      	push	{r7, lr}
 8015366:	b082      	sub	sp, #8
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	4618      	mov	r0, r3
 8015370:	f000 fea2 	bl	80160b8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015374:	4a03      	ldr	r2, [pc, #12]	; (8015384 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	601a      	str	r2, [r3, #0]
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	4618      	mov	r0, r3
 801537e:	3708      	adds	r7, #8
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}
 8015384:	0802aba8 	.word	0x0802aba8

08015388 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8015388:	b590      	push	{r4, r7, lr}
 801538a:	b085      	sub	sp, #20
 801538c:	af02      	add	r7, sp, #8
 801538e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8015390:	6878      	ldr	r0, [r7, #4]
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	f103 0114 	add.w	r1, r3, #20
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	f503 74f8 	add.w	r4, r3, #496	; 0x1f0
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	f503 7314 	add.w	r3, r3, #592	; 0x250
                     app(model, *this)
 80153aa:	9300      	str	r3, [sp, #0]
 80153ac:	4623      	mov	r3, r4
 80153ae:	f7ff ff43 	bl	8015238 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80153b2:	4a18      	ldr	r2, [pc, #96]	; (8015414 <_ZN12FrontendHeapC1Ev+0x8c>)
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	601a      	str	r2, [r3, #0]
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	3314      	adds	r3, #20
 80153bc:	4618      	mov	r0, r3
 80153be:	f7ff ffad 	bl	801531c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	332c      	adds	r3, #44	; 0x2c
 80153c6:	4618      	mov	r0, r3
 80153c8:	f7ff ffba 	bl	8015340 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 80153d2:	4618      	mov	r0, r3
 80153d4:	f7ff ffc6 	bl	8015364 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80153de:	4618      	mov	r0, r3
 80153e0:	f7fe ffb6 	bl	8014350 <_ZN5ModelC1Ev>
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	f503 7014 	add.w	r0, r3, #592	; 0x250
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80153f0:	687a      	ldr	r2, [r7, #4]
 80153f2:	4619      	mov	r1, r3
 80153f4:	f7fe ff96 	bl	8014324 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80153f8:	687a      	ldr	r2, [r7, #4]
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8015400:	4619      	mov	r1, r3
 8015402:	4610      	mov	r0, r2
 8015404:	f7ff ff0a 	bl	801521c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	4618      	mov	r0, r3
 801540c:	370c      	adds	r7, #12
 801540e:	46bd      	mov	sp, r7
 8015410:	bd90      	pop	{r4, r7, pc}
 8015412:	bf00      	nop
 8015414:	0802ab94 	.word	0x0802ab94

08015418 <_ZN8touchgfx5NoDMAC1Ev>:
 * @see DMA_Interface
 */
class NoDMA : public DMA_Interface
{
public:
    NoDMA()
 8015418:	b580      	push	{r7, lr}
 801541a:	b082      	sub	sp, #8
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
        : DMA_Interface(q), q(&b, 1)
 8015420:	687a      	ldr	r2, [r7, #4]
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	330c      	adds	r3, #12
 8015426:	4619      	mov	r1, r3
 8015428:	4610      	mov	r0, r2
 801542a:	f7ff fd09 	bl	8014e40 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801542e:	4a0b      	ldr	r2, [pc, #44]	; (801545c <_ZN8touchgfx5NoDMAC1Ev+0x44>)
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	601a      	str	r2, [r3, #0]
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	f103 000c 	add.w	r0, r3, #12
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	3320      	adds	r3, #32
 801543e:	2201      	movs	r2, #1
 8015440:	4619      	mov	r1, r3
 8015442:	f002 faeb 	bl	8017a1c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	3320      	adds	r3, #32
 801544a:	4618      	mov	r0, r3
 801544c:	f7ff fd50 	bl	8014ef0 <_ZN8touchgfx6BlitOpC1Ev>
    {
    }
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	4618      	mov	r0, r3
 8015454:	3708      	adds	r7, #8
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}
 801545a:	bf00      	nop
 801545c:	0802ab44 	.word	0x0802ab44

08015460 <_ZN8touchgfx5NoDMA11getBlitCapsEv>:
    /**
     * No blit operations supported by this DMA implementation.
     *
     * @return Zero (no blit ops supported).
     */
    virtual BlitOperations getBlitCaps()
 8015460:	b480      	push	{r7}
 8015462:	b083      	sub	sp, #12
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
    {
        return static_cast<BlitOperations>(0);
 8015468:	2300      	movs	r3, #0
    }
 801546a:	4618      	mov	r0, r3
 801546c:	370c      	adds	r7, #12
 801546e:	46bd      	mov	sp, r7
 8015470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015474:	4770      	bx	lr
	...

08015478 <_ZN8touchgfx5NoDMA13setupDataCopyERKNS_6BlitOpE>:
    /**
     * Asserts if used.
     *
     * @param  blitOp The blit operation to be performed by this DMA instance.
     */
    virtual void setupDataCopy(const BlitOp& blitOp)
 8015478:	b580      	push	{r7, lr}
 801547a:	b082      	sub	sp, #8
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
 8015480:	6039      	str	r1, [r7, #0]
    {
        assert(0 && "DMA operation not supported");
 8015482:	4b03      	ldr	r3, [pc, #12]	; (8015490 <_ZN8touchgfx5NoDMA13setupDataCopyERKNS_6BlitOpE+0x18>)
 8015484:	4a03      	ldr	r2, [pc, #12]	; (8015494 <_ZN8touchgfx5NoDMA13setupDataCopyERKNS_6BlitOpE+0x1c>)
 8015486:	213c      	movs	r1, #60	; 0x3c
 8015488:	4803      	ldr	r0, [pc, #12]	; (8015498 <_ZN8touchgfx5NoDMA13setupDataCopyERKNS_6BlitOpE+0x20>)
 801548a:	f013 f905 	bl	8028698 <__assert_func>
 801548e:	bf00      	nop
 8015490:	0802a2b4 	.word	0x0802a2b4
 8015494:	0802a2d8 	.word	0x0802a2d8
 8015498:	0802a320 	.word	0x0802a320

0801549c <_ZN8touchgfx5NoDMA13setupDataFillERKNS_6BlitOpE>:
    /**
     * Asserts if used.
     *
     * @param  blitOp The blit operation to be performed by this DMA instance.
     */
    virtual void setupDataFill(const BlitOp& blitOp)
 801549c:	b580      	push	{r7, lr}
 801549e:	b082      	sub	sp, #8
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	6078      	str	r0, [r7, #4]
 80154a4:	6039      	str	r1, [r7, #0]
    {
        assert(0 && "DMA operation not supported");
 80154a6:	4b03      	ldr	r3, [pc, #12]	; (80154b4 <_ZN8touchgfx5NoDMA13setupDataFillERKNS_6BlitOpE+0x18>)
 80154a8:	4a03      	ldr	r2, [pc, #12]	; (80154b8 <_ZN8touchgfx5NoDMA13setupDataFillERKNS_6BlitOpE+0x1c>)
 80154aa:	2146      	movs	r1, #70	; 0x46
 80154ac:	4803      	ldr	r0, [pc, #12]	; (80154bc <_ZN8touchgfx5NoDMA13setupDataFillERKNS_6BlitOpE+0x20>)
 80154ae:	f013 f8f3 	bl	8028698 <__assert_func>
 80154b2:	bf00      	nop
 80154b4:	0802a2b4 	.word	0x0802a2b4
 80154b8:	0802a364 	.word	0x0802a364
 80154bc:	0802a320 	.word	0x0802a320

080154c0 <_ZN8touchgfx5NoDMA18signalDMAInterruptEv>:
    }

    /** Does nothing. */
    virtual void signalDMAInterrupt()
 80154c0:	b480      	push	{r7}
 80154c2:	b083      	sub	sp, #12
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
    {
    }
 80154c8:	bf00      	nop
 80154ca:	370c      	adds	r7, #12
 80154cc:	46bd      	mov	sp, r7
 80154ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d2:	4770      	bx	lr

080154d4 <_ZN8touchgfx5NoDMA5flushEv>:

    /**
     * Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 80154d4:	b480      	push	{r7}
 80154d6:	b083      	sub	sp, #12
 80154d8:	af00      	add	r7, sp, #0
 80154da:	6078      	str	r0, [r7, #4]
    {
    }
 80154dc:	bf00      	nop
 80154de:	370c      	adds	r7, #12
 80154e0:	46bd      	mov	sp, r7
 80154e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e6:	4770      	bx	lr

080154e8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b086      	sub	sp, #24
 80154ec:	af02      	add	r7, sp, #8
 80154ee:	60f8      	str	r0, [r7, #12]
 80154f0:	60b9      	str	r1, [r7, #8]
 80154f2:	607a      	str	r2, [r7, #4]
 80154f4:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80154f6:	68f8      	ldr	r0, [r7, #12]
 80154f8:	8bbb      	ldrh	r3, [r7, #28]
 80154fa:	9301      	str	r3, [sp, #4]
 80154fc:	8b3b      	ldrh	r3, [r7, #24]
 80154fe:	9300      	str	r3, [sp, #0]
 8015500:	683b      	ldr	r3, [r7, #0]
 8015502:	687a      	ldr	r2, [r7, #4]
 8015504:	68b9      	ldr	r1, [r7, #8]
 8015506:	f7ff fddf 	bl	80150c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801550a:	4a04      	ldr	r2, [pc, #16]	; (801551c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	601a      	str	r2, [r3, #0]
    }
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	4618      	mov	r0, r3
 8015514:	3710      	adds	r7, #16
 8015516:	46bd      	mov	sp, r7
 8015518:	bd80      	pop	{r7, pc}
 801551a:	bf00      	nop
 801551c:	0802ac68 	.word	0x0802ac68

08015520 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8015520:	b580      	push	{r7, lr}
 8015522:	b086      	sub	sp, #24
 8015524:	af02      	add	r7, sp, #8
 8015526:	60f8      	str	r0, [r7, #12]
 8015528:	60b9      	str	r1, [r7, #8]
 801552a:	607a      	str	r2, [r7, #4]
 801552c:	603b      	str	r3, [r7, #0]
 801552e:	68f8      	ldr	r0, [r7, #12]
 8015530:	8bbb      	ldrh	r3, [r7, #28]
 8015532:	9301      	str	r3, [sp, #4]
 8015534:	8b3b      	ldrh	r3, [r7, #24]
 8015536:	9300      	str	r3, [sp, #0]
 8015538:	683b      	ldr	r3, [r7, #0]
 801553a:	687a      	ldr	r2, [r7, #4]
 801553c:	68b9      	ldr	r1, [r7, #8]
 801553e:	f7ff ffd3 	bl	80154e8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8015542:	4a04      	ldr	r2, [pc, #16]	; (8015554 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	601a      	str	r2, [r3, #0]
    }
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	4618      	mov	r0, r3
 801554c:	3710      	adds	r7, #16
 801554e:	46bd      	mov	sp, r7
 8015550:	bd80      	pop	{r7, pc}
 8015552:	bf00      	nop
 8015554:	0802aa64 	.word	0x0802aa64

08015558 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8015558:	b480      	push	{r7}
 801555a:	b083      	sub	sp, #12
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
 8015560:	4a04      	ldr	r2, [pc, #16]	; (8015574 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	601a      	str	r2, [r3, #0]
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	4618      	mov	r0, r3
 801556a:	370c      	adds	r7, #12
 801556c:	46bd      	mov	sp, r7
 801556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015572:	4770      	bx	lr
 8015574:	0802aa4c 	.word	0x0802aa4c

08015578 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8015578:	b580      	push	{r7, lr}
 801557a:	b082      	sub	sp, #8
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	4618      	mov	r0, r3
 8015584:	f7ff ffe8 	bl	8015558 <_ZN8touchgfx15TouchControllerC1Ev>
 8015588:	4a03      	ldr	r2, [pc, #12]	; (8015598 <_ZN20STM32TouchControllerC1Ev+0x20>)
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	601a      	str	r2, [r3, #0]
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	4618      	mov	r0, r3
 8015592:	3708      	adds	r7, #8
 8015594:	46bd      	mov	sp, r7
 8015596:	bd80      	pop	{r7, pc}
 8015598:	0802aa34 	.word	0x0802aa34

0801559c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 801559c:	b590      	push	{r4, r7, lr}
 801559e:	b085      	sub	sp, #20
 80155a0:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80155a2:	f7fe fc99 	bl	8013ed8 <_ZN14BitmapDatabase11getInstanceEv>
 80155a6:	4604      	mov	r4, r0
 80155a8:	f7fe fca0 	bl	8013eec <_ZN14BitmapDatabase15getInstanceSizeEv>
 80155ac:	4603      	mov	r3, r0
 80155ae:	4619      	mov	r1, r3
 80155b0:	2300      	movs	r3, #0
 80155b2:	9300      	str	r3, [sp, #0]
 80155b4:	2300      	movs	r3, #0
 80155b6:	2200      	movs	r2, #0
 80155b8:	4620      	mov	r0, r4
 80155ba:	f007 fa2f 	bl	801ca1c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 80155be:	4809      	ldr	r0, [pc, #36]	; (80155e4 <touchgfx_init+0x48>)
 80155c0:	f7ff fcc6 	bl	8014f50 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 80155c4:	2000      	movs	r0, #0
 80155c6:	f7fe fdcb 	bl	8014160 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 80155ca:	4807      	ldr	r0, [pc, #28]	; (80155e8 <touchgfx_init+0x4c>)
 80155cc:	f007 f968 	bl	801c8a0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 80155d0:	f7ff fe54 	bl	801527c <_ZN12FrontendHeap11getInstanceEv>
 80155d4:	6078      	str	r0, [r7, #4]
  (void)heap;

  /*
   * Initialize TouchGFX
   */
  hal.initialize();
 80155d6:	4805      	ldr	r0, [pc, #20]	; (80155ec <touchgfx_init+0x50>)
 80155d8:	f7ff faa0 	bl	8014b1c <_ZN11TouchGFXHAL10initializeEv>
}
 80155dc:	bf00      	nop
 80155de:	370c      	adds	r7, #12
 80155e0:	46bd      	mov	sp, r7
 80155e2:	bd90      	pop	{r4, r7, pc}
 80155e4:	20005750 	.word	0x20005750
 80155e8:	20000170 	.word	0x20000170
 80155ec:	20005754 	.word	0x20005754

080155f0 <_ZN8touchgfx5NoDMAD1Ev>:
class NoDMA : public DMA_Interface
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b082      	sub	sp, #8
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]
 80155f8:	4a08      	ldr	r2, [pc, #32]	; (801561c <_ZN8touchgfx5NoDMAD1Ev+0x2c>)
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	601a      	str	r2, [r3, #0]
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	330c      	adds	r3, #12
 8015602:	4618      	mov	r0, r3
 8015604:	f7ff fc82 	bl	8014f0c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	4618      	mov	r0, r3
 801560c:	f7ff fbf8 	bl	8014e00 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	4618      	mov	r0, r3
 8015614:	3708      	adds	r7, #8
 8015616:	46bd      	mov	sp, r7
 8015618:	bd80      	pop	{r7, pc}
 801561a:	bf00      	nop
 801561c:	0802ab44 	.word	0x0802ab44

08015620 <_ZN8touchgfx5NoDMAD0Ev>:
 8015620:	b580      	push	{r7, lr}
 8015622:	b082      	sub	sp, #8
 8015624:	af00      	add	r7, sp, #0
 8015626:	6078      	str	r0, [r7, #4]
 8015628:	6878      	ldr	r0, [r7, #4]
 801562a:	f7ff ffe1 	bl	80155f0 <_ZN8touchgfx5NoDMAD1Ev>
 801562e:	2140      	movs	r1, #64	; 0x40
 8015630:	6878      	ldr	r0, [r7, #4]
 8015632:	f013 f802 	bl	802863a <_ZdlPvj>
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	4618      	mov	r0, r3
 801563a:	3708      	adds	r7, #8
 801563c:	46bd      	mov	sp, r7
 801563e:	bd80      	pop	{r7, pc}

08015640 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8015640:	b580      	push	{r7, lr}
 8015642:	b082      	sub	sp, #8
 8015644:	af00      	add	r7, sp, #0
 8015646:	6078      	str	r0, [r7, #4]
 8015648:	4a10      	ldr	r2, [pc, #64]	; (801568c <_ZN12FrontendHeapD1Ev+0x4c>)
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	601a      	str	r2, [r3, #0]
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8015654:	4618      	mov	r0, r3
 8015656:	f7fe fe2f 	bl	80142b8 <_ZN19FrontendApplicationD1Ev>
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8015660:	4618      	mov	r0, r3
 8015662:	f000 f827 	bl	80156b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	332c      	adds	r3, #44	; 0x2c
 801566a:	4618      	mov	r0, r3
 801566c:	f000 f844 	bl	80156f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	3314      	adds	r3, #20
 8015674:	4618      	mov	r0, r3
 8015676:	f000 f863 	bl	8015740 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	4618      	mov	r0, r3
 801567e:	f7ff fe2b 	bl	80152d8 <_ZN16FrontendHeapBaseD1Ev>
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	4618      	mov	r0, r3
 8015686:	3708      	adds	r7, #8
 8015688:	46bd      	mov	sp, r7
 801568a:	bd80      	pop	{r7, pc}
 801568c:	0802ab94 	.word	0x0802ab94

08015690 <_ZN12FrontendHeapD0Ev>:
 8015690:	b580      	push	{r7, lr}
 8015692:	b082      	sub	sp, #8
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]
 8015698:	6878      	ldr	r0, [r7, #4]
 801569a:	f7ff ffd1 	bl	8015640 <_ZN12FrontendHeapD1Ev>
 801569e:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 80156a2:	6878      	ldr	r0, [r7, #4]
 80156a4:	f012 ffc9 	bl	802863a <_ZdlPvj>
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	4618      	mov	r0, r3
 80156ac:	3708      	adds	r7, #8
 80156ae:	46bd      	mov	sp, r7
 80156b0:	bd80      	pop	{r7, pc}
	...

080156b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b082      	sub	sp, #8
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
 80156bc:	4a05      	ldr	r2, [pc, #20]	; (80156d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	601a      	str	r2, [r3, #0]
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	4618      	mov	r0, r3
 80156c6:	f000 fcf5 	bl	80160b4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	4618      	mov	r0, r3
 80156ce:	3708      	adds	r7, #8
 80156d0:	46bd      	mov	sp, r7
 80156d2:	bd80      	pop	{r7, pc}
 80156d4:	0802aba8 	.word	0x0802aba8

080156d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 80156d8:	b580      	push	{r7, lr}
 80156da:	b082      	sub	sp, #8
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
 80156e0:	6878      	ldr	r0, [r7, #4]
 80156e2:	f7ff ffe7 	bl	80156b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80156e6:	215c      	movs	r1, #92	; 0x5c
 80156e8:	6878      	ldr	r0, [r7, #4]
 80156ea:	f012 ffa6 	bl	802863a <_ZdlPvj>
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	4618      	mov	r0, r3
 80156f2:	3708      	adds	r7, #8
 80156f4:	46bd      	mov	sp, r7
 80156f6:	bd80      	pop	{r7, pc}

080156f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b082      	sub	sp, #8
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
 8015700:	4a05      	ldr	r2, [pc, #20]	; (8015718 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	601a      	str	r2, [r3, #0]
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	4618      	mov	r0, r3
 801570a:	f000 fcd3 	bl	80160b4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	4618      	mov	r0, r3
 8015712:	3708      	adds	r7, #8
 8015714:	46bd      	mov	sp, r7
 8015716:	bd80      	pop	{r7, pc}
 8015718:	0802abdc 	.word	0x0802abdc

0801571c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801571c:	b580      	push	{r7, lr}
 801571e:	b082      	sub	sp, #8
 8015720:	af00      	add	r7, sp, #0
 8015722:	6078      	str	r0, [r7, #4]
 8015724:	6878      	ldr	r0, [r7, #4]
 8015726:	f7ff ffe7 	bl	80156f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801572a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 801572e:	6878      	ldr	r0, [r7, #4]
 8015730:	f012 ff83 	bl	802863a <_ZdlPvj>
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	4618      	mov	r0, r3
 8015738:	3708      	adds	r7, #8
 801573a:	46bd      	mov	sp, r7
 801573c:	bd80      	pop	{r7, pc}
	...

08015740 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8015740:	b580      	push	{r7, lr}
 8015742:	b082      	sub	sp, #8
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]
 8015748:	4a05      	ldr	r2, [pc, #20]	; (8015760 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	601a      	str	r2, [r3, #0]
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	4618      	mov	r0, r3
 8015752:	f000 fcaf 	bl	80160b4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	4618      	mov	r0, r3
 801575a:	3708      	adds	r7, #8
 801575c:	46bd      	mov	sp, r7
 801575e:	bd80      	pop	{r7, pc}
 8015760:	0802ac10 	.word	0x0802ac10

08015764 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8015764:	b580      	push	{r7, lr}
 8015766:	b082      	sub	sp, #8
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
 801576c:	6878      	ldr	r0, [r7, #4]
 801576e:	f7ff ffe7 	bl	8015740 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015772:	2118      	movs	r1, #24
 8015774:	6878      	ldr	r0, [r7, #4]
 8015776:	f012 ff60 	bl	802863a <_ZdlPvj>
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	4618      	mov	r0, r3
 801577e:	3708      	adds	r7, #8
 8015780:	46bd      	mov	sp, r7
 8015782:	bd80      	pop	{r7, pc}

08015784 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8015784:	b580      	push	{r7, lr}
 8015786:	b082      	sub	sp, #8
 8015788:	af00      	add	r7, sp, #0
 801578a:	6078      	str	r0, [r7, #4]
 801578c:	4a05      	ldr	r2, [pc, #20]	; (80157a4 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	601a      	str	r2, [r3, #0]
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	4618      	mov	r0, r3
 8015796:	f7ff fc2b 	bl	8014ff0 <_ZN8touchgfx3LCDD1Ev>
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	4618      	mov	r0, r3
 801579e:	3708      	adds	r7, #8
 80157a0:	46bd      	mov	sp, r7
 80157a2:	bd80      	pop	{r7, pc}
 80157a4:	0802d208 	.word	0x0802d208

080157a8 <_ZN8touchgfx8LCD16bppD0Ev>:
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b082      	sub	sp, #8
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
 80157b0:	6878      	ldr	r0, [r7, #4]
 80157b2:	f7ff ffe7 	bl	8015784 <_ZN8touchgfx8LCD16bppD1Ev>
 80157b6:	2178      	movs	r1, #120	; 0x78
 80157b8:	6878      	ldr	r0, [r7, #4]
 80157ba:	f012 ff3e 	bl	802863a <_ZdlPvj>
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	4618      	mov	r0, r3
 80157c2:	3708      	adds	r7, #8
 80157c4:	46bd      	mov	sp, r7
 80157c6:	bd80      	pop	{r7, pc}

080157c8 <_Z41__static_initialization_and_destruction_0ii>:
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
}
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b084      	sub	sp, #16
 80157cc:	af02      	add	r7, sp, #8
 80157ce:	6078      	str	r0, [r7, #4]
 80157d0:	6039      	str	r1, [r7, #0]
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	2b01      	cmp	r3, #1
 80157d6:	d119      	bne.n	801580c <_Z41__static_initialization_and_destruction_0ii+0x44>
 80157d8:	683b      	ldr	r3, [r7, #0]
 80157da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80157de:	4293      	cmp	r3, r2
 80157e0:	d114      	bne.n	801580c <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80157e2:	4818      	ldr	r0, [pc, #96]	; (8015844 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80157e4:	f7ff fec8 	bl	8015578 <_ZN20STM32TouchControllerC1Ev>
static NoDMA dma;
 80157e8:	4817      	ldr	r0, [pc, #92]	; (8015848 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80157ea:	f7ff fe15 	bl	8015418 <_ZN8touchgfx5NoDMAC1Ev>
static LCD16bpp display;
 80157ee:	4817      	ldr	r0, [pc, #92]	; (801584c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80157f0:	f00a f998 	bl	801fb24 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80157f4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80157f8:	9301      	str	r3, [sp, #4]
 80157fa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80157fe:	9300      	str	r3, [sp, #0]
 8015800:	4b10      	ldr	r3, [pc, #64]	; (8015844 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8015802:	4a12      	ldr	r2, [pc, #72]	; (801584c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8015804:	4910      	ldr	r1, [pc, #64]	; (8015848 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8015806:	4812      	ldr	r0, [pc, #72]	; (8015850 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8015808:	f7ff fe8a 	bl	8015520 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d113      	bne.n	801583a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8015812:	683b      	ldr	r3, [r7, #0]
 8015814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015818:	4293      	cmp	r3, r2
 801581a:	d10e      	bne.n	801583a <_Z41__static_initialization_and_destruction_0ii+0x72>
 801581c:	480c      	ldr	r0, [pc, #48]	; (8015850 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801581e:	f7ff f9f5 	bl	8014c0c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8015822:	480c      	ldr	r0, [pc, #48]	; (8015854 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8015824:	f7fb ff04 	bl	8011630 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8015828:	4808      	ldr	r0, [pc, #32]	; (801584c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801582a:	f7ff ffab 	bl	8015784 <_ZN8touchgfx8LCD16bppD1Ev>
static NoDMA dma;
 801582e:	4806      	ldr	r0, [pc, #24]	; (8015848 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8015830:	f7ff fede 	bl	80155f0 <_ZN8touchgfx5NoDMAD1Ev>
static STM32TouchController tc;
 8015834:	4803      	ldr	r0, [pc, #12]	; (8015844 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8015836:	f7fe ffd5 	bl	80147e4 <_ZN20STM32TouchControllerD1Ev>
}
 801583a:	bf00      	nop
 801583c:	3708      	adds	r7, #8
 801583e:	46bd      	mov	sp, r7
 8015840:	bd80      	pop	{r7, pc}
 8015842:	bf00      	nop
 8015844:	20005694 	.word	0x20005694
 8015848:	20005698 	.word	0x20005698
 801584c:	200056d8 	.word	0x200056d8
 8015850:	20005754 	.word	0x20005754
 8015854:	20000170 	.word	0x20000170

08015858 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8015858:	b480      	push	{r7}
 801585a:	b083      	sub	sp, #12
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8015860:	2301      	movs	r3, #1
    }
 8015862:	4618      	mov	r0, r3
 8015864:	370c      	adds	r7, #12
 8015866:	46bd      	mov	sp, r7
 8015868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586c:	4770      	bx	lr

0801586e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 801586e:	b480      	push	{r7}
 8015870:	b083      	sub	sp, #12
 8015872:	af00      	add	r7, sp, #0
 8015874:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8015876:	2354      	movs	r3, #84	; 0x54
    }
 8015878:	4618      	mov	r0, r3
 801587a:	370c      	adds	r7, #12
 801587c:	46bd      	mov	sp, r7
 801587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015882:	4770      	bx	lr

08015884 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8015884:	b480      	push	{r7}
 8015886:	b083      	sub	sp, #12
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
 801588c:	460b      	mov	r3, r1
 801588e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8015890:	887b      	ldrh	r3, [r7, #2]
 8015892:	2254      	movs	r2, #84	; 0x54
 8015894:	fb02 f303 	mul.w	r3, r2, r3
 8015898:	3308      	adds	r3, #8
 801589a:	687a      	ldr	r2, [r7, #4]
 801589c:	4413      	add	r3, r2
    }
 801589e:	4618      	mov	r0, r3
 80158a0:	370c      	adds	r7, #12
 80158a2:	46bd      	mov	sp, r7
 80158a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a8:	4770      	bx	lr

080158aa <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80158aa:	b480      	push	{r7}
 80158ac:	b083      	sub	sp, #12
 80158ae:	af00      	add	r7, sp, #0
 80158b0:	6078      	str	r0, [r7, #4]
 80158b2:	460b      	mov	r3, r1
 80158b4:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80158b6:	887b      	ldrh	r3, [r7, #2]
 80158b8:	2254      	movs	r2, #84	; 0x54
 80158ba:	fb02 f303 	mul.w	r3, r2, r3
 80158be:	3308      	adds	r3, #8
 80158c0:	687a      	ldr	r2, [r7, #4]
 80158c2:	4413      	add	r3, r2
    }
 80158c4:	4618      	mov	r0, r3
 80158c6:	370c      	adds	r7, #12
 80158c8:	46bd      	mov	sp, r7
 80158ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ce:	4770      	bx	lr

080158d0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80158d0:	b480      	push	{r7}
 80158d2:	b083      	sub	sp, #12
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80158d8:	2301      	movs	r3, #1
    }
 80158da:	4618      	mov	r0, r3
 80158dc:	370c      	adds	r7, #12
 80158de:	46bd      	mov	sp, r7
 80158e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e4:	4770      	bx	lr

080158e6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80158e6:	b480      	push	{r7}
 80158e8:	b083      	sub	sp, #12
 80158ea:	af00      	add	r7, sp, #0
 80158ec:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80158ee:	f44f 73de 	mov.w	r3, #444	; 0x1bc
    }
 80158f2:	4618      	mov	r0, r3
 80158f4:	370c      	adds	r7, #12
 80158f6:	46bd      	mov	sp, r7
 80158f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fc:	4770      	bx	lr

080158fe <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80158fe:	b480      	push	{r7}
 8015900:	b083      	sub	sp, #12
 8015902:	af00      	add	r7, sp, #0
 8015904:	6078      	str	r0, [r7, #4]
 8015906:	460b      	mov	r3, r1
 8015908:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801590a:	887b      	ldrh	r3, [r7, #2]
 801590c:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8015910:	fb02 f303 	mul.w	r3, r2, r3
 8015914:	3308      	adds	r3, #8
 8015916:	687a      	ldr	r2, [r7, #4]
 8015918:	4413      	add	r3, r2
    }
 801591a:	4618      	mov	r0, r3
 801591c:	370c      	adds	r7, #12
 801591e:	46bd      	mov	sp, r7
 8015920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015924:	4770      	bx	lr

08015926 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8015926:	b480      	push	{r7}
 8015928:	b083      	sub	sp, #12
 801592a:	af00      	add	r7, sp, #0
 801592c:	6078      	str	r0, [r7, #4]
 801592e:	460b      	mov	r3, r1
 8015930:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015932:	887b      	ldrh	r3, [r7, #2]
 8015934:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8015938:	fb02 f303 	mul.w	r3, r2, r3
 801593c:	3308      	adds	r3, #8
 801593e:	687a      	ldr	r2, [r7, #4]
 8015940:	4413      	add	r3, r2
    }
 8015942:	4618      	mov	r0, r3
 8015944:	370c      	adds	r7, #12
 8015946:	46bd      	mov	sp, r7
 8015948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594c:	4770      	bx	lr

0801594e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801594e:	b480      	push	{r7}
 8015950:	b083      	sub	sp, #12
 8015952:	af00      	add	r7, sp, #0
 8015954:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015956:	2301      	movs	r3, #1
    }
 8015958:	4618      	mov	r0, r3
 801595a:	370c      	adds	r7, #12
 801595c:	46bd      	mov	sp, r7
 801595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015962:	4770      	bx	lr

08015964 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8015964:	b480      	push	{r7}
 8015966:	b083      	sub	sp, #12
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801596c:	2310      	movs	r3, #16
    }
 801596e:	4618      	mov	r0, r3
 8015970:	370c      	adds	r7, #12
 8015972:	46bd      	mov	sp, r7
 8015974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015978:	4770      	bx	lr

0801597a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801597a:	b480      	push	{r7}
 801597c:	b083      	sub	sp, #12
 801597e:	af00      	add	r7, sp, #0
 8015980:	6078      	str	r0, [r7, #4]
 8015982:	460b      	mov	r3, r1
 8015984:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015986:	887b      	ldrh	r3, [r7, #2]
 8015988:	011b      	lsls	r3, r3, #4
 801598a:	3308      	adds	r3, #8
 801598c:	687a      	ldr	r2, [r7, #4]
 801598e:	4413      	add	r3, r2
    }
 8015990:	4618      	mov	r0, r3
 8015992:	370c      	adds	r7, #12
 8015994:	46bd      	mov	sp, r7
 8015996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801599a:	4770      	bx	lr

0801599c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801599c:	b480      	push	{r7}
 801599e:	b083      	sub	sp, #12
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
 80159a4:	460b      	mov	r3, r1
 80159a6:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80159a8:	887b      	ldrh	r3, [r7, #2]
 80159aa:	011b      	lsls	r3, r3, #4
 80159ac:	3308      	adds	r3, #8
 80159ae:	687a      	ldr	r2, [r7, #4]
 80159b0:	4413      	add	r3, r2
    }
 80159b2:	4618      	mov	r0, r3
 80159b4:	370c      	adds	r7, #12
 80159b6:	46bd      	mov	sp, r7
 80159b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159bc:	4770      	bx	lr

080159be <_GLOBAL__sub_I_touchgfx_init>:
 80159be:	b580      	push	{r7, lr}
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80159c6:	2001      	movs	r0, #1
 80159c8:	f7ff fefe 	bl	80157c8 <_Z41__static_initialization_and_destruction_0ii>
 80159cc:	bd80      	pop	{r7, pc}

080159ce <_GLOBAL__sub_D_touchgfx_init>:
 80159ce:	b580      	push	{r7, lr}
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80159d6:	2000      	movs	r0, #0
 80159d8:	f7ff fef6 	bl	80157c8 <_Z41__static_initialization_and_destruction_0ii>
 80159dc:	bd80      	pop	{r7, pc}

080159de <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80159de:	b580      	push	{r7, lr}
 80159e0:	b082      	sub	sp, #8
 80159e2:	af00      	add	r7, sp, #0
 80159e4:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	3318      	adds	r3, #24
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	6878      	ldr	r0, [r7, #4]
 80159f0:	4798      	blx	r3
    }
 80159f2:	bf00      	nop
 80159f4:	3708      	adds	r7, #8
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd80      	pop	{r7, pc}

080159fa <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 80159fa:	b480      	push	{r7}
 80159fc:	b083      	sub	sp, #12
 80159fe:	af00      	add	r7, sp, #0
 8015a00:	6078      	str	r0, [r7, #4]
 8015a02:	460b      	mov	r3, r1
 8015a04:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	78fa      	ldrb	r2, [r7, #3]
 8015a0a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8015a0e:	bf00      	nop
 8015a10:	370c      	adds	r7, #12
 8015a12:	46bd      	mov	sp, r7
 8015a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a18:	4770      	bx	lr

08015a1a <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8015a1a:	b480      	push	{r7}
 8015a1c:	b083      	sub	sp, #12
 8015a1e:	af00      	add	r7, sp, #0
 8015a20:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8015a28:	3301      	adds	r3, #1
 8015a2a:	b2da      	uxtb	r2, r3
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8015a32:	bf00      	nop
 8015a34:	370c      	adds	r7, #12
 8015a36:	46bd      	mov	sp, r7
 8015a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3c:	4770      	bx	lr
	...

08015a40 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b082      	sub	sp, #8
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
 8015a48:	460b      	mov	r3, r1
 8015a4a:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8015a4c:	78fb      	ldrb	r3, [r7, #3]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d002      	beq.n	8015a58 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8015a52:	78fb      	ldrb	r3, [r7, #3]
 8015a54:	2b02      	cmp	r3, #2
 8015a56:	d105      	bne.n	8015a64 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	78fa      	ldrb	r2, [r7, #3]
 8015a5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8015a60:	2301      	movs	r3, #1
 8015a62:	e027      	b.n	8015ab4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8015a64:	78fb      	ldrb	r3, [r7, #3]
 8015a66:	2b01      	cmp	r3, #1
 8015a68:	d123      	bne.n	8015ab2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d014      	beq.n	8015a9c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	3380      	adds	r3, #128	; 0x80
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	6878      	ldr	r0, [r7, #4]
 8015a7c:	4798      	blx	r3
 8015a7e:	4603      	mov	r3, r0
 8015a80:	461a      	mov	r2, r3
 8015a82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015a86:	429a      	cmp	r2, r3
 8015a88:	d008      	beq.n	8015a9c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8015a8a:	4b0c      	ldr	r3, [pc, #48]	; (8015abc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8015a8c:	781b      	ldrb	r3, [r3, #0]
 8015a8e:	f083 0301 	eor.w	r3, r3, #1
 8015a92:	b2db      	uxtb	r3, r3
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d001      	beq.n	8015a9c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8015a98:	2301      	movs	r3, #1
 8015a9a:	e000      	b.n	8015a9e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d005      	beq.n	8015aae <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	78fa      	ldrb	r2, [r7, #3]
 8015aa6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8015aaa:	2301      	movs	r3, #1
 8015aac:	e002      	b.n	8015ab4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8015aae:	2300      	movs	r3, #0
 8015ab0:	e000      	b.n	8015ab4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8015ab2:	2300      	movs	r3, #0
    }
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	3708      	adds	r7, #8
 8015ab8:	46bd      	mov	sp, r7
 8015aba:	bd80      	pop	{r7, pc}
 8015abc:	200057de 	.word	0x200057de

08015ac0 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8015ac0:	b480      	push	{r7}
 8015ac2:	b083      	sub	sp, #12
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
 8015ac8:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	683a      	ldr	r2, [r7, #0]
 8015ace:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8015ad0:	bf00      	nop
 8015ad2:	370c      	adds	r7, #12
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ada:	4770      	bx	lr

08015adc <__NVIC_EnableIRQ>:
{
 8015adc:	b480      	push	{r7}
 8015ade:	b083      	sub	sp, #12
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	db0b      	blt.n	8015b06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015aee:	88fb      	ldrh	r3, [r7, #6]
 8015af0:	f003 021f 	and.w	r2, r3, #31
 8015af4:	4907      	ldr	r1, [pc, #28]	; (8015b14 <__NVIC_EnableIRQ+0x38>)
 8015af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015afa:	095b      	lsrs	r3, r3, #5
 8015afc:	2001      	movs	r0, #1
 8015afe:	fa00 f202 	lsl.w	r2, r0, r2
 8015b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015b06:	bf00      	nop
 8015b08:	370c      	adds	r7, #12
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b10:	4770      	bx	lr
 8015b12:	bf00      	nop
 8015b14:	e000e100 	.word	0xe000e100

08015b18 <__NVIC_DisableIRQ>:
{
 8015b18:	b480      	push	{r7}
 8015b1a:	b083      	sub	sp, #12
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	4603      	mov	r3, r0
 8015b20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	db12      	blt.n	8015b50 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015b2a:	88fb      	ldrh	r3, [r7, #6]
 8015b2c:	f003 021f 	and.w	r2, r3, #31
 8015b30:	490a      	ldr	r1, [pc, #40]	; (8015b5c <__NVIC_DisableIRQ+0x44>)
 8015b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b36:	095b      	lsrs	r3, r3, #5
 8015b38:	2001      	movs	r0, #1
 8015b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8015b3e:	3320      	adds	r3, #32
 8015b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8015b44:	f3bf 8f4f 	dsb	sy
}
 8015b48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015b4a:	f3bf 8f6f 	isb	sy
}
 8015b4e:	bf00      	nop
}
 8015b50:	bf00      	nop
 8015b52:	370c      	adds	r7, #12
 8015b54:	46bd      	mov	sp, r7
 8015b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5a:	4770      	bx	lr
 8015b5c:	e000e100 	.word	0xe000e100

08015b60 <__NVIC_SetPriority>:
{
 8015b60:	b480      	push	{r7}
 8015b62:	b083      	sub	sp, #12
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	4603      	mov	r3, r0
 8015b68:	6039      	str	r1, [r7, #0]
 8015b6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8015b6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	db0a      	blt.n	8015b8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015b74:	683b      	ldr	r3, [r7, #0]
 8015b76:	b2da      	uxtb	r2, r3
 8015b78:	490c      	ldr	r1, [pc, #48]	; (8015bac <__NVIC_SetPriority+0x4c>)
 8015b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015b7e:	0112      	lsls	r2, r2, #4
 8015b80:	b2d2      	uxtb	r2, r2
 8015b82:	440b      	add	r3, r1
 8015b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015b88:	e00a      	b.n	8015ba0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015b8a:	683b      	ldr	r3, [r7, #0]
 8015b8c:	b2da      	uxtb	r2, r3
 8015b8e:	4908      	ldr	r1, [pc, #32]	; (8015bb0 <__NVIC_SetPriority+0x50>)
 8015b90:	88fb      	ldrh	r3, [r7, #6]
 8015b92:	f003 030f 	and.w	r3, r3, #15
 8015b96:	3b04      	subs	r3, #4
 8015b98:	0112      	lsls	r2, r2, #4
 8015b9a:	b2d2      	uxtb	r2, r2
 8015b9c:	440b      	add	r3, r1
 8015b9e:	761a      	strb	r2, [r3, #24]
}
 8015ba0:	bf00      	nop
 8015ba2:	370c      	adds	r7, #12
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015baa:	4770      	bx	lr
 8015bac:	e000e100 	.word	0xe000e100
 8015bb0:	e000ed00 	.word	0xe000ed00

08015bb4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8015bb4:	b5b0      	push	{r4, r5, r7, lr}
 8015bb6:	b082      	sub	sp, #8
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f001 fb48 	bl	8017254 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(Application::getInstance()));
 8015bc4:	687d      	ldr	r5, [r7, #4]
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	334c      	adds	r3, #76	; 0x4c
 8015bcc:	681c      	ldr	r4, [r3, #0]
 8015bce:	f004 f981 	bl	8019ed4 <_ZN8touchgfx11Application11getInstanceEv>
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	4619      	mov	r1, r3
 8015bd6:	4628      	mov	r0, r5
 8015bd8:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	490d      	ldr	r1, [pc, #52]	; (8015c14 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8015bde:	4618      	mov	r0, r3
 8015be0:	f7ff ff6e 	bl	8015ac0 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	2101      	movs	r1, #1
 8015be8:	4618      	mov	r0, r3
 8015bea:	f7ff ff29 	bl	8015a40 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 8015bee:	6878      	ldr	r0, [r7, #4]
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	3370      	adds	r3, #112	; 0x70
 8015bf6:	681c      	ldr	r4, [r3, #0]
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8015c00:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	2101      	movs	r1, #1
 8015c06:	4618      	mov	r0, r3
 8015c08:	f7ff fef7 	bl	80159fa <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8015c0c:	bf00      	nop
 8015c0e:	3708      	adds	r7, #8
 8015c10:	46bd      	mov	sp, r7
 8015c12:	bdb0      	pop	{r4, r5, r7, pc}
 8015c14:	08014d6d 	.word	0x08014d6d

08015c18 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b082      	sub	sp, #8
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(LTDC_IRQn, 9);
 8015c20:	2109      	movs	r1, #9
 8015c22:	2058      	movs	r0, #88	; 0x58
 8015c24:	f7ff ff9c 	bl	8015b60 <__NVIC_SetPriority>
}
 8015c28:	bf00      	nop
 8015c2a:	3708      	adds	r7, #8
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	bd80      	pop	{r7, pc}

08015c30 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8015c30:	b580      	push	{r7, lr}
 8015c32:	b082      	sub	sp, #8
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(LTDC_IRQn);
 8015c38:	2058      	movs	r0, #88	; 0x58
 8015c3a:	f7ff ff4f 	bl	8015adc <__NVIC_EnableIRQ>
}
 8015c3e:	bf00      	nop
 8015c40:	3708      	adds	r7, #8
 8015c42:	46bd      	mov	sp, r7
 8015c44:	bd80      	pop	{r7, pc}

08015c46 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8015c46:	b580      	push	{r7, lr}
 8015c48:	b082      	sub	sp, #8
 8015c4a:	af00      	add	r7, sp, #0
 8015c4c:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(LTDC_IRQn);
 8015c4e:	2058      	movs	r0, #88	; 0x58
 8015c50:	f7ff ff62 	bl	8015b18 <__NVIC_DisableIRQ>
}
 8015c54:	bf00      	nop
 8015c56:	3708      	adds	r7, #8
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	bd80      	pop	{r7, pc}

08015c5c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8015c5c:	b480      	push	{r7}
 8015c5e:	b083      	sub	sp, #12
 8015c60:	af00      	add	r7, sp, #0
 8015c62:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8015c64:	4b11      	ldr	r3, [pc, #68]	; (8015cac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015c66:	68db      	ldr	r3, [r3, #12]
 8015c68:	b29b      	uxth	r3, r3
 8015c6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015c6e:	b29b      	uxth	r3, r3
 8015c70:	3b01      	subs	r3, #1
 8015c72:	b29a      	uxth	r2, r3
 8015c74:	4b0e      	ldr	r3, [pc, #56]	; (8015cb0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8015c76:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8015c78:	4b0c      	ldr	r3, [pc, #48]	; (8015cac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015c7a:	691b      	ldr	r3, [r3, #16]
 8015c7c:	b29b      	uxth	r3, r3
 8015c7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015c82:	b29b      	uxth	r3, r3
 8015c84:	3b01      	subs	r3, #1
 8015c86:	b29a      	uxth	r2, r3
 8015c88:	4b0a      	ldr	r3, [pc, #40]	; (8015cb4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8015c8a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8015c8c:	4b08      	ldr	r3, [pc, #32]	; (8015cb0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8015c8e:	881a      	ldrh	r2, [r3, #0]
 8015c90:	4b06      	ldr	r3, [pc, #24]	; (8015cac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015c92:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8015c94:	4b05      	ldr	r3, [pc, #20]	; (8015cac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c98:	4a04      	ldr	r2, [pc, #16]	; (8015cac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015c9a:	f043 0301 	orr.w	r3, r3, #1
 8015c9e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8015ca0:	bf00      	nop
 8015ca2:	370c      	adds	r7, #12
 8015ca4:	46bd      	mov	sp, r7
 8015ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015caa:	4770      	bx	lr
 8015cac:	50001000 	.word	0x50001000
 8015cb0:	200057d0 	.word	0x200057d0
 8015cb4:	200057d2 	.word	0x200057d2

08015cb8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8015cb8:	b480      	push	{r7}
 8015cba:	b083      	sub	sp, #12
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8015cc0:	4b03      	ldr	r3, [pc, #12]	; (8015cd0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8015cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	370c      	adds	r7, #12
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cce:	4770      	bx	lr
 8015cd0:	50001084 	.word	0x50001084

08015cd4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8015cd4:	b480      	push	{r7}
 8015cd6:	b083      	sub	sp, #12
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	6078      	str	r0, [r7, #4]
 8015cdc:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8015cde:	4a06      	ldr	r2, [pc, #24]	; (8015cf8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8015ce0:	683b      	ldr	r3, [r7, #0]
 8015ce2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8015ce4:	4b05      	ldr	r3, [pc, #20]	; (8015cfc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8015ce6:	2201      	movs	r2, #1
 8015ce8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015cea:	bf00      	nop
 8015cec:	370c      	adds	r7, #12
 8015cee:	46bd      	mov	sp, r7
 8015cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf4:	4770      	bx	lr
 8015cf6:	bf00      	nop
 8015cf8:	50001084 	.word	0x50001084
 8015cfc:	50001000 	.word	0x50001000

08015d00 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b086      	sub	sp, #24
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
 8015d08:	6039      	str	r1, [r7, #0]
  HAL::flushFrameBuffer(rect);
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	6839      	ldr	r1, [r7, #0]
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f000 ffb5 	bl	8016c7e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8015d14:	4b20      	ldr	r3, [pc, #128]	; (8015d98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8015d16:	2200      	movs	r2, #0
 8015d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8015d1c:	f3bf 8f4f 	dsb	sy
}
 8015d20:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8015d22:	4b1d      	ldr	r3, [pc, #116]	; (8015d98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8015d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015d28:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8015d2a:	697b      	ldr	r3, [r7, #20]
 8015d2c:	0b5b      	lsrs	r3, r3, #13
 8015d2e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8015d32:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8015d34:	697b      	ldr	r3, [r7, #20]
 8015d36:	08db      	lsrs	r3, r3, #3
 8015d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015d3c:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8015d3e:	693b      	ldr	r3, [r7, #16]
 8015d40:	015a      	lsls	r2, r3, #5
 8015d42:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8015d46:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8015d48:	68fa      	ldr	r2, [r7, #12]
 8015d4a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8015d4c:	4912      	ldr	r1, [pc, #72]	; (8015d98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8015d4e:	4313      	orrs	r3, r2
 8015d50:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	1e5a      	subs	r2, r3, #1
 8015d58:	60fa      	str	r2, [r7, #12]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	bf14      	ite	ne
 8015d5e:	2301      	movne	r3, #1
 8015d60:	2300      	moveq	r3, #0
 8015d62:	b2db      	uxtb	r3, r3
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d000      	beq.n	8015d6a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x6a>
      do {
 8015d68:	e7e9      	b.n	8015d3e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 8015d6a:	693b      	ldr	r3, [r7, #16]
 8015d6c:	1e5a      	subs	r2, r3, #1
 8015d6e:	613a      	str	r2, [r7, #16]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	bf14      	ite	ne
 8015d74:	2301      	movne	r3, #1
 8015d76:	2300      	moveq	r3, #0
 8015d78:	b2db      	uxtb	r3, r3
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d000      	beq.n	8015d80 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
    do {
 8015d7e:	e7d9      	b.n	8015d34 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8015d80:	f3bf 8f4f 	dsb	sy
}
 8015d84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015d86:	f3bf 8f6f 	isb	sy
}
 8015d8a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8015d8c:	bf00      	nop
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
}
 8015d8e:	bf00      	nop
 8015d90:	3718      	adds	r7, #24
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd80      	pop	{r7, pc}
 8015d96:	bf00      	nop
 8015d98:	e000ed00 	.word	0xe000ed00

08015d9c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b084      	sub	sp, #16
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	60f8      	str	r0, [r7, #12]
 8015da4:	60b9      	str	r1, [r7, #8]
 8015da6:	607a      	str	r2, [r7, #4]
 8015da8:	603b      	str	r3, [r7, #0]
  return HAL::blockCopy(dest, src, numBytes);
 8015daa:	68f8      	ldr	r0, [r7, #12]
 8015dac:	683b      	ldr	r3, [r7, #0]
 8015dae:	687a      	ldr	r2, [r7, #4]
 8015db0:	68b9      	ldr	r1, [r7, #8]
 8015db2:	f001 f898 	bl	8016ee6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8015db6:	4603      	mov	r3, r0
}
 8015db8:	4618      	mov	r0, r3
 8015dba:	3710      	adds	r7, #16
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	bd80      	pop	{r7, pc}

08015dc0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8015dc0:	b480      	push	{r7}
 8015dc2:	b085      	sub	sp, #20
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8015dc8:	4b0d      	ldr	r3, [pc, #52]	; (8015e00 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8015dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015dcc:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8015dce:	4b0c      	ldr	r3, [pc, #48]	; (8015e00 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8015dd0:	68db      	ldr	r3, [r3, #12]
 8015dd2:	b29b      	uxth	r3, r3
 8015dd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015dd8:	b29b      	uxth	r3, r3
 8015dda:	3301      	adds	r3, #1
 8015ddc:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8015dde:	89fa      	ldrh	r2, [r7, #14]
 8015de0:	89bb      	ldrh	r3, [r7, #12]
 8015de2:	429a      	cmp	r2, r3
 8015de4:	d304      	bcc.n	8015df0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8015de6:	89fa      	ldrh	r2, [r7, #14]
 8015de8:	89bb      	ldrh	r3, [r7, #12]
 8015dea:	1ad3      	subs	r3, r2, r3
 8015dec:	b29b      	uxth	r3, r3
 8015dee:	e000      	b.n	8015df2 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8015df0:	2300      	movs	r3, #0
}
 8015df2:	4618      	mov	r0, r3
 8015df4:	3714      	adds	r7, #20
 8015df6:	46bd      	mov	sp, r7
 8015df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dfc:	4770      	bx	lr
 8015dfe:	bf00      	nop
 8015e00:	50001000 	.word	0x50001000

08015e04 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8015e04:	b480      	push	{r7}
 8015e06:	b087      	sub	sp, #28
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	6078      	str	r0, [r7, #4]
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8015e0c:	4b21      	ldr	r3, [pc, #132]	; (8015e94 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x90>)
 8015e0e:	2200      	movs	r2, #0
 8015e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8015e14:	f3bf 8f4f 	dsb	sy
}
 8015e18:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8015e1a:	4b1e      	ldr	r3, [pc, #120]	; (8015e94 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x90>)
 8015e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015e20:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8015e22:	697b      	ldr	r3, [r7, #20]
 8015e24:	0b5b      	lsrs	r3, r3, #13
 8015e26:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8015e2a:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8015e2c:	697b      	ldr	r3, [r7, #20]
 8015e2e:	08db      	lsrs	r3, r3, #3
 8015e30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015e34:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8015e36:	693b      	ldr	r3, [r7, #16]
 8015e38:	015a      	lsls	r2, r3, #5
 8015e3a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8015e3e:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8015e40:	68fa      	ldr	r2, [r7, #12]
 8015e42:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8015e44:	4913      	ldr	r1, [pc, #76]	; (8015e94 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x90>)
 8015e46:	4313      	orrs	r3, r2
 8015e48:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	1e5a      	subs	r2, r3, #1
 8015e50:	60fa      	str	r2, [r7, #12]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	bf14      	ite	ne
 8015e56:	2301      	movne	r3, #1
 8015e58:	2300      	moveq	r3, #0
 8015e5a:	b2db      	uxtb	r3, r3
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d000      	beq.n	8015e62 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x5e>
      do {
 8015e60:	e7e9      	b.n	8015e36 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x32>
    } while(sets-- != 0U);
 8015e62:	693b      	ldr	r3, [r7, #16]
 8015e64:	1e5a      	subs	r2, r3, #1
 8015e66:	613a      	str	r2, [r7, #16]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	bf14      	ite	ne
 8015e6c:	2301      	movne	r3, #1
 8015e6e:	2300      	moveq	r3, #0
 8015e70:	b2db      	uxtb	r3, r3
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d000      	beq.n	8015e78 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
    do {
 8015e76:	e7d9      	b.n	8015e2c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x28>
  __ASM volatile ("dsb 0xF":::"memory");
 8015e78:	f3bf 8f4f 	dsb	sy
}
 8015e7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015e7e:	f3bf 8f6f 	isb	sy
}
 8015e82:	bf00      	nop
}
 8015e84:	bf00      	nop
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
}
 8015e86:	bf00      	nop
 8015e88:	371c      	adds	r7, #28
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e90:	4770      	bx	lr
 8015e92:	bf00      	nop
 8015e94:	e000ed00 	.word	0xe000ed00

08015e98 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8015e98:	b480      	push	{r7}
 8015e9a:	b087      	sub	sp, #28
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8015ea0:	4b21      	ldr	r3, [pc, #132]	; (8015f28 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x90>)
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8015ea8:	f3bf 8f4f 	dsb	sy
}
 8015eac:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8015eae:	4b1e      	ldr	r3, [pc, #120]	; (8015f28 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x90>)
 8015eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015eb4:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8015eb6:	697b      	ldr	r3, [r7, #20]
 8015eb8:	0b5b      	lsrs	r3, r3, #13
 8015eba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8015ebe:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8015ec0:	697b      	ldr	r3, [r7, #20]
 8015ec2:	08db      	lsrs	r3, r3, #3
 8015ec4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015ec8:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8015eca:	693b      	ldr	r3, [r7, #16]
 8015ecc:	015a      	lsls	r2, r3, #5
 8015ece:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8015ed2:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8015ed4:	68fa      	ldr	r2, [r7, #12]
 8015ed6:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8015ed8:	4913      	ldr	r1, [pc, #76]	; (8015f28 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x90>)
 8015eda:	4313      	orrs	r3, r2
 8015edc:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	1e5a      	subs	r2, r3, #1
 8015ee4:	60fa      	str	r2, [r7, #12]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	bf14      	ite	ne
 8015eea:	2301      	movne	r3, #1
 8015eec:	2300      	moveq	r3, #0
 8015eee:	b2db      	uxtb	r3, r3
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d000      	beq.n	8015ef6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x5e>
      do {
 8015ef4:	e7e9      	b.n	8015eca <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x32>
    } while(sets-- != 0U);
 8015ef6:	693b      	ldr	r3, [r7, #16]
 8015ef8:	1e5a      	subs	r2, r3, #1
 8015efa:	613a      	str	r2, [r7, #16]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	bf14      	ite	ne
 8015f00:	2301      	movne	r3, #1
 8015f02:	2300      	moveq	r3, #0
 8015f04:	b2db      	uxtb	r3, r3
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d000      	beq.n	8015f0c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
    do {
 8015f0a:	e7d9      	b.n	8015ec0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
  __ASM volatile ("dsb 0xF":::"memory");
 8015f0c:	f3bf 8f4f 	dsb	sy
}
 8015f10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015f12:	f3bf 8f6f 	isb	sy
}
 8015f16:	bf00      	nop
}
 8015f18:	bf00      	nop
// If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
// to flush the Dcache prior to letting DMA2D accessing it. That's done
// using SCB_CleanInvalidateDCache().
SCB_CleanInvalidateDCache();
}
 8015f1a:	bf00      	nop
 8015f1c:	371c      	adds	r7, #28
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f24:	4770      	bx	lr
 8015f26:	bf00      	nop
 8015f28:	e000ed00 	.word	0xe000ed00

08015f2c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b082      	sub	sp, #8
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8015f34:	4b1a      	ldr	r3, [pc, #104]	; (8015fa0 <HAL_LTDC_LineEventCallback+0x74>)
 8015f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f38:	4a1a      	ldr	r2, [pc, #104]	; (8015fa4 <HAL_LTDC_LineEventCallback+0x78>)
 8015f3a:	8812      	ldrh	r2, [r2, #0]
 8015f3c:	4293      	cmp	r3, r2
 8015f3e:	bf0c      	ite	eq
 8015f40:	2301      	moveq	r3, #1
 8015f42:	2300      	movne	r3, #0
 8015f44:	b2db      	uxtb	r3, r3
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d017      	beq.n	8015f7a <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8015f4a:	4b17      	ldr	r3, [pc, #92]	; (8015fa8 <HAL_LTDC_LineEventCallback+0x7c>)
 8015f4c:	881b      	ldrh	r3, [r3, #0]
 8015f4e:	4619      	mov	r1, r3
 8015f50:	6878      	ldr	r0, [r7, #4]
 8015f52:	f7f1 fb59 	bl	8007608 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8015f56:	f7fc f83d 	bl	8011fd4 <_ZN8touchgfx3HAL11getInstanceEv>
 8015f5a:	4603      	mov	r3, r0
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	f7ff fd5c 	bl	8015a1a <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8015f62:	f7fe fedb 	bl	8014d1c <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8015f66:	f7fc f835 	bl	8011fd4 <_ZN8touchgfx3HAL11getInstanceEv>
 8015f6a:	4603      	mov	r3, r0
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	f001 fbf9 	bl	8017764 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8015f72:	2000      	movs	r0, #0
 8015f74:	f7fe fc58 	bl	8014828 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8015f78:	e00e      	b.n	8015f98 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8015f7a:	4b0a      	ldr	r3, [pc, #40]	; (8015fa4 <HAL_LTDC_LineEventCallback+0x78>)
 8015f7c:	881b      	ldrh	r3, [r3, #0]
 8015f7e:	4619      	mov	r1, r3
 8015f80:	6878      	ldr	r0, [r7, #4]
 8015f82:	f7f1 fb41 	bl	8007608 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8015f86:	2000      	movs	r0, #0
 8015f88:	f7fe fc59 	bl	801483e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8015f8c:	f7fc f822 	bl	8011fd4 <_ZN8touchgfx3HAL11getInstanceEv>
 8015f90:	4603      	mov	r3, r0
 8015f92:	4618      	mov	r0, r3
 8015f94:	f7ff fd23 	bl	80159de <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8015f98:	bf00      	nop
 8015f9a:	3708      	adds	r7, #8
 8015f9c:	46bd      	mov	sp, r7
 8015f9e:	bd80      	pop	{r7, pc}
 8015fa0:	50001000 	.word	0x50001000
 8015fa4:	200057d0 	.word	0x200057d0
 8015fa8:	200057d2 	.word	0x200057d2

08015fac <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8015fac:	8880      	ldrh	r0, [r0, #4]
 8015fae:	4770      	bx	lr

08015fb0 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8015fb0:	2300      	movs	r3, #0
 8015fb2:	8083      	strh	r3, [r0, #4]
 8015fb4:	4770      	bx	lr
	...

08015fb8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8015fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fba:	6803      	ldr	r3, [r0, #0]
 8015fbc:	460e      	mov	r6, r1
 8015fbe:	2100      	movs	r1, #0
 8015fc0:	4605      	mov	r5, r0
 8015fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fc4:	4798      	blx	r3
 8015fc6:	4604      	mov	r4, r0
 8015fc8:	682b      	ldr	r3, [r5, #0]
 8015fca:	4628      	mov	r0, r5
 8015fcc:	1b34      	subs	r4, r6, r4
 8015fce:	6a1b      	ldr	r3, [r3, #32]
 8015fd0:	b2a4      	uxth	r4, r4
 8015fd2:	4798      	blx	r3
 8015fd4:	88ab      	ldrh	r3, [r5, #4]
 8015fd6:	fbb4 f4f0 	udiv	r4, r4, r0
 8015fda:	42a3      	cmp	r3, r4
 8015fdc:	d805      	bhi.n	8015fea <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8015fde:	4b0e      	ldr	r3, [pc, #56]	; (8016018 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8015fe0:	2120      	movs	r1, #32
 8015fe2:	4a0e      	ldr	r2, [pc, #56]	; (801601c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8015fe4:	480e      	ldr	r0, [pc, #56]	; (8016020 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8015fe6:	f012 fb57 	bl	8028698 <__assert_func>
 8015fea:	682b      	ldr	r3, [r5, #0]
 8015fec:	2100      	movs	r1, #0
 8015fee:	4628      	mov	r0, r5
 8015ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ff2:	4798      	blx	r3
 8015ff4:	682b      	ldr	r3, [r5, #0]
 8015ff6:	4607      	mov	r7, r0
 8015ff8:	4628      	mov	r0, r5
 8015ffa:	6a1b      	ldr	r3, [r3, #32]
 8015ffc:	4798      	blx	r3
 8015ffe:	1bf3      	subs	r3, r6, r7
 8016000:	b29b      	uxth	r3, r3
 8016002:	fbb3 f2f0 	udiv	r2, r3, r0
 8016006:	fb02 3010 	mls	r0, r2, r0, r3
 801600a:	b118      	cbz	r0, 8016014 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 801600c:	4b05      	ldr	r3, [pc, #20]	; (8016024 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801600e:	2121      	movs	r1, #33	; 0x21
 8016010:	4a02      	ldr	r2, [pc, #8]	; (801601c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016012:	e7e7      	b.n	8015fe4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8016014:	4620      	mov	r0, r4
 8016016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016018:	0802ad1c 	.word	0x0802ad1c
 801601c:	0802ae8a 	.word	0x0802ae8a
 8016020:	0802ad31 	.word	0x0802ad31
 8016024:	0802ad5f 	.word	0x0802ad5f

08016028 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016028:	b538      	push	{r3, r4, r5, lr}
 801602a:	6803      	ldr	r3, [r0, #0]
 801602c:	460d      	mov	r5, r1
 801602e:	4604      	mov	r4, r0
 8016030:	6a1b      	ldr	r3, [r3, #32]
 8016032:	4798      	blx	r3
 8016034:	4285      	cmp	r5, r0
 8016036:	d905      	bls.n	8016044 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8016038:	4b0c      	ldr	r3, [pc, #48]	; (801606c <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801603a:	2132      	movs	r1, #50	; 0x32
 801603c:	4a0c      	ldr	r2, [pc, #48]	; (8016070 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801603e:	480d      	ldr	r0, [pc, #52]	; (8016074 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8016040:	f012 fb2a 	bl	8028698 <__assert_func>
 8016044:	6823      	ldr	r3, [r4, #0]
 8016046:	4620      	mov	r0, r4
 8016048:	88a5      	ldrh	r5, [r4, #4]
 801604a:	69db      	ldr	r3, [r3, #28]
 801604c:	4798      	blx	r3
 801604e:	4285      	cmp	r5, r0
 8016050:	d303      	bcc.n	801605a <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8016052:	4b09      	ldr	r3, [pc, #36]	; (8016078 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8016054:	2133      	movs	r1, #51	; 0x33
 8016056:	4a06      	ldr	r2, [pc, #24]	; (8016070 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016058:	e7f1      	b.n	801603e <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801605a:	6823      	ldr	r3, [r4, #0]
 801605c:	4620      	mov	r0, r4
 801605e:	88a1      	ldrh	r1, [r4, #4]
 8016060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016062:	4798      	blx	r3
 8016064:	88a3      	ldrh	r3, [r4, #4]
 8016066:	3301      	adds	r3, #1
 8016068:	80a3      	strh	r3, [r4, #4]
 801606a:	bd38      	pop	{r3, r4, r5, pc}
 801606c:	0802add9 	.word	0x0802add9
 8016070:	0802aecd 	.word	0x0802aecd
 8016074:	0802ad31 	.word	0x0802ad31
 8016078:	0802adf0 	.word	0x0802adf0

0801607c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801607c:	b570      	push	{r4, r5, r6, lr}
 801607e:	6803      	ldr	r3, [r0, #0]
 8016080:	4616      	mov	r6, r2
 8016082:	4604      	mov	r4, r0
 8016084:	460d      	mov	r5, r1
 8016086:	6a1b      	ldr	r3, [r3, #32]
 8016088:	4798      	blx	r3
 801608a:	4286      	cmp	r6, r0
 801608c:	d905      	bls.n	801609a <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801608e:	4b06      	ldr	r3, [pc, #24]	; (80160a8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8016090:	213c      	movs	r1, #60	; 0x3c
 8016092:	4a06      	ldr	r2, [pc, #24]	; (80160ac <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8016094:	4806      	ldr	r0, [pc, #24]	; (80160b0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8016096:	f012 faff 	bl	8028698 <__assert_func>
 801609a:	6823      	ldr	r3, [r4, #0]
 801609c:	4629      	mov	r1, r5
 801609e:	4620      	mov	r0, r4
 80160a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160a6:	4718      	bx	r3
 80160a8:	0802add9 	.word	0x0802add9
 80160ac:	0802ae40 	.word	0x0802ae40
 80160b0:	0802ad31 	.word	0x0802ad31

080160b4 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80160b4:	4770      	bx	lr
	...

080160b8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80160b8:	4a02      	ldr	r2, [pc, #8]	; (80160c4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80160ba:	6002      	str	r2, [r0, #0]
 80160bc:	2200      	movs	r2, #0
 80160be:	8082      	strh	r2, [r0, #4]
 80160c0:	4770      	bx	lr
 80160c2:	bf00      	nop
 80160c4:	0802ae14 	.word	0x0802ae14

080160c8 <_ZN8touchgfx9Container13getFirstChildEv>:
 80160c8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80160ca:	4770      	bx	lr

080160cc <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 80160cc:	f890 00b0 	ldrb.w	r0, [r0, #176]	; 0xb0
 80160d0:	4770      	bx	lr

080160d2 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 80160d2:	b570      	push	{r4, r5, r6, lr}
 80160d4:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 80160d8:	4604      	mov	r4, r0
 80160da:	428b      	cmp	r3, r1
 80160dc:	d011      	beq.n	8016102 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE+0x30>
 80160de:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
 80160e2:	3058      	adds	r0, #88	; 0x58
 80160e4:	f004 fe9c 	bl	801ae20 <_ZNK8touchgfx8Drawable10invalidateEv>
 80160e8:	6823      	ldr	r3, [r4, #0]
 80160ea:	4620      	mov	r0, r4
 80160ec:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 80160f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80160f4:	4798      	blx	r3
 80160f6:	462b      	mov	r3, r5
 80160f8:	4601      	mov	r1, r0
 80160fa:	4620      	mov	r0, r4
 80160fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016100:	4718      	bx	r3
 8016102:	bd70      	pop	{r4, r5, r6, pc}

08016104 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 8016104:	b510      	push	{r4, lr}
 8016106:	4604      	mov	r4, r0
 8016108:	f000 fb80 	bl	801680c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 801610c:	4b03      	ldr	r3, [pc, #12]	; (801611c <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 801610e:	2100      	movs	r1, #0
 8016110:	4620      	mov	r0, r4
 8016112:	6023      	str	r3, [r4, #0]
 8016114:	f7ff ffdd 	bl	80160d2 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 8016118:	4620      	mov	r0, r4
 801611a:	bd10      	pop	{r4, pc}
 801611c:	0802af14 	.word	0x0802af14

08016120 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 8016120:	b570      	push	{r4, r5, r6, lr}
 8016122:	6803      	ldr	r3, [r0, #0]
 8016124:	4604      	mov	r4, r0
 8016126:	f880 1110 	strb.w	r1, [r0, #272]	; 0x110
 801612a:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 801612e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8016132:	4798      	blx	r3
 8016134:	462b      	mov	r3, r5
 8016136:	4601      	mov	r1, r0
 8016138:	4620      	mov	r0, r4
 801613a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801613e:	4718      	bx	r3

08016140 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 8016140:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
 8016144:	4770      	bx	lr

08016146 <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 8016146:	f880 1108 	strb.w	r1, [r0, #264]	; 0x108
 801614a:	4770      	bx	lr

0801614c <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 801614c:	f890 0108 	ldrb.w	r0, [r0, #264]	; 0x108
 8016150:	4770      	bx	lr

08016152 <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 8016152:	b507      	push	{r0, r1, r2, lr}
 8016154:	ab02      	add	r3, sp, #8
 8016156:	30e0      	adds	r0, #224	; 0xe0
 8016158:	f823 1d04 	strh.w	r1, [r3, #-4]!
 801615c:	4619      	mov	r1, r3
 801615e:	f001 ff6a 	bl	8018036 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 8016162:	b003      	add	sp, #12
 8016164:	f85d fb04 	ldr.w	pc, [sp], #4

08016168 <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 8016168:	b508      	push	{r3, lr}
 801616a:	4b06      	ldr	r3, [pc, #24]	; (8016184 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	b92b      	cbnz	r3, 801617c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 8016170:	4b05      	ldr	r3, [pc, #20]	; (8016188 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 8016172:	218b      	movs	r1, #139	; 0x8b
 8016174:	4a05      	ldr	r2, [pc, #20]	; (801618c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 8016176:	4806      	ldr	r0, [pc, #24]	; (8016190 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 8016178:	f012 fa8e 	bl	8028698 <__assert_func>
 801617c:	f8b0 0106 	ldrh.w	r0, [r0, #262]	; 0x106
 8016180:	bd08      	pop	{r3, pc}
 8016182:	bf00      	nop
 8016184:	20005868 	.word	0x20005868
 8016188:	0802afe4 	.word	0x0802afe4
 801618c:	0802b138 	.word	0x0802b138
 8016190:	0802b020 	.word	0x0802b020

08016194 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 8016194:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016198:	4617      	mov	r7, r2
 801619a:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 801619e:	2200      	movs	r2, #0
 80161a0:	4604      	mov	r4, r0
 80161a2:	460e      	mov	r6, r1
 80161a4:	4698      	mov	r8, r3
 80161a6:	4611      	mov	r1, r2
 80161a8:	9500      	str	r5, [sp, #0]
 80161aa:	30b4      	adds	r0, #180	; 0xb4
 80161ac:	f7fb fdcf 	bl	8011d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 80161b0:	4643      	mov	r3, r8
 80161b2:	463a      	mov	r2, r7
 80161b4:	4631      	mov	r1, r6
 80161b6:	4620      	mov	r0, r4
 80161b8:	9508      	str	r5, [sp, #32]
 80161ba:	b002      	add	sp, #8
 80161bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80161c0:	f000 baf7 	b.w	80167b2 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

080161c4 <_ZN8touchgfx13ImageProgress8setValueEi>:
 80161c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161c6:	4604      	mov	r4, r0
 80161c8:	b085      	sub	sp, #20
 80161ca:	f000 fa46 	bl	801665a <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80161ce:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 80161d2:	4620      	mov	r0, r4
 80161d4:	2b01      	cmp	r3, #1
 80161d6:	bf94      	ite	ls
 80161d8:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 80161dc:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 80161e0:	f000 faca 	bl	8016778 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 80161e4:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 80161e8:	4606      	mov	r6, r0
 80161ea:	b205      	sxth	r5, r0
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	f000 80ca 	beq.w	8016386 <_ZN8touchgfx13ImageProgress8setValueEi+0x1c2>
 80161f2:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 80161f6:	2b03      	cmp	r3, #3
 80161f8:	d834      	bhi.n	8016264 <_ZN8touchgfx13ImageProgress8setValueEi+0xa0>
 80161fa:	e8df f003 	tbb	[pc, r3]
 80161fe:	3502      	.short	0x3502
 8016200:	9166      	.short	0x9166
 8016202:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8016206:	2200      	movs	r2, #0
 8016208:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 801620c:	f9b4 60bc 	ldrsh.w	r6, [r4, #188]	; 0xbc
 8016210:	4611      	mov	r1, r2
 8016212:	9300      	str	r3, [sp, #0]
 8016214:	462b      	mov	r3, r5
 8016216:	f7fb fd9a 	bl	8011d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 801621a:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801621e:	2200      	movs	r2, #0
 8016220:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8016224:	9300      	str	r3, [sp, #0]
 8016226:	462b      	mov	r3, r5
 8016228:	4611      	mov	r1, r2
 801622a:	f7fb fd90 	bl	8011d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 801622e:	f9b4 30bc 	ldrsh.w	r3, [r4, #188]	; 0xbc
 8016232:	4631      	mov	r1, r6
 8016234:	f9b4 20be 	ldrsh.w	r2, [r4, #190]	; 0xbe
 8016238:	429e      	cmp	r6, r3
 801623a:	eba6 0603 	sub.w	r6, r6, r3
 801623e:	bfa8      	it	ge
 8016240:	4619      	movge	r1, r3
 8016242:	2e00      	cmp	r6, #0
 8016244:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016248:	bfb8      	it	lt
 801624a:	4276      	neglt	r6, r6
 801624c:	2100      	movs	r1, #0
 801624e:	f8ad 600c 	strh.w	r6, [sp, #12]
 8016252:	f8ad 100a 	strh.w	r1, [sp, #10]
 8016256:	f8ad 200e 	strh.w	r2, [sp, #14]
 801625a:	a902      	add	r1, sp, #8
 801625c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016260:	f004 fe46 	bl	801aef0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>
 8016264:	b005      	add	sp, #20
 8016266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016268:	8921      	ldrh	r1, [r4, #8]
 801626a:	2200      	movs	r2, #0
 801626c:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 8016270:	1a09      	subs	r1, r1, r0
 8016272:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8016276:	9300      	str	r3, [sp, #0]
 8016278:	462b      	mov	r3, r5
 801627a:	b209      	sxth	r1, r1
 801627c:	f9b4 70b8 	ldrsh.w	r7, [r4, #184]	; 0xb8
 8016280:	f7fb fd65 	bl	8011d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 8016284:	f8b4 10b8 	ldrh.w	r1, [r4, #184]	; 0xb8
 8016288:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 801628c:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8016290:	4249      	negs	r1, r1
 8016292:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016296:	9200      	str	r2, [sp, #0]
 8016298:	2200      	movs	r2, #0
 801629a:	b209      	sxth	r1, r1
 801629c:	f7fb fd57 	bl	8011d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 80162a0:	f9b4 30b8 	ldrsh.w	r3, [r4, #184]	; 0xb8
 80162a4:	4639      	mov	r1, r7
 80162a6:	f9b4 20be 	ldrsh.w	r2, [r4, #190]	; 0xbe
 80162aa:	429f      	cmp	r7, r3
 80162ac:	eba7 0703 	sub.w	r7, r7, r3
 80162b0:	bfa8      	it	ge
 80162b2:	4619      	movge	r1, r3
 80162b4:	2f00      	cmp	r7, #0
 80162b6:	f8ad 1008 	strh.w	r1, [sp, #8]
 80162ba:	bfb8      	it	lt
 80162bc:	427f      	neglt	r7, r7
 80162be:	2100      	movs	r1, #0
 80162c0:	f8ad 700c 	strh.w	r7, [sp, #12]
 80162c4:	f8ad 100a 	strh.w	r1, [sp, #10]
 80162c8:	e7c5      	b.n	8016256 <_ZN8touchgfx13ImageProgress8setValueEi+0x92>
 80162ca:	2200      	movs	r2, #0
 80162cc:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80162d0:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 80162d4:	9500      	str	r5, [sp, #0]
 80162d6:	4611      	mov	r1, r2
 80162d8:	f9b4 60be 	ldrsh.w	r6, [r4, #190]	; 0xbe
 80162dc:	f7fb fd37 	bl	8011d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 80162e0:	2200      	movs	r2, #0
 80162e2:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80162e6:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 80162ea:	4611      	mov	r1, r2
 80162ec:	9500      	str	r5, [sp, #0]
 80162ee:	f7fb fd2e 	bl	8011d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 80162f2:	f9b4 30be 	ldrsh.w	r3, [r4, #190]	; 0xbe
 80162f6:	2100      	movs	r1, #0
 80162f8:	f9b4 20bc 	ldrsh.w	r2, [r4, #188]	; 0xbc
 80162fc:	429e      	cmp	r6, r3
 80162fe:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016302:	4631      	mov	r1, r6
 8016304:	eba6 0603 	sub.w	r6, r6, r3
 8016308:	bfa8      	it	ge
 801630a:	4619      	movge	r1, r3
 801630c:	f8ad 200c 	strh.w	r2, [sp, #12]
 8016310:	2e00      	cmp	r6, #0
 8016312:	f8ad 100a 	strh.w	r1, [sp, #10]
 8016316:	bfb8      	it	lt
 8016318:	4276      	neglt	r6, r6
 801631a:	f8ad 600e 	strh.w	r6, [sp, #14]
 801631e:	e79c      	b.n	801625a <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8016320:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8016324:	2100      	movs	r1, #0
 8016326:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801632a:	1a12      	subs	r2, r2, r0
 801632c:	9500      	str	r5, [sp, #0]
 801632e:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8016332:	f9b4 70ba 	ldrsh.w	r7, [r4, #186]	; 0xba
 8016336:	b212      	sxth	r2, r2
 8016338:	f7fb fd09 	bl	8011d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 801633c:	f8b4 20ba 	ldrh.w	r2, [r4, #186]	; 0xba
 8016340:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 8016344:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8016348:	4252      	negs	r2, r2
 801634a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801634e:	9100      	str	r1, [sp, #0]
 8016350:	2100      	movs	r1, #0
 8016352:	b212      	sxth	r2, r2
 8016354:	f7fb fcfb 	bl	8011d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 8016358:	f9b4 30ba 	ldrsh.w	r3, [r4, #186]	; 0xba
 801635c:	2100      	movs	r1, #0
 801635e:	f9b4 20bc 	ldrsh.w	r2, [r4, #188]	; 0xbc
 8016362:	429f      	cmp	r7, r3
 8016364:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016368:	4639      	mov	r1, r7
 801636a:	eba7 0703 	sub.w	r7, r7, r3
 801636e:	bfa8      	it	ge
 8016370:	4619      	movge	r1, r3
 8016372:	f8ad 200c 	strh.w	r2, [sp, #12]
 8016376:	2f00      	cmp	r7, #0
 8016378:	f8ad 100a 	strh.w	r1, [sp, #10]
 801637c:	bfb8      	it	lt
 801637e:	427f      	neglt	r7, r7
 8016380:	f8ad 700e 	strh.w	r7, [sp, #14]
 8016384:	e769      	b.n	801625a <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 8016386:	f104 07b4 	add.w	r7, r4, #180	; 0xb4
 801638a:	4638      	mov	r0, r7
 801638c:	f004 fd48 	bl	801ae20 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016390:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8016394:	2b03      	cmp	r3, #3
 8016396:	d818      	bhi.n	80163ca <_ZN8touchgfx13ImageProgress8setValueEi+0x206>
 8016398:	e8df f003 	tbb	[pc, r3]
 801639c:	3f2e1b02 	.word	0x3f2e1b02
 80163a0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80163a4:	2200      	movs	r2, #0
 80163a6:	4638      	mov	r0, r7
 80163a8:	4611      	mov	r1, r2
 80163aa:	9300      	str	r3, [sp, #0]
 80163ac:	462b      	mov	r3, r5
 80163ae:	f7fb fcce 	bl	8011d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 80163b2:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80163b6:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80163ba:	1af1      	subs	r1, r6, r3
 80163bc:	9200      	str	r2, [sp, #0]
 80163be:	2200      	movs	r2, #0
 80163c0:	b209      	sxth	r1, r1
 80163c2:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 80163c6:	f7fb fcc2 	bl	8011d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 80163ca:	4638      	mov	r0, r7
 80163cc:	f004 fd28 	bl	801ae20 <_ZNK8touchgfx8Drawable10invalidateEv>
 80163d0:	e748      	b.n	8016264 <_ZN8touchgfx13ImageProgress8setValueEi+0xa0>
 80163d2:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80163d6:	2200      	movs	r2, #0
 80163d8:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80163dc:	4638      	mov	r0, r7
 80163de:	1b89      	subs	r1, r1, r6
 80163e0:	9300      	str	r3, [sp, #0]
 80163e2:	462b      	mov	r3, r5
 80163e4:	b209      	sxth	r1, r1
 80163e6:	f7fb fcb2 	bl	8011d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 80163ea:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 80163ee:	9300      	str	r3, [sp, #0]
 80163f0:	462b      	mov	r3, r5
 80163f2:	2200      	movs	r2, #0
 80163f4:	4611      	mov	r1, r2
 80163f6:	e7e4      	b.n	80163c2 <_ZN8touchgfx13ImageProgress8setValueEi+0x1fe>
 80163f8:	2200      	movs	r2, #0
 80163fa:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 80163fe:	4638      	mov	r0, r7
 8016400:	9500      	str	r5, [sp, #0]
 8016402:	4611      	mov	r1, r2
 8016404:	f7fb fca3 	bl	8011d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 8016408:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 801640c:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016410:	2100      	movs	r1, #0
 8016412:	1a32      	subs	r2, r6, r0
 8016414:	9000      	str	r0, [sp, #0]
 8016416:	b212      	sxth	r2, r2
 8016418:	e7d3      	b.n	80163c2 <_ZN8touchgfx13ImageProgress8setValueEi+0x1fe>
 801641a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 801641e:	2100      	movs	r1, #0
 8016420:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016424:	4638      	mov	r0, r7
 8016426:	1b92      	subs	r2, r2, r6
 8016428:	9500      	str	r5, [sp, #0]
 801642a:	b212      	sxth	r2, r2
 801642c:	f7fb fc8f 	bl	8011d4e <_ZN8touchgfx8Drawable11setPositionEssss>
 8016430:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8016434:	9500      	str	r5, [sp, #0]
 8016436:	e7dc      	b.n	80163f2 <_ZN8touchgfx13ImageProgress8setValueEi+0x22e>

08016438 <_ZN8touchgfx13ImageProgressC1Ev>:
 8016438:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801643c:	4604      	mov	r4, r0
 801643e:	f7ff fe61 	bl	8016104 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 8016442:	4b31      	ldr	r3, [pc, #196]	; (8016508 <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 8016444:	a902      	add	r1, sp, #8
 8016446:	4626      	mov	r6, r4
 8016448:	f104 08e0 	add.w	r8, r4, #224	; 0xe0
 801644c:	2500      	movs	r5, #0
 801644e:	4a2f      	ldr	r2, [pc, #188]	; (801650c <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 8016450:	f846 3bb4 	str.w	r3, [r6], #180
 8016454:	2701      	movs	r7, #1
 8016456:	4b2e      	ldr	r3, [pc, #184]	; (8016510 <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 8016458:	4640      	mov	r0, r8
 801645a:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 801645e:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8016462:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016466:	f8a4 50b8 	strh.w	r5, [r4, #184]	; 0xb8
 801646a:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801646e:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
 8016472:	f8a4 50ba 	strh.w	r5, [r4, #186]	; 0xba
 8016476:	f8a4 50bc 	strh.w	r5, [r4, #188]	; 0xbc
 801647a:	f8a4 50be 	strh.w	r5, [r4, #190]	; 0xbe
 801647e:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 8016482:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 8016486:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 801648a:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 801648e:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
 8016492:	f884 50d8 	strb.w	r5, [r4, #216]	; 0xd8
 8016496:	f884 70d9 	strb.w	r7, [r4, #217]	; 0xd9
 801649a:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
 801649e:	f8a4 50e4 	strh.w	r5, [r4, #228]	; 0xe4
 80164a2:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 80164a6:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 80164aa:	f8a4 50ea 	strh.w	r5, [r4, #234]	; 0xea
 80164ae:	f8a4 50ec 	strh.w	r5, [r4, #236]	; 0xec
 80164b2:	f8a4 50ee 	strh.w	r5, [r4, #238]	; 0xee
 80164b6:	f8a4 50f0 	strh.w	r5, [r4, #240]	; 0xf0
 80164ba:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
 80164be:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
 80164c2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80164c6:	f884 7105 	strb.w	r7, [r4, #261]	; 0x105
 80164ca:	e9c4 5532 	strd	r5, r5, [r4, #200]	; 0xc8
 80164ce:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
 80164d2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
 80164d6:	f002 f819 	bl	801850c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80164da:	4b0e      	ldr	r3, [pc, #56]	; (8016514 <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 80164dc:	4641      	mov	r1, r8
 80164de:	4630      	mov	r0, r6
 80164e0:	f8a4 510a 	strh.w	r5, [r4, #266]	; 0x10a
 80164e4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80164e8:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
 80164ec:	f884 7110 	strb.w	r7, [r4, #272]	; 0x110
 80164f0:	f000 fa7a 	bl	80169e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80164f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80164f8:	4631      	mov	r1, r6
 80164fa:	f000 fa75 	bl	80169e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80164fe:	4620      	mov	r0, r4
 8016500:	b002      	add	sp, #8
 8016502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016506:	bf00      	nop
 8016508:	0802b050 	.word	0x0802b050
 801650c:	0802bfc0 	.word	0x0802bfc0
 8016510:	0802b3e4 	.word	0x0802b3e4
 8016514:	0802be9c 	.word	0x0802be9c

08016518 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8016518:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 801651c:	4770      	bx	lr

0801651e <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 801651e:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8016522:	4770      	bx	lr

08016524 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8016524:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8016528:	4770      	bx	lr

0801652a <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 801652a:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 801652e:	4770      	bx	lr

08016530 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 8016530:	b510      	push	{r4, lr}
 8016532:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8016536:	600c      	str	r4, [r1, #0]
 8016538:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 801653c:	6011      	str	r1, [r2, #0]
 801653e:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8016542:	801a      	strh	r2, [r3, #0]
 8016544:	9b02      	ldr	r3, [sp, #8]
 8016546:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 801654a:	801a      	strh	r2, [r3, #0]
 801654c:	bd10      	pop	{r4, pc}

0801654e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 801654e:	b510      	push	{r4, lr}
 8016550:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8016554:	600c      	str	r4, [r1, #0]
 8016556:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 801655a:	6011      	str	r1, [r2, #0]
 801655c:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8016560:	801a      	strh	r2, [r3, #0]
 8016562:	bd10      	pop	{r4, pc}

08016564 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8016564:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8016568:	600b      	str	r3, [r1, #0]
 801656a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 801656e:	6013      	str	r3, [r2, #0]
 8016570:	4770      	bx	lr

08016572 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 8016572:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 8016576:	4770      	bx	lr

08016578 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8016578:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 801657c:	4770      	bx	lr

0801657e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 801657e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016580:	460d      	mov	r5, r1
 8016582:	4614      	mov	r4, r2
 8016584:	9908      	ldr	r1, [sp, #32]
 8016586:	6802      	ldr	r2, [r0, #0]
 8016588:	9100      	str	r1, [sp, #0]
 801658a:	a902      	add	r1, sp, #8
 801658c:	f8d2 609c 	ldr.w	r6, [r2, #156]	; 0x9c
 8016590:	aa03      	add	r2, sp, #12
 8016592:	47b0      	blx	r6
 8016594:	9b02      	ldr	r3, [sp, #8]
 8016596:	802b      	strh	r3, [r5, #0]
 8016598:	9b03      	ldr	r3, [sp, #12]
 801659a:	8023      	strh	r3, [r4, #0]
 801659c:	b004      	add	sp, #16
 801659e:	bd70      	pop	{r4, r5, r6, pc}

080165a0 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 80165a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80165a2:	4614      	mov	r4, r2
 80165a4:	6802      	ldr	r2, [r0, #0]
 80165a6:	460d      	mov	r5, r1
 80165a8:	4669      	mov	r1, sp
 80165aa:	f8d2 60a0 	ldr.w	r6, [r2, #160]	; 0xa0
 80165ae:	aa01      	add	r2, sp, #4
 80165b0:	47b0      	blx	r6
 80165b2:	9b00      	ldr	r3, [sp, #0]
 80165b4:	802b      	strh	r3, [r5, #0]
 80165b6:	9b01      	ldr	r3, [sp, #4]
 80165b8:	8023      	strh	r3, [r4, #0]
 80165ba:	b002      	add	sp, #8
 80165bc:	bd70      	pop	{r4, r5, r6, pc}

080165be <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 80165be:	6803      	ldr	r3, [r0, #0]
 80165c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80165c2:	460d      	mov	r5, r1
 80165c4:	4614      	mov	r4, r2
 80165c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80165ca:	aa01      	add	r2, sp, #4
 80165cc:	4669      	mov	r1, sp
 80165ce:	4798      	blx	r3
 80165d0:	9b00      	ldr	r3, [sp, #0]
 80165d2:	802b      	strh	r3, [r5, #0]
 80165d4:	9b01      	ldr	r3, [sp, #4]
 80165d6:	8023      	strh	r3, [r4, #0]
 80165d8:	b003      	add	sp, #12
 80165da:	bd30      	pop	{r4, r5, pc}

080165dc <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 80165dc:	b570      	push	{r4, r5, r6, lr}
 80165de:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 80165e2:	4604      	mov	r4, r0
 80165e4:	4616      	mov	r6, r2
 80165e6:	428d      	cmp	r5, r1
 80165e8:	bfb8      	it	lt
 80165ea:	460d      	movlt	r5, r1
 80165ec:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80165f0:	428d      	cmp	r5, r1
 80165f2:	bfa8      	it	ge
 80165f4:	460d      	movge	r5, r1
 80165f6:	b99a      	cbnz	r2, 8016620 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 80165f8:	6803      	ldr	r3, [r0, #0]
 80165fa:	4629      	mov	r1, r5
 80165fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016600:	4798      	blx	r3
 8016602:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8016606:	b338      	cbz	r0, 8016658 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x7c>
 8016608:	6803      	ldr	r3, [r0, #0]
 801660a:	68db      	ldr	r3, [r3, #12]
 801660c:	4798      	blx	r3
 801660e:	b318      	cbz	r0, 8016658 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x7c>
 8016610:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8016614:	4621      	mov	r1, r4
 8016616:	6803      	ldr	r3, [r0, #0]
 8016618:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801661c:	689b      	ldr	r3, [r3, #8]
 801661e:	4718      	bx	r3
 8016620:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8016624:	2b00      	cmp	r3, #0
 8016626:	dd04      	ble.n	8016632 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x56>
 8016628:	f003 fc54 	bl	8019ed4 <_ZN8touchgfx11Application11getInstanceEv>
 801662c:	4621      	mov	r1, r4
 801662e:	f003 fc89 	bl	8019f44 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8016632:	6823      	ldr	r3, [r4, #0]
 8016634:	4620      	mov	r0, r4
 8016636:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801663a:	4798      	blx	r3
 801663c:	2300      	movs	r3, #0
 801663e:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 8016642:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8016646:	e9c4 0526 	strd	r0, r5, [r4, #152]	; 0x98
 801664a:	f003 fc43 	bl	8019ed4 <_ZN8touchgfx11Application11getInstanceEv>
 801664e:	4621      	mov	r1, r4
 8016650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016654:	f003 bc44 	b.w	8019ee0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8016658:	bd70      	pop	{r4, r5, r6, pc}

0801665a <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 801665a:	b510      	push	{r4, lr}
 801665c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8016660:	4604      	mov	r4, r0
 8016662:	4299      	cmp	r1, r3
 8016664:	bfb8      	it	lt
 8016666:	4619      	movlt	r1, r3
 8016668:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 801666c:	4299      	cmp	r1, r3
 801666e:	bfa8      	it	ge
 8016670:	4619      	movge	r1, r3
 8016672:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8016676:	428b      	cmp	r3, r1
 8016678:	d010      	beq.n	801669c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 801667a:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 801667e:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8016682:	b158      	cbz	r0, 801669c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016684:	6803      	ldr	r3, [r0, #0]
 8016686:	68db      	ldr	r3, [r3, #12]
 8016688:	4798      	blx	r3
 801668a:	b138      	cbz	r0, 801669c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 801668c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8016690:	4621      	mov	r1, r4
 8016692:	6803      	ldr	r3, [r0, #0]
 8016694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016698:	689b      	ldr	r3, [r3, #8]
 801669a:	4718      	bx	r3
 801669c:	bd10      	pop	{r4, pc}
	...

080166a0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 80166a0:	4291      	cmp	r1, r2
 80166a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166a6:	4604      	mov	r4, r0
 80166a8:	460e      	mov	r6, r1
 80166aa:	4615      	mov	r5, r2
 80166ac:	4698      	mov	r8, r3
 80166ae:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 80166b2:	db05      	blt.n	80166c0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 80166b4:	4b11      	ldr	r3, [pc, #68]	; (80166fc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 80166b6:	2149      	movs	r1, #73	; 0x49
 80166b8:	4a11      	ldr	r2, [pc, #68]	; (8016700 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 80166ba:	4812      	ldr	r0, [pc, #72]	; (8016704 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x64>)
 80166bc:	f011 ffec 	bl	8028698 <__assert_func>
 80166c0:	6803      	ldr	r3, [r0, #0]
 80166c2:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 80166c6:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 80166ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80166ce:	4798      	blx	r3
 80166d0:	f1b8 0f00 	cmp.w	r8, #0
 80166d4:	d10c      	bne.n	80166f0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>
 80166d6:	1bad      	subs	r5, r5, r6
 80166d8:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 80166dc:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
 80166e0:	f8a4 7092 	strh.w	r7, [r4, #146]	; 0x92
 80166e4:	42bb      	cmp	r3, r7
 80166e6:	d806      	bhi.n	80166f6 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x56>
 80166e8:	4b07      	ldr	r3, [pc, #28]	; (8016708 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x68>)
 80166ea:	2156      	movs	r1, #86	; 0x56
 80166ec:	4a04      	ldr	r2, [pc, #16]	; (8016700 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 80166ee:	e7e4      	b.n	80166ba <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
 80166f0:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
 80166f4:	e7f2      	b.n	80166dc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x3c>
 80166f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166fa:	bf00      	nop
 80166fc:	0802b16b 	.word	0x0802b16b
 8016700:	0802b2b8 	.word	0x0802b2b8
 8016704:	0802b175 	.word	0x0802b175
 8016708:	0802b1cc 	.word	0x0802b1cc

0801670c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 801670c:	b570      	push	{r4, r5, r6, lr}
 801670e:	4604      	mov	r4, r0
 8016710:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 8016714:	2100      	movs	r1, #0
 8016716:	3001      	adds	r0, #1
 8016718:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 801671c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8016720:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 8016724:	b280      	uxth	r0, r0
 8016726:	1ad2      	subs	r2, r2, r3
 8016728:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 801672c:	b212      	sxth	r2, r2
 801672e:	47a8      	blx	r5
 8016730:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8016734:	6823      	ldr	r3, [r4, #0]
 8016736:	4401      	add	r1, r0
 8016738:	4620      	mov	r0, r4
 801673a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801673e:	4798      	blx	r3
 8016740:	e9d4 3228 	ldrd	r3, r2, [r4, #160]	; 0xa0
 8016744:	429a      	cmp	r2, r3
 8016746:	db16      	blt.n	8016776 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x6a>
 8016748:	2300      	movs	r3, #0
 801674a:	e9c4 3328 	strd	r3, r3, [r4, #160]	; 0xa0
 801674e:	f003 fbc1 	bl	8019ed4 <_ZN8touchgfx11Application11getInstanceEv>
 8016752:	4621      	mov	r1, r4
 8016754:	f003 fbf6 	bl	8019f44 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8016758:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 801675c:	b158      	cbz	r0, 8016776 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x6a>
 801675e:	6803      	ldr	r3, [r0, #0]
 8016760:	68db      	ldr	r3, [r3, #12]
 8016762:	4798      	blx	r3
 8016764:	b138      	cbz	r0, 8016776 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x6a>
 8016766:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 801676a:	4621      	mov	r1, r4
 801676c:	6803      	ldr	r3, [r0, #0]
 801676e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016772:	689b      	ldr	r3, [r3, #8]
 8016774:	4718      	bx	r3
 8016776:	bd70      	pop	{r4, r5, r6, pc}

08016778 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8016778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801677a:	4604      	mov	r4, r0
 801677c:	460d      	mov	r5, r1
 801677e:	b1a9      	cbz	r1, 80167ac <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 8016780:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 8016784:	ab01      	add	r3, sp, #4
 8016786:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 801678a:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 801678e:	1b89      	subs	r1, r1, r6
 8016790:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 8016794:	1a12      	subs	r2, r2, r0
 8016796:	1a38      	subs	r0, r7, r0
 8016798:	f004 fcf7 	bl	801b18a <_ZN8touchgfx6muldivElllRl>
 801679c:	4629      	mov	r1, r5
 801679e:	ab01      	add	r3, sp, #4
 80167a0:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 80167a4:	4430      	add	r0, r6
 80167a6:	f004 fcf0 	bl	801b18a <_ZN8touchgfx6muldivElllRl>
 80167aa:	b285      	uxth	r5, r0
 80167ac:	4628      	mov	r0, r5
 80167ae:	b003      	add	sp, #12
 80167b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080167b2 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 80167b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167b6:	4604      	mov	r4, r0
 80167b8:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 80167bc:	4698      	mov	r8, r3
 80167be:	460e      	mov	r6, r1
 80167c0:	4615      	mov	r5, r2
 80167c2:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 80167c6:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80167ca:	4619      	mov	r1, r3
 80167cc:	463a      	mov	r2, r7
 80167ce:	3058      	adds	r0, #88	; 0x58
 80167d0:	f7fb fb65 	bl	8011e9e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80167d4:	4446      	add	r6, r8
 80167d6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80167da:	443d      	add	r5, r7
 80167dc:	42b3      	cmp	r3, r6
 80167de:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80167e2:	bfb8      	it	lt
 80167e4:	8126      	strhlt	r6, [r4, #8]
 80167e6:	42ab      	cmp	r3, r5
 80167e8:	bfb8      	it	lt
 80167ea:	8165      	strhlt	r5, [r4, #10]
 80167ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080167f0 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 80167f0:	b510      	push	{r4, lr}
 80167f2:	4604      	mov	r4, r0
 80167f4:	302c      	adds	r0, #44	; 0x2c
 80167f6:	f001 fe89 	bl	801850c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80167fa:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 80167fe:	4620      	mov	r0, r4
 8016800:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8016804:	f7fb fb4b 	bl	8011e9e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8016808:	bd10      	pop	{r4, pc}
	...

0801680c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 801680c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016810:	4604      	mov	r4, r0
 8016812:	2500      	movs	r5, #0
 8016814:	f7fc fd1a 	bl	801324c <_ZN8touchgfx8DrawableC1Ev>
 8016818:	4b23      	ldr	r3, [pc, #140]	; (80168a8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 801681a:	4626      	mov	r6, r4
 801681c:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8016820:	af02      	add	r7, sp, #8
 8016822:	2226      	movs	r2, #38	; 0x26
 8016824:	4629      	mov	r1, r5
 8016826:	62a5      	str	r5, [r4, #40]	; 0x28
 8016828:	f846 3b2c 	str.w	r3, [r6], #44
 801682c:	4630      	mov	r0, r6
 801682e:	f827 8d04 	strh.w	r8, [r7, #-4]!
 8016832:	f012 f8b7 	bl	80289a4 <memset>
 8016836:	4630      	mov	r0, r6
 8016838:	f7fc fd08 	bl	801324c <_ZN8touchgfx8DrawableC1Ev>
 801683c:	4b1b      	ldr	r3, [pc, #108]	; (80168ac <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 801683e:	4639      	mov	r1, r7
 8016840:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8016844:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016846:	4630      	mov	r0, r6
 8016848:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 801684c:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 8016850:	f001 fe5c 	bl	801850c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016854:	4638      	mov	r0, r7
 8016856:	f7fc fcf9 	bl	801324c <_ZN8touchgfx8DrawableC1Ev>
 801685a:	4b15      	ldr	r3, [pc, #84]	; (80168b0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 801685c:	4629      	mov	r1, r5
 801685e:	4630      	mov	r0, r6
 8016860:	65a3      	str	r3, [r4, #88]	; 0x58
 8016862:	2364      	movs	r3, #100	; 0x64
 8016864:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 8016868:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 801686c:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 8016870:	4b10      	ldr	r3, [pc, #64]	; (80168b4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8016872:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8016876:	e9c4 3525 	strd	r3, r5, [r4, #148]	; 0x94
 801687a:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 801687e:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8016882:	f7fb fa92 	bl	8011daa <_ZN8touchgfx8Drawable4setXEs>
 8016886:	4629      	mov	r1, r5
 8016888:	4630      	mov	r0, r6
 801688a:	f7fb fa9d 	bl	8011dc8 <_ZN8touchgfx8Drawable4setYEs>
 801688e:	4631      	mov	r1, r6
 8016890:	4620      	mov	r0, r4
 8016892:	f000 f8a9 	bl	80169e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016896:	4620      	mov	r0, r4
 8016898:	4639      	mov	r1, r7
 801689a:	f000 f8a5 	bl	80169e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801689e:	4620      	mov	r0, r4
 80168a0:	b002      	add	sp, #8
 80168a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168a6:	bf00      	nop
 80168a8:	0802b1f0 	.word	0x0802b1f0
 80168ac:	0802bfc0 	.word	0x0802bfc0
 80168b0:	0802b3e4 	.word	0x0802b3e4
 80168b4:	0801b911 	.word	0x0801b911

080168b8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80168b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80168ba:	2000      	movs	r0, #0
 80168bc:	b12b      	cbz	r3, 80168ca <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80168be:	b920      	cbnz	r0, 80168ca <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80168c0:	1a5a      	subs	r2, r3, r1
 80168c2:	699b      	ldr	r3, [r3, #24]
 80168c4:	4250      	negs	r0, r2
 80168c6:	4150      	adcs	r0, r2
 80168c8:	e7f8      	b.n	80168bc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80168ca:	4770      	bx	lr

080168cc <_ZN8touchgfx9Container9removeAllEv>:
 80168cc:	2200      	movs	r2, #0
 80168ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80168d0:	b123      	cbz	r3, 80168dc <_ZN8touchgfx9Container9removeAllEv+0x10>
 80168d2:	6999      	ldr	r1, [r3, #24]
 80168d4:	6281      	str	r1, [r0, #40]	; 0x28
 80168d6:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80168da:	e7f8      	b.n	80168ce <_ZN8touchgfx9Container9removeAllEv+0x2>
 80168dc:	4770      	bx	lr

080168de <_ZN8touchgfx9Container6unlinkEv>:
 80168de:	2300      	movs	r3, #0
 80168e0:	6283      	str	r3, [r0, #40]	; 0x28
 80168e2:	4770      	bx	lr

080168e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80168e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168e8:	461f      	mov	r7, r3
 80168ea:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80168ee:	460d      	mov	r5, r1
 80168f0:	4616      	mov	r6, r2
 80168f2:	b103      	cbz	r3, 80168f6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80168f4:	6038      	str	r0, [r7, #0]
 80168f6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80168f8:	b314      	cbz	r4, 8016940 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80168fa:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80168fe:	b1eb      	cbz	r3, 801693c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016900:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016904:	428d      	cmp	r5, r1
 8016906:	db19      	blt.n	801693c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016908:	b289      	uxth	r1, r1
 801690a:	8923      	ldrh	r3, [r4, #8]
 801690c:	440b      	add	r3, r1
 801690e:	b21b      	sxth	r3, r3
 8016910:	429d      	cmp	r5, r3
 8016912:	da13      	bge.n	801693c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016914:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016918:	4296      	cmp	r6, r2
 801691a:	db0f      	blt.n	801693c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801691c:	b292      	uxth	r2, r2
 801691e:	8963      	ldrh	r3, [r4, #10]
 8016920:	4413      	add	r3, r2
 8016922:	b21b      	sxth	r3, r3
 8016924:	429e      	cmp	r6, r3
 8016926:	da09      	bge.n	801693c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016928:	6823      	ldr	r3, [r4, #0]
 801692a:	1ab2      	subs	r2, r6, r2
 801692c:	1a69      	subs	r1, r5, r1
 801692e:	4620      	mov	r0, r4
 8016930:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8016934:	b212      	sxth	r2, r2
 8016936:	463b      	mov	r3, r7
 8016938:	b209      	sxth	r1, r1
 801693a:	47c0      	blx	r8
 801693c:	69a4      	ldr	r4, [r4, #24]
 801693e:	e7db      	b.n	80168f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8016940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016944 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8016944:	2200      	movs	r2, #0
 8016946:	8002      	strh	r2, [r0, #0]
 8016948:	8042      	strh	r2, [r0, #2]
 801694a:	8082      	strh	r2, [r0, #4]
 801694c:	80c2      	strh	r2, [r0, #6]
 801694e:	4770      	bx	lr

08016950 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8016950:	b570      	push	{r4, r5, r6, lr}
 8016952:	460d      	mov	r5, r1
 8016954:	4616      	mov	r6, r2
 8016956:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016958:	b13c      	cbz	r4, 801696a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801695a:	6823      	ldr	r3, [r4, #0]
 801695c:	4620      	mov	r0, r4
 801695e:	4632      	mov	r2, r6
 8016960:	4629      	mov	r1, r5
 8016962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016964:	4798      	blx	r3
 8016966:	69a4      	ldr	r4, [r4, #24]
 8016968:	e7f6      	b.n	8016958 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801696a:	bd70      	pop	{r4, r5, r6, pc}

0801696c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801696c:	b538      	push	{r3, r4, r5, lr}
 801696e:	460d      	mov	r5, r1
 8016970:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016972:	b134      	cbz	r4, 8016982 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8016974:	682b      	ldr	r3, [r5, #0]
 8016976:	4621      	mov	r1, r4
 8016978:	4628      	mov	r0, r5
 801697a:	689b      	ldr	r3, [r3, #8]
 801697c:	4798      	blx	r3
 801697e:	69a4      	ldr	r4, [r4, #24]
 8016980:	e7f7      	b.n	8016972 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8016982:	bd38      	pop	{r3, r4, r5, pc}

08016984 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8016984:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016986:	b19b      	cbz	r3, 80169b0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016988:	428b      	cmp	r3, r1
 801698a:	d109      	bne.n	80169a0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801698c:	699a      	ldr	r2, [r3, #24]
 801698e:	2100      	movs	r1, #0
 8016990:	6159      	str	r1, [r3, #20]
 8016992:	6282      	str	r2, [r0, #40]	; 0x28
 8016994:	b902      	cbnz	r2, 8016998 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8016996:	4770      	bx	lr
 8016998:	6199      	str	r1, [r3, #24]
 801699a:	4770      	bx	lr
 801699c:	4613      	mov	r3, r2
 801699e:	b13a      	cbz	r2, 80169b0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80169a0:	699a      	ldr	r2, [r3, #24]
 80169a2:	428a      	cmp	r2, r1
 80169a4:	d1fa      	bne.n	801699c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80169a6:	698a      	ldr	r2, [r1, #24]
 80169a8:	619a      	str	r2, [r3, #24]
 80169aa:	2300      	movs	r3, #0
 80169ac:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80169b0:	4770      	bx	lr

080169b2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80169b2:	b410      	push	{r4}
 80169b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80169b6:	4604      	mov	r4, r0
 80169b8:	b92b      	cbnz	r3, 80169c6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80169ba:	6803      	ldr	r3, [r0, #0]
 80169bc:	4611      	mov	r1, r2
 80169be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80169c4:	4718      	bx	r3
 80169c6:	b941      	cbnz	r1, 80169da <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80169c8:	6193      	str	r3, [r2, #24]
 80169ca:	6282      	str	r2, [r0, #40]	; 0x28
 80169cc:	6154      	str	r4, [r2, #20]
 80169ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169d2:	4770      	bx	lr
 80169d4:	4603      	mov	r3, r0
 80169d6:	2800      	cmp	r0, #0
 80169d8:	d0f9      	beq.n	80169ce <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80169da:	4299      	cmp	r1, r3
 80169dc:	6998      	ldr	r0, [r3, #24]
 80169de:	d1f9      	bne.n	80169d4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80169e0:	6190      	str	r0, [r2, #24]
 80169e2:	618a      	str	r2, [r1, #24]
 80169e4:	e7f2      	b.n	80169cc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080169e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80169e8:	4288      	cmp	r0, r1
 80169ea:	b508      	push	{r3, lr}
 80169ec:	d105      	bne.n	80169fa <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80169ee:	4b11      	ldr	r3, [pc, #68]	; (8016a34 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80169f0:	2123      	movs	r1, #35	; 0x23
 80169f2:	4a11      	ldr	r2, [pc, #68]	; (8016a38 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80169f4:	4811      	ldr	r0, [pc, #68]	; (8016a3c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80169f6:	f011 fe4f 	bl	8028698 <__assert_func>
 80169fa:	694b      	ldr	r3, [r1, #20]
 80169fc:	b11b      	cbz	r3, 8016a06 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80169fe:	4b10      	ldr	r3, [pc, #64]	; (8016a40 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8016a00:	2124      	movs	r1, #36	; 0x24
 8016a02:	4a0d      	ldr	r2, [pc, #52]	; (8016a38 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8016a04:	e7f6      	b.n	80169f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8016a06:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8016a0a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016a0c:	b913      	cbnz	r3, 8016a14 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8016a0e:	6281      	str	r1, [r0, #40]	; 0x28
 8016a10:	bd08      	pop	{r3, pc}
 8016a12:	4613      	mov	r3, r2
 8016a14:	699a      	ldr	r2, [r3, #24]
 8016a16:	b12a      	cbz	r2, 8016a24 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8016a18:	428b      	cmp	r3, r1
 8016a1a:	d1fa      	bne.n	8016a12 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8016a1c:	4b09      	ldr	r3, [pc, #36]	; (8016a44 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8016a1e:	2135      	movs	r1, #53	; 0x35
 8016a20:	4a05      	ldr	r2, [pc, #20]	; (8016a38 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8016a22:	e7e7      	b.n	80169f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8016a24:	428b      	cmp	r3, r1
 8016a26:	d103      	bne.n	8016a30 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8016a28:	4b06      	ldr	r3, [pc, #24]	; (8016a44 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8016a2a:	2138      	movs	r1, #56	; 0x38
 8016a2c:	4a02      	ldr	r2, [pc, #8]	; (8016a38 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8016a2e:	e7e1      	b.n	80169f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8016a30:	6199      	str	r1, [r3, #24]
 8016a32:	e7ed      	b.n	8016a10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8016a34:	0802b311 	.word	0x0802b311
 8016a38:	0802b464 	.word	0x0802b464
 8016a3c:	0802b33d 	.word	0x0802b33d
 8016a40:	0802b370 	.word	0x0802b370
 8016a44:	0802b3a6 	.word	0x0802b3a6

08016a48 <_ZN8touchgfx4RectaNERKS0_>:
 8016a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a4c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8016a50:	888c      	ldrh	r4, [r1, #4]
 8016a52:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016a56:	443c      	add	r4, r7
 8016a58:	b2a4      	uxth	r4, r4
 8016a5a:	fa0f f884 	sxth.w	r8, r4
 8016a5e:	45c1      	cmp	r9, r8
 8016a60:	da2f      	bge.n	8016ac2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016a62:	8882      	ldrh	r2, [r0, #4]
 8016a64:	444a      	add	r2, r9
 8016a66:	b292      	uxth	r2, r2
 8016a68:	fa0f fe82 	sxth.w	lr, r2
 8016a6c:	4577      	cmp	r7, lr
 8016a6e:	da28      	bge.n	8016ac2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016a70:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8016a74:	88cb      	ldrh	r3, [r1, #6]
 8016a76:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8016a7a:	442b      	add	r3, r5
 8016a7c:	b21b      	sxth	r3, r3
 8016a7e:	429e      	cmp	r6, r3
 8016a80:	da1f      	bge.n	8016ac2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016a82:	88c3      	ldrh	r3, [r0, #6]
 8016a84:	4433      	add	r3, r6
 8016a86:	b29b      	uxth	r3, r3
 8016a88:	fa0f fc83 	sxth.w	ip, r3
 8016a8c:	4565      	cmp	r5, ip
 8016a8e:	da18      	bge.n	8016ac2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016a90:	454f      	cmp	r7, r9
 8016a92:	bfb8      	it	lt
 8016a94:	464f      	movlt	r7, r9
 8016a96:	42b5      	cmp	r5, r6
 8016a98:	bfb8      	it	lt
 8016a9a:	4635      	movlt	r5, r6
 8016a9c:	45f0      	cmp	r8, lr
 8016a9e:	bfd8      	it	le
 8016aa0:	4622      	movle	r2, r4
 8016aa2:	1bd2      	subs	r2, r2, r7
 8016aa4:	8082      	strh	r2, [r0, #4]
 8016aa6:	884a      	ldrh	r2, [r1, #2]
 8016aa8:	88c9      	ldrh	r1, [r1, #6]
 8016aaa:	8007      	strh	r7, [r0, #0]
 8016aac:	440a      	add	r2, r1
 8016aae:	8045      	strh	r5, [r0, #2]
 8016ab0:	b292      	uxth	r2, r2
 8016ab2:	b211      	sxth	r1, r2
 8016ab4:	458c      	cmp	ip, r1
 8016ab6:	bfa8      	it	ge
 8016ab8:	4613      	movge	r3, r2
 8016aba:	1b5b      	subs	r3, r3, r5
 8016abc:	80c3      	strh	r3, [r0, #6]
 8016abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	8003      	strh	r3, [r0, #0]
 8016ac6:	8043      	strh	r3, [r0, #2]
 8016ac8:	8083      	strh	r3, [r0, #4]
 8016aca:	80c3      	strh	r3, [r0, #6]
 8016acc:	e7f7      	b.n	8016abe <_ZN8touchgfx4RectaNERKS0_+0x76>

08016ace <_ZNK8touchgfx4Rect7isEmptyEv>:
 8016ace:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	dd06      	ble.n	8016ae4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8016ad6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8016ada:	2800      	cmp	r0, #0
 8016adc:	bfcc      	ite	gt
 8016ade:	2000      	movgt	r0, #0
 8016ae0:	2001      	movle	r0, #1
 8016ae2:	4770      	bx	lr
 8016ae4:	2001      	movs	r0, #1
 8016ae6:	4770      	bx	lr

08016ae8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8016ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016aec:	2300      	movs	r3, #0
 8016aee:	4604      	mov	r4, r0
 8016af0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8016af2:	8003      	strh	r3, [r0, #0]
 8016af4:	8043      	strh	r3, [r0, #2]
 8016af6:	8083      	strh	r3, [r0, #4]
 8016af8:	80c3      	strh	r3, [r0, #6]
 8016afa:	2d00      	cmp	r5, #0
 8016afc:	d040      	beq.n	8016b80 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8016afe:	1d28      	adds	r0, r5, #4
 8016b00:	f7ff ffe5 	bl	8016ace <_ZNK8touchgfx4Rect7isEmptyEv>
 8016b04:	b988      	cbnz	r0, 8016b2a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016b06:	4620      	mov	r0, r4
 8016b08:	f7ff ffe1 	bl	8016ace <_ZNK8touchgfx4Rect7isEmptyEv>
 8016b0c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8016b10:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016b14:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8016b18:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8016b1c:	b138      	cbz	r0, 8016b2e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8016b1e:	8022      	strh	r2, [r4, #0]
 8016b20:	8063      	strh	r3, [r4, #2]
 8016b22:	f8a4 e004 	strh.w	lr, [r4, #4]
 8016b26:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016b2a:	69ad      	ldr	r5, [r5, #24]
 8016b2c:	e7e5      	b.n	8016afa <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8016b2e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016b32:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016b36:	4290      	cmp	r0, r2
 8016b38:	4607      	mov	r7, r0
 8016b3a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8016b3e:	460e      	mov	r6, r1
 8016b40:	bfa8      	it	ge
 8016b42:	4617      	movge	r7, r2
 8016b44:	4299      	cmp	r1, r3
 8016b46:	4472      	add	r2, lr
 8016b48:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8016b4c:	bfa8      	it	ge
 8016b4e:	461e      	movge	r6, r3
 8016b50:	4440      	add	r0, r8
 8016b52:	4471      	add	r1, lr
 8016b54:	4463      	add	r3, ip
 8016b56:	b200      	sxth	r0, r0
 8016b58:	8027      	strh	r7, [r4, #0]
 8016b5a:	b212      	sxth	r2, r2
 8016b5c:	8066      	strh	r6, [r4, #2]
 8016b5e:	b209      	sxth	r1, r1
 8016b60:	b21b      	sxth	r3, r3
 8016b62:	4290      	cmp	r0, r2
 8016b64:	bfac      	ite	ge
 8016b66:	ebc7 0200 	rsbge	r2, r7, r0
 8016b6a:	ebc7 0202 	rsblt	r2, r7, r2
 8016b6e:	4299      	cmp	r1, r3
 8016b70:	bfac      	ite	ge
 8016b72:	ebc6 0301 	rsbge	r3, r6, r1
 8016b76:	ebc6 0303 	rsblt	r3, r6, r3
 8016b7a:	80a2      	strh	r2, [r4, #4]
 8016b7c:	80e3      	strh	r3, [r4, #6]
 8016b7e:	e7d4      	b.n	8016b2a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016b80:	4620      	mov	r0, r4
 8016b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016b86 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8016b86:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016b8a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016b8e:	b383      	cbz	r3, 8016bf2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016b90:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016b92:	b374      	cbz	r4, 8016bf2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016b94:	f9b1 5000 	ldrsh.w	r5, [r1]
 8016b98:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8016b9c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8016ba0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8016ba4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016ba8:	b303      	cbz	r3, 8016bec <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016baa:	4668      	mov	r0, sp
 8016bac:	1d21      	adds	r1, r4, #4
 8016bae:	f8ad 5000 	strh.w	r5, [sp]
 8016bb2:	f8ad 6002 	strh.w	r6, [sp, #2]
 8016bb6:	f8ad 7004 	strh.w	r7, [sp, #4]
 8016bba:	f8ad 8006 	strh.w	r8, [sp, #6]
 8016bbe:	f7ff ff43 	bl	8016a48 <_ZN8touchgfx4RectaNERKS0_>
 8016bc2:	4668      	mov	r0, sp
 8016bc4:	f7ff ff83 	bl	8016ace <_ZNK8touchgfx4Rect7isEmptyEv>
 8016bc8:	b980      	cbnz	r0, 8016bec <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016bca:	f8bd 3000 	ldrh.w	r3, [sp]
 8016bce:	4669      	mov	r1, sp
 8016bd0:	88a2      	ldrh	r2, [r4, #4]
 8016bd2:	4620      	mov	r0, r4
 8016bd4:	1a9b      	subs	r3, r3, r2
 8016bd6:	88e2      	ldrh	r2, [r4, #6]
 8016bd8:	f8ad 3000 	strh.w	r3, [sp]
 8016bdc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016be0:	1a9b      	subs	r3, r3, r2
 8016be2:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016be6:	6823      	ldr	r3, [r4, #0]
 8016be8:	689b      	ldr	r3, [r3, #8]
 8016bea:	4798      	blx	r3
 8016bec:	69a4      	ldr	r4, [r4, #24]
 8016bee:	2c00      	cmp	r4, #0
 8016bf0:	d1d8      	bne.n	8016ba4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8016bf2:	b002      	add	sp, #8
 8016bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016bf8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8016bf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016bfa:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016bfe:	460d      	mov	r5, r1
 8016c00:	4616      	mov	r6, r2
 8016c02:	b323      	cbz	r3, 8016c4e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8016c04:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016c06:	b314      	cbz	r4, 8016c4e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8016c08:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016c0c:	b1eb      	cbz	r3, 8016c4a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8016c0e:	6828      	ldr	r0, [r5, #0]
 8016c10:	466b      	mov	r3, sp
 8016c12:	6869      	ldr	r1, [r5, #4]
 8016c14:	c303      	stmia	r3!, {r0, r1}
 8016c16:	4668      	mov	r0, sp
 8016c18:	1d21      	adds	r1, r4, #4
 8016c1a:	f7ff ff15 	bl	8016a48 <_ZN8touchgfx4RectaNERKS0_>
 8016c1e:	4668      	mov	r0, sp
 8016c20:	f7ff ff55 	bl	8016ace <_ZNK8touchgfx4Rect7isEmptyEv>
 8016c24:	b988      	cbnz	r0, 8016c4a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8016c26:	f8bd 3000 	ldrh.w	r3, [sp]
 8016c2a:	4669      	mov	r1, sp
 8016c2c:	88a2      	ldrh	r2, [r4, #4]
 8016c2e:	4620      	mov	r0, r4
 8016c30:	1a9b      	subs	r3, r3, r2
 8016c32:	88e2      	ldrh	r2, [r4, #6]
 8016c34:	f8ad 3000 	strh.w	r3, [sp]
 8016c38:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016c3c:	1a9b      	subs	r3, r3, r2
 8016c3e:	4632      	mov	r2, r6
 8016c40:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016c44:	6823      	ldr	r3, [r4, #0]
 8016c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016c48:	4798      	blx	r3
 8016c4a:	69a4      	ldr	r4, [r4, #24]
 8016c4c:	e7db      	b.n	8016c06 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8016c4e:	b002      	add	sp, #8
 8016c50:	bd70      	pop	{r4, r5, r6, pc}

08016c52 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8016c52:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016c56:	4770      	bx	lr

08016c58 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8016c58:	4770      	bx	lr

08016c5a <_ZN8touchgfx3HAL10FlushCacheEv>:
 8016c5a:	4770      	bx	lr

08016c5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8016c5c:	6803      	ldr	r3, [r0, #0]
 8016c5e:	b513      	push	{r0, r1, r4, lr}
 8016c60:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8016c64:	2300      	movs	r3, #0
 8016c66:	e9cd 3300 	strd	r3, r3, [sp]
 8016c6a:	466b      	mov	r3, sp
 8016c6c:	47a0      	blx	r4
 8016c6e:	b002      	add	sp, #8
 8016c70:	bd10      	pop	{r4, pc}

08016c72 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8016c72:	2301      	movs	r3, #1
 8016c74:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016c78:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8016c7c:	4770      	bx	lr

08016c7e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8016c7e:	2301      	movs	r3, #1
 8016c80:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016c84:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8016c88:	4770      	bx	lr

08016c8a <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8016c8a:	6843      	ldr	r3, [r0, #4]
 8016c8c:	2201      	movs	r2, #1
 8016c8e:	725a      	strb	r2, [r3, #9]
 8016c90:	6840      	ldr	r0, [r0, #4]
 8016c92:	6803      	ldr	r3, [r0, #0]
 8016c94:	691b      	ldr	r3, [r3, #16]
 8016c96:	4718      	bx	r3

08016c98 <_ZN8touchgfx3HAL8flushDMAEv>:
 8016c98:	6840      	ldr	r0, [r0, #4]
 8016c9a:	6803      	ldr	r3, [r0, #0]
 8016c9c:	689b      	ldr	r3, [r3, #8]
 8016c9e:	4718      	bx	r3

08016ca0 <_ZN8touchgfx3HAL10beginFrameEv>:
 8016ca0:	4b04      	ldr	r3, [pc, #16]	; (8016cb4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8016ca2:	781b      	ldrb	r3, [r3, #0]
 8016ca4:	b123      	cbz	r3, 8016cb0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8016ca6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8016caa:	f080 0001 	eor.w	r0, r0, #1
 8016cae:	4770      	bx	lr
 8016cb0:	2001      	movs	r0, #1
 8016cb2:	4770      	bx	lr
 8016cb4:	200057de 	.word	0x200057de

08016cb8 <_ZN8touchgfx3HAL8endFrameEv>:
 8016cb8:	b510      	push	{r4, lr}
 8016cba:	4604      	mov	r4, r0
 8016cbc:	6840      	ldr	r0, [r0, #4]
 8016cbe:	6803      	ldr	r3, [r0, #0]
 8016cc0:	689b      	ldr	r3, [r3, #8]
 8016cc2:	4798      	blx	r3
 8016cc4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8016cc8:	b113      	cbz	r3, 8016cd0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8016cca:	2301      	movs	r3, #1
 8016ccc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016cd0:	bd10      	pop	{r4, pc}

08016cd2 <_ZN8touchgfx3HAL9taskEntryEv>:
 8016cd2:	b508      	push	{r3, lr}
 8016cd4:	6803      	ldr	r3, [r0, #0]
 8016cd6:	4604      	mov	r4, r0
 8016cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016cda:	4798      	blx	r3
 8016cdc:	6823      	ldr	r3, [r4, #0]
 8016cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016ce0:	4620      	mov	r0, r4
 8016ce2:	4798      	blx	r3
 8016ce4:	f7fe f82a 	bl	8014d3c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8016ce8:	6823      	ldr	r3, [r4, #0]
 8016cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016cec:	e7f8      	b.n	8016ce0 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08016cf0 <_ZN8touchgfx3HAL4tickEv>:
 8016cf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016cf2:	6803      	ldr	r3, [r0, #0]
 8016cf4:	4604      	mov	r4, r0
 8016cf6:	4d5c      	ldr	r5, [pc, #368]	; (8016e68 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8016cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016cfc:	4798      	blx	r3
 8016cfe:	2800      	cmp	r0, #0
 8016d00:	f000 8097 	beq.w	8016e32 <_ZN8touchgfx3HAL4tickEv+0x142>
 8016d04:	2001      	movs	r0, #1
 8016d06:	2600      	movs	r6, #0
 8016d08:	f7fd fd8e 	bl	8014828 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8016d0c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8016d10:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8016d14:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016d18:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8016d1c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8016d20:	b133      	cbz	r3, 8016d30 <_ZN8touchgfx3HAL4tickEv+0x40>
 8016d22:	6823      	ldr	r3, [r4, #0]
 8016d24:	4620      	mov	r0, r4
 8016d26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8016d2a:	4798      	blx	r3
 8016d2c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8016d30:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8016d34:	2601      	movs	r6, #1
 8016d36:	6862      	ldr	r2, [r4, #4]
 8016d38:	f083 0301 	eor.w	r3, r3, #1
 8016d3c:	702e      	strb	r6, [r5, #0]
 8016d3e:	7253      	strb	r3, [r2, #9]
 8016d40:	f003 f8c8 	bl	8019ed4 <_ZN8touchgfx11Application11getInstanceEv>
 8016d44:	6803      	ldr	r3, [r0, #0]
 8016d46:	4631      	mov	r1, r6
 8016d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d4a:	4798      	blx	r3
 8016d4c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8016d50:	b90b      	cbnz	r3, 8016d56 <_ZN8touchgfx3HAL4tickEv+0x66>
 8016d52:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8016d56:	f003 f8bd 	bl	8019ed4 <_ZN8touchgfx11Application11getInstanceEv>
 8016d5a:	6803      	ldr	r3, [r0, #0]
 8016d5c:	695b      	ldr	r3, [r3, #20]
 8016d5e:	4798      	blx	r3
 8016d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d62:	6803      	ldr	r3, [r0, #0]
 8016d64:	691b      	ldr	r3, [r3, #16]
 8016d66:	4798      	blx	r3
 8016d68:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8016d6c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8016d70:	3b01      	subs	r3, #1
 8016d72:	b2db      	uxtb	r3, r3
 8016d74:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016d78:	b10a      	cbz	r2, 8016d7e <_ZN8touchgfx3HAL4tickEv+0x8e>
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d1eb      	bne.n	8016d56 <_ZN8touchgfx3HAL4tickEv+0x66>
 8016d7e:	4a3b      	ldr	r2, [pc, #236]	; (8016e6c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8016d80:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8016d84:	7813      	ldrb	r3, [r2, #0]
 8016d86:	3301      	adds	r3, #1
 8016d88:	b25b      	sxtb	r3, r3
 8016d8a:	4299      	cmp	r1, r3
 8016d8c:	7013      	strb	r3, [r2, #0]
 8016d8e:	dc10      	bgt.n	8016db2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8016d90:	2300      	movs	r3, #0
 8016d92:	68e0      	ldr	r0, [r4, #12]
 8016d94:	a902      	add	r1, sp, #8
 8016d96:	7013      	strb	r3, [r2, #0]
 8016d98:	aa03      	add	r2, sp, #12
 8016d9a:	6803      	ldr	r3, [r0, #0]
 8016d9c:	68db      	ldr	r3, [r3, #12]
 8016d9e:	4798      	blx	r3
 8016da0:	6823      	ldr	r3, [r4, #0]
 8016da2:	2800      	cmp	r0, #0
 8016da4:	d051      	beq.n	8016e4a <_ZN8touchgfx3HAL4tickEv+0x15a>
 8016da6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016daa:	4620      	mov	r0, r4
 8016dac:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8016db0:	4798      	blx	r3
 8016db2:	2300      	movs	r3, #0
 8016db4:	6960      	ldr	r0, [r4, #20]
 8016db6:	f88d 3007 	strb.w	r3, [sp, #7]
 8016dba:	b158      	cbz	r0, 8016dd4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8016dbc:	6803      	ldr	r3, [r0, #0]
 8016dbe:	f10d 0107 	add.w	r1, sp, #7
 8016dc2:	68db      	ldr	r3, [r3, #12]
 8016dc4:	4798      	blx	r3
 8016dc6:	b128      	cbz	r0, 8016dd4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8016dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016dca:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8016dce:	6803      	ldr	r3, [r0, #0]
 8016dd0:	68db      	ldr	r3, [r3, #12]
 8016dd2:	4798      	blx	r3
 8016dd4:	f104 001c 	add.w	r0, r4, #28
 8016dd8:	f011 fb76 	bl	80284c8 <_ZN8touchgfx8Gestures4tickEv>
 8016ddc:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8016de0:	b30b      	cbz	r3, 8016e26 <_ZN8touchgfx3HAL4tickEv+0x136>
 8016de2:	6920      	ldr	r0, [r4, #16]
 8016de4:	6803      	ldr	r3, [r0, #0]
 8016de6:	691b      	ldr	r3, [r3, #16]
 8016de8:	4798      	blx	r3
 8016dea:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016dec:	4606      	mov	r6, r0
 8016dee:	b903      	cbnz	r3, 8016df2 <_ZN8touchgfx3HAL4tickEv+0x102>
 8016df0:	6720      	str	r0, [r4, #112]	; 0x70
 8016df2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016df4:	4a1e      	ldr	r2, [pc, #120]	; (8016e70 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8016df6:	1af3      	subs	r3, r6, r3
 8016df8:	4293      	cmp	r3, r2
 8016dfa:	d914      	bls.n	8016e26 <_ZN8touchgfx3HAL4tickEv+0x136>
 8016dfc:	6920      	ldr	r0, [r4, #16]
 8016dfe:	6803      	ldr	r3, [r0, #0]
 8016e00:	699b      	ldr	r3, [r3, #24]
 8016e02:	4798      	blx	r3
 8016e04:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016e06:	2264      	movs	r2, #100	; 0x64
 8016e08:	1af3      	subs	r3, r6, r3
 8016e0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8016e0e:	fbb0 f0f3 	udiv	r0, r0, r3
 8016e12:	2800      	cmp	r0, #0
 8016e14:	dc1e      	bgt.n	8016e54 <_ZN8touchgfx3HAL4tickEv+0x164>
 8016e16:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8016e1a:	6920      	ldr	r0, [r4, #16]
 8016e1c:	2100      	movs	r1, #0
 8016e1e:	6803      	ldr	r3, [r0, #0]
 8016e20:	69db      	ldr	r3, [r3, #28]
 8016e22:	4798      	blx	r3
 8016e24:	6726      	str	r6, [r4, #112]	; 0x70
 8016e26:	f003 f855 	bl	8019ed4 <_ZN8touchgfx11Application11getInstanceEv>
 8016e2a:	6803      	ldr	r3, [r0, #0]
 8016e2c:	2100      	movs	r1, #0
 8016e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e30:	4798      	blx	r3
 8016e32:	6823      	ldr	r3, [r4, #0]
 8016e34:	4620      	mov	r0, r4
 8016e36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016e3a:	4798      	blx	r3
 8016e3c:	2001      	movs	r0, #1
 8016e3e:	f7fd fcfe 	bl	801483e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8016e42:	2300      	movs	r3, #0
 8016e44:	702b      	strb	r3, [r5, #0]
 8016e46:	b004      	add	sp, #16
 8016e48:	bd70      	pop	{r4, r5, r6, pc}
 8016e4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8016e4e:	4620      	mov	r0, r4
 8016e50:	4798      	blx	r3
 8016e52:	e7ae      	b.n	8016db2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8016e54:	2863      	cmp	r0, #99	; 0x63
 8016e56:	bfcb      	itete	gt
 8016e58:	2300      	movgt	r3, #0
 8016e5a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8016e5e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8016e62:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8016e66:	e7d8      	b.n	8016e1a <_ZN8touchgfx3HAL4tickEv+0x12a>
 8016e68:	200057e4 	.word	0x200057e4
 8016e6c:	200057e5 	.word	0x200057e5
 8016e70:	05f5e100 	.word	0x05f5e100

08016e74 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8016e74:	f7fd bf2e 	b.w	8014cd4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016e78 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8016e78:	6581      	str	r1, [r0, #88]	; 0x58
 8016e7a:	301c      	adds	r0, #28
 8016e7c:	f011 bb22 	b.w	80284c4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08016e80 <_ZN8touchgfx3HAL5touchEll>:
 8016e80:	b530      	push	{r4, r5, lr}
 8016e82:	b087      	sub	sp, #28
 8016e84:	4604      	mov	r4, r0
 8016e86:	a804      	add	r0, sp, #16
 8016e88:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8016e8c:	f002 fdec 	bl	8019a68 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8016e90:	9b04      	ldr	r3, [sp, #16]
 8016e92:	a906      	add	r1, sp, #24
 8016e94:	a803      	add	r0, sp, #12
 8016e96:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016e9a:	9b05      	ldr	r3, [sp, #20]
 8016e9c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8016ea0:	f002 fe20 	bl	8019ae4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8016ea4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8016ea8:	f104 001c 	add.w	r0, r4, #28
 8016eac:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8016eb0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8016eb4:	b189      	cbz	r1, 8016eda <_ZN8touchgfx3HAL5touchEll+0x5a>
 8016eb6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8016eba:	9300      	str	r3, [sp, #0]
 8016ebc:	4613      	mov	r3, r2
 8016ebe:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8016ec2:	462a      	mov	r2, r5
 8016ec4:	f011 fb0e 	bl	80284e4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8016ec8:	b128      	cbz	r0, 8016ed6 <_ZN8touchgfx3HAL5touchEll+0x56>
 8016eca:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8016ece:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016ed0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016ed4:	6623      	str	r3, [r4, #96]	; 0x60
 8016ed6:	b007      	add	sp, #28
 8016ed8:	bd30      	pop	{r4, r5, pc}
 8016eda:	f011 fb47 	bl	802856c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016ede:	2301      	movs	r3, #1
 8016ee0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016ee4:	e7f1      	b.n	8016eca <_ZN8touchgfx3HAL5touchEll+0x4a>

08016ee6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8016ee6:	b570      	push	{r4, r5, r6, lr}
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d050      	beq.n	8016f8e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016eec:	ea81 0002 	eor.w	r0, r1, r2
 8016ef0:	07c6      	lsls	r6, r0, #31
 8016ef2:	d508      	bpl.n	8016f06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8016ef4:	3a01      	subs	r2, #1
 8016ef6:	18cc      	adds	r4, r1, r3
 8016ef8:	42a1      	cmp	r1, r4
 8016efa:	d048      	beq.n	8016f8e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016efc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8016f00:	f801 0b01 	strb.w	r0, [r1], #1
 8016f04:	e7f8      	b.n	8016ef8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8016f06:	07d5      	lsls	r5, r2, #31
 8016f08:	bf42      	ittt	mi
 8016f0a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8016f0e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8016f12:	f801 0b01 	strbmi.w	r0, [r1], #1
 8016f16:	2b01      	cmp	r3, #1
 8016f18:	d915      	bls.n	8016f46 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8016f1a:	ea82 0001 	eor.w	r0, r2, r1
 8016f1e:	0784      	lsls	r4, r0, #30
 8016f20:	d02d      	beq.n	8016f7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8016f22:	1e94      	subs	r4, r2, #2
 8016f24:	4608      	mov	r0, r1
 8016f26:	18ce      	adds	r6, r1, r3
 8016f28:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8016f2c:	f820 5b02 	strh.w	r5, [r0], #2
 8016f30:	1a35      	subs	r5, r6, r0
 8016f32:	2d01      	cmp	r5, #1
 8016f34:	d8f8      	bhi.n	8016f28 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8016f36:	1e98      	subs	r0, r3, #2
 8016f38:	f003 0301 	and.w	r3, r3, #1
 8016f3c:	f020 0001 	bic.w	r0, r0, #1
 8016f40:	3002      	adds	r0, #2
 8016f42:	4401      	add	r1, r0
 8016f44:	4402      	add	r2, r0
 8016f46:	1f14      	subs	r4, r2, #4
 8016f48:	4608      	mov	r0, r1
 8016f4a:	18ce      	adds	r6, r1, r3
 8016f4c:	1a35      	subs	r5, r6, r0
 8016f4e:	2d03      	cmp	r5, #3
 8016f50:	d810      	bhi.n	8016f74 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8016f52:	089c      	lsrs	r4, r3, #2
 8016f54:	00a0      	lsls	r0, r4, #2
 8016f56:	4401      	add	r1, r0
 8016f58:	3801      	subs	r0, #1
 8016f5a:	4402      	add	r2, r0
 8016f5c:	f06f 0003 	mvn.w	r0, #3
 8016f60:	fb00 3404 	mla	r4, r0, r4, r3
 8016f64:	440c      	add	r4, r1
 8016f66:	42a1      	cmp	r1, r4
 8016f68:	d011      	beq.n	8016f8e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8016f6a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8016f6e:	f801 3b01 	strb.w	r3, [r1], #1
 8016f72:	e7f8      	b.n	8016f66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8016f74:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8016f78:	f840 5b04 	str.w	r5, [r0], #4
 8016f7c:	e7e6      	b.n	8016f4c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8016f7e:	0790      	lsls	r0, r2, #30
 8016f80:	d0e1      	beq.n	8016f46 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8016f82:	f832 0b02 	ldrh.w	r0, [r2], #2
 8016f86:	3b02      	subs	r3, #2
 8016f88:	f821 0b02 	strh.w	r0, [r1], #2
 8016f8c:	e7db      	b.n	8016f46 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8016f8e:	2001      	movs	r0, #1
 8016f90:	bd70      	pop	{r4, r5, r6, pc}

08016f92 <_ZN8touchgfx3HAL7noTouchEv>:
 8016f92:	b510      	push	{r4, lr}
 8016f94:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8016f98:	4604      	mov	r4, r0
 8016f9a:	b153      	cbz	r3, 8016fb2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8016f9c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8016fa0:	2101      	movs	r1, #1
 8016fa2:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8016fa6:	301c      	adds	r0, #28
 8016fa8:	f011 fae0 	bl	802856c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016fac:	2300      	movs	r3, #0
 8016fae:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016fb2:	bd10      	pop	{r4, pc}

08016fb4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8016fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016fb8:	4604      	mov	r4, r0
 8016fba:	6980      	ldr	r0, [r0, #24]
 8016fbc:	b085      	sub	sp, #20
 8016fbe:	460f      	mov	r7, r1
 8016fc0:	4690      	mov	r8, r2
 8016fc2:	4699      	mov	r9, r3
 8016fc4:	b930      	cbnz	r0, 8016fd4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8016fc6:	4b1c      	ldr	r3, [pc, #112]	; (8017038 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8016fc8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8016fcc:	4a1b      	ldr	r2, [pc, #108]	; (801703c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8016fce:	481c      	ldr	r0, [pc, #112]	; (8017040 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8016fd0:	f011 fb62 	bl	8028698 <__assert_func>
 8016fd4:	ad04      	add	r5, sp, #16
 8016fd6:	2600      	movs	r6, #0
 8016fd8:	f845 6d04 	str.w	r6, [r5, #-4]!
 8016fdc:	6806      	ldr	r6, [r0, #0]
 8016fde:	9501      	str	r5, [sp, #4]
 8016fe0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8016fe4:	9500      	str	r5, [sp, #0]
 8016fe6:	6835      	ldr	r5, [r6, #0]
 8016fe8:	47a8      	blx	r5
 8016fea:	4d16      	ldr	r5, [pc, #88]	; (8017044 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8016fec:	4606      	mov	r6, r0
 8016fee:	f8a5 9000 	strh.w	r9, [r5]
 8016ff2:	f7fa fffb 	bl	8011fec <_ZN8touchgfx3HAL3lcdEv>
 8016ff6:	6803      	ldr	r3, [r0, #0]
 8016ff8:	6a1b      	ldr	r3, [r3, #32]
 8016ffa:	4798      	blx	r3
 8016ffc:	2801      	cmp	r0, #1
 8016ffe:	d012      	beq.n	8017026 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8017000:	d306      	bcc.n	8017010 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8017002:	280d      	cmp	r0, #13
 8017004:	d80b      	bhi.n	801701e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8017006:	4b10      	ldr	r3, [pc, #64]	; (8017048 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8017008:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801700c:	4a0b      	ldr	r2, [pc, #44]	; (801703c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801700e:	e7de      	b.n	8016fce <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8017010:	882b      	ldrh	r3, [r5, #0]
 8017012:	fb08 7203 	mla	r2, r8, r3, r7
 8017016:	9b03      	ldr	r3, [sp, #12]
 8017018:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801701c:	63e3      	str	r3, [r4, #60]	; 0x3c
 801701e:	4630      	mov	r0, r6
 8017020:	b005      	add	sp, #20
 8017022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017026:	882a      	ldrh	r2, [r5, #0]
 8017028:	9b03      	ldr	r3, [sp, #12]
 801702a:	fb08 7202 	mla	r2, r8, r2, r7
 801702e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017032:	1a9a      	subs	r2, r3, r2
 8017034:	63e2      	str	r2, [r4, #60]	; 0x3c
 8017036:	e7f2      	b.n	801701e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8017038:	0802b50d 	.word	0x0802b50d
 801703c:	0802b826 	.word	0x0802b826
 8017040:	0802b552 	.word	0x0802b552
 8017044:	200057da 	.word	0x200057da
 8017048:	0802b578 	.word	0x0802b578

0801704c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801704c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017050:	4698      	mov	r8, r3
 8017052:	6803      	ldr	r3, [r0, #0]
 8017054:	b087      	sub	sp, #28
 8017056:	460e      	mov	r6, r1
 8017058:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801705a:	4617      	mov	r7, r2
 801705c:	4b0d      	ldr	r3, [pc, #52]	; (8017094 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801705e:	4604      	mov	r4, r0
 8017060:	f8b3 9000 	ldrh.w	r9, [r3]
 8017064:	f7fa ffc2 	bl	8011fec <_ZN8touchgfx3HAL3lcdEv>
 8017068:	6803      	ldr	r3, [r0, #0]
 801706a:	6a1b      	ldr	r3, [r3, #32]
 801706c:	4798      	blx	r3
 801706e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8017072:	463a      	mov	r2, r7
 8017074:	4631      	mov	r1, r6
 8017076:	9302      	str	r3, [sp, #8]
 8017078:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801707c:	9301      	str	r3, [sp, #4]
 801707e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017082:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8017086:	9300      	str	r3, [sp, #0]
 8017088:	4620      	mov	r0, r4
 801708a:	4643      	mov	r3, r8
 801708c:	47a8      	blx	r5
 801708e:	b007      	add	sp, #28
 8017090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017094:	200057da 	.word	0x200057da

08017098 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8017098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801709c:	4604      	mov	r4, r0
 801709e:	b08b      	sub	sp, #44	; 0x2c
 80170a0:	4610      	mov	r0, r2
 80170a2:	460d      	mov	r5, r1
 80170a4:	4691      	mov	r9, r2
 80170a6:	461e      	mov	r6, r3
 80170a8:	f005 fc12 	bl	801c8d0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80170ac:	2800      	cmp	r0, #0
 80170ae:	f000 80a0 	beq.w	80171f2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80170b2:	6823      	ldr	r3, [r4, #0]
 80170b4:	4620      	mov	r0, r4
 80170b6:	f8df b170 	ldr.w	fp, [pc, #368]	; 8017228 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>
 80170ba:	af0a      	add	r7, sp, #40	; 0x28
 80170bc:	6a1b      	ldr	r3, [r3, #32]
 80170be:	4798      	blx	r3
 80170c0:	6823      	ldr	r3, [r4, #0]
 80170c2:	4620      	mov	r0, r4
 80170c4:	f8df a164 	ldr.w	sl, [pc, #356]	; 801722c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>
 80170c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170ca:	4798      	blx	r3
 80170cc:	f8bb 3000 	ldrh.w	r3, [fp]
 80170d0:	f827 9d0c 	strh.w	r9, [r7, #-12]!
 80170d4:	4638      	mov	r0, r7
 80170d6:	9301      	str	r3, [sp, #4]
 80170d8:	f8ba 3000 	ldrh.w	r3, [sl]
 80170dc:	9302      	str	r3, [sp, #8]
 80170de:	4b4f      	ldr	r3, [pc, #316]	; (801721c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 80170e0:	881a      	ldrh	r2, [r3, #0]
 80170e2:	4698      	mov	r8, r3
 80170e4:	9203      	str	r2, [sp, #12]
 80170e6:	4a4e      	ldr	r2, [pc, #312]	; (8017220 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 80170e8:	8812      	ldrh	r2, [r2, #0]
 80170ea:	9204      	str	r2, [sp, #16]
 80170ec:	4a4d      	ldr	r2, [pc, #308]	; (8017224 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18c>)
 80170ee:	7812      	ldrb	r2, [r2, #0]
 80170f0:	2a00      	cmp	r2, #0
 80170f2:	f040 8081 	bne.w	80171f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x160>
 80170f6:	f005 fca5 	bl	801ca44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80170fa:	f8ab 0000 	strh.w	r0, [fp]
 80170fe:	4638      	mov	r0, r7
 8017100:	f005 fcda 	bl	801cab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017104:	f8aa 0000 	strh.w	r0, [sl]
 8017108:	4638      	mov	r0, r7
 801710a:	f005 fc9b 	bl	801ca44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801710e:	f8a8 0000 	strh.w	r0, [r8]
 8017112:	4638      	mov	r0, r7
 8017114:	f005 fcd0 	bl	801cab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017118:	4b41      	ldr	r3, [pc, #260]	; (8017220 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 801711a:	8018      	strh	r0, [r3, #0]
 801711c:	4648      	mov	r0, r9
 801711e:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8017122:	f005 fbd5 	bl	801c8d0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017126:	2200      	movs	r2, #0
 8017128:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801712c:	4611      	mov	r1, r2
 801712e:	4628      	mov	r0, r5
 8017130:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8017134:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8017138:	f7fa fe55 	bl	8011de6 <_ZN8touchgfx8Drawable5setXYEss>
 801713c:	2301      	movs	r3, #1
 801713e:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8017142:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8017146:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801714a:	2b00      	cmp	r3, #0
 801714c:	dd5c      	ble.n	8017208 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 801714e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017152:	2b00      	cmp	r3, #0
 8017154:	dd58      	ble.n	8017208 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 8017156:	462a      	mov	r2, r5
 8017158:	ab08      	add	r3, sp, #32
 801715a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801715e:	6851      	ldr	r1, [r2, #4]
 8017160:	c303      	stmia	r3!, {r0, r1}
 8017162:	4631      	mov	r1, r6
 8017164:	a808      	add	r0, sp, #32
 8017166:	f7ff fc6f 	bl	8016a48 <_ZN8touchgfx4RectaNERKS0_>
 801716a:	a807      	add	r0, sp, #28
 801716c:	f005 fdfc 	bl	801cd68 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017170:	4606      	mov	r6, r0
 8017172:	f7fa ff3b 	bl	8011fec <_ZN8touchgfx3HAL3lcdEv>
 8017176:	6803      	ldr	r3, [r0, #0]
 8017178:	6a1b      	ldr	r3, [r3, #32]
 801717a:	4798      	blx	r3
 801717c:	4286      	cmp	r6, r0
 801717e:	d04a      	beq.n	8017216 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x17e>
 8017180:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017182:	b150      	cbz	r0, 801719a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 8017184:	a807      	add	r0, sp, #28
 8017186:	f005 fdef 	bl	801cd68 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801718a:	4606      	mov	r6, r0
 801718c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801718e:	6803      	ldr	r3, [r0, #0]
 8017190:	6a1b      	ldr	r3, [r3, #32]
 8017192:	4798      	blx	r3
 8017194:	1a33      	subs	r3, r6, r0
 8017196:	4258      	negs	r0, r3
 8017198:	4158      	adcs	r0, r3
 801719a:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 801719e:	2600      	movs	r6, #0
 80171a0:	696b      	ldr	r3, [r5, #20]
 80171a2:	a908      	add	r1, sp, #32
 80171a4:	682a      	ldr	r2, [r5, #0]
 80171a6:	4628      	mov	r0, r5
 80171a8:	9305      	str	r3, [sp, #20]
 80171aa:	616e      	str	r6, [r5, #20]
 80171ac:	6892      	ldr	r2, [r2, #8]
 80171ae:	4790      	blx	r2
 80171b0:	9b05      	ldr	r3, [sp, #20]
 80171b2:	4652      	mov	r2, sl
 80171b4:	4649      	mov	r1, r9
 80171b6:	616b      	str	r3, [r5, #20]
 80171b8:	4628      	mov	r0, r5
 80171ba:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80171be:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80171c2:	f7fa fe10 	bl	8011de6 <_ZN8touchgfx8Drawable5setXYEss>
 80171c6:	9a01      	ldr	r2, [sp, #4]
 80171c8:	4b17      	ldr	r3, [pc, #92]	; (8017228 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>)
 80171ca:	4620      	mov	r0, r4
 80171cc:	801a      	strh	r2, [r3, #0]
 80171ce:	9a02      	ldr	r2, [sp, #8]
 80171d0:	4b16      	ldr	r3, [pc, #88]	; (801722c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>)
 80171d2:	801a      	strh	r2, [r3, #0]
 80171d4:	9a03      	ldr	r2, [sp, #12]
 80171d6:	4b11      	ldr	r3, [pc, #68]	; (801721c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 80171d8:	801a      	strh	r2, [r3, #0]
 80171da:	4b11      	ldr	r3, [pc, #68]	; (8017220 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 80171dc:	9a04      	ldr	r2, [sp, #16]
 80171de:	801a      	strh	r2, [r3, #0]
 80171e0:	6823      	ldr	r3, [r4, #0]
 80171e2:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 80171e6:	6a1b      	ldr	r3, [r3, #32]
 80171e8:	4798      	blx	r3
 80171ea:	6823      	ldr	r3, [r4, #0]
 80171ec:	4620      	mov	r0, r4
 80171ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171f0:	4798      	blx	r3
 80171f2:	b00b      	add	sp, #44	; 0x2c
 80171f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171f8:	f005 fc5e 	bl	801cab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80171fc:	f8ab 0000 	strh.w	r0, [fp]
 8017200:	4638      	mov	r0, r7
 8017202:	f005 fc1f 	bl	801ca44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017206:	e77d      	b.n	8017104 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x6c>
 8017208:	462a      	mov	r2, r5
 801720a:	ab08      	add	r3, sp, #32
 801720c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017210:	6851      	ldr	r1, [r2, #4]
 8017212:	c303      	stmia	r3!, {r0, r1}
 8017214:	e7a9      	b.n	801716a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xd2>
 8017216:	2000      	movs	r0, #0
 8017218:	e7bf      	b.n	801719a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 801721a:	bf00      	nop
 801721c:	200057d4 	.word	0x200057d4
 8017220:	200057d6 	.word	0x200057d6
 8017224:	200057d8 	.word	0x200057d8
 8017228:	200057da 	.word	0x200057da
 801722c:	200057dc 	.word	0x200057dc

08017230 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8017230:	4b07      	ldr	r3, [pc, #28]	; (8017250 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8017232:	b510      	push	{r4, lr}
 8017234:	781b      	ldrb	r3, [r3, #0]
 8017236:	4604      	mov	r4, r0
 8017238:	b13b      	cbz	r3, 801724a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801723a:	6803      	ldr	r3, [r0, #0]
 801723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801723e:	4798      	blx	r3
 8017240:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017242:	4283      	cmp	r3, r0
 8017244:	d101      	bne.n	801724a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017246:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017248:	bd10      	pop	{r4, pc}
 801724a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801724c:	e7fc      	b.n	8017248 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801724e:	bf00      	nop
 8017250:	200057de 	.word	0x200057de

08017254 <_ZN8touchgfx3HAL10initializeEv>:
 8017254:	b510      	push	{r4, lr}
 8017256:	4604      	mov	r4, r0
 8017258:	f7fd fcfa 	bl	8014c50 <_ZN8touchgfx10OSWrappers10initializeEv>
 801725c:	6860      	ldr	r0, [r4, #4]
 801725e:	6803      	ldr	r3, [r0, #0]
 8017260:	68db      	ldr	r3, [r3, #12]
 8017262:	4798      	blx	r3
 8017264:	68e0      	ldr	r0, [r4, #12]
 8017266:	6803      	ldr	r3, [r0, #0]
 8017268:	689b      	ldr	r3, [r3, #8]
 801726a:	4798      	blx	r3
 801726c:	6823      	ldr	r3, [r4, #0]
 801726e:	4620      	mov	r0, r4
 8017270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017276:	4718      	bx	r3

08017278 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8017278:	b508      	push	{r3, lr}
 801727a:	290d      	cmp	r1, #13
 801727c:	d817      	bhi.n	80172ae <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801727e:	e8df f001 	tbb	[pc, r1]
 8017282:	090b      	.short	0x090b
 8017284:	0d0d0d07 	.word	0x0d0d0d07
 8017288:	1414140d 	.word	0x1414140d
 801728c:	0d0d1414 	.word	0x0d0d1414
 8017290:	2020      	movs	r0, #32
 8017292:	bd08      	pop	{r3, pc}
 8017294:	2018      	movs	r0, #24
 8017296:	e7fc      	b.n	8017292 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017298:	2010      	movs	r0, #16
 801729a:	e7fa      	b.n	8017292 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801729c:	4b05      	ldr	r3, [pc, #20]	; (80172b4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801729e:	f44f 7111 	mov.w	r1, #580	; 0x244
 80172a2:	4a05      	ldr	r2, [pc, #20]	; (80172b8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80172a4:	4805      	ldr	r0, [pc, #20]	; (80172bc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80172a6:	f011 f9f7 	bl	8028698 <__assert_func>
 80172aa:	2008      	movs	r0, #8
 80172ac:	e7f1      	b.n	8017292 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80172ae:	2000      	movs	r0, #0
 80172b0:	e7ef      	b.n	8017292 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80172b2:	bf00      	nop
 80172b4:	0802b64b 	.word	0x0802b64b
 80172b8:	0802b9e8 	.word	0x0802b9e8
 80172bc:	0802b552 	.word	0x0802b552

080172c0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80172c0:	b570      	push	{r4, r5, r6, lr}
 80172c2:	460d      	mov	r5, r1
 80172c4:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80172c8:	4616      	mov	r6, r2
 80172ca:	461c      	mov	r4, r3
 80172cc:	f7ff ffd4 	bl	8017278 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80172d0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80172d4:	10c0      	asrs	r0, r0, #3
 80172d6:	fb06 5101 	mla	r1, r6, r1, r5
 80172da:	fb00 4001 	mla	r0, r0, r1, r4
 80172de:	bd70      	pop	{r4, r5, r6, pc}

080172e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80172e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172e4:	b08a      	sub	sp, #40	; 0x28
 80172e6:	f04f 0c00 	mov.w	ip, #0
 80172ea:	4604      	mov	r4, r0
 80172ec:	469a      	mov	sl, r3
 80172ee:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80172f2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80172f6:	f1b8 0f02 	cmp.w	r8, #2
 80172fa:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80172fe:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8017302:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8017306:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801730a:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801730e:	f8cd c020 	str.w	ip, [sp, #32]
 8017312:	d030      	beq.n	8017376 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8017314:	2bff      	cmp	r3, #255	; 0xff
 8017316:	d12c      	bne.n	8017372 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8017318:	4560      	cmp	r0, ip
 801731a:	bf14      	ite	ne
 801731c:	2004      	movne	r0, #4
 801731e:	2001      	moveq	r0, #1
 8017320:	9204      	str	r2, [sp, #16]
 8017322:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8017326:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801732a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801732e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8017332:	f8ad 501a 	strh.w	r5, [sp, #26]
 8017336:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801733a:	4620      	mov	r0, r4
 801733c:	f7ff ff78 	bl	8017230 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017340:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8017344:	4603      	mov	r3, r0
 8017346:	4651      	mov	r1, sl
 8017348:	4620      	mov	r0, r4
 801734a:	e9cd 9700 	strd	r9, r7, [sp]
 801734e:	f7ff ffb7 	bl	80172c0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8017352:	f8ad 901e 	strh.w	r9, [sp, #30]
 8017356:	9005      	str	r0, [sp, #20]
 8017358:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 801735c:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8017360:	b106      	cbz	r6, 8017364 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8017362:	b98d      	cbnz	r5, 8017388 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8017364:	4b12      	ldr	r3, [pc, #72]	; (80173b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8017366:	f240 11c3 	movw	r1, #451	; 0x1c3
 801736a:	4a12      	ldr	r2, [pc, #72]	; (80173b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801736c:	4812      	ldr	r0, [pc, #72]	; (80173b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801736e:	f011 f993 	bl	8028698 <__assert_func>
 8017372:	2004      	movs	r0, #4
 8017374:	e7d4      	b.n	8017320 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8017376:	2bff      	cmp	r3, #255	; 0xff
 8017378:	d104      	bne.n	8017384 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801737a:	2800      	cmp	r0, #0
 801737c:	bf14      	ite	ne
 801737e:	2040      	movne	r0, #64	; 0x40
 8017380:	2020      	moveq	r0, #32
 8017382:	e7cd      	b.n	8017320 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8017384:	2040      	movs	r0, #64	; 0x40
 8017386:	e7cb      	b.n	8017320 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8017388:	6823      	ldr	r3, [r4, #0]
 801738a:	4620      	mov	r0, r4
 801738c:	9d02      	ldr	r5, [sp, #8]
 801738e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017390:	4798      	blx	r3
 8017392:	4228      	tst	r0, r5
 8017394:	d104      	bne.n	80173a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8017396:	4b09      	ldr	r3, [pc, #36]	; (80173bc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8017398:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 801739c:	4a05      	ldr	r2, [pc, #20]	; (80173b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801739e:	e7e5      	b.n	801736c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 80173a0:	6860      	ldr	r0, [r4, #4]
 80173a2:	a902      	add	r1, sp, #8
 80173a4:	6803      	ldr	r3, [r0, #0]
 80173a6:	685b      	ldr	r3, [r3, #4]
 80173a8:	4798      	blx	r3
 80173aa:	b00a      	add	sp, #40	; 0x28
 80173ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173b0:	0802b5ce 	.word	0x0802b5ce
 80173b4:	0802b88a 	.word	0x0802b88a
 80173b8:	0802b552 	.word	0x0802b552
 80173bc:	0802b606 	.word	0x0802b606

080173c0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 80173c0:	b510      	push	{r4, lr}
 80173c2:	b08a      	sub	sp, #40	; 0x28
 80173c4:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80173c8:	9408      	str	r4, [sp, #32]
 80173ca:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80173ce:	9407      	str	r4, [sp, #28]
 80173d0:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 80173d4:	9406      	str	r4, [sp, #24]
 80173d6:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80173da:	9405      	str	r4, [sp, #20]
 80173dc:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 80173e0:	9404      	str	r4, [sp, #16]
 80173e2:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80173e6:	9403      	str	r4, [sp, #12]
 80173e8:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80173ec:	9402      	str	r4, [sp, #8]
 80173ee:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80173f2:	e9cd 3400 	strd	r3, r4, [sp]
 80173f6:	4613      	mov	r3, r2
 80173f8:	2200      	movs	r2, #0
 80173fa:	f7ff ff71 	bl	80172e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80173fe:	b00a      	add	sp, #40	; 0x28
 8017400:	bd10      	pop	{r4, pc}
	...

08017404 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8017404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017406:	b08b      	sub	sp, #44	; 0x2c
 8017408:	4616      	mov	r6, r2
 801740a:	460d      	mov	r5, r1
 801740c:	461f      	mov	r7, r3
 801740e:	4604      	mov	r4, r0
 8017410:	f7fa fdec 	bl	8011fec <_ZN8touchgfx3HAL3lcdEv>
 8017414:	6803      	ldr	r3, [r0, #0]
 8017416:	6a1b      	ldr	r3, [r3, #32]
 8017418:	4798      	blx	r3
 801741a:	4b0e      	ldr	r3, [pc, #56]	; (8017454 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 801741c:	2200      	movs	r2, #0
 801741e:	4629      	mov	r1, r5
 8017420:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8017424:	881b      	ldrh	r3, [r3, #0]
 8017426:	4620      	mov	r0, r4
 8017428:	9306      	str	r3, [sp, #24]
 801742a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801742e:	9305      	str	r3, [sp, #20]
 8017430:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017434:	9304      	str	r3, [sp, #16]
 8017436:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801743a:	9303      	str	r3, [sp, #12]
 801743c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017440:	9302      	str	r3, [sp, #8]
 8017442:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017446:	e9cd 7300 	strd	r7, r3, [sp]
 801744a:	4633      	mov	r3, r6
 801744c:	f7ff ff48 	bl	80172e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8017450:	b00b      	add	sp, #44	; 0x2c
 8017452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017454:	200057da 	.word	0x200057da

08017458 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8017458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801745c:	461f      	mov	r7, r3
 801745e:	4b14      	ldr	r3, [pc, #80]	; (80174b0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8017460:	b08a      	sub	sp, #40	; 0x28
 8017462:	4616      	mov	r6, r2
 8017464:	f8b3 8000 	ldrh.w	r8, [r3]
 8017468:	460d      	mov	r5, r1
 801746a:	4604      	mov	r4, r0
 801746c:	f7fa fdbe 	bl	8011fec <_ZN8touchgfx3HAL3lcdEv>
 8017470:	6803      	ldr	r3, [r0, #0]
 8017472:	6a1b      	ldr	r3, [r3, #32]
 8017474:	4798      	blx	r3
 8017476:	2302      	movs	r3, #2
 8017478:	9008      	str	r0, [sp, #32]
 801747a:	2200      	movs	r2, #0
 801747c:	4629      	mov	r1, r5
 801747e:	4620      	mov	r0, r4
 8017480:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8017484:	2301      	movs	r3, #1
 8017486:	9305      	str	r3, [sp, #20]
 8017488:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801748c:	9304      	str	r3, [sp, #16]
 801748e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017492:	9303      	str	r3, [sp, #12]
 8017494:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017498:	9302      	str	r3, [sp, #8]
 801749a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801749e:	e9cd 7300 	strd	r7, r3, [sp]
 80174a2:	4633      	mov	r3, r6
 80174a4:	f7ff ff1c 	bl	80172e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80174a8:	b00a      	add	sp, #40	; 0x28
 80174aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174ae:	bf00      	nop
 80174b0:	200057da 	.word	0x200057da

080174b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 80174b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174b8:	b08b      	sub	sp, #44	; 0x2c
 80174ba:	469b      	mov	fp, r3
 80174bc:	4604      	mov	r4, r0
 80174be:	4692      	mov	sl, r2
 80174c0:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80174c4:	2600      	movs	r6, #0
 80174c6:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80174ca:	4689      	mov	r9, r1
 80174cc:	2fff      	cmp	r7, #255	; 0xff
 80174ce:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80174d2:	9608      	str	r6, [sp, #32]
 80174d4:	bf14      	ite	ne
 80174d6:	2308      	movne	r3, #8
 80174d8:	2302      	moveq	r3, #2
 80174da:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80174de:	f7ff fea7 	bl	8017230 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80174e2:	465a      	mov	r2, fp
 80174e4:	4603      	mov	r3, r0
 80174e6:	4651      	mov	r1, sl
 80174e8:	4620      	mov	r0, r4
 80174ea:	e9cd 8500 	strd	r8, r5, [sp]
 80174ee:	f7ff fee7 	bl	80172c0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80174f2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80174f6:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80174fa:	f8ad 3018 	strh.w	r3, [sp, #24]
 80174fe:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8017502:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8017506:	f8ad 301a 	strh.w	r3, [sp, #26]
 801750a:	6823      	ldr	r3, [r4, #0]
 801750c:	9d02      	ldr	r5, [sp, #8]
 801750e:	9005      	str	r0, [sp, #20]
 8017510:	4620      	mov	r0, r4
 8017512:	f8ad 601c 	strh.w	r6, [sp, #28]
 8017516:	f8ad 801e 	strh.w	r8, [sp, #30]
 801751a:	f8cd 9020 	str.w	r9, [sp, #32]
 801751e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8017522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017524:	4798      	blx	r3
 8017526:	4228      	tst	r0, r5
 8017528:	d106      	bne.n	8017538 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801752a:	4b07      	ldr	r3, [pc, #28]	; (8017548 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 801752c:	f240 11fb 	movw	r1, #507	; 0x1fb
 8017530:	4a06      	ldr	r2, [pc, #24]	; (801754c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8017532:	4807      	ldr	r0, [pc, #28]	; (8017550 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8017534:	f011 f8b0 	bl	8028698 <__assert_func>
 8017538:	6860      	ldr	r0, [r4, #4]
 801753a:	a902      	add	r1, sp, #8
 801753c:	6803      	ldr	r3, [r0, #0]
 801753e:	685b      	ldr	r3, [r3, #4]
 8017540:	4798      	blx	r3
 8017542:	b00b      	add	sp, #44	; 0x2c
 8017544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017548:	0802b606 	.word	0x0802b606
 801754c:	0802b953 	.word	0x0802b953
 8017550:	0802b552 	.word	0x0802b552

08017554 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8017554:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017558:	461f      	mov	r7, r3
 801755a:	4b0b      	ldr	r3, [pc, #44]	; (8017588 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801755c:	460d      	mov	r5, r1
 801755e:	4616      	mov	r6, r2
 8017560:	f8b3 8000 	ldrh.w	r8, [r3]
 8017564:	4604      	mov	r4, r0
 8017566:	f7fa fd41 	bl	8011fec <_ZN8touchgfx3HAL3lcdEv>
 801756a:	6803      	ldr	r3, [r0, #0]
 801756c:	6a1b      	ldr	r3, [r3, #32]
 801756e:	4798      	blx	r3
 8017570:	463b      	mov	r3, r7
 8017572:	4632      	mov	r2, r6
 8017574:	4629      	mov	r1, r5
 8017576:	e9cd 8000 	strd	r8, r0, [sp]
 801757a:	4620      	mov	r0, r4
 801757c:	f7ff fea0 	bl	80172c0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8017580:	b002      	add	sp, #8
 8017582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017586:	bf00      	nop
 8017588:	200057da 	.word	0x200057da

0801758c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801758c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017590:	4698      	mov	r8, r3
 8017592:	b088      	sub	sp, #32
 8017594:	2300      	movs	r3, #0
 8017596:	4617      	mov	r7, r2
 8017598:	4604      	mov	r4, r0
 801759a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801759e:	9306      	str	r3, [sp, #24]
 80175a0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80175a4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80175a8:	f8ad 6010 	strh.w	r6, [sp, #16]
 80175ac:	f8ad 5012 	strh.w	r5, [sp, #18]
 80175b0:	e9cd 3100 	strd	r3, r1, [sp]
 80175b4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80175b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80175bc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80175c0:	f88d 301c 	strb.w	r3, [sp, #28]
 80175c4:	f7ff fe34 	bl	8017230 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80175c8:	4642      	mov	r2, r8
 80175ca:	4603      	mov	r3, r0
 80175cc:	4639      	mov	r1, r7
 80175ce:	4620      	mov	r0, r4
 80175d0:	f7ff ffc0 	bl	8017554 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80175d4:	4b16      	ldr	r3, [pc, #88]	; (8017630 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 80175d6:	9003      	str	r0, [sp, #12]
 80175d8:	881b      	ldrh	r3, [r3, #0]
 80175da:	f8ad 3016 	strh.w	r3, [sp, #22]
 80175de:	f7fa fd05 	bl	8011fec <_ZN8touchgfx3HAL3lcdEv>
 80175e2:	6803      	ldr	r3, [r0, #0]
 80175e4:	6a1b      	ldr	r3, [r3, #32]
 80175e6:	4798      	blx	r3
 80175e8:	f88d 001e 	strb.w	r0, [sp, #30]
 80175ec:	f88d 001d 	strb.w	r0, [sp, #29]
 80175f0:	b106      	cbz	r6, 80175f4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 80175f2:	b935      	cbnz	r5, 8017602 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80175f4:	4b0f      	ldr	r3, [pc, #60]	; (8017634 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80175f6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80175fa:	4a0f      	ldr	r2, [pc, #60]	; (8017638 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80175fc:	480f      	ldr	r0, [pc, #60]	; (801763c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 80175fe:	f011 f84b 	bl	8028698 <__assert_func>
 8017602:	6823      	ldr	r3, [r4, #0]
 8017604:	4620      	mov	r0, r4
 8017606:	9d00      	ldr	r5, [sp, #0]
 8017608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801760a:	4798      	blx	r3
 801760c:	4228      	tst	r0, r5
 801760e:	d104      	bne.n	801761a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8017610:	4b0b      	ldr	r3, [pc, #44]	; (8017640 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8017612:	f240 11e1 	movw	r1, #481	; 0x1e1
 8017616:	4a08      	ldr	r2, [pc, #32]	; (8017638 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8017618:	e7f0      	b.n	80175fc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801761a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801761c:	4669      	mov	r1, sp
 801761e:	6860      	ldr	r0, [r4, #4]
 8017620:	9306      	str	r3, [sp, #24]
 8017622:	6803      	ldr	r3, [r0, #0]
 8017624:	685b      	ldr	r3, [r3, #4]
 8017626:	4798      	blx	r3
 8017628:	b008      	add	sp, #32
 801762a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801762e:	bf00      	nop
 8017630:	200057da 	.word	0x200057da
 8017634:	0802b5ce 	.word	0x0802b5ce
 8017638:	0802b73c 	.word	0x0802b73c
 801763c:	0802b552 	.word	0x0802b552
 8017640:	0802b606 	.word	0x0802b606

08017644 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8017644:	b570      	push	{r4, r5, r6, lr}
 8017646:	b08a      	sub	sp, #40	; 0x28
 8017648:	4604      	mov	r4, r0
 801764a:	466b      	mov	r3, sp
 801764c:	e883 0006 	stmia.w	r3, {r1, r2}
 8017650:	4b1f      	ldr	r3, [pc, #124]	; (80176d0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8017652:	781b      	ldrb	r3, [r3, #0]
 8017654:	b933      	cbnz	r3, 8017664 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8017656:	4b1f      	ldr	r3, [pc, #124]	; (80176d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8017658:	f44f 7103 	mov.w	r1, #524	; 0x20c
 801765c:	4a1e      	ldr	r2, [pc, #120]	; (80176d8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801765e:	481f      	ldr	r0, [pc, #124]	; (80176dc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8017660:	f011 f81a 	bl	8028698 <__assert_func>
 8017664:	2300      	movs	r3, #0
 8017666:	f8bd 5000 	ldrh.w	r5, [sp]
 801766a:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801766e:	9308      	str	r3, [sp, #32]
 8017670:	2301      	movs	r3, #1
 8017672:	9302      	str	r3, [sp, #8]
 8017674:	6803      	ldr	r3, [r0, #0]
 8017676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017678:	4798      	blx	r3
 801767a:	4632      	mov	r2, r6
 801767c:	4629      	mov	r1, r5
 801767e:	4603      	mov	r3, r0
 8017680:	4620      	mov	r0, r4
 8017682:	f7ff ff67 	bl	8017554 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017686:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017688:	9003      	str	r0, [sp, #12]
 801768a:	9305      	str	r3, [sp, #20]
 801768c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017690:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017694:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017698:	f8ad 301a 	strh.w	r3, [sp, #26]
 801769c:	4b10      	ldr	r3, [pc, #64]	; (80176e0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801769e:	881b      	ldrh	r3, [r3, #0]
 80176a0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80176a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80176a8:	f7fa fca0 	bl	8011fec <_ZN8touchgfx3HAL3lcdEv>
 80176ac:	6803      	ldr	r3, [r0, #0]
 80176ae:	6a1b      	ldr	r3, [r3, #32]
 80176b0:	4798      	blx	r3
 80176b2:	23ff      	movs	r3, #255	; 0xff
 80176b4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80176b8:	a902      	add	r1, sp, #8
 80176ba:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80176be:	6860      	ldr	r0, [r4, #4]
 80176c0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80176c4:	6803      	ldr	r3, [r0, #0]
 80176c6:	685b      	ldr	r3, [r3, #4]
 80176c8:	4798      	blx	r3
 80176ca:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80176cc:	b00a      	add	sp, #40	; 0x28
 80176ce:	bd70      	pop	{r4, r5, r6, pc}
 80176d0:	200057df 	.word	0x200057df
 80176d4:	0802b49f 	.word	0x0802b49f
 80176d8:	0802b7e0 	.word	0x0802b7e0
 80176dc:	0802b552 	.word	0x0802b552
 80176e0:	200057da 	.word	0x200057da

080176e4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80176e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176e6:	b08b      	sub	sp, #44	; 0x2c
 80176e8:	4604      	mov	r4, r0
 80176ea:	466d      	mov	r5, sp
 80176ec:	e885 0006 	stmia.w	r5, {r1, r2}
 80176f0:	461d      	mov	r5, r3
 80176f2:	2300      	movs	r3, #0
 80176f4:	f8bd 6000 	ldrh.w	r6, [sp]
 80176f8:	9308      	str	r3, [sp, #32]
 80176fa:	2301      	movs	r3, #1
 80176fc:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8017700:	9302      	str	r3, [sp, #8]
 8017702:	6803      	ldr	r3, [r0, #0]
 8017704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017706:	4798      	blx	r3
 8017708:	463a      	mov	r2, r7
 801770a:	4631      	mov	r1, r6
 801770c:	4603      	mov	r3, r0
 801770e:	4620      	mov	r0, r4
 8017710:	f7ff ff20 	bl	8017554 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017714:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017718:	9003      	str	r0, [sp, #12]
 801771a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801771e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017722:	9505      	str	r5, [sp, #20]
 8017724:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017728:	4b0d      	ldr	r3, [pc, #52]	; (8017760 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801772a:	881b      	ldrh	r3, [r3, #0]
 801772c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017730:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017732:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017736:	f7fa fc59 	bl	8011fec <_ZN8touchgfx3HAL3lcdEv>
 801773a:	6803      	ldr	r3, [r0, #0]
 801773c:	6a1b      	ldr	r3, [r3, #32]
 801773e:	4798      	blx	r3
 8017740:	23ff      	movs	r3, #255	; 0xff
 8017742:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8017746:	a902      	add	r1, sp, #8
 8017748:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801774c:	6860      	ldr	r0, [r4, #4]
 801774e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017752:	6803      	ldr	r3, [r0, #0]
 8017754:	685b      	ldr	r3, [r3, #4]
 8017756:	4798      	blx	r3
 8017758:	4628      	mov	r0, r5
 801775a:	b00b      	add	sp, #44	; 0x2c
 801775c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801775e:	bf00      	nop
 8017760:	200057da 	.word	0x200057da

08017764 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8017764:	b570      	push	{r4, r5, r6, lr}
 8017766:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801776a:	4604      	mov	r4, r0
 801776c:	b19b      	cbz	r3, 8017796 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801776e:	2002      	movs	r0, #2
 8017770:	f7fd f870 	bl	8014854 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8017774:	2300      	movs	r3, #0
 8017776:	4620      	mov	r0, r4
 8017778:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801777c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8017780:	6823      	ldr	r3, [r4, #0]
 8017782:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8017786:	f7ff fd53 	bl	8017230 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801778a:	4601      	mov	r1, r0
 801778c:	4620      	mov	r0, r4
 801778e:	462b      	mov	r3, r5
 8017790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017794:	4718      	bx	r3
 8017796:	bd70      	pop	{r4, r5, r6, pc}

08017798 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>:
 8017798:	b538      	push	{r3, r4, r5, lr}
 801779a:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 801779e:	4604      	mov	r4, r0
 80177a0:	460d      	mov	r5, r1
 80177a2:	428a      	cmp	r2, r1
 80177a4:	d008      	beq.n	80177b8 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x20>
 80177a6:	2a01      	cmp	r2, #1
 80177a8:	6803      	ldr	r3, [r0, #0]
 80177aa:	d106      	bne.n	80177ba <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 80177ac:	b929      	cbnz	r1, 80177ba <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 80177ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80177b2:	4798      	blx	r3
 80177b4:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80177b8:	bd38      	pop	{r3, r4, r5, pc}
 80177ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80177be:	4620      	mov	r0, r4
 80177c0:	e7f7      	b.n	80177b2 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x1a>
	...

080177c4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80177c4:	4b0d      	ldr	r3, [pc, #52]	; (80177fc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80177c6:	b510      	push	{r4, lr}
 80177c8:	781b      	ldrb	r3, [r3, #0]
 80177ca:	4604      	mov	r4, r0
 80177cc:	b95b      	cbnz	r3, 80177e6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80177ce:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80177d2:	2b02      	cmp	r3, #2
 80177d4:	d007      	beq.n	80177e6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80177d6:	6840      	ldr	r0, [r0, #4]
 80177d8:	f000 f92c 	bl	8017a34 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80177dc:	b118      	cbz	r0, 80177e6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80177de:	6862      	ldr	r2, [r4, #4]
 80177e0:	7a53      	ldrb	r3, [r2, #9]
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d0fc      	beq.n	80177e0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80177e6:	f7fd fa67 	bl	8014cb8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80177ea:	4620      	mov	r0, r4
 80177ec:	2100      	movs	r1, #0
 80177ee:	f7ff ffd3 	bl	8017798 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 80177f2:	4620      	mov	r0, r4
 80177f4:	f7ff fd1c 	bl	8017230 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80177f8:	bd10      	pop	{r4, pc}
 80177fa:	bf00      	nop
 80177fc:	200057de 	.word	0x200057de

08017800 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8017800:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8017804:	1a13      	subs	r3, r2, r0
 8017806:	4258      	negs	r0, r3
 8017808:	4158      	adcs	r0, r3
 801780a:	4770      	bx	lr

0801780c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801780c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8017810:	1a9b      	subs	r3, r3, r2
 8017812:	2b00      	cmp	r3, #0
 8017814:	bfdc      	itt	le
 8017816:	6882      	ldrle	r2, [r0, #8]
 8017818:	189b      	addle	r3, r3, r2
 801781a:	2b01      	cmp	r3, #1
 801781c:	bfcc      	ite	gt
 801781e:	2000      	movgt	r0, #0
 8017820:	2001      	movle	r0, #1
 8017822:	4770      	bx	lr

08017824 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8017824:	6902      	ldr	r2, [r0, #16]
 8017826:	6840      	ldr	r0, [r0, #4]
 8017828:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801782c:	4770      	bx	lr

0801782e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801782e:	6803      	ldr	r3, [r0, #0]
 8017830:	691b      	ldr	r3, [r3, #16]
 8017832:	4718      	bx	r3

08017834 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8017834:	4770      	bx	lr

08017836 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8017836:	4770      	bx	lr

08017838 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8017838:	2301      	movs	r3, #1
 801783a:	b570      	push	{r4, r5, r6, lr}
 801783c:	7203      	strb	r3, [r0, #8]
 801783e:	4604      	mov	r4, r0
 8017840:	6840      	ldr	r0, [r0, #4]
 8017842:	6803      	ldr	r3, [r0, #0]
 8017844:	699b      	ldr	r3, [r3, #24]
 8017846:	4798      	blx	r3
 8017848:	6803      	ldr	r3, [r0, #0]
 801784a:	4605      	mov	r5, r0
 801784c:	2b08      	cmp	r3, #8
 801784e:	d01e      	beq.n	801788e <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8017850:	d80b      	bhi.n	801786a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017852:	2b02      	cmp	r3, #2
 8017854:	d027      	beq.n	80178a6 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8017856:	2b04      	cmp	r3, #4
 8017858:	d011      	beq.n	801787e <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801785a:	2b01      	cmp	r3, #1
 801785c:	d028      	beq.n	80178b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801785e:	4b17      	ldr	r3, [pc, #92]	; (80178bc <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8017860:	218c      	movs	r1, #140	; 0x8c
 8017862:	4a17      	ldr	r2, [pc, #92]	; (80178c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8017864:	4817      	ldr	r0, [pc, #92]	; (80178c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8017866:	f010 ff17 	bl	8028698 <__assert_func>
 801786a:	2b40      	cmp	r3, #64	; 0x40
 801786c:	d020      	beq.n	80178b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801786e:	d801      	bhi.n	8017874 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8017870:	2b20      	cmp	r3, #32
 8017872:	e7f3      	b.n	801785c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8017874:	2b80      	cmp	r3, #128	; 0x80
 8017876:	d01b      	beq.n	80178b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8017878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801787c:	e7ee      	b.n	801785c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801787e:	6823      	ldr	r3, [r4, #0]
 8017880:	7f01      	ldrb	r1, [r0, #28]
 8017882:	4620      	mov	r0, r4
 8017884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017886:	4798      	blx	r3
 8017888:	6823      	ldr	r3, [r4, #0]
 801788a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801788c:	e006      	b.n	801789c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801788e:	6823      	ldr	r3, [r4, #0]
 8017890:	7f01      	ldrb	r1, [r0, #28]
 8017892:	4620      	mov	r0, r4
 8017894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017896:	4798      	blx	r3
 8017898:	6823      	ldr	r3, [r4, #0]
 801789a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801789c:	4629      	mov	r1, r5
 801789e:	4620      	mov	r0, r4
 80178a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178a4:	4718      	bx	r3
 80178a6:	6823      	ldr	r3, [r4, #0]
 80178a8:	4620      	mov	r0, r4
 80178aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178ac:	4798      	blx	r3
 80178ae:	e7f3      	b.n	8017898 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 80178b0:	6823      	ldr	r3, [r4, #0]
 80178b2:	4620      	mov	r0, r4
 80178b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178b6:	4798      	blx	r3
 80178b8:	e7e6      	b.n	8017888 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 80178ba:	bf00      	nop
 80178bc:	0802ba31 	.word	0x0802ba31
 80178c0:	0802bb40 	.word	0x0802bb40
 80178c4:	0802ba56 	.word	0x0802ba56

080178c8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80178c8:	b570      	push	{r4, r5, r6, lr}
 80178ca:	4604      	mov	r4, r0
 80178cc:	460e      	mov	r6, r1
 80178ce:	6860      	ldr	r0, [r4, #4]
 80178d0:	6803      	ldr	r3, [r0, #0]
 80178d2:	685b      	ldr	r3, [r3, #4]
 80178d4:	4798      	blx	r3
 80178d6:	2800      	cmp	r0, #0
 80178d8:	d1f9      	bne.n	80178ce <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80178da:	4d0d      	ldr	r5, [pc, #52]	; (8017910 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80178dc:	6828      	ldr	r0, [r5, #0]
 80178de:	6803      	ldr	r3, [r0, #0]
 80178e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80178e2:	4798      	blx	r3
 80178e4:	f7fd fa02 	bl	8014cec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80178e8:	6828      	ldr	r0, [r5, #0]
 80178ea:	2101      	movs	r1, #1
 80178ec:	f7ff ff54 	bl	8017798 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 80178f0:	6860      	ldr	r0, [r4, #4]
 80178f2:	4631      	mov	r1, r6
 80178f4:	6803      	ldr	r3, [r0, #0]
 80178f6:	689b      	ldr	r3, [r3, #8]
 80178f8:	4798      	blx	r3
 80178fa:	6823      	ldr	r3, [r4, #0]
 80178fc:	4620      	mov	r0, r4
 80178fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017900:	4798      	blx	r3
 8017902:	6828      	ldr	r0, [r5, #0]
 8017904:	6803      	ldr	r3, [r0, #0]
 8017906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801790a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801790c:	4718      	bx	r3
 801790e:	bf00      	nop
 8017910:	200057e0 	.word	0x200057e0

08017914 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8017914:	b508      	push	{r3, lr}
 8017916:	f7fd f9cf 	bl	8014cb8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801791a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801791e:	f7fd b9d9 	b.w	8014cd4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08017922 <_ZN8touchgfx13DMA_Interface5startEv>:
 8017922:	b510      	push	{r4, lr}
 8017924:	4604      	mov	r4, r0
 8017926:	6840      	ldr	r0, [r0, #4]
 8017928:	6803      	ldr	r3, [r0, #0]
 801792a:	681b      	ldr	r3, [r3, #0]
 801792c:	4798      	blx	r3
 801792e:	b948      	cbnz	r0, 8017944 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017930:	7a63      	ldrb	r3, [r4, #9]
 8017932:	b13b      	cbz	r3, 8017944 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017934:	7a23      	ldrb	r3, [r4, #8]
 8017936:	b92b      	cbnz	r3, 8017944 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017938:	6823      	ldr	r3, [r4, #0]
 801793a:	4620      	mov	r0, r4
 801793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801793e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017942:	4718      	bx	r3
 8017944:	bd10      	pop	{r4, pc}
	...

08017948 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8017948:	b510      	push	{r4, lr}
 801794a:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801794e:	1b12      	subs	r2, r2, r4
 8017950:	2a00      	cmp	r2, #0
 8017952:	bfdc      	itt	le
 8017954:	6883      	ldrle	r3, [r0, #8]
 8017956:	18d2      	addle	r2, r2, r3
 8017958:	2a01      	cmp	r2, #1
 801795a:	dd18      	ble.n	801798e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 801795c:	6843      	ldr	r3, [r0, #4]
 801795e:	f101 021c 	add.w	r2, r1, #28
 8017962:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8017966:	f851 4b04 	ldr.w	r4, [r1], #4
 801796a:	4291      	cmp	r1, r2
 801796c:	f843 4b04 	str.w	r4, [r3], #4
 8017970:	d1f9      	bne.n	8017966 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8017972:	880a      	ldrh	r2, [r1, #0]
 8017974:	801a      	strh	r2, [r3, #0]
 8017976:	788a      	ldrb	r2, [r1, #2]
 8017978:	709a      	strb	r2, [r3, #2]
 801797a:	68c3      	ldr	r3, [r0, #12]
 801797c:	6882      	ldr	r2, [r0, #8]
 801797e:	f3bf 8f5b 	dmb	ish
 8017982:	3301      	adds	r3, #1
 8017984:	429a      	cmp	r2, r3
 8017986:	bfd8      	it	le
 8017988:	1a9b      	suble	r3, r3, r2
 801798a:	60c3      	str	r3, [r0, #12]
 801798c:	bd10      	pop	{r4, pc}
 801798e:	4b03      	ldr	r3, [pc, #12]	; (801799c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8017990:	2139      	movs	r1, #57	; 0x39
 8017992:	4a03      	ldr	r2, [pc, #12]	; (80179a0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8017994:	4803      	ldr	r0, [pc, #12]	; (80179a4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8017996:	f010 fe7f 	bl	8028698 <__assert_func>
 801799a:	bf00      	nop
 801799c:	0802ba7c 	.word	0x0802ba7c
 80179a0:	0802bb70 	.word	0x0802bb70
 80179a4:	0802ba56 	.word	0x0802ba56

080179a8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80179a8:	b510      	push	{r4, lr}
 80179aa:	6803      	ldr	r3, [r0, #0]
 80179ac:	4604      	mov	r4, r0
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	4798      	blx	r3
 80179b2:	b128      	cbz	r0, 80179c0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80179b4:	4b07      	ldr	r3, [pc, #28]	; (80179d4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80179b6:	213f      	movs	r1, #63	; 0x3f
 80179b8:	4a07      	ldr	r2, [pc, #28]	; (80179d8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80179ba:	4808      	ldr	r0, [pc, #32]	; (80179dc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80179bc:	f010 fe6c 	bl	8028698 <__assert_func>
 80179c0:	6923      	ldr	r3, [r4, #16]
 80179c2:	68a2      	ldr	r2, [r4, #8]
 80179c4:	f3bf 8f5b 	dmb	ish
 80179c8:	3301      	adds	r3, #1
 80179ca:	429a      	cmp	r2, r3
 80179cc:	bfd8      	it	le
 80179ce:	1a9b      	suble	r3, r3, r2
 80179d0:	6123      	str	r3, [r4, #16]
 80179d2:	bd10      	pop	{r4, pc}
 80179d4:	0802ba9f 	.word	0x0802ba9f
 80179d8:	0802bbbe 	.word	0x0802bbbe
 80179dc:	0802ba56 	.word	0x0802ba56

080179e0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80179e0:	b570      	push	{r4, r5, r6, lr}
 80179e2:	4604      	mov	r4, r0
 80179e4:	6840      	ldr	r0, [r0, #4]
 80179e6:	6803      	ldr	r3, [r0, #0]
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	4798      	blx	r3
 80179ec:	4605      	mov	r5, r0
 80179ee:	b930      	cbnz	r0, 80179fe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80179f0:	7a23      	ldrb	r3, [r4, #8]
 80179f2:	b123      	cbz	r3, 80179fe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80179f4:	6860      	ldr	r0, [r4, #4]
 80179f6:	6803      	ldr	r3, [r0, #0]
 80179f8:	695b      	ldr	r3, [r3, #20]
 80179fa:	4798      	blx	r3
 80179fc:	7225      	strb	r5, [r4, #8]
 80179fe:	6860      	ldr	r0, [r4, #4]
 8017a00:	6803      	ldr	r3, [r0, #0]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	4798      	blx	r3
 8017a06:	b928      	cbnz	r0, 8017a14 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8017a08:	6823      	ldr	r3, [r4, #0]
 8017a0a:	4620      	mov	r0, r4
 8017a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a12:	4718      	bx	r3
 8017a14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a18:	f7fd b974 	b.w	8014d04 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08017a1c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8017a1c:	b510      	push	{r4, lr}
 8017a1e:	6082      	str	r2, [r0, #8]
 8017a20:	2200      	movs	r2, #0
 8017a22:	4c03      	ldr	r4, [pc, #12]	; (8017a30 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8017a24:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8017a28:	e9c0 4100 	strd	r4, r1, [r0]
 8017a2c:	bd10      	pop	{r4, pc}
 8017a2e:	bf00      	nop
 8017a30:	0802bb24 	.word	0x0802bb24

08017a34 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8017a34:	6840      	ldr	r0, [r0, #4]
 8017a36:	6803      	ldr	r3, [r0, #0]
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	4718      	bx	r3

08017a3c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8017a3c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8017a40:	4770      	bx	lr

08017a42 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8017a42:	b510      	push	{r4, lr}
 8017a44:	4604      	mov	r4, r0
 8017a46:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017a48:	b150      	cbz	r0, 8017a60 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8017a4a:	6803      	ldr	r3, [r0, #0]
 8017a4c:	68db      	ldr	r3, [r3, #12]
 8017a4e:	4798      	blx	r3
 8017a50:	b130      	cbz	r0, 8017a60 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8017a52:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017a54:	4621      	mov	r1, r4
 8017a56:	6803      	ldr	r3, [r0, #0]
 8017a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a5c:	689b      	ldr	r3, [r3, #8]
 8017a5e:	4718      	bx	r3
 8017a60:	bd10      	pop	{r4, pc}

08017a62 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8017a62:	790b      	ldrb	r3, [r1, #4]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	bf0c      	ite	eq
 8017a68:	2301      	moveq	r3, #1
 8017a6a:	2300      	movne	r3, #0
 8017a6c:	b570      	push	{r4, r5, r6, lr}
 8017a6e:	4604      	mov	r4, r0
 8017a70:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8017a74:	460e      	mov	r6, r1
 8017a76:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8017a7a:	d109      	bne.n	8017a90 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8017a7c:	b14d      	cbz	r5, 8017a92 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8017a7e:	7933      	ldrb	r3, [r6, #4]
 8017a80:	2b01      	cmp	r3, #1
 8017a82:	d10c      	bne.n	8017a9e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8017a84:	6823      	ldr	r3, [r4, #0]
 8017a86:	4620      	mov	r0, r4
 8017a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017a8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a8e:	4718      	bx	r3
 8017a90:	b12d      	cbz	r5, 8017a9e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8017a92:	6823      	ldr	r3, [r4, #0]
 8017a94:	4620      	mov	r0, r4
 8017a96:	695b      	ldr	r3, [r3, #20]
 8017a98:	4798      	blx	r3
 8017a9a:	2d00      	cmp	r5, #0
 8017a9c:	d1ef      	bne.n	8017a7e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8017a9e:	bd70      	pop	{r4, r5, r6, pc}

08017aa0 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 8017aa0:	6803      	ldr	r3, [r0, #0]
 8017aa2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8017aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017aa8:	4718      	bx	r3

08017aaa <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 8017aaa:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8017aae:	2bff      	cmp	r3, #255	; 0xff
 8017ab0:	b510      	push	{r4, lr}
 8017ab2:	d104      	bne.n	8017abe <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 8017ab4:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 8017ab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017aba:	429a      	cmp	r2, r3
 8017abc:	d105      	bne.n	8017aca <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 8017abe:	2300      	movs	r3, #0
 8017ac0:	8003      	strh	r3, [r0, #0]
 8017ac2:	8043      	strh	r3, [r0, #2]
 8017ac4:	8083      	strh	r3, [r0, #4]
 8017ac6:	80c3      	strh	r3, [r0, #6]
 8017ac8:	bd10      	pop	{r4, pc}
 8017aca:	2300      	movs	r3, #0
 8017acc:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8017ad0:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8017ad4:	8003      	strh	r3, [r0, #0]
 8017ad6:	8043      	strh	r3, [r0, #2]
 8017ad8:	8084      	strh	r4, [r0, #4]
 8017ada:	80c2      	strh	r2, [r0, #6]
 8017adc:	e7f4      	b.n	8017ac8 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

08017ade <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 8017ade:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ae2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8017ae6:	b087      	sub	sp, #28
 8017ae8:	4604      	mov	r4, r0
 8017aea:	4689      	mov	r9, r1
 8017aec:	b363      	cbz	r3, 8017b48 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8017aee:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017af4:	429a      	cmp	r2, r3
 8017af6:	d027      	beq.n	8017b48 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8017af8:	ad06      	add	r5, sp, #24
 8017afa:	2700      	movs	r7, #0
 8017afc:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 8017b00:	4628      	mov	r0, r5
 8017b02:	f004 ff9f 	bl	801ca44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017b06:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017b0a:	a904      	add	r1, sp, #16
 8017b0c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017b10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017b14:	4620      	mov	r0, r4
 8017b16:	6823      	ldr	r3, [r4, #0]
 8017b18:	9704      	str	r7, [sp, #16]
 8017b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b1c:	4798      	blx	r3
 8017b1e:	f7fa fa65 	bl	8011fec <_ZN8touchgfx3HAL3lcdEv>
 8017b22:	6803      	ldr	r3, [r0, #0]
 8017b24:	4606      	mov	r6, r0
 8017b26:	4628      	mov	r0, r5
 8017b28:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8017b2c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8017b2e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017b32:	f005 f88f 	bl	801cc54 <_ZNK8touchgfx6Bitmap7getDataEv>
 8017b36:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8017b3a:	4601      	mov	r1, r0
 8017b3c:	9701      	str	r7, [sp, #4]
 8017b3e:	aa04      	add	r2, sp, #16
 8017b40:	9300      	str	r3, [sp, #0]
 8017b42:	4630      	mov	r0, r6
 8017b44:	464b      	mov	r3, r9
 8017b46:	47c0      	blx	r8
 8017b48:	b007      	add	sp, #28
 8017b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017b4e <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 8017b4e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017b50:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017b54:	460d      	mov	r5, r1
 8017b56:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017b5a:	2100      	movs	r1, #0
 8017b5c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017b60:	4604      	mov	r4, r0
 8017b62:	6803      	ldr	r3, [r0, #0]
 8017b64:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b6a:	9100      	str	r1, [sp, #0]
 8017b6c:	4669      	mov	r1, sp
 8017b6e:	4798      	blx	r3
 8017b70:	4621      	mov	r1, r4
 8017b72:	a802      	add	r0, sp, #8
 8017b74:	f003 fa02 	bl	801af7c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017b78:	f7fa fa38 	bl	8011fec <_ZN8touchgfx3HAL3lcdEv>
 8017b7c:	6803      	ldr	r3, [r0, #0]
 8017b7e:	aa02      	add	r2, sp, #8
 8017b80:	4669      	mov	r1, sp
 8017b82:	695e      	ldr	r6, [r3, #20]
 8017b84:	462b      	mov	r3, r5
 8017b86:	47b0      	blx	r6
 8017b88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b8c:	2800      	cmp	r0, #0
 8017b8e:	bf08      	it	eq
 8017b90:	461d      	moveq	r5, r3
 8017b92:	84e5      	strh	r5, [r4, #38]	; 0x26
 8017b94:	b004      	add	sp, #16
 8017b96:	bd70      	pop	{r4, r5, r6, pc}

08017b98 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 8017b98:	2200      	movs	r2, #0
 8017b9a:	8082      	strh	r2, [r0, #4]
 8017b9c:	80c2      	strh	r2, [r0, #6]
 8017b9e:	8102      	strh	r2, [r0, #8]
 8017ba0:	8142      	strh	r2, [r0, #10]
 8017ba2:	8182      	strh	r2, [r0, #12]
 8017ba4:	81c2      	strh	r2, [r0, #14]
 8017ba6:	8202      	strh	r2, [r0, #16]
 8017ba8:	8242      	strh	r2, [r0, #18]
 8017baa:	61c2      	str	r2, [r0, #28]
 8017bac:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8017bb0:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8017bb4:	2201      	movs	r2, #1
 8017bb6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 8017bba:	4a04      	ldr	r2, [pc, #16]	; (8017bcc <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 8017bbc:	6002      	str	r2, [r0, #0]
 8017bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017bc2:	84c2      	strh	r2, [r0, #38]	; 0x26
 8017bc4:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8017bc8:	4770      	bx	lr
 8017bca:	bf00      	nop
 8017bcc:	0802bc64 	.word	0x0802bc64

08017bd0 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8017bd0:	2200      	movs	r2, #0
 8017bd2:	8002      	strh	r2, [r0, #0]
 8017bd4:	8042      	strh	r2, [r0, #2]
 8017bd6:	8082      	strh	r2, [r0, #4]
 8017bd8:	80c2      	strh	r2, [r0, #6]
 8017bda:	4770      	bx	lr

08017bdc <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8017bdc:	b570      	push	{r4, r5, r6, lr}
 8017bde:	6803      	ldr	r3, [r0, #0]
 8017be0:	4604      	mov	r4, r0
 8017be2:	4615      	mov	r5, r2
 8017be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017be6:	4798      	blx	r3
 8017be8:	6823      	ldr	r3, [r4, #0]
 8017bea:	4629      	mov	r1, r5
 8017bec:	4620      	mov	r0, r4
 8017bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017bf4:	4718      	bx	r3
	...

08017bf8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8017bf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017bfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017bfe:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017c00:	4299      	cmp	r1, r3
 8017c02:	d029      	beq.n	8017c58 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8017c04:	4b15      	ldr	r3, [pc, #84]	; (8017c5c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	b92b      	cbnz	r3, 8017c16 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8017c0a:	4b15      	ldr	r3, [pc, #84]	; (8017c60 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8017c0c:	21b1      	movs	r1, #177	; 0xb1
 8017c0e:	4a15      	ldr	r2, [pc, #84]	; (8017c64 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017c10:	4815      	ldr	r0, [pc, #84]	; (8017c68 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8017c12:	f010 fd41 	bl	8028698 <__assert_func>
 8017c16:	4a15      	ldr	r2, [pc, #84]	; (8017c6c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8017c18:	8812      	ldrh	r2, [r2, #0]
 8017c1a:	428a      	cmp	r2, r1
 8017c1c:	d803      	bhi.n	8017c26 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8017c1e:	4b14      	ldr	r3, [pc, #80]	; (8017c70 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8017c20:	21b2      	movs	r1, #178	; 0xb2
 8017c22:	4a10      	ldr	r2, [pc, #64]	; (8017c64 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017c24:	e7f4      	b.n	8017c10 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8017c26:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8017c2a:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8017c2e:	4b11      	ldr	r3, [pc, #68]	; (8017c74 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8017c30:	7854      	ldrb	r4, [r2, #1]
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8017c38:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8017c3c:	682b      	ldr	r3, [r5, #0]
 8017c3e:	69de      	ldr	r6, [r3, #28]
 8017c40:	4b0d      	ldr	r3, [pc, #52]	; (8017c78 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8017c42:	6818      	ldr	r0, [r3, #0]
 8017c44:	f7fc fae2 	bl	801420c <_ZNK8touchgfx5Texts7getTextEt>
 8017c48:	2300      	movs	r3, #0
 8017c4a:	4602      	mov	r2, r0
 8017c4c:	4621      	mov	r1, r4
 8017c4e:	9300      	str	r3, [sp, #0]
 8017c50:	4628      	mov	r0, r5
 8017c52:	47b0      	blx	r6
 8017c54:	b002      	add	sp, #8
 8017c56:	bd70      	pop	{r4, r5, r6, pc}
 8017c58:	2000      	movs	r0, #0
 8017c5a:	e7fb      	b.n	8017c54 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8017c5c:	20005830 	.word	0x20005830
 8017c60:	0802bcc8 	.word	0x0802bcc8
 8017c64:	0802be00 	.word	0x0802be00
 8017c68:	0802bd0a 	.word	0x0802bd0a
 8017c6c:	20005834 	.word	0x20005834
 8017c70:	0802bd33 	.word	0x0802bd33
 8017c74:	20005838 	.word	0x20005838
 8017c78:	2000583c 	.word	0x2000583c

08017c7c <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8017c7c:	b570      	push	{r4, r5, r6, lr}
 8017c7e:	6803      	ldr	r3, [r0, #0]
 8017c80:	4604      	mov	r4, r0
 8017c82:	b28d      	uxth	r5, r1
 8017c84:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8017c86:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8017c88:	4b10      	ldr	r3, [pc, #64]	; (8017ccc <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	b92b      	cbnz	r3, 8017c9a <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8017c8e:	4b10      	ldr	r3, [pc, #64]	; (8017cd0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8017c90:	21b1      	movs	r1, #177	; 0xb1
 8017c92:	4a10      	ldr	r2, [pc, #64]	; (8017cd4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8017c94:	4810      	ldr	r0, [pc, #64]	; (8017cd8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8017c96:	f010 fcff 	bl	8028698 <__assert_func>
 8017c9a:	4910      	ldr	r1, [pc, #64]	; (8017cdc <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8017c9c:	8809      	ldrh	r1, [r1, #0]
 8017c9e:	4291      	cmp	r1, r2
 8017ca0:	d803      	bhi.n	8017caa <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8017ca2:	4b0f      	ldr	r3, [pc, #60]	; (8017ce0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8017ca4:	21b2      	movs	r1, #178	; 0xb2
 8017ca6:	4a0b      	ldr	r2, [pc, #44]	; (8017cd4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8017ca8:	e7f4      	b.n	8017c94 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8017caa:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8017cae:	4b0d      	ldr	r3, [pc, #52]	; (8017ce4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8017cb6:	6803      	ldr	r3, [r0, #0]
 8017cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017cba:	4798      	blx	r3
 8017cbc:	1a29      	subs	r1, r5, r0
 8017cbe:	4633      	mov	r3, r6
 8017cc0:	4620      	mov	r0, r4
 8017cc2:	b209      	sxth	r1, r1
 8017cc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017cc8:	4718      	bx	r3
 8017cca:	bf00      	nop
 8017ccc:	20005830 	.word	0x20005830
 8017cd0:	0802bcc8 	.word	0x0802bcc8
 8017cd4:	0802be00 	.word	0x0802be00
 8017cd8:	0802bd0a 	.word	0x0802bd0a
 8017cdc:	20005834 	.word	0x20005834
 8017ce0:	0802bd33 	.word	0x0802bd33
 8017ce4:	20005838 	.word	0x20005838

08017ce8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8017ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017cec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017cf0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017cf2:	b08c      	sub	sp, #48	; 0x30
 8017cf4:	4604      	mov	r4, r0
 8017cf6:	4293      	cmp	r3, r2
 8017cf8:	4688      	mov	r8, r1
 8017cfa:	d05f      	beq.n	8017dbc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8017cfc:	4e31      	ldr	r6, [pc, #196]	; (8017dc4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8017cfe:	6832      	ldr	r2, [r6, #0]
 8017d00:	b92a      	cbnz	r2, 8017d0e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8017d02:	4b31      	ldr	r3, [pc, #196]	; (8017dc8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8017d04:	21b1      	movs	r1, #177	; 0xb1
 8017d06:	4a31      	ldr	r2, [pc, #196]	; (8017dcc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8017d08:	4831      	ldr	r0, [pc, #196]	; (8017dd0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8017d0a:	f010 fcc5 	bl	8028698 <__assert_func>
 8017d0e:	4d31      	ldr	r5, [pc, #196]	; (8017dd4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8017d10:	8829      	ldrh	r1, [r5, #0]
 8017d12:	4299      	cmp	r1, r3
 8017d14:	d803      	bhi.n	8017d1e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8017d16:	4b30      	ldr	r3, [pc, #192]	; (8017dd8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8017d18:	21b2      	movs	r1, #178	; 0xb2
 8017d1a:	4a2c      	ldr	r2, [pc, #176]	; (8017dcc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8017d1c:	e7f4      	b.n	8017d08 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8017d1e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8017d22:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017d26:	4b2d      	ldr	r3, [pc, #180]	; (8017ddc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017d2e:	2a00      	cmp	r2, #0
 8017d30:	d044      	beq.n	8017dbc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8017d32:	784b      	ldrb	r3, [r1, #1]
 8017d34:	f890 a036 	ldrb.w	sl, [r0, #54]	; 0x36
 8017d38:	f3c3 0901 	ubfx	r9, r3, #0, #2
 8017d3c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017d40:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8017d44:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8017d48:	4b25      	ldr	r3, [pc, #148]	; (8017de0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8017d4a:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8017d54:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8017d58:	9207      	str	r2, [sp, #28]
 8017d5a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017d5c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017d60:	9009      	str	r0, [sp, #36]	; 0x24
 8017d62:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8017d66:	f88d 9020 	strb.w	r9, [sp, #32]
 8017d6a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8017d6e:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8017d72:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8017d76:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8017d7a:	b10a      	cbz	r2, 8017d80 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8017d7c:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8017d7e:	b907      	cbnz	r7, 8017d82 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8017d80:	689f      	ldr	r7, [r3, #8]
 8017d82:	f10d 0914 	add.w	r9, sp, #20
 8017d86:	4621      	mov	r1, r4
 8017d88:	4648      	mov	r0, r9
 8017d8a:	f003 f8f7 	bl	801af7c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017d8e:	6833      	ldr	r3, [r6, #0]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d0b6      	beq.n	8017d02 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8017d94:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8017d96:	882b      	ldrh	r3, [r5, #0]
 8017d98:	428b      	cmp	r3, r1
 8017d9a:	d9bc      	bls.n	8017d16 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8017d9c:	4b11      	ldr	r3, [pc, #68]	; (8017de4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8017d9e:	6818      	ldr	r0, [r3, #0]
 8017da0:	f7fc fa34 	bl	801420c <_ZNK8touchgfx5Texts7getTextEt>
 8017da4:	2300      	movs	r3, #0
 8017da6:	9001      	str	r0, [sp, #4]
 8017da8:	4638      	mov	r0, r7
 8017daa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017dae:	ab07      	add	r3, sp, #28
 8017db0:	9300      	str	r3, [sp, #0]
 8017db2:	4643      	mov	r3, r8
 8017db4:	e899 0006 	ldmia.w	r9, {r1, r2}
 8017db8:	f7fc f9b9 	bl	801412e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017dbc:	b00c      	add	sp, #48	; 0x30
 8017dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dc2:	bf00      	nop
 8017dc4:	20005830 	.word	0x20005830
 8017dc8:	0802bcc8 	.word	0x0802bcc8
 8017dcc:	0802be00 	.word	0x0802be00
 8017dd0:	0802bd0a 	.word	0x0802bd0a
 8017dd4:	20005834 	.word	0x20005834
 8017dd8:	0802bd33 	.word	0x0802bd33
 8017ddc:	20005838 	.word	0x20005838
 8017de0:	200057e0 	.word	0x200057e0
 8017de4:	2000583c 	.word	0x2000583c

08017de8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017de8:	b40e      	push	{r1, r2, r3}
 8017dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017dee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017df2:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017df4:	b09b      	sub	sp, #108	; 0x6c
 8017df6:	4604      	mov	r4, r0
 8017df8:	4293      	cmp	r3, r2
 8017dfa:	d061      	beq.n	8017ec0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 8017dfc:	aa24      	add	r2, sp, #144	; 0x90
 8017dfe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017ed4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8017e02:	9203      	str	r2, [sp, #12]
 8017e04:	f8da 2000 	ldr.w	r2, [sl]
 8017e08:	b92a      	cbnz	r2, 8017e16 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8017e0a:	4b2e      	ldr	r3, [pc, #184]	; (8017ec4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>)
 8017e0c:	21b1      	movs	r1, #177	; 0xb1
 8017e0e:	4a2e      	ldr	r2, [pc, #184]	; (8017ec8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8017e10:	482e      	ldr	r0, [pc, #184]	; (8017ecc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>)
 8017e12:	f010 fc41 	bl	8028698 <__assert_func>
 8017e16:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8017ed8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>
 8017e1a:	f8b8 1000 	ldrh.w	r1, [r8]
 8017e1e:	4299      	cmp	r1, r3
 8017e20:	d803      	bhi.n	8017e2a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8017e22:	4b2b      	ldr	r3, [pc, #172]	; (8017ed0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 8017e24:	21b2      	movs	r1, #178	; 0xb2
 8017e26:	4a28      	ldr	r2, [pc, #160]	; (8017ec8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>)
 8017e28:	e7f2      	b.n	8017e10 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8017e2a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8017edc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>
 8017e2e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017e32:	f8d9 3000 	ldr.w	r3, [r9]
 8017e36:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8017e3a:	683b      	ldr	r3, [r7, #0]
 8017e3c:	4638      	mov	r0, r7
 8017e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e40:	4798      	blx	r3
 8017e42:	4606      	mov	r6, r0
 8017e44:	b205      	sxth	r5, r0
 8017e46:	a804      	add	r0, sp, #16
 8017e48:	f003 fd91 	bl	801b96e <_ZN8touchgfx12TextProviderC1Ev>
 8017e4c:	683b      	ldr	r3, [r7, #0]
 8017e4e:	4638      	mov	r0, r7
 8017e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017e52:	4798      	blx	r3
 8017e54:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8017e56:	4603      	mov	r3, r0
 8017e58:	9a03      	ldr	r2, [sp, #12]
 8017e5a:	a804      	add	r0, sp, #16
 8017e5c:	f003 fdcc 	bl	801b9f8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017e60:	f8da 3000 	ldr.w	r3, [sl]
 8017e64:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d0ce      	beq.n	8017e0a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8017e6c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8017e6e:	f8b8 0000 	ldrh.w	r0, [r8]
 8017e72:	4290      	cmp	r0, r2
 8017e74:	d9d5      	bls.n	8017e22 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8017e76:	eb03 0742 	add.w	r7, r3, r2, lsl #1
 8017e7a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8017e7e:	f8d9 3000 	ldr.w	r3, [r9]
 8017e82:	787a      	ldrb	r2, [r7, #1]
 8017e84:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
 8017e88:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8017e8c:	9700      	str	r7, [sp, #0]
 8017e8e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017e92:	a804      	add	r0, sp, #16
 8017e94:	f001 fb93 	bl	80195be <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8017e98:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8017e9c:	b203      	sxth	r3, r0
 8017e9e:	18a9      	adds	r1, r5, r2
 8017ea0:	2900      	cmp	r1, #0
 8017ea2:	dd0b      	ble.n	8017ebc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd4>
 8017ea4:	3b01      	subs	r3, #1
 8017ea6:	fb13 f302 	smulbb	r3, r3, r2
 8017eaa:	fb16 3300 	smlabb	r3, r6, r0, r3
 8017eae:	b21d      	sxth	r5, r3
 8017eb0:	4628      	mov	r0, r5
 8017eb2:	b01b      	add	sp, #108	; 0x6c
 8017eb4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017eb8:	b003      	add	sp, #12
 8017eba:	4770      	bx	lr
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	dcf7      	bgt.n	8017eb0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8017ec0:	2500      	movs	r5, #0
 8017ec2:	e7f5      	b.n	8017eb0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8017ec4:	0802bcc8 	.word	0x0802bcc8
 8017ec8:	0802be00 	.word	0x0802be00
 8017ecc:	0802bd0a 	.word	0x0802bd0a
 8017ed0:	0802bd33 	.word	0x0802bd33
 8017ed4:	20005830 	.word	0x20005830
 8017ed8:	20005834 	.word	0x20005834
 8017edc:	20005838 	.word	0x20005838

08017ee0 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8017ee0:	b570      	push	{r4, r5, r6, lr}
 8017ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017ee6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017ee8:	4604      	mov	r4, r0
 8017eea:	4299      	cmp	r1, r3
 8017eec:	d01e      	beq.n	8017f2c <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8017eee:	6803      	ldr	r3, [r0, #0]
 8017ef0:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8017ef2:	4b0f      	ldr	r3, [pc, #60]	; (8017f30 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	b92b      	cbnz	r3, 8017f04 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8017ef8:	4b0e      	ldr	r3, [pc, #56]	; (8017f34 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8017efa:	21b1      	movs	r1, #177	; 0xb1
 8017efc:	4a0e      	ldr	r2, [pc, #56]	; (8017f38 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8017efe:	480f      	ldr	r0, [pc, #60]	; (8017f3c <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8017f00:	f010 fbca 	bl	8028698 <__assert_func>
 8017f04:	4b0e      	ldr	r3, [pc, #56]	; (8017f40 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8017f06:	881b      	ldrh	r3, [r3, #0]
 8017f08:	428b      	cmp	r3, r1
 8017f0a:	d803      	bhi.n	8017f14 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8017f0c:	4b0d      	ldr	r3, [pc, #52]	; (8017f44 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8017f0e:	21b2      	movs	r1, #178	; 0xb2
 8017f10:	4a09      	ldr	r2, [pc, #36]	; (8017f38 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8017f12:	e7f4      	b.n	8017efe <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8017f14:	4b0c      	ldr	r3, [pc, #48]	; (8017f48 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8017f16:	6818      	ldr	r0, [r3, #0]
 8017f18:	f7fc f978 	bl	801420c <_ZNK8touchgfx5Texts7getTextEt>
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	4601      	mov	r1, r0
 8017f20:	46ac      	mov	ip, r5
 8017f22:	4620      	mov	r0, r4
 8017f24:	461a      	mov	r2, r3
 8017f26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f2a:	4760      	bx	ip
 8017f2c:	2000      	movs	r0, #0
 8017f2e:	bd70      	pop	{r4, r5, r6, pc}
 8017f30:	20005830 	.word	0x20005830
 8017f34:	0802bcc8 	.word	0x0802bcc8
 8017f38:	0802be00 	.word	0x0802be00
 8017f3c:	0802bd0a 	.word	0x0802bd0a
 8017f40:	20005834 	.word	0x20005834
 8017f44:	0802bd33 	.word	0x0802bd33
 8017f48:	2000583c 	.word	0x2000583c

08017f4c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8017f4c:	b538      	push	{r3, r4, r5, lr}
 8017f4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017f52:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8017f54:	4604      	mov	r4, r0
 8017f56:	429a      	cmp	r2, r3
 8017f58:	d014      	beq.n	8017f84 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8017f5a:	6803      	ldr	r3, [r0, #0]
 8017f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017f5e:	4798      	blx	r3
 8017f60:	6823      	ldr	r3, [r4, #0]
 8017f62:	4605      	mov	r5, r0
 8017f64:	4620      	mov	r0, r4
 8017f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017f68:	4798      	blx	r3
 8017f6a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017f6e:	b22d      	sxth	r5, r5
 8017f70:	4601      	mov	r1, r0
 8017f72:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8017f76:	bf06      	itte	eq
 8017f78:	4602      	moveq	r2, r0
 8017f7a:	4629      	moveq	r1, r5
 8017f7c:	462a      	movne	r2, r5
 8017f7e:	4620      	mov	r0, r4
 8017f80:	f7f9 ff8d 	bl	8011e9e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017f84:	bd38      	pop	{r3, r4, r5, pc}

08017f86 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8017f86:	888a      	ldrh	r2, [r1, #4]
 8017f88:	8582      	strh	r2, [r0, #44]	; 0x2c
 8017f8a:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017f8e:	b922      	cbnz	r2, 8017f9a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8017f90:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017f94:	b90b      	cbnz	r3, 8017f9a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x14>
 8017f96:	f7ff bfd9 	b.w	8017f4c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8017f9a:	4770      	bx	lr

08017f9c <_ZNK8touchgfx3Box12getSolidRectEv>:
 8017f9c:	2300      	movs	r3, #0
 8017f9e:	8083      	strh	r3, [r0, #4]
 8017fa0:	80c3      	strh	r3, [r0, #6]
 8017fa2:	8003      	strh	r3, [r0, #0]
 8017fa4:	8043      	strh	r3, [r0, #2]
 8017fa6:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8017faa:	2bff      	cmp	r3, #255	; 0xff
 8017fac:	bf01      	itttt	eq
 8017fae:	890b      	ldrheq	r3, [r1, #8]
 8017fb0:	8083      	strheq	r3, [r0, #4]
 8017fb2:	894b      	ldrheq	r3, [r1, #10]
 8017fb4:	80c3      	strheq	r3, [r0, #6]
 8017fb6:	4770      	bx	lr

08017fb8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8017fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017fba:	4604      	mov	r4, r0
 8017fbc:	466b      	mov	r3, sp
 8017fbe:	6808      	ldr	r0, [r1, #0]
 8017fc0:	6849      	ldr	r1, [r1, #4]
 8017fc2:	c303      	stmia	r3!, {r0, r1}
 8017fc4:	6823      	ldr	r3, [r4, #0]
 8017fc6:	4669      	mov	r1, sp
 8017fc8:	4620      	mov	r0, r4
 8017fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017fcc:	4798      	blx	r3
 8017fce:	4b08      	ldr	r3, [pc, #32]	; (8017ff0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017fd6:	b10a      	cbz	r2, 8017fdc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8017fd8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017fda:	b900      	cbnz	r0, 8017fde <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017fdc:	6898      	ldr	r0, [r3, #8]
 8017fde:	6803      	ldr	r3, [r0, #0]
 8017fe0:	4669      	mov	r1, sp
 8017fe2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017fe4:	699d      	ldr	r5, [r3, #24]
 8017fe6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017fea:	47a8      	blx	r5
 8017fec:	b003      	add	sp, #12
 8017fee:	bd30      	pop	{r4, r5, pc}
 8017ff0:	200057e0 	.word	0x200057e0

08017ff4 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 8017ff4:	b570      	push	{r4, r5, r6, lr}
 8017ff6:	6803      	ldr	r3, [r0, #0]
 8017ff8:	4604      	mov	r4, r0
 8017ffa:	4615      	mov	r5, r2
 8017ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017ffe:	4798      	blx	r3
 8018000:	6823      	ldr	r3, [r4, #0]
 8018002:	4629      	mov	r1, r5
 8018004:	4620      	mov	r0, r4
 8018006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801800c:	4718      	bx	r3

0801800e <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 801800e:	b570      	push	{r4, r5, r6, lr}
 8018010:	6803      	ldr	r3, [r0, #0]
 8018012:	4604      	mov	r4, r0
 8018014:	460e      	mov	r6, r1
 8018016:	4615      	mov	r5, r2
 8018018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801801a:	4798      	blx	r3
 801801c:	8030      	strh	r0, [r6, #0]
 801801e:	6823      	ldr	r3, [r4, #0]
 8018020:	4620      	mov	r0, r4
 8018022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018024:	4798      	blx	r3
 8018026:	8028      	strh	r0, [r5, #0]
 8018028:	bd70      	pop	{r4, r5, r6, pc}

0801802a <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 801802a:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 801802e:	4770      	bx	lr

08018030 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 8018030:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8018034:	4770      	bx	lr

08018036 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 8018036:	b510      	push	{r4, lr}
 8018038:	4604      	mov	r4, r0
 801803a:	f000 fa67 	bl	801850c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801803e:	6823      	ldr	r3, [r4, #0]
 8018040:	4620      	mov	r0, r4
 8018042:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8018046:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 801804a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801804c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018050:	4718      	bx	r3

08018052 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 8018052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018054:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8018058:	4605      	mov	r5, r0
 801805a:	8541      	strh	r1, [r0, #42]	; 0x2a
 801805c:	4630      	mov	r0, r6
 801805e:	f004 fcf1 	bl	801ca44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018062:	b1a0      	cbz	r0, 801808e <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 8018064:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 8018068:	4630      	mov	r0, r6
 801806a:	f004 fceb 	bl	801ca44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801806e:	fb97 f4f0 	sdiv	r4, r7, r0
 8018072:	fb04 7410 	mls	r4, r4, r0, r7
 8018076:	4630      	mov	r0, r6
 8018078:	f004 fce4 	bl	801ca44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801807c:	4404      	add	r4, r0
 801807e:	4630      	mov	r0, r6
 8018080:	f004 fce0 	bl	801ca44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018084:	fb94 f3f0 	sdiv	r3, r4, r0
 8018088:	fb03 4010 	mls	r0, r3, r0, r4
 801808c:	8568      	strh	r0, [r5, #42]	; 0x2a
 801808e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018090 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 8018090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018092:	f100 0626 	add.w	r6, r0, #38	; 0x26
 8018096:	4605      	mov	r5, r0
 8018098:	8581      	strh	r1, [r0, #44]	; 0x2c
 801809a:	4630      	mov	r0, r6
 801809c:	f004 fd0c 	bl	801cab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80180a0:	b1a0      	cbz	r0, 80180cc <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 80180a2:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 80180a6:	4630      	mov	r0, r6
 80180a8:	f004 fd06 	bl	801cab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80180ac:	fb97 f4f0 	sdiv	r4, r7, r0
 80180b0:	fb04 7410 	mls	r4, r4, r0, r7
 80180b4:	4630      	mov	r0, r6
 80180b6:	f004 fcff 	bl	801cab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80180ba:	4404      	add	r4, r0
 80180bc:	4630      	mov	r0, r6
 80180be:	f004 fcfb 	bl	801cab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80180c2:	fb94 f3f0 	sdiv	r3, r4, r0
 80180c6:	fb03 4010 	mls	r0, r3, r0, r4
 80180ca:	85a8      	strh	r0, [r5, #44]	; 0x2c
 80180cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080180d0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 80180d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180d4:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 80180d8:	b093      	sub	sp, #76	; 0x4c
 80180da:	4607      	mov	r7, r0
 80180dc:	460e      	mov	r6, r1
 80180de:	4658      	mov	r0, fp
 80180e0:	f004 fcb0 	bl	801ca44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80180e4:	4605      	mov	r5, r0
 80180e6:	4658      	mov	r0, fp
 80180e8:	f004 fce6 	bl	801cab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80180ec:	4680      	mov	r8, r0
 80180ee:	2d00      	cmp	r5, #0
 80180f0:	f000 80c5 	beq.w	801827e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80180f4:	2800      	cmp	r0, #0
 80180f6:	f000 80c2 	beq.w	801827e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80180fa:	2300      	movs	r3, #0
 80180fc:	a90e      	add	r1, sp, #56	; 0x38
 80180fe:	4638      	mov	r0, r7
 8018100:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8018104:	683b      	ldr	r3, [r7, #0]
 8018106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018108:	4798      	blx	r3
 801810a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801810e:	f9b6 3000 	ldrsh.w	r3, [r6]
 8018112:	88b1      	ldrh	r1, [r6, #4]
 8018114:	189c      	adds	r4, r3, r2
 8018116:	440b      	add	r3, r1
 8018118:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801811c:	fa02 f383 	sxtah	r3, r2, r3
 8018120:	3b01      	subs	r3, #1
 8018122:	fb93 f3f5 	sdiv	r3, r3, r5
 8018126:	fb94 f4f5 	sdiv	r4, r4, r5
 801812a:	fb13 f305 	smulbb	r3, r3, r5
 801812e:	fb14 f405 	smulbb	r4, r4, r5
 8018132:	b21b      	sxth	r3, r3
 8018134:	1aa4      	subs	r4, r4, r2
 8018136:	930b      	str	r3, [sp, #44]	; 0x2c
 8018138:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801813c:	b2a4      	uxth	r4, r4
 801813e:	185a      	adds	r2, r3, r1
 8018140:	fb92 f2f8 	sdiv	r2, r2, r8
 8018144:	fb12 f208 	smulbb	r2, r2, r8
 8018148:	1a52      	subs	r2, r2, r1
 801814a:	b212      	sxth	r2, r2
 801814c:	920c      	str	r2, [sp, #48]	; 0x30
 801814e:	88f2      	ldrh	r2, [r6, #6]
 8018150:	4413      	add	r3, r2
 8018152:	fa01 f383 	sxtah	r3, r1, r3
 8018156:	3b01      	subs	r3, #1
 8018158:	fb93 f3f8 	sdiv	r3, r3, r8
 801815c:	fb13 f308 	smulbb	r3, r3, r8
 8018160:	b21b      	sxth	r3, r3
 8018162:	930d      	str	r3, [sp, #52]	; 0x34
 8018164:	1963      	adds	r3, r4, r5
 8018166:	fa1f fa83 	uxth.w	sl, r3
 801816a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801816c:	b223      	sxth	r3, r4
 801816e:	4293      	cmp	r3, r2
 8018170:	9305      	str	r3, [sp, #20]
 8018172:	f300 8084 	bgt.w	801827e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8018176:	fa0f f38a 	sxth.w	r3, sl
 801817a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801817e:	930a      	str	r3, [sp, #40]	; 0x28
 8018180:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018182:	4599      	cmp	r9, r3
 8018184:	dd04      	ble.n	8018190 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 8018186:	442c      	add	r4, r5
 8018188:	eb05 030a 	add.w	r3, r5, sl
 801818c:	b2a4      	uxth	r4, r4
 801818e:	e7ea      	b.n	8018166 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 8018190:	f9b6 c000 	ldrsh.w	ip, [r6]
 8018194:	88b2      	ldrh	r2, [r6, #4]
 8018196:	4462      	add	r2, ip
 8018198:	b292      	uxth	r2, r2
 801819a:	b213      	sxth	r3, r2
 801819c:	9308      	str	r3, [sp, #32]
 801819e:	fa1f f389 	uxth.w	r3, r9
 80181a2:	eb08 0103 	add.w	r1, r8, r3
 80181a6:	9306      	str	r3, [sp, #24]
 80181a8:	b289      	uxth	r1, r1
 80181aa:	b208      	sxth	r0, r1
 80181ac:	9007      	str	r0, [sp, #28]
 80181ae:	9805      	ldr	r0, [sp, #20]
 80181b0:	4603      	mov	r3, r0
 80181b2:	9808      	ldr	r0, [sp, #32]
 80181b4:	4283      	cmp	r3, r0
 80181b6:	da5e      	bge.n	8018276 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80181b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80181ba:	4584      	cmp	ip, r0
 80181bc:	da5b      	bge.n	8018276 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80181be:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 80181c2:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 80181c6:	4486      	add	lr, r0
 80181c8:	fa1f fe8e 	uxth.w	lr, lr
 80181cc:	fa0f f38e 	sxth.w	r3, lr
 80181d0:	4599      	cmp	r9, r3
 80181d2:	9309      	str	r3, [sp, #36]	; 0x24
 80181d4:	da4f      	bge.n	8018276 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80181d6:	9b07      	ldr	r3, [sp, #28]
 80181d8:	4298      	cmp	r0, r3
 80181da:	da4c      	bge.n	8018276 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80181dc:	9b05      	ldr	r3, [sp, #20]
 80181de:	459c      	cmp	ip, r3
 80181e0:	bfb8      	it	lt
 80181e2:	469c      	movlt	ip, r3
 80181e4:	4548      	cmp	r0, r9
 80181e6:	9b08      	ldr	r3, [sp, #32]
 80181e8:	bfb8      	it	lt
 80181ea:	4648      	movlt	r0, r9
 80181ec:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 80181f0:	4699      	mov	r9, r3
 80181f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181f4:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 80181f8:	4599      	cmp	r9, r3
 80181fa:	bfc8      	it	gt
 80181fc:	4652      	movgt	r2, sl
 80181fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018200:	eba2 020c 	sub.w	r2, r2, ip
 8018204:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 8018208:	9a07      	ldr	r2, [sp, #28]
 801820a:	4293      	cmp	r3, r2
 801820c:	bfd8      	it	le
 801820e:	4671      	movle	r1, lr
 8018210:	1a09      	subs	r1, r1, r0
 8018212:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 8018216:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801821a:	9b06      	ldr	r3, [sp, #24]
 801821c:	1b12      	subs	r2, r2, r4
 801821e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8018222:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8018226:	1ad2      	subs	r2, r2, r3
 8018228:	4b16      	ldr	r3, [pc, #88]	; (8018284 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 801822a:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801822e:	681a      	ldr	r2, [r3, #0]
 8018230:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 8018234:	b109      	cbz	r1, 801823a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 8018236:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8018238:	b900      	cbnz	r0, 801823c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 801823a:	6890      	ldr	r0, [r2, #8]
 801823c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8018240:	f04f 0c01 	mov.w	ip, #1
 8018244:	9b06      	ldr	r3, [sp, #24]
 8018246:	6801      	ldr	r1, [r0, #0]
 8018248:	4413      	add	r3, r2
 801824a:	f8cd c008 	str.w	ip, [sp, #8]
 801824e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8018252:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 8018256:	b21b      	sxth	r3, r3
 8018258:	4422      	add	r2, r4
 801825a:	f8cd c004 	str.w	ip, [sp, #4]
 801825e:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8018262:	b212      	sxth	r2, r2
 8018264:	f8cd c000 	str.w	ip, [sp]
 8018268:	f8d1 9008 	ldr.w	r9, [r1, #8]
 801826c:	4659      	mov	r1, fp
 801826e:	47c8      	blx	r9
 8018270:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8018274:	e784      	b.n	8018180 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 8018276:	2300      	movs	r3, #0
 8018278:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 801827c:	e7cb      	b.n	8018216 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 801827e:	b013      	add	sp, #76	; 0x4c
 8018280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018284:	200057e0 	.word	0x200057e0

08018288 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 8018288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801828c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8018290:	4606      	mov	r6, r0
 8018292:	4689      	mov	r9, r1
 8018294:	2bff      	cmp	r3, #255	; 0xff
 8018296:	d008      	beq.n	80182aa <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 8018298:	2300      	movs	r3, #0
 801829a:	8003      	strh	r3, [r0, #0]
 801829c:	8043      	strh	r3, [r0, #2]
 801829e:	8083      	strh	r3, [r0, #4]
 80182a0:	4630      	mov	r0, r6
 80182a2:	80f3      	strh	r3, [r6, #6]
 80182a4:	b003      	add	sp, #12
 80182a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182aa:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 80182ae:	4668      	mov	r0, sp
 80182b0:	4659      	mov	r1, fp
 80182b2:	f004 fc3b 	bl	801cb2c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80182b6:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80182ba:	4658      	mov	r0, fp
 80182bc:	f9bd 7000 	ldrsh.w	r7, [sp]
 80182c0:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 80182c4:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 80182c8:	f004 fbbc 	bl	801ca44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80182cc:	4284      	cmp	r4, r0
 80182ce:	d10d      	bne.n	80182ec <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 80182d0:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 80182d4:	4658      	mov	r0, fp
 80182d6:	f004 fbef 	bl	801cab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80182da:	4580      	cmp	r8, r0
 80182dc:	d12a      	bne.n	8018334 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 80182de:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 80182e2:	8037      	strh	r7, [r6, #0]
 80182e4:	f8a6 a002 	strh.w	sl, [r6, #2]
 80182e8:	80b5      	strh	r5, [r6, #4]
 80182ea:	e7d9      	b.n	80182a0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 80182ec:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 80182f0:	4658      	mov	r0, fp
 80182f2:	f004 fba7 	bl	801ca44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80182f6:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 80182fa:	1b7f      	subs	r7, r7, r5
 80182fc:	b2a3      	uxth	r3, r4
 80182fe:	b2bd      	uxth	r5, r7
 8018300:	b22f      	sxth	r7, r5
 8018302:	4428      	add	r0, r5
 8018304:	2f00      	cmp	r7, #0
 8018306:	b280      	uxth	r0, r0
 8018308:	bfb8      	it	lt
 801830a:	18ed      	addlt	r5, r5, r3
 801830c:	4403      	add	r3, r0
 801830e:	bfac      	ite	ge
 8018310:	4625      	movge	r5, r4
 8018312:	2700      	movlt	r7, #0
 8018314:	b29b      	uxth	r3, r3
 8018316:	bfb8      	it	lt
 8018318:	b22d      	sxthlt	r5, r5
 801831a:	b219      	sxth	r1, r3
 801831c:	bfb8      	it	lt
 801831e:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 8018322:	4291      	cmp	r1, r2
 8018324:	bfc4      	itt	gt
 8018326:	1a9c      	subgt	r4, r3, r2
 8018328:	b224      	sxthgt	r4, r4
 801832a:	42ac      	cmp	r4, r5
 801832c:	bfc4      	itt	gt
 801832e:	b207      	sxthgt	r7, r0
 8018330:	4625      	movgt	r5, r4
 8018332:	e7cf      	b.n	80182d4 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 8018334:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 8018338:	4658      	mov	r0, fp
 801833a:	f004 fbbd 	bl	801cab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801833e:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 8018342:	ebaa 0404 	sub.w	r4, sl, r4
 8018346:	fa1f f288 	uxth.w	r2, r8
 801834a:	b2a4      	uxth	r4, r4
 801834c:	fa0f fa84 	sxth.w	sl, r4
 8018350:	4420      	add	r0, r4
 8018352:	f1ba 0f00 	cmp.w	sl, #0
 8018356:	b280      	uxth	r0, r0
 8018358:	bfb8      	it	lt
 801835a:	18a3      	addlt	r3, r4, r2
 801835c:	4402      	add	r2, r0
 801835e:	bfac      	ite	ge
 8018360:	4643      	movge	r3, r8
 8018362:	f04f 0a00 	movlt.w	sl, #0
 8018366:	b292      	uxth	r2, r2
 8018368:	bfb8      	it	lt
 801836a:	b21b      	sxthlt	r3, r3
 801836c:	b214      	sxth	r4, r2
 801836e:	bfb8      	it	lt
 8018370:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8018374:	428c      	cmp	r4, r1
 8018376:	bfc4      	itt	gt
 8018378:	eba2 0801 	subgt.w	r8, r2, r1
 801837c:	fa0f f888 	sxthgt.w	r8, r8
 8018380:	4598      	cmp	r8, r3
 8018382:	bfc4      	itt	gt
 8018384:	fa0f fa80 	sxthgt.w	sl, r0
 8018388:	4643      	movgt	r3, r8
 801838a:	e7aa      	b.n	80182e2 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

0801838c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801838c:	b570      	push	{r4, r5, r6, lr}
 801838e:	880b      	ldrh	r3, [r1, #0]
 8018390:	4605      	mov	r5, r0
 8018392:	4604      	mov	r4, r0
 8018394:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8018396:	8813      	ldrh	r3, [r2, #0]
 8018398:	f825 3f30 	strh.w	r3, [r5, #48]!
 801839c:	4628      	mov	r0, r5
 801839e:	f004 fb51 	bl	801ca44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80183a2:	4606      	mov	r6, r0
 80183a4:	4628      	mov	r0, r5
 80183a6:	f004 fb87 	bl	801cab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80183aa:	6823      	ldr	r3, [r4, #0]
 80183ac:	4605      	mov	r5, r0
 80183ae:	b231      	sxth	r1, r6
 80183b0:	4620      	mov	r0, r4
 80183b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80183b4:	4798      	blx	r3
 80183b6:	6823      	ldr	r3, [r4, #0]
 80183b8:	b229      	sxth	r1, r5
 80183ba:	4620      	mov	r0, r4
 80183bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80183c2:	4718      	bx	r3

080183c4 <_ZNK8touchgfx6Button12getSolidRectEv>:
 80183c4:	b510      	push	{r4, lr}
 80183c6:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80183ca:	4604      	mov	r4, r0
 80183cc:	2bff      	cmp	r3, #255	; 0xff
 80183ce:	d006      	beq.n	80183de <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80183d0:	2300      	movs	r3, #0
 80183d2:	8003      	strh	r3, [r0, #0]
 80183d4:	8043      	strh	r3, [r0, #2]
 80183d6:	8083      	strh	r3, [r0, #4]
 80183d8:	80c3      	strh	r3, [r0, #6]
 80183da:	4620      	mov	r0, r4
 80183dc:	bd10      	pop	{r4, pc}
 80183de:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80183e2:	b11b      	cbz	r3, 80183ec <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80183e4:	3130      	adds	r1, #48	; 0x30
 80183e6:	f004 fba1 	bl	801cb2c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80183ea:	e7f6      	b.n	80183da <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80183ec:	312e      	adds	r1, #46	; 0x2e
 80183ee:	e7fa      	b.n	80183e6 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

080183f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80183f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183f4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80183f8:	b08a      	sub	sp, #40	; 0x28
 80183fa:	4604      	mov	r4, r0
 80183fc:	4688      	mov	r8, r1
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d044      	beq.n	801848c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8018402:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8018404:	a805      	add	r0, sp, #20
 8018406:	f8ad 3014 	strh.w	r3, [sp, #20]
 801840a:	f004 fb1b 	bl	801ca44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801840e:	4605      	mov	r5, r0
 8018410:	b206      	sxth	r6, r0
 8018412:	a805      	add	r0, sp, #20
 8018414:	f004 fb50 	bl	801cab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018418:	f9b8 2000 	ldrsh.w	r2, [r8]
 801841c:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8018420:	2300      	movs	r3, #0
 8018422:	fa0f fc80 	sxth.w	ip, r0
 8018426:	4417      	add	r7, r2
 8018428:	9306      	str	r3, [sp, #24]
 801842a:	b2bf      	uxth	r7, r7
 801842c:	fa0f fe87 	sxth.w	lr, r7
 8018430:	459e      	cmp	lr, r3
 8018432:	dd2d      	ble.n	8018490 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018434:	4296      	cmp	r6, r2
 8018436:	dd2b      	ble.n	8018490 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018438:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 801843c:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8018440:	4419      	add	r1, r3
 8018442:	b289      	uxth	r1, r1
 8018444:	fa0f f881 	sxth.w	r8, r1
 8018448:	f1b8 0f00 	cmp.w	r8, #0
 801844c:	dd20      	ble.n	8018490 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801844e:	459c      	cmp	ip, r3
 8018450:	dd1e      	ble.n	8018490 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018452:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8018456:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801845a:	4576      	cmp	r6, lr
 801845c:	bfa8      	it	ge
 801845e:	463d      	movge	r5, r7
 8018460:	45c4      	cmp	ip, r8
 8018462:	bfa8      	it	ge
 8018464:	4608      	movge	r0, r1
 8018466:	f8ad 2018 	strh.w	r2, [sp, #24]
 801846a:	1aad      	subs	r5, r5, r2
 801846c:	1ac0      	subs	r0, r0, r3
 801846e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018472:	f8ad 501c 	strh.w	r5, [sp, #28]
 8018476:	f8ad 001e 	strh.w	r0, [sp, #30]
 801847a:	4b1f      	ldr	r3, [pc, #124]	; (80184f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	b953      	cbnz	r3, 8018496 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8018480:	4b1e      	ldr	r3, [pc, #120]	; (80184fc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8018482:	218b      	movs	r1, #139	; 0x8b
 8018484:	4a1e      	ldr	r2, [pc, #120]	; (8018500 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8018486:	481f      	ldr	r0, [pc, #124]	; (8018504 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8018488:	f010 f906 	bl	8028698 <__assert_func>
 801848c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801848e:	e7b9      	b.n	8018404 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8018490:	2300      	movs	r3, #0
 8018492:	9307      	str	r3, [sp, #28]
 8018494:	e7f1      	b.n	801847a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8018496:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801849a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801849e:	429a      	cmp	r2, r3
 80184a0:	d026      	beq.n	80184f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80184a2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	dd22      	ble.n	80184f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80184aa:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	dd1e      	ble.n	80184f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 80184b2:	2300      	movs	r3, #0
 80184b4:	a908      	add	r1, sp, #32
 80184b6:	4620      	mov	r0, r4
 80184b8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80184bc:	6823      	ldr	r3, [r4, #0]
 80184be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80184c0:	4798      	blx	r3
 80184c2:	4b11      	ldr	r3, [pc, #68]	; (8018508 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80184ca:	b10a      	cbz	r2, 80184d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 80184cc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80184ce:	b900      	cbnz	r0, 80184d2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 80184d0:	6898      	ldr	r0, [r3, #8]
 80184d2:	2501      	movs	r5, #1
 80184d4:	6801      	ldr	r1, [r0, #0]
 80184d6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80184da:	9502      	str	r5, [sp, #8]
 80184dc:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 80184e0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80184e4:	9401      	str	r4, [sp, #4]
 80184e6:	ac06      	add	r4, sp, #24
 80184e8:	9400      	str	r4, [sp, #0]
 80184ea:	688c      	ldr	r4, [r1, #8]
 80184ec:	a905      	add	r1, sp, #20
 80184ee:	47a0      	blx	r4
 80184f0:	b00a      	add	sp, #40	; 0x28
 80184f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184f6:	bf00      	nop
 80184f8:	20005868 	.word	0x20005868
 80184fc:	0802afe4 	.word	0x0802afe4
 8018500:	0802bf84 	.word	0x0802bf84
 8018504:	0802b020 	.word	0x0802b020
 8018508:	200057e0 	.word	0x200057e0

0801850c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801850c:	b570      	push	{r4, r5, r6, lr}
 801850e:	880b      	ldrh	r3, [r1, #0]
 8018510:	460d      	mov	r5, r1
 8018512:	4604      	mov	r4, r0
 8018514:	84c3      	strh	r3, [r0, #38]	; 0x26
 8018516:	4608      	mov	r0, r1
 8018518:	f004 fa94 	bl	801ca44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801851c:	4606      	mov	r6, r0
 801851e:	4628      	mov	r0, r5
 8018520:	f004 faca 	bl	801cab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018524:	6823      	ldr	r3, [r4, #0]
 8018526:	4605      	mov	r5, r0
 8018528:	b231      	sxth	r1, r6
 801852a:	4620      	mov	r0, r4
 801852c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801852e:	4798      	blx	r3
 8018530:	6823      	ldr	r3, [r4, #0]
 8018532:	b229      	sxth	r1, r5
 8018534:	4620      	mov	r0, r4
 8018536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018538:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801853c:	4718      	bx	r3

0801853e <_ZNK8touchgfx5Image12getSolidRectEv>:
 801853e:	b510      	push	{r4, lr}
 8018540:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8018544:	4604      	mov	r4, r0
 8018546:	2bff      	cmp	r3, #255	; 0xff
 8018548:	d006      	beq.n	8018558 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801854a:	2300      	movs	r3, #0
 801854c:	8003      	strh	r3, [r0, #0]
 801854e:	8043      	strh	r3, [r0, #2]
 8018550:	8083      	strh	r3, [r0, #4]
 8018552:	80c3      	strh	r3, [r0, #6]
 8018554:	4620      	mov	r0, r4
 8018556:	bd10      	pop	{r4, pc}
 8018558:	3126      	adds	r1, #38	; 0x26
 801855a:	f004 fae7 	bl	801cb2c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801855e:	e7f9      	b.n	8018554 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08018560 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8018560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018564:	4604      	mov	r4, r0
 8018566:	b088      	sub	sp, #32
 8018568:	2500      	movs	r5, #0
 801856a:	460f      	mov	r7, r1
 801856c:	f854 3b26 	ldr.w	r3, [r4], #38
 8018570:	a904      	add	r1, sp, #16
 8018572:	4606      	mov	r6, r0
 8018574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018576:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801857a:	4798      	blx	r3
 801857c:	4620      	mov	r0, r4
 801857e:	f004 fa61 	bl	801ca44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018582:	4680      	mov	r8, r0
 8018584:	4620      	mov	r0, r4
 8018586:	f004 fa97 	bl	801cab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801858a:	9506      	str	r5, [sp, #24]
 801858c:	ad06      	add	r5, sp, #24
 801858e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8018592:	4639      	mov	r1, r7
 8018594:	f8ad 801c 	strh.w	r8, [sp, #28]
 8018598:	4628      	mov	r0, r5
 801859a:	f7fe fa55 	bl	8016a48 <_ZN8touchgfx4RectaNERKS0_>
 801859e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	dd19      	ble.n	80185da <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80185a6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	dd15      	ble.n	80185da <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80185ae:	4b0c      	ldr	r3, [pc, #48]	; (80185e0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80185b6:	b10a      	cbz	r2, 80185bc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80185b8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80185ba:	b900      	cbnz	r0, 80185be <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80185bc:	6898      	ldr	r0, [r3, #8]
 80185be:	2701      	movs	r7, #1
 80185c0:	6801      	ldr	r1, [r0, #0]
 80185c2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80185c6:	9702      	str	r7, [sp, #8]
 80185c8:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80185cc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80185d0:	e9cd 5600 	strd	r5, r6, [sp]
 80185d4:	688d      	ldr	r5, [r1, #8]
 80185d6:	4621      	mov	r1, r4
 80185d8:	47a8      	blx	r5
 80185da:	b008      	add	sp, #32
 80185dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185e0:	200057e0 	.word	0x200057e0

080185e4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80185e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185e8:	4696      	mov	lr, r2
 80185ea:	b097      	sub	sp, #92	; 0x5c
 80185ec:	4605      	mov	r5, r0
 80185ee:	4614      	mov	r4, r2
 80185f0:	460e      	mov	r6, r1
 80185f2:	461f      	mov	r7, r3
 80185f4:	f10d 0c1c 	add.w	ip, sp, #28
 80185f8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80185fc:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8018600:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8018604:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018608:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801860c:	f8de 3000 	ldr.w	r3, [lr]
 8018610:	f104 0e14 	add.w	lr, r4, #20
 8018614:	f8cc 3000 	str.w	r3, [ip]
 8018618:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801861c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018620:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018624:	f8de 3000 	ldr.w	r3, [lr]
 8018628:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801862c:	f8cc 3000 	str.w	r3, [ip]
 8018630:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8018634:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018638:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801863c:	f8de 3000 	ldr.w	r3, [lr]
 8018640:	4631      	mov	r1, r6
 8018642:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018644:	4628      	mov	r0, r5
 8018646:	f8cc 3000 	str.w	r3, [ip]
 801864a:	682b      	ldr	r3, [r5, #0]
 801864c:	9201      	str	r2, [sp, #4]
 801864e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018650:	f8cd 8008 	str.w	r8, [sp, #8]
 8018654:	9200      	str	r2, [sp, #0]
 8018656:	aa07      	add	r2, sp, #28
 8018658:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801865c:	f8d3 b038 	ldr.w	fp, [r3, #56]	; 0x38
 8018660:	463b      	mov	r3, r7
 8018662:	47d8      	blx	fp
 8018664:	46a6      	mov	lr, r4
 8018666:	f10d 0c1c 	add.w	ip, sp, #28
 801866a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801866e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018672:	f8de 3000 	ldr.w	r3, [lr]
 8018676:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801867a:	343c      	adds	r4, #60	; 0x3c
 801867c:	f8cc 3000 	str.w	r3, [ip]
 8018680:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018684:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018688:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801868c:	f8de 3000 	ldr.w	r3, [lr]
 8018690:	f8cc 3000 	str.w	r3, [ip]
 8018694:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8018698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801869a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801869e:	6823      	ldr	r3, [r4, #0]
 80186a0:	4631      	mov	r1, r6
 80186a2:	4628      	mov	r0, r5
 80186a4:	f8cc 3000 	str.w	r3, [ip]
 80186a8:	682b      	ldr	r3, [r5, #0]
 80186aa:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80186ae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80186b0:	f8cd 8008 	str.w	r8, [sp, #8]
 80186b4:	9201      	str	r2, [sp, #4]
 80186b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80186b8:	9200      	str	r2, [sp, #0]
 80186ba:	aa07      	add	r2, sp, #28
 80186bc:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80186be:	463b      	mov	r3, r7
 80186c0:	47a0      	blx	r4
 80186c2:	b017      	add	sp, #92	; 0x5c
 80186c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080186c8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80186c8:	2000      	movs	r0, #0
 80186ca:	4770      	bx	lr

080186cc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80186cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186d0:	b08d      	sub	sp, #52	; 0x34
 80186d2:	4688      	mov	r8, r1
 80186d4:	f8d3 c000 	ldr.w	ip, [r3]
 80186d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80186da:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80186de:	680f      	ldr	r7, [r1, #0]
 80186e0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80186e4:	eba7 070c 	sub.w	r7, r7, ip
 80186e8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 80186ec:	edd3 6a07 	vldr	s13, [r3, #28]
 80186f0:	42bc      	cmp	r4, r7
 80186f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80186f4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80186f8:	bfa8      	it	ge
 80186fa:	463c      	movge	r4, r7
 80186fc:	f9b1 9000 	ldrsh.w	r9, [r1]
 8018700:	f9ba 1000 	ldrsh.w	r1, [sl]
 8018704:	ee07 4a90 	vmov	s15, r4
 8018708:	eb09 0e0c 	add.w	lr, r9, ip
 801870c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8018710:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8018714:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8018718:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801871c:	4571      	cmp	r1, lr
 801871e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8018722:	ee65 4a24 	vmul.f32	s9, s10, s9
 8018726:	ee25 5a27 	vmul.f32	s10, s10, s15
 801872a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801872e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8018732:	ee32 1a05 	vadd.f32	s2, s4, s10
 8018736:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801873a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801873e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018742:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018746:	f340 808c 	ble.w	8018862 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801874a:	eba1 060e 	sub.w	r6, r1, lr
 801874e:	fb96 f5f4 	sdiv	r5, r6, r4
 8018752:	ee07 5a10 	vmov	s14, r5
 8018756:	2d00      	cmp	r5, #0
 8018758:	fb04 6615 	mls	r6, r4, r5, r6
 801875c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018760:	eea7 0a04 	vfma.f32	s0, s14, s8
 8018764:	eee7 0a24 	vfma.f32	s1, s14, s9
 8018768:	eea7 1a05 	vfma.f32	s2, s14, s10
 801876c:	dd12      	ble.n	8018794 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801876e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8018772:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8018776:	ee31 2a45 	vsub.f32	s4, s2, s10
 801877a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801877e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018782:	bf14      	ite	ne
 8018784:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8018788:	eeb0 7a67 	vmoveq.f32	s14, s15
 801878c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018790:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018794:	fb05 f204 	mul.w	r2, r5, r4
 8018798:	1abf      	subs	r7, r7, r2
 801879a:	4494      	add	ip, r2
 801879c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80187a0:	4411      	add	r1, r2
 80187a2:	eb09 020c 	add.w	r2, r9, ip
 80187a6:	b209      	sxth	r1, r1
 80187a8:	443a      	add	r2, r7
 80187aa:	428a      	cmp	r2, r1
 80187ac:	bfc4      	itt	gt
 80187ae:	eba1 0209 	subgt.w	r2, r1, r9
 80187b2:	eba2 070c 	subgt.w	r7, r2, ip
 80187b6:	2f00      	cmp	r7, #0
 80187b8:	dd50      	ble.n	801885c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80187ba:	fb97 f1f4 	sdiv	r1, r7, r4
 80187be:	fb04 7211 	mls	r2, r4, r1, r7
 80187c2:	b90a      	cbnz	r2, 80187c8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80187c4:	3901      	subs	r1, #1
 80187c6:	4622      	mov	r2, r4
 80187c8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80187cc:	6840      	ldr	r0, [r0, #4]
 80187ce:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80187d2:	44b6      	add	lr, r6
 80187d4:	f8d0 a000 	ldr.w	sl, [r0]
 80187d8:	2900      	cmp	r1, #0
 80187da:	bfcc      	ite	gt
 80187dc:	46a1      	movgt	r9, r4
 80187de:	4691      	movle	r9, r2
 80187e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80187e2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80187e4:	fb04 e505 	mla	r5, r4, r5, lr
 80187e8:	eef0 6a42 	vmov.f32	s13, s4
 80187ec:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80187f0:	9008      	str	r0, [sp, #32]
 80187f2:	eeb0 7a61 	vmov.f32	s14, s3
 80187f6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80187f8:	695b      	ldr	r3, [r3, #20]
 80187fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80187fe:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8018802:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8018806:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018808:	445b      	add	r3, fp
 801880a:	9307      	str	r3, [sp, #28]
 801880c:	ee16 3a90 	vmov	r3, s13
 8018810:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8018814:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8018818:	ee21 3a23 	vmul.f32	s6, s2, s7
 801881c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018820:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018824:	ee17 7a90 	vmov	r7, s15
 8018828:	ee73 7a42 	vsub.f32	s15, s6, s4
 801882c:	fb97 f7f4 	sdiv	r7, r7, r4
 8018830:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018834:	ee17 ca90 	vmov	ip, s15
 8018838:	fb9c fcf4 	sdiv	ip, ip, r4
 801883c:	fb0c 3306 	mla	r3, ip, r6, r3
 8018840:	9302      	str	r3, [sp, #8]
 8018842:	ee17 3a10 	vmov	r3, s14
 8018846:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801884a:	fb07 3706 	mla	r7, r7, r6, r3
 801884e:	eba9 0306 	sub.w	r3, r9, r6
 8018852:	e9cd 4700 	strd	r4, r7, [sp]
 8018856:	f8da 4008 	ldr.w	r4, [sl, #8]
 801885a:	47a0      	blx	r4
 801885c:	b00d      	add	sp, #52	; 0x34
 801885e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018862:	2500      	movs	r5, #0
 8018864:	462e      	mov	r6, r5
 8018866:	e799      	b.n	801879c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08018868 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801886c:	b0db      	sub	sp, #364	; 0x16c
 801886e:	461d      	mov	r5, r3
 8018870:	4614      	mov	r4, r2
 8018872:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8018876:	910f      	str	r1, [sp, #60]	; 0x3c
 8018878:	4629      	mov	r1, r5
 801887a:	930a      	str	r3, [sp, #40]	; 0x28
 801887c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8018880:	9009      	str	r0, [sp, #36]	; 0x24
 8018882:	930b      	str	r3, [sp, #44]	; 0x2c
 8018884:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8018888:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801888c:	9310      	str	r3, [sp, #64]	; 0x40
 801888e:	6803      	ldr	r3, [r0, #0]
 8018890:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8018892:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018896:	47b8      	blx	r7
 8018898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801889a:	6058      	str	r0, [r3, #4]
 801889c:	2800      	cmp	r0, #0
 801889e:	f000 83a1 	beq.w	8018fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80188a2:	682b      	ldr	r3, [r5, #0]
 80188a4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80188a8:	ed94 7a02 	vldr	s14, [r4, #8]
 80188ac:	9314      	str	r3, [sp, #80]	; 0x50
 80188ae:	686b      	ldr	r3, [r5, #4]
 80188b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80188b4:	9315      	str	r3, [sp, #84]	; 0x54
 80188b6:	4bc1      	ldr	r3, [pc, #772]	; (8018bbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80188b8:	7819      	ldrb	r1, [r3, #0]
 80188ba:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80188be:	2900      	cmp	r1, #0
 80188c0:	bf16      	itet	ne
 80188c2:	4619      	movne	r1, r3
 80188c4:	4611      	moveq	r1, r2
 80188c6:	4613      	movne	r3, r2
 80188c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188cc:	9116      	str	r1, [sp, #88]	; 0x58
 80188ce:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80188d2:	f240 8387 	bls.w	8018fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80188d6:	ed94 7a07 	vldr	s14, [r4, #28]
 80188da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80188de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188e2:	f240 837f 	bls.w	8018fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80188e6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80188ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80188ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188f2:	f240 8377 	bls.w	8018fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80188f6:	6822      	ldr	r2, [r4, #0]
 80188f8:	4bb1      	ldr	r3, [pc, #708]	; (8018bc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80188fa:	429a      	cmp	r2, r3
 80188fc:	f2c0 8372 	blt.w	8018fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018900:	49b0      	ldr	r1, [pc, #704]	; (8018bc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8018902:	6963      	ldr	r3, [r4, #20]
 8018904:	428a      	cmp	r2, r1
 8018906:	f300 836d 	bgt.w	8018fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801890a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801890e:	48ae      	ldr	r0, [pc, #696]	; (8018bc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8018910:	33ff      	adds	r3, #255	; 0xff
 8018912:	4283      	cmp	r3, r0
 8018914:	f200 8366 	bhi.w	8018fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018918:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801891a:	4dac      	ldr	r5, [pc, #688]	; (8018bcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801891c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8018920:	33ff      	adds	r3, #255	; 0xff
 8018922:	42ab      	cmp	r3, r5
 8018924:	f200 835e 	bhi.w	8018fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018928:	6862      	ldr	r2, [r4, #4]
 801892a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801892e:	33ff      	adds	r3, #255	; 0xff
 8018930:	4283      	cmp	r3, r0
 8018932:	f200 8357 	bhi.w	8018fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018936:	69a1      	ldr	r1, [r4, #24]
 8018938:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801893c:	33ff      	adds	r3, #255	; 0xff
 801893e:	4283      	cmp	r3, r0
 8018940:	f200 8350 	bhi.w	8018fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018944:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018946:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801894a:	30ff      	adds	r0, #255	; 0xff
 801894c:	42a8      	cmp	r0, r5
 801894e:	f200 8349 	bhi.w	8018fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018952:	428a      	cmp	r2, r1
 8018954:	f280 8110 	bge.w	8018b78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8018958:	429a      	cmp	r2, r3
 801895a:	f300 8119 	bgt.w	8018b90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801895e:	4299      	cmp	r1, r3
 8018960:	f280 811d 	bge.w	8018b9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8018964:	2502      	movs	r5, #2
 8018966:	2701      	movs	r7, #1
 8018968:	46a9      	mov	r9, r5
 801896a:	46b8      	mov	r8, r7
 801896c:	f04f 0a00 	mov.w	sl, #0
 8018970:	4621      	mov	r1, r4
 8018972:	a849      	add	r0, sp, #292	; 0x124
 8018974:	f003 fdb4 	bl	801c4e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8018978:	4622      	mov	r2, r4
 801897a:	4653      	mov	r3, sl
 801897c:	a949      	add	r1, sp, #292	; 0x124
 801897e:	f8cd 9000 	str.w	r9, [sp]
 8018982:	a819      	add	r0, sp, #100	; 0x64
 8018984:	f003 fedc 	bl	801c740 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018988:	4622      	mov	r2, r4
 801898a:	4653      	mov	r3, sl
 801898c:	a949      	add	r1, sp, #292	; 0x124
 801898e:	f8cd 8000 	str.w	r8, [sp]
 8018992:	a829      	add	r0, sp, #164	; 0xa4
 8018994:	f003 fed4 	bl	801c740 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018998:	4643      	mov	r3, r8
 801899a:	4622      	mov	r2, r4
 801899c:	a949      	add	r1, sp, #292	; 0x124
 801899e:	f8cd 9000 	str.w	r9, [sp]
 80189a2:	a839      	add	r0, sp, #228	; 0xe4
 80189a4:	f003 fecc 	bl	801c740 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80189a8:	42af      	cmp	r7, r5
 80189aa:	af12      	add	r7, sp, #72	; 0x48
 80189ac:	bfb7      	itett	lt
 80189ae:	2300      	movlt	r3, #0
 80189b0:	2301      	movge	r3, #1
 80189b2:	ad29      	addlt	r5, sp, #164	; 0xa4
 80189b4:	ac19      	addlt	r4, sp, #100	; 0x64
 80189b6:	bfb1      	iteee	lt
 80189b8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80189ba:	ad19      	addge	r5, sp, #100	; 0x64
 80189bc:	930e      	strge	r3, [sp, #56]	; 0x38
 80189be:	ac29      	addge	r4, sp, #164	; 0xa4
 80189c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80189c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80189c6:	e887 0003 	stmia.w	r7, {r0, r1}
 80189ca:	b928      	cbnz	r0, 80189d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80189cc:	4b80      	ldr	r3, [pc, #512]	; (8018bd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80189ce:	6818      	ldr	r0, [r3, #0]
 80189d0:	6803      	ldr	r3, [r0, #0]
 80189d2:	6a1b      	ldr	r3, [r3, #32]
 80189d4:	4798      	blx	r3
 80189d6:	6038      	str	r0, [r7, #0]
 80189d8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80189da:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80189de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80189e2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80189e4:	930c      	str	r3, [sp, #48]	; 0x30
 80189e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80189e8:	6963      	ldr	r3, [r4, #20]
 80189ea:	440b      	add	r3, r1
 80189ec:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80189f0:	4408      	add	r0, r1
 80189f2:	b200      	sxth	r0, r0
 80189f4:	4283      	cmp	r3, r0
 80189f6:	900d      	str	r0, [sp, #52]	; 0x34
 80189f8:	f280 80dd 	bge.w	8018bb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80189fc:	428b      	cmp	r3, r1
 80189fe:	da08      	bge.n	8018a12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018a00:	2a00      	cmp	r2, #0
 8018a02:	dd06      	ble.n	8018a12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018a04:	1acb      	subs	r3, r1, r3
 8018a06:	429a      	cmp	r2, r3
 8018a08:	f2c0 80e4 	blt.w	8018bd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	f300 80e2 	bgt.w	8018bd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8018a12:	6967      	ldr	r7, [r4, #20]
 8018a14:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018a18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018a1a:	443b      	add	r3, r7
 8018a1c:	461f      	mov	r7, r3
 8018a1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018a20:	1bdf      	subs	r7, r3, r7
 8018a22:	4297      	cmp	r7, r2
 8018a24:	bfa8      	it	ge
 8018a26:	4617      	movge	r7, r2
 8018a28:	2f00      	cmp	r7, #0
 8018a2a:	f340 8166 	ble.w	8018cfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8018a2e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018a30:	6829      	ldr	r1, [r5, #0]
 8018a32:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018a36:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018a3a:	4411      	add	r1, r2
 8018a3c:	6820      	ldr	r0, [r4, #0]
 8018a3e:	4299      	cmp	r1, r3
 8018a40:	dd1a      	ble.n	8018a78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018a42:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018a46:	4402      	add	r2, r0
 8018a48:	440b      	add	r3, r1
 8018a4a:	b21b      	sxth	r3, r3
 8018a4c:	429a      	cmp	r2, r3
 8018a4e:	dc13      	bgt.n	8018a78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018a50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018a52:	a912      	add	r1, sp, #72	; 0x48
 8018a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	9206      	str	r2, [sp, #24]
 8018a5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018a5e:	9500      	str	r5, [sp, #0]
 8018a60:	9205      	str	r2, [sp, #20]
 8018a62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a64:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018a68:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8018a6a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018a6e:	aa49      	add	r2, sp, #292	; 0x124
 8018a70:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 8018a74:	4623      	mov	r3, r4
 8018a76:	47c8      	blx	r9
 8018a78:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8018a7c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8018a80:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8018a84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018a88:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8018a8c:	68a1      	ldr	r1, [r4, #8]
 8018a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018a92:	ed94 6a08 	vldr	s12, [r4, #32]
 8018a96:	edd4 6a07 	vldr	s13, [r4, #28]
 8018a9a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018a9e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018aa2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018aa6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018aaa:	edc4 6a07 	vstr	s13, [r4, #28]
 8018aae:	441a      	add	r2, r3
 8018ab0:	6963      	ldr	r3, [r4, #20]
 8018ab2:	3301      	adds	r3, #1
 8018ab4:	6022      	str	r2, [r4, #0]
 8018ab6:	6163      	str	r3, [r4, #20]
 8018ab8:	69a3      	ldr	r3, [r4, #24]
 8018aba:	3b01      	subs	r3, #1
 8018abc:	61a3      	str	r3, [r4, #24]
 8018abe:	6923      	ldr	r3, [r4, #16]
 8018ac0:	440b      	add	r3, r1
 8018ac2:	68e1      	ldr	r1, [r4, #12]
 8018ac4:	428b      	cmp	r3, r1
 8018ac6:	6123      	str	r3, [r4, #16]
 8018ac8:	db15      	blt.n	8018af6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8018aca:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8018ace:	3201      	adds	r2, #1
 8018ad0:	1a5b      	subs	r3, r3, r1
 8018ad2:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018ad6:	6022      	str	r2, [r4, #0]
 8018ad8:	6123      	str	r3, [r4, #16]
 8018ada:	edc4 6a07 	vstr	s13, [r4, #28]
 8018ade:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018ae2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018ae6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018aea:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8018aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018af2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018af6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018afa:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8018afe:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018b02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018b06:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8018b0a:	68a9      	ldr	r1, [r5, #8]
 8018b0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018b10:	ed95 6a08 	vldr	s12, [r5, #32]
 8018b14:	edd5 6a07 	vldr	s13, [r5, #28]
 8018b18:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018b1c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018b20:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018b24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018b28:	edc5 6a07 	vstr	s13, [r5, #28]
 8018b2c:	441a      	add	r2, r3
 8018b2e:	696b      	ldr	r3, [r5, #20]
 8018b30:	3301      	adds	r3, #1
 8018b32:	602a      	str	r2, [r5, #0]
 8018b34:	616b      	str	r3, [r5, #20]
 8018b36:	69ab      	ldr	r3, [r5, #24]
 8018b38:	3b01      	subs	r3, #1
 8018b3a:	61ab      	str	r3, [r5, #24]
 8018b3c:	692b      	ldr	r3, [r5, #16]
 8018b3e:	440b      	add	r3, r1
 8018b40:	68e9      	ldr	r1, [r5, #12]
 8018b42:	428b      	cmp	r3, r1
 8018b44:	612b      	str	r3, [r5, #16]
 8018b46:	db15      	blt.n	8018b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8018b48:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8018b4c:	3201      	adds	r2, #1
 8018b4e:	1a5b      	subs	r3, r3, r1
 8018b50:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018b54:	602a      	str	r2, [r5, #0]
 8018b56:	612b      	str	r3, [r5, #16]
 8018b58:	edc5 6a07 	vstr	s13, [r5, #28]
 8018b5c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8018b60:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018b64:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018b68:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8018b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018b70:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018b74:	3f01      	subs	r7, #1
 8018b76:	e757      	b.n	8018a28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8018b78:	4299      	cmp	r1, r3
 8018b7a:	dc13      	bgt.n	8018ba4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8018b7c:	429a      	cmp	r2, r3
 8018b7e:	da14      	bge.n	8018baa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8018b80:	2502      	movs	r5, #2
 8018b82:	2703      	movs	r7, #3
 8018b84:	f04f 0800 	mov.w	r8, #0
 8018b88:	46a9      	mov	r9, r5
 8018b8a:	f04f 0a01 	mov.w	sl, #1
 8018b8e:	e6ef      	b.n	8018970 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018b90:	2501      	movs	r5, #1
 8018b92:	2700      	movs	r7, #0
 8018b94:	46a9      	mov	r9, r5
 8018b96:	46b8      	mov	r8, r7
 8018b98:	f04f 0a02 	mov.w	sl, #2
 8018b9c:	e6e8      	b.n	8018970 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018b9e:	2501      	movs	r5, #1
 8018ba0:	2702      	movs	r7, #2
 8018ba2:	e6e1      	b.n	8018968 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8018ba4:	2500      	movs	r5, #0
 8018ba6:	2701      	movs	r7, #1
 8018ba8:	e7f4      	b.n	8018b94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8018baa:	2702      	movs	r7, #2
 8018bac:	2503      	movs	r5, #3
 8018bae:	f04f 0900 	mov.w	r9, #0
 8018bb2:	46b8      	mov	r8, r7
 8018bb4:	e7e9      	b.n	8018b8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8018bb6:	4613      	mov	r3, r2
 8018bb8:	e728      	b.n	8018a0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8018bba:	bf00      	nop
 8018bbc:	200057d8 	.word	0x200057d8
 8018bc0:	fffd8f01 	.word	0xfffd8f01
 8018bc4:	00027100 	.word	0x00027100
 8018bc8:	0004e1ff 	.word	0x0004e1ff
 8018bcc:	0004e1fe 	.word	0x0004e1fe
 8018bd0:	200057e0 	.word	0x200057e0
 8018bd4:	4613      	mov	r3, r2
 8018bd6:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018bd8:	469e      	mov	lr, r3
 8018bda:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8018bdc:	469c      	mov	ip, r3
 8018bde:	9111      	str	r1, [sp, #68]	; 0x44
 8018be0:	f04f 0900 	mov.w	r9, #0
 8018be4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8018be8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8018bec:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8018bf0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8018bf4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8018bf8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8018bfc:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8018c00:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8018c04:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8018c08:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8018c0c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8018c10:	f1bc 0f00 	cmp.w	ip, #0
 8018c14:	d147      	bne.n	8018ca6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8018c16:	eb03 0c07 	add.w	ip, r3, r7
 8018c1a:	1ad7      	subs	r7, r2, r3
 8018c1c:	f1b9 0f00 	cmp.w	r9, #0
 8018c20:	d009      	beq.n	8018c36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8018c22:	9029      	str	r0, [sp, #164]	; 0xa4
 8018c24:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8018c28:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8018c2c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8018c30:	912d      	str	r1, [sp, #180]	; 0xb4
 8018c32:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8018c36:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018c38:	f04f 0800 	mov.w	r8, #0
 8018c3c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018c40:	9111      	str	r1, [sp, #68]	; 0x44
 8018c42:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018c46:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8018c4a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8018c4e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8018c52:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018c56:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8018c5a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8018c5e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8018c62:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8018c66:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8018c6a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8018c6e:	f1be 0f00 	cmp.w	lr, #0
 8018c72:	d031      	beq.n	8018cd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8018c74:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018c76:	4450      	add	r0, sl
 8018c78:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018c7c:	4431      	add	r1, r6
 8018c7e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018c82:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018c86:	4549      	cmp	r1, r9
 8018c88:	db08      	blt.n	8018c9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8018c8a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8018c8e:	3001      	adds	r0, #1
 8018c90:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018c94:	eba1 0109 	sub.w	r1, r1, r9
 8018c98:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018c9c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018ca0:	f04f 0801 	mov.w	r8, #1
 8018ca4:	e7e3      	b.n	8018c6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8018ca6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018ca8:	4450      	add	r0, sl
 8018caa:	ee37 7a24 	vadd.f32	s14, s14, s9
 8018cae:	4431      	add	r1, r6
 8018cb0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018cb4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018cb8:	4541      	cmp	r1, r8
 8018cba:	db08      	blt.n	8018cce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8018cbc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018cc0:	3001      	adds	r0, #1
 8018cc2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018cc6:	eba1 0108 	sub.w	r1, r1, r8
 8018cca:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018cce:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018cd2:	f04f 0901 	mov.w	r9, #1
 8018cd6:	e79b      	b.n	8018c10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8018cd8:	449c      	add	ip, r3
 8018cda:	1aff      	subs	r7, r7, r3
 8018cdc:	f1b8 0f00 	cmp.w	r8, #0
 8018ce0:	d009      	beq.n	8018cf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8018ce2:	9019      	str	r0, [sp, #100]	; 0x64
 8018ce4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018ce8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8018cec:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8018cf0:	911d      	str	r1, [sp, #116]	; 0x74
 8018cf2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018cf6:	1ad2      	subs	r2, r2, r3
 8018cf8:	e68b      	b.n	8018a12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018cfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018cfc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	f000 80d1 	beq.w	8018ea6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8018d04:	ad19      	add	r5, sp, #100	; 0x64
 8018d06:	ac39      	add	r4, sp, #228	; 0xe4
 8018d08:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018d0a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8018d0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018d12:	930c      	str	r3, [sp, #48]	; 0x30
 8018d14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018d16:	6963      	ldr	r3, [r4, #20]
 8018d18:	440b      	add	r3, r1
 8018d1a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018d1e:	4408      	add	r0, r1
 8018d20:	b200      	sxth	r0, r0
 8018d22:	4283      	cmp	r3, r0
 8018d24:	900d      	str	r0, [sp, #52]	; 0x34
 8018d26:	f280 80c1 	bge.w	8018eac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8018d2a:	428b      	cmp	r3, r1
 8018d2c:	da08      	bge.n	8018d40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018d2e:	2a00      	cmp	r2, #0
 8018d30:	dd06      	ble.n	8018d40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018d32:	1acb      	subs	r3, r1, r3
 8018d34:	429a      	cmp	r2, r3
 8018d36:	f2c0 80bb 	blt.w	8018eb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	f300 80b9 	bgt.w	8018eb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8018d40:	6967      	ldr	r7, [r4, #20]
 8018d42:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018d48:	443b      	add	r3, r7
 8018d4a:	461f      	mov	r7, r3
 8018d4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018d4e:	1bdf      	subs	r7, r3, r7
 8018d50:	4297      	cmp	r7, r2
 8018d52:	bfa8      	it	ge
 8018d54:	4617      	movge	r7, r2
 8018d56:	2f00      	cmp	r7, #0
 8018d58:	f340 813c 	ble.w	8018fd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8018d5c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018d5e:	6829      	ldr	r1, [r5, #0]
 8018d60:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018d64:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018d68:	4411      	add	r1, r2
 8018d6a:	6820      	ldr	r0, [r4, #0]
 8018d6c:	4299      	cmp	r1, r3
 8018d6e:	dd1a      	ble.n	8018da6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018d70:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018d74:	4402      	add	r2, r0
 8018d76:	440b      	add	r3, r1
 8018d78:	b21b      	sxth	r3, r3
 8018d7a:	429a      	cmp	r2, r3
 8018d7c:	dc13      	bgt.n	8018da6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018d7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018d80:	a912      	add	r1, sp, #72	; 0x48
 8018d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	9206      	str	r2, [sp, #24]
 8018d8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018d8c:	9500      	str	r5, [sp, #0]
 8018d8e:	9205      	str	r2, [sp, #20]
 8018d90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018d92:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018d96:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8018d98:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018d9c:	aa49      	add	r2, sp, #292	; 0x124
 8018d9e:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 8018da2:	4623      	mov	r3, r4
 8018da4:	47c8      	blx	r9
 8018da6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8018daa:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8018dae:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8018db2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018db6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8018dba:	68a1      	ldr	r1, [r4, #8]
 8018dbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018dc0:	ed94 6a08 	vldr	s12, [r4, #32]
 8018dc4:	edd4 6a07 	vldr	s13, [r4, #28]
 8018dc8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018dcc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018dd0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018dd4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018dd8:	edc4 6a07 	vstr	s13, [r4, #28]
 8018ddc:	441a      	add	r2, r3
 8018dde:	6963      	ldr	r3, [r4, #20]
 8018de0:	3301      	adds	r3, #1
 8018de2:	6022      	str	r2, [r4, #0]
 8018de4:	6163      	str	r3, [r4, #20]
 8018de6:	69a3      	ldr	r3, [r4, #24]
 8018de8:	3b01      	subs	r3, #1
 8018dea:	61a3      	str	r3, [r4, #24]
 8018dec:	6923      	ldr	r3, [r4, #16]
 8018dee:	440b      	add	r3, r1
 8018df0:	68e1      	ldr	r1, [r4, #12]
 8018df2:	428b      	cmp	r3, r1
 8018df4:	6123      	str	r3, [r4, #16]
 8018df6:	db15      	blt.n	8018e24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8018df8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8018dfc:	3201      	adds	r2, #1
 8018dfe:	1a5b      	subs	r3, r3, r1
 8018e00:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018e04:	6022      	str	r2, [r4, #0]
 8018e06:	6123      	str	r3, [r4, #16]
 8018e08:	edc4 6a07 	vstr	s13, [r4, #28]
 8018e0c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018e10:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018e14:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018e18:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8018e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018e20:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018e24:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018e28:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8018e2c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018e30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018e34:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8018e38:	68a9      	ldr	r1, [r5, #8]
 8018e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018e3e:	ed95 6a08 	vldr	s12, [r5, #32]
 8018e42:	edd5 6a07 	vldr	s13, [r5, #28]
 8018e46:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018e4a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018e4e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018e52:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018e56:	edc5 6a07 	vstr	s13, [r5, #28]
 8018e5a:	441a      	add	r2, r3
 8018e5c:	696b      	ldr	r3, [r5, #20]
 8018e5e:	3301      	adds	r3, #1
 8018e60:	602a      	str	r2, [r5, #0]
 8018e62:	616b      	str	r3, [r5, #20]
 8018e64:	69ab      	ldr	r3, [r5, #24]
 8018e66:	3b01      	subs	r3, #1
 8018e68:	61ab      	str	r3, [r5, #24]
 8018e6a:	692b      	ldr	r3, [r5, #16]
 8018e6c:	440b      	add	r3, r1
 8018e6e:	68e9      	ldr	r1, [r5, #12]
 8018e70:	428b      	cmp	r3, r1
 8018e72:	612b      	str	r3, [r5, #16]
 8018e74:	db15      	blt.n	8018ea2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8018e76:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8018e7a:	3201      	adds	r2, #1
 8018e7c:	1a5b      	subs	r3, r3, r1
 8018e7e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018e82:	602a      	str	r2, [r5, #0]
 8018e84:	612b      	str	r3, [r5, #16]
 8018e86:	edc5 6a07 	vstr	s13, [r5, #28]
 8018e8a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8018e8e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018e92:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018e96:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8018e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018e9e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018ea2:	3f01      	subs	r7, #1
 8018ea4:	e757      	b.n	8018d56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8018ea6:	ad39      	add	r5, sp, #228	; 0xe4
 8018ea8:	ac19      	add	r4, sp, #100	; 0x64
 8018eaa:	e72d      	b.n	8018d08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8018eac:	4613      	mov	r3, r2
 8018eae:	e744      	b.n	8018d3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8018eb0:	4613      	mov	r3, r2
 8018eb2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8018eb4:	469e      	mov	lr, r3
 8018eb6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8018eba:	461f      	mov	r7, r3
 8018ebc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8018ec0:	f04f 0900 	mov.w	r9, #0
 8018ec4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8018ec8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8018ecc:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8018ed0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8018ed4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8018ed8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8018eda:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8018ede:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8018ee2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8018ee6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8018eea:	960e      	str	r6, [sp, #56]	; 0x38
 8018eec:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8018ef0:	2f00      	cmp	r7, #0
 8018ef2:	d146      	bne.n	8018f82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8018ef4:	449c      	add	ip, r3
 8018ef6:	1ad7      	subs	r7, r2, r3
 8018ef8:	f1b9 0f00 	cmp.w	r9, #0
 8018efc:	d009      	beq.n	8018f12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8018efe:	9039      	str	r0, [sp, #228]	; 0xe4
 8018f00:	913d      	str	r1, [sp, #244]	; 0xf4
 8018f02:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8018f06:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8018f0a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8018f0e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8018f12:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018f14:	f04f 0800 	mov.w	r8, #0
 8018f18:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018f1c:	910e      	str	r1, [sp, #56]	; 0x38
 8018f1e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018f22:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8018f26:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8018f2a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8018f2e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018f32:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8018f36:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8018f3a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8018f3e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8018f42:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8018f46:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8018f4a:	f1be 0f00 	cmp.w	lr, #0
 8018f4e:	d030      	beq.n	8018fb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8018f50:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018f52:	4450      	add	r0, sl
 8018f54:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018f58:	4431      	add	r1, r6
 8018f5a:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018f5e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018f62:	4549      	cmp	r1, r9
 8018f64:	db08      	blt.n	8018f78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8018f66:	ee77 7a85 	vadd.f32	s15, s15, s10
 8018f6a:	3001      	adds	r0, #1
 8018f6c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018f70:	eba1 0109 	sub.w	r1, r1, r9
 8018f74:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018f78:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018f7c:	f04f 0801 	mov.w	r8, #1
 8018f80:	e7e3      	b.n	8018f4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8018f82:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018f84:	4450      	add	r0, sl
 8018f86:	ee37 7a24 	vadd.f32	s14, s14, s9
 8018f8a:	4431      	add	r1, r6
 8018f8c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018f90:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018f94:	4541      	cmp	r1, r8
 8018f96:	db08      	blt.n	8018faa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8018f98:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018f9c:	3001      	adds	r0, #1
 8018f9e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018fa2:	eba1 0108 	sub.w	r1, r1, r8
 8018fa6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018faa:	3f01      	subs	r7, #1
 8018fac:	f04f 0901 	mov.w	r9, #1
 8018fb0:	e79e      	b.n	8018ef0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8018fb2:	449c      	add	ip, r3
 8018fb4:	1aff      	subs	r7, r7, r3
 8018fb6:	f1b8 0f00 	cmp.w	r8, #0
 8018fba:	d009      	beq.n	8018fd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8018fbc:	9019      	str	r0, [sp, #100]	; 0x64
 8018fbe:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018fc2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8018fc6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8018fca:	911d      	str	r1, [sp, #116]	; 0x74
 8018fcc:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018fd0:	1ad2      	subs	r2, r2, r3
 8018fd2:	e6b5      	b.n	8018d40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018fd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	b923      	cbnz	r3, 8018fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018fda:	4b04      	ldr	r3, [pc, #16]	; (8018fec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8018fdc:	6818      	ldr	r0, [r3, #0]
 8018fde:	6803      	ldr	r3, [r0, #0]
 8018fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fe2:	4798      	blx	r3
 8018fe4:	b05b      	add	sp, #364	; 0x16c
 8018fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fea:	bf00      	nop
 8018fec:	200057e0 	.word	0x200057e0

08018ff0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8018ff0:	b570      	push	{r4, r5, r6, lr}
 8018ff2:	4604      	mov	r4, r0
 8018ff4:	2500      	movs	r5, #0
 8018ff6:	9804      	ldr	r0, [sp, #16]
 8018ff8:	7223      	strb	r3, [r4, #8]
 8018ffa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8018ffe:	8025      	strh	r5, [r4, #0]
 8019000:	6061      	str	r1, [r4, #4]
 8019002:	7263      	strb	r3, [r4, #9]
 8019004:	60e0      	str	r0, [r4, #12]
 8019006:	8222      	strh	r2, [r4, #16]
 8019008:	8265      	strh	r5, [r4, #18]
 801900a:	82a5      	strh	r5, [r4, #20]
 801900c:	82e5      	strh	r5, [r4, #22]
 801900e:	8325      	strh	r5, [r4, #24]
 8019010:	8365      	strh	r5, [r4, #26]
 8019012:	83a5      	strh	r5, [r4, #28]
 8019014:	77a5      	strb	r5, [r4, #30]
 8019016:	6803      	ldr	r3, [r0, #0]
 8019018:	695b      	ldr	r3, [r3, #20]
 801901a:	4798      	blx	r3
 801901c:	4606      	mov	r6, r0
 801901e:	b1f8      	cbz	r0, 8019060 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8019020:	68e0      	ldr	r0, [r4, #12]
 8019022:	4631      	mov	r1, r6
 8019024:	6803      	ldr	r3, [r0, #0]
 8019026:	68db      	ldr	r3, [r3, #12]
 8019028:	4798      	blx	r3
 801902a:	7b43      	ldrb	r3, [r0, #13]
 801902c:	7a82      	ldrb	r2, [r0, #10]
 801902e:	4605      	mov	r5, r0
 8019030:	005b      	lsls	r3, r3, #1
 8019032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019036:	4313      	orrs	r3, r2
 8019038:	83a3      	strh	r3, [r4, #28]
 801903a:	7a63      	ldrb	r3, [r4, #9]
 801903c:	2b04      	cmp	r3, #4
 801903e:	d10f      	bne.n	8019060 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8019040:	68e0      	ldr	r0, [r4, #12]
 8019042:	462a      	mov	r2, r5
 8019044:	4631      	mov	r1, r6
 8019046:	6803      	ldr	r3, [r0, #0]
 8019048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801904a:	4798      	blx	r3
 801904c:	7b6b      	ldrb	r3, [r5, #13]
 801904e:	005b      	lsls	r3, r3, #1
 8019050:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019054:	7aab      	ldrb	r3, [r5, #10]
 8019056:	4313      	orrs	r3, r2
 8019058:	4418      	add	r0, r3
 801905a:	8ba3      	ldrh	r3, [r4, #28]
 801905c:	4418      	add	r0, r3
 801905e:	83a0      	strh	r0, [r4, #28]
 8019060:	4620      	mov	r0, r4
 8019062:	bd70      	pop	{r4, r5, r6, pc}

08019064 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8019064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019068:	2400      	movs	r4, #0
 801906a:	b085      	sub	sp, #20
 801906c:	4681      	mov	r9, r0
 801906e:	4688      	mov	r8, r1
 8019070:	4692      	mov	sl, r2
 8019072:	469b      	mov	fp, r3
 8019074:	4627      	mov	r7, r4
 8019076:	4625      	mov	r5, r4
 8019078:	4626      	mov	r6, r4
 801907a:	4554      	cmp	r4, sl
 801907c:	da2a      	bge.n	80190d4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801907e:	2300      	movs	r3, #0
 8019080:	9303      	str	r3, [sp, #12]
 8019082:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019086:	429d      	cmp	r5, r3
 8019088:	d004      	beq.n	8019094 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801908a:	f242 030b 	movw	r3, #8203	; 0x200b
 801908e:	429d      	cmp	r5, r3
 8019090:	bf18      	it	ne
 8019092:	462f      	movne	r7, r5
 8019094:	ab03      	add	r3, sp, #12
 8019096:	4642      	mov	r2, r8
 8019098:	4659      	mov	r1, fp
 801909a:	4648      	mov	r0, r9
 801909c:	f002 ffa6 	bl	801bfec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80190a0:	4605      	mov	r5, r0
 80190a2:	b1b8      	cbz	r0, 80190d4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80190a4:	280a      	cmp	r0, #10
 80190a6:	d015      	beq.n	80190d4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80190a8:	9a03      	ldr	r2, [sp, #12]
 80190aa:	b18a      	cbz	r2, 80190d0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80190ac:	7b50      	ldrb	r0, [r2, #13]
 80190ae:	4639      	mov	r1, r7
 80190b0:	7a93      	ldrb	r3, [r2, #10]
 80190b2:	0040      	lsls	r0, r0, #1
 80190b4:	8895      	ldrh	r5, [r2, #4]
 80190b6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80190ba:	4303      	orrs	r3, r0
 80190bc:	4640      	mov	r0, r8
 80190be:	9301      	str	r3, [sp, #4]
 80190c0:	f8d8 3000 	ldr.w	r3, [r8]
 80190c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80190c6:	4798      	blx	r3
 80190c8:	9b01      	ldr	r3, [sp, #4]
 80190ca:	4418      	add	r0, r3
 80190cc:	4406      	add	r6, r0
 80190ce:	b2b6      	uxth	r6, r6
 80190d0:	3401      	adds	r4, #1
 80190d2:	e7d2      	b.n	801907a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80190d4:	4630      	mov	r0, r6
 80190d6:	b005      	add	sp, #20
 80190d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080190dc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80190dc:	2a02      	cmp	r2, #2
 80190de:	b530      	push	{r4, r5, lr}
 80190e0:	d011      	beq.n	8019106 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80190e2:	2a03      	cmp	r2, #3
 80190e4:	d01c      	beq.n	8019120 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80190e6:	2a01      	cmp	r2, #1
 80190e8:	d10c      	bne.n	8019104 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80190ea:	888b      	ldrh	r3, [r1, #4]
 80190ec:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80190f0:	8801      	ldrh	r1, [r0, #0]
 80190f2:	1a9b      	subs	r3, r3, r2
 80190f4:	8844      	ldrh	r4, [r0, #2]
 80190f6:	1a5b      	subs	r3, r3, r1
 80190f8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80190fc:	8004      	strh	r4, [r0, #0]
 80190fe:	8043      	strh	r3, [r0, #2]
 8019100:	8081      	strh	r1, [r0, #4]
 8019102:	80c2      	strh	r2, [r0, #6]
 8019104:	bd30      	pop	{r4, r5, pc}
 8019106:	88cb      	ldrh	r3, [r1, #6]
 8019108:	88c2      	ldrh	r2, [r0, #6]
 801910a:	1a9b      	subs	r3, r3, r2
 801910c:	8842      	ldrh	r2, [r0, #2]
 801910e:	1a9b      	subs	r3, r3, r2
 8019110:	888a      	ldrh	r2, [r1, #4]
 8019112:	8881      	ldrh	r1, [r0, #4]
 8019114:	8043      	strh	r3, [r0, #2]
 8019116:	1a52      	subs	r2, r2, r1
 8019118:	8801      	ldrh	r1, [r0, #0]
 801911a:	1a52      	subs	r2, r2, r1
 801911c:	8002      	strh	r2, [r0, #0]
 801911e:	e7f1      	b.n	8019104 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019120:	88cb      	ldrh	r3, [r1, #6]
 8019122:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019126:	8841      	ldrh	r1, [r0, #2]
 8019128:	1a9b      	subs	r3, r3, r2
 801912a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801912e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019132:	1a5b      	subs	r3, r3, r1
 8019134:	8045      	strh	r5, [r0, #2]
 8019136:	8082      	strh	r2, [r0, #4]
 8019138:	8003      	strh	r3, [r0, #0]
 801913a:	80c4      	strh	r4, [r0, #6]
 801913c:	e7e2      	b.n	8019104 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801913e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801913e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019142:	b09f      	sub	sp, #124	; 0x7c
 8019144:	9116      	str	r1, [sp, #88]	; 0x58
 8019146:	9317      	str	r3, [sp, #92]	; 0x5c
 8019148:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801914a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801914c:	8809      	ldrh	r1, [r1, #0]
 801914e:	889b      	ldrh	r3, [r3, #4]
 8019150:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8019154:	440b      	add	r3, r1
 8019156:	9212      	str	r2, [sp, #72]	; 0x48
 8019158:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801915c:	b21b      	sxth	r3, r3
 801915e:	9011      	str	r0, [sp, #68]	; 0x44
 8019160:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8019164:	9310      	str	r3, [sp, #64]	; 0x40
 8019166:	f8d8 3000 	ldr.w	r3, [r8]
 801916a:	7a59      	ldrb	r1, [r3, #9]
 801916c:	7a1b      	ldrb	r3, [r3, #8]
 801916e:	9114      	str	r1, [sp, #80]	; 0x50
 8019170:	9315      	str	r3, [sp, #84]	; 0x54
 8019172:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019174:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019178:	2a00      	cmp	r2, #0
 801917a:	d067      	beq.n	801924c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801917c:	f898 3010 	ldrb.w	r3, [r8, #16]
 8019180:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019182:	2b04      	cmp	r3, #4
 8019184:	bf14      	ite	ne
 8019186:	2301      	movne	r3, #1
 8019188:	2302      	moveq	r3, #2
 801918a:	4413      	add	r3, r2
 801918c:	f04f 0900 	mov.w	r9, #0
 8019190:	930f      	str	r3, [sp, #60]	; 0x3c
 8019192:	464c      	mov	r4, r9
 8019194:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8019198:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801919c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80191a0:	4293      	cmp	r3, r2
 80191a2:	f280 808c 	bge.w	80192be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80191a6:	2300      	movs	r3, #0
 80191a8:	931c      	str	r3, [sp, #112]	; 0x70
 80191aa:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80191ae:	429c      	cmp	r4, r3
 80191b0:	d006      	beq.n	80191c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 80191b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80191b4:	f242 020b 	movw	r2, #8203	; 0x200b
 80191b8:	4294      	cmp	r4, r2
 80191ba:	bf18      	it	ne
 80191bc:	4623      	movne	r3, r4
 80191be:	930d      	str	r3, [sp, #52]	; 0x34
 80191c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80191c2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80191c4:	f8d8 2000 	ldr.w	r2, [r8]
 80191c8:	428b      	cmp	r3, r1
 80191ca:	db41      	blt.n	8019250 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80191cc:	6813      	ldr	r3, [r2, #0]
 80191ce:	4610      	mov	r0, r2
 80191d0:	695b      	ldr	r3, [r3, #20]
 80191d2:	4798      	blx	r3
 80191d4:	4604      	mov	r4, r0
 80191d6:	f8d8 0000 	ldr.w	r0, [r8]
 80191da:	aa1d      	add	r2, sp, #116	; 0x74
 80191dc:	4621      	mov	r1, r4
 80191de:	6803      	ldr	r3, [r0, #0]
 80191e0:	689e      	ldr	r6, [r3, #8]
 80191e2:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80191e6:	47b0      	blx	r6
 80191e8:	901c      	str	r0, [sp, #112]	; 0x70
 80191ea:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80191ee:	429c      	cmp	r4, r3
 80191f0:	f000 80ea 	beq.w	80193c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80191f4:	f242 030b 	movw	r3, #8203	; 0x200b
 80191f8:	429c      	cmp	r4, r3
 80191fa:	f000 80e5 	beq.w	80193c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80191fe:	2c00      	cmp	r4, #0
 8019200:	f000 80f7 	beq.w	80193f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8019204:	2c0a      	cmp	r4, #10
 8019206:	d060      	beq.n	80192ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8019208:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801920a:	b36a      	cbz	r2, 8019268 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801920c:	8894      	ldrh	r4, [r2, #4]
 801920e:	f1bb 0f00 	cmp.w	fp, #0
 8019212:	d03b      	beq.n	801928c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8019214:	f892 900d 	ldrb.w	r9, [r2, #13]
 8019218:	f1bb 0f01 	cmp.w	fp, #1
 801921c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019220:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8019224:	f892 900a 	ldrb.w	r9, [r2, #10]
 8019228:	ea49 0903 	orr.w	r9, r9, r3
 801922c:	d134      	bne.n	8019298 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801922e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019230:	eba5 0509 	sub.w	r5, r5, r9
 8019234:	2b00      	cmp	r3, #0
 8019236:	d14f      	bne.n	80192d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8019238:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801923a:	eb09 0305 	add.w	r3, r9, r5
 801923e:	4413      	add	r3, r2
 8019240:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019242:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019246:	4293      	cmp	r3, r2
 8019248:	da51      	bge.n	80192ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801924a:	e038      	b.n	80192be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801924c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801924e:	e79d      	b.n	801918c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8019250:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019254:	4659      	mov	r1, fp
 8019256:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019258:	9301      	str	r3, [sp, #4]
 801925a:	ab1d      	add	r3, sp, #116	; 0x74
 801925c:	9300      	str	r3, [sp, #0]
 801925e:	ab1c      	add	r3, sp, #112	; 0x70
 8019260:	f002 ff1c 	bl	801c09c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8019264:	4604      	mov	r4, r0
 8019266:	e7c0      	b.n	80191ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8019268:	f8d8 0000 	ldr.w	r0, [r8]
 801926c:	6803      	ldr	r3, [r0, #0]
 801926e:	691b      	ldr	r3, [r3, #16]
 8019270:	4798      	blx	r3
 8019272:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019276:	4298      	cmp	r0, r3
 8019278:	f000 80a6 	beq.w	80193c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801927c:	f242 030b 	movw	r3, #8203	; 0x200b
 8019280:	4298      	cmp	r0, r3
 8019282:	f000 80a1 	beq.w	80193c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019286:	f1bb 0f00 	cmp.w	fp, #0
 801928a:	d100      	bne.n	801928e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801928c:	444d      	add	r5, r9
 801928e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019290:	2a00      	cmp	r2, #0
 8019292:	d1bf      	bne.n	8019214 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 8019294:	4691      	mov	r9, r2
 8019296:	e097      	b.n	80193c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019298:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801929a:	2b00      	cmp	r3, #0
 801929c:	f000 80ab 	beq.w	80193f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 80192a0:	f1bb 0f00 	cmp.w	fp, #0
 80192a4:	d118      	bne.n	80192d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80192a6:	f8d8 0000 	ldr.w	r0, [r8]
 80192aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80192ac:	6803      	ldr	r3, [r0, #0]
 80192ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192b0:	4798      	blx	r3
 80192b2:	4405      	add	r5, r0
 80192b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80192b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80192b8:	1aeb      	subs	r3, r5, r3
 80192ba:	4293      	cmp	r3, r2
 80192bc:	dd17      	ble.n	80192ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80192be:	2c00      	cmp	r4, #0
 80192c0:	f000 8097 	beq.w	80193f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80192c4:	2c0a      	cmp	r4, #10
 80192c6:	f040 8085 	bne.w	80193d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 80192ca:	240a      	movs	r4, #10
 80192cc:	fab4 f084 	clz	r0, r4
 80192d0:	0940      	lsrs	r0, r0, #5
 80192d2:	b01f      	add	sp, #124	; 0x7c
 80192d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192d8:	f8d8 0000 	ldr.w	r0, [r8]
 80192dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80192de:	6803      	ldr	r3, [r0, #0]
 80192e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192e2:	4798      	blx	r3
 80192e4:	f1bb 0f01 	cmp.w	fp, #1
 80192e8:	eba5 0500 	sub.w	r5, r5, r0
 80192ec:	d0a4      	beq.n	8019238 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 80192ee:	981c      	ldr	r0, [sp, #112]	; 0x70
 80192f0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80192f2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80192f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80192fa:	7b43      	ldrb	r3, [r0, #13]
 80192fc:	4429      	add	r1, r5
 80192fe:	015b      	lsls	r3, r3, #5
 8019300:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019304:	7983      	ldrb	r3, [r0, #6]
 8019306:	4313      	orrs	r3, r2
 8019308:	440b      	add	r3, r1
 801930a:	42b3      	cmp	r3, r6
 801930c:	db5c      	blt.n	80193c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801930e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019310:	4299      	cmp	r1, r3
 8019312:	da59      	bge.n	80193c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019314:	f8d8 0000 	ldr.w	r0, [r8]
 8019318:	42ae      	cmp	r6, r5
 801931a:	6803      	ldr	r3, [r0, #0]
 801931c:	bfcc      	ite	gt
 801931e:	1b76      	subgt	r6, r6, r5
 8019320:	2600      	movle	r6, #0
 8019322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019324:	bfc8      	it	gt
 8019326:	b2b6      	uxthgt	r6, r6
 8019328:	4798      	blx	r3
 801932a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801932c:	7b5a      	ldrb	r2, [r3, #13]
 801932e:	00d1      	lsls	r1, r2, #3
 8019330:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8019334:	7a19      	ldrb	r1, [r3, #8]
 8019336:	4339      	orrs	r1, r7
 8019338:	0657      	lsls	r7, r2, #25
 801933a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801933c:	bf48      	it	mi
 801933e:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8019342:	4407      	add	r7, r0
 8019344:	bf48      	it	mi
 8019346:	b209      	sxthmi	r1, r1
 8019348:	1a7f      	subs	r7, r7, r1
 801934a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801934c:	b2bf      	uxth	r7, r7
 801934e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8019352:	fa0f fa87 	sxth.w	sl, r7
 8019356:	4551      	cmp	r1, sl
 8019358:	dd3a      	ble.n	80193d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801935a:	0112      	lsls	r2, r2, #4
 801935c:	79d8      	ldrb	r0, [r3, #7]
 801935e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019362:	4302      	orrs	r2, r0
 8019364:	4492      	add	sl, r2
 8019366:	4551      	cmp	r1, sl
 8019368:	dc2e      	bgt.n	80193c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801936a:	1bcf      	subs	r7, r1, r7
 801936c:	468a      	mov	sl, r1
 801936e:	b2bf      	uxth	r7, r7
 8019370:	9319      	str	r3, [sp, #100]	; 0x64
 8019372:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019374:	f8d8 0000 	ldr.w	r0, [r8]
 8019378:	681a      	ldr	r2, [r3, #0]
 801937a:	6801      	ldr	r1, [r0, #0]
 801937c:	6c93      	ldr	r3, [r2, #72]	; 0x48
 801937e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019380:	9313      	str	r3, [sp, #76]	; 0x4c
 8019382:	9218      	str	r2, [sp, #96]	; 0x60
 8019384:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8019386:	4788      	blx	r1
 8019388:	f898 1006 	ldrb.w	r1, [r8, #6]
 801938c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801938e:	910b      	str	r1, [sp, #44]	; 0x2c
 8019390:	f898 100e 	ldrb.w	r1, [r8, #14]
 8019394:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019396:	910a      	str	r1, [sp, #40]	; 0x28
 8019398:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801939c:	9109      	str	r1, [sp, #36]	; 0x24
 801939e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80193a2:	9305      	str	r3, [sp, #20]
 80193a4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80193a6:	9206      	str	r2, [sp, #24]
 80193a8:	e9cd a601 	strd	sl, r6, [sp, #4]
 80193ac:	442e      	add	r6, r5
 80193ae:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80193b2:	b236      	sxth	r6, r6
 80193b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80193b6:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80193ba:	9600      	str	r6, [sp, #0]
 80193bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80193be:	681a      	ldr	r2, [r3, #0]
 80193c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80193c2:	685b      	ldr	r3, [r3, #4]
 80193c4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80193c6:	47b0      	blx	r6
 80193c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80193ca:	3301      	adds	r3, #1
 80193cc:	930e      	str	r3, [sp, #56]	; 0x38
 80193ce:	e6e5      	b.n	801919c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 80193d0:	2700      	movs	r7, #0
 80193d2:	e7cd      	b.n	8019370 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 80193d4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80193d6:	3501      	adds	r5, #1
 80193d8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80193da:	429d      	cmp	r5, r3
 80193dc:	f6bf af76 	bge.w	80192cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80193e0:	4659      	mov	r1, fp
 80193e2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80193e4:	f7fa fdf2 	bl	8013fcc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80193e8:	4604      	mov	r4, r0
 80193ea:	b110      	cbz	r0, 80193f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80193ec:	280a      	cmp	r0, #10
 80193ee:	d1f2      	bne.n	80193d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 80193f0:	e76b      	b.n	80192ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80193f2:	2400      	movs	r4, #0
 80193f4:	e76a      	b.n	80192cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80193f6:	f1bb 0f00 	cmp.w	fp, #0
 80193fa:	f43f af5b 	beq.w	80192b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80193fe:	e776      	b.n	80192ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08019400 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8019400:	b530      	push	{r4, r5, lr}
 8019402:	8a44      	ldrh	r4, [r0, #18]
 8019404:	8ac5      	ldrh	r5, [r0, #22]
 8019406:	82c3      	strh	r3, [r0, #22]
 8019408:	442c      	add	r4, r5
 801940a:	1ae4      	subs	r4, r4, r3
 801940c:	8b03      	ldrh	r3, [r0, #24]
 801940e:	8244      	strh	r4, [r0, #18]
 8019410:	8a84      	ldrh	r4, [r0, #20]
 8019412:	4422      	add	r2, r4
 8019414:	440c      	add	r4, r1
 8019416:	1a59      	subs	r1, r3, r1
 8019418:	8342      	strh	r2, [r0, #26]
 801941a:	8284      	strh	r4, [r0, #20]
 801941c:	8301      	strh	r1, [r0, #24]
 801941e:	bd30      	pop	{r4, r5, pc}

08019420 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8019420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019424:	7a43      	ldrb	r3, [r0, #9]
 8019426:	b087      	sub	sp, #28
 8019428:	4604      	mov	r4, r0
 801942a:	460f      	mov	r7, r1
 801942c:	1eda      	subs	r2, r3, #3
 801942e:	b2d2      	uxtb	r2, r2
 8019430:	2900      	cmp	r1, #0
 8019432:	d036      	beq.n	80194a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8019434:	2a01      	cmp	r2, #1
 8019436:	d932      	bls.n	801949e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8019438:	1e58      	subs	r0, r3, #1
 801943a:	f1d0 0b00 	rsbs	fp, r0, #0
 801943e:	eb4b 0b00 	adc.w	fp, fp, r0
 8019442:	1e99      	subs	r1, r3, #2
 8019444:	424b      	negs	r3, r1
 8019446:	414b      	adcs	r3, r1
 8019448:	9303      	str	r3, [sp, #12]
 801944a:	2300      	movs	r3, #0
 801944c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8019450:	2500      	movs	r5, #0
 8019452:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8019456:	46a9      	mov	r9, r5
 8019458:	8265      	strh	r5, [r4, #18]
 801945a:	82a5      	strh	r5, [r4, #20]
 801945c:	2300      	movs	r3, #0
 801945e:	9305      	str	r3, [sp, #20]
 8019460:	8823      	ldrh	r3, [r4, #0]
 8019462:	2b20      	cmp	r3, #32
 8019464:	d02b      	beq.n	80194be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8019466:	eba3 020a 	sub.w	r2, r3, sl
 801946a:	4256      	negs	r6, r2
 801946c:	4156      	adcs	r6, r2
 801946e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8019472:	4293      	cmp	r3, r2
 8019474:	d004      	beq.n	8019480 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8019476:	4553      	cmp	r3, sl
 8019478:	bf16      	itet	ne
 801947a:	4699      	movne	r9, r3
 801947c:	2601      	moveq	r6, #1
 801947e:	2600      	movne	r6, #0
 8019480:	ab05      	add	r3, sp, #20
 8019482:	68e2      	ldr	r2, [r4, #12]
 8019484:	7a21      	ldrb	r1, [r4, #8]
 8019486:	6860      	ldr	r0, [r4, #4]
 8019488:	f002 fdb0 	bl	801bfec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801948c:	8020      	strh	r0, [r4, #0]
 801948e:	b9c8      	cbnz	r0, 80194c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8019490:	8b22      	ldrh	r2, [r4, #24]
 8019492:	2300      	movs	r3, #0
 8019494:	4611      	mov	r1, r2
 8019496:	4620      	mov	r0, r4
 8019498:	f7ff ffb2 	bl	8019400 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801949c:	e066      	b.n	801956c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801949e:	468b      	mov	fp, r1
 80194a0:	e7cf      	b.n	8019442 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 80194a2:	3b01      	subs	r3, #1
 80194a4:	2a01      	cmp	r2, #1
 80194a6:	9103      	str	r1, [sp, #12]
 80194a8:	468b      	mov	fp, r1
 80194aa:	bf8c      	ite	hi
 80194ac:	2200      	movhi	r2, #0
 80194ae:	2201      	movls	r2, #1
 80194b0:	2b01      	cmp	r3, #1
 80194b2:	9202      	str	r2, [sp, #8]
 80194b4:	bf8c      	ite	hi
 80194b6:	2300      	movhi	r3, #0
 80194b8:	2301      	movls	r3, #1
 80194ba:	9301      	str	r3, [sp, #4]
 80194bc:	e7c8      	b.n	8019450 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 80194be:	4699      	mov	r9, r3
 80194c0:	2601      	movs	r6, #1
 80194c2:	e7dd      	b.n	8019480 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80194c4:	8ae3      	ldrh	r3, [r4, #22]
 80194c6:	280a      	cmp	r0, #10
 80194c8:	f103 0301 	add.w	r3, r3, #1
 80194cc:	82e3      	strh	r3, [r4, #22]
 80194ce:	d0df      	beq.n	8019490 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 80194d0:	9a05      	ldr	r2, [sp, #20]
 80194d2:	bb42      	cbnz	r2, 8019526 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 80194d4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80194d8:	4298      	cmp	r0, r3
 80194da:	d001      	beq.n	80194e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80194dc:	4550      	cmp	r0, sl
 80194de:	d1bd      	bne.n	801945c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80194e0:	8823      	ldrh	r3, [r4, #0]
 80194e2:	8b21      	ldrh	r1, [r4, #24]
 80194e4:	2b20      	cmp	r3, #32
 80194e6:	d001      	beq.n	80194ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 80194e8:	4553      	cmp	r3, sl
 80194ea:	d131      	bne.n	8019550 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 80194ec:	2e00      	cmp	r6, #0
 80194ee:	bf0a      	itet	eq
 80194f0:	460d      	moveq	r5, r1
 80194f2:	4630      	movne	r0, r6
 80194f4:	2001      	moveq	r0, #1
 80194f6:	440a      	add	r2, r1
 80194f8:	8aa3      	ldrh	r3, [r4, #20]
 80194fa:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80194fe:	b292      	uxth	r2, r2
 8019500:	8322      	strh	r2, [r4, #24]
 8019502:	4413      	add	r3, r2
 8019504:	2f00      	cmp	r7, #0
 8019506:	d03a      	beq.n	801957e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8019508:	f1bb 0f00 	cmp.w	fp, #0
 801950c:	d102      	bne.n	8019514 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801950e:	9903      	ldr	r1, [sp, #12]
 8019510:	b301      	cbz	r1, 8019554 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8019512:	b1f8      	cbz	r0, 8019554 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8019514:	8ba1      	ldrh	r1, [r4, #28]
 8019516:	4419      	add	r1, r3
 8019518:	458c      	cmp	ip, r1
 801951a:	da2a      	bge.n	8019572 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801951c:	8a61      	ldrh	r1, [r4, #18]
 801951e:	b341      	cbz	r1, 8019572 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8019520:	4563      	cmp	r3, ip
 8019522:	dd9b      	ble.n	801945c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019524:	e01c      	b.n	8019560 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8019526:	8893      	ldrh	r3, [r2, #4]
 8019528:	4649      	mov	r1, r9
 801952a:	8023      	strh	r3, [r4, #0]
 801952c:	f892 800d 	ldrb.w	r8, [r2, #13]
 8019530:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8019534:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8019538:	f892 800a 	ldrb.w	r8, [r2, #10]
 801953c:	ea48 0800 	orr.w	r8, r8, r0
 8019540:	68e0      	ldr	r0, [r4, #12]
 8019542:	6803      	ldr	r3, [r0, #0]
 8019544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019546:	4798      	blx	r3
 8019548:	eb08 0200 	add.w	r2, r8, r0
 801954c:	b292      	uxth	r2, r2
 801954e:	e7c7      	b.n	80194e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8019550:	2000      	movs	r0, #0
 8019552:	e7d0      	b.n	80194f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8019554:	4563      	cmp	r3, ip
 8019556:	dd81      	ble.n	801945c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019558:	8a63      	ldrh	r3, [r4, #18]
 801955a:	2b00      	cmp	r3, #0
 801955c:	f43f af7e 	beq.w	801945c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019560:	2301      	movs	r3, #1
 8019562:	8ba2      	ldrh	r2, [r4, #28]
 8019564:	77a3      	strb	r3, [r4, #30]
 8019566:	8b63      	ldrh	r3, [r4, #26]
 8019568:	4413      	add	r3, r2
 801956a:	8363      	strh	r3, [r4, #26]
 801956c:	b007      	add	sp, #28
 801956e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019572:	2300      	movs	r3, #0
 8019574:	4611      	mov	r1, r2
 8019576:	4620      	mov	r0, r4
 8019578:	f7ff ff42 	bl	8019400 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801957c:	e76e      	b.n	801945c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801957e:	4563      	cmp	r3, ip
 8019580:	dd14      	ble.n	80195ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8019582:	9b02      	ldr	r3, [sp, #8]
 8019584:	b113      	cbz	r3, 801958c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8019586:	2301      	movs	r3, #1
 8019588:	460a      	mov	r2, r1
 801958a:	e783      	b.n	8019494 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801958c:	9b01      	ldr	r3, [sp, #4]
 801958e:	2b00      	cmp	r3, #0
 8019590:	f43f af64 	beq.w	801945c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019594:	2800      	cmp	r0, #0
 8019596:	f47f af61 	bne.w	801945c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801959a:	b116      	cbz	r6, 80195a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801959c:	2301      	movs	r3, #1
 801959e:	462a      	mov	r2, r5
 80195a0:	e779      	b.n	8019496 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 80195a2:	8a63      	ldrh	r3, [r4, #18]
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	f43f af59 	beq.w	801945c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80195aa:	e7df      	b.n	801956c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80195ac:	2800      	cmp	r0, #0
 80195ae:	f47f af55 	bne.w	801945c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80195b2:	2e00      	cmp	r6, #0
 80195b4:	f43f af52 	beq.w	801945c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80195b8:	2301      	movs	r3, #1
 80195ba:	462a      	mov	r2, r5
 80195bc:	e7db      	b.n	8019576 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

080195be <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80195be:	b530      	push	{r4, r5, lr}
 80195c0:	4605      	mov	r5, r0
 80195c2:	b08b      	sub	sp, #44	; 0x2c
 80195c4:	b191      	cbz	r1, 80195ec <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 80195c6:	2401      	movs	r4, #1
 80195c8:	e9cd 3100 	strd	r3, r1, [sp]
 80195cc:	4613      	mov	r3, r2
 80195ce:	4601      	mov	r1, r0
 80195d0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80195d4:	a802      	add	r0, sp, #8
 80195d6:	f7ff fd0b 	bl	8018ff0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80195da:	2100      	movs	r1, #0
 80195dc:	a802      	add	r0, sp, #8
 80195de:	f7ff ff1f 	bl	8019420 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80195e2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80195e6:	b163      	cbz	r3, 8019602 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80195e8:	3401      	adds	r4, #1
 80195ea:	e7f6      	b.n	80195da <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 80195ec:	2401      	movs	r4, #1
 80195ee:	f002 fdf5 	bl	801c1dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 80195f2:	280a      	cmp	r0, #10
 80195f4:	4628      	mov	r0, r5
 80195f6:	bf08      	it	eq
 80195f8:	3401      	addeq	r4, #1
 80195fa:	f002 fdef 	bl	801c1dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 80195fe:	2800      	cmp	r0, #0
 8019600:	d1f7      	bne.n	80195f2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8019602:	b2a0      	uxth	r0, r4
 8019604:	b00b      	add	sp, #44	; 0x2c
 8019606:	bd30      	pop	{r4, r5, pc}

08019608 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8019608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801960c:	b0db      	sub	sp, #364	; 0x16c
 801960e:	4689      	mov	r9, r1
 8019610:	461c      	mov	r4, r3
 8019612:	f8dd a190 	ldr.w	sl, [sp, #400]	; 0x190
 8019616:	900a      	str	r0, [sp, #40]	; 0x28
 8019618:	f1ba 0f00 	cmp.w	sl, #0
 801961c:	f000 80a5 	beq.w	801976a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019620:	681b      	ldr	r3, [r3, #0]
 8019622:	2b00      	cmp	r3, #0
 8019624:	f000 80a1 	beq.w	801976a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019628:	7ba3      	ldrb	r3, [r4, #14]
 801962a:	2b00      	cmp	r3, #0
 801962c:	f000 809d 	beq.w	801976a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019630:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8019634:	6810      	ldr	r0, [r2, #0]
 8019636:	6851      	ldr	r1, [r2, #4]
 8019638:	2500      	movs	r5, #0
 801963a:	4643      	mov	r3, r8
 801963c:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8019640:	950e      	str	r5, [sp, #56]	; 0x38
 8019642:	af18      	add	r7, sp, #96	; 0x60
 8019644:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8019648:	79a2      	ldrb	r2, [r4, #6]
 801964a:	c303      	stmia	r3!, {r0, r1}
 801964c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8019650:	a90e      	add	r1, sp, #56	; 0x38
 8019652:	4640      	mov	r0, r8
 8019654:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019658:	f7ff fd40 	bl	80190dc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801965c:	a90e      	add	r1, sp, #56	; 0x38
 801965e:	79a2      	ldrb	r2, [r4, #6]
 8019660:	4608      	mov	r0, r1
 8019662:	f7ff fd3b 	bl	80190dc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019666:	4638      	mov	r0, r7
 8019668:	f002 f981 	bl	801b96e <_ZN8touchgfx12TextProviderC1Ev>
 801966c:	6820      	ldr	r0, [r4, #0]
 801966e:	6803      	ldr	r3, [r0, #0]
 8019670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019672:	4798      	blx	r3
 8019674:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8019676:	4603      	mov	r3, r0
 8019678:	4651      	mov	r1, sl
 801967a:	4638      	mov	r0, r7
 801967c:	f002 f9bc 	bl	801b9f8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019680:	7923      	ldrb	r3, [r4, #4]
 8019682:	6820      	ldr	r0, [r4, #0]
 8019684:	9308      	str	r3, [sp, #32]
 8019686:	6803      	ldr	r3, [r0, #0]
 8019688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801968a:	4798      	blx	r3
 801968c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019690:	181e      	adds	r6, r3, r0
 8019692:	42ae      	cmp	r6, r5
 8019694:	dd06      	ble.n	80196a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8019696:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801969a:	4282      	cmp	r2, r0
 801969c:	bfa4      	itt	ge
 801969e:	189d      	addge	r5, r3, r2
 80196a0:	fb95 f5f6 	sdivge	r5, r5, r6
 80196a4:	a82e      	add	r0, sp, #184	; 0xb8
 80196a6:	f002 f962 	bl	801b96e <_ZN8touchgfx12TextProviderC1Ev>
 80196aa:	7c23      	ldrb	r3, [r4, #16]
 80196ac:	b14b      	cbz	r3, 80196c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xba>
 80196ae:	6820      	ldr	r0, [r4, #0]
 80196b0:	6803      	ldr	r3, [r0, #0]
 80196b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80196b4:	4798      	blx	r3
 80196b6:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80196b8:	4603      	mov	r3, r0
 80196ba:	4651      	mov	r1, sl
 80196bc:	a82e      	add	r0, sp, #184	; 0xb8
 80196be:	f002 f99b 	bl	801b9f8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80196c2:	7c21      	ldrb	r1, [r4, #16]
 80196c4:	a810      	add	r0, sp, #64	; 0x40
 80196c6:	7963      	ldrb	r3, [r4, #5]
 80196c8:	9101      	str	r1, [sp, #4]
 80196ca:	6821      	ldr	r1, [r4, #0]
 80196cc:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80196d0:	9100      	str	r1, [sp, #0]
 80196d2:	a92e      	add	r1, sp, #184	; 0xb8
 80196d4:	f7ff fc8c 	bl	8018ff0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80196d8:	7c23      	ldrb	r3, [r4, #16]
 80196da:	b9bb      	cbnz	r3, 801970c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x104>
 80196dc:	fa1f fa86 	uxth.w	sl, r6
 80196e0:	2d00      	cmp	r5, #0
 80196e2:	dd45      	ble.n	8019770 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 80196e4:	4638      	mov	r0, r7
 80196e6:	f002 fd79 	bl	801c1dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 80196ea:	2800      	cmp	r0, #0
 80196ec:	d03d      	beq.n	801976a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 80196ee:	280a      	cmp	r0, #10
 80196f0:	d1f6      	bne.n	80196e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 80196f2:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80196f6:	3d01      	subs	r5, #1
 80196f8:	4453      	add	r3, sl
 80196fa:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80196fe:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019702:	eba3 030a 	sub.w	r3, r3, sl
 8019706:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801970a:	e7e9      	b.n	80196e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 801970c:	0073      	lsls	r3, r6, #1
 801970e:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8019712:	fa1f fa86 	uxth.w	sl, r6
 8019716:	9309      	str	r3, [sp, #36]	; 0x24
 8019718:	2d00      	cmp	r5, #0
 801971a:	dd29      	ble.n	8019770 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 801971c:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8019720:	a810      	add	r0, sp, #64	; 0x40
 8019722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019724:	428b      	cmp	r3, r1
 8019726:	bfd4      	ite	le
 8019728:	2100      	movle	r1, #0
 801972a:	2101      	movgt	r1, #1
 801972c:	f7ff fe78 	bl	8019420 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019730:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8019734:	3b01      	subs	r3, #1
 8019736:	b29b      	uxth	r3, r3
 8019738:	455b      	cmp	r3, fp
 801973a:	930b      	str	r3, [sp, #44]	; 0x2c
 801973c:	d005      	beq.n	801974a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801973e:	7961      	ldrb	r1, [r4, #5]
 8019740:	4638      	mov	r0, r7
 8019742:	f7fa fc43 	bl	8013fcc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019748:	e7f4      	b.n	8019734 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12c>
 801974a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801974e:	3d01      	subs	r5, #1
 8019750:	4453      	add	r3, sl
 8019752:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8019756:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801975a:	eba3 030a 	sub.w	r3, r3, sl
 801975e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019762:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019766:	2b00      	cmp	r3, #0
 8019768:	d1d6      	bne.n	8019718 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x110>
 801976a:	b05b      	add	sp, #364	; 0x16c
 801976c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019770:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8019774:	ad44      	add	r5, sp, #272	; 0x110
 8019776:	f04f 0b00 	mov.w	fp, #0
 801977a:	7c23      	ldrb	r3, [r4, #16]
 801977c:	2b00      	cmp	r3, #0
 801977e:	d067      	beq.n	8019850 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8019780:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8019784:	a810      	add	r0, sp, #64	; 0x40
 8019786:	458a      	cmp	sl, r1
 8019788:	bfd4      	ite	le
 801978a:	2100      	movle	r1, #0
 801978c:	2101      	movgt	r1, #1
 801978e:	f7ff fe47 	bl	8019420 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019792:	9b08      	ldr	r3, [sp, #32]
 8019794:	2b00      	cmp	r3, #0
 8019796:	d056      	beq.n	8019846 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8019798:	7c23      	ldrb	r3, [r4, #16]
 801979a:	2258      	movs	r2, #88	; 0x58
 801979c:	4639      	mov	r1, r7
 801979e:	4628      	mov	r0, r5
 80197a0:	9309      	str	r3, [sp, #36]	; 0x24
 80197a2:	f00f f8f1 	bl	8028988 <memcpy>
 80197a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d059      	beq.n	8019860 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 80197ac:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 80197b0:	7922      	ldrb	r2, [r4, #4]
 80197b2:	2a01      	cmp	r2, #1
 80197b4:	d13d      	bne.n	8019832 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>
 80197b6:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 80197ba:	1ac0      	subs	r0, r0, r3
 80197bc:	2302      	movs	r3, #2
 80197be:	fb90 f0f3 	sdiv	r0, r0, r3
 80197c2:	b200      	sxth	r0, r0
 80197c4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80197c8:	4418      	add	r0, r3
 80197ca:	7c23      	ldrb	r3, [r4, #16]
 80197cc:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d03a      	beq.n	801984a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 80197d4:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 80197d8:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 80197dc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80197e0:	9500      	str	r5, [sp, #0]
 80197e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80197e4:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80197e8:	e9cd b703 	strd	fp, r7, [sp, #12]
 80197ec:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80197f0:	464a      	mov	r2, r9
 80197f2:	2100      	movs	r1, #0
 80197f4:	f7ff fca3 	bl	801913e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80197f8:	2800      	cmp	r0, #0
 80197fa:	d1b6      	bne.n	801976a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 80197fc:	b2b2      	uxth	r2, r6
 80197fe:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8019802:	4611      	mov	r1, r2
 8019804:	4413      	add	r3, r2
 8019806:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801980a:	b21b      	sxth	r3, r3
 801980c:	1a52      	subs	r2, r2, r1
 801980e:	7c21      	ldrb	r1, [r4, #16]
 8019810:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8019814:	b212      	sxth	r2, r2
 8019816:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801981a:	b109      	cbz	r1, 8019820 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 801981c:	42b2      	cmp	r2, r6
 801981e:	dba4      	blt.n	801976a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019820:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8019824:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8019828:	440a      	add	r2, r1
 801982a:	b212      	sxth	r2, r2
 801982c:	4293      	cmp	r3, r2
 801982e:	dda4      	ble.n	801977a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x172>
 8019830:	e79b      	b.n	801976a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x162>
 8019832:	2a02      	cmp	r2, #2
 8019834:	d105      	bne.n	8019842 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23a>
 8019836:	7be2      	ldrb	r2, [r4, #15]
 8019838:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801983c:	1a80      	subs	r0, r0, r2
 801983e:	1ac0      	subs	r0, r0, r3
 8019840:	e7bf      	b.n	80197c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ba>
 8019842:	2000      	movs	r0, #0
 8019844:	e7be      	b.n	80197c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 8019846:	7be0      	ldrb	r0, [r4, #15]
 8019848:	e7bc      	b.n	80197c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801984a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801984e:	e7c3      	b.n	80197d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d0>
 8019850:	9b08      	ldr	r3, [sp, #32]
 8019852:	2b00      	cmp	r3, #0
 8019854:	d0f7      	beq.n	8019846 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8019856:	2258      	movs	r2, #88	; 0x58
 8019858:	4639      	mov	r1, r7
 801985a:	4628      	mov	r0, r5
 801985c:	f00f f894 	bl	8028988 <memcpy>
 8019860:	2300      	movs	r3, #0
 8019862:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019866:	6821      	ldr	r1, [r4, #0]
 8019868:	4628      	mov	r0, r5
 801986a:	f7ff fbfb 	bl	8019064 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801986e:	b203      	sxth	r3, r0
 8019870:	e79e      	b.n	80197b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a8>

08019872 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8019872:	2b02      	cmp	r3, #2
 8019874:	b510      	push	{r4, lr}
 8019876:	f9b0 4000 	ldrsh.w	r4, [r0]
 801987a:	d00b      	beq.n	8019894 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801987c:	2b03      	cmp	r3, #3
 801987e:	d00e      	beq.n	801989e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8019880:	2b01      	cmp	r3, #1
 8019882:	d001      	beq.n	8019888 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8019884:	1860      	adds	r0, r4, r1
 8019886:	bd10      	pop	{r4, pc}
 8019888:	8880      	ldrh	r0, [r0, #4]
 801988a:	4420      	add	r0, r4
 801988c:	b200      	sxth	r0, r0
 801988e:	1a80      	subs	r0, r0, r2
 8019890:	3801      	subs	r0, #1
 8019892:	e7f8      	b.n	8019886 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8019894:	8880      	ldrh	r0, [r0, #4]
 8019896:	4420      	add	r0, r4
 8019898:	b200      	sxth	r0, r0
 801989a:	1a40      	subs	r0, r0, r1
 801989c:	e7f8      	b.n	8019890 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801989e:	18a0      	adds	r0, r4, r2
 80198a0:	e7f1      	b.n	8019886 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

080198a2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80198a2:	2b02      	cmp	r3, #2
 80198a4:	b510      	push	{r4, lr}
 80198a6:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80198aa:	d006      	beq.n	80198ba <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 80198ac:	2b03      	cmp	r3, #3
 80198ae:	d00a      	beq.n	80198c6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80198b0:	2b01      	cmp	r3, #1
 80198b2:	bf14      	ite	ne
 80198b4:	18a0      	addne	r0, r4, r2
 80198b6:	1860      	addeq	r0, r4, r1
 80198b8:	bd10      	pop	{r4, pc}
 80198ba:	88c0      	ldrh	r0, [r0, #6]
 80198bc:	4420      	add	r0, r4
 80198be:	b200      	sxth	r0, r0
 80198c0:	1a80      	subs	r0, r0, r2
 80198c2:	3801      	subs	r0, #1
 80198c4:	e7f8      	b.n	80198b8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80198c6:	88c0      	ldrh	r0, [r0, #6]
 80198c8:	4420      	add	r0, r4
 80198ca:	b200      	sxth	r0, r0
 80198cc:	1a40      	subs	r0, r0, r1
 80198ce:	e7f8      	b.n	80198c2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

080198d0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80198d0:	4b01      	ldr	r3, [pc, #4]	; (80198d8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80198d2:	2200      	movs	r2, #0
 80198d4:	601a      	str	r2, [r3, #0]
 80198d6:	4770      	bx	lr
 80198d8:	200057e8 	.word	0x200057e8

080198dc <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80198dc:	4603      	mov	r3, r0
 80198de:	b1c8      	cbz	r0, 8019914 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80198e0:	0c02      	lsrs	r2, r0, #16
 80198e2:	0412      	lsls	r2, r2, #16
 80198e4:	b9a2      	cbnz	r2, 8019910 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80198e6:	0403      	lsls	r3, r0, #16
 80198e8:	2010      	movs	r0, #16
 80198ea:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80198ee:	bf04      	itt	eq
 80198f0:	021b      	lsleq	r3, r3, #8
 80198f2:	3008      	addeq	r0, #8
 80198f4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80198f8:	bf04      	itt	eq
 80198fa:	011b      	lsleq	r3, r3, #4
 80198fc:	3004      	addeq	r0, #4
 80198fe:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019902:	bf04      	itt	eq
 8019904:	009b      	lsleq	r3, r3, #2
 8019906:	3002      	addeq	r0, #2
 8019908:	2b00      	cmp	r3, #0
 801990a:	db04      	blt.n	8019916 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801990c:	3001      	adds	r0, #1
 801990e:	4770      	bx	lr
 8019910:	2000      	movs	r0, #0
 8019912:	e7ea      	b.n	80198ea <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8019914:	2020      	movs	r0, #32
 8019916:	4770      	bx	lr

08019918 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8019918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801991c:	b087      	sub	sp, #28
 801991e:	4681      	mov	r9, r0
 8019920:	4698      	mov	r8, r3
 8019922:	4610      	mov	r0, r2
 8019924:	460d      	mov	r5, r1
 8019926:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801992a:	b981      	cbnz	r1, 801994e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801992c:	b14b      	cbz	r3, 8019942 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801992e:	460b      	mov	r3, r1
 8019930:	464a      	mov	r2, r9
 8019932:	4641      	mov	r1, r8
 8019934:	e9cd 4700 	strd	r4, r7, [sp]
 8019938:	f7ff ffee 	bl	8019918 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801993c:	b007      	add	sp, #28
 801993e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019942:	f04f 33ff 	mov.w	r3, #4294967295
 8019946:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801994a:	603b      	str	r3, [r7, #0]
 801994c:	e7f6      	b.n	801993c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801994e:	fa32 fa01 	lsrs.w	sl, r2, r1
 8019952:	d107      	bne.n	8019964 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8019954:	fb09 f602 	mul.w	r6, r9, r2
 8019958:	fbb6 f0f4 	udiv	r0, r6, r4
 801995c:	fb04 6610 	mls	r6, r4, r0, r6
 8019960:	603e      	str	r6, [r7, #0]
 8019962:	e7eb      	b.n	801993c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8019964:	2601      	movs	r6, #1
 8019966:	fa09 fb01 	lsl.w	fp, r9, r1
 801996a:	408e      	lsls	r6, r1
 801996c:	fbbb f3f4 	udiv	r3, fp, r4
 8019970:	3e01      	subs	r6, #1
 8019972:	9302      	str	r3, [sp, #8]
 8019974:	fb0a f303 	mul.w	r3, sl, r3
 8019978:	4016      	ands	r6, r2
 801997a:	9303      	str	r3, [sp, #12]
 801997c:	4630      	mov	r0, r6
 801997e:	f7ff ffad 	bl	80198dc <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019982:	464a      	mov	r2, r9
 8019984:	460b      	mov	r3, r1
 8019986:	4601      	mov	r1, r0
 8019988:	4630      	mov	r0, r6
 801998a:	e9cd 4700 	strd	r4, r7, [sp]
 801998e:	f7ff ffc3 	bl	8019918 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019992:	9b02      	ldr	r3, [sp, #8]
 8019994:	4606      	mov	r6, r0
 8019996:	eb05 0108 	add.w	r1, r5, r8
 801999a:	fb04 bb13 	mls	fp, r4, r3, fp
 801999e:	4658      	mov	r0, fp
 80199a0:	f7ff ff9c 	bl	80198dc <_ZN8touchgfx16TouchCalibration4clzuEm>
 80199a4:	ab05      	add	r3, sp, #20
 80199a6:	465a      	mov	r2, fp
 80199a8:	e9cd 4300 	strd	r4, r3, [sp]
 80199ac:	4603      	mov	r3, r0
 80199ae:	4650      	mov	r0, sl
 80199b0:	f7ff ffb2 	bl	8019918 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80199b4:	6839      	ldr	r1, [r7, #0]
 80199b6:	9a05      	ldr	r2, [sp, #20]
 80199b8:	9b03      	ldr	r3, [sp, #12]
 80199ba:	4411      	add	r1, r2
 80199bc:	fbb1 f2f4 	udiv	r2, r1, r4
 80199c0:	18d3      	adds	r3, r2, r3
 80199c2:	fb04 1412 	mls	r4, r4, r2, r1
 80199c6:	441e      	add	r6, r3
 80199c8:	603c      	str	r4, [r7, #0]
 80199ca:	4430      	add	r0, r6
 80199cc:	e7b6      	b.n	801993c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

080199ce <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80199ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80199d2:	b085      	sub	sp, #20
 80199d4:	f1b0 0900 	subs.w	r9, r0, #0
 80199d8:	461d      	mov	r5, r3
 80199da:	4617      	mov	r7, r2
 80199dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80199de:	bfbb      	ittet	lt
 80199e0:	f1c9 0900 	rsblt	r9, r9, #0
 80199e4:	f04f 36ff 	movlt.w	r6, #4294967295
 80199e8:	2601      	movge	r6, #1
 80199ea:	6823      	ldrlt	r3, [r4, #0]
 80199ec:	bfbc      	itt	lt
 80199ee:	425b      	neglt	r3, r3
 80199f0:	6023      	strlt	r3, [r4, #0]
 80199f2:	2a00      	cmp	r2, #0
 80199f4:	da04      	bge.n	8019a00 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80199f6:	6823      	ldr	r3, [r4, #0]
 80199f8:	4257      	negs	r7, r2
 80199fa:	4276      	negs	r6, r6
 80199fc:	425b      	negs	r3, r3
 80199fe:	6023      	str	r3, [r4, #0]
 8019a00:	2d00      	cmp	r5, #0
 8019a02:	4638      	mov	r0, r7
 8019a04:	bfba      	itte	lt
 8019a06:	426d      	neglt	r5, r5
 8019a08:	f04f 38ff 	movlt.w	r8, #4294967295
 8019a0c:	f04f 0801 	movge.w	r8, #1
 8019a10:	f7ff ff64 	bl	80198dc <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019a14:	ab03      	add	r3, sp, #12
 8019a16:	463a      	mov	r2, r7
 8019a18:	e9cd 5300 	strd	r5, r3, [sp]
 8019a1c:	4603      	mov	r3, r0
 8019a1e:	4648      	mov	r0, r9
 8019a20:	f7ff ff7a 	bl	8019918 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019a24:	6823      	ldr	r3, [r4, #0]
 8019a26:	9a03      	ldr	r2, [sp, #12]
 8019a28:	4546      	cmp	r6, r8
 8019a2a:	441a      	add	r2, r3
 8019a2c:	fb92 f3f5 	sdiv	r3, r2, r5
 8019a30:	4418      	add	r0, r3
 8019a32:	fb05 2313 	mls	r3, r5, r3, r2
 8019a36:	bf18      	it	ne
 8019a38:	4240      	negne	r0, r0
 8019a3a:	1c72      	adds	r2, r6, #1
 8019a3c:	6023      	str	r3, [r4, #0]
 8019a3e:	d105      	bne.n	8019a4c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	f1c3 0200 	rsb	r2, r3, #0
 8019a46:	db0b      	blt.n	8019a60 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8019a48:	6022      	str	r2, [r4, #0]
 8019a4a:	e006      	b.n	8019a5a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019a4c:	2e01      	cmp	r6, #1
 8019a4e:	d104      	bne.n	8019a5a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	da02      	bge.n	8019a5a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019a54:	442b      	add	r3, r5
 8019a56:	3801      	subs	r0, #1
 8019a58:	6023      	str	r3, [r4, #0]
 8019a5a:	b005      	add	sp, #20
 8019a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a60:	3801      	subs	r0, #1
 8019a62:	1b52      	subs	r2, r2, r5
 8019a64:	e7f0      	b.n	8019a48 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08019a68 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8019a68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8019a6c:	4c1c      	ldr	r4, [pc, #112]	; (8019ae0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8019a6e:	4605      	mov	r5, r0
 8019a70:	6807      	ldr	r7, [r0, #0]
 8019a72:	69a3      	ldr	r3, [r4, #24]
 8019a74:	b92b      	cbnz	r3, 8019a82 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8019a76:	6840      	ldr	r0, [r0, #4]
 8019a78:	e9c5 7000 	strd	r7, r0, [r5]
 8019a7c:	b004      	add	sp, #16
 8019a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a82:	f04f 0802 	mov.w	r8, #2
 8019a86:	68a2      	ldr	r2, [r4, #8]
 8019a88:	ae04      	add	r6, sp, #16
 8019a8a:	6820      	ldr	r0, [r4, #0]
 8019a8c:	fb93 f1f8 	sdiv	r1, r3, r8
 8019a90:	440a      	add	r2, r1
 8019a92:	69e1      	ldr	r1, [r4, #28]
 8019a94:	f846 2d04 	str.w	r2, [r6, #-4]!
 8019a98:	463a      	mov	r2, r7
 8019a9a:	9600      	str	r6, [sp, #0]
 8019a9c:	f7ff ff97 	bl	80199ce <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019aa0:	69a3      	ldr	r3, [r4, #24]
 8019aa2:	4607      	mov	r7, r0
 8019aa4:	686a      	ldr	r2, [r5, #4]
 8019aa6:	6a21      	ldr	r1, [r4, #32]
 8019aa8:	9600      	str	r6, [sp, #0]
 8019aaa:	6860      	ldr	r0, [r4, #4]
 8019aac:	f7ff ff8f 	bl	80199ce <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019ab0:	69a3      	ldr	r3, [r4, #24]
 8019ab2:	6962      	ldr	r2, [r4, #20]
 8019ab4:	4407      	add	r7, r0
 8019ab6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019ab8:	9600      	str	r6, [sp, #0]
 8019aba:	68e0      	ldr	r0, [r4, #12]
 8019abc:	fb93 f8f8 	sdiv	r8, r3, r8
 8019ac0:	4442      	add	r2, r8
 8019ac2:	9203      	str	r2, [sp, #12]
 8019ac4:	682a      	ldr	r2, [r5, #0]
 8019ac6:	f7ff ff82 	bl	80199ce <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019aca:	4680      	mov	r8, r0
 8019acc:	9600      	str	r6, [sp, #0]
 8019ace:	69a3      	ldr	r3, [r4, #24]
 8019ad0:	686a      	ldr	r2, [r5, #4]
 8019ad2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8019ad4:	6920      	ldr	r0, [r4, #16]
 8019ad6:	f7ff ff7a 	bl	80199ce <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019ada:	4440      	add	r0, r8
 8019adc:	e7cc      	b.n	8019a78 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8019ade:	bf00      	nop
 8019ae0:	200057ec 	.word	0x200057ec

08019ae4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8019ae4:	4b07      	ldr	r3, [pc, #28]	; (8019b04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8019ae6:	b510      	push	{r4, lr}
 8019ae8:	781b      	ldrb	r3, [r3, #0]
 8019aea:	2b01      	cmp	r3, #1
 8019aec:	d108      	bne.n	8019b00 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8019aee:	4b06      	ldr	r3, [pc, #24]	; (8019b08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8019af0:	880c      	ldrh	r4, [r1, #0]
 8019af2:	881b      	ldrh	r3, [r3, #0]
 8019af4:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019af8:	3b01      	subs	r3, #1
 8019afa:	1b1b      	subs	r3, r3, r4
 8019afc:	8003      	strh	r3, [r0, #0]
 8019afe:	800a      	strh	r2, [r1, #0]
 8019b00:	bd10      	pop	{r4, pc}
 8019b02:	bf00      	nop
 8019b04:	200057d8 	.word	0x200057d8
 8019b08:	200057dc 	.word	0x200057dc

08019b0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8019b0c:	4b0a      	ldr	r3, [pc, #40]	; (8019b38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8019b0e:	b510      	push	{r4, lr}
 8019b10:	781b      	ldrb	r3, [r3, #0]
 8019b12:	2b01      	cmp	r3, #1
 8019b14:	d10e      	bne.n	8019b34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8019b16:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019b1a:	8843      	ldrh	r3, [r0, #2]
 8019b1c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019b20:	18ca      	adds	r2, r1, r3
 8019b22:	4b06      	ldr	r3, [pc, #24]	; (8019b3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8019b24:	8044      	strh	r4, [r0, #2]
 8019b26:	881b      	ldrh	r3, [r3, #0]
 8019b28:	1a9b      	subs	r3, r3, r2
 8019b2a:	8003      	strh	r3, [r0, #0]
 8019b2c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019b30:	8081      	strh	r1, [r0, #4]
 8019b32:	80c3      	strh	r3, [r0, #6]
 8019b34:	bd10      	pop	{r4, pc}
 8019b36:	bf00      	nop
 8019b38:	200057d8 	.word	0x200057d8
 8019b3c:	200057d4 	.word	0x200057d4

08019b40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8019b40:	4b07      	ldr	r3, [pc, #28]	; (8019b60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8019b42:	b510      	push	{r4, lr}
 8019b44:	781b      	ldrb	r3, [r3, #0]
 8019b46:	2b01      	cmp	r3, #1
 8019b48:	d108      	bne.n	8019b5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8019b4a:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019b4e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019b52:	8003      	strh	r3, [r0, #0]
 8019b54:	8893      	ldrh	r3, [r2, #4]
 8019b56:	3b01      	subs	r3, #1
 8019b58:	1b1b      	subs	r3, r3, r4
 8019b5a:	800b      	strh	r3, [r1, #0]
 8019b5c:	bd10      	pop	{r4, pc}
 8019b5e:	bf00      	nop
 8019b60:	200057d8 	.word	0x200057d8

08019b64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8019b64:	4b08      	ldr	r3, [pc, #32]	; (8019b88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8019b66:	b513      	push	{r0, r1, r4, lr}
 8019b68:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019b6c:	2400      	movs	r4, #0
 8019b6e:	4b07      	ldr	r3, [pc, #28]	; (8019b8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8019b70:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019b74:	466a      	mov	r2, sp
 8019b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019b7a:	9400      	str	r4, [sp, #0]
 8019b7c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019b80:	f7ff ffde 	bl	8019b40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019b84:	b002      	add	sp, #8
 8019b86:	bd10      	pop	{r4, pc}
 8019b88:	200057d4 	.word	0x200057d4
 8019b8c:	200057d6 	.word	0x200057d6

08019b90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8019b90:	4b0a      	ldr	r3, [pc, #40]	; (8019bbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8019b92:	460a      	mov	r2, r1
 8019b94:	b510      	push	{r4, lr}
 8019b96:	781b      	ldrb	r3, [r3, #0]
 8019b98:	2b01      	cmp	r3, #1
 8019b9a:	d10d      	bne.n	8019bb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8019b9c:	8881      	ldrh	r1, [r0, #4]
 8019b9e:	8803      	ldrh	r3, [r0, #0]
 8019ba0:	440b      	add	r3, r1
 8019ba2:	4601      	mov	r1, r0
 8019ba4:	3b01      	subs	r3, #1
 8019ba6:	f821 3b02 	strh.w	r3, [r1], #2
 8019baa:	f7ff ffc9 	bl	8019b40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019bae:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019bb2:	88c2      	ldrh	r2, [r0, #6]
 8019bb4:	80c3      	strh	r3, [r0, #6]
 8019bb6:	8082      	strh	r2, [r0, #4]
 8019bb8:	bd10      	pop	{r4, pc}
 8019bba:	bf00      	nop
 8019bbc:	200057d8 	.word	0x200057d8

08019bc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8019bc0:	4b09      	ldr	r3, [pc, #36]	; (8019be8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8019bc2:	b507      	push	{r0, r1, r2, lr}
 8019bc4:	2100      	movs	r1, #0
 8019bc6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019bca:	4b08      	ldr	r3, [pc, #32]	; (8019bec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8019bcc:	9100      	str	r1, [sp, #0]
 8019bce:	4669      	mov	r1, sp
 8019bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019bd4:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019bd8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019bdc:	f7ff ffd8 	bl	8019b90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019be0:	b003      	add	sp, #12
 8019be2:	f85d fb04 	ldr.w	pc, [sp], #4
 8019be6:	bf00      	nop
 8019be8:	200057d4 	.word	0x200057d4
 8019bec:	200057d6 	.word	0x200057d6

08019bf0 <_ZN8touchgfx11Application13requestRedrawEv>:
 8019bf0:	4b06      	ldr	r3, [pc, #24]	; (8019c0c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8019bf2:	2100      	movs	r1, #0
 8019bf4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019bf8:	4b05      	ldr	r3, [pc, #20]	; (8019c10 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8019bfa:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8019bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c02:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8019c06:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8019c0a:	4770      	bx	lr
 8019c0c:	200057d4 	.word	0x200057d4
 8019c10:	200057d6 	.word	0x200057d6

08019c14 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8019c14:	4b03      	ldr	r3, [pc, #12]	; (8019c24 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8019c16:	6818      	ldr	r0, [r3, #0]
 8019c18:	b110      	cbz	r0, 8019c20 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8019c1a:	6803      	ldr	r3, [r0, #0]
 8019c1c:	699b      	ldr	r3, [r3, #24]
 8019c1e:	4718      	bx	r3
 8019c20:	4770      	bx	lr
 8019c22:	bf00      	nop
 8019c24:	2000581c 	.word	0x2000581c

08019c28 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8019c28:	4770      	bx	lr
	...

08019c2c <_ZN8touchgfx11Application4drawEv>:
 8019c2c:	4b09      	ldr	r3, [pc, #36]	; (8019c54 <_ZN8touchgfx11Application4drawEv+0x28>)
 8019c2e:	b507      	push	{r0, r1, r2, lr}
 8019c30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019c34:	2100      	movs	r1, #0
 8019c36:	4b08      	ldr	r3, [pc, #32]	; (8019c58 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8019c38:	9100      	str	r1, [sp, #0]
 8019c3a:	4669      	mov	r1, sp
 8019c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c40:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019c44:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019c48:	6803      	ldr	r3, [r0, #0]
 8019c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019c4c:	4798      	blx	r3
 8019c4e:	b003      	add	sp, #12
 8019c50:	f85d fb04 	ldr.w	pc, [sp], #4
 8019c54:	200057d4 	.word	0x200057d4
 8019c58:	200057d6 	.word	0x200057d6

08019c5c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8019c5c:	4b03      	ldr	r3, [pc, #12]	; (8019c6c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8019c5e:	6818      	ldr	r0, [r3, #0]
 8019c60:	b110      	cbz	r0, 8019c68 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8019c62:	6803      	ldr	r3, [r0, #0]
 8019c64:	69db      	ldr	r3, [r3, #28]
 8019c66:	4718      	bx	r3
 8019c68:	4770      	bx	lr
 8019c6a:	bf00      	nop
 8019c6c:	2000581c 	.word	0x2000581c

08019c70 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8019c70:	4b03      	ldr	r3, [pc, #12]	; (8019c80 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8019c72:	6818      	ldr	r0, [r3, #0]
 8019c74:	b110      	cbz	r0, 8019c7c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8019c76:	6803      	ldr	r3, [r0, #0]
 8019c78:	6a1b      	ldr	r3, [r3, #32]
 8019c7a:	4718      	bx	r3
 8019c7c:	4770      	bx	lr
 8019c7e:	bf00      	nop
 8019c80:	2000581c 	.word	0x2000581c

08019c84 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8019c84:	4b03      	ldr	r3, [pc, #12]	; (8019c94 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8019c86:	6818      	ldr	r0, [r3, #0]
 8019c88:	b110      	cbz	r0, 8019c90 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8019c8a:	6803      	ldr	r3, [r0, #0]
 8019c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c8e:	4718      	bx	r3
 8019c90:	4770      	bx	lr
 8019c92:	bf00      	nop
 8019c94:	2000581c 	.word	0x2000581c

08019c98 <_ZN8touchgfx11Application15handleTickEventEv>:
 8019c98:	b570      	push	{r4, r5, r6, lr}
 8019c9a:	4d34      	ldr	r5, [pc, #208]	; (8019d6c <_ZN8touchgfx11Application15handleTickEventEv+0xd4>)
 8019c9c:	4604      	mov	r4, r0
 8019c9e:	6828      	ldr	r0, [r5, #0]
 8019ca0:	b140      	cbz	r0, 8019cb4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8019ca2:	7a03      	ldrb	r3, [r0, #8]
 8019ca4:	b933      	cbnz	r3, 8019cb4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8019ca6:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8019caa:	6803      	ldr	r3, [r0, #0]
 8019cac:	689b      	ldr	r3, [r3, #8]
 8019cae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019cb2:	4718      	bx	r3
 8019cb4:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8019cb8:	b97b      	cbnz	r3, 8019cda <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019cba:	b170      	cbz	r0, 8019cda <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019cbc:	7a03      	ldrb	r3, [r0, #8]
 8019cbe:	b163      	cbz	r3, 8019cda <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019cc0:	4b2b      	ldr	r3, [pc, #172]	; (8019d70 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8019cc2:	6818      	ldr	r0, [r3, #0]
 8019cc4:	b110      	cbz	r0, 8019ccc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8019cc6:	6803      	ldr	r3, [r0, #0]
 8019cc8:	691b      	ldr	r3, [r3, #16]
 8019cca:	4798      	blx	r3
 8019ccc:	6828      	ldr	r0, [r5, #0]
 8019cce:	6803      	ldr	r3, [r0, #0]
 8019cd0:	68db      	ldr	r3, [r3, #12]
 8019cd2:	4798      	blx	r3
 8019cd4:	2301      	movs	r3, #1
 8019cd6:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8019cda:	2500      	movs	r5, #0
 8019cdc:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8019ce0:	42a8      	cmp	r0, r5
 8019ce2:	dd0c      	ble.n	8019cfe <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8019ce4:	1963      	adds	r3, r4, r5
 8019ce6:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8019cea:	b132      	cbz	r2, 8019cfa <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8019cec:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8019cf0:	4413      	add	r3, r2
 8019cf2:	6858      	ldr	r0, [r3, #4]
 8019cf4:	6803      	ldr	r3, [r0, #0]
 8019cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019cf8:	4798      	blx	r3
 8019cfa:	3501      	adds	r5, #1
 8019cfc:	e7ee      	b.n	8019cdc <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8019cfe:	2300      	movs	r3, #0
 8019d00:	461a      	mov	r2, r3
 8019d02:	4298      	cmp	r0, r3
 8019d04:	d114      	bne.n	8019d30 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 8019d06:	1d25      	adds	r5, r4, #4
 8019d08:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8019d0c:	1e48      	subs	r0, r1, #1
 8019d0e:	b280      	uxth	r0, r0
 8019d10:	4291      	cmp	r1, r2
 8019d12:	dd24      	ble.n	8019d5e <_ZN8touchgfx11Application15handleTickEventEv+0xc6>
 8019d14:	4288      	cmp	r0, r1
 8019d16:	d2fb      	bcs.n	8019d10 <_ZN8touchgfx11Application15handleTickEventEv+0x78>
 8019d18:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8019d1c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8019d20:	3304      	adds	r3, #4
 8019d22:	428b      	cmp	r3, r1
 8019d24:	d018      	beq.n	8019d58 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 8019d26:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8019d2a:	f843 6c04 	str.w	r6, [r3, #-4]
 8019d2e:	e7f8      	b.n	8019d22 <_ZN8touchgfx11Application15handleTickEventEv+0x8a>
 8019d30:	18e1      	adds	r1, r4, r3
 8019d32:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8019d36:	b16d      	cbz	r5, 8019d54 <_ZN8touchgfx11Application15handleTickEventEv+0xbc>
 8019d38:	429a      	cmp	r2, r3
 8019d3a:	d00a      	beq.n	8019d52 <_ZN8touchgfx11Application15handleTickEventEv+0xba>
 8019d3c:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8019d40:	4431      	add	r1, r6
 8019d42:	684e      	ldr	r6, [r1, #4]
 8019d44:	b291      	uxth	r1, r2
 8019d46:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8019d4a:	604e      	str	r6, [r1, #4]
 8019d4c:	18a1      	adds	r1, r4, r2
 8019d4e:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8019d52:	3201      	adds	r2, #1
 8019d54:	3301      	adds	r3, #1
 8019d56:	e7d4      	b.n	8019d02 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8019d58:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8019d5c:	e7d4      	b.n	8019d08 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8019d5e:	4b04      	ldr	r3, [pc, #16]	; (8019d70 <_ZN8touchgfx11Application15handleTickEventEv+0xd8>)
 8019d60:	6818      	ldr	r0, [r3, #0]
 8019d62:	b110      	cbz	r0, 8019d6a <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 8019d64:	6803      	ldr	r3, [r0, #0]
 8019d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d68:	e7a1      	b.n	8019cae <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8019d6a:	bd70      	pop	{r4, r5, r6, pc}
 8019d6c:	20005820 	.word	0x20005820
 8019d70:	2000581c 	.word	0x2000581c

08019d74 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8019d74:	b570      	push	{r4, r5, r6, lr}
 8019d76:	4606      	mov	r6, r0
 8019d78:	460c      	mov	r4, r1
 8019d7a:	b929      	cbnz	r1, 8019d88 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8019d7c:	4b0c      	ldr	r3, [pc, #48]	; (8019db0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8019d7e:	2164      	movs	r1, #100	; 0x64
 8019d80:	4a0c      	ldr	r2, [pc, #48]	; (8019db4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8019d82:	480d      	ldr	r0, [pc, #52]	; (8019db8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8019d84:	f00e fc88 	bl	8028698 <__assert_func>
 8019d88:	2300      	movs	r3, #0
 8019d8a:	4d0c      	ldr	r5, [pc, #48]	; (8019dbc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8019d8c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8019d90:	6828      	ldr	r0, [r5, #0]
 8019d92:	b110      	cbz	r0, 8019d9a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8019d94:	6803      	ldr	r3, [r0, #0]
 8019d96:	695b      	ldr	r3, [r3, #20]
 8019d98:	4798      	blx	r3
 8019d9a:	602c      	str	r4, [r5, #0]
 8019d9c:	4620      	mov	r0, r4
 8019d9e:	6823      	ldr	r3, [r4, #0]
 8019da0:	68db      	ldr	r3, [r3, #12]
 8019da2:	4798      	blx	r3
 8019da4:	6833      	ldr	r3, [r6, #0]
 8019da6:	4630      	mov	r0, r6
 8019da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019dae:	4718      	bx	r3
 8019db0:	0802c074 	.word	0x0802c074
 8019db4:	0802c16c 	.word	0x0802c16c
 8019db8:	0802c07e 	.word	0x0802c07e
 8019dbc:	2000581c 	.word	0x2000581c

08019dc0 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8019dc0:	b510      	push	{r4, lr}
 8019dc2:	f9b1 4000 	ldrsh.w	r4, [r1]
 8019dc6:	888a      	ldrh	r2, [r1, #4]
 8019dc8:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019dcc:	4422      	add	r2, r4
 8019dce:	b212      	sxth	r2, r2
 8019dd0:	4293      	cmp	r3, r2
 8019dd2:	da15      	bge.n	8019e00 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019dd4:	8882      	ldrh	r2, [r0, #4]
 8019dd6:	4413      	add	r3, r2
 8019dd8:	b21b      	sxth	r3, r3
 8019dda:	429c      	cmp	r4, r3
 8019ddc:	da10      	bge.n	8019e00 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019dde:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8019de2:	88c9      	ldrh	r1, [r1, #6]
 8019de4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019de8:	4419      	add	r1, r3
 8019dea:	b209      	sxth	r1, r1
 8019dec:	428a      	cmp	r2, r1
 8019dee:	da07      	bge.n	8019e00 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019df0:	88c0      	ldrh	r0, [r0, #6]
 8019df2:	4410      	add	r0, r2
 8019df4:	b200      	sxth	r0, r0
 8019df6:	4283      	cmp	r3, r0
 8019df8:	bfac      	ite	ge
 8019dfa:	2000      	movge	r0, #0
 8019dfc:	2001      	movlt	r0, #1
 8019dfe:	bd10      	pop	{r4, pc}
 8019e00:	2000      	movs	r0, #0
 8019e02:	e7fc      	b.n	8019dfe <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08019e04 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8019e04:	b570      	push	{r4, r5, r6, lr}
 8019e06:	f9b1 4000 	ldrsh.w	r4, [r1]
 8019e0a:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019e0e:	42ac      	cmp	r4, r5
 8019e10:	db18      	blt.n	8019e44 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019e12:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8019e16:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019e1a:	429a      	cmp	r2, r3
 8019e1c:	db12      	blt.n	8019e44 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019e1e:	8886      	ldrh	r6, [r0, #4]
 8019e20:	4435      	add	r5, r6
 8019e22:	888e      	ldrh	r6, [r1, #4]
 8019e24:	4434      	add	r4, r6
 8019e26:	b22d      	sxth	r5, r5
 8019e28:	b224      	sxth	r4, r4
 8019e2a:	42a5      	cmp	r5, r4
 8019e2c:	db0a      	blt.n	8019e44 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8019e2e:	88c0      	ldrh	r0, [r0, #6]
 8019e30:	4418      	add	r0, r3
 8019e32:	88cb      	ldrh	r3, [r1, #6]
 8019e34:	441a      	add	r2, r3
 8019e36:	b200      	sxth	r0, r0
 8019e38:	b212      	sxth	r2, r2
 8019e3a:	4290      	cmp	r0, r2
 8019e3c:	bfb4      	ite	lt
 8019e3e:	2000      	movlt	r0, #0
 8019e40:	2001      	movge	r0, #1
 8019e42:	bd70      	pop	{r4, r5, r6, pc}
 8019e44:	2000      	movs	r0, #0
 8019e46:	e7fc      	b.n	8019e42 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08019e48 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8019e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e4a:	4604      	mov	r4, r0
 8019e4c:	4608      	mov	r0, r1
 8019e4e:	460d      	mov	r5, r1
 8019e50:	f7fc fe3d 	bl	8016ace <_ZNK8touchgfx4Rect7isEmptyEv>
 8019e54:	b978      	cbnz	r0, 8019e76 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8019e56:	4620      	mov	r0, r4
 8019e58:	f7fc fe39 	bl	8016ace <_ZNK8touchgfx4Rect7isEmptyEv>
 8019e5c:	f9b5 6000 	ldrsh.w	r6, [r5]
 8019e60:	b150      	cbz	r0, 8019e78 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8019e62:	8026      	strh	r6, [r4, #0]
 8019e64:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8019e68:	8063      	strh	r3, [r4, #2]
 8019e6a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8019e6e:	80a3      	strh	r3, [r4, #4]
 8019e70:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019e74:	80e3      	strh	r3, [r4, #6]
 8019e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e78:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019e7c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8019e80:	42b1      	cmp	r1, r6
 8019e82:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8019e86:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8019e8a:	460f      	mov	r7, r1
 8019e8c:	88ed      	ldrh	r5, [r5, #6]
 8019e8e:	bfa8      	it	ge
 8019e90:	4637      	movge	r7, r6
 8019e92:	4293      	cmp	r3, r2
 8019e94:	4618      	mov	r0, r3
 8019e96:	4466      	add	r6, ip
 8019e98:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8019e9c:	bfa8      	it	ge
 8019e9e:	4610      	movge	r0, r2
 8019ea0:	442a      	add	r2, r5
 8019ea2:	88e5      	ldrh	r5, [r4, #6]
 8019ea4:	4461      	add	r1, ip
 8019ea6:	b236      	sxth	r6, r6
 8019ea8:	8027      	strh	r7, [r4, #0]
 8019eaa:	442b      	add	r3, r5
 8019eac:	b209      	sxth	r1, r1
 8019eae:	b212      	sxth	r2, r2
 8019eb0:	8060      	strh	r0, [r4, #2]
 8019eb2:	b21b      	sxth	r3, r3
 8019eb4:	428e      	cmp	r6, r1
 8019eb6:	bfac      	ite	ge
 8019eb8:	ebc7 0106 	rsbge	r1, r7, r6
 8019ebc:	ebc7 0101 	rsblt	r1, r7, r1
 8019ec0:	429a      	cmp	r2, r3
 8019ec2:	bfac      	ite	ge
 8019ec4:	ebc0 0202 	rsbge	r2, r0, r2
 8019ec8:	ebc0 0203 	rsblt	r2, r0, r3
 8019ecc:	80a1      	strh	r1, [r4, #4]
 8019ece:	80e2      	strh	r2, [r4, #6]
 8019ed0:	e7d1      	b.n	8019e76 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08019ed4 <_ZN8touchgfx11Application11getInstanceEv>:
 8019ed4:	4b01      	ldr	r3, [pc, #4]	; (8019edc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8019ed6:	6818      	ldr	r0, [r3, #0]
 8019ed8:	4770      	bx	lr
 8019eda:	bf00      	nop
 8019edc:	2000582c 	.word	0x2000582c

08019ee0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 8019ee0:	b570      	push	{r4, r5, r6, lr}
 8019ee2:	2200      	movs	r2, #0
 8019ee4:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8019ee8:	1d04      	adds	r4, r0, #4
 8019eea:	b295      	uxth	r5, r2
 8019eec:	42ab      	cmp	r3, r5
 8019eee:	d90e      	bls.n	8019f0e <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 8019ef0:	f854 6b04 	ldr.w	r6, [r4], #4
 8019ef4:	4615      	mov	r5, r2
 8019ef6:	3201      	adds	r2, #1
 8019ef8:	428e      	cmp	r6, r1
 8019efa:	d1f6      	bne.n	8019eea <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 8019efc:	4428      	add	r0, r5
 8019efe:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 8019f02:	2bff      	cmp	r3, #255	; 0xff
 8019f04:	d002      	beq.n	8019f0c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 8019f06:	3301      	adds	r3, #1
 8019f08:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 8019f0c:	bd70      	pop	{r4, r5, r6, pc}
 8019f0e:	2b20      	cmp	r3, #32
 8019f10:	d106      	bne.n	8019f20 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 8019f12:	4b09      	ldr	r3, [pc, #36]	; (8019f38 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 8019f14:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8019f18:	4a08      	ldr	r2, [pc, #32]	; (8019f3c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 8019f1a:	4809      	ldr	r0, [pc, #36]	; (8019f40 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 8019f1c:	f00e fbbc 	bl	8028698 <__assert_func>
 8019f20:	18c2      	adds	r2, r0, r3
 8019f22:	2401      	movs	r4, #1
 8019f24:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 8019f28:	191a      	adds	r2, r3, r4
 8019f2a:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 8019f2e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8019f32:	6041      	str	r1, [r0, #4]
 8019f34:	e7ea      	b.n	8019f0c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 8019f36:	bf00      	nop
 8019f38:	0802c0a8 	.word	0x0802c0a8
 8019f3c:	0802c1b0 	.word	0x0802c1b0
 8019f40:	0802c07e 	.word	0x0802c07e

08019f44 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 8019f44:	b570      	push	{r4, r5, r6, lr}
 8019f46:	2300      	movs	r3, #0
 8019f48:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 8019f4c:	1d04      	adds	r4, r0, #4
 8019f4e:	b29a      	uxth	r2, r3
 8019f50:	4296      	cmp	r6, r2
 8019f52:	d90a      	bls.n	8019f6a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 8019f54:	f854 2b04 	ldr.w	r2, [r4], #4
 8019f58:	428a      	cmp	r2, r1
 8019f5a:	d107      	bne.n	8019f6c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8019f5c:	18c5      	adds	r5, r0, r3
 8019f5e:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 8019f62:	b11a      	cbz	r2, 8019f6c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8019f64:	3a01      	subs	r2, #1
 8019f66:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 8019f6a:	bd70      	pop	{r4, r5, r6, pc}
 8019f6c:	3301      	adds	r3, #1
 8019f6e:	e7ee      	b.n	8019f4e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

08019f70 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8019f70:	2300      	movs	r3, #0
 8019f72:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8019f76:	30a8      	adds	r0, #168	; 0xa8
 8019f78:	f820 3c24 	strh.w	r3, [r0, #-36]
 8019f7c:	f802 3b01 	strb.w	r3, [r2], #1
 8019f80:	4282      	cmp	r2, r0
 8019f82:	d1fb      	bne.n	8019f7c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8019f84:	4770      	bx	lr

08019f86 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8019f86:	4603      	mov	r3, r0
 8019f88:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8019f8c:	2200      	movs	r2, #0
 8019f8e:	801a      	strh	r2, [r3, #0]
 8019f90:	3308      	adds	r3, #8
 8019f92:	f823 2c06 	strh.w	r2, [r3, #-6]
 8019f96:	f823 2c04 	strh.w	r2, [r3, #-4]
 8019f9a:	f823 2c02 	strh.w	r2, [r3, #-2]
 8019f9e:	428b      	cmp	r3, r1
 8019fa0:	d1f5      	bne.n	8019f8e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8019fa2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8019fa6:	4770      	bx	lr

08019fa8 <_ZN8touchgfx11ApplicationC1Ev>:
 8019fa8:	b570      	push	{r4, r5, r6, lr}
 8019faa:	4b1a      	ldr	r3, [pc, #104]	; (801a014 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8019fac:	2500      	movs	r5, #0
 8019fae:	4604      	mov	r4, r0
 8019fb0:	30a8      	adds	r0, #168	; 0xa8
 8019fb2:	f840 3ca8 	str.w	r3, [r0, #-168]
 8019fb6:	f820 5c24 	strh.w	r5, [r0, #-36]
 8019fba:	f7ff ffe4 	bl	8019f86 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019fbe:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8019fc2:	f7ff ffe0 	bl	8019f86 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019fc6:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8019fca:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8019fce:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8019fd2:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8019fd6:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8019fda:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8019fde:	490e      	ldr	r1, [pc, #56]	; (801a018 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8019fe0:	480e      	ldr	r0, [pc, #56]	; (801a01c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8019fe2:	f00e fa23 	bl	802842c <CRC_Lock>
 8019fe6:	4e0e      	ldr	r6, [pc, #56]	; (801a020 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8019fe8:	4b0e      	ldr	r3, [pc, #56]	; (801a024 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8019fea:	b158      	cbz	r0, 801a004 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8019fec:	801d      	strh	r5, [r3, #0]
 8019fee:	2300      	movs	r3, #0
 8019ff0:	4a0d      	ldr	r2, [pc, #52]	; (801a028 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8019ff2:	4620      	mov	r0, r4
 8019ff4:	6013      	str	r3, [r2, #0]
 8019ff6:	4a0d      	ldr	r2, [pc, #52]	; (801a02c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8019ff8:	6033      	str	r3, [r6, #0]
 8019ffa:	6013      	str	r3, [r2, #0]
 8019ffc:	f7ff ffb8 	bl	8019f70 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801a000:	4620      	mov	r0, r4
 801a002:	bd70      	pop	{r4, r5, r6, pc}
 801a004:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a008:	2002      	movs	r0, #2
 801a00a:	801a      	strh	r2, [r3, #0]
 801a00c:	6030      	str	r0, [r6, #0]
 801a00e:	f001 faff 	bl	801b610 <_ZN8touchgfx6Screen4drawEv>
 801a012:	e7ec      	b.n	8019fee <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801a014:	0802c130 	.word	0x0802c130
 801a018:	b5e8b5cd 	.word	0xb5e8b5cd
 801a01c:	f407a5c2 	.word	0xf407a5c2
 801a020:	2000581c 	.word	0x2000581c
 801a024:	20000174 	.word	0x20000174
 801a028:	2000582c 	.word	0x2000582c
 801a02c:	20005820 	.word	0x20005820

0801a030 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801a030:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801a034:	428b      	cmp	r3, r1
 801a036:	b510      	push	{r4, lr}
 801a038:	d90e      	bls.n	801a058 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801a03a:	3b01      	subs	r3, #1
 801a03c:	b29b      	uxth	r3, r3
 801a03e:	428b      	cmp	r3, r1
 801a040:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801a044:	d908      	bls.n	801a058 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x28>
 801a046:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801a04a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801a04e:	681a      	ldr	r2, [r3, #0]
 801a050:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801a054:	685a      	ldr	r2, [r3, #4]
 801a056:	6062      	str	r2, [r4, #4]
 801a058:	bd10      	pop	{r4, pc}
	...

0801a05c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801a05c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a05e:	466b      	mov	r3, sp
 801a060:	4604      	mov	r4, r0
 801a062:	e883 0006 	stmia.w	r3, {r1, r2}
 801a066:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801a06a:	2a07      	cmp	r2, #7
 801a06c:	d906      	bls.n	801a07c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801a06e:	4b09      	ldr	r3, [pc, #36]	; (801a094 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801a070:	f240 118f 	movw	r1, #399	; 0x18f
 801a074:	4a08      	ldr	r2, [pc, #32]	; (801a098 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801a076:	4809      	ldr	r0, [pc, #36]	; (801a09c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801a078:	f00e fb0e 	bl	8028698 <__assert_func>
 801a07c:	1c51      	adds	r1, r2, #1
 801a07e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801a082:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801a086:	cb03      	ldmia	r3!, {r0, r1}
 801a088:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801a08c:	6069      	str	r1, [r5, #4]
 801a08e:	b003      	add	sp, #12
 801a090:	bd30      	pop	{r4, r5, pc}
 801a092:	bf00      	nop
 801a094:	0802c0d0 	.word	0x0802c0d0
 801a098:	0802c1f5 	.word	0x0802c1f5
 801a09c:	0802c0ff 	.word	0x0802c0ff

0801a0a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801a0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0a4:	b08d      	sub	sp, #52	; 0x34
 801a0a6:	4683      	mov	fp, r0
 801a0a8:	ac08      	add	r4, sp, #32
 801a0aa:	4620      	mov	r0, r4
 801a0ac:	e884 0006 	stmia.w	r4, {r1, r2}
 801a0b0:	f7fc fd0d 	bl	8016ace <_ZNK8touchgfx4Rect7isEmptyEv>
 801a0b4:	2800      	cmp	r0, #0
 801a0b6:	d16a      	bne.n	801a18e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a0b8:	9402      	str	r4, [sp, #8]
 801a0ba:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801a0be:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801a0c2:	2400      	movs	r4, #0
 801a0c4:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801a0c8:	9301      	str	r3, [sp, #4]
 801a0ca:	36a0      	adds	r6, #160	; 0xa0
 801a0cc:	42a5      	cmp	r5, r4
 801a0ce:	d00d      	beq.n	801a0ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801a0d0:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801a0d4:	9802      	ldr	r0, [sp, #8]
 801a0d6:	f7ff fe95 	bl	8019e04 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a0da:	b128      	cbz	r0, 801a0e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801a0dc:	1e69      	subs	r1, r5, #1
 801a0de:	9801      	ldr	r0, [sp, #4]
 801a0e0:	1b09      	subs	r1, r1, r4
 801a0e2:	b289      	uxth	r1, r1
 801a0e4:	f7ff ffa4 	bl	801a030 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a0e8:	3401      	adds	r4, #1
 801a0ea:	e7ef      	b.n	801a0cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a0ec:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801a0f0:	1e7b      	subs	r3, r7, #1
 801a0f2:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801a0f6:	9703      	str	r7, [sp, #12]
 801a0f8:	9300      	str	r3, [sp, #0]
 801a0fa:	2400      	movs	r4, #0
 801a0fc:	4655      	mov	r5, sl
 801a0fe:	9704      	str	r7, [sp, #16]
 801a100:	4626      	mov	r6, r4
 801a102:	9b04      	ldr	r3, [sp, #16]
 801a104:	2b00      	cmp	r3, #0
 801a106:	d078      	beq.n	801a1fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801a108:	9902      	ldr	r1, [sp, #8]
 801a10a:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801a10e:	f7ff fe57 	bl	8019dc0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a112:	b360      	cbz	r0, 801a16e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801a114:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801a118:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801a11c:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801a120:	45e6      	cmp	lr, ip
 801a122:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801a126:	db35      	blt.n	801a194 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801a128:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801a12c:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801a130:	4472      	add	r2, lr
 801a132:	4463      	add	r3, ip
 801a134:	b212      	sxth	r2, r2
 801a136:	b21b      	sxth	r3, r3
 801a138:	429a      	cmp	r2, r3
 801a13a:	dc2b      	bgt.n	801a194 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801a13c:	fa1f f288 	uxth.w	r2, r8
 801a140:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801a144:	45c1      	cmp	r9, r8
 801a146:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801a14a:	4413      	add	r3, r2
 801a14c:	fa1f fc89 	uxth.w	ip, r9
 801a150:	b29b      	uxth	r3, r3
 801a152:	fa0f fe83 	sxth.w	lr, r3
 801a156:	db0f      	blt.n	801a178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801a158:	eba3 030c 	sub.w	r3, r3, ip
 801a15c:	1ac9      	subs	r1, r1, r3
 801a15e:	b209      	sxth	r1, r1
 801a160:	2900      	cmp	r1, #0
 801a162:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801a166:	dd12      	ble.n	801a18e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a168:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801a16c:	4604      	mov	r4, r0
 801a16e:	9b04      	ldr	r3, [sp, #16]
 801a170:	3d08      	subs	r5, #8
 801a172:	3b01      	subs	r3, #1
 801a174:	9304      	str	r3, [sp, #16]
 801a176:	e7c4      	b.n	801a102 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801a178:	4461      	add	r1, ip
 801a17a:	b209      	sxth	r1, r1
 801a17c:	4571      	cmp	r1, lr
 801a17e:	dc3a      	bgt.n	801a1f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a180:	eba2 020c 	sub.w	r2, r2, ip
 801a184:	b212      	sxth	r2, r2
 801a186:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801a18a:	2a00      	cmp	r2, #0
 801a18c:	dcee      	bgt.n	801a16c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801a18e:	b00d      	add	sp, #52	; 0x34
 801a190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a194:	45c1      	cmp	r9, r8
 801a196:	db2e      	blt.n	801a1f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a198:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801a19c:	4499      	add	r9, r3
 801a19e:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801a1a2:	4498      	add	r8, r3
 801a1a4:	fa0f f989 	sxth.w	r9, r9
 801a1a8:	fa0f f888 	sxth.w	r8, r8
 801a1ac:	45c1      	cmp	r9, r8
 801a1ae:	dc22      	bgt.n	801a1f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a1b0:	fa1f f28c 	uxth.w	r2, ip
 801a1b4:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801a1b8:	45e6      	cmp	lr, ip
 801a1ba:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801a1be:	4413      	add	r3, r2
 801a1c0:	fa1f f88e 	uxth.w	r8, lr
 801a1c4:	b29b      	uxth	r3, r3
 801a1c6:	fa0f f983 	sxth.w	r9, r3
 801a1ca:	db0a      	blt.n	801a1e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801a1cc:	eba3 0308 	sub.w	r3, r3, r8
 801a1d0:	1ac9      	subs	r1, r1, r3
 801a1d2:	b209      	sxth	r1, r1
 801a1d4:	2900      	cmp	r1, #0
 801a1d6:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801a1da:	ddd8      	ble.n	801a18e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a1dc:	f8ad 9020 	strh.w	r9, [sp, #32]
 801a1e0:	e7c4      	b.n	801a16c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801a1e2:	4441      	add	r1, r8
 801a1e4:	b209      	sxth	r1, r1
 801a1e6:	4549      	cmp	r1, r9
 801a1e8:	dc05      	bgt.n	801a1f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801a1ea:	eba2 0208 	sub.w	r2, r2, r8
 801a1ee:	b212      	sxth	r2, r2
 801a1f0:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801a1f4:	e7c9      	b.n	801a18a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801a1f6:	4606      	mov	r6, r0
 801a1f8:	e7b9      	b.n	801a16e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801a1fa:	2c00      	cmp	r4, #0
 801a1fc:	f47f af7d 	bne.w	801a0fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801a200:	2e00      	cmp	r6, #0
 801a202:	f000 81dc 	beq.w	801a5be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801a206:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801a20a:	4655      	mov	r5, sl
 801a20c:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801a210:	b2b9      	uxth	r1, r7
 801a212:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801a216:	b2b3      	uxth	r3, r6
 801a218:	9104      	str	r1, [sp, #16]
 801a21a:	9804      	ldr	r0, [sp, #16]
 801a21c:	441a      	add	r2, r3
 801a21e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801a222:	b292      	uxth	r2, r2
 801a224:	4401      	add	r1, r0
 801a226:	fa0f f882 	sxth.w	r8, r2
 801a22a:	b289      	uxth	r1, r1
 801a22c:	9105      	str	r1, [sp, #20]
 801a22e:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801a232:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a236:	9b03      	ldr	r3, [sp, #12]
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d054      	beq.n	801a2e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801a23c:	9902      	ldr	r1, [sp, #8]
 801a23e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801a242:	f7ff fdbd 	bl	8019dc0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a246:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a24a:	b1d8      	cbz	r0, 801a284 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801a24c:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801a250:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801a254:	4576      	cmp	r6, lr
 801a256:	dc26      	bgt.n	801a2a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801a258:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801a25c:	44f4      	add	ip, lr
 801a25e:	fa0f fc8c 	sxth.w	ip, ip
 801a262:	45e0      	cmp	r8, ip
 801a264:	db1f      	blt.n	801a2a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801a266:	428f      	cmp	r7, r1
 801a268:	fa1f fc81 	uxth.w	ip, r1
 801a26c:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801a270:	dc0f      	bgt.n	801a292 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801a272:	9805      	ldr	r0, [sp, #20]
 801a274:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801a278:	eba0 0c0c 	sub.w	ip, r0, ip
 801a27c:	eba1 010c 	sub.w	r1, r1, ip
 801a280:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801a284:	4620      	mov	r0, r4
 801a286:	9903      	ldr	r1, [sp, #12]
 801a288:	3d08      	subs	r5, #8
 801a28a:	4604      	mov	r4, r0
 801a28c:	3901      	subs	r1, #1
 801a28e:	9103      	str	r1, [sp, #12]
 801a290:	e7cf      	b.n	801a232 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801a292:	4461      	add	r1, ip
 801a294:	b209      	sxth	r1, r1
 801a296:	4549      	cmp	r1, r9
 801a298:	dcf5      	bgt.n	801a286 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a29a:	9904      	ldr	r1, [sp, #16]
 801a29c:	eba1 0c0c 	sub.w	ip, r1, ip
 801a2a0:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801a2a4:	e7ee      	b.n	801a284 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801a2a6:	428f      	cmp	r7, r1
 801a2a8:	dced      	bgt.n	801a286 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a2aa:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801a2ae:	4461      	add	r1, ip
 801a2b0:	b209      	sxth	r1, r1
 801a2b2:	4589      	cmp	r9, r1
 801a2b4:	dbe7      	blt.n	801a286 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a2b6:	4576      	cmp	r6, lr
 801a2b8:	fa1f fc8e 	uxth.w	ip, lr
 801a2bc:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801a2c0:	dc08      	bgt.n	801a2d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801a2c2:	eba2 0c0c 	sub.w	ip, r2, ip
 801a2c6:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801a2ca:	eba1 010c 	sub.w	r1, r1, ip
 801a2ce:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801a2d2:	e7d7      	b.n	801a284 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801a2d4:	4461      	add	r1, ip
 801a2d6:	b209      	sxth	r1, r1
 801a2d8:	4588      	cmp	r8, r1
 801a2da:	dbd4      	blt.n	801a286 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801a2dc:	eba3 0c0c 	sub.w	ip, r3, ip
 801a2e0:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801a2e4:	e7ce      	b.n	801a284 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801a2e6:	2c00      	cmp	r4, #0
 801a2e8:	f000 8169 	beq.w	801a5be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801a2ec:	9b00      	ldr	r3, [sp, #0]
 801a2ee:	3301      	adds	r3, #1
 801a2f0:	f000 8165 	beq.w	801a5be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801a2f4:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801a2f8:	9802      	ldr	r0, [sp, #8]
 801a2fa:	4621      	mov	r1, r4
 801a2fc:	f7ff fd82 	bl	8019e04 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a300:	b120      	cbz	r0, 801a30c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801a302:	f8bd 1000 	ldrh.w	r1, [sp]
 801a306:	9801      	ldr	r0, [sp, #4]
 801a308:	f7ff fe92 	bl	801a030 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a30c:	9902      	ldr	r1, [sp, #8]
 801a30e:	4620      	mov	r0, r4
 801a310:	f7ff fd56 	bl	8019dc0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a314:	2800      	cmp	r0, #0
 801a316:	f000 809b 	beq.w	801a450 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801a31a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801a31e:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801a322:	fa1f f288 	uxth.w	r2, r8
 801a326:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801a32a:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801a32e:	19d5      	adds	r5, r2, r7
 801a330:	b2a1      	uxth	r1, r4
 801a332:	45a0      	cmp	r8, r4
 801a334:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801a338:	fa1f f985 	uxth.w	r9, r5
 801a33c:	440b      	add	r3, r1
 801a33e:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801a342:	fa0f f589 	sxth.w	r5, r9
 801a346:	b29b      	uxth	r3, r3
 801a348:	9503      	str	r5, [sp, #12]
 801a34a:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801a34e:	9507      	str	r5, [sp, #28]
 801a350:	f340 809d 	ble.w	801a48e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801a354:	1a52      	subs	r2, r2, r1
 801a356:	4584      	cmp	ip, r0
 801a358:	fa0f fe83 	sxth.w	lr, r3
 801a35c:	b292      	uxth	r2, r2
 801a35e:	b215      	sxth	r5, r2
 801a360:	dd2f      	ble.n	801a3c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801a362:	9e00      	ldr	r6, [sp, #0]
 801a364:	fa1f fc8c 	uxth.w	ip, ip
 801a368:	b280      	uxth	r0, r0
 801a36a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801a36e:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801a372:	9e03      	ldr	r6, [sp, #12]
 801a374:	ebac 0300 	sub.w	r3, ip, r0
 801a378:	448c      	add	ip, r1
 801a37a:	eba6 060e 	sub.w	r6, r6, lr
 801a37e:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801a382:	b29b      	uxth	r3, r3
 801a384:	4470      	add	r0, lr
 801a386:	fa0f fc8c 	sxth.w	ip, ip
 801a38a:	b21c      	sxth	r4, r3
 801a38c:	b200      	sxth	r0, r0
 801a38e:	4366      	muls	r6, r4
 801a390:	ebac 0000 	sub.w	r0, ip, r0
 801a394:	4368      	muls	r0, r5
 801a396:	4286      	cmp	r6, r0
 801a398:	db09      	blt.n	801a3ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801a39a:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801a39e:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801a3a2:	4417      	add	r7, r2
 801a3a4:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a3a8:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801a3ac:	e685      	b.n	801a0ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a3ae:	440b      	add	r3, r1
 801a3b0:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801a3b4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801a3b8:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801a3bc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a3c0:	e67b      	b.n	801a0ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a3c2:	9e03      	ldr	r6, [sp, #12]
 801a3c4:	45b6      	cmp	lr, r6
 801a3c6:	da28      	bge.n	801a41a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801a3c8:	9b00      	ldr	r3, [sp, #0]
 801a3ca:	eba6 060e 	sub.w	r6, r6, lr
 801a3ce:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801a3d2:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801a3d6:	eb04 030c 	add.w	r3, r4, ip
 801a3da:	fa1f f883 	uxth.w	r8, r3
 801a3de:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801a3e2:	4403      	add	r3, r0
 801a3e4:	fa0f f988 	sxth.w	r9, r8
 801a3e8:	eba0 000c 	sub.w	r0, r0, ip
 801a3ec:	eba3 0308 	sub.w	r3, r3, r8
 801a3f0:	4368      	muls	r0, r5
 801a3f2:	b29b      	uxth	r3, r3
 801a3f4:	fa0f f883 	sxth.w	r8, r3
 801a3f8:	fb08 f606 	mul.w	r6, r8, r6
 801a3fc:	42b0      	cmp	r0, r6
 801a3fe:	dc06      	bgt.n	801a40e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801a400:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801a404:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801a408:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801a40c:	e7c9      	b.n	801a3a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801a40e:	4423      	add	r3, r4
 801a410:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801a414:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801a418:	e64f      	b.n	801a0ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a41a:	eba3 0309 	sub.w	r3, r3, r9
 801a41e:	9807      	ldr	r0, [sp, #28]
 801a420:	b29b      	uxth	r3, r3
 801a422:	2806      	cmp	r0, #6
 801a424:	fa0f fc83 	sxth.w	ip, r3
 801a428:	d818      	bhi.n	801a45c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801a42a:	4652      	mov	r2, sl
 801a42c:	ab0a      	add	r3, sp, #40	; 0x28
 801a42e:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801a432:	6851      	ldr	r1, [r2, #4]
 801a434:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801a438:	c303      	stmia	r3!, {r0, r1}
 801a43a:	9b03      	ldr	r3, [sp, #12]
 801a43c:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801a440:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801a444:	ab0a      	add	r3, sp, #40	; 0x28
 801a446:	9801      	ldr	r0, [sp, #4]
 801a448:	e893 0006 	ldmia.w	r3, {r1, r2}
 801a44c:	f7ff fe06 	bl	801a05c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a450:	9b00      	ldr	r3, [sp, #0]
 801a452:	f1aa 0a08 	sub.w	sl, sl, #8
 801a456:	3b01      	subs	r3, #1
 801a458:	9300      	str	r3, [sp, #0]
 801a45a:	e747      	b.n	801a2ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801a45c:	9800      	ldr	r0, [sp, #0]
 801a45e:	45ac      	cmp	ip, r5
 801a460:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801a464:	db0c      	blt.n	801a480 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801a466:	4417      	add	r7, r2
 801a468:	4458      	add	r0, fp
 801a46a:	f8ad 4020 	strh.w	r4, [sp, #32]
 801a46e:	b2bf      	uxth	r7, r7
 801a470:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801a474:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801a478:	440f      	add	r7, r1
 801a47a:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801a47e:	e61c      	b.n	801a0ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a480:	4458      	add	r0, fp
 801a482:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801a486:	443b      	add	r3, r7
 801a488:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801a48c:	e615      	b.n	801a0ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a48e:	fa1f f18c 	uxth.w	r1, ip
 801a492:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801a496:	b282      	uxth	r2, r0
 801a498:	4584      	cmp	ip, r0
 801a49a:	eb01 0e05 	add.w	lr, r1, r5
 801a49e:	9204      	str	r2, [sp, #16]
 801a4a0:	fa1f fe8e 	uxth.w	lr, lr
 801a4a4:	9e04      	ldr	r6, [sp, #16]
 801a4a6:	fa0f f28e 	sxth.w	r2, lr
 801a4aa:	9205      	str	r2, [sp, #20]
 801a4ac:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801a4b0:	4432      	add	r2, r6
 801a4b2:	b292      	uxth	r2, r2
 801a4b4:	9206      	str	r2, [sp, #24]
 801a4b6:	da26      	bge.n	801a506 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801a4b8:	eba3 0309 	sub.w	r3, r3, r9
 801a4bc:	eba2 020e 	sub.w	r2, r2, lr
 801a4c0:	eba0 000c 	sub.w	r0, r0, ip
 801a4c4:	eba4 0408 	sub.w	r4, r4, r8
 801a4c8:	b29b      	uxth	r3, r3
 801a4ca:	b292      	uxth	r2, r2
 801a4cc:	fa0f fa83 	sxth.w	sl, r3
 801a4d0:	b211      	sxth	r1, r2
 801a4d2:	fb0a f000 	mul.w	r0, sl, r0
 801a4d6:	434c      	muls	r4, r1
 801a4d8:	42a0      	cmp	r0, r4
 801a4da:	9800      	ldr	r0, [sp, #0]
 801a4dc:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801a4e0:	dc06      	bgt.n	801a4f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801a4e2:	4458      	add	r0, fp
 801a4e4:	9a05      	ldr	r2, [sp, #20]
 801a4e6:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801a4ea:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801a4ee:	e7ca      	b.n	801a486 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801a4f0:	eb0b 0300 	add.w	r3, fp, r0
 801a4f4:	9903      	ldr	r1, [sp, #12]
 801a4f6:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801a4fa:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801a4fe:	442a      	add	r2, r5
 801a500:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801a504:	e5d9      	b.n	801a0ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a506:	9e04      	ldr	r6, [sp, #16]
 801a508:	9a03      	ldr	r2, [sp, #12]
 801a50a:	1b89      	subs	r1, r1, r6
 801a50c:	b21e      	sxth	r6, r3
 801a50e:	b289      	uxth	r1, r1
 801a510:	4296      	cmp	r6, r2
 801a512:	fa0f fc81 	sxth.w	ip, r1
 801a516:	dd25      	ble.n	801a564 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801a518:	eba3 0309 	sub.w	r3, r3, r9
 801a51c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801a520:	9e05      	ldr	r6, [sp, #20]
 801a522:	eba4 0408 	sub.w	r4, r4, r8
 801a526:	b29b      	uxth	r3, r3
 801a528:	eba6 0902 	sub.w	r9, r6, r2
 801a52c:	fb0c f404 	mul.w	r4, ip, r4
 801a530:	b218      	sxth	r0, r3
 801a532:	9a00      	ldr	r2, [sp, #0]
 801a534:	fb00 f909 	mul.w	r9, r0, r9
 801a538:	00d2      	lsls	r2, r2, #3
 801a53a:	454c      	cmp	r4, r9
 801a53c:	db03      	blt.n	801a546 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 801a53e:	445a      	add	r2, fp
 801a540:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801a544:	e79f      	b.n	801a486 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801a546:	eb0b 0302 	add.w	r3, fp, r2
 801a54a:	9a03      	ldr	r2, [sp, #12]
 801a54c:	4429      	add	r1, r5
 801a54e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801a552:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801a556:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801a55a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801a55e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a562:	e5aa      	b.n	801a0ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a564:	9b06      	ldr	r3, [sp, #24]
 801a566:	9c07      	ldr	r4, [sp, #28]
 801a568:	eba3 020e 	sub.w	r2, r3, lr
 801a56c:	2c06      	cmp	r4, #6
 801a56e:	b292      	uxth	r2, r2
 801a570:	b213      	sxth	r3, r2
 801a572:	d80d      	bhi.n	801a590 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 801a574:	4651      	mov	r1, sl
 801a576:	aa0a      	add	r2, sp, #40	; 0x28
 801a578:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801a57c:	6849      	ldr	r1, [r1, #4]
 801a57e:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801a582:	9b05      	ldr	r3, [sp, #20]
 801a584:	c203      	stmia	r2!, {r0, r1}
 801a586:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801a58a:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801a58e:	e759      	b.n	801a444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801a590:	9c00      	ldr	r4, [sp, #0]
 801a592:	4563      	cmp	r3, ip
 801a594:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801a598:	db0d      	blt.n	801a5b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801a59a:	4429      	add	r1, r5
 801a59c:	9a04      	ldr	r2, [sp, #16]
 801a59e:	445c      	add	r4, fp
 801a5a0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801a5a4:	b289      	uxth	r1, r1
 801a5a6:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801a5aa:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801a5ae:	4411      	add	r1, r2
 801a5b0:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801a5b4:	e581      	b.n	801a0ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a5b6:	445c      	add	r4, fp
 801a5b8:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801a5bc:	e79f      	b.n	801a4fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801a5be:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801a5c2:	2f07      	cmp	r7, #7
 801a5c4:	d806      	bhi.n	801a5d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801a5c6:	ab08      	add	r3, sp, #32
 801a5c8:	9801      	ldr	r0, [sp, #4]
 801a5ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 801a5ce:	f7ff fd45 	bl	801a05c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a5d2:	e5dc      	b.n	801a18e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801a5d4:	f107 39ff 	add.w	r9, r7, #4294967295
 801a5d8:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801a5dc:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801a5e0:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801a5e4:	f04f 35ff 	mov.w	r5, #4294967295
 801a5e8:	2400      	movs	r4, #0
 801a5ea:	9304      	str	r3, [sp, #16]
 801a5ec:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801a5f0:	f109 32ff 	add.w	r2, r9, #4294967295
 801a5f4:	9300      	str	r3, [sp, #0]
 801a5f6:	4690      	mov	r8, r2
 801a5f8:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801a5fc:	9303      	str	r3, [sp, #12]
 801a5fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801a602:	f1b8 3fff 	cmp.w	r8, #4294967295
 801a606:	6818      	ldr	r0, [r3, #0]
 801a608:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801a60c:	9206      	str	r2, [sp, #24]
 801a60e:	bf16      	itet	ne
 801a610:	9904      	ldrne	r1, [sp, #16]
 801a612:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801a616:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801a61a:	9305      	str	r3, [sp, #20]
 801a61c:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801a620:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801a624:	fb16 f601 	smulbb	r6, r6, r1
 801a628:	6859      	ldr	r1, [r3, #4]
 801a62a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a62e:	4671      	mov	r1, lr
 801a630:	a80a      	add	r0, sp, #40	; 0x28
 801a632:	f7ff fc09 	bl	8019e48 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a636:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801a63a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801a63e:	9b03      	ldr	r3, [sp, #12]
 801a640:	9a00      	ldr	r2, [sp, #0]
 801a642:	fb11 f100 	smulbb	r1, r1, r0
 801a646:	2008      	movs	r0, #8
 801a648:	fb02 6603 	mla	r6, r2, r3, r6
 801a64c:	1b8e      	subs	r6, r1, r6
 801a64e:	fb91 f1f0 	sdiv	r1, r1, r0
 801a652:	42b1      	cmp	r1, r6
 801a654:	dc21      	bgt.n	801a69a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801a656:	4556      	cmp	r6, sl
 801a658:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801a65c:	da03      	bge.n	801a666 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801a65e:	b1e6      	cbz	r6, 801a69a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801a660:	46b2      	mov	sl, r6
 801a662:	4645      	mov	r5, r8
 801a664:	464c      	mov	r4, r9
 801a666:	f108 38ff 	add.w	r8, r8, #4294967295
 801a66a:	f118 0f02 	cmn.w	r8, #2
 801a66e:	d1c8      	bne.n	801a602 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 801a670:	f1b2 3fff 	cmp.w	r2, #4294967295
 801a674:	f1a7 0708 	sub.w	r7, r7, #8
 801a678:	4691      	mov	r9, r2
 801a67a:	d1b7      	bne.n	801a5ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 801a67c:	9b01      	ldr	r3, [sp, #4]
 801a67e:	b2a6      	uxth	r6, r4
 801a680:	00e4      	lsls	r4, r4, #3
 801a682:	1918      	adds	r0, r3, r4
 801a684:	1c6b      	adds	r3, r5, #1
 801a686:	d10b      	bne.n	801a6a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 801a688:	4601      	mov	r1, r0
 801a68a:	9802      	ldr	r0, [sp, #8]
 801a68c:	f7ff fbdc 	bl	8019e48 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a690:	4631      	mov	r1, r6
 801a692:	9801      	ldr	r0, [sp, #4]
 801a694:	f7ff fccc 	bl	801a030 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a698:	e50f      	b.n	801a0ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801a69a:	4645      	mov	r5, r8
 801a69c:	464c      	mov	r4, r9
 801a69e:	e7ed      	b.n	801a67c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 801a6a0:	9b01      	ldr	r3, [sp, #4]
 801a6a2:	00ed      	lsls	r5, r5, #3
 801a6a4:	445c      	add	r4, fp
 801a6a6:	1959      	adds	r1, r3, r5
 801a6a8:	445d      	add	r5, fp
 801a6aa:	f7ff fbcd 	bl	8019e48 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a6ae:	9b02      	ldr	r3, [sp, #8]
 801a6b0:	cb03      	ldmia	r3!, {r0, r1}
 801a6b2:	9b02      	ldr	r3, [sp, #8]
 801a6b4:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801a6b8:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801a6bc:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801a6c0:	6861      	ldr	r1, [r4, #4]
 801a6c2:	c303      	stmia	r3!, {r0, r1}
 801a6c4:	e7e4      	b.n	801a690 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0801a6c8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801a6c8:	4b1d      	ldr	r3, [pc, #116]	; (801a740 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801a6ca:	b530      	push	{r4, r5, lr}
 801a6cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a6d0:	b085      	sub	sp, #20
 801a6d2:	4b1c      	ldr	r3, [pc, #112]	; (801a744 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801a6d4:	460c      	mov	r4, r1
 801a6d6:	2100      	movs	r1, #0
 801a6d8:	4605      	mov	r5, r0
 801a6da:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a6de:	6820      	ldr	r0, [r4, #0]
 801a6e0:	9100      	str	r1, [sp, #0]
 801a6e2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a6e6:	ab02      	add	r3, sp, #8
 801a6e8:	6861      	ldr	r1, [r4, #4]
 801a6ea:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a6ee:	c303      	stmia	r3!, {r0, r1}
 801a6f0:	4669      	mov	r1, sp
 801a6f2:	a802      	add	r0, sp, #8
 801a6f4:	f7fc f9a8 	bl	8016a48 <_ZN8touchgfx4RectaNERKS0_>
 801a6f8:	ab02      	add	r3, sp, #8
 801a6fa:	cb03      	ldmia	r3!, {r0, r1}
 801a6fc:	4b12      	ldr	r3, [pc, #72]	; (801a748 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801a6fe:	6020      	str	r0, [r4, #0]
 801a700:	6818      	ldr	r0, [r3, #0]
 801a702:	6061      	str	r1, [r4, #4]
 801a704:	b138      	cbz	r0, 801a716 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801a706:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801a70a:	b133      	cbz	r3, 801a71a <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801a70c:	6821      	ldr	r1, [r4, #0]
 801a70e:	4628      	mov	r0, r5
 801a710:	6862      	ldr	r2, [r4, #4]
 801a712:	f7ff fcc5 	bl	801a0a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a716:	b005      	add	sp, #20
 801a718:	bd30      	pop	{r4, r5, pc}
 801a71a:	6803      	ldr	r3, [r0, #0]
 801a71c:	4621      	mov	r1, r4
 801a71e:	689b      	ldr	r3, [r3, #8]
 801a720:	4798      	blx	r3
 801a722:	4b0a      	ldr	r3, [pc, #40]	; (801a74c <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801a724:	6818      	ldr	r0, [r3, #0]
 801a726:	b118      	cbz	r0, 801a730 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801a728:	6803      	ldr	r3, [r0, #0]
 801a72a:	4621      	mov	r1, r4
 801a72c:	689b      	ldr	r3, [r3, #8]
 801a72e:	4798      	blx	r3
 801a730:	4b07      	ldr	r3, [pc, #28]	; (801a750 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801a732:	4621      	mov	r1, r4
 801a734:	6818      	ldr	r0, [r3, #0]
 801a736:	6803      	ldr	r3, [r0, #0]
 801a738:	695b      	ldr	r3, [r3, #20]
 801a73a:	4798      	blx	r3
 801a73c:	e7eb      	b.n	801a716 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801a73e:	bf00      	nop
 801a740:	200057d4 	.word	0x200057d4
 801a744:	200057d6 	.word	0x200057d6
 801a748:	2000581c 	.word	0x2000581c
 801a74c:	20005818 	.word	0x20005818
 801a750:	200057e0 	.word	0x200057e0

0801a754 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801a754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a758:	4604      	mov	r4, r0
 801a75a:	b09b      	sub	sp, #108	; 0x6c
 801a75c:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801a760:	b129      	cbz	r1, 801a76e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801a762:	2300      	movs	r3, #0
 801a764:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801a768:	b01b      	add	sp, #108	; 0x6c
 801a76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a76e:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801a772:	4630      	mov	r0, r6
 801a774:	f7fc f9ab 	bl	8016ace <_ZNK8touchgfx4Rect7isEmptyEv>
 801a778:	4605      	mov	r5, r0
 801a77a:	b940      	cbnz	r0, 801a78e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801a77c:	4620      	mov	r0, r4
 801a77e:	e896 0006 	ldmia.w	r6, {r1, r2}
 801a782:	f7ff fc8d 	bl	801a0a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a786:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801a78a:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801a78e:	4ba6      	ldr	r3, [pc, #664]	; (801aa28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 801a790:	681b      	ldr	r3, [r3, #0]
 801a792:	b33b      	cbz	r3, 801a7e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801a794:	4da5      	ldr	r5, [pc, #660]	; (801aa2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801a796:	4628      	mov	r0, r5
 801a798:	f7fc f999 	bl	8016ace <_ZNK8touchgfx4Rect7isEmptyEv>
 801a79c:	4606      	mov	r6, r0
 801a79e:	bb08      	cbnz	r0, 801a7e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801a7a0:	4628      	mov	r0, r5
 801a7a2:	f7ff f9b3 	bl	8019b0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a7a6:	6829      	ldr	r1, [r5, #0]
 801a7a8:	686a      	ldr	r2, [r5, #4]
 801a7aa:	4620      	mov	r0, r4
 801a7ac:	f7ff fc78 	bl	801a0a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a7b0:	802e      	strh	r6, [r5, #0]
 801a7b2:	806e      	strh	r6, [r5, #2]
 801a7b4:	80ae      	strh	r6, [r5, #4]
 801a7b6:	80ee      	strh	r6, [r5, #6]
 801a7b8:	4f9d      	ldr	r7, [pc, #628]	; (801aa30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801a7ba:	a809      	add	r0, sp, #36	; 0x24
 801a7bc:	f7ff fbe3 	bl	8019f86 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a7c0:	883d      	ldrh	r5, [r7, #0]
 801a7c2:	462e      	mov	r6, r5
 801a7c4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a7c8:	42b3      	cmp	r3, r6
 801a7ca:	d910      	bls.n	801a7ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801a7cc:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801a7d0:	3601      	adds	r6, #1
 801a7d2:	a809      	add	r0, sp, #36	; 0x24
 801a7d4:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801a7d8:	b2b6      	uxth	r6, r6
 801a7da:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801a7de:	f7ff fc3d 	bl	801a05c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a7e2:	e7ef      	b.n	801a7c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801a7e4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d1e5      	bne.n	801a7b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801a7ec:	e7bc      	b.n	801a768 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a7ee:	462e      	mov	r6, r5
 801a7f0:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801a7f4:	42b3      	cmp	r3, r6
 801a7f6:	d90b      	bls.n	801a810 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801a7f8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801a7fc:	3601      	adds	r6, #1
 801a7fe:	4620      	mov	r0, r4
 801a800:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801a804:	b2b6      	uxth	r6, r6
 801a806:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801a80a:	f7ff fc49 	bl	801a0a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a80e:	e7ef      	b.n	801a7f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801a810:	4a88      	ldr	r2, [pc, #544]	; (801aa34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801a812:	6813      	ldr	r3, [r2, #0]
 801a814:	4690      	mov	r8, r2
 801a816:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801a81a:	2b01      	cmp	r3, #1
 801a81c:	f040 8093 	bne.w	801a946 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f2>
 801a820:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801a824:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801a828:	f04f 0900 	mov.w	r9, #0
 801a82c:	33aa      	adds	r3, #170	; 0xaa
 801a82e:	42a8      	cmp	r0, r5
 801a830:	f103 0308 	add.w	r3, r3, #8
 801a834:	dd0a      	ble.n	801a84c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801a836:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801a83a:	3501      	adds	r5, #1
 801a83c:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801a840:	440a      	add	r2, r1
 801a842:	b212      	sxth	r2, r2
 801a844:	4591      	cmp	r9, r2
 801a846:	bfb8      	it	lt
 801a848:	4691      	movlt	r9, r2
 801a84a:	e7f0      	b.n	801a82e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801a84c:	4b7a      	ldr	r3, [pc, #488]	; (801aa38 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801a84e:	4e7b      	ldr	r6, [pc, #492]	; (801aa3c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801a850:	881d      	ldrh	r5, [r3, #0]
 801a852:	2300      	movs	r3, #0
 801a854:	2d0f      	cmp	r5, #15
 801a856:	bf8c      	ite	hi
 801a858:	08ed      	lsrhi	r5, r5, #3
 801a85a:	2501      	movls	r5, #1
 801a85c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801a860:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a864:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801a868:	f8d8 0000 	ldr.w	r0, [r8]
 801a86c:	440b      	add	r3, r1
 801a86e:	6802      	ldr	r2, [r0, #0]
 801a870:	b21b      	sxth	r3, r3
 801a872:	4599      	cmp	r9, r3
 801a874:	dd4a      	ble.n	801a90c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1b8>
 801a876:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801a87a:	4798      	blx	r3
 801a87c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a880:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801a884:	4413      	add	r3, r2
 801a886:	b21b      	sxth	r3, r3
 801a888:	195a      	adds	r2, r3, r5
 801a88a:	4290      	cmp	r0, r2
 801a88c:	da07      	bge.n	801a89e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801a88e:	4581      	cmp	r9, r0
 801a890:	dd05      	ble.n	801a89e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801a892:	4298      	cmp	r0, r3
 801a894:	da33      	bge.n	801a8fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801a896:	2b00      	cmp	r3, #0
 801a898:	dd31      	ble.n	801a8fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801a89a:	4648      	mov	r0, r9
 801a89c:	e004      	b.n	801a8a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801a89e:	4298      	cmp	r0, r3
 801a8a0:	dbfb      	blt.n	801a89a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801a8a2:	4548      	cmp	r0, r9
 801a8a4:	bfa8      	it	ge
 801a8a6:	4648      	movge	r0, r9
 801a8a8:	f9b6 2000 	ldrsh.w	r2, [r6]
 801a8ac:	2100      	movs	r1, #0
 801a8ae:	1ac0      	subs	r0, r0, r3
 801a8b0:	f8b7 a000 	ldrh.w	sl, [r7]
 801a8b4:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a8b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a8bc:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a8c0:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a8c4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a8c8:	4553      	cmp	r3, sl
 801a8ca:	d9c9      	bls.n	801a860 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801a8cc:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801a8d0:	ab07      	add	r3, sp, #28
 801a8d2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a8d6:	6851      	ldr	r1, [r2, #4]
 801a8d8:	c303      	stmia	r3!, {r0, r1}
 801a8da:	a807      	add	r0, sp, #28
 801a8dc:	a905      	add	r1, sp, #20
 801a8de:	f7fc f8b3 	bl	8016a48 <_ZN8touchgfx4RectaNERKS0_>
 801a8e2:	a807      	add	r0, sp, #28
 801a8e4:	f7fc f8f3 	bl	8016ace <_ZNK8touchgfx4Rect7isEmptyEv>
 801a8e8:	b920      	cbnz	r0, 801a8f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801a8ea:	6823      	ldr	r3, [r4, #0]
 801a8ec:	a907      	add	r1, sp, #28
 801a8ee:	4620      	mov	r0, r4
 801a8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a8f2:	4798      	blx	r3
 801a8f4:	f10a 0a01 	add.w	sl, sl, #1
 801a8f8:	fa1f fa8a 	uxth.w	sl, sl
 801a8fc:	e7e2      	b.n	801a8c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801a8fe:	f8d8 0000 	ldr.w	r0, [r8]
 801a902:	2101      	movs	r1, #1
 801a904:	6803      	ldr	r3, [r0, #0]
 801a906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a908:	4798      	blx	r3
 801a90a:	e7a9      	b.n	801a860 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801a90c:	69d3      	ldr	r3, [r2, #28]
 801a90e:	4798      	blx	r3
 801a910:	4b4b      	ldr	r3, [pc, #300]	; (801aa40 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801a912:	781b      	ldrb	r3, [r3, #0]
 801a914:	2b00      	cmp	r3, #0
 801a916:	f43f af27 	beq.w	801a768 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a91a:	2300      	movs	r3, #0
 801a91c:	883d      	ldrh	r5, [r7, #0]
 801a91e:	34ea      	adds	r4, #234	; 0xea
 801a920:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801a924:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801a928:	42ab      	cmp	r3, r5
 801a92a:	f67f af1d 	bls.w	801a768 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801a92e:	ab1a      	add	r3, sp, #104	; 0x68
 801a930:	4620      	mov	r0, r4
 801a932:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a936:	3501      	adds	r5, #1
 801a938:	3b44      	subs	r3, #68	; 0x44
 801a93a:	b2ad      	uxth	r5, r5
 801a93c:	e893 0006 	ldmia.w	r3, {r1, r2}
 801a940:	f7ff fb8c 	bl	801a05c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801a944:	e7ee      	b.n	801a924 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d0>
 801a946:	2b02      	cmp	r3, #2
 801a948:	f040 813d 	bne.w	801abc6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x472>
 801a94c:	4b3d      	ldr	r3, [pc, #244]	; (801aa44 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801a94e:	781b      	ldrb	r3, [r3, #0]
 801a950:	2b01      	cmp	r3, #1
 801a952:	d02c      	beq.n	801a9ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25a>
 801a954:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801a958:	883a      	ldrh	r2, [r7, #0]
 801a95a:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801a95e:	3201      	adds	r2, #1
 801a960:	b292      	uxth	r2, r2
 801a962:	2900      	cmp	r1, #0
 801a964:	d0d4      	beq.n	801a910 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801a966:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801a96a:	4610      	mov	r0, r2
 801a96c:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801a970:	f04f 0a00 	mov.w	sl, #0
 801a974:	441d      	add	r5, r3
 801a976:	b22d      	sxth	r5, r5
 801a978:	b283      	uxth	r3, r0
 801a97a:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801a97e:	4299      	cmp	r1, r3
 801a980:	f240 80c4 	bls.w	801ab0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801a984:	4426      	add	r6, r4
 801a986:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801a98a:	4684      	mov	ip, r0
 801a98c:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801a990:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801a994:	4573      	cmp	r3, lr
 801a996:	f340 80a6 	ble.w	801aae6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801a99a:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801a99e:	4475      	add	r5, lr
 801a9a0:	b22d      	sxth	r5, r5
 801a9a2:	429d      	cmp	r5, r3
 801a9a4:	bfa8      	it	ge
 801a9a6:	461d      	movge	r5, r3
 801a9a8:	3001      	adds	r0, #1
 801a9aa:	46e2      	mov	sl, ip
 801a9ac:	e7e4      	b.n	801a978 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x224>
 801a9ae:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801a9b2:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801a9b6:	f1bb 0f00 	cmp.w	fp, #0
 801a9ba:	d0a9      	beq.n	801a910 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801a9bc:	883b      	ldrh	r3, [r7, #0]
 801a9be:	2600      	movs	r6, #0
 801a9c0:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801a9c4:	3301      	adds	r3, #1
 801a9c6:	b29b      	uxth	r3, r3
 801a9c8:	b299      	uxth	r1, r3
 801a9ca:	00f5      	lsls	r5, r6, #3
 801a9cc:	458b      	cmp	fp, r1
 801a9ce:	d93b      	bls.n	801aa48 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801a9d0:	4425      	add	r5, r4
 801a9d2:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801a9d6:	469c      	mov	ip, r3
 801a9d8:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801a9dc:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801a9e0:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801a9e4:	4408      	add	r0, r1
 801a9e6:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801a9ea:	4471      	add	r1, lr
 801a9ec:	b200      	sxth	r0, r0
 801a9ee:	b209      	sxth	r1, r1
 801a9f0:	4288      	cmp	r0, r1
 801a9f2:	da06      	bge.n	801aa02 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ae>
 801a9f4:	4586      	cmp	lr, r0
 801a9f6:	4672      	mov	r2, lr
 801a9f8:	bfb8      	it	lt
 801a9fa:	4602      	movlt	r2, r0
 801a9fc:	3301      	adds	r3, #1
 801a9fe:	4666      	mov	r6, ip
 801aa00:	e7e2      	b.n	801a9c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x274>
 801aa02:	d10b      	bne.n	801aa1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2c8>
 801aa04:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801aa08:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801aa0c:	458c      	cmp	ip, r1
 801aa0e:	bfb4      	ite	lt
 801aa10:	469c      	movlt	ip, r3
 801aa12:	46b4      	movge	ip, r6
 801aa14:	4572      	cmp	r2, lr
 801aa16:	bfb8      	it	lt
 801aa18:	4672      	movlt	r2, lr
 801aa1a:	e7ef      	b.n	801a9fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801aa1c:	428a      	cmp	r2, r1
 801aa1e:	46b4      	mov	ip, r6
 801aa20:	bfb8      	it	lt
 801aa22:	460a      	movlt	r2, r1
 801aa24:	e7ea      	b.n	801a9fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801aa26:	bf00      	nop
 801aa28:	20005818 	.word	0x20005818
 801aa2c:	20005824 	.word	0x20005824
 801aa30:	20000174 	.word	0x20000174
 801aa34:	200057e0 	.word	0x200057e0
 801aa38:	200057d6 	.word	0x200057d6
 801aa3c:	200057d4 	.word	0x200057d4
 801aa40:	200057de 	.word	0x200057de
 801aa44:	200057d8 	.word	0x200057d8
 801aa48:	1961      	adds	r1, r4, r5
 801aa4a:	ab07      	add	r3, sp, #28
 801aa4c:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801aa50:	6849      	ldr	r1, [r1, #4]
 801aa52:	c303      	stmia	r3!, {r0, r1}
 801aa54:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801aa58:	a807      	add	r0, sp, #28
 801aa5a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801aa5e:	2b13      	cmp	r3, #19
 801aa60:	440b      	add	r3, r1
 801aa62:	bfd8      	it	le
 801aa64:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801aa68:	1a9b      	subs	r3, r3, r2
 801aa6a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801aa6e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801aa72:	f7ff f8a5 	bl	8019bc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801aa76:	a807      	add	r0, sp, #28
 801aa78:	f7fc f829 	bl	8016ace <_ZNK8touchgfx4Rect7isEmptyEv>
 801aa7c:	2800      	cmp	r0, #0
 801aa7e:	d198      	bne.n	801a9b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801aa80:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801aa84:	4425      	add	r5, r4
 801aa86:	f8d8 0000 	ldr.w	r0, [r8]
 801aa8a:	f1bc 0f14 	cmp.w	ip, #20
 801aa8e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801aa92:	f8d0 e000 	ldr.w	lr, [r0]
 801aa96:	bfa8      	it	ge
 801aa98:	f04f 0c14 	movge.w	ip, #20
 801aa9c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801aaa0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801aaa4:	fa1f fc8c 	uxth.w	ip, ip
 801aaa8:	f8cd c000 	str.w	ip, [sp]
 801aaac:	f8de a074 	ldr.w	sl, [lr, #116]	; 0x74
 801aab0:	47d0      	blx	sl
 801aab2:	4682      	mov	sl, r0
 801aab4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801aab8:	a807      	add	r0, sp, #28
 801aaba:	f7ff f827 	bl	8019b0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801aabe:	6823      	ldr	r3, [r4, #0]
 801aac0:	4620      	mov	r0, r4
 801aac2:	a907      	add	r1, sp, #28
 801aac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aac6:	4798      	blx	r3
 801aac8:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801aacc:	eba0 000a 	sub.w	r0, r0, sl
 801aad0:	b200      	sxth	r0, r0
 801aad2:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801aad6:	2800      	cmp	r0, #0
 801aad8:	f47f af6b 	bne.w	801a9b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801aadc:	b2b1      	uxth	r1, r6
 801aade:	4648      	mov	r0, r9
 801aae0:	f7ff faa6 	bl	801a030 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801aae4:	e765      	b.n	801a9b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25e>
 801aae6:	d10c      	bne.n	801ab02 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801aae8:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801aaec:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801aaf0:	45b4      	cmp	ip, r6
 801aaf2:	bfb4      	ite	lt
 801aaf4:	4684      	movlt	ip, r0
 801aaf6:	46d4      	movge	ip, sl
 801aaf8:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801aafc:	4433      	add	r3, r6
 801aafe:	b21b      	sxth	r3, r3
 801ab00:	e74f      	b.n	801a9a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x24e>
 801ab02:	4575      	cmp	r5, lr
 801ab04:	46d4      	mov	ip, sl
 801ab06:	bfa8      	it	ge
 801ab08:	4675      	movge	r5, lr
 801ab0a:	e74d      	b.n	801a9a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x254>
 801ab0c:	eb0b 0006 	add.w	r0, fp, r6
 801ab10:	4426      	add	r6, r4
 801ab12:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801ab16:	f1b9 0f13 	cmp.w	r9, #19
 801ab1a:	bfdc      	itt	le
 801ab1c:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801ab20:	444d      	addle	r5, r9
 801ab22:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801ab26:	bfd8      	it	le
 801ab28:	b22d      	sxthle	r5, r5
 801ab2a:	f7fb ffd0 	bl	8016ace <_ZNK8touchgfx4Rect7isEmptyEv>
 801ab2e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801ab32:	2800      	cmp	r0, #0
 801ab34:	f47f af15 	bne.w	801a962 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x20e>
 801ab38:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801ab3c:	fa1f f989 	uxth.w	r9, r9
 801ab40:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ab44:	eba5 050c 	sub.w	r5, r5, ip
 801ab48:	fa1f f28c 	uxth.w	r2, ip
 801ab4c:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801ab50:	eb02 0009 	add.w	r0, r2, r9
 801ab54:	2d14      	cmp	r5, #20
 801ab56:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801ab5a:	bfa8      	it	ge
 801ab5c:	2514      	movge	r5, #20
 801ab5e:	b200      	sxth	r0, r0
 801ab60:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ab64:	b289      	uxth	r1, r1
 801ab66:	fa1f fe85 	uxth.w	lr, r5
 801ab6a:	eba0 000c 	sub.w	r0, r0, ip
 801ab6e:	f8ad c01e 	strh.w	ip, [sp, #30]
 801ab72:	4586      	cmp	lr, r0
 801ab74:	f8d8 0000 	ldr.w	r0, [r8]
 801ab78:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ab7c:	b29b      	uxth	r3, r3
 801ab7e:	bfb8      	it	lt
 801ab80:	46f1      	movlt	r9, lr
 801ab82:	6805      	ldr	r5, [r0, #0]
 801ab84:	f8cd 9000 	str.w	r9, [sp]
 801ab88:	6f6d      	ldr	r5, [r5, #116]	; 0x74
 801ab8a:	47a8      	blx	r5
 801ab8c:	6823      	ldr	r3, [r4, #0]
 801ab8e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ab92:	a907      	add	r1, sp, #28
 801ab94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ab96:	4620      	mov	r0, r4
 801ab98:	4798      	blx	r3
 801ab9a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801ab9e:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801aba2:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801aba6:	1a5b      	subs	r3, r3, r1
 801aba8:	440a      	add	r2, r1
 801abaa:	b21b      	sxth	r3, r3
 801abac:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801abb0:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	f47f aecf 	bne.w	801a958 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 801abba:	fa1f f18a 	uxth.w	r1, sl
 801abbe:	4658      	mov	r0, fp
 801abc0:	f7ff fa36 	bl	801a030 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801abc4:	e6c8      	b.n	801a958 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x204>
 801abc6:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801abca:	42ab      	cmp	r3, r5
 801abcc:	f67f aea0 	bls.w	801a910 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1bc>
 801abd0:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801abd4:	ab07      	add	r3, sp, #28
 801abd6:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801abda:	6851      	ldr	r1, [r2, #4]
 801abdc:	c303      	stmia	r3!, {r0, r1}
 801abde:	a807      	add	r0, sp, #28
 801abe0:	f7fb ff75 	bl	8016ace <_ZNK8touchgfx4Rect7isEmptyEv>
 801abe4:	b920      	cbnz	r0, 801abf0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49c>
 801abe6:	6823      	ldr	r3, [r4, #0]
 801abe8:	a907      	add	r1, sp, #28
 801abea:	4620      	mov	r0, r4
 801abec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801abee:	4798      	blx	r3
 801abf0:	3501      	adds	r5, #1
 801abf2:	b2ad      	uxth	r5, r5
 801abf4:	e7e7      	b.n	801abc6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x472>
 801abf6:	bf00      	nop

0801abf8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801abf8:	4b03      	ldr	r3, [pc, #12]	; (801ac08 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801abfa:	2200      	movs	r2, #0
 801abfc:	801a      	strh	r2, [r3, #0]
 801abfe:	805a      	strh	r2, [r3, #2]
 801ac00:	809a      	strh	r2, [r3, #4]
 801ac02:	80da      	strh	r2, [r3, #6]
 801ac04:	4770      	bx	lr
 801ac06:	bf00      	nop
 801ac08:	20005824 	.word	0x20005824

0801ac0c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801ac0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac10:	b099      	sub	sp, #100	; 0x64
 801ac12:	4607      	mov	r7, r0
 801ac14:	4614      	mov	r4, r2
 801ac16:	461d      	mov	r5, r3
 801ac18:	a802      	add	r0, sp, #8
 801ac1a:	468a      	mov	sl, r1
 801ac1c:	f000 fea7 	bl	801b96e <_ZN8touchgfx12TextProviderC1Ev>
 801ac20:	683b      	ldr	r3, [r7, #0]
 801ac22:	4638      	mov	r0, r7
 801ac24:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801ac28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ac2a:	4798      	blx	r3
 801ac2c:	462a      	mov	r2, r5
 801ac2e:	2500      	movs	r5, #0
 801ac30:	4621      	mov	r1, r4
 801ac32:	4603      	mov	r3, r0
 801ac34:	a802      	add	r0, sp, #8
 801ac36:	462c      	mov	r4, r5
 801ac38:	46a9      	mov	r9, r5
 801ac3a:	46a8      	mov	r8, r5
 801ac3c:	f000 fedc 	bl	801b9f8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801ac40:	2300      	movs	r3, #0
 801ac42:	9301      	str	r3, [sp, #4]
 801ac44:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801ac48:	429c      	cmp	r4, r3
 801ac4a:	d002      	beq.n	801ac52 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801ac4c:	455c      	cmp	r4, fp
 801ac4e:	bf18      	it	ne
 801ac50:	4625      	movne	r5, r4
 801ac52:	ab01      	add	r3, sp, #4
 801ac54:	463a      	mov	r2, r7
 801ac56:	4651      	mov	r1, sl
 801ac58:	a802      	add	r0, sp, #8
 801ac5a:	f001 f9c7 	bl	801bfec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ac5e:	4604      	mov	r4, r0
 801ac60:	b108      	cbz	r0, 801ac66 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 801ac62:	280a      	cmp	r0, #10
 801ac64:	d10a      	bne.n	801ac7c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 801ac66:	45c1      	cmp	r9, r8
 801ac68:	bf38      	it	cc
 801ac6a:	46c1      	movcc	r9, r8
 801ac6c:	f04f 0800 	mov.w	r8, #0
 801ac70:	2c00      	cmp	r4, #0
 801ac72:	d1e5      	bne.n	801ac40 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801ac74:	4648      	mov	r0, r9
 801ac76:	b019      	add	sp, #100	; 0x64
 801ac78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac7c:	9a01      	ldr	r2, [sp, #4]
 801ac7e:	2a00      	cmp	r2, #0
 801ac80:	d0de      	beq.n	801ac40 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 801ac82:	7b56      	ldrb	r6, [r2, #13]
 801ac84:	4629      	mov	r1, r5
 801ac86:	683b      	ldr	r3, [r7, #0]
 801ac88:	0076      	lsls	r6, r6, #1
 801ac8a:	8894      	ldrh	r4, [r2, #4]
 801ac8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ac8e:	f406 7080 	and.w	r0, r6, #256	; 0x100
 801ac92:	7a96      	ldrb	r6, [r2, #10]
 801ac94:	4306      	orrs	r6, r0
 801ac96:	4638      	mov	r0, r7
 801ac98:	4798      	blx	r3
 801ac9a:	4430      	add	r0, r6
 801ac9c:	4480      	add	r8, r0
 801ac9e:	fa1f f888 	uxth.w	r8, r8
 801aca2:	e7e5      	b.n	801ac70 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

0801aca4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801aca4:	b508      	push	{r3, lr}
 801aca6:	6803      	ldr	r3, [r0, #0]
 801aca8:	68db      	ldr	r3, [r3, #12]
 801acaa:	4798      	blx	r3
 801acac:	b128      	cbz	r0, 801acba <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801acae:	7b43      	ldrb	r3, [r0, #13]
 801acb0:	7a80      	ldrb	r0, [r0, #10]
 801acb2:	005b      	lsls	r3, r3, #1
 801acb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801acb8:	4318      	orrs	r0, r3
 801acba:	bd08      	pop	{r3, pc}

0801acbc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801acbc:	b40e      	push	{r1, r2, r3}
 801acbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 801acc0:	b098      	sub	sp, #96	; 0x60
 801acc2:	4605      	mov	r5, r0
 801acc4:	ab1d      	add	r3, sp, #116	; 0x74
 801acc6:	a802      	add	r0, sp, #8
 801acc8:	ae18      	add	r6, sp, #96	; 0x60
 801acca:	f853 4b04 	ldr.w	r4, [r3], #4
 801acce:	9300      	str	r3, [sp, #0]
 801acd0:	f000 fe4d 	bl	801b96e <_ZN8touchgfx12TextProviderC1Ev>
 801acd4:	682b      	ldr	r3, [r5, #0]
 801acd6:	4628      	mov	r0, r5
 801acd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801acda:	4798      	blx	r3
 801acdc:	4621      	mov	r1, r4
 801acde:	2400      	movs	r4, #0
 801ace0:	4603      	mov	r3, r0
 801ace2:	9a00      	ldr	r2, [sp, #0]
 801ace4:	a802      	add	r0, sp, #8
 801ace6:	f000 fe87 	bl	801b9f8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801acea:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801acee:	462a      	mov	r2, r5
 801acf0:	4633      	mov	r3, r6
 801acf2:	4621      	mov	r1, r4
 801acf4:	a802      	add	r0, sp, #8
 801acf6:	f001 f979 	bl	801bfec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801acfa:	b300      	cbz	r0, 801ad3e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801acfc:	280a      	cmp	r0, #10
 801acfe:	d01a      	beq.n	801ad36 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 801ad00:	9f01      	ldr	r7, [sp, #4]
 801ad02:	b1c7      	cbz	r7, 801ad36 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 801ad04:	7b78      	ldrb	r0, [r7, #13]
 801ad06:	7a3b      	ldrb	r3, [r7, #8]
 801ad08:	00c1      	lsls	r1, r0, #3
 801ad0a:	88aa      	ldrh	r2, [r5, #4]
 801ad0c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ad10:	4319      	orrs	r1, r3
 801ad12:	0643      	lsls	r3, r0, #25
 801ad14:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801ad18:	bf48      	it	mi
 801ad1a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801ad1e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801ad22:	bf48      	it	mi
 801ad24:	b219      	sxthmi	r1, r3
 801ad26:	79fb      	ldrb	r3, [r7, #7]
 801ad28:	4303      	orrs	r3, r0
 801ad2a:	4413      	add	r3, r2
 801ad2c:	1a5b      	subs	r3, r3, r1
 801ad2e:	b29b      	uxth	r3, r3
 801ad30:	42a3      	cmp	r3, r4
 801ad32:	bfc8      	it	gt
 801ad34:	b21c      	sxthgt	r4, r3
 801ad36:	4633      	mov	r3, r6
 801ad38:	462a      	mov	r2, r5
 801ad3a:	2100      	movs	r1, #0
 801ad3c:	e7da      	b.n	801acf4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 801ad3e:	b2a0      	uxth	r0, r4
 801ad40:	b018      	add	sp, #96	; 0x60
 801ad42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ad46:	b003      	add	sp, #12
 801ad48:	4770      	bx	lr

0801ad4a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801ad4a:	b40e      	push	{r1, r2, r3}
 801ad4c:	b530      	push	{r4, r5, lr}
 801ad4e:	b098      	sub	sp, #96	; 0x60
 801ad50:	4604      	mov	r4, r0
 801ad52:	ab1b      	add	r3, sp, #108	; 0x6c
 801ad54:	a802      	add	r0, sp, #8
 801ad56:	f853 5b04 	ldr.w	r5, [r3], #4
 801ad5a:	9301      	str	r3, [sp, #4]
 801ad5c:	f000 fe07 	bl	801b96e <_ZN8touchgfx12TextProviderC1Ev>
 801ad60:	6823      	ldr	r3, [r4, #0]
 801ad62:	4620      	mov	r0, r4
 801ad64:	2401      	movs	r4, #1
 801ad66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ad68:	4798      	blx	r3
 801ad6a:	9a01      	ldr	r2, [sp, #4]
 801ad6c:	4603      	mov	r3, r0
 801ad6e:	4629      	mov	r1, r5
 801ad70:	a802      	add	r0, sp, #8
 801ad72:	f000 fe41 	bl	801b9f8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801ad76:	a802      	add	r0, sp, #8
 801ad78:	f001 fa30 	bl	801c1dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ad7c:	b2a3      	uxth	r3, r4
 801ad7e:	b138      	cbz	r0, 801ad90 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801ad80:	280a      	cmp	r0, #10
 801ad82:	a802      	add	r0, sp, #8
 801ad84:	bf04      	itt	eq
 801ad86:	3301      	addeq	r3, #1
 801ad88:	b21c      	sxtheq	r4, r3
 801ad8a:	f001 fa27 	bl	801c1dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ad8e:	e7f5      	b.n	801ad7c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801ad90:	4618      	mov	r0, r3
 801ad92:	b018      	add	sp, #96	; 0x60
 801ad94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ad98:	b003      	add	sp, #12
 801ad9a:	4770      	bx	lr

0801ad9c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801ad9c:	b40e      	push	{r1, r2, r3}
 801ad9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ada0:	b098      	sub	sp, #96	; 0x60
 801ada2:	4604      	mov	r4, r0
 801ada4:	26ff      	movs	r6, #255	; 0xff
 801ada6:	ab1d      	add	r3, sp, #116	; 0x74
 801ada8:	a802      	add	r0, sp, #8
 801adaa:	f853 5b04 	ldr.w	r5, [r3], #4
 801adae:	9300      	str	r3, [sp, #0]
 801adb0:	f000 fddd 	bl	801b96e <_ZN8touchgfx12TextProviderC1Ev>
 801adb4:	6823      	ldr	r3, [r4, #0]
 801adb6:	4620      	mov	r0, r4
 801adb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801adba:	4798      	blx	r3
 801adbc:	4629      	mov	r1, r5
 801adbe:	4603      	mov	r3, r0
 801adc0:	9a00      	ldr	r2, [sp, #0]
 801adc2:	a802      	add	r0, sp, #8
 801adc4:	ad18      	add	r5, sp, #96	; 0x60
 801adc6:	f000 fe17 	bl	801b9f8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801adca:	2100      	movs	r1, #0
 801adcc:	4622      	mov	r2, r4
 801adce:	a802      	add	r0, sp, #8
 801add0:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801add4:	462b      	mov	r3, r5
 801add6:	f001 f909 	bl	801bfec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801adda:	b1d8      	cbz	r0, 801ae14 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801addc:	280a      	cmp	r0, #10
 801adde:	d012      	beq.n	801ae06 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801ade0:	9801      	ldr	r0, [sp, #4]
 801ade2:	b180      	cbz	r0, 801ae06 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 801ade4:	7b47      	ldrb	r7, [r0, #13]
 801ade6:	7922      	ldrb	r2, [r4, #4]
 801ade8:	00fb      	lsls	r3, r7, #3
 801adea:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801adee:	7a03      	ldrb	r3, [r0, #8]
 801adf0:	430b      	orrs	r3, r1
 801adf2:	0679      	lsls	r1, r7, #25
 801adf4:	bf44      	itt	mi
 801adf6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801adfa:	b21b      	sxthmi	r3, r3
 801adfc:	1ad3      	subs	r3, r2, r3
 801adfe:	b2db      	uxtb	r3, r3
 801ae00:	429e      	cmp	r6, r3
 801ae02:	bf28      	it	cs
 801ae04:	461e      	movcs	r6, r3
 801ae06:	462b      	mov	r3, r5
 801ae08:	4622      	mov	r2, r4
 801ae0a:	2100      	movs	r1, #0
 801ae0c:	a802      	add	r0, sp, #8
 801ae0e:	f001 f8ed 	bl	801bfec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ae12:	e7e2      	b.n	801adda <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801ae14:	4630      	mov	r0, r6
 801ae16:	b018      	add	sp, #96	; 0x60
 801ae18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ae1c:	b003      	add	sp, #12
 801ae1e:	4770      	bx	lr

0801ae20 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801ae20:	b513      	push	{r0, r1, r4, lr}
 801ae22:	1d01      	adds	r1, r0, #4
 801ae24:	4603      	mov	r3, r0
 801ae26:	466a      	mov	r2, sp
 801ae28:	c903      	ldmia	r1, {r0, r1}
 801ae2a:	e882 0003 	stmia.w	r2, {r0, r1}
 801ae2e:	2100      	movs	r1, #0
 801ae30:	4618      	mov	r0, r3
 801ae32:	9100      	str	r1, [sp, #0]
 801ae34:	6819      	ldr	r1, [r3, #0]
 801ae36:	690c      	ldr	r4, [r1, #16]
 801ae38:	4611      	mov	r1, r2
 801ae3a:	47a0      	blx	r4
 801ae3c:	b002      	add	sp, #8
 801ae3e:	bd10      	pop	{r4, pc}

0801ae40 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801ae40:	b538      	push	{r3, r4, r5, lr}
 801ae42:	680b      	ldr	r3, [r1, #0]
 801ae44:	460c      	mov	r4, r1
 801ae46:	4605      	mov	r5, r0
 801ae48:	68db      	ldr	r3, [r3, #12]
 801ae4a:	4798      	blx	r3
 801ae4c:	6823      	ldr	r3, [r4, #0]
 801ae4e:	4620      	mov	r0, r4
 801ae50:	4629      	mov	r1, r5
 801ae52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae54:	4798      	blx	r3
 801ae56:	4628      	mov	r0, r5
 801ae58:	bd38      	pop	{r3, r4, r5, pc}

0801ae5a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801ae5a:	b410      	push	{r4}
 801ae5c:	880a      	ldrh	r2, [r1, #0]
 801ae5e:	8884      	ldrh	r4, [r0, #4]
 801ae60:	4422      	add	r2, r4
 801ae62:	800a      	strh	r2, [r1, #0]
 801ae64:	884a      	ldrh	r2, [r1, #2]
 801ae66:	88c4      	ldrh	r4, [r0, #6]
 801ae68:	4422      	add	r2, r4
 801ae6a:	804a      	strh	r2, [r1, #2]
 801ae6c:	6940      	ldr	r0, [r0, #20]
 801ae6e:	b120      	cbz	r0, 801ae7a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801ae70:	6803      	ldr	r3, [r0, #0]
 801ae72:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae78:	4718      	bx	r3
 801ae7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae7e:	4770      	bx	lr

0801ae80 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801ae80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae82:	460b      	mov	r3, r1
 801ae84:	b085      	sub	sp, #20
 801ae86:	4604      	mov	r4, r0
 801ae88:	b901      	cbnz	r1, 801ae8c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801ae8a:	b322      	cbz	r2, 801aed6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x56>
 801ae8c:	1d27      	adds	r7, r4, #4
 801ae8e:	466e      	mov	r6, sp
 801ae90:	88e5      	ldrh	r5, [r4, #6]
 801ae92:	e897 0003 	ldmia.w	r7, {r0, r1}
 801ae96:	442a      	add	r2, r5
 801ae98:	e886 0003 	stmia.w	r6, {r0, r1}
 801ae9c:	88a1      	ldrh	r1, [r4, #4]
 801ae9e:	4620      	mov	r0, r4
 801aea0:	b215      	sxth	r5, r2
 801aea2:	4419      	add	r1, r3
 801aea4:	6823      	ldr	r3, [r4, #0]
 801aea6:	b209      	sxth	r1, r1
 801aea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aeaa:	4798      	blx	r3
 801aeac:	6823      	ldr	r3, [r4, #0]
 801aeae:	4629      	mov	r1, r5
 801aeb0:	4620      	mov	r0, r4
 801aeb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aeb4:	ad02      	add	r5, sp, #8
 801aeb6:	4798      	blx	r3
 801aeb8:	e897 0003 	ldmia.w	r7, {r0, r1}
 801aebc:	e885 0003 	stmia.w	r5, {r0, r1}
 801aec0:	6960      	ldr	r0, [r4, #20]
 801aec2:	b150      	cbz	r0, 801aeda <_ZN8touchgfx8Drawable12moveRelativeEss+0x5a>
 801aec4:	6803      	ldr	r3, [r0, #0]
 801aec6:	4631      	mov	r1, r6
 801aec8:	691b      	ldr	r3, [r3, #16]
 801aeca:	4798      	blx	r3
 801aecc:	6960      	ldr	r0, [r4, #20]
 801aece:	6803      	ldr	r3, [r0, #0]
 801aed0:	691b      	ldr	r3, [r3, #16]
 801aed2:	4629      	mov	r1, r5
 801aed4:	4798      	blx	r3
 801aed6:	b005      	add	sp, #20
 801aed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aeda:	f7fe fffb 	bl	8019ed4 <_ZN8touchgfx11Application11getInstanceEv>
 801aede:	6803      	ldr	r3, [r0, #0]
 801aee0:	4631      	mov	r1, r6
 801aee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aee4:	4798      	blx	r3
 801aee6:	f7fe fff5 	bl	8019ed4 <_ZN8touchgfx11Application11getInstanceEv>
 801aeea:	6803      	ldr	r3, [r0, #0]
 801aeec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aeee:	e7f0      	b.n	801aed2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x52>

0801aef0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801aef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aef2:	8882      	ldrh	r2, [r0, #4]
 801aef4:	4605      	mov	r5, r0
 801aef6:	880b      	ldrh	r3, [r1, #0]
 801aef8:	460c      	mov	r4, r1
 801aefa:	4413      	add	r3, r2
 801aefc:	800b      	strh	r3, [r1, #0]
 801aefe:	884b      	ldrh	r3, [r1, #2]
 801af00:	88c2      	ldrh	r2, [r0, #6]
 801af02:	4413      	add	r3, r2
 801af04:	4602      	mov	r2, r0
 801af06:	804b      	strh	r3, [r1, #2]
 801af08:	466b      	mov	r3, sp
 801af0a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801af0e:	6851      	ldr	r1, [r2, #4]
 801af10:	c303      	stmia	r3!, {r0, r1}
 801af12:	4621      	mov	r1, r4
 801af14:	4668      	mov	r0, sp
 801af16:	f7fb fd97 	bl	8016a48 <_ZN8touchgfx4RectaNERKS0_>
 801af1a:	466b      	mov	r3, sp
 801af1c:	cb03      	ldmia	r3!, {r0, r1}
 801af1e:	6020      	str	r0, [r4, #0]
 801af20:	6061      	str	r1, [r4, #4]
 801af22:	6968      	ldr	r0, [r5, #20]
 801af24:	b128      	cbz	r0, 801af32 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801af26:	6803      	ldr	r3, [r0, #0]
 801af28:	691b      	ldr	r3, [r3, #16]
 801af2a:	4621      	mov	r1, r4
 801af2c:	4798      	blx	r3
 801af2e:	b003      	add	sp, #12
 801af30:	bd30      	pop	{r4, r5, pc}
 801af32:	f7fe ffcf 	bl	8019ed4 <_ZN8touchgfx11Application11getInstanceEv>
 801af36:	6803      	ldr	r3, [r0, #0]
 801af38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801af3a:	e7f6      	b.n	801af2a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801af3c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801af3c:	b570      	push	{r4, r5, r6, lr}
 801af3e:	8882      	ldrh	r2, [r0, #4]
 801af40:	460c      	mov	r4, r1
 801af42:	880b      	ldrh	r3, [r1, #0]
 801af44:	4605      	mov	r5, r0
 801af46:	4413      	add	r3, r2
 801af48:	800b      	strh	r3, [r1, #0]
 801af4a:	884b      	ldrh	r3, [r1, #2]
 801af4c:	88c2      	ldrh	r2, [r0, #6]
 801af4e:	4413      	add	r3, r2
 801af50:	804b      	strh	r3, [r1, #2]
 801af52:	1d01      	adds	r1, r0, #4
 801af54:	4620      	mov	r0, r4
 801af56:	f7fb fd77 	bl	8016a48 <_ZN8touchgfx4RectaNERKS0_>
 801af5a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801af5e:	2b00      	cmp	r3, #0
 801af60:	dd0b      	ble.n	801af7a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801af62:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801af66:	2b00      	cmp	r3, #0
 801af68:	dd07      	ble.n	801af7a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801af6a:	6968      	ldr	r0, [r5, #20]
 801af6c:	b128      	cbz	r0, 801af7a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801af6e:	6803      	ldr	r3, [r0, #0]
 801af70:	4621      	mov	r1, r4
 801af72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801af78:	4718      	bx	r3
 801af7a:	bd70      	pop	{r4, r5, r6, pc}

0801af7c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801af7c:	b510      	push	{r4, lr}
 801af7e:	2300      	movs	r3, #0
 801af80:	4604      	mov	r4, r0
 801af82:	4608      	mov	r0, r1
 801af84:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801af88:	8023      	strh	r3, [r4, #0]
 801af8a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801af8e:	8063      	strh	r3, [r4, #2]
 801af90:	6803      	ldr	r3, [r0, #0]
 801af92:	80a1      	strh	r1, [r4, #4]
 801af94:	4621      	mov	r1, r4
 801af96:	80e2      	strh	r2, [r4, #6]
 801af98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af9a:	4798      	blx	r3
 801af9c:	4620      	mov	r0, r4
 801af9e:	bd10      	pop	{r4, pc}

0801afa0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801afa0:	b530      	push	{r4, r5, lr}
 801afa2:	8083      	strh	r3, [r0, #4]
 801afa4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801afa8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801afac:	7183      	strb	r3, [r0, #6]
 801afae:	79c3      	ldrb	r3, [r0, #7]
 801afb0:	6101      	str	r1, [r0, #16]
 801afb2:	f365 0306 	bfi	r3, r5, #0, #7
 801afb6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801afba:	8282      	strh	r2, [r0, #20]
 801afbc:	f365 13c7 	bfi	r3, r5, #7, #1
 801afc0:	71c3      	strb	r3, [r0, #7]
 801afc2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801afc6:	7203      	strb	r3, [r0, #8]
 801afc8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801afcc:	7243      	strb	r3, [r0, #9]
 801afce:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801afd2:	8143      	strh	r3, [r0, #10]
 801afd4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801afd8:	8183      	strh	r3, [r0, #12]
 801afda:	4b01      	ldr	r3, [pc, #4]	; (801afe0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801afdc:	6003      	str	r3, [r0, #0]
 801afde:	bd30      	pop	{r4, r5, pc}
 801afe0:	0802c2c8 	.word	0x0802c2c8

0801afe4 <_ZNK8touchgfx9ConstFont4findEt>:
 801afe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801afe6:	6904      	ldr	r4, [r0, #16]
 801afe8:	b3bc      	cbz	r4, 801b05a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801afea:	88a3      	ldrh	r3, [r4, #4]
 801afec:	8a82      	ldrh	r2, [r0, #20]
 801afee:	1acb      	subs	r3, r1, r3
 801aff0:	f102 32ff 	add.w	r2, r2, #4294967295
 801aff4:	d431      	bmi.n	801b05a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801aff6:	4293      	cmp	r3, r2
 801aff8:	dd0c      	ble.n	801b014 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801affa:	230e      	movs	r3, #14
 801affc:	fb03 4302 	mla	r3, r3, r2, r4
 801b000:	889b      	ldrh	r3, [r3, #4]
 801b002:	1a5b      	subs	r3, r3, r1
 801b004:	1ad3      	subs	r3, r2, r3
 801b006:	429a      	cmp	r2, r3
 801b008:	db27      	blt.n	801b05a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	bfbc      	itt	lt
 801b00e:	2302      	movlt	r3, #2
 801b010:	fb92 f3f3 	sdivlt	r3, r2, r3
 801b014:	2500      	movs	r5, #0
 801b016:	260e      	movs	r6, #14
 801b018:	4295      	cmp	r5, r2
 801b01a:	dc1e      	bgt.n	801b05a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b01c:	fb06 4003 	mla	r0, r6, r3, r4
 801b020:	8887      	ldrh	r7, [r0, #4]
 801b022:	42b9      	cmp	r1, r7
 801b024:	d01a      	beq.n	801b05c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801b026:	d20d      	bcs.n	801b044 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801b028:	1e5a      	subs	r2, r3, #1
 801b02a:	4295      	cmp	r5, r2
 801b02c:	dc15      	bgt.n	801b05a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b02e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801b032:	1a5b      	subs	r3, r3, r1
 801b034:	1ad3      	subs	r3, r2, r3
 801b036:	429a      	cmp	r2, r3
 801b038:	db0f      	blt.n	801b05a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b03a:	429d      	cmp	r5, r3
 801b03c:	ddec      	ble.n	801b018 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b03e:	1953      	adds	r3, r2, r5
 801b040:	105b      	asrs	r3, r3, #1
 801b042:	e7e9      	b.n	801b018 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b044:	1c5d      	adds	r5, r3, #1
 801b046:	42aa      	cmp	r2, r5
 801b048:	db07      	blt.n	801b05a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b04a:	8a43      	ldrh	r3, [r0, #18]
 801b04c:	1acb      	subs	r3, r1, r3
 801b04e:	442b      	add	r3, r5
 801b050:	429d      	cmp	r5, r3
 801b052:	dc02      	bgt.n	801b05a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b054:	429a      	cmp	r2, r3
 801b056:	dadf      	bge.n	801b018 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b058:	e7f1      	b.n	801b03e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801b05a:	2000      	movs	r0, #0
 801b05c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b05e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b05e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b060:	4604      	mov	r4, r0
 801b062:	4617      	mov	r7, r2
 801b064:	461e      	mov	r6, r3
 801b066:	b911      	cbnz	r1, 801b06e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b068:	2500      	movs	r5, #0
 801b06a:	4628      	mov	r0, r5
 801b06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b06e:	290a      	cmp	r1, #10
 801b070:	d0fa      	beq.n	801b068 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b072:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b076:	4291      	cmp	r1, r2
 801b078:	d0f6      	beq.n	801b068 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b07a:	f242 020b 	movw	r2, #8203	; 0x200b
 801b07e:	4291      	cmp	r1, r2
 801b080:	d0f2      	beq.n	801b068 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b082:	f7ff ffaf 	bl	801afe4 <_ZNK8touchgfx9ConstFont4findEt>
 801b086:	4605      	mov	r5, r0
 801b088:	b950      	cbnz	r0, 801b0a0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801b08a:	6823      	ldr	r3, [r4, #0]
 801b08c:	4620      	mov	r0, r4
 801b08e:	691b      	ldr	r3, [r3, #16]
 801b090:	4798      	blx	r3
 801b092:	4601      	mov	r1, r0
 801b094:	4620      	mov	r0, r4
 801b096:	f7ff ffa5 	bl	801afe4 <_ZNK8touchgfx9ConstFont4findEt>
 801b09a:	4605      	mov	r5, r0
 801b09c:	2800      	cmp	r0, #0
 801b09e:	d0e3      	beq.n	801b068 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b0a0:	6823      	ldr	r3, [r4, #0]
 801b0a2:	4629      	mov	r1, r5
 801b0a4:	4620      	mov	r0, r4
 801b0a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b0a8:	4798      	blx	r3
 801b0aa:	6038      	str	r0, [r7, #0]
 801b0ac:	6823      	ldr	r3, [r4, #0]
 801b0ae:	4620      	mov	r0, r4
 801b0b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b0b2:	4798      	blx	r3
 801b0b4:	7030      	strb	r0, [r6, #0]
 801b0b6:	e7d8      	b.n	801b06a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801b0b8 <_ZN8touchgfx4clzuEm>:
 801b0b8:	4603      	mov	r3, r0
 801b0ba:	b1c8      	cbz	r0, 801b0f0 <_ZN8touchgfx4clzuEm+0x38>
 801b0bc:	0c02      	lsrs	r2, r0, #16
 801b0be:	0412      	lsls	r2, r2, #16
 801b0c0:	b9a2      	cbnz	r2, 801b0ec <_ZN8touchgfx4clzuEm+0x34>
 801b0c2:	0403      	lsls	r3, r0, #16
 801b0c4:	2010      	movs	r0, #16
 801b0c6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801b0ca:	bf04      	itt	eq
 801b0cc:	021b      	lsleq	r3, r3, #8
 801b0ce:	3008      	addeq	r0, #8
 801b0d0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801b0d4:	bf04      	itt	eq
 801b0d6:	011b      	lsleq	r3, r3, #4
 801b0d8:	3004      	addeq	r0, #4
 801b0da:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801b0de:	bf04      	itt	eq
 801b0e0:	009b      	lsleq	r3, r3, #2
 801b0e2:	3002      	addeq	r0, #2
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	db04      	blt.n	801b0f2 <_ZN8touchgfx4clzuEm+0x3a>
 801b0e8:	3001      	adds	r0, #1
 801b0ea:	4770      	bx	lr
 801b0ec:	2000      	movs	r0, #0
 801b0ee:	e7ea      	b.n	801b0c6 <_ZN8touchgfx4clzuEm+0xe>
 801b0f0:	2020      	movs	r0, #32
 801b0f2:	4770      	bx	lr

0801b0f4 <_ZN8touchgfx7muldivuEmmmRm>:
 801b0f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0f8:	4680      	mov	r8, r0
 801b0fa:	460f      	mov	r7, r1
 801b0fc:	4615      	mov	r5, r2
 801b0fe:	461e      	mov	r6, r3
 801b100:	f7ff ffda 	bl	801b0b8 <_ZN8touchgfx4clzuEm>
 801b104:	b998      	cbnz	r0, 801b12e <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801b106:	4608      	mov	r0, r1
 801b108:	f7ff ffd6 	bl	801b0b8 <_ZN8touchgfx4clzuEm>
 801b10c:	2800      	cmp	r0, #0
 801b10e:	dd08      	ble.n	801b122 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801b110:	4633      	mov	r3, r6
 801b112:	462a      	mov	r2, r5
 801b114:	4641      	mov	r1, r8
 801b116:	4638      	mov	r0, r7
 801b118:	f7ff ffec 	bl	801b0f4 <_ZN8touchgfx7muldivuEmmmRm>
 801b11c:	b003      	add	sp, #12
 801b11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b122:	f04f 33ff 	mov.w	r3, #4294967295
 801b126:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801b12a:	6033      	str	r3, [r6, #0]
 801b12c:	e7f6      	b.n	801b11c <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801b12e:	fa31 f900 	lsrs.w	r9, r1, r0
 801b132:	fb01 f308 	mul.w	r3, r1, r8
 801b136:	d105      	bne.n	801b144 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801b138:	fbb3 f0f5 	udiv	r0, r3, r5
 801b13c:	fb05 3510 	mls	r5, r5, r0, r3
 801b140:	6035      	str	r5, [r6, #0]
 801b142:	e7eb      	b.n	801b11c <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801b144:	2301      	movs	r3, #1
 801b146:	fa08 fb00 	lsl.w	fp, r8, r0
 801b14a:	462a      	mov	r2, r5
 801b14c:	4641      	mov	r1, r8
 801b14e:	fa03 f000 	lsl.w	r0, r3, r0
 801b152:	4633      	mov	r3, r6
 801b154:	fbbb faf5 	udiv	sl, fp, r5
 801b158:	3801      	subs	r0, #1
 801b15a:	fb09 f40a 	mul.w	r4, r9, sl
 801b15e:	4038      	ands	r0, r7
 801b160:	f7ff ffc8 	bl	801b0f4 <_ZN8touchgfx7muldivuEmmmRm>
 801b164:	462a      	mov	r2, r5
 801b166:	4607      	mov	r7, r0
 801b168:	ab01      	add	r3, sp, #4
 801b16a:	fb05 b11a 	mls	r1, r5, sl, fp
 801b16e:	4648      	mov	r0, r9
 801b170:	f7ff ffc0 	bl	801b0f4 <_ZN8touchgfx7muldivuEmmmRm>
 801b174:	9b01      	ldr	r3, [sp, #4]
 801b176:	6832      	ldr	r2, [r6, #0]
 801b178:	441a      	add	r2, r3
 801b17a:	fbb2 f3f5 	udiv	r3, r2, r5
 801b17e:	441c      	add	r4, r3
 801b180:	fb05 2513 	mls	r5, r5, r3, r2
 801b184:	443c      	add	r4, r7
 801b186:	4420      	add	r0, r4
 801b188:	e7da      	b.n	801b140 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801b18a <_ZN8touchgfx6muldivElllRl>:
 801b18a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b18c:	2800      	cmp	r0, #0
 801b18e:	461e      	mov	r6, r3
 801b190:	bfba      	itte	lt
 801b192:	4240      	neglt	r0, r0
 801b194:	f04f 34ff 	movlt.w	r4, #4294967295
 801b198:	2401      	movge	r4, #1
 801b19a:	2900      	cmp	r1, #0
 801b19c:	bfbc      	itt	lt
 801b19e:	4249      	neglt	r1, r1
 801b1a0:	4264      	neglt	r4, r4
 801b1a2:	2a00      	cmp	r2, #0
 801b1a4:	bfb6      	itet	lt
 801b1a6:	4265      	neglt	r5, r4
 801b1a8:	4625      	movge	r5, r4
 801b1aa:	4252      	neglt	r2, r2
 801b1ac:	4288      	cmp	r0, r1
 801b1ae:	bfc2      	ittt	gt
 801b1b0:	4603      	movgt	r3, r0
 801b1b2:	4608      	movgt	r0, r1
 801b1b4:	4619      	movgt	r1, r3
 801b1b6:	ab01      	add	r3, sp, #4
 801b1b8:	f7ff ff9c 	bl	801b0f4 <_ZN8touchgfx7muldivuEmmmRm>
 801b1bc:	9b01      	ldr	r3, [sp, #4]
 801b1be:	4368      	muls	r0, r5
 801b1c0:	435c      	muls	r4, r3
 801b1c2:	6034      	str	r4, [r6, #0]
 801b1c4:	b002      	add	sp, #8
 801b1c6:	bd70      	pop	{r4, r5, r6, pc}

0801b1c8 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801b1c8:	2000      	movs	r0, #0
 801b1ca:	4770      	bx	lr

0801b1cc <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801b1cc:	2001      	movs	r0, #1
 801b1ce:	4770      	bx	lr

0801b1d0 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801b1d0:	2002      	movs	r0, #2
 801b1d2:	4770      	bx	lr

0801b1d4 <_ZN8touchgfx12GestureEventD1Ev>:
 801b1d4:	4770      	bx	lr

0801b1d6 <_ZN8touchgfx9DragEventD1Ev>:
 801b1d6:	4770      	bx	lr

0801b1d8 <_ZN8touchgfx10ClickEventD1Ev>:
 801b1d8:	4770      	bx	lr

0801b1da <_ZN8touchgfx10ClickEventD0Ev>:
 801b1da:	b510      	push	{r4, lr}
 801b1dc:	4604      	mov	r4, r0
 801b1de:	210c      	movs	r1, #12
 801b1e0:	f00d fa2b 	bl	802863a <_ZdlPvj>
 801b1e4:	4620      	mov	r0, r4
 801b1e6:	bd10      	pop	{r4, pc}

0801b1e8 <_ZN8touchgfx9DragEventD0Ev>:
 801b1e8:	b510      	push	{r4, lr}
 801b1ea:	4604      	mov	r4, r0
 801b1ec:	2110      	movs	r1, #16
 801b1ee:	f00d fa24 	bl	802863a <_ZdlPvj>
 801b1f2:	4620      	mov	r0, r4
 801b1f4:	bd10      	pop	{r4, pc}

0801b1f6 <_ZN8touchgfx12GestureEventD0Ev>:
 801b1f6:	b510      	push	{r4, lr}
 801b1f8:	4604      	mov	r4, r0
 801b1fa:	210c      	movs	r1, #12
 801b1fc:	f00d fa1d 	bl	802863a <_ZdlPvj>
 801b200:	4620      	mov	r0, r4
 801b202:	bd10      	pop	{r4, pc}

0801b204 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b204:	b530      	push	{r4, r5, lr}
 801b206:	460d      	mov	r5, r1
 801b208:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b20a:	b087      	sub	sp, #28
 801b20c:	4604      	mov	r4, r0
 801b20e:	b301      	cbz	r1, 801b252 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b210:	a801      	add	r0, sp, #4
 801b212:	f7ff feb3 	bl	801af7c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b216:	892a      	ldrh	r2, [r5, #8]
 801b218:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b21c:	7928      	ldrb	r0, [r5, #4]
 801b21e:	1ad2      	subs	r2, r2, r3
 801b220:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b222:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b226:	441a      	add	r2, r3
 801b228:	896b      	ldrh	r3, [r5, #10]
 801b22a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801b22e:	f88d 0010 	strb.w	r0, [sp, #16]
 801b232:	1b5b      	subs	r3, r3, r5
 801b234:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801b236:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b238:	442b      	add	r3, r5
 801b23a:	4d07      	ldr	r5, [pc, #28]	; (801b258 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801b23c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b240:	a903      	add	r1, sp, #12
 801b242:	9503      	str	r5, [sp, #12]
 801b244:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b248:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b24c:	6803      	ldr	r3, [r0, #0]
 801b24e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b250:	4798      	blx	r3
 801b252:	b007      	add	sp, #28
 801b254:	bd30      	pop	{r4, r5, pc}
 801b256:	bf00      	nop
 801b258:	0802c344 	.word	0x0802c344

0801b25c <_ZNK8touchgfx4Rect9intersectEss>:
 801b25c:	b510      	push	{r4, lr}
 801b25e:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b262:	428b      	cmp	r3, r1
 801b264:	dc10      	bgt.n	801b288 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b266:	8884      	ldrh	r4, [r0, #4]
 801b268:	4423      	add	r3, r4
 801b26a:	b21b      	sxth	r3, r3
 801b26c:	4299      	cmp	r1, r3
 801b26e:	da0b      	bge.n	801b288 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b270:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b274:	4293      	cmp	r3, r2
 801b276:	dc07      	bgt.n	801b288 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b278:	88c0      	ldrh	r0, [r0, #6]
 801b27a:	4418      	add	r0, r3
 801b27c:	b200      	sxth	r0, r0
 801b27e:	4282      	cmp	r2, r0
 801b280:	bfac      	ite	ge
 801b282:	2000      	movge	r0, #0
 801b284:	2001      	movlt	r0, #1
 801b286:	bd10      	pop	{r4, pc}
 801b288:	2000      	movs	r0, #0
 801b28a:	e7fc      	b.n	801b286 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801b28c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801b28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b28e:	460c      	mov	r4, r1
 801b290:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b292:	b089      	sub	sp, #36	; 0x24
 801b294:	4605      	mov	r5, r0
 801b296:	2900      	cmp	r1, #0
 801b298:	d054      	beq.n	801b344 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801b29a:	4668      	mov	r0, sp
 801b29c:	f7ff fe6e 	bl	801af7c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b2a0:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801b2a2:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801b2a4:	4668      	mov	r0, sp
 801b2a6:	8922      	ldrh	r2, [r4, #8]
 801b2a8:	88e1      	ldrh	r1, [r4, #6]
 801b2aa:	443a      	add	r2, r7
 801b2ac:	4431      	add	r1, r6
 801b2ae:	b212      	sxth	r2, r2
 801b2b0:	b209      	sxth	r1, r1
 801b2b2:	f7ff ffd3 	bl	801b25c <_ZNK8touchgfx4Rect9intersectEss>
 801b2b6:	b1d0      	cbz	r0, 801b2ee <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801b2b8:	89a2      	ldrh	r2, [r4, #12]
 801b2ba:	4668      	mov	r0, sp
 801b2bc:	8961      	ldrh	r1, [r4, #10]
 801b2be:	443a      	add	r2, r7
 801b2c0:	4431      	add	r1, r6
 801b2c2:	b212      	sxth	r2, r2
 801b2c4:	b209      	sxth	r1, r1
 801b2c6:	f7ff ffc9 	bl	801b25c <_ZNK8touchgfx4Rect9intersectEss>
 801b2ca:	4603      	mov	r3, r0
 801b2cc:	b978      	cbnz	r0, 801b2ee <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801b2ce:	4a1e      	ldr	r2, [pc, #120]	; (801b348 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801b2d0:	a904      	add	r1, sp, #16
 801b2d2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b2d4:	9204      	str	r2, [sp, #16]
 801b2d6:	2202      	movs	r2, #2
 801b2d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b2dc:	f88d 2014 	strb.w	r2, [sp, #20]
 801b2e0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b2e4:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b2e8:	6803      	ldr	r3, [r0, #0]
 801b2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b2ec:	4798      	blx	r3
 801b2ee:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801b2f0:	a802      	add	r0, sp, #8
 801b2f2:	f7ff fe43 	bl	801af7c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b2f6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b2fa:	88e0      	ldrh	r0, [r4, #6]
 801b2fc:	8961      	ldrh	r1, [r4, #10]
 801b2fe:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801b302:	1a80      	subs	r0, r0, r2
 801b304:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801b308:	1a89      	subs	r1, r1, r2
 801b30a:	8923      	ldrh	r3, [r4, #8]
 801b30c:	4460      	add	r0, ip
 801b30e:	89a2      	ldrh	r2, [r4, #12]
 801b310:	4461      	add	r1, ip
 801b312:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801b314:	eba3 030e 	sub.w	r3, r3, lr
 801b318:	eba2 020e 	sub.w	r2, r2, lr
 801b31c:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b320:	7927      	ldrb	r7, [r4, #4]
 801b322:	4433      	add	r3, r6
 801b324:	4432      	add	r2, r6
 801b326:	4c09      	ldr	r4, [pc, #36]	; (801b34c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801b328:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b32a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b32e:	a904      	add	r1, sp, #16
 801b330:	9404      	str	r4, [sp, #16]
 801b332:	f88d 7014 	strb.w	r7, [sp, #20]
 801b336:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b33a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b33e:	6803      	ldr	r3, [r0, #0]
 801b340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b342:	4798      	blx	r3
 801b344:	b009      	add	sp, #36	; 0x24
 801b346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b348:	0802c31c 	.word	0x0802c31c
 801b34c:	0802c330 	.word	0x0802c330

0801b350 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b354:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801b358:	b0a1      	sub	sp, #132	; 0x84
 801b35a:	4604      	mov	r4, r0
 801b35c:	460d      	mov	r5, r1
 801b35e:	790b      	ldrb	r3, [r1, #4]
 801b360:	f1b9 0f00 	cmp.w	r9, #0
 801b364:	d00f      	beq.n	801b386 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801b366:	2b00      	cmp	r3, #0
 801b368:	f040 80a2 	bne.w	801b4b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801b36c:	b021      	add	sp, #132	; 0x84
 801b36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b372:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801b376:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801b37a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b37e:	1d20      	adds	r0, r4, #4
 801b380:	f7fb fab0 	bl	80168e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801b384:	e094      	b.n	801b4b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801b386:	2b00      	cmp	r3, #0
 801b388:	d1f0      	bne.n	801b36c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b38a:	4b5f      	ldr	r3, [pc, #380]	; (801b508 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801b38c:	681b      	ldr	r3, [r3, #0]
 801b38e:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801b392:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801b396:	f1ba 0f03 	cmp.w	sl, #3
 801b39a:	ddea      	ble.n	801b372 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801b39c:	f1ba 0f0c 	cmp.w	sl, #12
 801b3a0:	f04f 0303 	mov.w	r3, #3
 801b3a4:	f04f 0600 	mov.w	r6, #0
 801b3a8:	4958      	ldr	r1, [pc, #352]	; (801b50c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801b3aa:	bfd8      	it	le
 801b3ac:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801b3b0:	960a      	str	r6, [sp, #40]	; 0x28
 801b3b2:	bfd8      	it	le
 801b3b4:	fb92 f3f3 	sdivle	r3, r2, r3
 801b3b8:	9301      	str	r3, [sp, #4]
 801b3ba:	4b55      	ldr	r3, [pc, #340]	; (801b510 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801b3bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b3c0:	4b54      	ldr	r3, [pc, #336]	; (801b514 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801b3c2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801b3c6:	2248      	movs	r2, #72	; 0x48
 801b3c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b3cc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b3d0:	ab0e      	add	r3, sp, #56	; 0x38
 801b3d2:	4618      	mov	r0, r3
 801b3d4:	f00d fad8 	bl	8028988 <memcpy>
 801b3d8:	f04f 32ff 	mov.w	r2, #4294967295
 801b3dc:	f8cd a008 	str.w	sl, [sp, #8]
 801b3e0:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801b3e4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b3e8:	46b3      	mov	fp, r6
 801b3ea:	fb93 f3f2 	sdiv	r3, r3, r2
 801b3ee:	b29b      	uxth	r3, r3
 801b3f0:	9303      	str	r3, [sp, #12]
 801b3f2:	2300      	movs	r3, #0
 801b3f4:	9a03      	ldr	r2, [sp, #12]
 801b3f6:	88ef      	ldrh	r7, [r5, #6]
 801b3f8:	a80a      	add	r0, sp, #40	; 0x28
 801b3fa:	9309      	str	r3, [sp, #36]	; 0x24
 801b3fc:	9b07      	ldr	r3, [sp, #28]
 801b3fe:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801b402:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801b406:	fb13 f302 	smulbb	r3, r3, r2
 801b40a:	b29b      	uxth	r3, r3
 801b40c:	9304      	str	r3, [sp, #16]
 801b40e:	9b07      	ldr	r3, [sp, #28]
 801b410:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b414:	685b      	ldr	r3, [r3, #4]
 801b416:	fb13 f302 	smulbb	r3, r3, r2
 801b41a:	b29b      	uxth	r3, r3
 801b41c:	9305      	str	r3, [sp, #20]
 801b41e:	9b04      	ldr	r3, [sp, #16]
 801b420:	441f      	add	r7, r3
 801b422:	9b05      	ldr	r3, [sp, #20]
 801b424:	4498      	add	r8, r3
 801b426:	b23f      	sxth	r7, r7
 801b428:	fa0f f888 	sxth.w	r8, r8
 801b42c:	4639      	mov	r1, r7
 801b42e:	4642      	mov	r2, r8
 801b430:	f7ff ff14 	bl	801b25c <_ZNK8touchgfx4Rect9intersectEss>
 801b434:	b380      	cbz	r0, 801b498 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b436:	4639      	mov	r1, r7
 801b438:	ab09      	add	r3, sp, #36	; 0x24
 801b43a:	4642      	mov	r2, r8
 801b43c:	1d20      	adds	r0, r4, #4
 801b43e:	f7fb fa51 	bl	80168e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801b442:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b444:	b341      	cbz	r1, 801b498 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b446:	4549      	cmp	r1, r9
 801b448:	d026      	beq.n	801b498 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b44a:	a80c      	add	r0, sp, #48	; 0x30
 801b44c:	f7ff fd96 	bl	801af7c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b450:	2002      	movs	r0, #2
 801b452:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801b456:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801b45a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b45e:	fb92 f2f0 	sdiv	r2, r2, r0
 801b462:	440a      	add	r2, r1
 801b464:	1a99      	subs	r1, r3, r2
 801b466:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801b46a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801b46e:	fb93 f3f0 	sdiv	r3, r3, r0
 801b472:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801b476:	4403      	add	r3, r0
 801b478:	1ad3      	subs	r3, r2, r3
 801b47a:	9a06      	ldr	r2, [sp, #24]
 801b47c:	435b      	muls	r3, r3
 801b47e:	fb01 3301 	mla	r3, r1, r1, r3
 801b482:	4293      	cmp	r3, r2
 801b484:	d208      	bcs.n	801b498 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801b486:	9a04      	ldr	r2, [sp, #16]
 801b488:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b48c:	86a2      	strh	r2, [r4, #52]	; 0x34
 801b48e:	9a05      	ldr	r2, [sp, #20]
 801b490:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801b494:	86e2      	strh	r2, [r4, #54]	; 0x36
 801b496:	9306      	str	r3, [sp, #24]
 801b498:	f10b 0b02 	add.w	fp, fp, #2
 801b49c:	f1bb 0f08 	cmp.w	fp, #8
 801b4a0:	dda7      	ble.n	801b3f2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801b4a2:	9b02      	ldr	r3, [sp, #8]
 801b4a4:	3601      	adds	r6, #1
 801b4a6:	4453      	add	r3, sl
 801b4a8:	9302      	str	r3, [sp, #8]
 801b4aa:	9b01      	ldr	r3, [sp, #4]
 801b4ac:	42b3      	cmp	r3, r6
 801b4ae:	d199      	bne.n	801b3e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801b4b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b4b2:	2900      	cmp	r1, #0
 801b4b4:	f43f af5a 	beq.w	801b36c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b4b8:	a80c      	add	r0, sp, #48	; 0x30
 801b4ba:	2600      	movs	r6, #0
 801b4bc:	f7ff fd5e 	bl	801af7c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b4c0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801b4c4:	88ea      	ldrh	r2, [r5, #6]
 801b4c6:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801b4ca:	1ad2      	subs	r2, r2, r3
 801b4cc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b4ce:	7929      	ldrb	r1, [r5, #4]
 801b4d0:	441a      	add	r2, r3
 801b4d2:	892b      	ldrh	r3, [r5, #8]
 801b4d4:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801b4d8:	a90e      	add	r1, sp, #56	; 0x38
 801b4da:	1a1b      	subs	r3, r3, r0
 801b4dc:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801b4de:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801b4e2:	4403      	add	r3, r0
 801b4e4:	480c      	ldr	r0, [pc, #48]	; (801b518 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801b4e6:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801b4ea:	900e      	str	r0, [sp, #56]	; 0x38
 801b4ec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b4ee:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801b4f2:	6803      	ldr	r3, [r0, #0]
 801b4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b4f6:	4798      	blx	r3
 801b4f8:	792b      	ldrb	r3, [r5, #4]
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	f43f af36 	beq.w	801b36c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b500:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801b504:	e732      	b.n	801b36c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801b506:	bf00      	nop
 801b508:	200057e0 	.word	0x200057e0
 801b50c:	0802a3ac 	.word	0x0802a3ac
 801b510:	200057d4 	.word	0x200057d4
 801b514:	200057d6 	.word	0x200057d6
 801b518:	0802c31c 	.word	0x0802c31c

0801b51c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801b51c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b51e:	4604      	mov	r4, r0
 801b520:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801b524:	3201      	adds	r2, #1
 801b526:	d112      	bne.n	801b54e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801b528:	2500      	movs	r5, #0
 801b52a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b52e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b532:	6803      	ldr	r3, [r0, #0]
 801b534:	9500      	str	r5, [sp, #0]
 801b536:	466d      	mov	r5, sp
 801b538:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b53c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b540:	4629      	mov	r1, r5
 801b542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b544:	4798      	blx	r3
 801b546:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b54a:	e884 0003 	stmia.w	r4, {r0, r1}
 801b54e:	4620      	mov	r0, r4
 801b550:	b003      	add	sp, #12
 801b552:	bd30      	pop	{r4, r5, pc}

0801b554 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801b554:	b513      	push	{r0, r1, r4, lr}
 801b556:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801b55a:	4604      	mov	r4, r0
 801b55c:	3301      	adds	r3, #1
 801b55e:	d109      	bne.n	801b574 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801b560:	4601      	mov	r1, r0
 801b562:	4668      	mov	r0, sp
 801b564:	f7ff fd0a 	bl	801af7c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b568:	f8bd 3000 	ldrh.w	r3, [sp]
 801b56c:	8423      	strh	r3, [r4, #32]
 801b56e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b572:	8463      	strh	r3, [r4, #34]	; 0x22
 801b574:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801b578:	b002      	add	sp, #8
 801b57a:	bd10      	pop	{r4, pc}

0801b57c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801b57c:	b513      	push	{r0, r1, r4, lr}
 801b57e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801b582:	4604      	mov	r4, r0
 801b584:	3301      	adds	r3, #1
 801b586:	d109      	bne.n	801b59c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801b588:	4601      	mov	r1, r0
 801b58a:	4668      	mov	r0, sp
 801b58c:	f7ff fcf6 	bl	801af7c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b590:	f8bd 3000 	ldrh.w	r3, [sp]
 801b594:	8423      	strh	r3, [r4, #32]
 801b596:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b59a:	8463      	strh	r3, [r4, #34]	; 0x22
 801b59c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801b5a0:	b002      	add	sp, #8
 801b5a2:	bd10      	pop	{r4, pc}

0801b5a4 <_ZN8touchgfx6ScreenC1Ev>:
 801b5a4:	b570      	push	{r4, r5, r6, lr}
 801b5a6:	4b16      	ldr	r3, [pc, #88]	; (801b600 <_ZN8touchgfx6ScreenC1Ev+0x5c>)
 801b5a8:	4605      	mov	r5, r0
 801b5aa:	4a16      	ldr	r2, [pc, #88]	; (801b604 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801b5ac:	2101      	movs	r1, #1
 801b5ae:	f845 3b04 	str.w	r3, [r5], #4
 801b5b2:	2300      	movs	r3, #0
 801b5b4:	6042      	str	r2, [r0, #4]
 801b5b6:	4604      	mov	r4, r0
 801b5b8:	8103      	strh	r3, [r0, #8]
 801b5ba:	8143      	strh	r3, [r0, #10]
 801b5bc:	8183      	strh	r3, [r0, #12]
 801b5be:	81c3      	strh	r3, [r0, #14]
 801b5c0:	8203      	strh	r3, [r0, #16]
 801b5c2:	8243      	strh	r3, [r0, #18]
 801b5c4:	8283      	strh	r3, [r0, #20]
 801b5c6:	82c3      	strh	r3, [r0, #22]
 801b5c8:	6203      	str	r3, [r0, #32]
 801b5ca:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801b5ce:	6343      	str	r3, [r0, #52]	; 0x34
 801b5d0:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801b5d4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801b5d8:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801b5dc:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801b5e0:	4b09      	ldr	r3, [pc, #36]	; (801b608 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801b5e2:	4628      	mov	r0, r5
 801b5e4:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b5e8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801b5ea:	4a08      	ldr	r2, [pc, #32]	; (801b60c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801b5ec:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b5f0:	4798      	blx	r3
 801b5f2:	6863      	ldr	r3, [r4, #4]
 801b5f4:	4628      	mov	r0, r5
 801b5f6:	4631      	mov	r1, r6
 801b5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b5fa:	4798      	blx	r3
 801b5fc:	4620      	mov	r0, r4
 801b5fe:	bd70      	pop	{r4, r5, r6, pc}
 801b600:	0802c358 	.word	0x0802c358
 801b604:	0802b3e4 	.word	0x0802b3e4
 801b608:	200057d6 	.word	0x200057d6
 801b60c:	200057d4 	.word	0x200057d4

0801b610 <_ZN8touchgfx6Screen4drawEv>:
 801b610:	4b09      	ldr	r3, [pc, #36]	; (801b638 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801b612:	b507      	push	{r0, r1, r2, lr}
 801b614:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b618:	2100      	movs	r1, #0
 801b61a:	4b08      	ldr	r3, [pc, #32]	; (801b63c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801b61c:	9100      	str	r1, [sp, #0]
 801b61e:	4669      	mov	r1, sp
 801b620:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b624:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b628:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b62c:	6803      	ldr	r3, [r0, #0]
 801b62e:	689b      	ldr	r3, [r3, #8]
 801b630:	4798      	blx	r3
 801b632:	b003      	add	sp, #12
 801b634:	f85d fb04 	ldr.w	pc, [sp], #4
 801b638:	200057d4 	.word	0x200057d4
 801b63c:	200057d6 	.word	0x200057d6

0801b640 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801b640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b644:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b648:	b089      	sub	sp, #36	; 0x24
 801b64a:	4680      	mov	r8, r0
 801b64c:	460c      	mov	r4, r1
 801b64e:	2b00      	cmp	r3, #0
 801b650:	4615      	mov	r5, r2
 801b652:	dd0e      	ble.n	801b672 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b654:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b658:	2b00      	cmp	r3, #0
 801b65a:	dd0a      	ble.n	801b672 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b65c:	4628      	mov	r0, r5
 801b65e:	f7ff ff5d 	bl	801b51c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b662:	4621      	mov	r1, r4
 801b664:	f7fe fbac 	bl	8019dc0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b668:	69eb      	ldr	r3, [r5, #28]
 801b66a:	b928      	cbnz	r0, 801b678 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801b66c:	461d      	mov	r5, r3
 801b66e:	2b00      	cmp	r3, #0
 801b670:	d1f4      	bne.n	801b65c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801b672:	b009      	add	sp, #36	; 0x24
 801b674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b678:	ae04      	add	r6, sp, #16
 801b67a:	2b00      	cmp	r3, #0
 801b67c:	f000 80b5 	beq.w	801b7ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b680:	682b      	ldr	r3, [r5, #0]
 801b682:	4629      	mov	r1, r5
 801b684:	a802      	add	r0, sp, #8
 801b686:	68db      	ldr	r3, [r3, #12]
 801b688:	4798      	blx	r3
 801b68a:	4628      	mov	r0, r5
 801b68c:	f7ff ff62 	bl	801b554 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b690:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801b694:	4407      	add	r7, r0
 801b696:	4628      	mov	r0, r5
 801b698:	f7ff ff70 	bl	801b57c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b69c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b6a0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801b6a4:	b23f      	sxth	r7, r7
 801b6a6:	4418      	add	r0, r3
 801b6a8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b6ac:	4621      	mov	r1, r4
 801b6ae:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b6b2:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b6b6:	4630      	mov	r0, r6
 801b6b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b6bc:	f8ad 7010 	strh.w	r7, [sp, #16]
 801b6c0:	f7fb f9c2 	bl	8016a48 <_ZN8touchgfx4RectaNERKS0_>
 801b6c4:	4628      	mov	r0, r5
 801b6c6:	f7ff ff29 	bl	801b51c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b6ca:	ab06      	add	r3, sp, #24
 801b6cc:	4602      	mov	r2, r0
 801b6ce:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b6d2:	e883 0003 	stmia.w	r3, {r0, r1}
 801b6d6:	4611      	mov	r1, r2
 801b6d8:	4618      	mov	r0, r3
 801b6da:	f7fb f9b5 	bl	8016a48 <_ZN8touchgfx4RectaNERKS0_>
 801b6de:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b6e2:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b6e6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801b6ea:	4299      	cmp	r1, r3
 801b6ec:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801b6f0:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801b6f4:	d10b      	bne.n	801b70e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b6f6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b6fa:	4552      	cmp	r2, sl
 801b6fc:	d107      	bne.n	801b70e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b6fe:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b702:	455a      	cmp	r2, fp
 801b704:	d103      	bne.n	801b70e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b706:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b70a:	454a      	cmp	r2, r9
 801b70c:	d06d      	beq.n	801b7ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b70e:	f1bb 0f00 	cmp.w	fp, #0
 801b712:	dd65      	ble.n	801b7e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b714:	f1b9 0f00 	cmp.w	r9, #0
 801b718:	dd62      	ble.n	801b7e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b71a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b71e:	fa1f f08a 	uxth.w	r0, sl
 801b722:	4552      	cmp	r2, sl
 801b724:	9000      	str	r0, [sp, #0]
 801b726:	da12      	bge.n	801b74e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801b728:	9301      	str	r3, [sp, #4]
 801b72a:	9b00      	ldr	r3, [sp, #0]
 801b72c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b730:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b734:	1a9a      	subs	r2, r3, r2
 801b736:	f8ad 1010 	strh.w	r1, [sp, #16]
 801b73a:	4631      	mov	r1, r6
 801b73c:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b740:	4640      	mov	r0, r8
 801b742:	f8ad 2016 	strh.w	r2, [sp, #22]
 801b746:	69ea      	ldr	r2, [r5, #28]
 801b748:	f7ff ff7a 	bl	801b640 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b74c:	9b01      	ldr	r3, [sp, #4]
 801b74e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b752:	b29f      	uxth	r7, r3
 801b754:	429a      	cmp	r2, r3
 801b756:	da0d      	bge.n	801b774 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801b758:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b75c:	1aba      	subs	r2, r7, r2
 801b75e:	f8ad a012 	strh.w	sl, [sp, #18]
 801b762:	4631      	mov	r1, r6
 801b764:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b768:	4640      	mov	r0, r8
 801b76a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b76e:	69ea      	ldr	r2, [r5, #28]
 801b770:	f7ff ff66 	bl	801b640 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b774:	8822      	ldrh	r2, [r4, #0]
 801b776:	445f      	add	r7, fp
 801b778:	88a3      	ldrh	r3, [r4, #4]
 801b77a:	b2bf      	uxth	r7, r7
 801b77c:	4413      	add	r3, r2
 801b77e:	b23a      	sxth	r2, r7
 801b780:	b29b      	uxth	r3, r3
 801b782:	b219      	sxth	r1, r3
 801b784:	4291      	cmp	r1, r2
 801b786:	dd0d      	ble.n	801b7a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801b788:	1bdb      	subs	r3, r3, r7
 801b78a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b78e:	f8ad a012 	strh.w	sl, [sp, #18]
 801b792:	4631      	mov	r1, r6
 801b794:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b798:	4640      	mov	r0, r8
 801b79a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b79e:	69ea      	ldr	r2, [r5, #28]
 801b7a0:	f7ff ff4e 	bl	801b640 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b7a4:	88e2      	ldrh	r2, [r4, #6]
 801b7a6:	8863      	ldrh	r3, [r4, #2]
 801b7a8:	4413      	add	r3, r2
 801b7aa:	9a00      	ldr	r2, [sp, #0]
 801b7ac:	444a      	add	r2, r9
 801b7ae:	b29b      	uxth	r3, r3
 801b7b0:	fa1f f982 	uxth.w	r9, r2
 801b7b4:	b219      	sxth	r1, r3
 801b7b6:	fa0f f289 	sxth.w	r2, r9
 801b7ba:	428a      	cmp	r2, r1
 801b7bc:	da15      	bge.n	801b7ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b7be:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b7c2:	eba3 0309 	sub.w	r3, r3, r9
 801b7c6:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b7ca:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b7ce:	4631      	mov	r1, r6
 801b7d0:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b7d4:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b7d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b7dc:	69ea      	ldr	r2, [r5, #28]
 801b7de:	e001      	b.n	801b7e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801b7e0:	69ea      	ldr	r2, [r5, #28]
 801b7e2:	4621      	mov	r1, r4
 801b7e4:	4640      	mov	r0, r8
 801b7e6:	f7ff ff2b 	bl	801b640 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b7ea:	4628      	mov	r0, r5
 801b7ec:	f7ff fe96 	bl	801b51c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b7f0:	6861      	ldr	r1, [r4, #4]
 801b7f2:	4602      	mov	r2, r0
 801b7f4:	4633      	mov	r3, r6
 801b7f6:	6820      	ldr	r0, [r4, #0]
 801b7f8:	c303      	stmia	r3!, {r0, r1}
 801b7fa:	4611      	mov	r1, r2
 801b7fc:	4630      	mov	r0, r6
 801b7fe:	f7fb f923 	bl	8016a48 <_ZN8touchgfx4RectaNERKS0_>
 801b802:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801b806:	2b00      	cmp	r3, #0
 801b808:	f77f af33 	ble.w	801b672 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b80c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b810:	2b00      	cmp	r3, #0
 801b812:	f77f af2e 	ble.w	801b672 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b816:	4628      	mov	r0, r5
 801b818:	f7ff fe9c 	bl	801b554 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b81c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b820:	1a18      	subs	r0, r3, r0
 801b822:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b826:	4628      	mov	r0, r5
 801b828:	f7ff fea8 	bl	801b57c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b82c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b830:	4631      	mov	r1, r6
 801b832:	1a18      	subs	r0, r3, r0
 801b834:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b838:	4628      	mov	r0, r5
 801b83a:	682b      	ldr	r3, [r5, #0]
 801b83c:	689b      	ldr	r3, [r3, #8]
 801b83e:	4798      	blx	r3
 801b840:	e717      	b.n	801b672 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801b842 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801b842:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b844:	2300      	movs	r3, #0
 801b846:	aa02      	add	r2, sp, #8
 801b848:	4604      	mov	r4, r0
 801b84a:	3004      	adds	r0, #4
 801b84c:	f842 3d04 	str.w	r3, [r2, #-4]!
 801b850:	460d      	mov	r5, r1
 801b852:	f7fb f9d1 	bl	8016bf8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801b856:	9a01      	ldr	r2, [sp, #4]
 801b858:	b11a      	cbz	r2, 801b862 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801b85a:	4629      	mov	r1, r5
 801b85c:	4620      	mov	r0, r4
 801b85e:	f7ff feef 	bl	801b640 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b862:	b003      	add	sp, #12
 801b864:	bd30      	pop	{r4, r5, pc}

0801b866 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801b866:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b868:	4602      	mov	r2, r0
 801b86a:	4604      	mov	r4, r0
 801b86c:	460d      	mov	r5, r1
 801b86e:	466b      	mov	r3, sp
 801b870:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801b874:	6851      	ldr	r1, [r2, #4]
 801b876:	c303      	stmia	r3!, {r0, r1}
 801b878:	4629      	mov	r1, r5
 801b87a:	4668      	mov	r0, sp
 801b87c:	f7fb f8e4 	bl	8016a48 <_ZN8touchgfx4RectaNERKS0_>
 801b880:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b884:	4669      	mov	r1, sp
 801b886:	b123      	cbz	r3, 801b892 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801b888:	4620      	mov	r0, r4
 801b88a:	f7ff ffda 	bl	801b842 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801b88e:	b003      	add	sp, #12
 801b890:	bd30      	pop	{r4, r5, pc}
 801b892:	1d20      	adds	r0, r4, #4
 801b894:	f7fb f977 	bl	8016b86 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801b898:	e7f9      	b.n	801b88e <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801b89a <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801b89a:	460b      	mov	r3, r1
 801b89c:	680a      	ldr	r2, [r1, #0]
 801b89e:	1d01      	adds	r1, r0, #4
 801b8a0:	6992      	ldr	r2, [r2, #24]
 801b8a2:	4618      	mov	r0, r3
 801b8a4:	4710      	bx	r2

0801b8a6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801b8a6:	b510      	push	{r4, lr}
 801b8a8:	4298      	cmp	r0, r3
 801b8aa:	eb01 0402 	add.w	r4, r1, r2
 801b8ae:	b224      	sxth	r4, r4
 801b8b0:	d22c      	bcs.n	801b90c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801b8b2:	b35b      	cbz	r3, 801b90c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x66>
 801b8b4:	ee07 0a90 	vmov	s15, r0
 801b8b8:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801b8bc:	ee07 3a90 	vmov	s15, r3
 801b8c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801b8c4:	ee07 2a90 	vmov	s15, r2
 801b8c8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801b8cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b8d0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801b8d4:	ee07 1a90 	vmov	s15, r1
 801b8d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b8dc:	ee37 7a66 	vsub.f32	s14, s14, s13
 801b8e0:	ee67 5a07 	vmul.f32	s11, s14, s14
 801b8e4:	eee5 6a87 	vfma.f32	s13, s11, s14
 801b8e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801b8ec:	eee6 7a26 	vfma.f32	s15, s12, s13
 801b8f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8f8:	bfcc      	ite	gt
 801b8fa:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801b8fe:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801b902:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b906:	ee17 3a90 	vmov	r3, s15
 801b90a:	b21c      	sxth	r4, r3
 801b90c:	4620      	mov	r0, r4
 801b90e:	bd10      	pop	{r4, pc}

0801b910 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801b910:	b510      	push	{r4, lr}
 801b912:	4298      	cmp	r0, r3
 801b914:	eb01 0402 	add.w	r4, r1, r2
 801b918:	b224      	sxth	r4, r4
 801b91a:	d226      	bcs.n	801b96a <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x5a>
 801b91c:	b32b      	cbz	r3, 801b96a <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x5a>
 801b91e:	ee07 2a90 	vmov	s15, r2
 801b922:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b926:	ee07 0a90 	vmov	s15, r0
 801b92a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801b92e:	ee07 3a90 	vmov	s15, r3
 801b932:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801b936:	ee07 1a90 	vmov	s15, r1
 801b93a:	ee67 6a26 	vmul.f32	s13, s14, s13
 801b93e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b942:	ee86 7a86 	vdiv.f32	s14, s13, s12
 801b946:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b94a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801b94e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b956:	bfcc      	ite	gt
 801b958:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801b95c:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801b960:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b964:	ee17 3a90 	vmov	r3, s15
 801b968:	b21c      	sxth	r4, r3
 801b96a:	4620      	mov	r0, r4
 801b96c:	bd10      	pop	{r4, pc}

0801b96e <_ZN8touchgfx12TextProviderC1Ev>:
 801b96e:	2300      	movs	r3, #0
 801b970:	2201      	movs	r2, #1
 801b972:	b510      	push	{r4, lr}
 801b974:	4604      	mov	r4, r0
 801b976:	60c3      	str	r3, [r0, #12]
 801b978:	7403      	strb	r3, [r0, #16]
 801b97a:	82c3      	strh	r3, [r0, #22]
 801b97c:	8303      	strh	r3, [r0, #24]
 801b97e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801b980:	8603      	strh	r3, [r0, #48]	; 0x30
 801b982:	86c3      	strh	r3, [r0, #54]	; 0x36
 801b984:	8703      	strh	r3, [r0, #56]	; 0x38
 801b986:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b988:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801b98c:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801b990:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801b994:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801b998:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801b99c:	e9c0 3300 	strd	r3, r3, [r0]
 801b9a0:	f7f8 fbba 	bl	8014118 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801b9a4:	4620      	mov	r0, r4
 801b9a6:	bd10      	pop	{r4, pc}

0801b9a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801b9a8:	b530      	push	{r4, r5, lr}
 801b9aa:	2500      	movs	r5, #0
 801b9ac:	2401      	movs	r4, #1
 801b9ae:	6843      	ldr	r3, [r0, #4]
 801b9b0:	b913      	cbnz	r3, 801b9b8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801b9b2:	6803      	ldr	r3, [r0, #0]
 801b9b4:	b1f3      	cbz	r3, 801b9f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801b9b6:	6043      	str	r3, [r0, #4]
 801b9b8:	7c03      	ldrb	r3, [r0, #16]
 801b9ba:	b143      	cbz	r3, 801b9ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801b9bc:	68c3      	ldr	r3, [r0, #12]
 801b9be:	b12b      	cbz	r3, 801b9cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b9c0:	881a      	ldrh	r2, [r3, #0]
 801b9c2:	b11a      	cbz	r2, 801b9cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b9c4:	1c9a      	adds	r2, r3, #2
 801b9c6:	60c2      	str	r2, [r0, #12]
 801b9c8:	8818      	ldrh	r0, [r3, #0]
 801b9ca:	bd30      	pop	{r4, r5, pc}
 801b9cc:	7405      	strb	r5, [r0, #16]
 801b9ce:	6843      	ldr	r3, [r0, #4]
 801b9d0:	8819      	ldrh	r1, [r3, #0]
 801b9d2:	b179      	cbz	r1, 801b9f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801b9d4:	1c9a      	adds	r2, r3, #2
 801b9d6:	2902      	cmp	r1, #2
 801b9d8:	6042      	str	r2, [r0, #4]
 801b9da:	d1f5      	bne.n	801b9c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801b9dc:	6883      	ldr	r3, [r0, #8]
 801b9de:	1d1a      	adds	r2, r3, #4
 801b9e0:	6082      	str	r2, [r0, #8]
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	60c3      	str	r3, [r0, #12]
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d0e1      	beq.n	801b9ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b9ea:	881b      	ldrh	r3, [r3, #0]
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d0de      	beq.n	801b9ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b9f0:	7404      	strb	r4, [r0, #16]
 801b9f2:	e7dc      	b.n	801b9ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b9f4:	2000      	movs	r0, #0
 801b9f6:	e7e8      	b.n	801b9ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801b9f8 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801b9f8:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b9fa:	2300      	movs	r3, #0
 801b9fc:	6082      	str	r2, [r0, #8]
 801b9fe:	6001      	str	r1, [r0, #0]
 801ba00:	6043      	str	r3, [r0, #4]
 801ba02:	60c3      	str	r3, [r0, #12]
 801ba04:	7403      	strb	r3, [r0, #16]
 801ba06:	8603      	strh	r3, [r0, #48]	; 0x30
 801ba08:	8303      	strh	r3, [r0, #24]
 801ba0a:	8703      	strh	r3, [r0, #56]	; 0x38
 801ba0c:	b410      	push	{r4}
 801ba0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ba12:	f7f8 bb81 	b.w	8014118 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801ba16 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801ba16:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba18:	4605      	mov	r5, r0
 801ba1a:	4608      	mov	r0, r1
 801ba1c:	b1f1      	cbz	r1, 801ba5c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801ba1e:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801ba22:	460b      	mov	r3, r1
 801ba24:	f101 0708 	add.w	r7, r1, #8
 801ba28:	4622      	mov	r2, r4
 801ba2a:	6818      	ldr	r0, [r3, #0]
 801ba2c:	3308      	adds	r3, #8
 801ba2e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ba32:	4626      	mov	r6, r4
 801ba34:	42bb      	cmp	r3, r7
 801ba36:	c603      	stmia	r6!, {r0, r1}
 801ba38:	4634      	mov	r4, r6
 801ba3a:	d1f6      	bne.n	801ba2a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801ba3c:	6818      	ldr	r0, [r3, #0]
 801ba3e:	6030      	str	r0, [r6, #0]
 801ba40:	4610      	mov	r0, r2
 801ba42:	889b      	ldrh	r3, [r3, #4]
 801ba44:	80b3      	strh	r3, [r6, #4]
 801ba46:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801ba4a:	015b      	lsls	r3, r3, #5
 801ba4c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ba50:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801ba54:	430b      	orrs	r3, r1
 801ba56:	425b      	negs	r3, r3
 801ba58:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801ba5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ba5e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801ba5e:	b538      	push	{r3, r4, r5, lr}
 801ba60:	460c      	mov	r4, r1
 801ba62:	6811      	ldr	r1, [r2, #0]
 801ba64:	4610      	mov	r0, r2
 801ba66:	68cd      	ldr	r5, [r1, #12]
 801ba68:	4619      	mov	r1, r3
 801ba6a:	47a8      	blx	r5
 801ba6c:	2800      	cmp	r0, #0
 801ba6e:	bf08      	it	eq
 801ba70:	4620      	moveq	r0, r4
 801ba72:	bd38      	pop	{r3, r4, r5, pc}

0801ba74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801ba74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba76:	4604      	mov	r4, r0
 801ba78:	4615      	mov	r5, r2
 801ba7a:	4608      	mov	r0, r1
 801ba7c:	b93a      	cbnz	r2, 801ba8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801ba7e:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801ba82:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801ba86:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801ba8a:	4628      	mov	r0, r5
 801ba8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ba8e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801ba92:	8893      	ldrh	r3, [r2, #4]
 801ba94:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801ba98:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801ba9c:	79ee      	ldrb	r6, [r5, #7]
 801ba9e:	4316      	orrs	r6, r2
 801baa0:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801baa4:	189a      	adds	r2, r3, r2
 801baa6:	b2b7      	uxth	r7, r6
 801baa8:	b291      	uxth	r1, r2
 801baaa:	291d      	cmp	r1, #29
 801baac:	f200 8084 	bhi.w	801bbb8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801bab0:	2201      	movs	r2, #1
 801bab2:	10f6      	asrs	r6, r6, #3
 801bab4:	408a      	lsls	r2, r1
 801bab6:	4978      	ldr	r1, [pc, #480]	; (801bc98 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801bab8:	420a      	tst	r2, r1
 801baba:	d12e      	bne.n	801bb1a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801babc:	f412 7f60 	tst.w	r2, #896	; 0x380
 801bac0:	d07a      	beq.n	801bbb8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801bac2:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801bac6:	462b      	mov	r3, r5
 801bac8:	f105 0e08 	add.w	lr, r5, #8
 801bacc:	4615      	mov	r5, r2
 801bace:	6818      	ldr	r0, [r3, #0]
 801bad0:	3308      	adds	r3, #8
 801bad2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801bad6:	4694      	mov	ip, r2
 801bad8:	4573      	cmp	r3, lr
 801bada:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801bade:	4662      	mov	r2, ip
 801bae0:	d1f5      	bne.n	801bace <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801bae2:	6818      	ldr	r0, [r3, #0]
 801bae4:	f8cc 0000 	str.w	r0, [ip]
 801bae8:	889b      	ldrh	r3, [r3, #4]
 801baea:	f8ac 3004 	strh.w	r3, [ip, #4]
 801baee:	b2b3      	uxth	r3, r6
 801baf0:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801baf4:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 801baf8:	1aca      	subs	r2, r1, r3
 801bafa:	1bcf      	subs	r7, r1, r7
 801bafc:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801bb00:	b292      	uxth	r2, r2
 801bb02:	1afb      	subs	r3, r7, r3
 801bb04:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 801bb08:	10d2      	asrs	r2, r2, #3
 801bb0a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801bb0e:	4302      	orrs	r2, r0
 801bb10:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 801bb14:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 801bb18:	e7b7      	b.n	801ba8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801bb1a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801bb1c:	b92b      	cbnz	r3, 801bb2a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801bb1e:	4b5f      	ldr	r3, [pc, #380]	; (801bc9c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801bb20:	21c0      	movs	r1, #192	; 0xc0
 801bb22:	4a5f      	ldr	r2, [pc, #380]	; (801bca0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801bb24:	485f      	ldr	r0, [pc, #380]	; (801bca4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801bb26:	f00c fdb7 	bl	8028698 <__assert_func>
 801bb2a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801bb2c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801bb30:	8b59      	ldrh	r1, [r3, #26]
 801bb32:	f640 6333 	movw	r3, #3635	; 0xe33
 801bb36:	4299      	cmp	r1, r3
 801bb38:	d110      	bne.n	801bb5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801bb3a:	6803      	ldr	r3, [r0, #0]
 801bb3c:	68db      	ldr	r3, [r3, #12]
 801bb3e:	4798      	blx	r3
 801bb40:	7b41      	ldrb	r1, [r0, #13]
 801bb42:	00cb      	lsls	r3, r1, #3
 801bb44:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bb48:	7a03      	ldrb	r3, [r0, #8]
 801bb4a:	0648      	lsls	r0, r1, #25
 801bb4c:	ea43 0302 	orr.w	r3, r3, r2
 801bb50:	bf44      	itt	mi
 801bb52:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bb56:	b21b      	sxthmi	r3, r3
 801bb58:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801bb5c:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801bb60:	462a      	mov	r2, r5
 801bb62:	f105 0c08 	add.w	ip, r5, #8
 801bb66:	443b      	add	r3, r7
 801bb68:	4433      	add	r3, r6
 801bb6a:	f104 0640 	add.w	r6, r4, #64	; 0x40
 801bb6e:	b29b      	uxth	r3, r3
 801bb70:	4635      	mov	r5, r6
 801bb72:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801bb76:	6810      	ldr	r0, [r2, #0]
 801bb78:	3208      	adds	r2, #8
 801bb7a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801bb7e:	4637      	mov	r7, r6
 801bb80:	4562      	cmp	r2, ip
 801bb82:	c703      	stmia	r7!, {r0, r1}
 801bb84:	463e      	mov	r6, r7
 801bb86:	d1f6      	bne.n	801bb76 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801bb88:	6810      	ldr	r0, [r2, #0]
 801bb8a:	6038      	str	r0, [r7, #0]
 801bb8c:	8892      	ldrh	r2, [r2, #4]
 801bb8e:	80ba      	strh	r2, [r7, #4]
 801bb90:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801bb94:	10db      	asrs	r3, r3, #3
 801bb96:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801bb9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801bb9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801bba2:	4313      	orrs	r3, r2
 801bba4:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801bba8:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801bbac:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801bbb0:	1a9b      	subs	r3, r3, r2
 801bbb2:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801bbb6:	e768      	b.n	801ba8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801bbb8:	f023 0204 	bic.w	r2, r3, #4
 801bbbc:	f640 611b 	movw	r1, #3611	; 0xe1b
 801bbc0:	428a      	cmp	r2, r1
 801bbc2:	d003      	beq.n	801bbcc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801bbc4:	f640 621d 	movw	r2, #3613	; 0xe1d
 801bbc8:	4293      	cmp	r3, r2
 801bbca:	d120      	bne.n	801bc0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801bbcc:	3b01      	subs	r3, #1
 801bbce:	4602      	mov	r2, r0
 801bbd0:	4629      	mov	r1, r5
 801bbd2:	4620      	mov	r0, r4
 801bbd4:	b29b      	uxth	r3, r3
 801bbd6:	f7ff ff42 	bl	801ba5e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bbda:	7b41      	ldrb	r1, [r0, #13]
 801bbdc:	00cb      	lsls	r3, r1, #3
 801bbde:	0649      	lsls	r1, r1, #25
 801bbe0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bbe4:	7a03      	ldrb	r3, [r0, #8]
 801bbe6:	ea43 0302 	orr.w	r3, r3, r2
 801bbea:	bf44      	itt	mi
 801bbec:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bbf0:	b21b      	sxthmi	r3, r3
 801bbf2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801bbf6:	7b6b      	ldrb	r3, [r5, #13]
 801bbf8:	7aaa      	ldrb	r2, [r5, #10]
 801bbfa:	005b      	lsls	r3, r3, #1
 801bbfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bc00:	4313      	orrs	r3, r2
 801bc02:	115a      	asrs	r2, r3, #5
 801bc04:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801bc08:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801bc0c:	e035      	b.n	801bc7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801bc0e:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801bc12:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801bc16:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801bc1a:	7a2a      	ldrb	r2, [r5, #8]
 801bc1c:	ea42 0201 	orr.w	r2, r2, r1
 801bc20:	f640 6109 	movw	r1, #3593	; 0xe09
 801bc24:	bf1c      	itt	ne
 801bc26:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801bc2a:	b212      	sxthne	r2, r2
 801bc2c:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801bc30:	f023 0210 	bic.w	r2, r3, #16
 801bc34:	428a      	cmp	r2, r1
 801bc36:	d003      	beq.n	801bc40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801bc38:	f640 6213 	movw	r2, #3603	; 0xe13
 801bc3c:	4293      	cmp	r3, r2
 801bc3e:	d129      	bne.n	801bc94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801bc40:	7b6e      	ldrb	r6, [r5, #13]
 801bc42:	4629      	mov	r1, r5
 801bc44:	0076      	lsls	r6, r6, #1
 801bc46:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801bc4a:	7aae      	ldrb	r6, [r5, #10]
 801bc4c:	4316      	orrs	r6, r2
 801bc4e:	f640 6213 	movw	r2, #3603	; 0xe13
 801bc52:	4293      	cmp	r3, r2
 801bc54:	4602      	mov	r2, r0
 801bc56:	4620      	mov	r0, r4
 801bc58:	bf16      	itet	ne
 801bc5a:	f103 33ff 	addne.w	r3, r3, #4294967295
 801bc5e:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801bc62:	b29b      	uxthne	r3, r3
 801bc64:	f7ff fefb 	bl	801ba5e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bc68:	7b43      	ldrb	r3, [r0, #13]
 801bc6a:	7a82      	ldrb	r2, [r0, #10]
 801bc6c:	005b      	lsls	r3, r3, #1
 801bc6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bc72:	4313      	orrs	r3, r2
 801bc74:	1af6      	subs	r6, r6, r3
 801bc76:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 801bc7a:	7b69      	ldrb	r1, [r5, #13]
 801bc7c:	00cb      	lsls	r3, r1, #3
 801bc7e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bc82:	7a2b      	ldrb	r3, [r5, #8]
 801bc84:	4313      	orrs	r3, r2
 801bc86:	064a      	lsls	r2, r1, #25
 801bc88:	bf44      	itt	mi
 801bc8a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bc8e:	b21b      	sxthmi	r3, r3
 801bc90:	1bdb      	subs	r3, r3, r7
 801bc92:	e73f      	b.n	801bb14 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801bc94:	2300      	movs	r3, #0
 801bc96:	e7b7      	b.n	801bc08 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801bc98:	3fc00079 	.word	0x3fc00079
 801bc9c:	0802c384 	.word	0x0802c384
 801bca0:	0802c5f6 	.word	0x0802c5f6
 801bca4:	0802c38d 	.word	0x0802c38d

0801bca8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801bca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bcac:	4604      	mov	r4, r0
 801bcae:	b942      	cbnz	r2, 801bcc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801bcb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bcb4:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801bcb8:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801bcbc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801bcc0:	e046      	b.n	801bd50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801bcc2:	7b51      	ldrb	r1, [r2, #13]
 801bcc4:	8893      	ldrh	r3, [r2, #4]
 801bcc6:	010f      	lsls	r7, r1, #4
 801bcc8:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801bccc:	79d7      	ldrb	r7, [r2, #7]
 801bcce:	4307      	orrs	r7, r0
 801bcd0:	2f04      	cmp	r7, #4
 801bcd2:	b2bd      	uxth	r5, r7
 801bcd4:	bfcc      	ite	gt
 801bcd6:	08bf      	lsrgt	r7, r7, #2
 801bcd8:	2701      	movle	r7, #1
 801bcda:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801bcde:	f200 80ab 	bhi.w	801be38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801bce2:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801bce6:	4283      	cmp	r3, r0
 801bce8:	d216      	bcs.n	801bd18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bcea:	f240 605b 	movw	r0, #1627	; 0x65b
 801bcee:	4283      	cmp	r3, r0
 801bcf0:	d859      	bhi.n	801bda6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801bcf2:	f240 6057 	movw	r0, #1623	; 0x657
 801bcf6:	4283      	cmp	r3, r0
 801bcf8:	d20e      	bcs.n	801bd18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bcfa:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801bcfe:	d24a      	bcs.n	801bd96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801bd00:	f240 604e 	movw	r0, #1614	; 0x64e
 801bd04:	4283      	cmp	r3, r0
 801bd06:	d207      	bcs.n	801bd18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bd08:	f240 601a 	movw	r0, #1562	; 0x61a
 801bd0c:	4283      	cmp	r3, r0
 801bd0e:	d02a      	beq.n	801bd66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801bd10:	d821      	bhi.n	801bd56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801bd12:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801bd16:	d35b      	bcc.n	801bdd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801bd18:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 801bd1c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bd20:	f040 80d0 	bne.w	801bec4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801bd24:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 801bd28:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bd2c:	f040 80ca 	bne.w	801bec4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801bd30:	00cb      	lsls	r3, r1, #3
 801bd32:	0649      	lsls	r1, r1, #25
 801bd34:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801bd38:	7a13      	ldrb	r3, [r2, #8]
 801bd3a:	ea43 0300 	orr.w	r3, r3, r0
 801bd3e:	bf44      	itt	mi
 801bd40:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bd44:	b21b      	sxthmi	r3, r3
 801bd46:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801bd4a:	1b5d      	subs	r5, r3, r5
 801bd4c:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801bd50:	4610      	mov	r0, r2
 801bd52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bd56:	f240 604b 	movw	r0, #1611	; 0x64b
 801bd5a:	4283      	cmp	r3, r0
 801bd5c:	d338      	bcc.n	801bdd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801bd5e:	f240 604c 	movw	r0, #1612	; 0x64c
 801bd62:	4283      	cmp	r3, r0
 801bd64:	d9d8      	bls.n	801bd18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bd66:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 801bd6a:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 801bd6e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bd72:	f040 80f2 	bne.w	801bf5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801bd76:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bd7a:	f040 80ee 	bne.w	801bf5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801bd7e:	00cb      	lsls	r3, r1, #3
 801bd80:	064e      	lsls	r6, r1, #25
 801bd82:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801bd86:	7a13      	ldrb	r3, [r2, #8]
 801bd88:	ea43 0300 	orr.w	r3, r3, r0
 801bd8c:	bf44      	itt	mi
 801bd8e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bd92:	b21b      	sxthmi	r3, r3
 801bd94:	e7d9      	b.n	801bd4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801bd96:	f240 6054 	movw	r0, #1620	; 0x654
 801bd9a:	4283      	cmp	r3, r0
 801bd9c:	d8e3      	bhi.n	801bd66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801bd9e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801bda2:	d9e0      	bls.n	801bd66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801bda4:	e7b8      	b.n	801bd18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bda6:	f240 6074 	movw	r0, #1652	; 0x674
 801bdaa:	4283      	cmp	r3, r0
 801bdac:	d0b4      	beq.n	801bd18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bdae:	d82d      	bhi.n	801be0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801bdb0:	f240 605e 	movw	r0, #1630	; 0x65e
 801bdb4:	4283      	cmp	r3, r0
 801bdb6:	d804      	bhi.n	801bdc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801bdb8:	f240 605d 	movw	r0, #1629	; 0x65d
 801bdbc:	4283      	cmp	r3, r0
 801bdbe:	d3d2      	bcc.n	801bd66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801bdc0:	e7aa      	b.n	801bd18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bdc2:	f240 605f 	movw	r0, #1631	; 0x65f
 801bdc6:	4283      	cmp	r3, r0
 801bdc8:	d0cd      	beq.n	801bd66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801bdca:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801bdce:	d0a3      	beq.n	801bd18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801bdd0:	00cb      	lsls	r3, r1, #3
 801bdd2:	0649      	lsls	r1, r1, #25
 801bdd4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801bdd8:	7a13      	ldrb	r3, [r2, #8]
 801bdda:	ea43 0300 	orr.w	r3, r3, r0
 801bdde:	bf44      	itt	mi
 801bde0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bde4:	b21b      	sxthmi	r3, r3
 801bde6:	1b5d      	subs	r5, r3, r5
 801bde8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801bdec:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801bdf0:	7b53      	ldrb	r3, [r2, #13]
 801bdf2:	015b      	lsls	r3, r3, #5
 801bdf4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801bdf8:	7993      	ldrb	r3, [r2, #6]
 801bdfa:	430b      	orrs	r3, r1
 801bdfc:	2105      	movs	r1, #5
 801bdfe:	005b      	lsls	r3, r3, #1
 801be00:	fb93 f3f1 	sdiv	r3, r3, r1
 801be04:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801be08:	440b      	add	r3, r1
 801be0a:	e757      	b.n	801bcbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801be0c:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801be10:	4283      	cmp	r3, r0
 801be12:	d809      	bhi.n	801be28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801be14:	f240 60df 	movw	r0, #1759	; 0x6df
 801be18:	4283      	cmp	r3, r0
 801be1a:	f4bf af7d 	bcs.w	801bd18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801be1e:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801be22:	2b05      	cmp	r3, #5
 801be24:	d8d4      	bhi.n	801bdd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801be26:	e777      	b.n	801bd18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801be28:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801be2c:	4283      	cmp	r3, r0
 801be2e:	d09a      	beq.n	801bd66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801be30:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801be34:	4283      	cmp	r3, r0
 801be36:	e7ca      	b.n	801bdce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801be38:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801be3c:	d22b      	bcs.n	801be96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801be3e:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801be42:	4283      	cmp	r3, r0
 801be44:	d28f      	bcs.n	801bd66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801be46:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801be4a:	4283      	cmp	r3, r0
 801be4c:	d816      	bhi.n	801be7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801be4e:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801be52:	4283      	cmp	r3, r0
 801be54:	f4bf af60 	bcs.w	801bd18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801be58:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801be5c:	4283      	cmp	r3, r0
 801be5e:	d80a      	bhi.n	801be76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801be60:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801be64:	4283      	cmp	r3, r0
 801be66:	f4bf af57 	bcs.w	801bd18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801be6a:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801be6e:	4283      	cmp	r3, r0
 801be70:	f43f af79 	beq.w	801bd66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801be74:	e7ac      	b.n	801bdd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801be76:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801be7a:	e7f8      	b.n	801be6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801be7c:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801be80:	4283      	cmp	r3, r0
 801be82:	d802      	bhi.n	801be8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801be84:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801be88:	e798      	b.n	801bdbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801be8a:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801be8e:	4283      	cmp	r3, r0
 801be90:	f47f af42 	bne.w	801bd18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801be94:	e767      	b.n	801bd66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801be96:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801be9a:	4283      	cmp	r3, r0
 801be9c:	f43f af63 	beq.w	801bd66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801bea0:	d802      	bhi.n	801bea8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801bea2:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801bea6:	e7f2      	b.n	801be8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801bea8:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801beac:	4283      	cmp	r3, r0
 801beae:	d805      	bhi.n	801bebc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801beb0:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801beb4:	4283      	cmp	r3, r0
 801beb6:	f4ff af2f 	bcc.w	801bd18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801beba:	e754      	b.n	801bd66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801bebc:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801bec0:	4283      	cmp	r3, r0
 801bec2:	e7af      	b.n	801be24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801bec4:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801bec8:	4617      	mov	r7, r2
 801beca:	f102 0808 	add.w	r8, r2, #8
 801bece:	4666      	mov	r6, ip
 801bed0:	6838      	ldr	r0, [r7, #0]
 801bed2:	3708      	adds	r7, #8
 801bed4:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801bed8:	46e6      	mov	lr, ip
 801beda:	4547      	cmp	r7, r8
 801bedc:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801bee0:	46f4      	mov	ip, lr
 801bee2:	d1f5      	bne.n	801bed0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801bee4:	6838      	ldr	r0, [r7, #0]
 801bee6:	f8ce 0000 	str.w	r0, [lr]
 801beea:	88b9      	ldrh	r1, [r7, #4]
 801beec:	f8ae 1004 	strh.w	r1, [lr, #4]
 801bef0:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801bef4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bef8:	d009      	beq.n	801bf0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801befa:	7b51      	ldrb	r1, [r2, #13]
 801befc:	7992      	ldrb	r2, [r2, #6]
 801befe:	0149      	lsls	r1, r1, #5
 801bf00:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801bf04:	4311      	orrs	r1, r2
 801bf06:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801bf0a:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801bf0e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bf12:	d00d      	beq.n	801bf30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801bf14:	442b      	add	r3, r5
 801bf16:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801bf1a:	b29b      	uxth	r3, r3
 801bf1c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801bf20:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801bf24:	10db      	asrs	r3, r3, #3
 801bf26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801bf2a:	4313      	orrs	r3, r2
 801bf2c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801bf30:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801bf34:	00cb      	lsls	r3, r1, #3
 801bf36:	064f      	lsls	r7, r1, #25
 801bf38:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bf3c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801bf40:	ea43 0302 	orr.w	r3, r3, r2
 801bf44:	bf44      	itt	mi
 801bf46:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bf4a:	b21b      	sxthmi	r3, r3
 801bf4c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801bf50:	1b5d      	subs	r5, r3, r5
 801bf52:	4632      	mov	r2, r6
 801bf54:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 801bf58:	e6fa      	b.n	801bd50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801bf5a:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 801bf5e:	4694      	mov	ip, r2
 801bf60:	f102 0908 	add.w	r9, r2, #8
 801bf64:	4676      	mov	r6, lr
 801bf66:	f8dc 0000 	ldr.w	r0, [ip]
 801bf6a:	f10c 0c08 	add.w	ip, ip, #8
 801bf6e:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801bf72:	46f0      	mov	r8, lr
 801bf74:	45cc      	cmp	ip, r9
 801bf76:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801bf7a:	46c6      	mov	lr, r8
 801bf7c:	d1f3      	bne.n	801bf66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801bf7e:	f8dc 0000 	ldr.w	r0, [ip]
 801bf82:	f8c8 0000 	str.w	r0, [r8]
 801bf86:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801bf8a:	f8a8 1004 	strh.w	r1, [r8, #4]
 801bf8e:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 801bf92:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bf96:	d009      	beq.n	801bfac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801bf98:	7b51      	ldrb	r1, [r2, #13]
 801bf9a:	7992      	ldrb	r2, [r2, #6]
 801bf9c:	0149      	lsls	r1, r1, #5
 801bf9e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801bfa2:	4311      	orrs	r1, r2
 801bfa4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801bfa8:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 801bfac:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bfb0:	d00d      	beq.n	801bfce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801bfb2:	1bdb      	subs	r3, r3, r7
 801bfb4:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 801bfb8:	b29b      	uxth	r3, r3
 801bfba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801bfbe:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801bfc2:	10db      	asrs	r3, r3, #3
 801bfc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801bfc8:	4313      	orrs	r3, r2
 801bfca:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 801bfce:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801bfd2:	00cb      	lsls	r3, r1, #3
 801bfd4:	0648      	lsls	r0, r1, #25
 801bfd6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bfda:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801bfde:	ea43 0302 	orr.w	r3, r3, r2
 801bfe2:	bf44      	itt	mi
 801bfe4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bfe8:	b21b      	sxthmi	r3, r3
 801bfea:	e7b1      	b.n	801bf50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801bfec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801bfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bff0:	461e      	mov	r6, r3
 801bff2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801bff4:	4604      	mov	r4, r0
 801bff6:	4617      	mov	r7, r2
 801bff8:	b92b      	cbnz	r3, 801c006 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801bffa:	4b25      	ldr	r3, [pc, #148]	; (801c090 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801bffc:	21c0      	movs	r1, #192	; 0xc0
 801bffe:	4a25      	ldr	r2, [pc, #148]	; (801c094 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801c000:	4825      	ldr	r0, [pc, #148]	; (801c098 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801c002:	f00c fb49 	bl	8028698 <__assert_func>
 801c006:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c008:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c00c:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801c010:	f7f7 ffdc 	bl	8013fcc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c014:	4605      	mov	r5, r0
 801c016:	b918      	cbnz	r0, 801c020 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801c018:	6030      	str	r0, [r6, #0]
 801c01a:	4628      	mov	r0, r5
 801c01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c020:	683b      	ldr	r3, [r7, #0]
 801c022:	4601      	mov	r1, r0
 801c024:	4638      	mov	r0, r7
 801c026:	68db      	ldr	r3, [r3, #12]
 801c028:	4798      	blx	r3
 801c02a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801c02e:	4602      	mov	r2, r0
 801c030:	6030      	str	r0, [r6, #0]
 801c032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c036:	d213      	bcs.n	801c060 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801c038:	4643      	mov	r3, r8
 801c03a:	4639      	mov	r1, r7
 801c03c:	4620      	mov	r0, r4
 801c03e:	f7ff fe33 	bl	801bca8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c042:	6030      	str	r0, [r6, #0]
 801c044:	6833      	ldr	r3, [r6, #0]
 801c046:	b143      	cbz	r3, 801c05a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801c048:	7b5a      	ldrb	r2, [r3, #13]
 801c04a:	7a9b      	ldrb	r3, [r3, #10]
 801c04c:	0052      	lsls	r2, r2, #1
 801c04e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c052:	4313      	orrs	r3, r2
 801c054:	bf0c      	ite	eq
 801c056:	2301      	moveq	r3, #1
 801c058:	2300      	movne	r3, #0
 801c05a:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801c05e:	e7dc      	b.n	801c01a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801c060:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801c064:	b29b      	uxth	r3, r3
 801c066:	2b7f      	cmp	r3, #127	; 0x7f
 801c068:	d804      	bhi.n	801c074 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801c06a:	4639      	mov	r1, r7
 801c06c:	4620      	mov	r0, r4
 801c06e:	f7ff fd01 	bl	801ba74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c072:	e7e6      	b.n	801c042 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801c074:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801c078:	2b00      	cmp	r3, #0
 801c07a:	d0e3      	beq.n	801c044 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801c07c:	f640 1302 	movw	r3, #2306	; 0x902
 801c080:	429d      	cmp	r5, r3
 801c082:	d1df      	bne.n	801c044 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801c084:	4601      	mov	r1, r0
 801c086:	4620      	mov	r0, r4
 801c088:	f7ff fcc5 	bl	801ba16 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c08c:	e7d9      	b.n	801c042 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801c08e:	bf00      	nop
 801c090:	0802c384 	.word	0x0802c384
 801c094:	0802c5f6 	.word	0x0802c5f6
 801c098:	0802c38d 	.word	0x0802c38d

0801c09c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801c09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c0a0:	461e      	mov	r6, r3
 801c0a2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801c0a4:	4604      	mov	r4, r0
 801c0a6:	4617      	mov	r7, r2
 801c0a8:	b92b      	cbnz	r3, 801c0b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801c0aa:	4b26      	ldr	r3, [pc, #152]	; (801c144 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801c0ac:	21c0      	movs	r1, #192	; 0xc0
 801c0ae:	4a26      	ldr	r2, [pc, #152]	; (801c148 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801c0b0:	4826      	ldr	r0, [pc, #152]	; (801c14c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801c0b2:	f00c faf1 	bl	8028698 <__assert_func>
 801c0b6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c0b8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c0bc:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801c0c0:	f7f7 ff84 	bl	8013fcc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c0c4:	4605      	mov	r5, r0
 801c0c6:	b918      	cbnz	r0, 801c0d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801c0c8:	6030      	str	r0, [r6, #0]
 801c0ca:	4628      	mov	r0, r5
 801c0cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c0d0:	683b      	ldr	r3, [r7, #0]
 801c0d2:	4601      	mov	r1, r0
 801c0d4:	4638      	mov	r0, r7
 801c0d6:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801c0da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c0de:	47c8      	blx	r9
 801c0e0:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801c0e4:	4602      	mov	r2, r0
 801c0e6:	6030      	str	r0, [r6, #0]
 801c0e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c0ec:	d213      	bcs.n	801c116 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801c0ee:	4643      	mov	r3, r8
 801c0f0:	4639      	mov	r1, r7
 801c0f2:	4620      	mov	r0, r4
 801c0f4:	f7ff fdd8 	bl	801bca8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c0f8:	6030      	str	r0, [r6, #0]
 801c0fa:	6833      	ldr	r3, [r6, #0]
 801c0fc:	b143      	cbz	r3, 801c110 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801c0fe:	7b5a      	ldrb	r2, [r3, #13]
 801c100:	7a9b      	ldrb	r3, [r3, #10]
 801c102:	0052      	lsls	r2, r2, #1
 801c104:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c108:	4313      	orrs	r3, r2
 801c10a:	bf0c      	ite	eq
 801c10c:	2301      	moveq	r3, #1
 801c10e:	2300      	movne	r3, #0
 801c110:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801c114:	e7d9      	b.n	801c0ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801c116:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801c11a:	b29b      	uxth	r3, r3
 801c11c:	2b7f      	cmp	r3, #127	; 0x7f
 801c11e:	d804      	bhi.n	801c12a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801c120:	4639      	mov	r1, r7
 801c122:	4620      	mov	r0, r4
 801c124:	f7ff fca6 	bl	801ba74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c128:	e7e6      	b.n	801c0f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801c12a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801c12e:	2b00      	cmp	r3, #0
 801c130:	d0e3      	beq.n	801c0fa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801c132:	f640 1302 	movw	r3, #2306	; 0x902
 801c136:	429d      	cmp	r5, r3
 801c138:	d1df      	bne.n	801c0fa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801c13a:	4601      	mov	r1, r0
 801c13c:	4620      	mov	r0, r4
 801c13e:	f7ff fc6a 	bl	801ba16 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c142:	e7d9      	b.n	801c0f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801c144:	0802c384 	.word	0x0802c384
 801c148:	0802c5f6 	.word	0x0802c5f6
 801c14c:	0802c38d 	.word	0x0802c38d

0801c150 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801c150:	b510      	push	{r4, lr}
 801c152:	4604      	mov	r4, r0
 801c154:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801c156:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c158:	b9d9      	cbnz	r1, 801c192 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 801c15a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c15c:	2b0a      	cmp	r3, #10
 801c15e:	d036      	beq.n	801c1ce <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801c160:	4620      	mov	r0, r4
 801c162:	f7ff fc21 	bl	801b9a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801c166:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c168:	2b09      	cmp	r3, #9
 801c16a:	d906      	bls.n	801c17a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 801c16c:	4b18      	ldr	r3, [pc, #96]	; (801c1d0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 801c16e:	f44f 7182 	mov.w	r1, #260	; 0x104
 801c172:	4a18      	ldr	r2, [pc, #96]	; (801c1d4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801c174:	4818      	ldr	r0, [pc, #96]	; (801c1d8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801c176:	f00c fa8f 	bl	8028698 <__assert_func>
 801c17a:	1c5a      	adds	r2, r3, #1
 801c17c:	8622      	strh	r2, [r4, #48]	; 0x30
 801c17e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801c180:	4413      	add	r3, r2
 801c182:	b29b      	uxth	r3, r3
 801c184:	2b09      	cmp	r3, #9
 801c186:	bf88      	it	hi
 801c188:	3b0a      	subhi	r3, #10
 801c18a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c18e:	8358      	strh	r0, [r3, #26]
 801c190:	e7e3      	b.n	801c15a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 801c192:	2b0a      	cmp	r3, #10
 801c194:	d01b      	beq.n	801c1ce <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 801c196:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c198:	3901      	subs	r1, #1
 801c19a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801c19e:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801c1a0:	8721      	strh	r1, [r4, #56]	; 0x38
 801c1a2:	1c51      	adds	r1, r2, #1
 801c1a4:	b289      	uxth	r1, r1
 801c1a6:	2901      	cmp	r1, #1
 801c1a8:	bf8a      	itet	hi
 801c1aa:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c1ae:	86e1      	strhls	r1, [r4, #54]	; 0x36
 801c1b0:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 801c1b2:	2b09      	cmp	r3, #9
 801c1b4:	d8da      	bhi.n	801c16c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 801c1b6:	1c5a      	adds	r2, r3, #1
 801c1b8:	8622      	strh	r2, [r4, #48]	; 0x30
 801c1ba:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801c1bc:	4413      	add	r3, r2
 801c1be:	b29b      	uxth	r3, r3
 801c1c0:	2b09      	cmp	r3, #9
 801c1c2:	bf88      	it	hi
 801c1c4:	3b0a      	subhi	r3, #10
 801c1c6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c1ca:	8358      	strh	r0, [r3, #26]
 801c1cc:	e7c2      	b.n	801c154 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801c1ce:	bd10      	pop	{r4, pc}
 801c1d0:	0802c3b9 	.word	0x0802c3b9
 801c1d4:	0802c74c 	.word	0x0802c74c
 801c1d8:	0802c38d 	.word	0x0802c38d

0801c1dc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801c1dc:	b538      	push	{r3, r4, r5, lr}
 801c1de:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801c1e0:	4604      	mov	r4, r0
 801c1e2:	b92a      	cbnz	r2, 801c1f0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801c1e4:	4b13      	ldr	r3, [pc, #76]	; (801c234 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801c1e6:	21d5      	movs	r1, #213	; 0xd5
 801c1e8:	4a13      	ldr	r2, [pc, #76]	; (801c238 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801c1ea:	4814      	ldr	r0, [pc, #80]	; (801c23c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801c1ec:	f00c fa54 	bl	8028698 <__assert_func>
 801c1f0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c1f2:	3a01      	subs	r2, #1
 801c1f4:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801c1f8:	8b4d      	ldrh	r5, [r1, #26]
 801c1fa:	8602      	strh	r2, [r0, #48]	; 0x30
 801c1fc:	1c5a      	adds	r2, r3, #1
 801c1fe:	b292      	uxth	r2, r2
 801c200:	2a09      	cmp	r2, #9
 801c202:	bf8a      	itet	hi
 801c204:	3b09      	subhi	r3, #9
 801c206:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 801c208:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 801c20a:	f7ff ffa1 	bl	801c150 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c20e:	8b23      	ldrh	r3, [r4, #24]
 801c210:	2b01      	cmp	r3, #1
 801c212:	bf9c      	itt	ls
 801c214:	3301      	addls	r3, #1
 801c216:	8323      	strhls	r3, [r4, #24]
 801c218:	8ae3      	ldrh	r3, [r4, #22]
 801c21a:	b90b      	cbnz	r3, 801c220 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801c21c:	2302      	movs	r3, #2
 801c21e:	82e3      	strh	r3, [r4, #22]
 801c220:	8ae3      	ldrh	r3, [r4, #22]
 801c222:	4628      	mov	r0, r5
 801c224:	3b01      	subs	r3, #1
 801c226:	b29b      	uxth	r3, r3
 801c228:	82e3      	strh	r3, [r4, #22]
 801c22a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c22e:	8265      	strh	r5, [r4, #18]
 801c230:	bd38      	pop	{r3, r4, r5, pc}
 801c232:	bf00      	nop
 801c234:	0802c384 	.word	0x0802c384
 801c238:	0802c6a1 	.word	0x0802c6a1
 801c23c:	0802c38d 	.word	0x0802c38d

0801c240 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801c240:	428a      	cmp	r2, r1
 801c242:	b538      	push	{r3, r4, r5, lr}
 801c244:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 801c246:	d90c      	bls.n	801c262 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801c248:	b92c      	cbnz	r4, 801c256 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801c24a:	4b1c      	ldr	r3, [pc, #112]	; (801c2bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801c24c:	21e1      	movs	r1, #225	; 0xe1
 801c24e:	4a1c      	ldr	r2, [pc, #112]	; (801c2c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801c250:	481c      	ldr	r0, [pc, #112]	; (801c2c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801c252:	f00c fa21 	bl	8028698 <__assert_func>
 801c256:	3c01      	subs	r4, #1
 801c258:	4b1b      	ldr	r3, [pc, #108]	; (801c2c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801c25a:	4a1c      	ldr	r2, [pc, #112]	; (801c2cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801c25c:	21c5      	movs	r1, #197	; 0xc5
 801c25e:	8604      	strh	r4, [r0, #48]	; 0x30
 801c260:	e7f6      	b.n	801c250 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801c262:	428c      	cmp	r4, r1
 801c264:	d203      	bcs.n	801c26e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801c266:	4b1a      	ldr	r3, [pc, #104]	; (801c2d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801c268:	21cb      	movs	r1, #203	; 0xcb
 801c26a:	4a1a      	ldr	r2, [pc, #104]	; (801c2d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801c26c:	e7f0      	b.n	801c250 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801c26e:	1a64      	subs	r4, r4, r1
 801c270:	250a      	movs	r5, #10
 801c272:	8604      	strh	r4, [r0, #48]	; 0x30
 801c274:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 801c276:	4421      	add	r1, r4
 801c278:	b289      	uxth	r1, r1
 801c27a:	2909      	cmp	r1, #9
 801c27c:	bf88      	it	hi
 801c27e:	390a      	subhi	r1, #10
 801c280:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801c282:	b1ba      	cbz	r2, 801c2b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801c284:	3a01      	subs	r2, #1
 801c286:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 801c288:	b292      	uxth	r2, r2
 801c28a:	2909      	cmp	r1, #9
 801c28c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801c290:	d903      	bls.n	801c29a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801c292:	4b11      	ldr	r3, [pc, #68]	; (801c2d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801c294:	21e6      	movs	r1, #230	; 0xe6
 801c296:	4a11      	ldr	r2, [pc, #68]	; (801c2dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801c298:	e7da      	b.n	801c250 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801c29a:	3101      	adds	r1, #1
 801c29c:	8601      	strh	r1, [r0, #48]	; 0x30
 801c29e:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801c2a0:	b901      	cbnz	r1, 801c2a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801c2a2:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801c2a4:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 801c2a6:	3901      	subs	r1, #1
 801c2a8:	b289      	uxth	r1, r1
 801c2aa:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801c2ac:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c2b0:	834c      	strh	r4, [r1, #26]
 801c2b2:	e7e6      	b.n	801c282 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801c2b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c2b8:	f7ff bf4a 	b.w	801c150 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c2bc:	0802c384 	.word	0x0802c384
 801c2c0:	0802c47a 	.word	0x0802c47a
 801c2c4:	0802c38d 	.word	0x0802c38d
 801c2c8:	0802c3c5 	.word	0x0802c3c5
 801c2cc:	0802c524 	.word	0x0802c524
 801c2d0:	0802c3d3 	.word	0x0802c3d3
 801c2d4:	0802c7fb 	.word	0x0802c7fb
 801c2d8:	0802c3df 	.word	0x0802c3df
 801c2dc:	0802c3f2 	.word	0x0802c3f2

0801c2e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801c2e0:	3a01      	subs	r2, #1
 801c2e2:	b570      	push	{r4, r5, r6, lr}
 801c2e4:	b292      	uxth	r2, r2
 801c2e6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801c2ea:	42b2      	cmp	r2, r6
 801c2ec:	d019      	beq.n	801c322 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801c2ee:	8b04      	ldrh	r4, [r0, #24]
 801c2f0:	f831 5b02 	ldrh.w	r5, [r1], #2
 801c2f4:	4294      	cmp	r4, r2
 801c2f6:	d805      	bhi.n	801c304 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801c2f8:	4b19      	ldr	r3, [pc, #100]	; (801c360 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801c2fa:	4a1a      	ldr	r2, [pc, #104]	; (801c364 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801c2fc:	21c5      	movs	r1, #197	; 0xc5
 801c2fe:	481a      	ldr	r0, [pc, #104]	; (801c368 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801c300:	f00c f9ca 	bl	8028698 <__assert_func>
 801c304:	8ac4      	ldrh	r4, [r0, #22]
 801c306:	4414      	add	r4, r2
 801c308:	3a01      	subs	r2, #1
 801c30a:	b2a4      	uxth	r4, r4
 801c30c:	b292      	uxth	r2, r2
 801c30e:	2c01      	cmp	r4, #1
 801c310:	bf88      	it	hi
 801c312:	3c02      	subhi	r4, #2
 801c314:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c318:	8a64      	ldrh	r4, [r4, #18]
 801c31a:	42ac      	cmp	r4, r5
 801c31c:	d0e5      	beq.n	801c2ea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801c31e:	2000      	movs	r0, #0
 801c320:	bd70      	pop	{r4, r5, r6, pc}
 801c322:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c326:	2400      	movs	r4, #0
 801c328:	4413      	add	r3, r2
 801c32a:	b2a2      	uxth	r2, r4
 801c32c:	429a      	cmp	r2, r3
 801c32e:	da14      	bge.n	801c35a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801c330:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801c332:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801c336:	4296      	cmp	r6, r2
 801c338:	d802      	bhi.n	801c340 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801c33a:	4b09      	ldr	r3, [pc, #36]	; (801c360 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801c33c:	4a0b      	ldr	r2, [pc, #44]	; (801c36c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801c33e:	e7dd      	b.n	801c2fc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801c340:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 801c342:	3401      	adds	r4, #1
 801c344:	4432      	add	r2, r6
 801c346:	b292      	uxth	r2, r2
 801c348:	2a09      	cmp	r2, #9
 801c34a:	bf88      	it	hi
 801c34c:	3a0a      	subhi	r2, #10
 801c34e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c352:	8b52      	ldrh	r2, [r2, #26]
 801c354:	42aa      	cmp	r2, r5
 801c356:	d0e8      	beq.n	801c32a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801c358:	e7e1      	b.n	801c31e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801c35a:	2001      	movs	r0, #1
 801c35c:	e7e0      	b.n	801c320 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801c35e:	bf00      	nop
 801c360:	0802c3c5 	.word	0x0802c3c5
 801c364:	0802c87f 	.word	0x0802c87f
 801c368:	0802c38d 	.word	0x0802c38d
 801c36c:	0802c524 	.word	0x0802c524

0801c370 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801c370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c374:	4605      	mov	r5, r0
 801c376:	4616      	mov	r6, r2
 801c378:	1c8c      	adds	r4, r1, #2
 801c37a:	8809      	ldrh	r1, [r1, #0]
 801c37c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801c380:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801c384:	42b3      	cmp	r3, r6
 801c386:	d124      	bne.n	801c3d2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801c388:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801c38c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801c390:	f001 070f 	and.w	r7, r1, #15
 801c394:	4652      	mov	r2, sl
 801c396:	f8cd 8000 	str.w	r8, [sp]
 801c39a:	464b      	mov	r3, r9
 801c39c:	4621      	mov	r1, r4
 801c39e:	4628      	mov	r0, r5
 801c3a0:	f7ff ff9e 	bl	801c2e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801c3a4:	4683      	mov	fp, r0
 801c3a6:	b168      	cbz	r0, 801c3c4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801c3a8:	eb0a 0109 	add.w	r1, sl, r9
 801c3ac:	463a      	mov	r2, r7
 801c3ae:	4628      	mov	r0, r5
 801c3b0:	4441      	add	r1, r8
 801c3b2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801c3b6:	4649      	mov	r1, r9
 801c3b8:	f7ff ff42 	bl	801c240 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801c3bc:	4658      	mov	r0, fp
 801c3be:	b003      	add	sp, #12
 801c3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3c4:	eb07 010a 	add.w	r1, r7, sl
 801c3c8:	4449      	add	r1, r9
 801c3ca:	4441      	add	r1, r8
 801c3cc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801c3d0:	e7d2      	b.n	801c378 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801c3d2:	f04f 0b00 	mov.w	fp, #0
 801c3d6:	e7f1      	b.n	801c3bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801c3d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801c3d8:	b570      	push	{r4, r5, r6, lr}
 801c3da:	8810      	ldrh	r0, [r2, #0]
 801c3dc:	4298      	cmp	r0, r3
 801c3de:	d817      	bhi.n	801c410 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c3e0:	1e48      	subs	r0, r1, #1
 801c3e2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801c3e6:	4298      	cmp	r0, r3
 801c3e8:	d312      	bcc.n	801c410 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c3ea:	2400      	movs	r4, #0
 801c3ec:	428c      	cmp	r4, r1
 801c3ee:	d20f      	bcs.n	801c410 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c3f0:	1860      	adds	r0, r4, r1
 801c3f2:	1040      	asrs	r0, r0, #1
 801c3f4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801c3f8:	0085      	lsls	r5, r0, #2
 801c3fa:	42b3      	cmp	r3, r6
 801c3fc:	d902      	bls.n	801c404 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801c3fe:	3001      	adds	r0, #1
 801c400:	b284      	uxth	r4, r0
 801c402:	e7f3      	b.n	801c3ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c404:	d201      	bcs.n	801c40a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801c406:	b281      	uxth	r1, r0
 801c408:	e7f0      	b.n	801c3ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c40a:	442a      	add	r2, r5
 801c40c:	8850      	ldrh	r0, [r2, #2]
 801c40e:	bd70      	pop	{r4, r5, r6, pc}
 801c410:	2000      	movs	r0, #0
 801c412:	e7fc      	b.n	801c40e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801c414 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801c414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c418:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801c41a:	4604      	mov	r4, r0
 801c41c:	260b      	movs	r6, #11
 801c41e:	886f      	ldrh	r7, [r5, #2]
 801c420:	087f      	lsrs	r7, r7, #1
 801c422:	3e01      	subs	r6, #1
 801c424:	d01b      	beq.n	801c45e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801c426:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c428:	b92b      	cbnz	r3, 801c436 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801c42a:	4b0e      	ldr	r3, [pc, #56]	; (801c464 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801c42c:	21c0      	movs	r1, #192	; 0xc0
 801c42e:	4a0e      	ldr	r2, [pc, #56]	; (801c468 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801c430:	480e      	ldr	r0, [pc, #56]	; (801c46c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801c432:	f00c f931 	bl	8028698 <__assert_func>
 801c436:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801c438:	462a      	mov	r2, r5
 801c43a:	4639      	mov	r1, r7
 801c43c:	4620      	mov	r0, r4
 801c43e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c442:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 801c446:	4643      	mov	r3, r8
 801c448:	f7ff ffc6 	bl	801c3d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801c44c:	b138      	cbz	r0, 801c45e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801c44e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801c452:	4642      	mov	r2, r8
 801c454:	4620      	mov	r0, r4
 801c456:	f7ff ff8b 	bl	801c370 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801c45a:	2800      	cmp	r0, #0
 801c45c:	d1e1      	bne.n	801c422 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801c45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c462:	bf00      	nop
 801c464:	0802c384 	.word	0x0802c384
 801c468:	0802c5f6 	.word	0x0802c5f6
 801c46c:	0802c38d 	.word	0x0802c38d

0801c470 <_ZN8touchgfx8ceil28_4El>:
 801c470:	f110 030f 	adds.w	r3, r0, #15
 801c474:	d401      	bmi.n	801c47a <_ZN8touchgfx8ceil28_4El+0xa>
 801c476:	1118      	asrs	r0, r3, #4
 801c478:	4770      	bx	lr
 801c47a:	2210      	movs	r2, #16
 801c47c:	f1c0 0001 	rsb	r0, r0, #1
 801c480:	fb93 f3f2 	sdiv	r3, r3, r2
 801c484:	f010 000f 	ands.w	r0, r0, #15
 801c488:	bf18      	it	ne
 801c48a:	2001      	movne	r0, #1
 801c48c:	1a18      	subs	r0, r3, r0
 801c48e:	4770      	bx	lr

0801c490 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801c490:	2900      	cmp	r1, #0
 801c492:	b538      	push	{r3, r4, r5, lr}
 801c494:	dc05      	bgt.n	801c4a2 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801c496:	4b0f      	ldr	r3, [pc, #60]	; (801c4d4 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801c498:	21fa      	movs	r1, #250	; 0xfa
 801c49a:	4a0f      	ldr	r2, [pc, #60]	; (801c4d8 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801c49c:	480f      	ldr	r0, [pc, #60]	; (801c4dc <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801c49e:	f00c f8fb 	bl	8028698 <__assert_func>
 801c4a2:	2800      	cmp	r0, #0
 801c4a4:	db06      	blt.n	801c4b4 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801c4a6:	fb90 f4f1 	sdiv	r4, r0, r1
 801c4aa:	fb01 0114 	mls	r1, r1, r4, r0
 801c4ae:	6014      	str	r4, [r2, #0]
 801c4b0:	6019      	str	r1, [r3, #0]
 801c4b2:	bd38      	pop	{r3, r4, r5, pc}
 801c4b4:	4240      	negs	r0, r0
 801c4b6:	fb90 f4f1 	sdiv	r4, r0, r1
 801c4ba:	4265      	negs	r5, r4
 801c4bc:	fb01 0014 	mls	r0, r1, r4, r0
 801c4c0:	6015      	str	r5, [r2, #0]
 801c4c2:	6018      	str	r0, [r3, #0]
 801c4c4:	2800      	cmp	r0, #0
 801c4c6:	d0f4      	beq.n	801c4b2 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801c4c8:	6810      	ldr	r0, [r2, #0]
 801c4ca:	3801      	subs	r0, #1
 801c4cc:	6010      	str	r0, [r2, #0]
 801c4ce:	6818      	ldr	r0, [r3, #0]
 801c4d0:	1a09      	subs	r1, r1, r0
 801c4d2:	e7ed      	b.n	801c4b0 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801c4d4:	0802c950 	.word	0x0802c950
 801c4d8:	0802c98f 	.word	0x0802c98f
 801c4dc:	0802c960 	.word	0x0802c960

0801c4e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801c4e0:	b570      	push	{r4, r5, r6, lr}
 801c4e2:	694a      	ldr	r2, [r1, #20]
 801c4e4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801c4e6:	684b      	ldr	r3, [r1, #4]
 801c4e8:	1b54      	subs	r4, r2, r5
 801c4ea:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801c4ec:	f000 8106 	beq.w	801c6fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801c4f0:	1b9b      	subs	r3, r3, r6
 801c4f2:	d003      	beq.n	801c4fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c4f4:	4363      	muls	r3, r4
 801c4f6:	2210      	movs	r2, #16
 801c4f8:	fb93 f3f2 	sdiv	r3, r3, r2
 801c4fc:	680c      	ldr	r4, [r1, #0]
 801c4fe:	698a      	ldr	r2, [r1, #24]
 801c500:	1b65      	subs	r5, r4, r5
 801c502:	f000 80fd 	beq.w	801c700 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801c506:	1b92      	subs	r2, r2, r6
 801c508:	d003      	beq.n	801c512 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c50a:	436a      	muls	r2, r5
 801c50c:	2410      	movs	r4, #16
 801c50e:	fb92 f2f4 	sdiv	r2, r2, r4
 801c512:	1a9b      	subs	r3, r3, r2
 801c514:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801c73c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801c518:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c51c:	460a      	mov	r2, r1
 801c51e:	ee07 3a90 	vmov	s15, r3
 801c522:	f100 040c 	add.w	r4, r0, #12
 801c526:	4603      	mov	r3, r0
 801c528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c52c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c530:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801c534:	eeb1 6a43 	vneg.f32	s12, s6
 801c538:	edd2 7a02 	vldr	s15, [r2, #8]
 801c53c:	3214      	adds	r2, #20
 801c53e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c542:	ece3 6a01 	vstmia	r3!, {s13}
 801c546:	429c      	cmp	r4, r3
 801c548:	ed52 7a02 	vldr	s15, [r2, #-8]
 801c54c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c550:	edc3 7a02 	vstr	s15, [r3, #8]
 801c554:	ed52 7a01 	vldr	s15, [r2, #-4]
 801c558:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c55c:	edc3 7a05 	vstr	s15, [r3, #20]
 801c560:	d1ea      	bne.n	801c538 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801c562:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c564:	698b      	ldr	r3, [r1, #24]
 801c566:	edd0 4a02 	vldr	s9, [r0, #8]
 801c56a:	1a9b      	subs	r3, r3, r2
 801c56c:	edd0 3a00 	vldr	s7, [r0]
 801c570:	edd0 6a01 	vldr	s13, [r0, #4]
 801c574:	ee07 3a90 	vmov	s15, r3
 801c578:	684b      	ldr	r3, [r1, #4]
 801c57a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801c57e:	ed90 5a05 	vldr	s10, [r0, #20]
 801c582:	1a9b      	subs	r3, r3, r2
 801c584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c588:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801c58c:	ed90 2a03 	vldr	s4, [r0, #12]
 801c590:	ee07 3a10 	vmov	s14, r3
 801c594:	edd0 5a04 	vldr	s11, [r0, #16]
 801c598:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c59c:	ed90 1a07 	vldr	s2, [r0, #28]
 801c5a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c5a4:	edd0 2a06 	vldr	s5, [r0, #24]
 801c5a8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801c5ac:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801c5b0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c5b4:	ee32 5a45 	vsub.f32	s10, s4, s10
 801c5b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c5bc:	ee67 7a83 	vmul.f32	s15, s15, s6
 801c5c0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801c5c4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c5c6:	694a      	ldr	r2, [r1, #20]
 801c5c8:	1b13      	subs	r3, r2, r4
 801c5ca:	ee07 3a10 	vmov	s14, r3
 801c5ce:	680b      	ldr	r3, [r1, #0]
 801c5d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c5d4:	1b1b      	subs	r3, r3, r4
 801c5d6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c5da:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801c5de:	ee07 3a10 	vmov	s14, r3
 801c5e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c5e6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c5ea:	eee6 4a87 	vfma.f32	s9, s13, s14
 801c5ee:	ee64 4a86 	vmul.f32	s9, s9, s12
 801c5f2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801c5f6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c5f8:	698b      	ldr	r3, [r1, #24]
 801c5fa:	1a9b      	subs	r3, r3, r2
 801c5fc:	ee06 3a90 	vmov	s13, r3
 801c600:	684b      	ldr	r3, [r1, #4]
 801c602:	1a9b      	subs	r3, r3, r2
 801c604:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c608:	ee07 3a10 	vmov	s14, r3
 801c60c:	ee66 6a84 	vmul.f32	s13, s13, s8
 801c610:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c614:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801c618:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c61c:	eee5 6a87 	vfma.f32	s13, s11, s14
 801c620:	ee66 6a83 	vmul.f32	s13, s13, s6
 801c624:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801c628:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c62a:	694a      	ldr	r2, [r1, #20]
 801c62c:	1b13      	subs	r3, r2, r4
 801c62e:	ee07 3a10 	vmov	s14, r3
 801c632:	680b      	ldr	r3, [r1, #0]
 801c634:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c638:	1b1b      	subs	r3, r3, r4
 801c63a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c63e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801c642:	ee07 3a10 	vmov	s14, r3
 801c646:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c64a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c64e:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c652:	edd0 5a08 	vldr	s11, [r0, #32]
 801c656:	ee31 1a65 	vsub.f32	s2, s2, s11
 801c65a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801c65e:	ee25 5a06 	vmul.f32	s10, s10, s12
 801c662:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801c666:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c668:	698b      	ldr	r3, [r1, #24]
 801c66a:	1a9b      	subs	r3, r3, r2
 801c66c:	ee07 3a10 	vmov	s14, r3
 801c670:	684b      	ldr	r3, [r1, #4]
 801c672:	1a9b      	subs	r3, r3, r2
 801c674:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c678:	ee01 3a90 	vmov	s3, r3
 801c67c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c680:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801c684:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801c688:	ee61 1a84 	vmul.f32	s3, s3, s8
 801c68c:	eea1 7a21 	vfma.f32	s14, s2, s3
 801c690:	ee27 7a03 	vmul.f32	s14, s14, s6
 801c694:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801c698:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c69a:	694a      	ldr	r2, [r1, #20]
 801c69c:	1b13      	subs	r3, r2, r4
 801c69e:	ee03 3a10 	vmov	s6, r3
 801c6a2:	680b      	ldr	r3, [r1, #0]
 801c6a4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c6a8:	1b1b      	subs	r3, r3, r4
 801c6aa:	ee23 3a04 	vmul.f32	s6, s6, s8
 801c6ae:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801c6b2:	ee03 3a10 	vmov	s6, r3
 801c6b6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c6ba:	ee23 4a04 	vmul.f32	s8, s6, s8
 801c6be:	eee1 5a04 	vfma.f32	s11, s2, s8
 801c6c2:	ee25 6a86 	vmul.f32	s12, s11, s12
 801c6c6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801c6ca:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801c6ce:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801c6d2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801c6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6da:	dd13      	ble.n	801c704 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801c6dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c6e0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801c6e4:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c6e6:	eee3 7a87 	vfma.f32	s15, s7, s14
 801c6ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6f2:	dd15      	ble.n	801c720 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801c6f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c6f8:	6403      	str	r3, [r0, #64]	; 0x40
 801c6fa:	bd70      	pop	{r4, r5, r6, pc}
 801c6fc:	4623      	mov	r3, r4
 801c6fe:	e6fd      	b.n	801c4fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c700:	462a      	mov	r2, r5
 801c702:	e706      	b.n	801c512 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c704:	d502      	bpl.n	801c70c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801c706:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c70a:	e7e9      	b.n	801c6e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801c70c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801c710:	eea3 2a85 	vfma.f32	s4, s7, s10
 801c714:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801c718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c71c:	dade      	bge.n	801c6dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801c71e:	e7f2      	b.n	801c706 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801c720:	d502      	bpl.n	801c728 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801c722:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c726:	e7e7      	b.n	801c6f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801c728:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801c72c:	eee3 4a86 	vfma.f32	s9, s7, s12
 801c730:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801c734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c738:	dadc      	bge.n	801c6f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801c73a:	e7f2      	b.n	801c722 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801c73c:	3d800000 	.word	0x3d800000

0801c740 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801c740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c744:	f04f 0814 	mov.w	r8, #20
 801c748:	4604      	mov	r4, r0
 801c74a:	4617      	mov	r7, r2
 801c74c:	460d      	mov	r5, r1
 801c74e:	fb08 f903 	mul.w	r9, r8, r3
 801c752:	461e      	mov	r6, r3
 801c754:	eb02 0a09 	add.w	sl, r2, r9
 801c758:	f8da 0004 	ldr.w	r0, [sl, #4]
 801c75c:	f7ff fe88 	bl	801c470 <_ZN8touchgfx8ceil28_4El>
 801c760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c762:	6160      	str	r0, [r4, #20]
 801c764:	fb08 f803 	mul.w	r8, r8, r3
 801c768:	9001      	str	r0, [sp, #4]
 801c76a:	eb07 0b08 	add.w	fp, r7, r8
 801c76e:	f8db 0004 	ldr.w	r0, [fp, #4]
 801c772:	f7ff fe7d 	bl	801c470 <_ZN8touchgfx8ceil28_4El>
 801c776:	9a01      	ldr	r2, [sp, #4]
 801c778:	1a80      	subs	r0, r0, r2
 801c77a:	61a0      	str	r0, [r4, #24]
 801c77c:	2800      	cmp	r0, #0
 801c77e:	f000 8088 	beq.w	801c892 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801c782:	f857 3009 	ldr.w	r3, [r7, r9]
 801c786:	f857 c008 	ldr.w	ip, [r7, r8]
 801c78a:	f8db 0004 	ldr.w	r0, [fp, #4]
 801c78e:	ebac 0c03 	sub.w	ip, ip, r3
 801c792:	f8da 1004 	ldr.w	r1, [sl, #4]
 801c796:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801c79a:	1a40      	subs	r0, r0, r1
 801c79c:	fb0b f202 	mul.w	r2, fp, r2
 801c7a0:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801c7a4:	fb0c 2211 	mls	r2, ip, r1, r2
 801c7a8:	4641      	mov	r1, r8
 801c7aa:	fb00 2003 	mla	r0, r0, r3, r2
 801c7ae:	f104 0310 	add.w	r3, r4, #16
 801c7b2:	4622      	mov	r2, r4
 801c7b4:	3801      	subs	r0, #1
 801c7b6:	4440      	add	r0, r8
 801c7b8:	f7ff fe6a 	bl	801c490 <_ZN8touchgfx11floorDivModEllRlS0_>
 801c7bc:	f104 0308 	add.w	r3, r4, #8
 801c7c0:	1d22      	adds	r2, r4, #4
 801c7c2:	4641      	mov	r1, r8
 801c7c4:	4658      	mov	r0, fp
 801c7c6:	f7ff fe63 	bl	801c490 <_ZN8touchgfx11floorDivModEllRlS0_>
 801c7ca:	f8c4 800c 	str.w	r8, [r4, #12]
 801c7ce:	6962      	ldr	r2, [r4, #20]
 801c7d0:	f8da 3004 	ldr.w	r3, [sl, #4]
 801c7d4:	eddf 6a31 	vldr	s13, [pc, #196]	; 801c89c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801c7d8:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801c7dc:	6822      	ldr	r2, [r4, #0]
 801c7de:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801c7e2:	ee07 3a10 	vmov	s14, r3
 801c7e6:	f857 3009 	ldr.w	r3, [r7, r9]
 801c7ea:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801c7ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c7f2:	ee07 3a90 	vmov	s15, r3
 801c7f6:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801c7fa:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c7fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c802:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c806:	edd3 6a00 	vldr	s13, [r3]
 801c80a:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c80e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801c812:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c816:	edc4 6a07 	vstr	s13, [r4, #28]
 801c81a:	edd4 6a01 	vldr	s13, [r4, #4]
 801c81e:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801c822:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c826:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801c82a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c82e:	ed84 6a08 	vstr	s12, [r4, #32]
 801c832:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801c834:	6262      	str	r2, [r4, #36]	; 0x24
 801c836:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801c83a:	ed93 6a03 	vldr	s12, [r3, #12]
 801c83e:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c842:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801c846:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801c84a:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801c84e:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801c852:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801c856:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c85a:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801c85e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801c860:	6322      	str	r2, [r4, #48]	; 0x30
 801c862:	ed93 6a06 	vldr	s12, [r3, #24]
 801c866:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801c86a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c86e:	eeb0 7a46 	vmov.f32	s14, s12
 801c872:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801c876:	eea6 7a27 	vfma.f32	s14, s12, s15
 801c87a:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801c87e:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801c882:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801c886:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c88a:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801c88e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801c890:	63e3      	str	r3, [r4, #60]	; 0x3c
 801c892:	4620      	mov	r0, r4
 801c894:	b003      	add	sp, #12
 801c896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c89a:	bf00      	nop
 801c89c:	3d800000 	.word	0x3d800000

0801c8a0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801c8a0:	4b01      	ldr	r3, [pc, #4]	; (801c8a8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801c8a2:	6018      	str	r0, [r3, #0]
 801c8a4:	4770      	bx	lr
 801c8a6:	bf00      	nop
 801c8a8:	20005840 	.word	0x20005840

0801c8ac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801c8ac:	4b06      	ldr	r3, [pc, #24]	; (801c8c8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801c8ae:	881a      	ldrh	r2, [r3, #0]
 801c8b0:	4282      	cmp	r2, r0
 801c8b2:	d807      	bhi.n	801c8c4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801c8b4:	4b05      	ldr	r3, [pc, #20]	; (801c8cc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801c8b6:	881b      	ldrh	r3, [r3, #0]
 801c8b8:	4413      	add	r3, r2
 801c8ba:	4298      	cmp	r0, r3
 801c8bc:	bfac      	ite	ge
 801c8be:	2000      	movge	r0, #0
 801c8c0:	2001      	movlt	r0, #1
 801c8c2:	4770      	bx	lr
 801c8c4:	2000      	movs	r0, #0
 801c8c6:	4770      	bx	lr
 801c8c8:	20005860 	.word	0x20005860
 801c8cc:	20005864 	.word	0x20005864

0801c8d0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801c8d0:	b508      	push	{r3, lr}
 801c8d2:	4601      	mov	r1, r0
 801c8d4:	f7ff ffea 	bl	801c8ac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801c8d8:	b118      	cbz	r0, 801c8e2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801c8da:	4b02      	ldr	r3, [pc, #8]	; (801c8e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801c8dc:	681b      	ldr	r3, [r3, #0]
 801c8de:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801c8e2:	bd08      	pop	{r3, pc}
 801c8e4:	20005844 	.word	0x20005844

0801c8e8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801c8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8ec:	4d28      	ldr	r5, [pc, #160]	; (801c990 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801c8ee:	682b      	ldr	r3, [r5, #0]
 801c8f0:	2b00      	cmp	r3, #0
 801c8f2:	d04a      	beq.n	801c98a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801c8f4:	4a27      	ldr	r2, [pc, #156]	; (801c994 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801c8f6:	4e28      	ldr	r6, [pc, #160]	; (801c998 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801c8f8:	8810      	ldrh	r0, [r2, #0]
 801c8fa:	f8b6 8000 	ldrh.w	r8, [r6]
 801c8fe:	4c27      	ldr	r4, [pc, #156]	; (801c99c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801c900:	4440      	add	r0, r8
 801c902:	4f27      	ldr	r7, [pc, #156]	; (801c9a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801c904:	1c41      	adds	r1, r0, #1
 801c906:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801c90a:	f021 0101 	bic.w	r1, r1, #1
 801c90e:	eb03 020e 	add.w	r2, r3, lr
 801c912:	0409      	lsls	r1, r1, #16
 801c914:	6022      	str	r2, [r4, #0]
 801c916:	0c09      	lsrs	r1, r1, #16
 801c918:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801c91c:	eb0e 010c 	add.w	r1, lr, ip
 801c920:	185a      	adds	r2, r3, r1
 801c922:	603a      	str	r2, [r7, #0]
 801c924:	220e      	movs	r2, #14
 801c926:	fb02 f208 	mul.w	r2, r2, r8
 801c92a:	3203      	adds	r2, #3
 801c92c:	f022 0203 	bic.w	r2, r2, #3
 801c930:	4411      	add	r1, r2
 801c932:	440b      	add	r3, r1
 801c934:	491b      	ldr	r1, [pc, #108]	; (801c9a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801c936:	600b      	str	r3, [r1, #0]
 801c938:	2300      	movs	r3, #0
 801c93a:	491b      	ldr	r1, [pc, #108]	; (801c9a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801c93c:	800b      	strh	r3, [r1, #0]
 801c93e:	491b      	ldr	r1, [pc, #108]	; (801c9ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801c940:	6809      	ldr	r1, [r1, #0]
 801c942:	eba1 010e 	sub.w	r1, r1, lr
 801c946:	eba1 010c 	sub.w	r1, r1, ip
 801c94a:	469c      	mov	ip, r3
 801c94c:	1a8a      	subs	r2, r1, r2
 801c94e:	4918      	ldr	r1, [pc, #96]	; (801c9b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801c950:	600a      	str	r2, [r1, #0]
 801c952:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c956:	4a17      	ldr	r2, [pc, #92]	; (801c9b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801c958:	8013      	strh	r3, [r2, #0]
 801c95a:	4283      	cmp	r3, r0
 801c95c:	d10d      	bne.n	801c97a <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801c95e:	8835      	ldrh	r5, [r6, #0]
 801c960:	2300      	movs	r3, #0
 801c962:	6838      	ldr	r0, [r7, #0]
 801c964:	240e      	movs	r4, #14
 801c966:	429d      	cmp	r5, r3
 801c968:	d90f      	bls.n	801c98a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801c96a:	fb04 0203 	mla	r2, r4, r3, r0
 801c96e:	3301      	adds	r3, #1
 801c970:	7b11      	ldrb	r1, [r2, #12]
 801c972:	f36f 1145 	bfc	r1, #5, #1
 801c976:	7311      	strb	r1, [r2, #12]
 801c978:	e7f5      	b.n	801c966 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801c97a:	682a      	ldr	r2, [r5, #0]
 801c97c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801c980:	6822      	ldr	r2, [r4, #0]
 801c982:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801c986:	3301      	adds	r3, #1
 801c988:	e7e7      	b.n	801c95a <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801c98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c98e:	bf00      	nop
 801c990:	20005844 	.word	0x20005844
 801c994:	20005860 	.word	0x20005860
 801c998:	20005864 	.word	0x20005864
 801c99c:	20005858 	.word	0x20005858
 801c9a0:	20005848 	.word	0x20005848
 801c9a4:	20005850 	.word	0x20005850
 801c9a8:	20005862 	.word	0x20005862
 801c9ac:	2000584c 	.word	0x2000584c
 801c9b0:	2000585c 	.word	0x2000585c
 801c9b4:	20005854 	.word	0x20005854

0801c9b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801c9b8:	4b10      	ldr	r3, [pc, #64]	; (801c9fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801c9ba:	b510      	push	{r4, lr}
 801c9bc:	681b      	ldr	r3, [r3, #0]
 801c9be:	b9db      	cbnz	r3, 801c9f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801c9c0:	b1d1      	cbz	r1, 801c9f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801c9c2:	4b0f      	ldr	r3, [pc, #60]	; (801ca00 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801c9c4:	240e      	movs	r4, #14
 801c9c6:	801a      	strh	r2, [r3, #0]
 801c9c8:	b292      	uxth	r2, r2
 801c9ca:	4b0e      	ldr	r3, [pc, #56]	; (801ca04 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801c9cc:	881b      	ldrh	r3, [r3, #0]
 801c9ce:	4413      	add	r3, r2
 801c9d0:	4362      	muls	r2, r4
 801c9d2:	2406      	movs	r4, #6
 801c9d4:	fb04 2203 	mla	r2, r4, r3, r2
 801c9d8:	428a      	cmp	r2, r1
 801c9da:	d305      	bcc.n	801c9e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801c9dc:	4b0a      	ldr	r3, [pc, #40]	; (801ca08 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801c9de:	2137      	movs	r1, #55	; 0x37
 801c9e0:	4a0a      	ldr	r2, [pc, #40]	; (801ca0c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801c9e2:	480b      	ldr	r0, [pc, #44]	; (801ca10 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801c9e4:	f00b fe58 	bl	8028698 <__assert_func>
 801c9e8:	4b0a      	ldr	r3, [pc, #40]	; (801ca14 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801c9ea:	6019      	str	r1, [r3, #0]
 801c9ec:	4b0a      	ldr	r3, [pc, #40]	; (801ca18 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801c9ee:	6018      	str	r0, [r3, #0]
 801c9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c9f4:	f7ff bf78 	b.w	801c8e8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801c9f8:	bd10      	pop	{r4, pc}
 801c9fa:	bf00      	nop
 801c9fc:	20005850 	.word	0x20005850
 801ca00:	20005864 	.word	0x20005864
 801ca04:	20005860 	.word	0x20005860
 801ca08:	0802ca2d 	.word	0x0802ca2d
 801ca0c:	0802ca86 	.word	0x0802ca86
 801ca10:	0802ca08 	.word	0x0802ca08
 801ca14:	2000584c 	.word	0x2000584c
 801ca18:	20005844 	.word	0x20005844

0801ca1c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801ca1c:	b470      	push	{r4, r5, r6}
 801ca1e:	4c07      	ldr	r4, [pc, #28]	; (801ca3c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801ca20:	4605      	mov	r5, r0
 801ca22:	4610      	mov	r0, r2
 801ca24:	9a03      	ldr	r2, [sp, #12]
 801ca26:	6826      	ldr	r6, [r4, #0]
 801ca28:	b936      	cbnz	r6, 801ca38 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801ca2a:	6025      	str	r5, [r4, #0]
 801ca2c:	4c04      	ldr	r4, [pc, #16]	; (801ca40 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801ca2e:	8021      	strh	r1, [r4, #0]
 801ca30:	4619      	mov	r1, r3
 801ca32:	bc70      	pop	{r4, r5, r6}
 801ca34:	f7ff bfc0 	b.w	801c9b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801ca38:	bc70      	pop	{r4, r5, r6}
 801ca3a:	4770      	bx	lr
 801ca3c:	20005868 	.word	0x20005868
 801ca40:	20005860 	.word	0x20005860

0801ca44 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801ca44:	b508      	push	{r3, lr}
 801ca46:	4b14      	ldr	r3, [pc, #80]	; (801ca98 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801ca48:	6819      	ldr	r1, [r3, #0]
 801ca4a:	b931      	cbnz	r1, 801ca5a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801ca4c:	4b13      	ldr	r3, [pc, #76]	; (801ca9c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801ca4e:	f240 3187 	movw	r1, #903	; 0x387
 801ca52:	4a13      	ldr	r2, [pc, #76]	; (801caa0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801ca54:	4813      	ldr	r0, [pc, #76]	; (801caa4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801ca56:	f00b fe1f 	bl	8028698 <__assert_func>
 801ca5a:	4a13      	ldr	r2, [pc, #76]	; (801caa8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801ca5c:	8803      	ldrh	r3, [r0, #0]
 801ca5e:	8812      	ldrh	r2, [r2, #0]
 801ca60:	4293      	cmp	r3, r2
 801ca62:	d204      	bcs.n	801ca6e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801ca64:	2214      	movs	r2, #20
 801ca66:	fb02 1303 	mla	r3, r2, r3, r1
 801ca6a:	8918      	ldrh	r0, [r3, #8]
 801ca6c:	bd08      	pop	{r3, pc}
 801ca6e:	490f      	ldr	r1, [pc, #60]	; (801caac <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801ca70:	8809      	ldrh	r1, [r1, #0]
 801ca72:	4411      	add	r1, r2
 801ca74:	428b      	cmp	r3, r1
 801ca76:	da06      	bge.n	801ca86 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801ca78:	1a9b      	subs	r3, r3, r2
 801ca7a:	4a0d      	ldr	r2, [pc, #52]	; (801cab0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801ca7c:	210e      	movs	r1, #14
 801ca7e:	6812      	ldr	r2, [r2, #0]
 801ca80:	fb01 2303 	mla	r3, r1, r3, r2
 801ca84:	e7f1      	b.n	801ca6a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801ca86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ca8a:	4293      	cmp	r3, r2
 801ca8c:	bf0a      	itet	eq
 801ca8e:	4b09      	ldreq	r3, [pc, #36]	; (801cab4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801ca90:	2000      	movne	r0, #0
 801ca92:	8818      	ldrheq	r0, [r3, #0]
 801ca94:	e7ea      	b.n	801ca6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801ca96:	bf00      	nop
 801ca98:	20005868 	.word	0x20005868
 801ca9c:	0802afe4 	.word	0x0802afe4
 801caa0:	0802cb33 	.word	0x0802cb33
 801caa4:	0802ca08 	.word	0x0802ca08
 801caa8:	20005860 	.word	0x20005860
 801caac:	20005864 	.word	0x20005864
 801cab0:	20005848 	.word	0x20005848
 801cab4:	200057d4 	.word	0x200057d4

0801cab8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801cab8:	b508      	push	{r3, lr}
 801caba:	4b14      	ldr	r3, [pc, #80]	; (801cb0c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801cabc:	6819      	ldr	r1, [r3, #0]
 801cabe:	b931      	cbnz	r1, 801cace <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801cac0:	4b13      	ldr	r3, [pc, #76]	; (801cb10 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801cac2:	f240 319b 	movw	r1, #923	; 0x39b
 801cac6:	4a13      	ldr	r2, [pc, #76]	; (801cb14 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801cac8:	4813      	ldr	r0, [pc, #76]	; (801cb18 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801caca:	f00b fde5 	bl	8028698 <__assert_func>
 801cace:	4a13      	ldr	r2, [pc, #76]	; (801cb1c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801cad0:	8803      	ldrh	r3, [r0, #0]
 801cad2:	8812      	ldrh	r2, [r2, #0]
 801cad4:	4293      	cmp	r3, r2
 801cad6:	d204      	bcs.n	801cae2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801cad8:	2214      	movs	r2, #20
 801cada:	fb02 1303 	mla	r3, r2, r3, r1
 801cade:	8958      	ldrh	r0, [r3, #10]
 801cae0:	bd08      	pop	{r3, pc}
 801cae2:	490f      	ldr	r1, [pc, #60]	; (801cb20 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801cae4:	8809      	ldrh	r1, [r1, #0]
 801cae6:	4411      	add	r1, r2
 801cae8:	428b      	cmp	r3, r1
 801caea:	da06      	bge.n	801cafa <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801caec:	1a9b      	subs	r3, r3, r2
 801caee:	4a0d      	ldr	r2, [pc, #52]	; (801cb24 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801caf0:	210e      	movs	r1, #14
 801caf2:	6812      	ldr	r2, [r2, #0]
 801caf4:	fb01 2303 	mla	r3, r1, r3, r2
 801caf8:	e7f1      	b.n	801cade <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801cafa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cafe:	4293      	cmp	r3, r2
 801cb00:	bf0a      	itet	eq
 801cb02:	4b09      	ldreq	r3, [pc, #36]	; (801cb28 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801cb04:	2000      	movne	r0, #0
 801cb06:	8818      	ldrheq	r0, [r3, #0]
 801cb08:	e7ea      	b.n	801cae0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801cb0a:	bf00      	nop
 801cb0c:	20005868 	.word	0x20005868
 801cb10:	0802afe4 	.word	0x0802afe4
 801cb14:	0802cb5f 	.word	0x0802cb5f
 801cb18:	0802ca08 	.word	0x0802ca08
 801cb1c:	20005860 	.word	0x20005860
 801cb20:	20005864 	.word	0x20005864
 801cb24:	20005848 	.word	0x20005848
 801cb28:	200057d6 	.word	0x200057d6

0801cb2c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801cb2c:	4b23      	ldr	r3, [pc, #140]	; (801cbbc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801cb2e:	b510      	push	{r4, lr}
 801cb30:	681c      	ldr	r4, [r3, #0]
 801cb32:	b934      	cbnz	r4, 801cb42 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801cb34:	4b22      	ldr	r3, [pc, #136]	; (801cbc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801cb36:	f240 31af 	movw	r1, #943	; 0x3af
 801cb3a:	4a22      	ldr	r2, [pc, #136]	; (801cbc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801cb3c:	4822      	ldr	r0, [pc, #136]	; (801cbc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801cb3e:	f00b fdab 	bl	8028698 <__assert_func>
 801cb42:	4a22      	ldr	r2, [pc, #136]	; (801cbcc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801cb44:	880b      	ldrh	r3, [r1, #0]
 801cb46:	8812      	ldrh	r2, [r2, #0]
 801cb48:	4293      	cmp	r3, r2
 801cb4a:	d211      	bcs.n	801cb70 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801cb4c:	2214      	movs	r2, #20
 801cb4e:	fb02 4303 	mla	r3, r2, r3, r4
 801cb52:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801cb56:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801cb5a:	8a1a      	ldrh	r2, [r3, #16]
 801cb5c:	8a5b      	ldrh	r3, [r3, #18]
 801cb5e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801cb62:	8004      	strh	r4, [r0, #0]
 801cb64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cb68:	8041      	strh	r1, [r0, #2]
 801cb6a:	8082      	strh	r2, [r0, #4]
 801cb6c:	80c3      	strh	r3, [r0, #6]
 801cb6e:	e00e      	b.n	801cb8e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801cb70:	4917      	ldr	r1, [pc, #92]	; (801cbd0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801cb72:	8809      	ldrh	r1, [r1, #0]
 801cb74:	4411      	add	r1, r2
 801cb76:	428b      	cmp	r3, r1
 801cb78:	da0a      	bge.n	801cb90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801cb7a:	1a9b      	subs	r3, r3, r2
 801cb7c:	4a15      	ldr	r2, [pc, #84]	; (801cbd4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801cb7e:	210e      	movs	r1, #14
 801cb80:	6812      	ldr	r2, [r2, #0]
 801cb82:	fb01 2303 	mla	r3, r1, r3, r2
 801cb86:	681a      	ldr	r2, [r3, #0]
 801cb88:	6002      	str	r2, [r0, #0]
 801cb8a:	685a      	ldr	r2, [r3, #4]
 801cb8c:	6042      	str	r2, [r0, #4]
 801cb8e:	bd10      	pop	{r4, pc}
 801cb90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cb94:	4293      	cmp	r3, r2
 801cb96:	d10b      	bne.n	801cbb0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801cb98:	4b0f      	ldr	r3, [pc, #60]	; (801cbd8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801cb9a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801cb9e:	4b0f      	ldr	r3, [pc, #60]	; (801cbdc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801cba0:	8081      	strh	r1, [r0, #4]
 801cba2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cba6:	2300      	movs	r3, #0
 801cba8:	80c2      	strh	r2, [r0, #6]
 801cbaa:	8003      	strh	r3, [r0, #0]
 801cbac:	8043      	strh	r3, [r0, #2]
 801cbae:	e7ee      	b.n	801cb8e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801cbb0:	2300      	movs	r3, #0
 801cbb2:	8003      	strh	r3, [r0, #0]
 801cbb4:	8043      	strh	r3, [r0, #2]
 801cbb6:	8083      	strh	r3, [r0, #4]
 801cbb8:	e7d8      	b.n	801cb6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801cbba:	bf00      	nop
 801cbbc:	20005868 	.word	0x20005868
 801cbc0:	0802afe4 	.word	0x0802afe4
 801cbc4:	0802cacc 	.word	0x0802cacc
 801cbc8:	0802ca08 	.word	0x0802ca08
 801cbcc:	20005860 	.word	0x20005860
 801cbd0:	20005864 	.word	0x20005864
 801cbd4:	20005848 	.word	0x20005848
 801cbd8:	200057d4 	.word	0x200057d4
 801cbdc:	200057d6 	.word	0x200057d6

0801cbe0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801cbe0:	4b18      	ldr	r3, [pc, #96]	; (801cc44 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801cbe2:	681b      	ldr	r3, [r3, #0]
 801cbe4:	b34b      	cbz	r3, 801cc3a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801cbe6:	4a18      	ldr	r2, [pc, #96]	; (801cc48 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801cbe8:	8800      	ldrh	r0, [r0, #0]
 801cbea:	8812      	ldrh	r2, [r2, #0]
 801cbec:	4290      	cmp	r0, r2
 801cbee:	d211      	bcs.n	801cc14 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801cbf0:	2214      	movs	r2, #20
 801cbf2:	fb02 3300 	mla	r3, r2, r0, r3
 801cbf6:	8a1a      	ldrh	r2, [r3, #16]
 801cbf8:	8919      	ldrh	r1, [r3, #8]
 801cbfa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801cbfe:	428a      	cmp	r2, r1
 801cc00:	db1d      	blt.n	801cc3e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801cc02:	8a58      	ldrh	r0, [r3, #18]
 801cc04:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801cc08:	895b      	ldrh	r3, [r3, #10]
 801cc0a:	4298      	cmp	r0, r3
 801cc0c:	bfac      	ite	ge
 801cc0e:	2000      	movge	r0, #0
 801cc10:	2001      	movlt	r0, #1
 801cc12:	4770      	bx	lr
 801cc14:	4b0d      	ldr	r3, [pc, #52]	; (801cc4c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801cc16:	881b      	ldrh	r3, [r3, #0]
 801cc18:	4413      	add	r3, r2
 801cc1a:	4298      	cmp	r0, r3
 801cc1c:	da0d      	bge.n	801cc3a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801cc1e:	4b0c      	ldr	r3, [pc, #48]	; (801cc50 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801cc20:	1a80      	subs	r0, r0, r2
 801cc22:	220e      	movs	r2, #14
 801cc24:	681b      	ldr	r3, [r3, #0]
 801cc26:	fb02 3300 	mla	r3, r2, r0, r3
 801cc2a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801cc2e:	891a      	ldrh	r2, [r3, #8]
 801cc30:	4291      	cmp	r1, r2
 801cc32:	db04      	blt.n	801cc3e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801cc34:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801cc38:	e7e6      	b.n	801cc08 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801cc3a:	2000      	movs	r0, #0
 801cc3c:	4770      	bx	lr
 801cc3e:	2001      	movs	r0, #1
 801cc40:	4770      	bx	lr
 801cc42:	bf00      	nop
 801cc44:	20005868 	.word	0x20005868
 801cc48:	20005860 	.word	0x20005860
 801cc4c:	20005864 	.word	0x20005864
 801cc50:	20005848 	.word	0x20005848

0801cc54 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801cc54:	b508      	push	{r3, lr}
 801cc56:	4b12      	ldr	r3, [pc, #72]	; (801cca0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801cc58:	6819      	ldr	r1, [r3, #0]
 801cc5a:	b931      	cbnz	r1, 801cc6a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801cc5c:	4b11      	ldr	r3, [pc, #68]	; (801cca4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801cc5e:	f240 31d3 	movw	r1, #979	; 0x3d3
 801cc62:	4a11      	ldr	r2, [pc, #68]	; (801cca8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801cc64:	4811      	ldr	r0, [pc, #68]	; (801ccac <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801cc66:	f00b fd17 	bl	8028698 <__assert_func>
 801cc6a:	8803      	ldrh	r3, [r0, #0]
 801cc6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cc70:	4293      	cmp	r3, r2
 801cc72:	d012      	beq.n	801cc9a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801cc74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cc78:	4293      	cmp	r3, r2
 801cc7a:	d103      	bne.n	801cc84 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801cc7c:	4b0c      	ldr	r3, [pc, #48]	; (801ccb0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801cc7e:	681b      	ldr	r3, [r3, #0]
 801cc80:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801cc82:	bd08      	pop	{r3, pc}
 801cc84:	4a0b      	ldr	r2, [pc, #44]	; (801ccb4 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801cc86:	6812      	ldr	r2, [r2, #0]
 801cc88:	b11a      	cbz	r2, 801cc92 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801cc8a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801cc8e:	2800      	cmp	r0, #0
 801cc90:	d1f7      	bne.n	801cc82 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801cc92:	2214      	movs	r2, #20
 801cc94:	4353      	muls	r3, r2
 801cc96:	58c8      	ldr	r0, [r1, r3]
 801cc98:	e7f3      	b.n	801cc82 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801cc9a:	2000      	movs	r0, #0
 801cc9c:	e7f1      	b.n	801cc82 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801cc9e:	bf00      	nop
 801cca0:	20005868 	.word	0x20005868
 801cca4:	0802afe4 	.word	0x0802afe4
 801cca8:	0802cb02 	.word	0x0802cb02
 801ccac:	0802ca08 	.word	0x0802ca08
 801ccb0:	200057e0 	.word	0x200057e0
 801ccb4:	20005844 	.word	0x20005844

0801ccb8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801ccb8:	8802      	ldrh	r2, [r0, #0]
 801ccba:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801ccbe:	429a      	cmp	r2, r3
 801ccc0:	d845      	bhi.n	801cd4e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801ccc2:	4b24      	ldr	r3, [pc, #144]	; (801cd54 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ccc4:	8818      	ldrh	r0, [r3, #0]
 801ccc6:	4282      	cmp	r2, r0
 801ccc8:	d221      	bcs.n	801cd0e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801ccca:	4b23      	ldr	r3, [pc, #140]	; (801cd58 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801cccc:	6819      	ldr	r1, [r3, #0]
 801ccce:	2314      	movs	r3, #20
 801ccd0:	fb03 1302 	mla	r3, r3, r2, r1
 801ccd4:	6858      	ldr	r0, [r3, #4]
 801ccd6:	2800      	cmp	r0, #0
 801ccd8:	d03a      	beq.n	801cd50 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801ccda:	4920      	ldr	r1, [pc, #128]	; (801cd5c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801ccdc:	6809      	ldr	r1, [r1, #0]
 801ccde:	2900      	cmp	r1, #0
 801cce0:	d036      	beq.n	801cd50 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801cce2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cce6:	2900      	cmp	r1, #0
 801cce8:	d032      	beq.n	801cd50 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801ccea:	891a      	ldrh	r2, [r3, #8]
 801ccec:	8958      	ldrh	r0, [r3, #10]
 801ccee:	4350      	muls	r0, r2
 801ccf0:	7c5a      	ldrb	r2, [r3, #17]
 801ccf2:	7cdb      	ldrb	r3, [r3, #19]
 801ccf4:	0952      	lsrs	r2, r2, #5
 801ccf6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ccfa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ccfe:	2b0b      	cmp	r3, #11
 801cd00:	bf18      	it	ne
 801cd02:	0040      	lslne	r0, r0, #1
 801cd04:	3003      	adds	r0, #3
 801cd06:	f020 0003 	bic.w	r0, r0, #3
 801cd0a:	4408      	add	r0, r1
 801cd0c:	4770      	bx	lr
 801cd0e:	4b14      	ldr	r3, [pc, #80]	; (801cd60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801cd10:	881b      	ldrh	r3, [r3, #0]
 801cd12:	4403      	add	r3, r0
 801cd14:	429a      	cmp	r2, r3
 801cd16:	da1a      	bge.n	801cd4e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801cd18:	4b12      	ldr	r3, [pc, #72]	; (801cd64 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801cd1a:	1a10      	subs	r0, r2, r0
 801cd1c:	210e      	movs	r1, #14
 801cd1e:	681b      	ldr	r3, [r3, #0]
 801cd20:	fb01 3000 	mla	r0, r1, r0, r3
 801cd24:	7b03      	ldrb	r3, [r0, #12]
 801cd26:	f003 031f 	and.w	r3, r3, #31
 801cd2a:	2b0b      	cmp	r3, #11
 801cd2c:	d10b      	bne.n	801cd46 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801cd2e:	8903      	ldrh	r3, [r0, #8]
 801cd30:	8940      	ldrh	r0, [r0, #10]
 801cd32:	4358      	muls	r0, r3
 801cd34:	4b09      	ldr	r3, [pc, #36]	; (801cd5c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801cd36:	3003      	adds	r0, #3
 801cd38:	6819      	ldr	r1, [r3, #0]
 801cd3a:	f020 0303 	bic.w	r3, r0, #3
 801cd3e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801cd42:	4418      	add	r0, r3
 801cd44:	4770      	bx	lr
 801cd46:	2b0d      	cmp	r3, #13
 801cd48:	d101      	bne.n	801cd4e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801cd4a:	300d      	adds	r0, #13
 801cd4c:	4770      	bx	lr
 801cd4e:	2000      	movs	r0, #0
 801cd50:	4770      	bx	lr
 801cd52:	bf00      	nop
 801cd54:	20005860 	.word	0x20005860
 801cd58:	20005868 	.word	0x20005868
 801cd5c:	20005844 	.word	0x20005844
 801cd60:	20005864 	.word	0x20005864
 801cd64:	20005848 	.word	0x20005848

0801cd68 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801cd68:	4b19      	ldr	r3, [pc, #100]	; (801cdd0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801cd6a:	6819      	ldr	r1, [r3, #0]
 801cd6c:	8803      	ldrh	r3, [r0, #0]
 801cd6e:	b1e9      	cbz	r1, 801cdac <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801cd70:	4a18      	ldr	r2, [pc, #96]	; (801cdd4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801cd72:	8812      	ldrh	r2, [r2, #0]
 801cd74:	429a      	cmp	r2, r3
 801cd76:	d90a      	bls.n	801cd8e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801cd78:	2214      	movs	r2, #20
 801cd7a:	fb02 1303 	mla	r3, r2, r3, r1
 801cd7e:	7c58      	ldrb	r0, [r3, #17]
 801cd80:	0942      	lsrs	r2, r0, #5
 801cd82:	7cd8      	ldrb	r0, [r3, #19]
 801cd84:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801cd88:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801cd8c:	4770      	bx	lr
 801cd8e:	4912      	ldr	r1, [pc, #72]	; (801cdd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801cd90:	8809      	ldrh	r1, [r1, #0]
 801cd92:	4411      	add	r1, r2
 801cd94:	428b      	cmp	r3, r1
 801cd96:	da09      	bge.n	801cdac <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801cd98:	1a9b      	subs	r3, r3, r2
 801cd9a:	4a10      	ldr	r2, [pc, #64]	; (801cddc <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801cd9c:	210e      	movs	r1, #14
 801cd9e:	6812      	ldr	r2, [r2, #0]
 801cda0:	fb01 2303 	mla	r3, r1, r3, r2
 801cda4:	7b18      	ldrb	r0, [r3, #12]
 801cda6:	f000 001f 	and.w	r0, r0, #31
 801cdaa:	4770      	bx	lr
 801cdac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cdb0:	4293      	cmp	r3, r2
 801cdb2:	d10a      	bne.n	801cdca <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801cdb4:	4b0a      	ldr	r3, [pc, #40]	; (801cde0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801cdb6:	681b      	ldr	r3, [r3, #0]
 801cdb8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801cdbc:	b10a      	cbz	r2, 801cdc2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801cdbe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801cdc0:	b900      	cbnz	r0, 801cdc4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801cdc2:	6898      	ldr	r0, [r3, #8]
 801cdc4:	6803      	ldr	r3, [r0, #0]
 801cdc6:	6a1b      	ldr	r3, [r3, #32]
 801cdc8:	4718      	bx	r3
 801cdca:	2000      	movs	r0, #0
 801cdcc:	4770      	bx	lr
 801cdce:	bf00      	nop
 801cdd0:	20005868 	.word	0x20005868
 801cdd4:	20005860 	.word	0x20005860
 801cdd8:	20005864 	.word	0x20005864
 801cddc:	20005848 	.word	0x20005848
 801cde0:	200057e0 	.word	0x200057e0

0801cde4 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801cde4:	2010      	movs	r0, #16
 801cde6:	4770      	bx	lr

0801cde8 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801cde8:	2000      	movs	r0, #0
 801cdea:	4770      	bx	lr

0801cdec <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 801cdec:	00d2      	lsls	r2, r2, #3
 801cdee:	0209      	lsls	r1, r1, #8
 801cdf0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801cdf4:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 801cdf8:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 801cdfc:	4310      	orrs	r0, r2
 801cdfe:	4770      	bx	lr

0801ce00 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 801ce00:	0a09      	lsrs	r1, r1, #8
 801ce02:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 801ce06:	4770      	bx	lr

0801ce08 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 801ce08:	08c9      	lsrs	r1, r1, #3
 801ce0a:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 801ce0e:	4770      	bx	lr

0801ce10 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 801ce10:	00c9      	lsls	r1, r1, #3
 801ce12:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 801ce16:	4770      	bx	lr

0801ce18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ce18:	2bff      	cmp	r3, #255	; 0xff
 801ce1a:	d050      	beq.n	801cebe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801ce1c:	2a0b      	cmp	r2, #11
 801ce1e:	d04a      	beq.n	801ceb6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ce20:	d80e      	bhi.n	801ce40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801ce22:	2a03      	cmp	r2, #3
 801ce24:	d03f      	beq.n	801cea6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ce26:	d804      	bhi.n	801ce32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce28:	2a01      	cmp	r2, #1
 801ce2a:	d03e      	beq.n	801ceaa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801ce2c:	d93f      	bls.n	801ceae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801ce2e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801ce30:	4770      	bx	lr
 801ce32:	2a09      	cmp	r2, #9
 801ce34:	d03f      	beq.n	801ceb6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ce36:	d83c      	bhi.n	801ceb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ce38:	2a08      	cmp	r2, #8
 801ce3a:	d03a      	beq.n	801ceb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ce3c:	2000      	movs	r0, #0
 801ce3e:	4770      	bx	lr
 801ce40:	2a2f      	cmp	r2, #47	; 0x2f
 801ce42:	d024      	beq.n	801ce8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801ce44:	d80d      	bhi.n	801ce62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801ce46:	2a2d      	cmp	r2, #45	; 0x2d
 801ce48:	d014      	beq.n	801ce74 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801ce4a:	d826      	bhi.n	801ce9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801ce4c:	2a2c      	cmp	r2, #44	; 0x2c
 801ce4e:	d1f5      	bne.n	801ce3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ce50:	684b      	ldr	r3, [r1, #4]
 801ce52:	781b      	ldrb	r3, [r3, #0]
 801ce54:	2b01      	cmp	r3, #1
 801ce56:	d018      	beq.n	801ce8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801ce58:	d323      	bcc.n	801cea2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801ce5a:	2b02      	cmp	r3, #2
 801ce5c:	d1ee      	bne.n	801ce3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ce5e:	6880      	ldr	r0, [r0, #8]
 801ce60:	4770      	bx	lr
 801ce62:	2a31      	cmp	r2, #49	; 0x31
 801ce64:	d004      	beq.n	801ce70 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801ce66:	d328      	bcc.n	801ceba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ce68:	2a32      	cmp	r2, #50	; 0x32
 801ce6a:	d026      	beq.n	801ceba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ce6c:	2a33      	cmp	r2, #51	; 0x33
 801ce6e:	d1e5      	bne.n	801ce3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ce70:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801ce72:	4770      	bx	lr
 801ce74:	684b      	ldr	r3, [r1, #4]
 801ce76:	781b      	ldrb	r3, [r3, #0]
 801ce78:	2b01      	cmp	r3, #1
 801ce7a:	d004      	beq.n	801ce86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce7c:	d30b      	bcc.n	801ce96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ce7e:	2b02      	cmp	r3, #2
 801ce80:	d1dc      	bne.n	801ce3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ce82:	6900      	ldr	r0, [r0, #16]
 801ce84:	4770      	bx	lr
 801ce86:	6a00      	ldr	r0, [r0, #32]
 801ce88:	4770      	bx	lr
 801ce8a:	6980      	ldr	r0, [r0, #24]
 801ce8c:	4770      	bx	lr
 801ce8e:	684b      	ldr	r3, [r1, #4]
 801ce90:	781b      	ldrb	r3, [r3, #0]
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	d1d2      	bne.n	801ce3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ce96:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801ce98:	4770      	bx	lr
 801ce9a:	684b      	ldr	r3, [r1, #4]
 801ce9c:	781b      	ldrb	r3, [r3, #0]
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	d1cc      	bne.n	801ce3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cea2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801cea4:	4770      	bx	lr
 801cea6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801cea8:	4770      	bx	lr
 801ceaa:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801ceac:	4770      	bx	lr
 801ceae:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801ceb0:	4770      	bx	lr
 801ceb2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801ceb4:	4770      	bx	lr
 801ceb6:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801ceb8:	4770      	bx	lr
 801ceba:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801cebc:	4770      	bx	lr
 801cebe:	2a0b      	cmp	r2, #11
 801cec0:	d049      	beq.n	801cf56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801cec2:	d80e      	bhi.n	801cee2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801cec4:	2a03      	cmp	r2, #3
 801cec6:	d040      	beq.n	801cf4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801cec8:	d804      	bhi.n	801ced4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801ceca:	2a01      	cmp	r2, #1
 801cecc:	d03f      	beq.n	801cf4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801cece:	d940      	bls.n	801cf52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801ced0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801ced2:	4770      	bx	lr
 801ced4:	2a09      	cmp	r2, #9
 801ced6:	d03e      	beq.n	801cf56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801ced8:	d801      	bhi.n	801cede <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801ceda:	2a08      	cmp	r2, #8
 801cedc:	d1ae      	bne.n	801ce3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cede:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801cee0:	4770      	bx	lr
 801cee2:	2a2f      	cmp	r2, #47	; 0x2f
 801cee4:	d024      	beq.n	801cf30 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801cee6:	d80d      	bhi.n	801cf04 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801cee8:	2a2d      	cmp	r2, #45	; 0x2d
 801ceea:	d014      	beq.n	801cf16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801ceec:	d826      	bhi.n	801cf3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801ceee:	2a2c      	cmp	r2, #44	; 0x2c
 801cef0:	d1a4      	bne.n	801ce3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cef2:	684b      	ldr	r3, [r1, #4]
 801cef4:	781b      	ldrb	r3, [r3, #0]
 801cef6:	2b01      	cmp	r3, #1
 801cef8:	d018      	beq.n	801cf2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801cefa:	d324      	bcc.n	801cf46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801cefc:	2b02      	cmp	r3, #2
 801cefe:	d19d      	bne.n	801ce3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf00:	68c0      	ldr	r0, [r0, #12]
 801cf02:	4770      	bx	lr
 801cf04:	2a31      	cmp	r2, #49	; 0x31
 801cf06:	d004      	beq.n	801cf12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801cf08:	d327      	bcc.n	801cf5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801cf0a:	2a32      	cmp	r2, #50	; 0x32
 801cf0c:	d025      	beq.n	801cf5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801cf0e:	2a33      	cmp	r2, #51	; 0x33
 801cf10:	d194      	bne.n	801ce3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf12:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801cf14:	4770      	bx	lr
 801cf16:	684b      	ldr	r3, [r1, #4]
 801cf18:	781b      	ldrb	r3, [r3, #0]
 801cf1a:	2b01      	cmp	r3, #1
 801cf1c:	d004      	beq.n	801cf28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801cf1e:	d30b      	bcc.n	801cf38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801cf20:	2b02      	cmp	r3, #2
 801cf22:	d18b      	bne.n	801ce3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf24:	6940      	ldr	r0, [r0, #20]
 801cf26:	4770      	bx	lr
 801cf28:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801cf2a:	4770      	bx	lr
 801cf2c:	69c0      	ldr	r0, [r0, #28]
 801cf2e:	4770      	bx	lr
 801cf30:	684b      	ldr	r3, [r1, #4]
 801cf32:	781b      	ldrb	r3, [r3, #0]
 801cf34:	2b00      	cmp	r3, #0
 801cf36:	d181      	bne.n	801ce3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf38:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801cf3a:	4770      	bx	lr
 801cf3c:	684b      	ldr	r3, [r1, #4]
 801cf3e:	781b      	ldrb	r3, [r3, #0]
 801cf40:	2b00      	cmp	r3, #0
 801cf42:	f47f af7b 	bne.w	801ce3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cf46:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801cf48:	4770      	bx	lr
 801cf4a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801cf4c:	4770      	bx	lr
 801cf4e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801cf50:	4770      	bx	lr
 801cf52:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801cf54:	4770      	bx	lr
 801cf56:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801cf58:	4770      	bx	lr
 801cf5a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801cf5c:	4770      	bx	lr

0801cf5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cf5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf62:	b087      	sub	sp, #28
 801cf64:	9815      	ldr	r0, [sp, #84]	; 0x54
 801cf66:	9205      	str	r2, [sp, #20]
 801cf68:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801cf6c:	9101      	str	r1, [sp, #4]
 801cf6e:	9202      	str	r2, [sp, #8]
 801cf70:	6841      	ldr	r1, [r0, #4]
 801cf72:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801cf76:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801cf7a:	fb01 2404 	mla	r4, r1, r4, r2
 801cf7e:	6802      	ldr	r2, [r0, #0]
 801cf80:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801cf84:	f8de 2000 	ldr.w	r2, [lr]
 801cf88:	9203      	str	r2, [sp, #12]
 801cf8a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801cf8e:	3204      	adds	r2, #4
 801cf90:	9204      	str	r2, [sp, #16]
 801cf92:	9a02      	ldr	r2, [sp, #8]
 801cf94:	43d6      	mvns	r6, r2
 801cf96:	b2f6      	uxtb	r6, r6
 801cf98:	9a01      	ldr	r2, [sp, #4]
 801cf9a:	2a00      	cmp	r2, #0
 801cf9c:	dc03      	bgt.n	801cfa6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801cf9e:	9a05      	ldr	r2, [sp, #20]
 801cfa0:	2a00      	cmp	r2, #0
 801cfa2:	f340 8129 	ble.w	801d1f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cfa6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cfa8:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801cfac:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801cfb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cfb2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801cfb6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	dd0e      	ble.n	801cfdc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801cfbe:	1408      	asrs	r0, r1, #16
 801cfc0:	d405      	bmi.n	801cfce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cfc2:	4560      	cmp	r0, ip
 801cfc4:	da03      	bge.n	801cfce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cfc6:	1410      	asrs	r0, r2, #16
 801cfc8:	d401      	bmi.n	801cfce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cfca:	42b8      	cmp	r0, r7
 801cfcc:	db07      	blt.n	801cfde <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801cfce:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cfd0:	3b01      	subs	r3, #1
 801cfd2:	3402      	adds	r4, #2
 801cfd4:	4401      	add	r1, r0
 801cfd6:	9814      	ldr	r0, [sp, #80]	; 0x50
 801cfd8:	4402      	add	r2, r0
 801cfda:	e7ee      	b.n	801cfba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cfdc:	d071      	beq.n	801d0c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cfde:	1e58      	subs	r0, r3, #1
 801cfe0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cfe2:	fb05 1500 	mla	r5, r5, r0, r1
 801cfe6:	142d      	asrs	r5, r5, #16
 801cfe8:	d45f      	bmi.n	801d0aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801cfea:	4565      	cmp	r5, ip
 801cfec:	da5d      	bge.n	801d0aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801cfee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801cff0:	fb05 2000 	mla	r0, r5, r0, r2
 801cff4:	1400      	asrs	r0, r0, #16
 801cff6:	d458      	bmi.n	801d0aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801cff8:	42b8      	cmp	r0, r7
 801cffa:	da56      	bge.n	801d0aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801cffc:	4699      	mov	r9, r3
 801cffe:	46a2      	mov	sl, r4
 801d000:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801d004:	f1b9 0f00 	cmp.w	r9, #0
 801d008:	dd57      	ble.n	801d0ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801d00a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d00e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801d012:	9803      	ldr	r0, [sp, #12]
 801d014:	140d      	asrs	r5, r1, #16
 801d016:	f109 39ff 	add.w	r9, r9, #4294967295
 801d01a:	fb07 000c 	mla	r0, r7, ip, r0
 801d01e:	5d40      	ldrb	r0, [r0, r5]
 801d020:	9d04      	ldr	r5, [sp, #16]
 801d022:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801d026:	f8ba 5000 	ldrh.w	r5, [sl]
 801d02a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d02e:	122f      	asrs	r7, r5, #8
 801d030:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801d034:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d038:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d03c:	00ed      	lsls	r5, r5, #3
 801d03e:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801d042:	fb17 f706 	smulbb	r7, r7, r6
 801d046:	b2ed      	uxtb	r5, r5
 801d048:	fb18 f806 	smulbb	r8, r8, r6
 801d04c:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801d050:	10c7      	asrs	r7, r0, #3
 801d052:	fb15 f506 	smulbb	r5, r5, r6
 801d056:	00c0      	lsls	r0, r0, #3
 801d058:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d05c:	fa1f fc8c 	uxth.w	ip, ip
 801d060:	b2c0      	uxtb	r0, r0
 801d062:	fb07 870b 	mla	r7, r7, fp, r8
 801d066:	fb00 500b 	mla	r0, r0, fp, r5
 801d06a:	f10c 0501 	add.w	r5, ip, #1
 801d06e:	b2bf      	uxth	r7, r7
 801d070:	b280      	uxth	r0, r0
 801d072:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d076:	f107 0801 	add.w	r8, r7, #1
 801d07a:	1c45      	adds	r5, r0, #1
 801d07c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801d080:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d084:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d088:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d08a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801d08e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d092:	4401      	add	r1, r0
 801d094:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d098:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d09a:	ea4c 0c05 	orr.w	ip, ip, r5
 801d09e:	4402      	add	r2, r0
 801d0a0:	ea4c 0c08 	orr.w	ip, ip, r8
 801d0a4:	f82a cb02 	strh.w	ip, [sl], #2
 801d0a8:	e7ac      	b.n	801d004 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d0aa:	f04f 0800 	mov.w	r8, #0
 801d0ae:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801d0b2:	eb03 0008 	add.w	r0, r3, r8
 801d0b6:	2800      	cmp	r0, #0
 801d0b8:	dc41      	bgt.n	801d13e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801d0ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d0be:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d0c2:	9b01      	ldr	r3, [sp, #4]
 801d0c4:	2b00      	cmp	r3, #0
 801d0c6:	f340 8097 	ble.w	801d1f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d0ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d0ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d0d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d0d4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d0d8:	eef0 6a62 	vmov.f32	s13, s5
 801d0dc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d0e0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d0e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d0e8:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801d0ec:	eef0 6a43 	vmov.f32	s13, s6
 801d0f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d0f4:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801d0f8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d0fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d100:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d104:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d108:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d10c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d110:	ee12 2a90 	vmov	r2, s5
 801d114:	eef0 2a47 	vmov.f32	s5, s14
 801d118:	fb92 f3f3 	sdiv	r3, r2, r3
 801d11c:	ee13 2a10 	vmov	r2, s6
 801d120:	9313      	str	r3, [sp, #76]	; 0x4c
 801d122:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d124:	eeb0 3a67 	vmov.f32	s6, s15
 801d128:	fb92 f3f3 	sdiv	r3, r2, r3
 801d12c:	9314      	str	r3, [sp, #80]	; 0x50
 801d12e:	9b01      	ldr	r3, [sp, #4]
 801d130:	9a05      	ldr	r2, [sp, #20]
 801d132:	3b01      	subs	r3, #1
 801d134:	9301      	str	r3, [sp, #4]
 801d136:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d138:	bf08      	it	eq
 801d13a:	4613      	moveq	r3, r2
 801d13c:	e72c      	b.n	801cf98 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d13e:	140f      	asrs	r7, r1, #16
 801d140:	d453      	bmi.n	801d1ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d142:	f8de 5008 	ldr.w	r5, [lr, #8]
 801d146:	42bd      	cmp	r5, r7
 801d148:	dd4f      	ble.n	801d1ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d14a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d14e:	d44c      	bmi.n	801d1ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d150:	f8de 000c 	ldr.w	r0, [lr, #12]
 801d154:	4560      	cmp	r0, ip
 801d156:	dd48      	ble.n	801d1ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d158:	9803      	ldr	r0, [sp, #12]
 801d15a:	b22d      	sxth	r5, r5
 801d15c:	fb0c 0505 	mla	r5, ip, r5, r0
 801d160:	5de8      	ldrb	r0, [r5, r7]
 801d162:	9d04      	ldr	r5, [sp, #16]
 801d164:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801d168:	f06f 0501 	mvn.w	r5, #1
 801d16c:	fb05 fb08 	mul.w	fp, r5, r8
 801d170:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801d174:	f834 500b 	ldrh.w	r5, [r4, fp]
 801d178:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d17c:	122f      	asrs	r7, r5, #8
 801d17e:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801d182:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d186:	00ed      	lsls	r5, r5, #3
 801d188:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801d18c:	fb17 f706 	smulbb	r7, r7, r6
 801d190:	b2ed      	uxtb	r5, r5
 801d192:	fb19 f906 	smulbb	r9, r9, r6
 801d196:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801d19a:	10c7      	asrs	r7, r0, #3
 801d19c:	fb15 f506 	smulbb	r5, r5, r6
 801d1a0:	00c0      	lsls	r0, r0, #3
 801d1a2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d1a6:	fa1f fc8c 	uxth.w	ip, ip
 801d1aa:	b2c0      	uxtb	r0, r0
 801d1ac:	fb07 970a 	mla	r7, r7, sl, r9
 801d1b0:	fb00 500a 	mla	r0, r0, sl, r5
 801d1b4:	f10c 0501 	add.w	r5, ip, #1
 801d1b8:	b2bf      	uxth	r7, r7
 801d1ba:	b280      	uxth	r0, r0
 801d1bc:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801d1c0:	f107 0901 	add.w	r9, r7, #1
 801d1c4:	1c45      	adds	r5, r0, #1
 801d1c6:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801d1ca:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801d1ce:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801d1d2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801d1d6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801d1da:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801d1de:	ea4c 0c05 	orr.w	ip, ip, r5
 801d1e2:	ea4c 0c09 	orr.w	ip, ip, r9
 801d1e6:	f824 c00b 	strh.w	ip, [r4, fp]
 801d1ea:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d1ec:	f108 38ff 	add.w	r8, r8, #4294967295
 801d1f0:	4401      	add	r1, r0
 801d1f2:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d1f4:	4402      	add	r2, r0
 801d1f6:	e75c      	b.n	801d0b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d1f8:	b007      	add	sp, #28
 801d1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d1fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d1fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d202:	b085      	sub	sp, #20
 801d204:	4693      	mov	fp, r2
 801d206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d20a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d20c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d20e:	6870      	ldr	r0, [r6, #4]
 801d210:	9100      	str	r1, [sp, #0]
 801d212:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d216:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801d21a:	fb00 2404 	mla	r4, r0, r4, r2
 801d21e:	6832      	ldr	r2, [r6, #0]
 801d220:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d224:	682a      	ldr	r2, [r5, #0]
 801d226:	9201      	str	r2, [sp, #4]
 801d228:	686a      	ldr	r2, [r5, #4]
 801d22a:	3204      	adds	r2, #4
 801d22c:	9202      	str	r2, [sp, #8]
 801d22e:	9a00      	ldr	r2, [sp, #0]
 801d230:	2a00      	cmp	r2, #0
 801d232:	dc03      	bgt.n	801d23c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d234:	f1bb 0f00 	cmp.w	fp, #0
 801d238:	f340 80a0 	ble.w	801d37c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801d23c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d23e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d242:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d246:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d248:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d24c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d250:	2b00      	cmp	r3, #0
 801d252:	dd0c      	ble.n	801d26e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d254:	1406      	asrs	r6, r0, #16
 801d256:	d405      	bmi.n	801d264 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d258:	454e      	cmp	r6, r9
 801d25a:	da03      	bge.n	801d264 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d25c:	1416      	asrs	r6, r2, #16
 801d25e:	d401      	bmi.n	801d264 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d260:	4546      	cmp	r6, r8
 801d262:	db05      	blt.n	801d270 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d264:	4470      	add	r0, lr
 801d266:	4462      	add	r2, ip
 801d268:	3b01      	subs	r3, #1
 801d26a:	3402      	adds	r4, #2
 801d26c:	e7f0      	b.n	801d250 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d26e:	d00f      	beq.n	801d290 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d270:	1e5e      	subs	r6, r3, #1
 801d272:	fb0e 0706 	mla	r7, lr, r6, r0
 801d276:	143f      	asrs	r7, r7, #16
 801d278:	d541      	bpl.n	801d2fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801d27a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801d27e:	4698      	mov	r8, r3
 801d280:	9603      	str	r6, [sp, #12]
 801d282:	f1b8 0f00 	cmp.w	r8, #0
 801d286:	dc59      	bgt.n	801d33c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d288:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d28c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d290:	9b00      	ldr	r3, [sp, #0]
 801d292:	2b00      	cmp	r3, #0
 801d294:	dd72      	ble.n	801d37c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801d296:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d29a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d29c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d2a0:	eeb0 6a62 	vmov.f32	s12, s5
 801d2a4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d2a8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d2ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d2b0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d2b4:	eeb0 6a43 	vmov.f32	s12, s6
 801d2b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d2bc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d2c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d2c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d2c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d2cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d2d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d2d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d2d8:	ee12 2a90 	vmov	r2, s5
 801d2dc:	eef0 2a47 	vmov.f32	s5, s14
 801d2e0:	fb92 fef3 	sdiv	lr, r2, r3
 801d2e4:	ee13 2a10 	vmov	r2, s6
 801d2e8:	eeb0 3a67 	vmov.f32	s6, s15
 801d2ec:	fb92 fcf3 	sdiv	ip, r2, r3
 801d2f0:	9b00      	ldr	r3, [sp, #0]
 801d2f2:	3b01      	subs	r3, #1
 801d2f4:	9300      	str	r3, [sp, #0]
 801d2f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d2f8:	bf08      	it	eq
 801d2fa:	465b      	moveq	r3, fp
 801d2fc:	e797      	b.n	801d22e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d2fe:	454f      	cmp	r7, r9
 801d300:	dabb      	bge.n	801d27a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d302:	fb0c 2606 	mla	r6, ip, r6, r2
 801d306:	1436      	asrs	r6, r6, #16
 801d308:	d4b7      	bmi.n	801d27a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d30a:	4546      	cmp	r6, r8
 801d30c:	dab5      	bge.n	801d27a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d30e:	461e      	mov	r6, r3
 801d310:	46a0      	mov	r8, r4
 801d312:	2e00      	cmp	r6, #0
 801d314:	ddb8      	ble.n	801d288 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d316:	1417      	asrs	r7, r2, #16
 801d318:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801d31c:	9901      	ldr	r1, [sp, #4]
 801d31e:	ea4f 4920 	mov.w	r9, r0, asr #16
 801d322:	4462      	add	r2, ip
 801d324:	4470      	add	r0, lr
 801d326:	fb0a 1707 	mla	r7, sl, r7, r1
 801d32a:	9902      	ldr	r1, [sp, #8]
 801d32c:	3e01      	subs	r6, #1
 801d32e:	f817 7009 	ldrb.w	r7, [r7, r9]
 801d332:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801d336:	f828 7b02 	strh.w	r7, [r8], #2
 801d33a:	e7ea      	b.n	801d312 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d33c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d340:	d417      	bmi.n	801d372 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d342:	68ae      	ldr	r6, [r5, #8]
 801d344:	454e      	cmp	r6, r9
 801d346:	dd14      	ble.n	801d372 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d348:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d34c:	d411      	bmi.n	801d372 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d34e:	68ef      	ldr	r7, [r5, #12]
 801d350:	4557      	cmp	r7, sl
 801d352:	dd0e      	ble.n	801d372 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d354:	9f01      	ldr	r7, [sp, #4]
 801d356:	b236      	sxth	r6, r6
 801d358:	f06f 0101 	mvn.w	r1, #1
 801d35c:	fb0a 7606 	mla	r6, sl, r6, r7
 801d360:	9f02      	ldr	r7, [sp, #8]
 801d362:	f816 6009 	ldrb.w	r6, [r6, r9]
 801d366:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801d36a:	fb01 f608 	mul.w	r6, r1, r8
 801d36e:	9903      	ldr	r1, [sp, #12]
 801d370:	538f      	strh	r7, [r1, r6]
 801d372:	4470      	add	r0, lr
 801d374:	4462      	add	r2, ip
 801d376:	f108 38ff 	add.w	r8, r8, #4294967295
 801d37a:	e782      	b.n	801d282 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d37c:	b005      	add	sp, #20
 801d37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d382 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d382:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d386:	b087      	sub	sp, #28
 801d388:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d38a:	9205      	str	r2, [sp, #20]
 801d38c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d390:	9102      	str	r1, [sp, #8]
 801d392:	9203      	str	r2, [sp, #12]
 801d394:	6861      	ldr	r1, [r4, #4]
 801d396:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801d39a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801d39e:	fb01 2000 	mla	r0, r1, r0, r2
 801d3a2:	6822      	ldr	r2, [r4, #0]
 801d3a4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801d3a8:	9200      	str	r2, [sp, #0]
 801d3aa:	f8dc 2000 	ldr.w	r2, [ip]
 801d3ae:	9204      	str	r2, [sp, #16]
 801d3b0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d3b4:	3204      	adds	r2, #4
 801d3b6:	9201      	str	r2, [sp, #4]
 801d3b8:	9a03      	ldr	r2, [sp, #12]
 801d3ba:	43d5      	mvns	r5, r2
 801d3bc:	b2ed      	uxtb	r5, r5
 801d3be:	9a02      	ldr	r2, [sp, #8]
 801d3c0:	2a00      	cmp	r2, #0
 801d3c2:	dc03      	bgt.n	801d3cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d3c4:	9a05      	ldr	r2, [sp, #20]
 801d3c6:	2a00      	cmp	r2, #0
 801d3c8:	f340 812c 	ble.w	801d624 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801d3cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d3ce:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d3d2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d3d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d3d8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d3dc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d3e0:	2b00      	cmp	r3, #0
 801d3e2:	dd10      	ble.n	801d406 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d3e4:	140c      	asrs	r4, r1, #16
 801d3e6:	d405      	bmi.n	801d3f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d3e8:	4574      	cmp	r4, lr
 801d3ea:	da03      	bge.n	801d3f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d3ec:	1414      	asrs	r4, r2, #16
 801d3ee:	d401      	bmi.n	801d3f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d3f0:	42bc      	cmp	r4, r7
 801d3f2:	db09      	blt.n	801d408 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d3f4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d3f6:	3b01      	subs	r3, #1
 801d3f8:	9800      	ldr	r0, [sp, #0]
 801d3fa:	4421      	add	r1, r4
 801d3fc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d3fe:	3002      	adds	r0, #2
 801d400:	4422      	add	r2, r4
 801d402:	9000      	str	r0, [sp, #0]
 801d404:	e7ec      	b.n	801d3e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801d406:	d071      	beq.n	801d4ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801d408:	1e5c      	subs	r4, r3, #1
 801d40a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d40c:	fb06 1604 	mla	r6, r6, r4, r1
 801d410:	1436      	asrs	r6, r6, #16
 801d412:	d45d      	bmi.n	801d4d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d414:	4576      	cmp	r6, lr
 801d416:	da5b      	bge.n	801d4d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d418:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d41a:	fb06 2404 	mla	r4, r6, r4, r2
 801d41e:	1424      	asrs	r4, r4, #16
 801d420:	d456      	bmi.n	801d4d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d422:	42bc      	cmp	r4, r7
 801d424:	da54      	bge.n	801d4d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d426:	4698      	mov	r8, r3
 801d428:	f8dd 9000 	ldr.w	r9, [sp]
 801d42c:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801d430:	f1b8 0f00 	cmp.w	r8, #0
 801d434:	dd54      	ble.n	801d4e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801d436:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801d43a:	1414      	asrs	r4, r2, #16
 801d43c:	9804      	ldr	r0, [sp, #16]
 801d43e:	140e      	asrs	r6, r1, #16
 801d440:	f108 38ff 	add.w	r8, r8, #4294967295
 801d444:	fb07 0404 	mla	r4, r7, r4, r0
 801d448:	9801      	ldr	r0, [sp, #4]
 801d44a:	f814 e006 	ldrb.w	lr, [r4, r6]
 801d44e:	f8b9 4000 	ldrh.w	r4, [r9]
 801d452:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d456:	1227      	asrs	r7, r4, #8
 801d458:	eb00 0b0e 	add.w	fp, r0, lr
 801d45c:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801d460:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d464:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d466:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801d46a:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d46e:	4401      	add	r1, r0
 801d470:	fb16 f60a 	smulbb	r6, r6, sl
 801d474:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d476:	fb1b fb0a 	smulbb	fp, fp, sl
 801d47a:	fb07 6705 	mla	r7, r7, r5, r6
 801d47e:	10e6      	asrs	r6, r4, #3
 801d480:	00e4      	lsls	r4, r4, #3
 801d482:	4402      	add	r2, r0
 801d484:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d488:	b2bf      	uxth	r7, r7
 801d48a:	b2e4      	uxtb	r4, r4
 801d48c:	fb06 b605 	mla	r6, r6, r5, fp
 801d490:	fb14 f405 	smulbb	r4, r4, r5
 801d494:	b2b6      	uxth	r6, r6
 801d496:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801d49a:	1c7c      	adds	r4, r7, #1
 801d49c:	f106 0b01 	add.w	fp, r6, #1
 801d4a0:	fa1f fe8e 	uxth.w	lr, lr
 801d4a4:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801d4a8:	f10e 0401 	add.w	r4, lr, #1
 801d4ac:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801d4b0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d4b4:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801d4b8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801d4bc:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801d4c0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801d4c4:	4327      	orrs	r7, r4
 801d4c6:	ea47 070b 	orr.w	r7, r7, fp
 801d4ca:	f829 7b02 	strh.w	r7, [r9], #2
 801d4ce:	e7af      	b.n	801d430 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801d4d0:	f04f 0e00 	mov.w	lr, #0
 801d4d4:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801d4d8:	eb03 040e 	add.w	r4, r3, lr
 801d4dc:	2c00      	cmp	r4, #0
 801d4de:	dc43      	bgt.n	801d568 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801d4e0:	9a00      	ldr	r2, [sp, #0]
 801d4e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d4e6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d4ea:	9300      	str	r3, [sp, #0]
 801d4ec:	9b02      	ldr	r3, [sp, #8]
 801d4ee:	2b00      	cmp	r3, #0
 801d4f0:	f340 8098 	ble.w	801d624 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801d4f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d4f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d4fa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d4fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d502:	eef0 6a62 	vmov.f32	s13, s5
 801d506:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d50a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d50e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d512:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801d516:	eef0 6a43 	vmov.f32	s13, s6
 801d51a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d51e:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801d522:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d526:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d52a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d52e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d532:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d536:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d53a:	ee12 2a90 	vmov	r2, s5
 801d53e:	eef0 2a47 	vmov.f32	s5, s14
 801d542:	fb92 f3f3 	sdiv	r3, r2, r3
 801d546:	ee13 2a10 	vmov	r2, s6
 801d54a:	9313      	str	r3, [sp, #76]	; 0x4c
 801d54c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d54e:	eeb0 3a67 	vmov.f32	s6, s15
 801d552:	fb92 f3f3 	sdiv	r3, r2, r3
 801d556:	9314      	str	r3, [sp, #80]	; 0x50
 801d558:	9b02      	ldr	r3, [sp, #8]
 801d55a:	9a05      	ldr	r2, [sp, #20]
 801d55c:	3b01      	subs	r3, #1
 801d55e:	9302      	str	r3, [sp, #8]
 801d560:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d562:	bf08      	it	eq
 801d564:	4613      	moveq	r3, r2
 801d566:	e72a      	b.n	801d3be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d568:	140f      	asrs	r7, r1, #16
 801d56a:	d454      	bmi.n	801d616 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d56c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d570:	42be      	cmp	r6, r7
 801d572:	dd50      	ble.n	801d616 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d574:	ea5f 4822 	movs.w	r8, r2, asr #16
 801d578:	d44d      	bmi.n	801d616 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d57a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801d57e:	4544      	cmp	r4, r8
 801d580:	dd49      	ble.n	801d616 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d582:	9c04      	ldr	r4, [sp, #16]
 801d584:	b236      	sxth	r6, r6
 801d586:	f06f 0001 	mvn.w	r0, #1
 801d58a:	fb08 4606 	mla	r6, r8, r6, r4
 801d58e:	9c01      	ldr	r4, [sp, #4]
 801d590:	fb00 fa0e 	mul.w	sl, r0, lr
 801d594:	9800      	ldr	r0, [sp, #0]
 801d596:	f816 8007 	ldrb.w	r8, [r6, r7]
 801d59a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d59e:	eb04 0b08 	add.w	fp, r4, r8
 801d5a2:	f830 400a 	ldrh.w	r4, [r0, sl]
 801d5a6:	9801      	ldr	r0, [sp, #4]
 801d5a8:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801d5ac:	1227      	asrs	r7, r4, #8
 801d5ae:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d5b2:	fb16 f609 	smulbb	r6, r6, r9
 801d5b6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d5ba:	f810 8008 	ldrb.w	r8, [r0, r8]
 801d5be:	fb1b fb09 	smulbb	fp, fp, r9
 801d5c2:	fb07 6705 	mla	r7, r7, r5, r6
 801d5c6:	10e6      	asrs	r6, r4, #3
 801d5c8:	00e4      	lsls	r4, r4, #3
 801d5ca:	9800      	ldr	r0, [sp, #0]
 801d5cc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d5d0:	b2bf      	uxth	r7, r7
 801d5d2:	b2e4      	uxtb	r4, r4
 801d5d4:	fb06 b605 	mla	r6, r6, r5, fp
 801d5d8:	fb14 f405 	smulbb	r4, r4, r5
 801d5dc:	b2b6      	uxth	r6, r6
 801d5de:	fb08 4809 	mla	r8, r8, r9, r4
 801d5e2:	1c7c      	adds	r4, r7, #1
 801d5e4:	f106 0b01 	add.w	fp, r6, #1
 801d5e8:	fa1f f888 	uxth.w	r8, r8
 801d5ec:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801d5f0:	f108 0401 	add.w	r4, r8, #1
 801d5f4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801d5f8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d5fc:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801d600:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801d604:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801d608:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801d60c:	4327      	orrs	r7, r4
 801d60e:	ea47 070b 	orr.w	r7, r7, fp
 801d612:	f820 700a 	strh.w	r7, [r0, sl]
 801d616:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d618:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d61c:	4401      	add	r1, r0
 801d61e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d620:	4402      	add	r2, r0
 801d622:	e759      	b.n	801d4d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d624:	b007      	add	sp, #28
 801d626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d62c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d630:	b085      	sub	sp, #20
 801d632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d636:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d638:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d63a:	9203      	str	r2, [sp, #12]
 801d63c:	6870      	ldr	r0, [r6, #4]
 801d63e:	686f      	ldr	r7, [r5, #4]
 801d640:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801d644:	3704      	adds	r7, #4
 801d646:	9101      	str	r1, [sp, #4]
 801d648:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d64c:	fb00 2404 	mla	r4, r0, r4, r2
 801d650:	6832      	ldr	r2, [r6, #0]
 801d652:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d656:	682a      	ldr	r2, [r5, #0]
 801d658:	9202      	str	r2, [sp, #8]
 801d65a:	9a01      	ldr	r2, [sp, #4]
 801d65c:	2a00      	cmp	r2, #0
 801d65e:	dc03      	bgt.n	801d668 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d660:	9a03      	ldr	r2, [sp, #12]
 801d662:	2a00      	cmp	r2, #0
 801d664:	f340 80cc 	ble.w	801d800 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d668:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d66a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d66e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d672:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d674:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d678:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d67c:	2b00      	cmp	r3, #0
 801d67e:	dd0d      	ble.n	801d69c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d680:	1406      	asrs	r6, r0, #16
 801d682:	d405      	bmi.n	801d690 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d684:	454e      	cmp	r6, r9
 801d686:	da03      	bge.n	801d690 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d688:	1416      	asrs	r6, r2, #16
 801d68a:	d401      	bmi.n	801d690 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d68c:	4546      	cmp	r6, r8
 801d68e:	db06      	blt.n	801d69e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d690:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d692:	4460      	add	r0, ip
 801d694:	3b01      	subs	r3, #1
 801d696:	3402      	adds	r4, #2
 801d698:	4432      	add	r2, r6
 801d69a:	e7ef      	b.n	801d67c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801d69c:	d00f      	beq.n	801d6be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d69e:	1e5e      	subs	r6, r3, #1
 801d6a0:	fb0c 0e06 	mla	lr, ip, r6, r0
 801d6a4:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801d6a8:	d543      	bpl.n	801d732 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801d6aa:	4698      	mov	r8, r3
 801d6ac:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801d6b0:	f1b8 0f00 	cmp.w	r8, #0
 801d6b4:	dc71      	bgt.n	801d79a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801d6b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d6ba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d6be:	9b01      	ldr	r3, [sp, #4]
 801d6c0:	2b00      	cmp	r3, #0
 801d6c2:	f340 809d 	ble.w	801d800 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d6c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d6ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d6cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d6d0:	eeb0 6a62 	vmov.f32	s12, s5
 801d6d4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d6d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d6dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d6e0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d6e4:	eeb0 6a43 	vmov.f32	s12, s6
 801d6e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d6ec:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d6f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d6f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d6f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d6fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d700:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d704:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d708:	ee12 2a90 	vmov	r2, s5
 801d70c:	eef0 2a47 	vmov.f32	s5, s14
 801d710:	fb92 fcf3 	sdiv	ip, r2, r3
 801d714:	ee13 2a10 	vmov	r2, s6
 801d718:	eeb0 3a67 	vmov.f32	s6, s15
 801d71c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d720:	9312      	str	r3, [sp, #72]	; 0x48
 801d722:	9b01      	ldr	r3, [sp, #4]
 801d724:	9a03      	ldr	r2, [sp, #12]
 801d726:	3b01      	subs	r3, #1
 801d728:	9301      	str	r3, [sp, #4]
 801d72a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d72c:	bf08      	it	eq
 801d72e:	4613      	moveq	r3, r2
 801d730:	e793      	b.n	801d65a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801d732:	45ce      	cmp	lr, r9
 801d734:	dab9      	bge.n	801d6aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d736:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d738:	fb01 2606 	mla	r6, r1, r6, r2
 801d73c:	1436      	asrs	r6, r6, #16
 801d73e:	d4b4      	bmi.n	801d6aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d740:	4546      	cmp	r6, r8
 801d742:	dab2      	bge.n	801d6aa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d744:	4698      	mov	r8, r3
 801d746:	46a2      	mov	sl, r4
 801d748:	f1b8 0f00 	cmp.w	r8, #0
 801d74c:	ddb3      	ble.n	801d6b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d74e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d752:	1416      	asrs	r6, r2, #16
 801d754:	9902      	ldr	r1, [sp, #8]
 801d756:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801d75a:	f108 38ff 	add.w	r8, r8, #4294967295
 801d75e:	4460      	add	r0, ip
 801d760:	fb09 1606 	mla	r6, r9, r6, r1
 801d764:	4928      	ldr	r1, [pc, #160]	; (801d808 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801d766:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801d76a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d76e:	eb07 0b0e 	add.w	fp, r7, lr
 801d772:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801d776:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801d77a:	00f6      	lsls	r6, r6, #3
 801d77c:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801d780:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d782:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d786:	440a      	add	r2, r1
 801d788:	ea49 0606 	orr.w	r6, r9, r6
 801d78c:	f817 900e 	ldrb.w	r9, [r7, lr]
 801d790:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801d794:	f82a 6b02 	strh.w	r6, [sl], #2
 801d798:	e7d6      	b.n	801d748 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d79a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d79e:	d429      	bmi.n	801d7f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d7a0:	68ae      	ldr	r6, [r5, #8]
 801d7a2:	454e      	cmp	r6, r9
 801d7a4:	dd26      	ble.n	801d7f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d7a6:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801d7aa:	d423      	bmi.n	801d7f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d7ac:	68e9      	ldr	r1, [r5, #12]
 801d7ae:	4559      	cmp	r1, fp
 801d7b0:	dd20      	ble.n	801d7f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d7b2:	fa0f fe86 	sxth.w	lr, r6
 801d7b6:	9902      	ldr	r1, [sp, #8]
 801d7b8:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801d7bc:	f06f 0101 	mvn.w	r1, #1
 801d7c0:	f81e e009 	ldrb.w	lr, [lr, r9]
 801d7c4:	fb01 f908 	mul.w	r9, r1, r8
 801d7c8:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801d7cc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d7d0:	eb07 060e 	add.w	r6, r7, lr
 801d7d4:	f896 b002 	ldrb.w	fp, [r6, #2]
 801d7d8:	7876      	ldrb	r6, [r6, #1]
 801d7da:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801d7de:	00f6      	lsls	r6, r6, #3
 801d7e0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d7e4:	ea4b 0606 	orr.w	r6, fp, r6
 801d7e8:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801d7ec:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801d7f0:	f82a 6009 	strh.w	r6, [sl, r9]
 801d7f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d7f6:	4460      	add	r0, ip
 801d7f8:	f108 38ff 	add.w	r8, r8, #4294967295
 801d7fc:	440a      	add	r2, r1
 801d7fe:	e757      	b.n	801d6b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d800:	b005      	add	sp, #20
 801d802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d806:	bf00      	nop
 801d808:	fffff800 	.word	0xfffff800

0801d80c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d810:	b087      	sub	sp, #28
 801d812:	468b      	mov	fp, r1
 801d814:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d818:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d81a:	9204      	str	r2, [sp, #16]
 801d81c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d820:	6841      	ldr	r1, [r0, #4]
 801d822:	9205      	str	r2, [sp, #20]
 801d824:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801d828:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801d82c:	fb01 2404 	mla	r4, r1, r4, r2
 801d830:	6802      	ldr	r2, [r0, #0]
 801d832:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d836:	f8dc 2000 	ldr.w	r2, [ip]
 801d83a:	9201      	str	r2, [sp, #4]
 801d83c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d840:	3204      	adds	r2, #4
 801d842:	9202      	str	r2, [sp, #8]
 801d844:	f1bb 0f00 	cmp.w	fp, #0
 801d848:	dc03      	bgt.n	801d852 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801d84a:	9a04      	ldr	r2, [sp, #16]
 801d84c:	2a00      	cmp	r2, #0
 801d84e:	f340 8138 	ble.w	801dac2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801d852:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d854:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801d858:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d85c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d85e:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801d862:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d866:	2b00      	cmp	r3, #0
 801d868:	dd0e      	ble.n	801d888 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d86a:	1402      	asrs	r2, r0, #16
 801d86c:	d405      	bmi.n	801d87a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d86e:	42ba      	cmp	r2, r7
 801d870:	da03      	bge.n	801d87a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d872:	140a      	asrs	r2, r1, #16
 801d874:	d401      	bmi.n	801d87a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d876:	42b2      	cmp	r2, r6
 801d878:	db07      	blt.n	801d88a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d87a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d87c:	3b01      	subs	r3, #1
 801d87e:	3402      	adds	r4, #2
 801d880:	4410      	add	r0, r2
 801d882:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d884:	4411      	add	r1, r2
 801d886:	e7ee      	b.n	801d866 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d888:	d019      	beq.n	801d8be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d88a:	1e5a      	subs	r2, r3, #1
 801d88c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d88e:	fb05 0502 	mla	r5, r5, r2, r0
 801d892:	142d      	asrs	r5, r5, #16
 801d894:	d409      	bmi.n	801d8aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d896:	42bd      	cmp	r5, r7
 801d898:	da07      	bge.n	801d8aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d89a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d89c:	fb05 1202 	mla	r2, r5, r2, r1
 801d8a0:	1412      	asrs	r2, r2, #16
 801d8a2:	d402      	bmi.n	801d8aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d8a4:	42b2      	cmp	r2, r6
 801d8a6:	f2c0 80ac 	blt.w	801da02 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801d8aa:	f04f 0e00 	mov.w	lr, #0
 801d8ae:	eb03 020e 	add.w	r2, r3, lr
 801d8b2:	2a00      	cmp	r2, #0
 801d8b4:	dc3e      	bgt.n	801d934 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801d8b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d8ba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d8be:	f1bb 0f00 	cmp.w	fp, #0
 801d8c2:	f340 80fe 	ble.w	801dac2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801d8c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d8ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d8cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d8d0:	f1bb 0b01 	subs.w	fp, fp, #1
 801d8d4:	eeb0 6a62 	vmov.f32	s12, s5
 801d8d8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d8dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d8e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d8e4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d8e8:	eeb0 6a43 	vmov.f32	s12, s6
 801d8ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d8f0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d8f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d8f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d8fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d900:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d904:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d908:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d90c:	ee12 2a90 	vmov	r2, s5
 801d910:	eef0 2a47 	vmov.f32	s5, s14
 801d914:	fb92 f3f3 	sdiv	r3, r2, r3
 801d918:	ee13 2a10 	vmov	r2, s6
 801d91c:	9313      	str	r3, [sp, #76]	; 0x4c
 801d91e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d920:	eeb0 3a67 	vmov.f32	s6, s15
 801d924:	fb92 f3f3 	sdiv	r3, r2, r3
 801d928:	9a04      	ldr	r2, [sp, #16]
 801d92a:	9314      	str	r3, [sp, #80]	; 0x50
 801d92c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d92e:	bf08      	it	eq
 801d930:	4613      	moveq	r3, r2
 801d932:	e787      	b.n	801d844 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d934:	1406      	asrs	r6, r0, #16
 801d936:	d45d      	bmi.n	801d9f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d938:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801d93c:	42b5      	cmp	r5, r6
 801d93e:	dd59      	ble.n	801d9f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d940:	140f      	asrs	r7, r1, #16
 801d942:	d457      	bmi.n	801d9f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d944:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d948:	42ba      	cmp	r2, r7
 801d94a:	dd53      	ble.n	801d9f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d94c:	9a01      	ldr	r2, [sp, #4]
 801d94e:	b22d      	sxth	r5, r5
 801d950:	fb07 2505 	mla	r5, r7, r5, r2
 801d954:	5daa      	ldrb	r2, [r5, r6]
 801d956:	9d02      	ldr	r5, [sp, #8]
 801d958:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d95c:	0e2e      	lsrs	r6, r5, #24
 801d95e:	d049      	beq.n	801d9f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d960:	f06f 0201 	mvn.w	r2, #1
 801d964:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d968:	fb02 f20e 	mul.w	r2, r2, lr
 801d96c:	f834 8002 	ldrh.w	r8, [r4, r2]
 801d970:	9203      	str	r2, [sp, #12]
 801d972:	9a05      	ldr	r2, [sp, #20]
 801d974:	ea4f 2728 	mov.w	r7, r8, asr #8
 801d978:	4356      	muls	r6, r2
 801d97a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d97e:	1c72      	adds	r2, r6, #1
 801d980:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801d984:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801d988:	b2ed      	uxtb	r5, r5
 801d98a:	1212      	asrs	r2, r2, #8
 801d98c:	fa1f f982 	uxth.w	r9, r2
 801d990:	43d2      	mvns	r2, r2
 801d992:	fb16 f609 	smulbb	r6, r6, r9
 801d996:	b2d2      	uxtb	r2, r2
 801d998:	fb15 f509 	smulbb	r5, r5, r9
 801d99c:	fb07 6702 	mla	r7, r7, r2, r6
 801d9a0:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801d9a4:	fb1a fa09 	smulbb	sl, sl, r9
 801d9a8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d9ac:	b2bf      	uxth	r7, r7
 801d9ae:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d9b2:	fa5f f888 	uxtb.w	r8, r8
 801d9b6:	fb06 a602 	mla	r6, r6, r2, sl
 801d9ba:	fb08 5502 	mla	r5, r8, r2, r5
 801d9be:	1c7a      	adds	r2, r7, #1
 801d9c0:	b2b6      	uxth	r6, r6
 801d9c2:	b2ad      	uxth	r5, r5
 801d9c4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801d9c8:	9a03      	ldr	r2, [sp, #12]
 801d9ca:	f105 0a01 	add.w	sl, r5, #1
 801d9ce:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d9d2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d9d6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d9da:	ea47 070a 	orr.w	r7, r7, sl
 801d9de:	f106 0a01 	add.w	sl, r6, #1
 801d9e2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d9e6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d9ea:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d9ee:	ea47 070a 	orr.w	r7, r7, sl
 801d9f2:	52a7      	strh	r7, [r4, r2]
 801d9f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d9f6:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d9fa:	4410      	add	r0, r2
 801d9fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d9fe:	4411      	add	r1, r2
 801da00:	e755      	b.n	801d8ae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801da02:	f04f 0800 	mov.w	r8, #0
 801da06:	eba3 0208 	sub.w	r2, r3, r8
 801da0a:	2a00      	cmp	r2, #0
 801da0c:	f77f af53 	ble.w	801d8b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801da10:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801da14:	140a      	asrs	r2, r1, #16
 801da16:	9f01      	ldr	r7, [sp, #4]
 801da18:	1405      	asrs	r5, r0, #16
 801da1a:	fb06 7202 	mla	r2, r6, r2, r7
 801da1e:	5d52      	ldrb	r2, [r2, r5]
 801da20:	9d02      	ldr	r5, [sp, #8]
 801da22:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801da26:	0e2e      	lsrs	r6, r5, #24
 801da28:	d044      	beq.n	801dab4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801da2a:	9a05      	ldr	r2, [sp, #20]
 801da2c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801da30:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801da34:	4356      	muls	r6, r2
 801da36:	ea4f 272e 	mov.w	r7, lr, asr #8
 801da3a:	1c72      	adds	r2, r6, #1
 801da3c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801da40:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801da44:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801da48:	b2ed      	uxtb	r5, r5
 801da4a:	1212      	asrs	r2, r2, #8
 801da4c:	fa1f f982 	uxth.w	r9, r2
 801da50:	43d2      	mvns	r2, r2
 801da52:	fb16 f609 	smulbb	r6, r6, r9
 801da56:	b2d2      	uxtb	r2, r2
 801da58:	fb15 f509 	smulbb	r5, r5, r9
 801da5c:	fb07 6702 	mla	r7, r7, r2, r6
 801da60:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801da64:	fb1a fa09 	smulbb	sl, sl, r9
 801da68:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801da6c:	b2bf      	uxth	r7, r7
 801da6e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801da72:	fa5f fe8e 	uxtb.w	lr, lr
 801da76:	fb06 a602 	mla	r6, r6, r2, sl
 801da7a:	fb0e 5502 	mla	r5, lr, r2, r5
 801da7e:	1c7a      	adds	r2, r7, #1
 801da80:	b2b6      	uxth	r6, r6
 801da82:	b2ad      	uxth	r5, r5
 801da84:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801da88:	f105 0a01 	add.w	sl, r5, #1
 801da8c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801da90:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801da94:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801da98:	ea47 070a 	orr.w	r7, r7, sl
 801da9c:	f106 0a01 	add.w	sl, r6, #1
 801daa0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801daa4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801daa8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801daac:	ea47 070a 	orr.w	r7, r7, sl
 801dab0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801dab4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dab6:	f108 0801 	add.w	r8, r8, #1
 801daba:	4410      	add	r0, r2
 801dabc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dabe:	4411      	add	r1, r2
 801dac0:	e7a1      	b.n	801da06 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801dac2:	b007      	add	sp, #28
 801dac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dac8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dacc:	b085      	sub	sp, #20
 801dace:	468b      	mov	fp, r1
 801dad0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dad4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801dad6:	9203      	str	r2, [sp, #12]
 801dad8:	6841      	ldr	r1, [r0, #4]
 801dada:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801dade:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801dae2:	fb01 2404 	mla	r4, r1, r4, r2
 801dae6:	6802      	ldr	r2, [r0, #0]
 801dae8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801daec:	f8de 2000 	ldr.w	r2, [lr]
 801daf0:	9200      	str	r2, [sp, #0]
 801daf2:	f8de 2004 	ldr.w	r2, [lr, #4]
 801daf6:	3204      	adds	r2, #4
 801daf8:	9201      	str	r2, [sp, #4]
 801dafa:	f1bb 0f00 	cmp.w	fp, #0
 801dafe:	dc03      	bgt.n	801db08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801db00:	9a03      	ldr	r2, [sp, #12]
 801db02:	2a00      	cmp	r2, #0
 801db04:	f340 8153 	ble.w	801ddae <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801db08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801db0a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801db0e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801db12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801db14:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801db18:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801db1c:	2b00      	cmp	r3, #0
 801db1e:	dd0e      	ble.n	801db3e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801db20:	1408      	asrs	r0, r1, #16
 801db22:	d405      	bmi.n	801db30 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801db24:	42b8      	cmp	r0, r7
 801db26:	da03      	bge.n	801db30 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801db28:	1410      	asrs	r0, r2, #16
 801db2a:	d401      	bmi.n	801db30 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801db2c:	42b0      	cmp	r0, r6
 801db2e:	db07      	blt.n	801db40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801db30:	9811      	ldr	r0, [sp, #68]	; 0x44
 801db32:	3b01      	subs	r3, #1
 801db34:	3402      	adds	r4, #2
 801db36:	4401      	add	r1, r0
 801db38:	9812      	ldr	r0, [sp, #72]	; 0x48
 801db3a:	4402      	add	r2, r0
 801db3c:	e7ee      	b.n	801db1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801db3e:	d017      	beq.n	801db70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801db40:	1e58      	subs	r0, r3, #1
 801db42:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801db44:	fb05 1500 	mla	r5, r5, r0, r1
 801db48:	142d      	asrs	r5, r5, #16
 801db4a:	d409      	bmi.n	801db60 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801db4c:	42bd      	cmp	r5, r7
 801db4e:	da07      	bge.n	801db60 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801db50:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801db52:	fb05 2000 	mla	r0, r5, r0, r2
 801db56:	1400      	asrs	r0, r0, #16
 801db58:	d402      	bmi.n	801db60 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801db5a:	42b0      	cmp	r0, r6
 801db5c:	f2c0 80bc 	blt.w	801dcd8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801db60:	2600      	movs	r6, #0
 801db62:	1998      	adds	r0, r3, r6
 801db64:	2800      	cmp	r0, #0
 801db66:	dc3e      	bgt.n	801dbe6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801db68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801db6c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801db70:	f1bb 0f00 	cmp.w	fp, #0
 801db74:	f340 811b 	ble.w	801ddae <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801db78:	ee30 0a04 	vadd.f32	s0, s0, s8
 801db7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801db7e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801db82:	f1bb 0b01 	subs.w	fp, fp, #1
 801db86:	eeb0 6a62 	vmov.f32	s12, s5
 801db8a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801db8e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801db92:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801db96:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801db9a:	eeb0 6a43 	vmov.f32	s12, s6
 801db9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dba2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801dba6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dbaa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dbae:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dbb2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dbb6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dbba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dbbe:	ee12 2a90 	vmov	r2, s5
 801dbc2:	eef0 2a47 	vmov.f32	s5, s14
 801dbc6:	fb92 f3f3 	sdiv	r3, r2, r3
 801dbca:	ee13 2a10 	vmov	r2, s6
 801dbce:	9311      	str	r3, [sp, #68]	; 0x44
 801dbd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dbd2:	eeb0 3a67 	vmov.f32	s6, s15
 801dbd6:	fb92 f3f3 	sdiv	r3, r2, r3
 801dbda:	9a03      	ldr	r2, [sp, #12]
 801dbdc:	9312      	str	r3, [sp, #72]	; 0x48
 801dbde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dbe0:	bf08      	it	eq
 801dbe2:	4613      	moveq	r3, r2
 801dbe4:	e789      	b.n	801dafa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801dbe6:	140f      	asrs	r7, r1, #16
 801dbe8:	d45e      	bmi.n	801dca8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801dbea:	f8de 5008 	ldr.w	r5, [lr, #8]
 801dbee:	42bd      	cmp	r5, r7
 801dbf0:	dd5a      	ble.n	801dca8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801dbf2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801dbf6:	d457      	bmi.n	801dca8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801dbf8:	f8de 000c 	ldr.w	r0, [lr, #12]
 801dbfc:	4560      	cmp	r0, ip
 801dbfe:	dd53      	ble.n	801dca8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801dc00:	9800      	ldr	r0, [sp, #0]
 801dc02:	b22d      	sxth	r5, r5
 801dc04:	fb0c 0505 	mla	r5, ip, r5, r0
 801dc08:	5de8      	ldrb	r0, [r5, r7]
 801dc0a:	9d01      	ldr	r5, [sp, #4]
 801dc0c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801dc10:	0e07      	lsrs	r7, r0, #24
 801dc12:	2fff      	cmp	r7, #255	; 0xff
 801dc14:	d04e      	beq.n	801dcb4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801dc16:	b2fd      	uxtb	r5, r7
 801dc18:	2f00      	cmp	r7, #0
 801dc1a:	d045      	beq.n	801dca8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801dc1c:	f06f 0701 	mvn.w	r7, #1
 801dc20:	fa1f f985 	uxth.w	r9, r5
 801dc24:	43ed      	mvns	r5, r5
 801dc26:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801dc2a:	4377      	muls	r7, r6
 801dc2c:	fb1a fa09 	smulbb	sl, sl, r9
 801dc30:	b2ed      	uxtb	r5, r5
 801dc32:	f834 8007 	ldrh.w	r8, [r4, r7]
 801dc36:	9702      	str	r7, [sp, #8]
 801dc38:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801dc3c:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801dc40:	fb17 f709 	smulbb	r7, r7, r9
 801dc44:	b2c0      	uxtb	r0, r0
 801dc46:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801dc4a:	fb10 f009 	smulbb	r0, r0, r9
 801dc4e:	fb0c 7c05 	mla	ip, ip, r5, r7
 801dc52:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801dc56:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801dc5a:	fa1f fc8c 	uxth.w	ip, ip
 801dc5e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801dc62:	fa5f f888 	uxtb.w	r8, r8
 801dc66:	fb07 a705 	mla	r7, r7, r5, sl
 801dc6a:	fb08 0005 	mla	r0, r8, r5, r0
 801dc6e:	f10c 0501 	add.w	r5, ip, #1
 801dc72:	b2bf      	uxth	r7, r7
 801dc74:	b280      	uxth	r0, r0
 801dc76:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801dc7a:	f100 0a01 	add.w	sl, r0, #1
 801dc7e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801dc82:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801dc86:	9802      	ldr	r0, [sp, #8]
 801dc88:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801dc8c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801dc90:	f107 0a01 	add.w	sl, r7, #1
 801dc94:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801dc98:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801dc9c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801dca0:	ea4c 0c0a 	orr.w	ip, ip, sl
 801dca4:	f824 c000 	strh.w	ip, [r4, r0]
 801dca8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801dcaa:	3e01      	subs	r6, #1
 801dcac:	4401      	add	r1, r0
 801dcae:	9812      	ldr	r0, [sp, #72]	; 0x48
 801dcb0:	4402      	add	r2, r0
 801dcb2:	e756      	b.n	801db62 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801dcb4:	f06f 0501 	mvn.w	r5, #1
 801dcb8:	fb05 f706 	mul.w	r7, r5, r6
 801dcbc:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801dcc0:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801dcc4:	0945      	lsrs	r5, r0, #5
 801dcc6:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801dcca:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dcce:	ea4c 0505 	orr.w	r5, ip, r5
 801dcd2:	4305      	orrs	r5, r0
 801dcd4:	53e5      	strh	r5, [r4, r7]
 801dcd6:	e7e7      	b.n	801dca8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801dcd8:	f04f 0800 	mov.w	r8, #0
 801dcdc:	eba3 0008 	sub.w	r0, r3, r8
 801dce0:	2800      	cmp	r0, #0
 801dce2:	f77f af41 	ble.w	801db68 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801dce6:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801dcea:	1410      	asrs	r0, r2, #16
 801dcec:	9f00      	ldr	r7, [sp, #0]
 801dcee:	140d      	asrs	r5, r1, #16
 801dcf0:	fb06 7000 	mla	r0, r6, r0, r7
 801dcf4:	5d40      	ldrb	r0, [r0, r5]
 801dcf6:	9d01      	ldr	r5, [sp, #4]
 801dcf8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801dcfc:	0e06      	lsrs	r6, r0, #24
 801dcfe:	2eff      	cmp	r6, #255	; 0xff
 801dd00:	d048      	beq.n	801dd94 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801dd02:	b2f5      	uxtb	r5, r6
 801dd04:	2e00      	cmp	r6, #0
 801dd06:	d03e      	beq.n	801dd86 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801dd08:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801dd0c:	fa1f f985 	uxth.w	r9, r5
 801dd10:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801dd14:	43ed      	mvns	r5, r5
 801dd16:	ea4f 272c 	mov.w	r7, ip, asr #8
 801dd1a:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801dd1e:	fb16 f609 	smulbb	r6, r6, r9
 801dd22:	b2ed      	uxtb	r5, r5
 801dd24:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801dd28:	b2c0      	uxtb	r0, r0
 801dd2a:	fb1a fa09 	smulbb	sl, sl, r9
 801dd2e:	fb07 6705 	mla	r7, r7, r5, r6
 801dd32:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801dd36:	fb10 f009 	smulbb	r0, r0, r9
 801dd3a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801dd3e:	b2bf      	uxth	r7, r7
 801dd40:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801dd44:	fa5f fc8c 	uxtb.w	ip, ip
 801dd48:	fb06 a605 	mla	r6, r6, r5, sl
 801dd4c:	fb0c 0005 	mla	r0, ip, r5, r0
 801dd50:	1c7d      	adds	r5, r7, #1
 801dd52:	b2b6      	uxth	r6, r6
 801dd54:	b280      	uxth	r0, r0
 801dd56:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801dd5a:	f100 0a01 	add.w	sl, r0, #1
 801dd5e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801dd62:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801dd66:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801dd6a:	ea47 070a 	orr.w	r7, r7, sl
 801dd6e:	f106 0a01 	add.w	sl, r6, #1
 801dd72:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801dd76:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801dd7a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801dd7e:	ea47 070a 	orr.w	r7, r7, sl
 801dd82:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801dd86:	9811      	ldr	r0, [sp, #68]	; 0x44
 801dd88:	f108 0801 	add.w	r8, r8, #1
 801dd8c:	4401      	add	r1, r0
 801dd8e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801dd90:	4402      	add	r2, r0
 801dd92:	e7a3      	b.n	801dcdc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801dd94:	4d07      	ldr	r5, [pc, #28]	; (801ddb4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801dd96:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 801dd9a:	0945      	lsrs	r5, r0, #5
 801dd9c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801dda0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dda4:	4335      	orrs	r5, r6
 801dda6:	4305      	orrs	r5, r0
 801dda8:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801ddac:	e7eb      	b.n	801dd86 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801ddae:	b005      	add	sp, #20
 801ddb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddb4:	fffff800 	.word	0xfffff800

0801ddb8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ddb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddbc:	b087      	sub	sp, #28
 801ddbe:	468b      	mov	fp, r1
 801ddc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ddc4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ddc6:	9204      	str	r2, [sp, #16]
 801ddc8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ddcc:	6861      	ldr	r1, [r4, #4]
 801ddce:	9205      	str	r2, [sp, #20]
 801ddd0:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801ddd4:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801ddd8:	fb01 2000 	mla	r0, r1, r0, r2
 801dddc:	6822      	ldr	r2, [r4, #0]
 801ddde:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801dde2:	f8de 2000 	ldr.w	r2, [lr]
 801dde6:	9201      	str	r2, [sp, #4]
 801dde8:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ddec:	9202      	str	r2, [sp, #8]
 801ddee:	f1bb 0f00 	cmp.w	fp, #0
 801ddf2:	dc03      	bgt.n	801ddfc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801ddf4:	9a04      	ldr	r2, [sp, #16]
 801ddf6:	2a00      	cmp	r2, #0
 801ddf8:	f340 8142 	ble.w	801e080 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801ddfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ddfe:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801de02:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801de06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801de08:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801de0c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801de10:	2b00      	cmp	r3, #0
 801de12:	dd0e      	ble.n	801de32 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801de14:	140c      	asrs	r4, r1, #16
 801de16:	d405      	bmi.n	801de24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801de18:	42bc      	cmp	r4, r7
 801de1a:	da03      	bge.n	801de24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801de1c:	1414      	asrs	r4, r2, #16
 801de1e:	d401      	bmi.n	801de24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801de20:	42b4      	cmp	r4, r6
 801de22:	db07      	blt.n	801de34 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801de24:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801de26:	3b01      	subs	r3, #1
 801de28:	3002      	adds	r0, #2
 801de2a:	4421      	add	r1, r4
 801de2c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801de2e:	4422      	add	r2, r4
 801de30:	e7ee      	b.n	801de10 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801de32:	d019      	beq.n	801de68 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801de34:	1e5c      	subs	r4, r3, #1
 801de36:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801de38:	fb05 1504 	mla	r5, r5, r4, r1
 801de3c:	142d      	asrs	r5, r5, #16
 801de3e:	d409      	bmi.n	801de54 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801de40:	42bd      	cmp	r5, r7
 801de42:	da07      	bge.n	801de54 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801de44:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801de46:	fb05 2404 	mla	r4, r5, r4, r2
 801de4a:	1424      	asrs	r4, r4, #16
 801de4c:	d402      	bmi.n	801de54 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801de4e:	42b4      	cmp	r4, r6
 801de50:	f2c0 80b1 	blt.w	801dfb6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801de54:	f04f 0800 	mov.w	r8, #0
 801de58:	eb03 0408 	add.w	r4, r3, r8
 801de5c:	2c00      	cmp	r4, #0
 801de5e:	dc3e      	bgt.n	801dede <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801de60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801de64:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801de68:	f1bb 0f00 	cmp.w	fp, #0
 801de6c:	f340 8108 	ble.w	801e080 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801de70:	ee30 0a04 	vadd.f32	s0, s0, s8
 801de74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801de76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801de7a:	f1bb 0b01 	subs.w	fp, fp, #1
 801de7e:	eeb0 6a62 	vmov.f32	s12, s5
 801de82:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801de86:	ee31 1a05 	vadd.f32	s2, s2, s10
 801de8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801de8e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801de92:	eeb0 6a43 	vmov.f32	s12, s6
 801de96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801de9a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801de9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dea2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dea6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801deaa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801deae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801deb2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801deb6:	ee12 2a90 	vmov	r2, s5
 801deba:	eef0 2a47 	vmov.f32	s5, s14
 801debe:	fb92 f3f3 	sdiv	r3, r2, r3
 801dec2:	ee13 2a10 	vmov	r2, s6
 801dec6:	9313      	str	r3, [sp, #76]	; 0x4c
 801dec8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801deca:	eeb0 3a67 	vmov.f32	s6, s15
 801dece:	fb92 f3f3 	sdiv	r3, r2, r3
 801ded2:	9a04      	ldr	r2, [sp, #16]
 801ded4:	9314      	str	r3, [sp, #80]	; 0x50
 801ded6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ded8:	bf08      	it	eq
 801deda:	4613      	moveq	r3, r2
 801dedc:	e787      	b.n	801ddee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801dede:	140e      	asrs	r6, r1, #16
 801dee0:	d462      	bmi.n	801dfa8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dee2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801dee6:	42b5      	cmp	r5, r6
 801dee8:	dd5e      	ble.n	801dfa8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801deea:	1417      	asrs	r7, r2, #16
 801deec:	d45c      	bmi.n	801dfa8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801deee:	f8de 400c 	ldr.w	r4, [lr, #12]
 801def2:	42bc      	cmp	r4, r7
 801def4:	dd58      	ble.n	801dfa8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801def6:	b22d      	sxth	r5, r5
 801def8:	9c02      	ldr	r4, [sp, #8]
 801defa:	fb07 6505 	mla	r5, r7, r5, r6
 801defe:	5d66      	ldrb	r6, [r4, r5]
 801df00:	2e00      	cmp	r6, #0
 801df02:	d051      	beq.n	801dfa8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801df04:	9c01      	ldr	r4, [sp, #4]
 801df06:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801df0a:	f06f 0401 	mvn.w	r4, #1
 801df0e:	fb04 f408 	mul.w	r4, r4, r8
 801df12:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801df16:	5b05      	ldrh	r5, [r0, r4]
 801df18:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801df1c:	9403      	str	r4, [sp, #12]
 801df1e:	9c05      	ldr	r4, [sp, #20]
 801df20:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801df24:	4366      	muls	r6, r4
 801df26:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801df2a:	1c74      	adds	r4, r6, #1
 801df2c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801df30:	122e      	asrs	r6, r5, #8
 801df32:	1224      	asrs	r4, r4, #8
 801df34:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801df38:	00ed      	lsls	r5, r5, #3
 801df3a:	b2a7      	uxth	r7, r4
 801df3c:	43e4      	mvns	r4, r4
 801df3e:	b2ed      	uxtb	r5, r5
 801df40:	b2e4      	uxtb	r4, r4
 801df42:	fb16 f604 	smulbb	r6, r6, r4
 801df46:	fb15 f504 	smulbb	r5, r5, r4
 801df4a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801df4e:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801df52:	fb1a fa04 	smulbb	sl, sl, r4
 801df56:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801df5a:	fa1f fc8c 	uxth.w	ip, ip
 801df5e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801df62:	fa5f f989 	uxtb.w	r9, r9
 801df66:	fb06 a607 	mla	r6, r6, r7, sl
 801df6a:	f10c 0401 	add.w	r4, ip, #1
 801df6e:	fb09 5507 	mla	r5, r9, r7, r5
 801df72:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801df76:	9c03      	ldr	r4, [sp, #12]
 801df78:	b2ad      	uxth	r5, r5
 801df7a:	b2b6      	uxth	r6, r6
 801df7c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801df80:	f105 0a01 	add.w	sl, r5, #1
 801df84:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801df88:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801df8c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801df90:	f106 0a01 	add.w	sl, r6, #1
 801df94:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801df98:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801df9c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801dfa0:	ea4c 0c0a 	orr.w	ip, ip, sl
 801dfa4:	f820 c004 	strh.w	ip, [r0, r4]
 801dfa8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dfaa:	f108 38ff 	add.w	r8, r8, #4294967295
 801dfae:	4421      	add	r1, r4
 801dfb0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dfb2:	4422      	add	r2, r4
 801dfb4:	e750      	b.n	801de58 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801dfb6:	f04f 0900 	mov.w	r9, #0
 801dfba:	eba3 0409 	sub.w	r4, r3, r9
 801dfbe:	2c00      	cmp	r4, #0
 801dfc0:	f77f af4e 	ble.w	801de60 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801dfc4:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801dfc8:	140d      	asrs	r5, r1, #16
 801dfca:	1414      	asrs	r4, r2, #16
 801dfcc:	fb06 5404 	mla	r4, r6, r4, r5
 801dfd0:	9d02      	ldr	r5, [sp, #8]
 801dfd2:	5d2e      	ldrb	r6, [r5, r4]
 801dfd4:	2e00      	cmp	r6, #0
 801dfd6:	d04c      	beq.n	801e072 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801dfd8:	9d01      	ldr	r5, [sp, #4]
 801dfda:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801dfde:	9c05      	ldr	r4, [sp, #20]
 801dfe0:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801dfe4:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801dfe8:	4366      	muls	r6, r4
 801dfea:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801dfee:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801dff2:	1c74      	adds	r4, r6, #1
 801dff4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801dff8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801dffc:	122e      	asrs	r6, r5, #8
 801dffe:	1224      	asrs	r4, r4, #8
 801e000:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e004:	00ed      	lsls	r5, r5, #3
 801e006:	b2a7      	uxth	r7, r4
 801e008:	43e4      	mvns	r4, r4
 801e00a:	b2ed      	uxtb	r5, r5
 801e00c:	b2e4      	uxtb	r4, r4
 801e00e:	fb16 f604 	smulbb	r6, r6, r4
 801e012:	fb15 f504 	smulbb	r5, r5, r4
 801e016:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e01a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801e01e:	fb1a fa04 	smulbb	sl, sl, r4
 801e022:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e026:	fa1f fc8c 	uxth.w	ip, ip
 801e02a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e02e:	fa5f f888 	uxtb.w	r8, r8
 801e032:	fb06 a607 	mla	r6, r6, r7, sl
 801e036:	f10c 0401 	add.w	r4, ip, #1
 801e03a:	fb08 5507 	mla	r5, r8, r7, r5
 801e03e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e042:	b2ad      	uxth	r5, r5
 801e044:	b2b6      	uxth	r6, r6
 801e046:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e04a:	f105 0a01 	add.w	sl, r5, #1
 801e04e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e052:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e056:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e05a:	f106 0a01 	add.w	sl, r6, #1
 801e05e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e062:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e066:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e06a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e06e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801e072:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e074:	f109 0901 	add.w	r9, r9, #1
 801e078:	4421      	add	r1, r4
 801e07a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e07c:	4422      	add	r2, r4
 801e07e:	e79c      	b.n	801dfba <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801e080:	b007      	add	sp, #28
 801e082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e086 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e086:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e08a:	b085      	sub	sp, #20
 801e08c:	468b      	mov	fp, r1
 801e08e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e092:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e094:	9203      	str	r2, [sp, #12]
 801e096:	6861      	ldr	r1, [r4, #4]
 801e098:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801e09c:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801e0a0:	fb01 2000 	mla	r0, r1, r0, r2
 801e0a4:	6822      	ldr	r2, [r4, #0]
 801e0a6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801e0aa:	f8d8 2000 	ldr.w	r2, [r8]
 801e0ae:	9200      	str	r2, [sp, #0]
 801e0b0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801e0b4:	9201      	str	r2, [sp, #4]
 801e0b6:	f1bb 0f00 	cmp.w	fp, #0
 801e0ba:	dc03      	bgt.n	801e0c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e0bc:	9a03      	ldr	r2, [sp, #12]
 801e0be:	2a00      	cmp	r2, #0
 801e0c0:	f340 8146 	ble.w	801e350 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801e0c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e0c6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801e0ca:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e0ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e0d0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801e0d4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e0d8:	2b00      	cmp	r3, #0
 801e0da:	dd0e      	ble.n	801e0fa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e0dc:	140c      	asrs	r4, r1, #16
 801e0de:	d405      	bmi.n	801e0ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e0e0:	42bc      	cmp	r4, r7
 801e0e2:	da03      	bge.n	801e0ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e0e4:	1414      	asrs	r4, r2, #16
 801e0e6:	d401      	bmi.n	801e0ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e0e8:	42b4      	cmp	r4, r6
 801e0ea:	db07      	blt.n	801e0fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e0ec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e0ee:	3b01      	subs	r3, #1
 801e0f0:	3002      	adds	r0, #2
 801e0f2:	4421      	add	r1, r4
 801e0f4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e0f6:	4422      	add	r2, r4
 801e0f8:	e7ee      	b.n	801e0d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e0fa:	d017      	beq.n	801e12c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e0fc:	1e5c      	subs	r4, r3, #1
 801e0fe:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e100:	fb05 1504 	mla	r5, r5, r4, r1
 801e104:	142d      	asrs	r5, r5, #16
 801e106:	d409      	bmi.n	801e11c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e108:	42bd      	cmp	r5, r7
 801e10a:	da07      	bge.n	801e11c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e10c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e10e:	fb05 2404 	mla	r4, r5, r4, r2
 801e112:	1424      	asrs	r4, r4, #16
 801e114:	d402      	bmi.n	801e11c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e116:	42b4      	cmp	r4, r6
 801e118:	f2c0 80b3 	blt.w	801e282 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801e11c:	2600      	movs	r6, #0
 801e11e:	199c      	adds	r4, r3, r6
 801e120:	2c00      	cmp	r4, #0
 801e122:	dc3e      	bgt.n	801e1a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e124:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e128:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e12c:	f1bb 0f00 	cmp.w	fp, #0
 801e130:	f340 810e 	ble.w	801e350 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801e134:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e13a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e13e:	f1bb 0b01 	subs.w	fp, fp, #1
 801e142:	eeb0 6a62 	vmov.f32	s12, s5
 801e146:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e14a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e14e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e152:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e156:	eeb0 6a43 	vmov.f32	s12, s6
 801e15a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e15e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e162:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e166:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e16a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e16e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e172:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e176:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e17a:	ee12 2a90 	vmov	r2, s5
 801e17e:	eef0 2a47 	vmov.f32	s5, s14
 801e182:	fb92 f3f3 	sdiv	r3, r2, r3
 801e186:	ee13 2a10 	vmov	r2, s6
 801e18a:	9311      	str	r3, [sp, #68]	; 0x44
 801e18c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e18e:	eeb0 3a67 	vmov.f32	s6, s15
 801e192:	fb92 f3f3 	sdiv	r3, r2, r3
 801e196:	9a03      	ldr	r2, [sp, #12]
 801e198:	9312      	str	r3, [sp, #72]	; 0x48
 801e19a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e19c:	bf08      	it	eq
 801e19e:	4613      	moveq	r3, r2
 801e1a0:	e789      	b.n	801e0b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e1a2:	140f      	asrs	r7, r1, #16
 801e1a4:	d45f      	bmi.n	801e266 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e1a6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801e1aa:	42bd      	cmp	r5, r7
 801e1ac:	dd5b      	ble.n	801e266 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e1ae:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e1b2:	d458      	bmi.n	801e266 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e1b4:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801e1b8:	4564      	cmp	r4, ip
 801e1ba:	dd54      	ble.n	801e266 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e1bc:	b22d      	sxth	r5, r5
 801e1be:	9c01      	ldr	r4, [sp, #4]
 801e1c0:	fb0c 7505 	mla	r5, ip, r5, r7
 801e1c4:	5d64      	ldrb	r4, [r4, r5]
 801e1c6:	2cff      	cmp	r4, #255	; 0xff
 801e1c8:	d053      	beq.n	801e272 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801e1ca:	2c00      	cmp	r4, #0
 801e1cc:	d04b      	beq.n	801e266 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e1ce:	9f00      	ldr	r7, [sp, #0]
 801e1d0:	fa1f fc84 	uxth.w	ip, r4
 801e1d4:	43e4      	mvns	r4, r4
 801e1d6:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801e1da:	f06f 0501 	mvn.w	r5, #1
 801e1de:	b2e4      	uxtb	r4, r4
 801e1e0:	4375      	muls	r5, r6
 801e1e2:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801e1e6:	9502      	str	r5, [sp, #8]
 801e1e8:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801e1ec:	5b45      	ldrh	r5, [r0, r5]
 801e1ee:	122f      	asrs	r7, r5, #8
 801e1f0:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e1f4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e1f8:	00ed      	lsls	r5, r5, #3
 801e1fa:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801e1fe:	fb17 f704 	smulbb	r7, r7, r4
 801e202:	b2ed      	uxtb	r5, r5
 801e204:	fb1a fa04 	smulbb	sl, sl, r4
 801e208:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801e20c:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801e210:	fb15 f504 	smulbb	r5, r5, r4
 801e214:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801e218:	fa1f fe8e 	uxth.w	lr, lr
 801e21c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e220:	fa5f f989 	uxtb.w	r9, r9
 801e224:	fb07 a70c 	mla	r7, r7, ip, sl
 801e228:	f10e 0401 	add.w	r4, lr, #1
 801e22c:	fb09 550c 	mla	r5, r9, ip, r5
 801e230:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801e234:	9c02      	ldr	r4, [sp, #8]
 801e236:	b2ad      	uxth	r5, r5
 801e238:	b2bf      	uxth	r7, r7
 801e23a:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801e23e:	f105 0a01 	add.w	sl, r5, #1
 801e242:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e246:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e24a:	ea4e 0e0a 	orr.w	lr, lr, sl
 801e24e:	f107 0a01 	add.w	sl, r7, #1
 801e252:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801e256:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e25a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e25e:	ea4e 0e0a 	orr.w	lr, lr, sl
 801e262:	f820 e004 	strh.w	lr, [r0, r4]
 801e266:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e268:	3e01      	subs	r6, #1
 801e26a:	4421      	add	r1, r4
 801e26c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e26e:	4422      	add	r2, r4
 801e270:	e755      	b.n	801e11e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e272:	9c00      	ldr	r4, [sp, #0]
 801e274:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801e278:	f06f 0401 	mvn.w	r4, #1
 801e27c:	4374      	muls	r4, r6
 801e27e:	5305      	strh	r5, [r0, r4]
 801e280:	e7f1      	b.n	801e266 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e282:	f04f 0900 	mov.w	r9, #0
 801e286:	eba3 0409 	sub.w	r4, r3, r9
 801e28a:	2c00      	cmp	r4, #0
 801e28c:	f77f af4a 	ble.w	801e124 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e290:	1414      	asrs	r4, r2, #16
 801e292:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801e296:	140d      	asrs	r5, r1, #16
 801e298:	fb06 5504 	mla	r5, r6, r4, r5
 801e29c:	9c01      	ldr	r4, [sp, #4]
 801e29e:	5d64      	ldrb	r4, [r4, r5]
 801e2a0:	2cff      	cmp	r4, #255	; 0xff
 801e2a2:	d04f      	beq.n	801e344 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 801e2a4:	2c00      	cmp	r4, #0
 801e2a6:	d046      	beq.n	801e336 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e2a8:	9e00      	ldr	r6, [sp, #0]
 801e2aa:	b2a7      	uxth	r7, r4
 801e2ac:	43e4      	mvns	r4, r4
 801e2ae:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801e2b2:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801e2b6:	b2e4      	uxtb	r4, r4
 801e2b8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e2bc:	122e      	asrs	r6, r5, #8
 801e2be:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e2c2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e2c6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e2ca:	00ed      	lsls	r5, r5, #3
 801e2cc:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801e2d0:	fb16 f604 	smulbb	r6, r6, r4
 801e2d4:	b2ed      	uxtb	r5, r5
 801e2d6:	fb1a fa04 	smulbb	sl, sl, r4
 801e2da:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e2de:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e2e2:	fb15 f504 	smulbb	r5, r5, r4
 801e2e6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e2ea:	fa1f fc8c 	uxth.w	ip, ip
 801e2ee:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e2f2:	fa5f fe8e 	uxtb.w	lr, lr
 801e2f6:	fb06 a607 	mla	r6, r6, r7, sl
 801e2fa:	f10c 0401 	add.w	r4, ip, #1
 801e2fe:	fb0e 5507 	mla	r5, lr, r7, r5
 801e302:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e306:	b2ad      	uxth	r5, r5
 801e308:	b2b6      	uxth	r6, r6
 801e30a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e30e:	f105 0a01 	add.w	sl, r5, #1
 801e312:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e316:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e31a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e31e:	f106 0a01 	add.w	sl, r6, #1
 801e322:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e326:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e32a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e32e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e332:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801e336:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e338:	f109 0901 	add.w	r9, r9, #1
 801e33c:	4421      	add	r1, r4
 801e33e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e340:	4422      	add	r2, r4
 801e342:	e7a0      	b.n	801e286 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e344:	9c00      	ldr	r4, [sp, #0]
 801e346:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801e34a:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801e34e:	e7f2      	b.n	801e336 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e350:	b005      	add	sp, #20
 801e352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e356 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e356:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e35a:	b085      	sub	sp, #20
 801e35c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e35e:	9203      	str	r2, [sp, #12]
 801e360:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801e364:	9100      	str	r1, [sp, #0]
 801e366:	9201      	str	r2, [sp, #4]
 801e368:	6841      	ldr	r1, [r0, #4]
 801e36a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801e36e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e372:	fb01 2404 	mla	r4, r1, r4, r2
 801e376:	6802      	ldr	r2, [r0, #0]
 801e378:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e37c:	f8de 2000 	ldr.w	r2, [lr]
 801e380:	9202      	str	r2, [sp, #8]
 801e382:	9a01      	ldr	r2, [sp, #4]
 801e384:	43d6      	mvns	r6, r2
 801e386:	b2f6      	uxtb	r6, r6
 801e388:	9a00      	ldr	r2, [sp, #0]
 801e38a:	2a00      	cmp	r2, #0
 801e38c:	dc03      	bgt.n	801e396 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e38e:	9a03      	ldr	r2, [sp, #12]
 801e390:	2a00      	cmp	r2, #0
 801e392:	f340 8124 	ble.w	801e5de <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e396:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e398:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e39c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e3a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e3a2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e3a6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e3aa:	2b00      	cmp	r3, #0
 801e3ac:	dd0e      	ble.n	801e3cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e3ae:	1408      	asrs	r0, r1, #16
 801e3b0:	d405      	bmi.n	801e3be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e3b2:	4560      	cmp	r0, ip
 801e3b4:	da03      	bge.n	801e3be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e3b6:	1410      	asrs	r0, r2, #16
 801e3b8:	d401      	bmi.n	801e3be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e3ba:	42b8      	cmp	r0, r7
 801e3bc:	db07      	blt.n	801e3ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e3be:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e3c0:	3b01      	subs	r3, #1
 801e3c2:	3402      	adds	r4, #2
 801e3c4:	4401      	add	r1, r0
 801e3c6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e3c8:	4402      	add	r2, r0
 801e3ca:	e7ee      	b.n	801e3aa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801e3cc:	d06e      	beq.n	801e4ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e3ce:	1e58      	subs	r0, r3, #1
 801e3d0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e3d2:	fb05 1500 	mla	r5, r5, r0, r1
 801e3d6:	142d      	asrs	r5, r5, #16
 801e3d8:	d45c      	bmi.n	801e494 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e3da:	4565      	cmp	r5, ip
 801e3dc:	da5a      	bge.n	801e494 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e3de:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e3e0:	fb05 2000 	mla	r0, r5, r0, r2
 801e3e4:	1400      	asrs	r0, r0, #16
 801e3e6:	d455      	bmi.n	801e494 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e3e8:	42b8      	cmp	r0, r7
 801e3ea:	da53      	bge.n	801e494 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e3ec:	4699      	mov	r9, r3
 801e3ee:	46a2      	mov	sl, r4
 801e3f0:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801e3f4:	f1b9 0f00 	cmp.w	r9, #0
 801e3f8:	dd54      	ble.n	801e4a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e3fa:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e3fe:	140d      	asrs	r5, r1, #16
 801e400:	1410      	asrs	r0, r2, #16
 801e402:	f109 39ff 	add.w	r9, r9, #4294967295
 801e406:	fb07 5000 	mla	r0, r7, r0, r5
 801e40a:	9d02      	ldr	r5, [sp, #8]
 801e40c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e410:	f8ba 5000 	ldrh.w	r5, [sl]
 801e414:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e418:	122f      	asrs	r7, r5, #8
 801e41a:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e41e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e422:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e426:	00ed      	lsls	r5, r5, #3
 801e428:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801e42c:	fb17 f706 	smulbb	r7, r7, r6
 801e430:	b2ed      	uxtb	r5, r5
 801e432:	fb18 f806 	smulbb	r8, r8, r6
 801e436:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e43a:	10c7      	asrs	r7, r0, #3
 801e43c:	fb15 f506 	smulbb	r5, r5, r6
 801e440:	00c0      	lsls	r0, r0, #3
 801e442:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e446:	fa1f fc8c 	uxth.w	ip, ip
 801e44a:	b2c0      	uxtb	r0, r0
 801e44c:	fb07 870b 	mla	r7, r7, fp, r8
 801e450:	fb00 500b 	mla	r0, r0, fp, r5
 801e454:	f10c 0501 	add.w	r5, ip, #1
 801e458:	b2bf      	uxth	r7, r7
 801e45a:	b280      	uxth	r0, r0
 801e45c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e460:	f107 0801 	add.w	r8, r7, #1
 801e464:	1c45      	adds	r5, r0, #1
 801e466:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e46a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e46e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e472:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e474:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e478:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e47c:	4401      	add	r1, r0
 801e47e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e482:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e484:	ea4c 0c05 	orr.w	ip, ip, r5
 801e488:	4402      	add	r2, r0
 801e48a:	ea4c 0c08 	orr.w	ip, ip, r8
 801e48e:	f82a cb02 	strh.w	ip, [sl], #2
 801e492:	e7af      	b.n	801e3f4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e494:	f04f 0800 	mov.w	r8, #0
 801e498:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801e49c:	eb03 0008 	add.w	r0, r3, r8
 801e4a0:	2800      	cmp	r0, #0
 801e4a2:	dc41      	bgt.n	801e528 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e4a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e4a8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e4ac:	9b00      	ldr	r3, [sp, #0]
 801e4ae:	2b00      	cmp	r3, #0
 801e4b0:	f340 8095 	ble.w	801e5de <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e4b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e4b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e4ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e4be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e4c2:	eef0 6a62 	vmov.f32	s13, s5
 801e4c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e4ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e4ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e4d2:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801e4d6:	eef0 6a43 	vmov.f32	s13, s6
 801e4da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e4de:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801e4e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e4e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e4ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e4ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e4f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e4f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e4fa:	ee12 2a90 	vmov	r2, s5
 801e4fe:	eef0 2a47 	vmov.f32	s5, s14
 801e502:	fb92 f3f3 	sdiv	r3, r2, r3
 801e506:	ee13 2a10 	vmov	r2, s6
 801e50a:	9311      	str	r3, [sp, #68]	; 0x44
 801e50c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e50e:	eeb0 3a67 	vmov.f32	s6, s15
 801e512:	fb92 f3f3 	sdiv	r3, r2, r3
 801e516:	9312      	str	r3, [sp, #72]	; 0x48
 801e518:	9b00      	ldr	r3, [sp, #0]
 801e51a:	9a03      	ldr	r2, [sp, #12]
 801e51c:	3b01      	subs	r3, #1
 801e51e:	9300      	str	r3, [sp, #0]
 801e520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e522:	bf08      	it	eq
 801e524:	4613      	moveq	r3, r2
 801e526:	e72f      	b.n	801e388 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801e528:	140f      	asrs	r7, r1, #16
 801e52a:	d451      	bmi.n	801e5d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e52c:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e530:	42bd      	cmp	r5, r7
 801e532:	dd4d      	ble.n	801e5d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e534:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e538:	d44a      	bmi.n	801e5d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e53a:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e53e:	4560      	cmp	r0, ip
 801e540:	dd46      	ble.n	801e5d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e542:	b22d      	sxth	r5, r5
 801e544:	9802      	ldr	r0, [sp, #8]
 801e546:	fb0c 7505 	mla	r5, ip, r5, r7
 801e54a:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801e54e:	f06f 0501 	mvn.w	r5, #1
 801e552:	fb05 fb08 	mul.w	fp, r5, r8
 801e556:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e55a:	f834 500b 	ldrh.w	r5, [r4, fp]
 801e55e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e562:	122f      	asrs	r7, r5, #8
 801e564:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e568:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e56c:	00ed      	lsls	r5, r5, #3
 801e56e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801e572:	fb17 f706 	smulbb	r7, r7, r6
 801e576:	b2ed      	uxtb	r5, r5
 801e578:	fb19 f906 	smulbb	r9, r9, r6
 801e57c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801e580:	10c7      	asrs	r7, r0, #3
 801e582:	fb15 f506 	smulbb	r5, r5, r6
 801e586:	00c0      	lsls	r0, r0, #3
 801e588:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e58c:	fa1f fc8c 	uxth.w	ip, ip
 801e590:	b2c0      	uxtb	r0, r0
 801e592:	fb07 970a 	mla	r7, r7, sl, r9
 801e596:	fb00 500a 	mla	r0, r0, sl, r5
 801e59a:	f10c 0501 	add.w	r5, ip, #1
 801e59e:	b2bf      	uxth	r7, r7
 801e5a0:	b280      	uxth	r0, r0
 801e5a2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e5a6:	f107 0901 	add.w	r9, r7, #1
 801e5aa:	1c45      	adds	r5, r0, #1
 801e5ac:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801e5b0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e5b4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e5b8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e5bc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e5c0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e5c4:	ea4c 0c05 	orr.w	ip, ip, r5
 801e5c8:	ea4c 0c09 	orr.w	ip, ip, r9
 801e5cc:	f824 c00b 	strh.w	ip, [r4, fp]
 801e5d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e5d2:	f108 38ff 	add.w	r8, r8, #4294967295
 801e5d6:	4401      	add	r1, r0
 801e5d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e5da:	4402      	add	r2, r0
 801e5dc:	e75e      	b.n	801e49c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801e5de:	b005      	add	sp, #20
 801e5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e5e4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5e8:	b085      	sub	sp, #20
 801e5ea:	4693      	mov	fp, r2
 801e5ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e5f0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e5f2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e5f4:	6870      	ldr	r0, [r6, #4]
 801e5f6:	9101      	str	r1, [sp, #4]
 801e5f8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e5fc:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801e600:	fb00 2404 	mla	r4, r0, r4, r2
 801e604:	6832      	ldr	r2, [r6, #0]
 801e606:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e60a:	682a      	ldr	r2, [r5, #0]
 801e60c:	9202      	str	r2, [sp, #8]
 801e60e:	9a01      	ldr	r2, [sp, #4]
 801e610:	2a00      	cmp	r2, #0
 801e612:	dc03      	bgt.n	801e61c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e614:	f1bb 0f00 	cmp.w	fp, #0
 801e618:	f340 809a 	ble.w	801e750 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801e61c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e61e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e622:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e626:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e628:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e62c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e630:	2b00      	cmp	r3, #0
 801e632:	dd0c      	ble.n	801e64e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e634:	1406      	asrs	r6, r0, #16
 801e636:	d405      	bmi.n	801e644 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e638:	454e      	cmp	r6, r9
 801e63a:	da03      	bge.n	801e644 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e63c:	1416      	asrs	r6, r2, #16
 801e63e:	d401      	bmi.n	801e644 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e640:	4546      	cmp	r6, r8
 801e642:	db05      	blt.n	801e650 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e644:	4470      	add	r0, lr
 801e646:	4462      	add	r2, ip
 801e648:	3b01      	subs	r3, #1
 801e64a:	3402      	adds	r4, #2
 801e64c:	e7f0      	b.n	801e630 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e64e:	d00f      	beq.n	801e670 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e650:	1e5e      	subs	r6, r3, #1
 801e652:	fb0e 0706 	mla	r7, lr, r6, r0
 801e656:	143f      	asrs	r7, r7, #16
 801e658:	d541      	bpl.n	801e6de <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e65a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801e65e:	4698      	mov	r8, r3
 801e660:	9603      	str	r6, [sp, #12]
 801e662:	f1b8 0f00 	cmp.w	r8, #0
 801e666:	dc56      	bgt.n	801e716 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801e668:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e66c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e670:	9b01      	ldr	r3, [sp, #4]
 801e672:	2b00      	cmp	r3, #0
 801e674:	dd6c      	ble.n	801e750 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801e676:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e67a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e67c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e680:	eeb0 6a62 	vmov.f32	s12, s5
 801e684:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e688:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e68c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e690:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e694:	eeb0 6a43 	vmov.f32	s12, s6
 801e698:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e69c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e6a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e6a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e6a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e6ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e6b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e6b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e6b8:	ee12 2a90 	vmov	r2, s5
 801e6bc:	eef0 2a47 	vmov.f32	s5, s14
 801e6c0:	fb92 fef3 	sdiv	lr, r2, r3
 801e6c4:	ee13 2a10 	vmov	r2, s6
 801e6c8:	eeb0 3a67 	vmov.f32	s6, s15
 801e6cc:	fb92 fcf3 	sdiv	ip, r2, r3
 801e6d0:	9b01      	ldr	r3, [sp, #4]
 801e6d2:	3b01      	subs	r3, #1
 801e6d4:	9301      	str	r3, [sp, #4]
 801e6d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e6d8:	bf08      	it	eq
 801e6da:	465b      	moveq	r3, fp
 801e6dc:	e797      	b.n	801e60e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801e6de:	454f      	cmp	r7, r9
 801e6e0:	dabb      	bge.n	801e65a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e6e2:	fb0c 2606 	mla	r6, ip, r6, r2
 801e6e6:	1436      	asrs	r6, r6, #16
 801e6e8:	d4b7      	bmi.n	801e65a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e6ea:	4546      	cmp	r6, r8
 801e6ec:	dab5      	bge.n	801e65a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e6ee:	461e      	mov	r6, r3
 801e6f0:	46a0      	mov	r8, r4
 801e6f2:	2e00      	cmp	r6, #0
 801e6f4:	ddb8      	ble.n	801e668 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e6f6:	1417      	asrs	r7, r2, #16
 801e6f8:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801e6fc:	ea4f 4920 	mov.w	r9, r0, asr #16
 801e700:	9902      	ldr	r1, [sp, #8]
 801e702:	4470      	add	r0, lr
 801e704:	4462      	add	r2, ip
 801e706:	fb0a 9707 	mla	r7, sl, r7, r9
 801e70a:	3e01      	subs	r6, #1
 801e70c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801e710:	f828 7b02 	strh.w	r7, [r8], #2
 801e714:	e7ed      	b.n	801e6f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801e716:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e71a:	d414      	bmi.n	801e746 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e71c:	68ae      	ldr	r6, [r5, #8]
 801e71e:	454e      	cmp	r6, r9
 801e720:	dd11      	ble.n	801e746 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e722:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e726:	d40e      	bmi.n	801e746 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e728:	68ef      	ldr	r7, [r5, #12]
 801e72a:	4557      	cmp	r7, sl
 801e72c:	dd0b      	ble.n	801e746 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e72e:	b236      	sxth	r6, r6
 801e730:	f06f 0101 	mvn.w	r1, #1
 801e734:	9f02      	ldr	r7, [sp, #8]
 801e736:	fb0a 9606 	mla	r6, sl, r6, r9
 801e73a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801e73e:	fb01 f608 	mul.w	r6, r1, r8
 801e742:	9903      	ldr	r1, [sp, #12]
 801e744:	538f      	strh	r7, [r1, r6]
 801e746:	4470      	add	r0, lr
 801e748:	4462      	add	r2, ip
 801e74a:	f108 38ff 	add.w	r8, r8, #4294967295
 801e74e:	e788      	b.n	801e662 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e750:	b005      	add	sp, #20
 801e752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e756 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e756:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e75a:	b085      	sub	sp, #20
 801e75c:	468b      	mov	fp, r1
 801e75e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e762:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e764:	9202      	str	r2, [sp, #8]
 801e766:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801e76a:	6841      	ldr	r1, [r0, #4]
 801e76c:	9203      	str	r2, [sp, #12]
 801e76e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801e772:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e776:	fb01 2404 	mla	r4, r1, r4, r2
 801e77a:	6802      	ldr	r2, [r0, #0]
 801e77c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e780:	f8d8 2000 	ldr.w	r2, [r8]
 801e784:	9200      	str	r2, [sp, #0]
 801e786:	f1bb 0f00 	cmp.w	fp, #0
 801e78a:	dc03      	bgt.n	801e794 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e78c:	9a02      	ldr	r2, [sp, #8]
 801e78e:	2a00      	cmp	r2, #0
 801e790:	f340 8134 	ble.w	801e9fc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e794:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e796:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801e79a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e79e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e7a0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801e7a4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e7a8:	2b00      	cmp	r3, #0
 801e7aa:	dd0e      	ble.n	801e7ca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e7ac:	1402      	asrs	r2, r0, #16
 801e7ae:	d405      	bmi.n	801e7bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e7b0:	42ba      	cmp	r2, r7
 801e7b2:	da03      	bge.n	801e7bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e7b4:	140a      	asrs	r2, r1, #16
 801e7b6:	d401      	bmi.n	801e7bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e7b8:	42b2      	cmp	r2, r6
 801e7ba:	db07      	blt.n	801e7cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e7bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e7be:	3b01      	subs	r3, #1
 801e7c0:	3402      	adds	r4, #2
 801e7c2:	4410      	add	r0, r2
 801e7c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e7c6:	4411      	add	r1, r2
 801e7c8:	e7ee      	b.n	801e7a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e7ca:	d019      	beq.n	801e800 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801e7cc:	1e5a      	subs	r2, r3, #1
 801e7ce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e7d0:	fb05 0502 	mla	r5, r5, r2, r0
 801e7d4:	142d      	asrs	r5, r5, #16
 801e7d6:	d409      	bmi.n	801e7ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e7d8:	42bd      	cmp	r5, r7
 801e7da:	da07      	bge.n	801e7ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e7dc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e7de:	fb05 1202 	mla	r2, r5, r2, r1
 801e7e2:	1412      	asrs	r2, r2, #16
 801e7e4:	d402      	bmi.n	801e7ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e7e6:	42b2      	cmp	r2, r6
 801e7e8:	f2c0 80aa 	blt.w	801e940 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e7ec:	f04f 0c00 	mov.w	ip, #0
 801e7f0:	eb03 020c 	add.w	r2, r3, ip
 801e7f4:	2a00      	cmp	r2, #0
 801e7f6:	dc3e      	bgt.n	801e876 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801e7f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e7fc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e800:	f1bb 0f00 	cmp.w	fp, #0
 801e804:	f340 80fa 	ble.w	801e9fc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801e808:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e80c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e80e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e812:	f1bb 0b01 	subs.w	fp, fp, #1
 801e816:	eeb0 6a62 	vmov.f32	s12, s5
 801e81a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e81e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e822:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e826:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e82a:	eeb0 6a43 	vmov.f32	s12, s6
 801e82e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e832:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e836:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e83a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e83e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e842:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e846:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e84a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e84e:	ee12 2a90 	vmov	r2, s5
 801e852:	eef0 2a47 	vmov.f32	s5, s14
 801e856:	fb92 f3f3 	sdiv	r3, r2, r3
 801e85a:	ee13 2a10 	vmov	r2, s6
 801e85e:	9311      	str	r3, [sp, #68]	; 0x44
 801e860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e862:	eeb0 3a67 	vmov.f32	s6, s15
 801e866:	fb92 f3f3 	sdiv	r3, r2, r3
 801e86a:	9a02      	ldr	r2, [sp, #8]
 801e86c:	9312      	str	r3, [sp, #72]	; 0x48
 801e86e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e870:	bf08      	it	eq
 801e872:	4613      	moveq	r3, r2
 801e874:	e787      	b.n	801e786 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e876:	1406      	asrs	r6, r0, #16
 801e878:	d45b      	bmi.n	801e932 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801e87a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801e87e:	42b5      	cmp	r5, r6
 801e880:	dd57      	ble.n	801e932 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801e882:	140f      	asrs	r7, r1, #16
 801e884:	d455      	bmi.n	801e932 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801e886:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801e88a:	42ba      	cmp	r2, r7
 801e88c:	dd51      	ble.n	801e932 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801e88e:	b22d      	sxth	r5, r5
 801e890:	9a00      	ldr	r2, [sp, #0]
 801e892:	fb07 6505 	mla	r5, r7, r5, r6
 801e896:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801e89a:	0e2e      	lsrs	r6, r5, #24
 801e89c:	d049      	beq.n	801e932 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801e89e:	f06f 0201 	mvn.w	r2, #1
 801e8a2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e8a6:	fb02 f20c 	mul.w	r2, r2, ip
 801e8aa:	f834 e002 	ldrh.w	lr, [r4, r2]
 801e8ae:	9201      	str	r2, [sp, #4]
 801e8b0:	9a03      	ldr	r2, [sp, #12]
 801e8b2:	ea4f 272e 	mov.w	r7, lr, asr #8
 801e8b6:	4356      	muls	r6, r2
 801e8b8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e8bc:	1c72      	adds	r2, r6, #1
 801e8be:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801e8c2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801e8c6:	b2ed      	uxtb	r5, r5
 801e8c8:	1212      	asrs	r2, r2, #8
 801e8ca:	fa1f f982 	uxth.w	r9, r2
 801e8ce:	43d2      	mvns	r2, r2
 801e8d0:	fb16 f609 	smulbb	r6, r6, r9
 801e8d4:	b2d2      	uxtb	r2, r2
 801e8d6:	fb15 f509 	smulbb	r5, r5, r9
 801e8da:	fb07 6702 	mla	r7, r7, r2, r6
 801e8de:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e8e2:	fb1a fa09 	smulbb	sl, sl, r9
 801e8e6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e8ea:	b2bf      	uxth	r7, r7
 801e8ec:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e8f0:	fa5f fe8e 	uxtb.w	lr, lr
 801e8f4:	fb06 a602 	mla	r6, r6, r2, sl
 801e8f8:	fb0e 5502 	mla	r5, lr, r2, r5
 801e8fc:	1c7a      	adds	r2, r7, #1
 801e8fe:	b2b6      	uxth	r6, r6
 801e900:	b2ad      	uxth	r5, r5
 801e902:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e906:	9a01      	ldr	r2, [sp, #4]
 801e908:	f105 0a01 	add.w	sl, r5, #1
 801e90c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e910:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e914:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e918:	ea47 070a 	orr.w	r7, r7, sl
 801e91c:	f106 0a01 	add.w	sl, r6, #1
 801e920:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e924:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e928:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e92c:	ea47 070a 	orr.w	r7, r7, sl
 801e930:	52a7      	strh	r7, [r4, r2]
 801e932:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e934:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e938:	4410      	add	r0, r2
 801e93a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e93c:	4411      	add	r1, r2
 801e93e:	e757      	b.n	801e7f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801e940:	f04f 0e00 	mov.w	lr, #0
 801e944:	eba3 020e 	sub.w	r2, r3, lr
 801e948:	2a00      	cmp	r2, #0
 801e94a:	f77f af55 	ble.w	801e7f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801e94e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801e952:	1405      	asrs	r5, r0, #16
 801e954:	140a      	asrs	r2, r1, #16
 801e956:	fb06 5202 	mla	r2, r6, r2, r5
 801e95a:	9d00      	ldr	r5, [sp, #0]
 801e95c:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801e960:	0e2e      	lsrs	r6, r5, #24
 801e962:	d044      	beq.n	801e9ee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801e964:	9a03      	ldr	r2, [sp, #12]
 801e966:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801e96a:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801e96e:	4356      	muls	r6, r2
 801e970:	ea4f 272c 	mov.w	r7, ip, asr #8
 801e974:	1c72      	adds	r2, r6, #1
 801e976:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e97a:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801e97e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801e982:	b2ed      	uxtb	r5, r5
 801e984:	1212      	asrs	r2, r2, #8
 801e986:	fa1f f982 	uxth.w	r9, r2
 801e98a:	43d2      	mvns	r2, r2
 801e98c:	fb16 f609 	smulbb	r6, r6, r9
 801e990:	b2d2      	uxtb	r2, r2
 801e992:	fb15 f509 	smulbb	r5, r5, r9
 801e996:	fb07 6702 	mla	r7, r7, r2, r6
 801e99a:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801e99e:	fb1a fa09 	smulbb	sl, sl, r9
 801e9a2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801e9a6:	b2bf      	uxth	r7, r7
 801e9a8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e9ac:	fa5f fc8c 	uxtb.w	ip, ip
 801e9b0:	fb06 a602 	mla	r6, r6, r2, sl
 801e9b4:	fb0c 5502 	mla	r5, ip, r2, r5
 801e9b8:	1c7a      	adds	r2, r7, #1
 801e9ba:	b2b6      	uxth	r6, r6
 801e9bc:	b2ad      	uxth	r5, r5
 801e9be:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e9c2:	f105 0a01 	add.w	sl, r5, #1
 801e9c6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e9ca:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e9ce:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e9d2:	ea47 070a 	orr.w	r7, r7, sl
 801e9d6:	f106 0a01 	add.w	sl, r6, #1
 801e9da:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e9de:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e9e2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e9e6:	ea47 070a 	orr.w	r7, r7, sl
 801e9ea:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801e9ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e9f0:	f10e 0e01 	add.w	lr, lr, #1
 801e9f4:	4410      	add	r0, r2
 801e9f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e9f8:	4411      	add	r1, r2
 801e9fa:	e7a3      	b.n	801e944 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801e9fc:	b005      	add	sp, #20
 801e9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ea04 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ea04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea08:	b085      	sub	sp, #20
 801ea0a:	468b      	mov	fp, r1
 801ea0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ea10:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ea12:	9203      	str	r2, [sp, #12]
 801ea14:	6861      	ldr	r1, [r4, #4]
 801ea16:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 801ea1a:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801ea1e:	fb01 2000 	mla	r0, r1, r0, r2
 801ea22:	6822      	ldr	r2, [r4, #0]
 801ea24:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801ea28:	f8d9 2000 	ldr.w	r2, [r9]
 801ea2c:	9200      	str	r2, [sp, #0]
 801ea2e:	f1bb 0f00 	cmp.w	fp, #0
 801ea32:	dc03      	bgt.n	801ea3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ea34:	9a03      	ldr	r2, [sp, #12]
 801ea36:	2a00      	cmp	r2, #0
 801ea38:	f340 8154 	ble.w	801ece4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801ea3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ea3e:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801ea42:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ea46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ea48:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801ea4c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ea50:	2b00      	cmp	r3, #0
 801ea52:	dd0e      	ble.n	801ea72 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ea54:	140c      	asrs	r4, r1, #16
 801ea56:	d405      	bmi.n	801ea64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ea58:	42bc      	cmp	r4, r7
 801ea5a:	da03      	bge.n	801ea64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ea5c:	1414      	asrs	r4, r2, #16
 801ea5e:	d401      	bmi.n	801ea64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ea60:	42b4      	cmp	r4, r6
 801ea62:	db07      	blt.n	801ea74 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ea64:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ea66:	3b01      	subs	r3, #1
 801ea68:	3002      	adds	r0, #2
 801ea6a:	4421      	add	r1, r4
 801ea6c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ea6e:	4422      	add	r2, r4
 801ea70:	e7ee      	b.n	801ea50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ea72:	d017      	beq.n	801eaa4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ea74:	1e5c      	subs	r4, r3, #1
 801ea76:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ea78:	fb05 1504 	mla	r5, r5, r4, r1
 801ea7c:	142d      	asrs	r5, r5, #16
 801ea7e:	d409      	bmi.n	801ea94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ea80:	42bd      	cmp	r5, r7
 801ea82:	da07      	bge.n	801ea94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ea84:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ea86:	fb05 2404 	mla	r4, r5, r4, r2
 801ea8a:	1424      	asrs	r4, r4, #16
 801ea8c:	d402      	bmi.n	801ea94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ea8e:	42b4      	cmp	r4, r6
 801ea90:	f2c0 80c0 	blt.w	801ec14 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801ea94:	2700      	movs	r7, #0
 801ea96:	19dc      	adds	r4, r3, r7
 801ea98:	2c00      	cmp	r4, #0
 801ea9a:	dc3e      	bgt.n	801eb1a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801ea9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eaa0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801eaa4:	f1bb 0f00 	cmp.w	fp, #0
 801eaa8:	f340 811c 	ble.w	801ece4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801eaac:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eab2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eab6:	f1bb 0b01 	subs.w	fp, fp, #1
 801eaba:	eeb0 6a62 	vmov.f32	s12, s5
 801eabe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eac2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eac6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eaca:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801eace:	eeb0 6a43 	vmov.f32	s12, s6
 801ead2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ead6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801eada:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eade:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eae2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eae6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eaea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eaee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eaf2:	ee12 2a90 	vmov	r2, s5
 801eaf6:	eef0 2a47 	vmov.f32	s5, s14
 801eafa:	fb92 f3f3 	sdiv	r3, r2, r3
 801eafe:	ee13 2a10 	vmov	r2, s6
 801eb02:	9311      	str	r3, [sp, #68]	; 0x44
 801eb04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb06:	eeb0 3a67 	vmov.f32	s6, s15
 801eb0a:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb0e:	9a03      	ldr	r2, [sp, #12]
 801eb10:	9312      	str	r3, [sp, #72]	; 0x48
 801eb12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb14:	bf08      	it	eq
 801eb16:	4613      	moveq	r3, r2
 801eb18:	e789      	b.n	801ea2e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801eb1a:	140e      	asrs	r6, r1, #16
 801eb1c:	d461      	bmi.n	801ebe2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801eb1e:	f8d9 5008 	ldr.w	r5, [r9, #8]
 801eb22:	42b5      	cmp	r5, r6
 801eb24:	dd5d      	ble.n	801ebe2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801eb26:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801eb2a:	d45a      	bmi.n	801ebe2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801eb2c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801eb30:	4564      	cmp	r4, ip
 801eb32:	dd56      	ble.n	801ebe2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801eb34:	b22d      	sxth	r5, r5
 801eb36:	9c00      	ldr	r4, [sp, #0]
 801eb38:	fb0c 6505 	mla	r5, ip, r5, r6
 801eb3c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801eb40:	ea5f 6e14 	movs.w	lr, r4, lsr #24
 801eb44:	d04d      	beq.n	801ebe2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801eb46:	0a26      	lsrs	r6, r4, #8
 801eb48:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801eb4c:	fa5f f58e 	uxtb.w	r5, lr
 801eb50:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 801eb54:	9601      	str	r6, [sp, #4]
 801eb56:	d04a      	beq.n	801ebee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801eb58:	f06f 0601 	mvn.w	r6, #1
 801eb5c:	fa1f fa85 	uxth.w	sl, r5
 801eb60:	fa5f fc8c 	uxtb.w	ip, ip
 801eb64:	43ed      	mvns	r5, r5
 801eb66:	437e      	muls	r6, r7
 801eb68:	b2e4      	uxtb	r4, r4
 801eb6a:	fb1c fc0a 	smulbb	ip, ip, sl
 801eb6e:	b2ed      	uxtb	r5, r5
 801eb70:	f830 8006 	ldrh.w	r8, [r0, r6]
 801eb74:	fb14 f40a 	smulbb	r4, r4, sl
 801eb78:	9602      	str	r6, [sp, #8]
 801eb7a:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801eb7e:	f89d 6004 	ldrb.w	r6, [sp, #4]
 801eb82:	fb16 f60a 	smulbb	r6, r6, sl
 801eb86:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801eb8a:	fb0e cc05 	mla	ip, lr, r5, ip
 801eb8e:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 801eb92:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801eb96:	fa1f fc8c 	uxth.w	ip, ip
 801eb9a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801eb9e:	fa5f f888 	uxtb.w	r8, r8
 801eba2:	fb0e 6e05 	mla	lr, lr, r5, r6
 801eba6:	fb08 4405 	mla	r4, r8, r5, r4
 801ebaa:	f10c 0501 	add.w	r5, ip, #1
 801ebae:	fa1f fe8e 	uxth.w	lr, lr
 801ebb2:	b2a4      	uxth	r4, r4
 801ebb4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ebb8:	1c66      	adds	r6, r4, #1
 801ebba:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ebbe:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801ebc2:	9c02      	ldr	r4, [sp, #8]
 801ebc4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ebc8:	ea4c 0c06 	orr.w	ip, ip, r6
 801ebcc:	f10e 0601 	add.w	r6, lr, #1
 801ebd0:	eb06 261e 	add.w	r6, r6, lr, lsr #8
 801ebd4:	0976      	lsrs	r6, r6, #5
 801ebd6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ebda:	ea4c 0c06 	orr.w	ip, ip, r6
 801ebde:	f820 c004 	strh.w	ip, [r0, r4]
 801ebe2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ebe4:	3f01      	subs	r7, #1
 801ebe6:	4421      	add	r1, r4
 801ebe8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ebea:	4422      	add	r2, r4
 801ebec:	e753      	b.n	801ea96 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ebee:	4e3f      	ldr	r6, [pc, #252]	; (801ecec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 801ebf0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801ebf4:	f06f 0501 	mvn.w	r5, #1
 801ebf8:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
 801ebfc:	437d      	muls	r5, r7
 801ebfe:	ea4c 0c04 	orr.w	ip, ip, r4
 801ec02:	9c01      	ldr	r4, [sp, #4]
 801ec04:	00e6      	lsls	r6, r4, #3
 801ec06:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801ec0a:	ea4c 0c04 	orr.w	ip, ip, r4
 801ec0e:	f820 c005 	strh.w	ip, [r0, r5]
 801ec12:	e7e6      	b.n	801ebe2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801ec14:	f04f 0800 	mov.w	r8, #0
 801ec18:	eba3 0408 	sub.w	r4, r3, r8
 801ec1c:	2c00      	cmp	r4, #0
 801ec1e:	f77f af3d 	ble.w	801ea9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ec22:	140d      	asrs	r5, r1, #16
 801ec24:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801ec28:	1414      	asrs	r4, r2, #16
 801ec2a:	fb06 5404 	mla	r4, r6, r4, r5
 801ec2e:	9d00      	ldr	r5, [sp, #0]
 801ec30:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 801ec34:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 801ec38:	d042      	beq.n	801ecc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ec3a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ec3e:	fa5f f58c 	uxtb.w	r5, ip
 801ec42:	ea4f 4714 	mov.w	r7, r4, lsr #16
 801ec46:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801ec4a:	d040      	beq.n	801ecce <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801ec4c:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 801ec50:	fa1f fa85 	uxth.w	sl, r5
 801ec54:	b2ff      	uxtb	r7, r7
 801ec56:	43ed      	mvns	r5, r5
 801ec58:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801ec5c:	fb17 f70a 	smulbb	r7, r7, sl
 801ec60:	b2ed      	uxtb	r5, r5
 801ec62:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ec66:	b2e4      	uxtb	r4, r4
 801ec68:	b2f6      	uxtb	r6, r6
 801ec6a:	fb0c 7705 	mla	r7, ip, r5, r7
 801ec6e:	ea4f 0cee 	mov.w	ip, lr, asr #3
 801ec72:	fb14 f40a 	smulbb	r4, r4, sl
 801ec76:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ec7a:	b2bf      	uxth	r7, r7
 801ec7c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801ec80:	fb16 f60a 	smulbb	r6, r6, sl
 801ec84:	fa5f fe8e 	uxtb.w	lr, lr
 801ec88:	fb0e 4405 	mla	r4, lr, r5, r4
 801ec8c:	fb0c 6c05 	mla	ip, ip, r5, r6
 801ec90:	1c7d      	adds	r5, r7, #1
 801ec92:	b2a4      	uxth	r4, r4
 801ec94:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801ec98:	1c66      	adds	r6, r4, #1
 801ec9a:	fa1f fc8c 	uxth.w	ip, ip
 801ec9e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801eca2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801eca6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ecaa:	4337      	orrs	r7, r6
 801ecac:	f10c 0601 	add.w	r6, ip, #1
 801ecb0:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801ecb4:	0976      	lsrs	r6, r6, #5
 801ecb6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ecba:	4337      	orrs	r7, r6
 801ecbc:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
 801ecc0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ecc2:	f108 0801 	add.w	r8, r8, #1
 801ecc6:	4421      	add	r1, r4
 801ecc8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ecca:	4422      	add	r2, r4
 801eccc:	e7a4      	b.n	801ec18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ecce:	4d07      	ldr	r5, [pc, #28]	; (801ecec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>)
 801ecd0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801ecd4:	00f6      	lsls	r6, r6, #3
 801ecd6:	ea05 2707 	and.w	r7, r5, r7, lsl #8
 801ecda:	4327      	orrs	r7, r4
 801ecdc:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801ece0:	4327      	orrs	r7, r4
 801ece2:	e7eb      	b.n	801ecbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801ece4:	b005      	add	sp, #20
 801ece6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ecea:	bf00      	nop
 801ecec:	fffff800 	.word	0xfffff800

0801ecf0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ecf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecf4:	b087      	sub	sp, #28
 801ecf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ecfa:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ecfc:	9204      	str	r2, [sp, #16]
 801ecfe:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ed02:	9101      	str	r1, [sp, #4]
 801ed04:	9205      	str	r2, [sp, #20]
 801ed06:	6841      	ldr	r1, [r0, #4]
 801ed08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801ed0c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801ed10:	fb01 2404 	mla	r4, r1, r4, r2
 801ed14:	6802      	ldr	r2, [r0, #0]
 801ed16:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ed1a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801ed1e:	3201      	adds	r2, #1
 801ed20:	f022 0201 	bic.w	r2, r2, #1
 801ed24:	9202      	str	r2, [sp, #8]
 801ed26:	f8d8 2000 	ldr.w	r2, [r8]
 801ed2a:	9203      	str	r2, [sp, #12]
 801ed2c:	9a01      	ldr	r2, [sp, #4]
 801ed2e:	2a00      	cmp	r2, #0
 801ed30:	dc03      	bgt.n	801ed3a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ed32:	9a04      	ldr	r2, [sp, #16]
 801ed34:	2a00      	cmp	r2, #0
 801ed36:	f340 814d 	ble.w	801efd4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801ed3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ed3c:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801ed40:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ed44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ed46:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801ed4a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ed4e:	2b00      	cmp	r3, #0
 801ed50:	dd0e      	ble.n	801ed70 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ed52:	1402      	asrs	r2, r0, #16
 801ed54:	d405      	bmi.n	801ed62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ed56:	42ba      	cmp	r2, r7
 801ed58:	da03      	bge.n	801ed62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ed5a:	140a      	asrs	r2, r1, #16
 801ed5c:	d401      	bmi.n	801ed62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ed5e:	42b2      	cmp	r2, r6
 801ed60:	db07      	blt.n	801ed72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ed62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ed64:	3b01      	subs	r3, #1
 801ed66:	3402      	adds	r4, #2
 801ed68:	4410      	add	r0, r2
 801ed6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ed6c:	4411      	add	r1, r2
 801ed6e:	e7ee      	b.n	801ed4e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ed70:	d019      	beq.n	801eda6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801ed72:	1e5a      	subs	r2, r3, #1
 801ed74:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ed76:	fb05 0502 	mla	r5, r5, r2, r0
 801ed7a:	142d      	asrs	r5, r5, #16
 801ed7c:	d409      	bmi.n	801ed92 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ed7e:	42bd      	cmp	r5, r7
 801ed80:	da07      	bge.n	801ed92 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ed82:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ed84:	fb05 1202 	mla	r2, r5, r2, r1
 801ed88:	1412      	asrs	r2, r2, #16
 801ed8a:	d402      	bmi.n	801ed92 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ed8c:	42b2      	cmp	r2, r6
 801ed8e:	f2c0 80b7 	blt.w	801ef00 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801ed92:	f04f 0c00 	mov.w	ip, #0
 801ed96:	eb03 020c 	add.w	r2, r3, ip
 801ed9a:	2a00      	cmp	r2, #0
 801ed9c:	dc3f      	bgt.n	801ee1e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12e>
 801ed9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eda2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801eda6:	9b01      	ldr	r3, [sp, #4]
 801eda8:	2b00      	cmp	r3, #0
 801edaa:	f340 8113 	ble.w	801efd4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801edae:	ee30 0a04 	vadd.f32	s0, s0, s8
 801edb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801edb4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801edb8:	eeb0 6a62 	vmov.f32	s12, s5
 801edbc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801edc0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801edc4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801edc8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801edcc:	eeb0 6a43 	vmov.f32	s12, s6
 801edd0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801edd4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801edd8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eddc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ede0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ede4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ede8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801edec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801edf0:	ee12 2a90 	vmov	r2, s5
 801edf4:	eef0 2a47 	vmov.f32	s5, s14
 801edf8:	fb92 f3f3 	sdiv	r3, r2, r3
 801edfc:	ee13 2a10 	vmov	r2, s6
 801ee00:	9313      	str	r3, [sp, #76]	; 0x4c
 801ee02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ee04:	eeb0 3a67 	vmov.f32	s6, s15
 801ee08:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee0c:	9314      	str	r3, [sp, #80]	; 0x50
 801ee0e:	9b01      	ldr	r3, [sp, #4]
 801ee10:	9a04      	ldr	r2, [sp, #16]
 801ee12:	3b01      	subs	r3, #1
 801ee14:	9301      	str	r3, [sp, #4]
 801ee16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ee18:	bf08      	it	eq
 801ee1a:	4613      	moveq	r3, r2
 801ee1c:	e786      	b.n	801ed2c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ee1e:	1405      	asrs	r5, r0, #16
 801ee20:	d467      	bmi.n	801eef2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801ee22:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801ee26:	42aa      	cmp	r2, r5
 801ee28:	dd63      	ble.n	801eef2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801ee2a:	140e      	asrs	r6, r1, #16
 801ee2c:	d461      	bmi.n	801eef2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801ee2e:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801ee32:	42b2      	cmp	r2, r6
 801ee34:	dd5d      	ble.n	801eef2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801ee36:	9a02      	ldr	r2, [sp, #8]
 801ee38:	fb06 5502 	mla	r5, r6, r2, r5
 801ee3c:	9e03      	ldr	r6, [sp, #12]
 801ee3e:	086a      	lsrs	r2, r5, #1
 801ee40:	5cb2      	ldrb	r2, [r6, r2]
 801ee42:	07ee      	lsls	r6, r5, #31
 801ee44:	bf54      	ite	pl
 801ee46:	f002 020f 	andpl.w	r2, r2, #15
 801ee4a:	1112      	asrmi	r2, r2, #4
 801ee4c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ee50:	b2d2      	uxtb	r2, r2
 801ee52:	2a00      	cmp	r2, #0
 801ee54:	d04d      	beq.n	801eef2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801ee56:	f06f 0601 	mvn.w	r6, #1
 801ee5a:	4d60      	ldr	r5, [pc, #384]	; (801efdc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801ee5c:	fb06 fb0c 	mul.w	fp, r6, ip
 801ee60:	9e05      	ldr	r6, [sp, #20]
 801ee62:	682d      	ldr	r5, [r5, #0]
 801ee64:	4372      	muls	r2, r6
 801ee66:	f834 e00b 	ldrh.w	lr, [r4, fp]
 801ee6a:	0a2f      	lsrs	r7, r5, #8
 801ee6c:	1c56      	adds	r6, r2, #1
 801ee6e:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 801ee72:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ee76:	00ed      	lsls	r5, r5, #3
 801ee78:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ee7c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ee80:	ea4f 262e 	mov.w	r6, lr, asr #8
 801ee84:	1212      	asrs	r2, r2, #8
 801ee86:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ee8a:	b2ed      	uxtb	r5, r5
 801ee8c:	fa1f fa82 	uxth.w	sl, r2
 801ee90:	43d2      	mvns	r2, r2
 801ee92:	fb17 f70a 	smulbb	r7, r7, sl
 801ee96:	b2d2      	uxtb	r2, r2
 801ee98:	fb19 f90a 	smulbb	r9, r9, sl
 801ee9c:	fb06 7602 	mla	r6, r6, r2, r7
 801eea0:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801eea4:	fb15 f50a 	smulbb	r5, r5, sl
 801eea8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801eeac:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801eeb0:	b2b6      	uxth	r6, r6
 801eeb2:	fa5f fe8e 	uxtb.w	lr, lr
 801eeb6:	fb07 9702 	mla	r7, r7, r2, r9
 801eeba:	fb0e 5502 	mla	r5, lr, r2, r5
 801eebe:	b2bf      	uxth	r7, r7
 801eec0:	b2ad      	uxth	r5, r5
 801eec2:	f107 0901 	add.w	r9, r7, #1
 801eec6:	f105 0e01 	add.w	lr, r5, #1
 801eeca:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801eece:	f106 0901 	add.w	r9, r6, #1
 801eed2:	eb0e 2e15 	add.w	lr, lr, r5, lsr #8
 801eed6:	097f      	lsrs	r7, r7, #5
 801eed8:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801eedc:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801eee0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801eee4:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801eee8:	4337      	orrs	r7, r6
 801eeea:	ea47 070e 	orr.w	r7, r7, lr
 801eeee:	f824 700b 	strh.w	r7, [r4, fp]
 801eef2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801eef4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801eef8:	4410      	add	r0, r2
 801eefa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eefc:	4411      	add	r1, r2
 801eefe:	e74a      	b.n	801ed96 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ef00:	f04f 0e00 	mov.w	lr, #0
 801ef04:	eba3 020e 	sub.w	r2, r3, lr
 801ef08:	2a00      	cmp	r2, #0
 801ef0a:	f77f af48 	ble.w	801ed9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801ef0e:	1402      	asrs	r2, r0, #16
 801ef10:	9e02      	ldr	r6, [sp, #8]
 801ef12:	140d      	asrs	r5, r1, #16
 801ef14:	fb06 2505 	mla	r5, r6, r5, r2
 801ef18:	9e03      	ldr	r6, [sp, #12]
 801ef1a:	086a      	lsrs	r2, r5, #1
 801ef1c:	07ed      	lsls	r5, r5, #31
 801ef1e:	5cb2      	ldrb	r2, [r6, r2]
 801ef20:	bf54      	ite	pl
 801ef22:	f002 020f 	andpl.w	r2, r2, #15
 801ef26:	1112      	asrmi	r2, r2, #4
 801ef28:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ef2c:	b2d2      	uxtb	r2, r2
 801ef2e:	2a00      	cmp	r2, #0
 801ef30:	d049      	beq.n	801efc6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801ef32:	9e05      	ldr	r6, [sp, #20]
 801ef34:	4d29      	ldr	r5, [pc, #164]	; (801efdc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801ef36:	4372      	muls	r2, r6
 801ef38:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801ef3c:	682d      	ldr	r5, [r5, #0]
 801ef3e:	1c56      	adds	r6, r2, #1
 801ef40:	0a2f      	lsrs	r7, r5, #8
 801ef42:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801ef46:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ef4a:	ea4f 262c 	mov.w	r6, ip, asr #8
 801ef4e:	1212      	asrs	r2, r2, #8
 801ef50:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 801ef54:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ef58:	fa1f fa82 	uxth.w	sl, r2
 801ef5c:	43d2      	mvns	r2, r2
 801ef5e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ef62:	00ed      	lsls	r5, r5, #3
 801ef64:	fb17 f70a 	smulbb	r7, r7, sl
 801ef68:	b2d2      	uxtb	r2, r2
 801ef6a:	fb19 f90a 	smulbb	r9, r9, sl
 801ef6e:	b2ed      	uxtb	r5, r5
 801ef70:	fb06 7602 	mla	r6, r6, r2, r7
 801ef74:	ea4f 07ec 	mov.w	r7, ip, asr #3
 801ef78:	fb15 f50a 	smulbb	r5, r5, sl
 801ef7c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ef80:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ef84:	b2b6      	uxth	r6, r6
 801ef86:	fa5f fc8c 	uxtb.w	ip, ip
 801ef8a:	fb07 9702 	mla	r7, r7, r2, r9
 801ef8e:	f106 0b01 	add.w	fp, r6, #1
 801ef92:	fb0c 5502 	mla	r5, ip, r2, r5
 801ef96:	b2bf      	uxth	r7, r7
 801ef98:	b2ad      	uxth	r5, r5
 801ef9a:	f107 0901 	add.w	r9, r7, #1
 801ef9e:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 801efa2:	f105 0c01 	add.w	ip, r5, #1
 801efa6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801efaa:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801efae:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 801efb2:	097f      	lsrs	r7, r7, #5
 801efb4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801efb8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801efbc:	4337      	orrs	r7, r6
 801efbe:	ea47 070c 	orr.w	r7, r7, ip
 801efc2:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801efc6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801efc8:	f10e 0e01 	add.w	lr, lr, #1
 801efcc:	4410      	add	r0, r2
 801efce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801efd0:	4411      	add	r1, r2
 801efd2:	e797      	b.n	801ef04 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801efd4:	b007      	add	sp, #28
 801efd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efda:	bf00      	nop
 801efdc:	200057e8 	.word	0x200057e8

0801efe0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801efe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efe4:	b087      	sub	sp, #28
 801efe6:	468b      	mov	fp, r1
 801efe8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801efec:	9815      	ldr	r0, [sp, #84]	; 0x54
 801efee:	9205      	str	r2, [sp, #20]
 801eff0:	6841      	ldr	r1, [r0, #4]
 801eff2:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801eff6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801effa:	fb01 2404 	mla	r4, r1, r4, r2
 801effe:	6802      	ldr	r2, [r0, #0]
 801f000:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f004:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801f008:	3201      	adds	r2, #1
 801f00a:	f022 0201 	bic.w	r2, r2, #1
 801f00e:	9201      	str	r2, [sp, #4]
 801f010:	f8d8 2000 	ldr.w	r2, [r8]
 801f014:	9202      	str	r2, [sp, #8]
 801f016:	f1bb 0f00 	cmp.w	fp, #0
 801f01a:	dc03      	bgt.n	801f024 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801f01c:	9a05      	ldr	r2, [sp, #20]
 801f01e:	2a00      	cmp	r2, #0
 801f020:	f340 8158 	ble.w	801f2d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f024:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f026:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f02a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f02e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f030:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f034:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f038:	2b00      	cmp	r3, #0
 801f03a:	dd0e      	ble.n	801f05a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f03c:	1402      	asrs	r2, r0, #16
 801f03e:	d405      	bmi.n	801f04c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f040:	42ba      	cmp	r2, r7
 801f042:	da03      	bge.n	801f04c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f044:	140a      	asrs	r2, r1, #16
 801f046:	d401      	bmi.n	801f04c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f048:	42b2      	cmp	r2, r6
 801f04a:	db07      	blt.n	801f05c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f04c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f04e:	3b01      	subs	r3, #1
 801f050:	3402      	adds	r4, #2
 801f052:	4410      	add	r0, r2
 801f054:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f056:	4411      	add	r1, r2
 801f058:	e7ee      	b.n	801f038 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f05a:	d017      	beq.n	801f08c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 801f05c:	1e5a      	subs	r2, r3, #1
 801f05e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f060:	fb05 0502 	mla	r5, r5, r2, r0
 801f064:	142d      	asrs	r5, r5, #16
 801f066:	d409      	bmi.n	801f07c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f068:	42bd      	cmp	r5, r7
 801f06a:	da07      	bge.n	801f07c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f06c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f06e:	fb05 1202 	mla	r2, r5, r2, r1
 801f072:	1412      	asrs	r2, r2, #16
 801f074:	d402      	bmi.n	801f07c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f076:	42b2      	cmp	r2, r6
 801f078:	f2c0 80c0 	blt.w	801f1fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 801f07c:	2600      	movs	r6, #0
 801f07e:	199a      	adds	r2, r3, r6
 801f080:	2a00      	cmp	r2, #0
 801f082:	dc3e      	bgt.n	801f102 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801f084:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f088:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f08c:	f1bb 0f00 	cmp.w	fp, #0
 801f090:	f340 8120 	ble.w	801f2d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f094:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f098:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f09a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f09e:	f1bb 0b01 	subs.w	fp, fp, #1
 801f0a2:	eeb0 6a62 	vmov.f32	s12, s5
 801f0a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f0aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f0ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f0b2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f0b6:	eeb0 6a43 	vmov.f32	s12, s6
 801f0ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f0be:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f0c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f0c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f0ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f0ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f0d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f0d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f0da:	ee12 2a90 	vmov	r2, s5
 801f0de:	eef0 2a47 	vmov.f32	s5, s14
 801f0e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0e6:	ee13 2a10 	vmov	r2, s6
 801f0ea:	9313      	str	r3, [sp, #76]	; 0x4c
 801f0ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f0ee:	eeb0 3a67 	vmov.f32	s6, s15
 801f0f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0f6:	9a05      	ldr	r2, [sp, #20]
 801f0f8:	9314      	str	r3, [sp, #80]	; 0x50
 801f0fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f0fc:	bf08      	it	eq
 801f0fe:	4613      	moveq	r3, r2
 801f100:	e789      	b.n	801f016 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f102:	1405      	asrs	r5, r0, #16
 801f104:	d467      	bmi.n	801f1d6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f106:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801f10a:	42aa      	cmp	r2, r5
 801f10c:	dd63      	ble.n	801f1d6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f10e:	140f      	asrs	r7, r1, #16
 801f110:	d461      	bmi.n	801f1d6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f112:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801f116:	42ba      	cmp	r2, r7
 801f118:	dd5d      	ble.n	801f1d6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f11a:	9a01      	ldr	r2, [sp, #4]
 801f11c:	fb07 5502 	mla	r5, r7, r2, r5
 801f120:	9f02      	ldr	r7, [sp, #8]
 801f122:	086a      	lsrs	r2, r5, #1
 801f124:	5cba      	ldrb	r2, [r7, r2]
 801f126:	07ef      	lsls	r7, r5, #31
 801f128:	bf54      	ite	pl
 801f12a:	f002 020f 	andpl.w	r2, r2, #15
 801f12e:	1112      	asrmi	r2, r2, #4
 801f130:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f134:	b2d2      	uxtb	r2, r2
 801f136:	2a00      	cmp	r2, #0
 801f138:	d04d      	beq.n	801f1d6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f13a:	4d68      	ldr	r5, [pc, #416]	; (801f2dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 801f13c:	2aff      	cmp	r2, #255	; 0xff
 801f13e:	682f      	ldr	r7, [r5, #0]
 801f140:	ea4f 05d7 	mov.w	r5, r7, lsr #3
 801f144:	ea4f 2917 	mov.w	r9, r7, lsr #8
 801f148:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f14c:	ea4f 07c7 	mov.w	r7, r7, lsl #3
 801f150:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801f154:	9503      	str	r5, [sp, #12]
 801f156:	b2ff      	uxtb	r7, r7
 801f158:	d043      	beq.n	801f1e2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f15a:	f06f 0501 	mvn.w	r5, #1
 801f15e:	fa1f fa82 	uxth.w	sl, r2
 801f162:	43d2      	mvns	r2, r2
 801f164:	fb19 f90a 	smulbb	r9, r9, sl
 801f168:	4375      	muls	r5, r6
 801f16a:	fb17 f70a 	smulbb	r7, r7, sl
 801f16e:	b2d2      	uxtb	r2, r2
 801f170:	f834 e005 	ldrh.w	lr, [r4, r5]
 801f174:	9504      	str	r5, [sp, #16]
 801f176:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f17a:	9d03      	ldr	r5, [sp, #12]
 801f17c:	fb15 f50a 	smulbb	r5, r5, sl
 801f180:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f184:	fb0c 9c02 	mla	ip, ip, r2, r9
 801f188:	ea4f 09ee 	mov.w	r9, lr, asr #3
 801f18c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f190:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f194:	fa1f fc8c 	uxth.w	ip, ip
 801f198:	fa5f fe8e 	uxtb.w	lr, lr
 801f19c:	fb09 5502 	mla	r5, r9, r2, r5
 801f1a0:	fb0e 7702 	mla	r7, lr, r2, r7
 801f1a4:	b2ad      	uxth	r5, r5
 801f1a6:	b2bf      	uxth	r7, r7
 801f1a8:	f105 0901 	add.w	r9, r5, #1
 801f1ac:	1c7a      	adds	r2, r7, #1
 801f1ae:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801f1b2:	f10c 0901 	add.w	r9, ip, #1
 801f1b6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f1ba:	9a04      	ldr	r2, [sp, #16]
 801f1bc:	096d      	lsrs	r5, r5, #5
 801f1be:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801f1c2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f1c6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f1ca:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f1ce:	ea45 050c 	orr.w	r5, r5, ip
 801f1d2:	433d      	orrs	r5, r7
 801f1d4:	52a5      	strh	r5, [r4, r2]
 801f1d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f1d8:	3e01      	subs	r6, #1
 801f1da:	4410      	add	r0, r2
 801f1dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f1de:	4411      	add	r1, r2
 801f1e0:	e74d      	b.n	801f07e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f1e2:	f06f 0201 	mvn.w	r2, #1
 801f1e6:	fb02 fe06 	mul.w	lr, r2, r6
 801f1ea:	9a03      	ldr	r2, [sp, #12]
 801f1ec:	00d5      	lsls	r5, r2, #3
 801f1ee:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801f1f2:	ea45 05d7 	orr.w	r5, r5, r7, lsr #3
 801f1f6:	f824 500e 	strh.w	r5, [r4, lr]
 801f1fa:	e7ec      	b.n	801f1d6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f1fc:	f04f 0e00 	mov.w	lr, #0
 801f200:	eba3 020e 	sub.w	r2, r3, lr
 801f204:	2a00      	cmp	r2, #0
 801f206:	f77f af3d 	ble.w	801f084 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801f20a:	1402      	asrs	r2, r0, #16
 801f20c:	9e01      	ldr	r6, [sp, #4]
 801f20e:	140d      	asrs	r5, r1, #16
 801f210:	fb06 2505 	mla	r5, r6, r5, r2
 801f214:	9e02      	ldr	r6, [sp, #8]
 801f216:	086a      	lsrs	r2, r5, #1
 801f218:	07ed      	lsls	r5, r5, #31
 801f21a:	5cb2      	ldrb	r2, [r6, r2]
 801f21c:	bf54      	ite	pl
 801f21e:	f002 020f 	andpl.w	r2, r2, #15
 801f222:	1112      	asrmi	r2, r2, #4
 801f224:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f228:	b2d2      	uxtb	r2, r2
 801f22a:	2a00      	cmp	r2, #0
 801f22c:	d045      	beq.n	801f2ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801f22e:	4d2b      	ldr	r5, [pc, #172]	; (801f2dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 801f230:	2aff      	cmp	r2, #255	; 0xff
 801f232:	682e      	ldr	r6, [r5, #0]
 801f234:	ea4f 2916 	mov.w	r9, r6, lsr #8
 801f238:	ea4f 05d6 	mov.w	r5, r6, lsr #3
 801f23c:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801f240:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801f244:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f248:	b2f6      	uxtb	r6, r6
 801f24a:	d03d      	beq.n	801f2c8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801f24c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801f250:	fa1f fa82 	uxth.w	sl, r2
 801f254:	43d2      	mvns	r2, r2
 801f256:	fb19 f90a 	smulbb	r9, r9, sl
 801f25a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801f25e:	fb15 f50a 	smulbb	r5, r5, sl
 801f262:	b2d2      	uxtb	r2, r2
 801f264:	fb16 f60a 	smulbb	r6, r6, sl
 801f268:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f26c:	fb07 9702 	mla	r7, r7, r2, r9
 801f270:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801f274:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f278:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f27c:	b2bf      	uxth	r7, r7
 801f27e:	fa5f fc8c 	uxtb.w	ip, ip
 801f282:	fb09 5502 	mla	r5, r9, r2, r5
 801f286:	fb0c 6602 	mla	r6, ip, r2, r6
 801f28a:	b2ad      	uxth	r5, r5
 801f28c:	b2b6      	uxth	r6, r6
 801f28e:	f105 0901 	add.w	r9, r5, #1
 801f292:	1c72      	adds	r2, r6, #1
 801f294:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801f298:	f107 0901 	add.w	r9, r7, #1
 801f29c:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801f2a0:	096d      	lsrs	r5, r5, #5
 801f2a2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801f2a6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801f2aa:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f2ae:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f2b2:	433d      	orrs	r5, r7
 801f2b4:	4335      	orrs	r5, r6
 801f2b6:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 801f2ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f2bc:	f10e 0e01 	add.w	lr, lr, #1
 801f2c0:	4410      	add	r0, r2
 801f2c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f2c4:	4411      	add	r1, r2
 801f2c6:	e79b      	b.n	801f200 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801f2c8:	00ed      	lsls	r5, r5, #3
 801f2ca:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801f2ce:	ea45 05d6 	orr.w	r5, r5, r6, lsr #3
 801f2d2:	e7f0      	b.n	801f2b6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801f2d4:	b007      	add	sp, #28
 801f2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2da:	bf00      	nop
 801f2dc:	200057e8 	.word	0x200057e8

0801f2e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801f2e0:	4770      	bx	lr

0801f2e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801f2e2:	4770      	bx	lr

0801f2e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801f2e4:	4770      	bx	lr

0801f2e6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801f2e6:	4770      	bx	lr

0801f2e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f2e8:	4770      	bx	lr

0801f2ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f2ea:	4770      	bx	lr

0801f2ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f2ec:	4770      	bx	lr

0801f2ee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f2ee:	4770      	bx	lr

0801f2f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f2f0:	4770      	bx	lr

0801f2f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801f2f2:	4770      	bx	lr

0801f2f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f2f4:	4770      	bx	lr

0801f2f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f2f6:	4770      	bx	lr

0801f2f8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f2f8:	4770      	bx	lr

0801f2fa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801f2fa:	4770      	bx	lr

0801f2fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f2fc:	4770      	bx	lr

0801f2fe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f2fe:	4770      	bx	lr

0801f300 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f300:	4770      	bx	lr

0801f302 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f302:	4770      	bx	lr

0801f304 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f304:	4770      	bx	lr

0801f306 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f306:	4770      	bx	lr

0801f308 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f308:	4770      	bx	lr

0801f30a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f30a:	4770      	bx	lr

0801f30c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f30c:	4770      	bx	lr

0801f30e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f30e:	4770      	bx	lr

0801f310 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f310:	4770      	bx	lr

0801f312 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801f312:	4770      	bx	lr

0801f314 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f314:	4770      	bx	lr

0801f316 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801f316:	4770      	bx	lr

0801f318 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801f318:	b508      	push	{r3, lr}
 801f31a:	4b06      	ldr	r3, [pc, #24]	; (801f334 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801f31c:	8818      	ldrh	r0, [r3, #0]
 801f31e:	b928      	cbnz	r0, 801f32c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 801f320:	4b05      	ldr	r3, [pc, #20]	; (801f338 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801f322:	2154      	movs	r1, #84	; 0x54
 801f324:	4a05      	ldr	r2, [pc, #20]	; (801f33c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801f326:	4806      	ldr	r0, [pc, #24]	; (801f340 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 801f328:	f009 f9b6 	bl	8028698 <__assert_func>
 801f32c:	0040      	lsls	r0, r0, #1
 801f32e:	b280      	uxth	r0, r0
 801f330:	bd08      	pop	{r3, pc}
 801f332:	bf00      	nop
 801f334:	200057da 	.word	0x200057da
 801f338:	0802cf59 	.word	0x0802cf59
 801f33c:	0802d4e3 	.word	0x0802d4e3
 801f340:	0802cf9b 	.word	0x0802cf9b

0801f344 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801f344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f348:	b08b      	sub	sp, #44	; 0x2c
 801f34a:	460f      	mov	r7, r1
 801f34c:	4616      	mov	r6, r2
 801f34e:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801f352:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801f356:	f1bb 0f00 	cmp.w	fp, #0
 801f35a:	d046      	beq.n	801f3ea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801f35c:	6810      	ldr	r0, [r2, #0]
 801f35e:	ad06      	add	r5, sp, #24
 801f360:	6851      	ldr	r1, [r2, #4]
 801f362:	c503      	stmia	r5!, {r0, r1}
 801f364:	6818      	ldr	r0, [r3, #0]
 801f366:	ad08      	add	r5, sp, #32
 801f368:	6859      	ldr	r1, [r3, #4]
 801f36a:	c503      	stmia	r5!, {r0, r1}
 801f36c:	a806      	add	r0, sp, #24
 801f36e:	f7fa fc27 	bl	8019bc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f372:	4631      	mov	r1, r6
 801f374:	a808      	add	r0, sp, #32
 801f376:	f7fa fc0b 	bl	8019b90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f37a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f37e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801f382:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801f386:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801f38a:	fb16 2103 	smlabb	r1, r6, r3, r2
 801f38e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801f392:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801f396:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801f39a:	4f5d      	ldr	r7, [pc, #372]	; (801f510 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 801f39c:	440a      	add	r2, r1
 801f39e:	6838      	ldr	r0, [r7, #0]
 801f3a0:	46b9      	mov	r9, r7
 801f3a2:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f3a6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f3aa:	4413      	add	r3, r2
 801f3ac:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801f3b0:	6803      	ldr	r3, [r0, #0]
 801f3b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f3b4:	4798      	blx	r3
 801f3b6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f3ba:	d019      	beq.n	801f3f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801f3bc:	f010 0f04 	tst.w	r0, #4
 801f3c0:	d01a      	beq.n	801f3f8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801f3c2:	f8d9 0000 	ldr.w	r0, [r9]
 801f3c6:	b2ad      	uxth	r5, r5
 801f3c8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801f3cc:	6801      	ldr	r1, [r0, #0]
 801f3ce:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f3d2:	9501      	str	r5, [sp, #4]
 801f3d4:	e9cd b403 	strd	fp, r4, [sp, #12]
 801f3d8:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801f3dc:	9402      	str	r4, [sp, #8]
 801f3de:	fa1f f488 	uxth.w	r4, r8
 801f3e2:	9400      	str	r4, [sp, #0]
 801f3e4:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 801f3e6:	4631      	mov	r1, r6
 801f3e8:	47a0      	blx	r4
 801f3ea:	b00b      	add	sp, #44	; 0x2c
 801f3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3f0:	b914      	cbnz	r4, 801f3f8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801f3f2:	f010 0f01 	tst.w	r0, #1
 801f3f6:	e7e3      	b.n	801f3c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801f3f8:	f8d9 0000 	ldr.w	r0, [r9]
 801f3fc:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801f400:	6803      	ldr	r3, [r0, #0]
 801f402:	6a1b      	ldr	r3, [r3, #32]
 801f404:	4798      	blx	r3
 801f406:	4b43      	ldr	r3, [pc, #268]	; (801f514 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
 801f408:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801f40c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f410:	881a      	ldrh	r2, [r3, #0]
 801f412:	469a      	mov	sl, r3
 801f414:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801f418:	fb05 f502 	mul.w	r5, r5, r2
 801f41c:	fb02 1404 	mla	r4, r2, r4, r1
 801f420:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f424:	d058      	beq.n	801f4d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x194>
 801f426:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801f42a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f42e:	fa1f f28b 	uxth.w	r2, fp
 801f432:	469e      	mov	lr, r3
 801f434:	fa1f f989 	uxth.w	r9, r9
 801f438:	42ac      	cmp	r4, r5
 801f43a:	d263      	bcs.n	801f504 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 801f43c:	eb04 0a07 	add.w	sl, r4, r7
 801f440:	4554      	cmp	r4, sl
 801f442:	d23c      	bcs.n	801f4be <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17a>
 801f444:	8821      	ldrh	r1, [r4, #0]
 801f446:	f836 3b02 	ldrh.w	r3, [r6], #2
 801f44a:	1208      	asrs	r0, r1, #8
 801f44c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801f450:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f454:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801f458:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f45c:	00c9      	lsls	r1, r1, #3
 801f45e:	fb10 f009 	smulbb	r0, r0, r9
 801f462:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801f466:	b2c9      	uxtb	r1, r1
 801f468:	fb0c 0c02 	mla	ip, ip, r2, r0
 801f46c:	10d8      	asrs	r0, r3, #3
 801f46e:	fb11 f109 	smulbb	r1, r1, r9
 801f472:	00db      	lsls	r3, r3, #3
 801f474:	fa1f fc8c 	uxth.w	ip, ip
 801f478:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f47c:	fb1b fb09 	smulbb	fp, fp, r9
 801f480:	b2db      	uxtb	r3, r3
 801f482:	fb03 1302 	mla	r3, r3, r2, r1
 801f486:	f10c 0101 	add.w	r1, ip, #1
 801f48a:	fb00 b002 	mla	r0, r0, r2, fp
 801f48e:	b29b      	uxth	r3, r3
 801f490:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801f494:	1c59      	adds	r1, r3, #1
 801f496:	b280      	uxth	r0, r0
 801f498:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f49c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801f4a0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f4a4:	ea4c 0c03 	orr.w	ip, ip, r3
 801f4a8:	1c43      	adds	r3, r0, #1
 801f4aa:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f4ae:	0940      	lsrs	r0, r0, #5
 801f4b0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f4b4:	ea4c 0c00 	orr.w	ip, ip, r0
 801f4b8:	f824 cb02 	strh.w	ip, [r4], #2
 801f4bc:	e7c0      	b.n	801f440 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801f4be:	f8be 3000 	ldrh.w	r3, [lr]
 801f4c2:	eba3 0308 	sub.w	r3, r3, r8
 801f4c6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f4ca:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f4ce:	eba3 0308 	sub.w	r3, r3, r8
 801f4d2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f4d6:	e7af      	b.n	801f438 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801f4d8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f4dc:	f8d9 0000 	ldr.w	r0, [r9]
 801f4e0:	42ac      	cmp	r4, r5
 801f4e2:	6803      	ldr	r3, [r0, #0]
 801f4e4:	d20e      	bcs.n	801f504 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 801f4e6:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
 801f4ea:	4632      	mov	r2, r6
 801f4ec:	463b      	mov	r3, r7
 801f4ee:	4621      	mov	r1, r4
 801f4f0:	47c0      	blx	r8
 801f4f2:	f8ba 3000 	ldrh.w	r3, [sl]
 801f4f6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f4fa:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f4fe:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f502:	e7eb      	b.n	801f4dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 801f504:	4b02      	ldr	r3, [pc, #8]	; (801f510 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 801f506:	6818      	ldr	r0, [r3, #0]
 801f508:	6803      	ldr	r3, [r0, #0]
 801f50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f50c:	4798      	blx	r3
 801f50e:	e76c      	b.n	801f3ea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801f510:	200057e0 	.word	0x200057e0
 801f514:	200057da 	.word	0x200057da

0801f518 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f518:	b510      	push	{r4, lr}
 801f51a:	4604      	mov	r4, r0
 801f51c:	2104      	movs	r1, #4
 801f51e:	f009 f88c 	bl	802863a <_ZdlPvj>
 801f522:	4620      	mov	r0, r4
 801f524:	bd10      	pop	{r4, pc}

0801f526 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801f526:	b510      	push	{r4, lr}
 801f528:	4604      	mov	r4, r0
 801f52a:	2104      	movs	r1, #4
 801f52c:	f009 f885 	bl	802863a <_ZdlPvj>
 801f530:	4620      	mov	r0, r4
 801f532:	bd10      	pop	{r4, pc}

0801f534 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f534:	b510      	push	{r4, lr}
 801f536:	4604      	mov	r4, r0
 801f538:	2104      	movs	r1, #4
 801f53a:	f009 f87e 	bl	802863a <_ZdlPvj>
 801f53e:	4620      	mov	r0, r4
 801f540:	bd10      	pop	{r4, pc}

0801f542 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801f542:	b510      	push	{r4, lr}
 801f544:	4604      	mov	r4, r0
 801f546:	2104      	movs	r1, #4
 801f548:	f009 f877 	bl	802863a <_ZdlPvj>
 801f54c:	4620      	mov	r0, r4
 801f54e:	bd10      	pop	{r4, pc}

0801f550 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f550:	b510      	push	{r4, lr}
 801f552:	4604      	mov	r4, r0
 801f554:	2104      	movs	r1, #4
 801f556:	f009 f870 	bl	802863a <_ZdlPvj>
 801f55a:	4620      	mov	r0, r4
 801f55c:	bd10      	pop	{r4, pc}

0801f55e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f55e:	b510      	push	{r4, lr}
 801f560:	4604      	mov	r4, r0
 801f562:	2104      	movs	r1, #4
 801f564:	f009 f869 	bl	802863a <_ZdlPvj>
 801f568:	4620      	mov	r0, r4
 801f56a:	bd10      	pop	{r4, pc}

0801f56c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f56c:	b510      	push	{r4, lr}
 801f56e:	4604      	mov	r4, r0
 801f570:	2104      	movs	r1, #4
 801f572:	f009 f862 	bl	802863a <_ZdlPvj>
 801f576:	4620      	mov	r0, r4
 801f578:	bd10      	pop	{r4, pc}

0801f57a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f57a:	b510      	push	{r4, lr}
 801f57c:	4604      	mov	r4, r0
 801f57e:	2104      	movs	r1, #4
 801f580:	f009 f85b 	bl	802863a <_ZdlPvj>
 801f584:	4620      	mov	r0, r4
 801f586:	bd10      	pop	{r4, pc}

0801f588 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f588:	b510      	push	{r4, lr}
 801f58a:	4604      	mov	r4, r0
 801f58c:	2104      	movs	r1, #4
 801f58e:	f009 f854 	bl	802863a <_ZdlPvj>
 801f592:	4620      	mov	r0, r4
 801f594:	bd10      	pop	{r4, pc}

0801f596 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f596:	b510      	push	{r4, lr}
 801f598:	4604      	mov	r4, r0
 801f59a:	2104      	movs	r1, #4
 801f59c:	f009 f84d 	bl	802863a <_ZdlPvj>
 801f5a0:	4620      	mov	r0, r4
 801f5a2:	bd10      	pop	{r4, pc}

0801f5a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f5a4:	b510      	push	{r4, lr}
 801f5a6:	4604      	mov	r4, r0
 801f5a8:	2104      	movs	r1, #4
 801f5aa:	f009 f846 	bl	802863a <_ZdlPvj>
 801f5ae:	4620      	mov	r0, r4
 801f5b0:	bd10      	pop	{r4, pc}

0801f5b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f5b2:	b510      	push	{r4, lr}
 801f5b4:	4604      	mov	r4, r0
 801f5b6:	2104      	movs	r1, #4
 801f5b8:	f009 f83f 	bl	802863a <_ZdlPvj>
 801f5bc:	4620      	mov	r0, r4
 801f5be:	bd10      	pop	{r4, pc}

0801f5c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f5c0:	b510      	push	{r4, lr}
 801f5c2:	4604      	mov	r4, r0
 801f5c4:	2104      	movs	r1, #4
 801f5c6:	f009 f838 	bl	802863a <_ZdlPvj>
 801f5ca:	4620      	mov	r0, r4
 801f5cc:	bd10      	pop	{r4, pc}

0801f5ce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801f5ce:	b510      	push	{r4, lr}
 801f5d0:	4604      	mov	r4, r0
 801f5d2:	2104      	movs	r1, #4
 801f5d4:	f009 f831 	bl	802863a <_ZdlPvj>
 801f5d8:	4620      	mov	r0, r4
 801f5da:	bd10      	pop	{r4, pc}

0801f5dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f5dc:	b510      	push	{r4, lr}
 801f5de:	4604      	mov	r4, r0
 801f5e0:	2104      	movs	r1, #4
 801f5e2:	f009 f82a 	bl	802863a <_ZdlPvj>
 801f5e6:	4620      	mov	r0, r4
 801f5e8:	bd10      	pop	{r4, pc}

0801f5ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f5ea:	b510      	push	{r4, lr}
 801f5ec:	4604      	mov	r4, r0
 801f5ee:	2104      	movs	r1, #4
 801f5f0:	f009 f823 	bl	802863a <_ZdlPvj>
 801f5f4:	4620      	mov	r0, r4
 801f5f6:	bd10      	pop	{r4, pc}

0801f5f8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f5f8:	b510      	push	{r4, lr}
 801f5fa:	4604      	mov	r4, r0
 801f5fc:	2104      	movs	r1, #4
 801f5fe:	f009 f81c 	bl	802863a <_ZdlPvj>
 801f602:	4620      	mov	r0, r4
 801f604:	bd10      	pop	{r4, pc}

0801f606 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801f606:	b510      	push	{r4, lr}
 801f608:	4604      	mov	r4, r0
 801f60a:	2104      	movs	r1, #4
 801f60c:	f009 f815 	bl	802863a <_ZdlPvj>
 801f610:	4620      	mov	r0, r4
 801f612:	bd10      	pop	{r4, pc}

0801f614 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f614:	b510      	push	{r4, lr}
 801f616:	4604      	mov	r4, r0
 801f618:	2104      	movs	r1, #4
 801f61a:	f009 f80e 	bl	802863a <_ZdlPvj>
 801f61e:	4620      	mov	r0, r4
 801f620:	bd10      	pop	{r4, pc}

0801f622 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f622:	b510      	push	{r4, lr}
 801f624:	4604      	mov	r4, r0
 801f626:	2104      	movs	r1, #4
 801f628:	f009 f807 	bl	802863a <_ZdlPvj>
 801f62c:	4620      	mov	r0, r4
 801f62e:	bd10      	pop	{r4, pc}

0801f630 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f630:	b510      	push	{r4, lr}
 801f632:	4604      	mov	r4, r0
 801f634:	2104      	movs	r1, #4
 801f636:	f009 f800 	bl	802863a <_ZdlPvj>
 801f63a:	4620      	mov	r0, r4
 801f63c:	bd10      	pop	{r4, pc}

0801f63e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f63e:	b510      	push	{r4, lr}
 801f640:	4604      	mov	r4, r0
 801f642:	2104      	movs	r1, #4
 801f644:	f008 fff9 	bl	802863a <_ZdlPvj>
 801f648:	4620      	mov	r0, r4
 801f64a:	bd10      	pop	{r4, pc}

0801f64c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f64c:	b510      	push	{r4, lr}
 801f64e:	4604      	mov	r4, r0
 801f650:	2104      	movs	r1, #4
 801f652:	f008 fff2 	bl	802863a <_ZdlPvj>
 801f656:	4620      	mov	r0, r4
 801f658:	bd10      	pop	{r4, pc}

0801f65a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f65a:	b510      	push	{r4, lr}
 801f65c:	4604      	mov	r4, r0
 801f65e:	2104      	movs	r1, #4
 801f660:	f008 ffeb 	bl	802863a <_ZdlPvj>
 801f664:	4620      	mov	r0, r4
 801f666:	bd10      	pop	{r4, pc}

0801f668 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801f668:	b510      	push	{r4, lr}
 801f66a:	4604      	mov	r4, r0
 801f66c:	2104      	movs	r1, #4
 801f66e:	f008 ffe4 	bl	802863a <_ZdlPvj>
 801f672:	4620      	mov	r0, r4
 801f674:	bd10      	pop	{r4, pc}

0801f676 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801f676:	b510      	push	{r4, lr}
 801f678:	4604      	mov	r4, r0
 801f67a:	2104      	movs	r1, #4
 801f67c:	f008 ffdd 	bl	802863a <_ZdlPvj>
 801f680:	4620      	mov	r0, r4
 801f682:	bd10      	pop	{r4, pc}

0801f684 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801f684:	b510      	push	{r4, lr}
 801f686:	4604      	mov	r4, r0
 801f688:	2104      	movs	r1, #4
 801f68a:	f008 ffd6 	bl	802863a <_ZdlPvj>
 801f68e:	4620      	mov	r0, r4
 801f690:	bd10      	pop	{r4, pc}

0801f692 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801f692:	b510      	push	{r4, lr}
 801f694:	4604      	mov	r4, r0
 801f696:	2104      	movs	r1, #4
 801f698:	f008 ffcf 	bl	802863a <_ZdlPvj>
 801f69c:	4620      	mov	r0, r4
 801f69e:	bd10      	pop	{r4, pc}

0801f6a0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801f6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6a4:	460d      	mov	r5, r1
 801f6a6:	b087      	sub	sp, #28
 801f6a8:	4614      	mov	r4, r2
 801f6aa:	4698      	mov	r8, r3
 801f6ac:	b333      	cbz	r3, 801f6fc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801f6ae:	4608      	mov	r0, r1
 801f6b0:	f7f7 fa0d 	bl	8016ace <_ZNK8touchgfx4Rect7isEmptyEv>
 801f6b4:	bb10      	cbnz	r0, 801f6fc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801f6b6:	6828      	ldr	r0, [r5, #0]
 801f6b8:	ab04      	add	r3, sp, #16
 801f6ba:	6869      	ldr	r1, [r5, #4]
 801f6bc:	4e72      	ldr	r6, [pc, #456]	; (801f888 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1e8>)
 801f6be:	c303      	stmia	r3!, {r0, r1}
 801f6c0:	a804      	add	r0, sp, #16
 801f6c2:	f7fa fa7d 	bl	8019bc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f6c6:	6830      	ldr	r0, [r6, #0]
 801f6c8:	6803      	ldr	r3, [r0, #0]
 801f6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f6cc:	4798      	blx	r3
 801f6ce:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f6d2:	d016      	beq.n	801f702 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801f6d4:	f010 0f08 	tst.w	r0, #8
 801f6d8:	d016      	beq.n	801f708 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801f6da:	f8bd 5016 	ldrh.w	r5, [sp, #22]
 801f6de:	6830      	ldr	r0, [r6, #0]
 801f6e0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801f6e4:	6801      	ldr	r1, [r0, #0]
 801f6e6:	9501      	str	r5, [sp, #4]
 801f6e8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 801f6ec:	f8cd 8008 	str.w	r8, [sp, #8]
 801f6f0:	9500      	str	r5, [sp, #0]
 801f6f2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f6f6:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 801f6f8:	4621      	mov	r1, r4
 801f6fa:	47a8      	blx	r5
 801f6fc:	b007      	add	sp, #28
 801f6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f702:	f010 0f02 	tst.w	r0, #2
 801f706:	e7e7      	b.n	801f6d8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x38>
 801f708:	6830      	ldr	r0, [r6, #0]
 801f70a:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801f70e:	6803      	ldr	r3, [r0, #0]
 801f710:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801f714:	6a1b      	ldr	r3, [r3, #32]
 801f716:	4798      	blx	r3
 801f718:	495c      	ldr	r1, [pc, #368]	; (801f88c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ec>)
 801f71a:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801f71e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f722:	880b      	ldrh	r3, [r1, #0]
 801f724:	468e      	mov	lr, r1
 801f726:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801f72a:	fb03 c202 	mla	r2, r3, r2, ip
 801f72e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801f732:	fb07 f203 	mul.w	r2, r7, r3
 801f736:	d053      	beq.n	801f7e0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
 801f738:	fa1f f388 	uxth.w	r3, r8
 801f73c:	f1c8 07ff 	rsb	r7, r8, #255	; 0xff
 801f740:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 801f744:	ea4f 2814 	mov.w	r8, r4, lsr #8
 801f748:	00e4      	lsls	r4, r4, #3
 801f74a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f74e:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801f752:	eb00 0142 	add.w	r1, r0, r2, lsl #1
 801f756:	b2e4      	uxtb	r4, r4
 801f758:	fb09 f903 	mul.w	r9, r9, r3
 801f75c:	fb08 f803 	mul.w	r8, r8, r3
 801f760:	006d      	lsls	r5, r5, #1
 801f762:	4363      	muls	r3, r4
 801f764:	b2bc      	uxth	r4, r7
 801f766:	4288      	cmp	r0, r1
 801f768:	f080 8088 	bcs.w	801f87c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801f76c:	eb00 0a05 	add.w	sl, r0, r5
 801f770:	4550      	cmp	r0, sl
 801f772:	d22f      	bcs.n	801f7d4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 801f774:	8802      	ldrh	r2, [r0, #0]
 801f776:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801f77a:	10d7      	asrs	r7, r2, #3
 801f77c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f780:	00d2      	lsls	r2, r2, #3
 801f782:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f786:	fb1c fc04 	smulbb	ip, ip, r4
 801f78a:	b2d2      	uxtb	r2, r2
 801f78c:	fb17 f704 	smulbb	r7, r7, r4
 801f790:	fb12 f204 	smulbb	r2, r2, r4
 801f794:	44c4      	add	ip, r8
 801f796:	444f      	add	r7, r9
 801f798:	fa1f fc8c 	uxth.w	ip, ip
 801f79c:	441a      	add	r2, r3
 801f79e:	b2bf      	uxth	r7, r7
 801f7a0:	b292      	uxth	r2, r2
 801f7a2:	f10c 0b01 	add.w	fp, ip, #1
 801f7a6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f7aa:	f102 0b01 	add.w	fp, r2, #1
 801f7ae:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801f7b2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f7b6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f7ba:	ea4c 0202 	orr.w	r2, ip, r2
 801f7be:	f107 0c01 	add.w	ip, r7, #1
 801f7c2:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801f7c6:	097f      	lsrs	r7, r7, #5
 801f7c8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f7cc:	433a      	orrs	r2, r7
 801f7ce:	f820 2b02 	strh.w	r2, [r0], #2
 801f7d2:	e7cd      	b.n	801f770 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd0>
 801f7d4:	f8be 2000 	ldrh.w	r2, [lr]
 801f7d8:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 801f7dc:	4410      	add	r0, r2
 801f7de:	e7c2      	b.n	801f766 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xc6>
 801f7e0:	07db      	lsls	r3, r3, #31
 801f7e2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801f7e6:	d50e      	bpl.n	801f806 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x166>
 801f7e8:	006d      	lsls	r5, r5, #1
 801f7ea:	4290      	cmp	r0, r2
 801f7ec:	d246      	bcs.n	801f87c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801f7ee:	1943      	adds	r3, r0, r5
 801f7f0:	4298      	cmp	r0, r3
 801f7f2:	d202      	bcs.n	801f7fa <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15a>
 801f7f4:	f820 4b02 	strh.w	r4, [r0], #2
 801f7f8:	e7fa      	b.n	801f7f0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x150>
 801f7fa:	f8be 3000 	ldrh.w	r3, [lr]
 801f7fe:	ebc5 0343 	rsb	r3, r5, r3, lsl #1
 801f802:	4418      	add	r0, r3
 801f804:	e7f1      	b.n	801f7ea <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 801f806:	0787      	lsls	r7, r0, #30
 801f808:	462b      	mov	r3, r5
 801f80a:	d00a      	beq.n	801f822 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x182>
 801f80c:	4603      	mov	r3, r0
 801f80e:	4293      	cmp	r3, r2
 801f810:	d205      	bcs.n	801f81e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17e>
 801f812:	801c      	strh	r4, [r3, #0]
 801f814:	f8be 1000 	ldrh.w	r1, [lr]
 801f818:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801f81c:	e7f7      	b.n	801f80e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 801f81e:	3002      	adds	r0, #2
 801f820:	1e6b      	subs	r3, r5, #1
 801f822:	07dd      	lsls	r5, r3, #31
 801f824:	d50d      	bpl.n	801f842 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a2>
 801f826:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801f82a:	3901      	subs	r1, #1
 801f82c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801f830:	4291      	cmp	r1, r2
 801f832:	d205      	bcs.n	801f840 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a0>
 801f834:	800c      	strh	r4, [r1, #0]
 801f836:	f8be 5000 	ldrh.w	r5, [lr]
 801f83a:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 801f83e:	e7f7      	b.n	801f830 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>
 801f840:	3b01      	subs	r3, #1
 801f842:	b1db      	cbz	r3, 801f87c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801f844:	b2a1      	uxth	r1, r4
 801f846:	105b      	asrs	r3, r3, #1
 801f848:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 801f84c:	009b      	lsls	r3, r3, #2
 801f84e:	4290      	cmp	r0, r2
 801f850:	d214      	bcs.n	801f87c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 801f852:	0781      	lsls	r1, r0, #30
 801f854:	d006      	beq.n	801f864 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c4>
 801f856:	4b0e      	ldr	r3, [pc, #56]	; (801f890 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f0>)
 801f858:	f44f 7162 	mov.w	r1, #904	; 0x388
 801f85c:	4a0d      	ldr	r2, [pc, #52]	; (801f894 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f4>)
 801f85e:	480e      	ldr	r0, [pc, #56]	; (801f898 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f8>)
 801f860:	f008 ff1a 	bl	8028698 <__assert_func>
 801f864:	18c5      	adds	r5, r0, r3
 801f866:	4601      	mov	r1, r0
 801f868:	42a9      	cmp	r1, r5
 801f86a:	d202      	bcs.n	801f872 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1d2>
 801f86c:	f841 4b04 	str.w	r4, [r1], #4
 801f870:	e7fa      	b.n	801f868 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c8>
 801f872:	f8be 1000 	ldrh.w	r1, [lr]
 801f876:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801f87a:	e7e8      	b.n	801f84e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ae>
 801f87c:	6830      	ldr	r0, [r6, #0]
 801f87e:	6803      	ldr	r3, [r0, #0]
 801f880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f882:	4798      	blx	r3
 801f884:	e73a      	b.n	801f6fc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801f886:	bf00      	nop
 801f888:	200057e0 	.word	0x200057e0
 801f88c:	200057da 	.word	0x200057da
 801f890:	0802cef8 	.word	0x0802cef8
 801f894:	0802d6b0 	.word	0x0802d6b0
 801f898:	0802cf27 	.word	0x0802cf27

0801f89c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801f89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8a0:	4f97      	ldr	r7, [pc, #604]	; (801fb00 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 801f8a2:	4616      	mov	r6, r2
 801f8a4:	b08f      	sub	sp, #60	; 0x3c
 801f8a6:	4604      	mov	r4, r0
 801f8a8:	683a      	ldr	r2, [r7, #0]
 801f8aa:	4689      	mov	r9, r1
 801f8ac:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801f8b0:	2a02      	cmp	r2, #2
 801f8b2:	d106      	bne.n	801f8c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801f8b4:	4b93      	ldr	r3, [pc, #588]	; (801fb04 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 801f8b6:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 801f8ba:	4a93      	ldr	r2, [pc, #588]	; (801fb08 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801f8bc:	4893      	ldr	r0, [pc, #588]	; (801fb0c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 801f8be:	f008 feeb 	bl	8028698 <__assert_func>
 801f8c2:	ad0e      	add	r5, sp, #56	; 0x38
 801f8c4:	f825 3d24 	strh.w	r3, [r5, #-36]!
 801f8c8:	4628      	mov	r0, r5
 801f8ca:	f7fd fa4d 	bl	801cd68 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f8ce:	6823      	ldr	r3, [r4, #0]
 801f8d0:	4680      	mov	r8, r0
 801f8d2:	4620      	mov	r0, r4
 801f8d4:	6a1b      	ldr	r3, [r3, #32]
 801f8d6:	4798      	blx	r3
 801f8d8:	4580      	cmp	r8, r0
 801f8da:	d004      	beq.n	801f8e6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801f8dc:	4b8c      	ldr	r3, [pc, #560]	; (801fb10 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 801f8de:	f240 21ca 	movw	r1, #714	; 0x2ca
 801f8e2:	4a89      	ldr	r2, [pc, #548]	; (801fb08 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801f8e4:	e7ea      	b.n	801f8bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801f8e6:	4628      	mov	r0, r5
 801f8e8:	f7fd f9b4 	bl	801cc54 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f8ec:	4680      	mov	r8, r0
 801f8ee:	b920      	cbnz	r0, 801f8fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801f8f0:	4b88      	ldr	r3, [pc, #544]	; (801fb14 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 801f8f2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f8f6:	4a84      	ldr	r2, [pc, #528]	; (801fb08 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801f8f8:	e7e0      	b.n	801f8bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801f8fa:	6830      	ldr	r0, [r6, #0]
 801f8fc:	ab06      	add	r3, sp, #24
 801f8fe:	6871      	ldr	r1, [r6, #4]
 801f900:	f10d 0b20 	add.w	fp, sp, #32
 801f904:	f9b6 a000 	ldrsh.w	sl, [r6]
 801f908:	c303      	stmia	r3!, {r0, r1}
 801f90a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801f90e:	ab08      	add	r3, sp, #32
 801f910:	f8d9 0000 	ldr.w	r0, [r9]
 801f914:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801f918:	c303      	stmia	r3!, {r0, r1}
 801f91a:	4628      	mov	r0, r5
 801f91c:	f7fd f892 	bl	801ca44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f920:	4606      	mov	r6, r0
 801f922:	4628      	mov	r0, r5
 801f924:	4d7c      	ldr	r5, [pc, #496]	; (801fb18 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 801f926:	f7fd f8c7 	bl	801cab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f92a:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801f92e:	a806      	add	r0, sp, #24
 801f930:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801f934:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801f938:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 801f93c:	f7fa f940 	bl	8019bc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f940:	4658      	mov	r0, fp
 801f942:	f7fa f93d 	bl	8019bc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f946:	a80a      	add	r0, sp, #40	; 0x28
 801f948:	f7fa f93a 	bl	8019bc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f94c:	4b73      	ldr	r3, [pc, #460]	; (801fb1c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801f94e:	2100      	movs	r1, #0
 801f950:	f9b5 2000 	ldrsh.w	r2, [r5]
 801f954:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f958:	4658      	mov	r0, fp
 801f95a:	910c      	str	r1, [sp, #48]	; 0x30
 801f95c:	a90c      	add	r1, sp, #48	; 0x30
 801f95e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801f962:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801f966:	f7f7 f86f 	bl	8016a48 <_ZN8touchgfx4RectaNERKS0_>
 801f96a:	4658      	mov	r0, fp
 801f96c:	f7f7 f8af 	bl	8016ace <_ZNK8touchgfx4Rect7isEmptyEv>
 801f970:	2800      	cmp	r0, #0
 801f972:	f040 809a 	bne.w	801faaa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801f976:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801f97a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801f97e:	4288      	cmp	r0, r1
 801f980:	db38      	blt.n	801f9f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801f982:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801f986:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801f98a:	429a      	cmp	r2, r3
 801f98c:	db32      	blt.n	801f9f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801f98e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801f992:	4430      	add	r0, r6
 801f994:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801f998:	4431      	add	r1, r6
 801f99a:	b200      	sxth	r0, r0
 801f99c:	b209      	sxth	r1, r1
 801f99e:	4288      	cmp	r0, r1
 801f9a0:	dc28      	bgt.n	801f9f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801f9a2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801f9a6:	440a      	add	r2, r1
 801f9a8:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801f9ac:	440b      	add	r3, r1
 801f9ae:	b212      	sxth	r2, r2
 801f9b0:	b21b      	sxth	r3, r3
 801f9b2:	429a      	cmp	r2, r3
 801f9b4:	dc1e      	bgt.n	801f9f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 801f9b6:	6823      	ldr	r3, [r4, #0]
 801f9b8:	4620      	mov	r0, r4
 801f9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f9bc:	4798      	blx	r3
 801f9be:	4682      	mov	sl, r0
 801f9c0:	6838      	ldr	r0, [r7, #0]
 801f9c2:	6803      	ldr	r3, [r0, #0]
 801f9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f9c6:	4798      	blx	r3
 801f9c8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801f9cc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801f9d0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801f9d4:	1a5b      	subs	r3, r3, r1
 801f9d6:	b29b      	uxth	r3, r3
 801f9d8:	b21c      	sxth	r4, r3
 801f9da:	2c00      	cmp	r4, #0
 801f9dc:	dc0f      	bgt.n	801f9fe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 801f9de:	bf18      	it	ne
 801f9e0:	f8ad 1020 	strhne.w	r1, [sp, #32]
 801f9e4:	4644      	mov	r4, r8
 801f9e6:	bf1e      	ittt	ne
 801f9e8:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 801f9ec:	185b      	addne	r3, r3, r1
 801f9ee:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801f9f2:	e009      	b.n	801fa08 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 801f9f4:	4b4a      	ldr	r3, [pc, #296]	; (801fb20 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801f9f6:	f240 21da 	movw	r1, #730	; 0x2da
 801f9fa:	4a43      	ldr	r2, [pc, #268]	; (801fb08 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 801f9fc:	e75e      	b.n	801f8bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801f9fe:	1ad3      	subs	r3, r2, r3
 801fa00:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801fa04:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801fa08:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 801fa0c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801fa10:	1b9b      	subs	r3, r3, r6
 801fa12:	b29b      	uxth	r3, r3
 801fa14:	b219      	sxth	r1, r3
 801fa16:	2900      	cmp	r1, #0
 801fa18:	dd4b      	ble.n	801fab2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 801fa1a:	4351      	muls	r1, r2
 801fa1c:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801fa20:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801fa24:	1acb      	subs	r3, r1, r3
 801fa26:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801fa2a:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801fa2e:	2e00      	cmp	r6, #0
 801fa30:	dd3b      	ble.n	801faaa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801fa32:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801fa36:	2b00      	cmp	r3, #0
 801fa38:	dd37      	ble.n	801faaa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801fa3a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801fa3e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801fa42:	fb0a f90c 	mul.w	r9, sl, ip
 801fa46:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 801fa4a:	4481      	add	r9, r0
 801fa4c:	8828      	ldrh	r0, [r5, #0]
 801fa4e:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 801fa52:	1a41      	subs	r1, r0, r1
 801fa54:	42ae      	cmp	r6, r5
 801fa56:	bfa8      	it	ge
 801fa58:	462e      	movge	r6, r5
 801fa5a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801fa5e:	428e      	cmp	r6, r1
 801fa60:	bfa8      	it	ge
 801fa62:	460e      	movge	r6, r1
 801fa64:	429d      	cmp	r5, r3
 801fa66:	bfa8      	it	ge
 801fa68:	461d      	movge	r5, r3
 801fa6a:	4b2c      	ldr	r3, [pc, #176]	; (801fb1c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801fa6c:	881b      	ldrh	r3, [r3, #0]
 801fa6e:	eba3 030c 	sub.w	r3, r3, ip
 801fa72:	429d      	cmp	r5, r3
 801fa74:	bfa8      	it	ge
 801fa76:	461d      	movge	r5, r3
 801fa78:	42b0      	cmp	r0, r6
 801fa7a:	d12c      	bne.n	801fad6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 801fa7c:	4290      	cmp	r0, r2
 801fa7e:	d12a      	bne.n	801fad6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 801fa80:	6838      	ldr	r0, [r7, #0]
 801fa82:	9203      	str	r2, [sp, #12]
 801fa84:	6803      	ldr	r3, [r0, #0]
 801fa86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fa88:	4798      	blx	r3
 801fa8a:	07c3      	lsls	r3, r0, #31
 801fa8c:	d51a      	bpl.n	801fac4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801fa8e:	9a03      	ldr	r2, [sp, #12]
 801fa90:	6838      	ldr	r0, [r7, #0]
 801fa92:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 801fa96:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801fa9a:	6803      	ldr	r3, [r0, #0]
 801fa9c:	9200      	str	r2, [sp, #0]
 801fa9e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801faa0:	4623      	mov	r3, r4
 801faa2:	e89b 0006 	ldmia.w	fp, {r1, r2}
 801faa6:	47a8      	blx	r5
 801faa8:	4680      	mov	r8, r0
 801faaa:	4640      	mov	r0, r8
 801faac:	b00f      	add	sp, #60	; 0x3c
 801faae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fab2:	bf1f      	itttt	ne
 801fab4:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 801fab8:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 801fabc:	185b      	addne	r3, r3, r1
 801fabe:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801fac2:	e7b2      	b.n	801fa2a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 801fac4:	6838      	ldr	r0, [r7, #0]
 801fac6:	464a      	mov	r2, r9
 801fac8:	4621      	mov	r1, r4
 801faca:	6803      	ldr	r3, [r0, #0]
 801facc:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 801face:	fb05 f30a 	mul.w	r3, r5, sl
 801fad2:	47b0      	blx	r6
 801fad4:	e7e9      	b.n	801faaa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801fad6:	4355      	muls	r5, r2
 801fad8:	0076      	lsls	r6, r6, #1
 801fada:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 801fade:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 801fae2:	9303      	str	r3, [sp, #12]
 801fae4:	9b03      	ldr	r3, [sp, #12]
 801fae6:	429c      	cmp	r4, r3
 801fae8:	d2df      	bcs.n	801faaa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 801faea:	6838      	ldr	r0, [r7, #0]
 801faec:	464a      	mov	r2, r9
 801faee:	4621      	mov	r1, r4
 801faf0:	44d1      	add	r9, sl
 801faf2:	6803      	ldr	r3, [r0, #0]
 801faf4:	445c      	add	r4, fp
 801faf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801faf8:	461d      	mov	r5, r3
 801fafa:	4633      	mov	r3, r6
 801fafc:	47a8      	blx	r5
 801fafe:	e7f1      	b.n	801fae4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 801fb00:	200057e0 	.word	0x200057e0
 801fb04:	0802cd1e 	.word	0x0802cd1e
 801fb08:	0802d593 	.word	0x0802d593
 801fb0c:	0802cf27 	.word	0x0802cf27
 801fb10:	0802cdd0 	.word	0x0802cdd0
 801fb14:	0802ce25 	.word	0x0802ce25
 801fb18:	200057da 	.word	0x200057da
 801fb1c:	200057dc 	.word	0x200057dc
 801fb20:	0802ce63 	.word	0x0802ce63

0801fb24 <_ZN8touchgfx8LCD16bppC1Ev>:
 801fb24:	2200      	movs	r2, #0
 801fb26:	4910      	ldr	r1, [pc, #64]	; (801fb68 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801fb28:	6042      	str	r2, [r0, #4]
 801fb2a:	6001      	str	r1, [r0, #0]
 801fb2c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801fb30:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801fb34:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801fb38:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801fb3c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801fb40:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801fb44:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801fb48:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801fb4c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801fb50:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801fb54:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801fb58:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801fb5c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801fb60:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801fb64:	4770      	bx	lr
 801fb66:	bf00      	nop
 801fb68:	0802d208 	.word	0x0802d208

0801fb6c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801fb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb70:	b08b      	sub	sp, #44	; 0x2c
 801fb72:	460d      	mov	r5, r1
 801fb74:	4604      	mov	r4, r0
 801fb76:	4699      	mov	r9, r3
 801fb78:	6808      	ldr	r0, [r1, #0]
 801fb7a:	ab06      	add	r3, sp, #24
 801fb7c:	6849      	ldr	r1, [r1, #4]
 801fb7e:	c303      	stmia	r3!, {r0, r1}
 801fb80:	6810      	ldr	r0, [r2, #0]
 801fb82:	ab08      	add	r3, sp, #32
 801fb84:	6851      	ldr	r1, [r2, #4]
 801fb86:	c303      	stmia	r3!, {r0, r1}
 801fb88:	a806      	add	r0, sp, #24
 801fb8a:	f7fa f819 	bl	8019bc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fb8e:	4629      	mov	r1, r5
 801fb90:	a808      	add	r0, sp, #32
 801fb92:	4d63      	ldr	r5, [pc, #396]	; (801fd20 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 801fb94:	f7f9 fffc 	bl	8019b90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fb98:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801fb9c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801fba0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801fba4:	6828      	ldr	r0, [r5, #0]
 801fba6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fbaa:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801fbae:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801fbb2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801fbb6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801fbba:	440a      	add	r2, r1
 801fbbc:	f8ad 2020 	strh.w	r2, [sp, #32]
 801fbc0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801fbc4:	4413      	add	r3, r2
 801fbc6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801fbca:	6803      	ldr	r3, [r0, #0]
 801fbcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fbce:	4798      	blx	r3
 801fbd0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fbd4:	d118      	bne.n	801fc08 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801fbd6:	f010 0f20 	tst.w	r0, #32
 801fbda:	6828      	ldr	r0, [r5, #0]
 801fbdc:	d017      	beq.n	801fc0e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801fbde:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 801fbe2:	b2b6      	uxth	r6, r6
 801fbe4:	6801      	ldr	r1, [r0, #0]
 801fbe6:	9502      	str	r5, [sp, #8]
 801fbe8:	fa1f f588 	uxth.w	r5, r8
 801fbec:	f8cd 900c 	str.w	r9, [sp, #12]
 801fbf0:	9601      	str	r6, [sp, #4]
 801fbf2:	9500      	str	r5, [sp, #0]
 801fbf4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801fbf8:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801fbfa:	4621      	mov	r1, r4
 801fbfc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801fc00:	47a8      	blx	r5
 801fc02:	b00b      	add	sp, #44	; 0x2c
 801fc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc08:	f010 0f40 	tst.w	r0, #64	; 0x40
 801fc0c:	e7e5      	b.n	801fbda <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801fc0e:	6803      	ldr	r3, [r0, #0]
 801fc10:	6a1b      	ldr	r3, [r3, #32]
 801fc12:	4798      	blx	r3
 801fc14:	4a43      	ldr	r2, [pc, #268]	; (801fd24 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 801fc16:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801fc1a:	f8b2 e000 	ldrh.w	lr, [r2]
 801fc1e:	4692      	mov	sl, r2
 801fc20:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801fc24:	fb0e 1303 	mla	r3, lr, r3, r1
 801fc28:	fb0e fe06 	mul.w	lr, lr, r6
 801fc2c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fc30:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801fc34:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 801fc38:	9305      	str	r3, [sp, #20]
 801fc3a:	4570      	cmp	r0, lr
 801fc3c:	d26a      	bcs.n	801fd14 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a8>
 801fc3e:	9b05      	ldr	r3, [sp, #20]
 801fc40:	4621      	mov	r1, r4
 801fc42:	eb00 0b03 	add.w	fp, r0, r3
 801fc46:	4558      	cmp	r0, fp
 801fc48:	d257      	bcs.n	801fcfa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18e>
 801fc4a:	f851 4b04 	ldr.w	r4, [r1], #4
 801fc4e:	0e22      	lsrs	r2, r4, #24
 801fc50:	d012      	beq.n	801fc78 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801fc52:	2aff      	cmp	r2, #255	; 0xff
 801fc54:	ea4f 2714 	mov.w	r7, r4, lsr #8
 801fc58:	d110      	bne.n	801fc7c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801fc5a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fc5e:	d10d      	bne.n	801fc7c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801fc60:	0963      	lsrs	r3, r4, #5
 801fc62:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801fc66:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fc6a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fc6e:	f027 0707 	bic.w	r7, r7, #7
 801fc72:	431f      	orrs	r7, r3
 801fc74:	433c      	orrs	r4, r7
 801fc76:	8004      	strh	r4, [r0, #0]
 801fc78:	3002      	adds	r0, #2
 801fc7a:	e7e4      	b.n	801fc46 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 801fc7c:	fb09 f302 	mul.w	r3, r9, r2
 801fc80:	f8b0 c000 	ldrh.w	ip, [r0]
 801fc84:	f3c4 4507 	ubfx	r5, r4, #16, #8
 801fc88:	b2ff      	uxtb	r7, r7
 801fc8a:	1c5a      	adds	r2, r3, #1
 801fc8c:	ea4f 262c 	mov.w	r6, ip, asr #8
 801fc90:	b2e4      	uxtb	r4, r4
 801fc92:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801fc96:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801fc9a:	1212      	asrs	r2, r2, #8
 801fc9c:	b293      	uxth	r3, r2
 801fc9e:	43d2      	mvns	r2, r2
 801fca0:	fb15 f503 	smulbb	r5, r5, r3
 801fca4:	b2d2      	uxtb	r2, r2
 801fca6:	fb17 f703 	smulbb	r7, r7, r3
 801fcaa:	fb06 5602 	mla	r6, r6, r2, r5
 801fcae:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801fcb2:	fb14 f403 	smulbb	r4, r4, r3
 801fcb6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fcba:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801fcbe:	b2b6      	uxth	r6, r6
 801fcc0:	fa5f fc8c 	uxtb.w	ip, ip
 801fcc4:	fb05 7702 	mla	r7, r5, r2, r7
 801fcc8:	1c73      	adds	r3, r6, #1
 801fcca:	fb0c 4202 	mla	r2, ip, r2, r4
 801fcce:	b2bf      	uxth	r7, r7
 801fcd0:	b292      	uxth	r2, r2
 801fcd2:	1c7d      	adds	r5, r7, #1
 801fcd4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801fcd8:	f102 0c01 	add.w	ip, r2, #1
 801fcdc:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801fce0:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801fce4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801fce8:	097f      	lsrs	r7, r7, #5
 801fcea:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801fcee:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801fcf2:	4316      	orrs	r6, r2
 801fcf4:	433e      	orrs	r6, r7
 801fcf6:	8006      	strh	r6, [r0, #0]
 801fcf8:	e7be      	b.n	801fc78 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801fcfa:	f8ba 3000 	ldrh.w	r3, [sl]
 801fcfe:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 801fd02:	eba3 0308 	sub.w	r3, r3, r8
 801fd06:	eba4 0408 	sub.w	r4, r4, r8
 801fd0a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fd0e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801fd12:	e792      	b.n	801fc3a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801fd14:	4b02      	ldr	r3, [pc, #8]	; (801fd20 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 801fd16:	6818      	ldr	r0, [r3, #0]
 801fd18:	6803      	ldr	r3, [r0, #0]
 801fd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fd1c:	4798      	blx	r3
 801fd1e:	e770      	b.n	801fc02 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801fd20:	200057e0 	.word	0x200057e0
 801fd24:	200057da 	.word	0x200057da

0801fd28 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801fd28:	b570      	push	{r4, r5, r6, lr}
 801fd2a:	9d04      	ldr	r5, [sp, #16]
 801fd2c:	460c      	mov	r4, r1
 801fd2e:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801fd32:	4619      	mov	r1, r3
 801fd34:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801fd38:	2a0d      	cmp	r2, #13
 801fd3a:	d820      	bhi.n	801fd7e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 801fd3c:	e8df f002 	tbb	[pc, r2]
 801fd40:	18121807 	.word	0x18121807
 801fd44:	18181818 	.word	0x18181818
 801fd48:	18181818 	.word	0x18181818
 801fd4c:	1818      	.short	0x1818
 801fd4e:	6802      	ldr	r2, [r0, #0]
 801fd50:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801fd54:	68d6      	ldr	r6, [r2, #12]
 801fd56:	462b      	mov	r3, r5
 801fd58:	460a      	mov	r2, r1
 801fd5a:	4621      	mov	r1, r4
 801fd5c:	46b4      	mov	ip, r6
 801fd5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fd62:	4760      	bx	ip
 801fd64:	462a      	mov	r2, r5
 801fd66:	4620      	mov	r0, r4
 801fd68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fd6c:	f7ff befe 	b.w	801fb6c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801fd70:	4b03      	ldr	r3, [pc, #12]	; (801fd80 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 801fd72:	f240 21c1 	movw	r1, #705	; 0x2c1
 801fd76:	4a03      	ldr	r2, [pc, #12]	; (801fd84 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 801fd78:	4803      	ldr	r0, [pc, #12]	; (801fd88 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801fd7a:	f008 fc8d 	bl	8028698 <__assert_func>
 801fd7e:	bd70      	pop	{r4, r5, r6, pc}
 801fd80:	0802cec3 	.word	0x0802cec3
 801fd84:	0802d619 	.word	0x0802d619
 801fd88:	0802cf27 	.word	0x0802cf27

0801fd8c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801fd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd90:	b093      	sub	sp, #76	; 0x4c
 801fd92:	880f      	ldrh	r7, [r1, #0]
 801fd94:	4604      	mov	r4, r0
 801fd96:	4688      	mov	r8, r1
 801fd98:	4616      	mov	r6, r2
 801fd9a:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801fd9e:	b12f      	cbz	r7, 801fdac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801fda0:	4b6f      	ldr	r3, [pc, #444]	; (801ff60 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801fda2:	21e2      	movs	r1, #226	; 0xe2
 801fda4:	4a6f      	ldr	r2, [pc, #444]	; (801ff64 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801fda6:	4870      	ldr	r0, [pc, #448]	; (801ff68 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801fda8:	f008 fc76 	bl	8028698 <__assert_func>
 801fdac:	6810      	ldr	r0, [r2, #0]
 801fdae:	ad0e      	add	r5, sp, #56	; 0x38
 801fdb0:	6851      	ldr	r1, [r2, #4]
 801fdb2:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 801ff70 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>
 801fdb6:	c503      	stmia	r5!, {r0, r1}
 801fdb8:	6818      	ldr	r0, [r3, #0]
 801fdba:	ad10      	add	r5, sp, #64	; 0x40
 801fdbc:	6859      	ldr	r1, [r3, #4]
 801fdbe:	c503      	stmia	r5!, {r0, r1}
 801fdc0:	a80e      	add	r0, sp, #56	; 0x38
 801fdc2:	f7f9 fefd 	bl	8019bc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fdc6:	4631      	mov	r1, r6
 801fdc8:	a810      	add	r0, sp, #64	; 0x40
 801fdca:	4e68      	ldr	r6, [pc, #416]	; (801ff6c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801fdcc:	f7f9 fee0 	bl	8019b90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fdd0:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801fdd4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801fdd8:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801fddc:	f8db 0000 	ldr.w	r0, [fp]
 801fde0:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fde4:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801fde8:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801fdec:	440c      	add	r4, r1
 801fdee:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801fdf2:	440a      	add	r2, r1
 801fdf4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801fdf8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801fdfc:	4413      	add	r3, r2
 801fdfe:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801fe02:	6803      	ldr	r3, [r0, #0]
 801fe04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801fe08:	4798      	blx	r3
 801fe0a:	2801      	cmp	r0, #1
 801fe0c:	d11d      	bne.n	801fe4a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801fe0e:	220b      	movs	r2, #11
 801fe10:	9708      	str	r7, [sp, #32]
 801fe12:	b2ad      	uxth	r5, r5
 801fe14:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801fe18:	9207      	str	r2, [sp, #28]
 801fe1a:	4621      	mov	r1, r4
 801fe1c:	8832      	ldrh	r2, [r6, #0]
 801fe1e:	f8cd a010 	str.w	sl, [sp, #16]
 801fe22:	9502      	str	r5, [sp, #8]
 801fe24:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801fe28:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801fe2c:	9203      	str	r2, [sp, #12]
 801fe2e:	fa1f f289 	uxth.w	r2, r9
 801fe32:	9201      	str	r2, [sp, #4]
 801fe34:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801fe38:	9200      	str	r2, [sp, #0]
 801fe3a:	4642      	mov	r2, r8
 801fe3c:	f8db 0000 	ldr.w	r0, [fp]
 801fe40:	f7f7 fa4e 	bl	80172e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801fe44:	b013      	add	sp, #76	; 0x4c
 801fe46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe4a:	f8db 0000 	ldr.w	r0, [fp]
 801fe4e:	6803      	ldr	r3, [r0, #0]
 801fe50:	6a1b      	ldr	r3, [r3, #32]
 801fe52:	4798      	blx	r3
 801fe54:	8832      	ldrh	r2, [r6, #0]
 801fe56:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801fe5a:	f04f 0e04 	mov.w	lr, #4
 801fe5e:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801fe62:	4355      	muls	r5, r2
 801fe64:	960d      	str	r6, [sp, #52]	; 0x34
 801fe66:	fb02 1303 	mla	r3, r2, r3, r1
 801fe6a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fe6e:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 801fe72:	930c      	str	r3, [sp, #48]	; 0x30
 801fe74:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801fe78:	930b      	str	r3, [sp, #44]	; 0x2c
 801fe7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fe7c:	4298      	cmp	r0, r3
 801fe7e:	d269      	bcs.n	801ff54 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801fe80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fe82:	4621      	mov	r1, r4
 801fe84:	eb00 0b03 	add.w	fp, r0, r3
 801fe88:	4558      	cmp	r0, fp
 801fe8a:	460b      	mov	r3, r1
 801fe8c:	d256      	bcs.n	801ff3c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801fe8e:	781b      	ldrb	r3, [r3, #0]
 801fe90:	3101      	adds	r1, #1
 801fe92:	fb1e e303 	smlabb	r3, lr, r3, lr
 801fe96:	f858 2003 	ldr.w	r2, [r8, r3]
 801fe9a:	0e14      	lsrs	r4, r2, #24
 801fe9c:	d012      	beq.n	801fec4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801fe9e:	2cff      	cmp	r4, #255	; 0xff
 801fea0:	ea4f 2612 	mov.w	r6, r2, lsr #8
 801fea4:	d110      	bne.n	801fec8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801fea6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801feaa:	d10d      	bne.n	801fec8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801feac:	0953      	lsrs	r3, r2, #5
 801feae:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801feb2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801feb6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801feba:	f026 0607 	bic.w	r6, r6, #7
 801febe:	431e      	orrs	r6, r3
 801fec0:	4332      	orrs	r2, r6
 801fec2:	8002      	strh	r2, [r0, #0]
 801fec4:	3002      	adds	r0, #2
 801fec6:	e7df      	b.n	801fe88 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfc>
 801fec8:	fb0a f404 	mul.w	r4, sl, r4
 801fecc:	8807      	ldrh	r7, [r0, #0]
 801fece:	b2f6      	uxtb	r6, r6
 801fed0:	1c63      	adds	r3, r4, #1
 801fed2:	123d      	asrs	r5, r7, #8
 801fed4:	eb03 2324 	add.w	r3, r3, r4, asr #8
 801fed8:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801fedc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801fee0:	b2d2      	uxtb	r2, r2
 801fee2:	121b      	asrs	r3, r3, #8
 801fee4:	fa1f fc83 	uxth.w	ip, r3
 801fee8:	43db      	mvns	r3, r3
 801feea:	fb14 f40c 	smulbb	r4, r4, ip
 801feee:	b2db      	uxtb	r3, r3
 801fef0:	fb12 f20c 	smulbb	r2, r2, ip
 801fef4:	fb05 4503 	mla	r5, r5, r3, r4
 801fef8:	10fc      	asrs	r4, r7, #3
 801fefa:	fb16 f60c 	smulbb	r6, r6, ip
 801fefe:	00ff      	lsls	r7, r7, #3
 801ff00:	b2ad      	uxth	r5, r5
 801ff02:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801ff06:	b2ff      	uxtb	r7, r7
 801ff08:	fb04 6603 	mla	r6, r4, r3, r6
 801ff0c:	fb07 2203 	mla	r2, r7, r3, r2
 801ff10:	1c6b      	adds	r3, r5, #1
 801ff12:	b2b6      	uxth	r6, r6
 801ff14:	b292      	uxth	r2, r2
 801ff16:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ff1a:	1c54      	adds	r4, r2, #1
 801ff1c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ff20:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801ff24:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801ff28:	4325      	orrs	r5, r4
 801ff2a:	1c74      	adds	r4, r6, #1
 801ff2c:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801ff30:	0976      	lsrs	r6, r6, #5
 801ff32:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ff36:	4335      	orrs	r5, r6
 801ff38:	8005      	strh	r5, [r0, #0]
 801ff3a:	e7c3      	b.n	801fec4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801ff3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ff3e:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801ff42:	881b      	ldrh	r3, [r3, #0]
 801ff44:	eba4 0409 	sub.w	r4, r4, r9
 801ff48:	eba3 0309 	sub.w	r3, r3, r9
 801ff4c:	440c      	add	r4, r1
 801ff4e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ff52:	e792      	b.n	801fe7a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801ff54:	4b06      	ldr	r3, [pc, #24]	; (801ff70 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801ff56:	6818      	ldr	r0, [r3, #0]
 801ff58:	6803      	ldr	r3, [r0, #0]
 801ff5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ff5c:	4798      	blx	r3
 801ff5e:	e771      	b.n	801fe44 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 801ff60:	0802ccce 	.word	0x0802ccce
 801ff64:	0802d3ea 	.word	0x0802d3ea
 801ff68:	0802cf27 	.word	0x0802cf27
 801ff6c:	200057da 	.word	0x200057da
 801ff70:	200057e0 	.word	0x200057e0

0801ff74 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801ff74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff78:	4614      	mov	r4, r2
 801ff7a:	880a      	ldrh	r2, [r1, #0]
 801ff7c:	b091      	sub	sp, #68	; 0x44
 801ff7e:	4607      	mov	r7, r0
 801ff80:	2a02      	cmp	r2, #2
 801ff82:	4689      	mov	r9, r1
 801ff84:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 801ff88:	d006      	beq.n	801ff98 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801ff8a:	4b77      	ldr	r3, [pc, #476]	; (8020168 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f4>)
 801ff8c:	f240 113b 	movw	r1, #315	; 0x13b
 801ff90:	4a76      	ldr	r2, [pc, #472]	; (802016c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f8>)
 801ff92:	4877      	ldr	r0, [pc, #476]	; (8020170 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1fc>)
 801ff94:	f008 fb80 	bl	8028698 <__assert_func>
 801ff98:	2e00      	cmp	r6, #0
 801ff9a:	d04b      	beq.n	8020034 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801ff9c:	6820      	ldr	r0, [r4, #0]
 801ff9e:	ad0c      	add	r5, sp, #48	; 0x30
 801ffa0:	6861      	ldr	r1, [r4, #4]
 801ffa2:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8020178 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>
 801ffa6:	c503      	stmia	r5!, {r0, r1}
 801ffa8:	6818      	ldr	r0, [r3, #0]
 801ffaa:	ad0e      	add	r5, sp, #56	; 0x38
 801ffac:	6859      	ldr	r1, [r3, #4]
 801ffae:	c503      	stmia	r5!, {r0, r1}
 801ffb0:	a80c      	add	r0, sp, #48	; 0x30
 801ffb2:	f7f9 fe05 	bl	8019bc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ffb6:	4621      	mov	r1, r4
 801ffb8:	a80e      	add	r0, sp, #56	; 0x38
 801ffba:	f7f9 fde9 	bl	8019b90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ffbe:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801ffc2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801ffc6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801ffca:	f8da 0000 	ldr.w	r0, [sl]
 801ffce:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ffd2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801ffd6:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801ffda:	187c      	adds	r4, r7, r1
 801ffdc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801ffe0:	4f64      	ldr	r7, [pc, #400]	; (8020174 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 801ffe2:	440a      	add	r2, r1
 801ffe4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801ffe8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801ffec:	4413      	add	r3, r2
 801ffee:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801fff2:	6803      	ldr	r3, [r0, #0]
 801fff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801fff8:	4798      	blx	r3
 801fffa:	2801      	cmp	r0, #1
 801fffc:	d11d      	bne.n	802003a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 801fffe:	2200      	movs	r2, #0
 8020000:	210b      	movs	r1, #11
 8020002:	b2ad      	uxth	r5, r5
 8020004:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8020008:	e9cd 1207 	strd	r1, r2, [sp, #28]
 802000c:	8839      	ldrh	r1, [r7, #0]
 802000e:	9604      	str	r6, [sp, #16]
 8020010:	9502      	str	r5, [sp, #8]
 8020012:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8020016:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 802001a:	4621      	mov	r1, r4
 802001c:	9203      	str	r2, [sp, #12]
 802001e:	fa1f f288 	uxth.w	r2, r8
 8020022:	9201      	str	r2, [sp, #4]
 8020024:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020028:	9200      	str	r2, [sp, #0]
 802002a:	464a      	mov	r2, r9
 802002c:	f8da 0000 	ldr.w	r0, [sl]
 8020030:	f7f7 f956 	bl	80172e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8020034:	b011      	add	sp, #68	; 0x44
 8020036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802003a:	f8da 0000 	ldr.w	r0, [sl]
 802003e:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 8020042:	6803      	ldr	r3, [r0, #0]
 8020044:	6a1b      	ldr	r3, [r3, #32]
 8020046:	4798      	blx	r3
 8020048:	8839      	ldrh	r1, [r7, #0]
 802004a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 802004e:	2eff      	cmp	r6, #255	; 0xff
 8020050:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020054:	fb05 f501 	mul.w	r5, r5, r1
 8020058:	fb01 2303 	mla	r3, r1, r3, r2
 802005c:	f109 0204 	add.w	r2, r9, #4
 8020060:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020064:	d05f      	beq.n	8020126 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b2>
 8020066:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
 802006a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 802006e:	b2b6      	uxth	r6, r6
 8020070:	970b      	str	r7, [sp, #44]	; 0x2c
 8020072:	fa1f f989 	uxth.w	r9, r9
 8020076:	42a8      	cmp	r0, r5
 8020078:	d26f      	bcs.n	802015a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 802007a:	eb00 010b 	add.w	r1, r0, fp
 802007e:	4288      	cmp	r0, r1
 8020080:	4623      	mov	r3, r4
 8020082:	d244      	bcs.n	802010e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19a>
 8020084:	8807      	ldrh	r7, [r0, #0]
 8020086:	3401      	adds	r4, #1
 8020088:	781b      	ldrb	r3, [r3, #0]
 802008a:	ea4f 2c27 	mov.w	ip, r7, asr #8
 802008e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020092:	ea4f 0ae7 	mov.w	sl, r7, asr #3
 8020096:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802009a:	00ff      	lsls	r7, r7, #3
 802009c:	ea4f 2e23 	mov.w	lr, r3, asr #8
 80200a0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80200a4:	fb1c fc09 	smulbb	ip, ip, r9
 80200a8:	b2ff      	uxtb	r7, r7
 80200aa:	fb1a fa09 	smulbb	sl, sl, r9
 80200ae:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80200b2:	fb17 f709 	smulbb	r7, r7, r9
 80200b6:	fb0e ce06 	mla	lr, lr, r6, ip
 80200ba:	ea4f 0ce3 	mov.w	ip, r3, asr #3
 80200be:	00db      	lsls	r3, r3, #3
 80200c0:	fa1f fe8e 	uxth.w	lr, lr
 80200c4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80200c8:	b2db      	uxtb	r3, r3
 80200ca:	fb0c ac06 	mla	ip, ip, r6, sl
 80200ce:	f10e 0a01 	add.w	sl, lr, #1
 80200d2:	fb03 7306 	mla	r3, r3, r6, r7
 80200d6:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 80200da:	b29b      	uxth	r3, r3
 80200dc:	f40e 4a78 	and.w	sl, lr, #63488	; 0xf800
 80200e0:	fa1f fc8c 	uxth.w	ip, ip
 80200e4:	f103 0e01 	add.w	lr, r3, #1
 80200e8:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80200ec:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80200f0:	ea4a 0e03 	orr.w	lr, sl, r3
 80200f4:	f10c 0a01 	add.w	sl, ip, #1
 80200f8:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80200fc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8020100:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8020104:	ea4e 0e0c 	orr.w	lr, lr, ip
 8020108:	f820 eb02 	strh.w	lr, [r0], #2
 802010c:	e7b7      	b.n	802007e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 802010e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020110:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8020114:	881b      	ldrh	r3, [r3, #0]
 8020116:	eba1 0108 	sub.w	r1, r1, r8
 802011a:	eba3 0308 	sub.w	r3, r3, r8
 802011e:	440c      	add	r4, r1
 8020120:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020124:	e7a7      	b.n	8020076 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 8020126:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 802012a:	42a8      	cmp	r0, r5
 802012c:	d215      	bcs.n	802015a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 802012e:	eb00 010b 	add.w	r1, r0, fp
 8020132:	4288      	cmp	r0, r1
 8020134:	d206      	bcs.n	8020144 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1d0>
 8020136:	f814 3b01 	ldrb.w	r3, [r4], #1
 802013a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802013e:	f820 3b02 	strh.w	r3, [r0], #2
 8020142:	e7f6      	b.n	8020132 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1be>
 8020144:	883b      	ldrh	r3, [r7, #0]
 8020146:	eba3 0308 	sub.w	r3, r3, r8
 802014a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802014e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020152:	eba3 0308 	sub.w	r3, r3, r8
 8020156:	441c      	add	r4, r3
 8020158:	e7e7      	b.n	802012a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b6>
 802015a:	4b07      	ldr	r3, [pc, #28]	; (8020178 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 802015c:	6818      	ldr	r0, [r3, #0]
 802015e:	6803      	ldr	r3, [r0, #0]
 8020160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020162:	4798      	blx	r3
 8020164:	e766      	b.n	8020034 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8020166:	bf00      	nop
 8020168:	0802cb8c 	.word	0x0802cb8c
 802016c:	0802d254 	.word	0x0802d254
 8020170:	0802cf27 	.word	0x0802cf27
 8020174:	200057da 	.word	0x200057da
 8020178:	200057e0 	.word	0x200057e0

0802017c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 802017c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020180:	4614      	mov	r4, r2
 8020182:	880a      	ldrh	r2, [r1, #0]
 8020184:	b091      	sub	sp, #68	; 0x44
 8020186:	4606      	mov	r6, r0
 8020188:	2a01      	cmp	r2, #1
 802018a:	4688      	mov	r8, r1
 802018c:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8020190:	d006      	beq.n	80201a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 8020192:	4b7c      	ldr	r3, [pc, #496]	; (8020384 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
 8020194:	f240 1197 	movw	r1, #407	; 0x197
 8020198:	4a7b      	ldr	r2, [pc, #492]	; (8020388 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20c>)
 802019a:	487c      	ldr	r0, [pc, #496]	; (802038c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x210>)
 802019c:	f008 fa7c 	bl	8028698 <__assert_func>
 80201a0:	2f00      	cmp	r7, #0
 80201a2:	d04b      	beq.n	802023c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 80201a4:	6820      	ldr	r0, [r4, #0]
 80201a6:	ad0c      	add	r5, sp, #48	; 0x30
 80201a8:	6861      	ldr	r1, [r4, #4]
 80201aa:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8020398 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 80201ae:	c503      	stmia	r5!, {r0, r1}
 80201b0:	6818      	ldr	r0, [r3, #0]
 80201b2:	ad0e      	add	r5, sp, #56	; 0x38
 80201b4:	6859      	ldr	r1, [r3, #4]
 80201b6:	c503      	stmia	r5!, {r0, r1}
 80201b8:	a80c      	add	r0, sp, #48	; 0x30
 80201ba:	f7f9 fd01 	bl	8019bc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80201be:	4621      	mov	r1, r4
 80201c0:	a80e      	add	r0, sp, #56	; 0x38
 80201c2:	f7f9 fce5 	bl	8019b90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80201c6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80201ca:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80201ce:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80201d2:	f8da 0000 	ldr.w	r0, [sl]
 80201d6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80201da:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 80201de:	f9bd 903e 	ldrsh.w	r9, [sp, #62]	; 0x3e
 80201e2:	1874      	adds	r4, r6, r1
 80201e4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80201e8:	4e69      	ldr	r6, [pc, #420]	; (8020390 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x214>)
 80201ea:	440a      	add	r2, r1
 80201ec:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80201f0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80201f4:	4413      	add	r3, r2
 80201f6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80201fa:	6803      	ldr	r3, [r0, #0]
 80201fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020200:	4798      	blx	r3
 8020202:	2801      	cmp	r0, #1
 8020204:	d11d      	bne.n	8020242 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 8020206:	220b      	movs	r2, #11
 8020208:	2100      	movs	r1, #0
 802020a:	b2ad      	uxth	r5, r5
 802020c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8020210:	e9cd 2107 	strd	r2, r1, [sp, #28]
 8020214:	8832      	ldrh	r2, [r6, #0]
 8020216:	4621      	mov	r1, r4
 8020218:	9704      	str	r7, [sp, #16]
 802021a:	9501      	str	r5, [sp, #4]
 802021c:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8020220:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8020224:	9203      	str	r2, [sp, #12]
 8020226:	fa1f f289 	uxth.w	r2, r9
 802022a:	9202      	str	r2, [sp, #8]
 802022c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020230:	9200      	str	r2, [sp, #0]
 8020232:	4642      	mov	r2, r8
 8020234:	f8da 0000 	ldr.w	r0, [sl]
 8020238:	f7f7 f852 	bl	80172e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 802023c:	b011      	add	sp, #68	; 0x44
 802023e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020242:	f8da 0000 	ldr.w	r0, [sl]
 8020246:	6803      	ldr	r3, [r0, #0]
 8020248:	6a1b      	ldr	r3, [r3, #32]
 802024a:	4798      	blx	r3
 802024c:	8832      	ldrh	r2, [r6, #0]
 802024e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020252:	2fff      	cmp	r7, #255	; 0xff
 8020254:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8020258:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 802025c:	fb09 f902 	mul.w	r9, r9, r2
 8020260:	fb02 1303 	mla	r3, r2, r3, r1
 8020264:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020268:	d056      	beq.n	8020318 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 802026a:	ea6f 0c07 	mvn.w	ip, r7
 802026e:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 8020272:	b2bb      	uxth	r3, r7
 8020274:	960b      	str	r6, [sp, #44]	; 0x2c
 8020276:	fa5f fc8c 	uxtb.w	ip, ip
 802027a:	4548      	cmp	r0, r9
 802027c:	d27b      	bcs.n	8020376 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 802027e:	eb00 0a0e 	add.w	sl, r0, lr
 8020282:	4550      	cmp	r0, sl
 8020284:	4622      	mov	r2, r4
 8020286:	d23d      	bcs.n	8020304 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x188>
 8020288:	7811      	ldrb	r1, [r2, #0]
 802028a:	2604      	movs	r6, #4
 802028c:	2203      	movs	r2, #3
 802028e:	3401      	adds	r4, #1
 8020290:	fb12 6101 	smlabb	r1, r2, r1, r6
 8020294:	8802      	ldrh	r2, [r0, #0]
 8020296:	eb08 0b01 	add.w	fp, r8, r1
 802029a:	1217      	asrs	r7, r2, #8
 802029c:	f818 1001 	ldrb.w	r1, [r8, r1]
 80202a0:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80202a4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80202a8:	f89b b001 	ldrb.w	fp, [fp, #1]
 80202ac:	fb16 f603 	smulbb	r6, r6, r3
 80202b0:	fb1b fb03 	smulbb	fp, fp, r3
 80202b4:	fb07 670c 	mla	r7, r7, ip, r6
 80202b8:	10d6      	asrs	r6, r2, #3
 80202ba:	00d2      	lsls	r2, r2, #3
 80202bc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80202c0:	b2bf      	uxth	r7, r7
 80202c2:	b2d2      	uxtb	r2, r2
 80202c4:	fb06 b60c 	mla	r6, r6, ip, fp
 80202c8:	fb12 f20c 	smulbb	r2, r2, ip
 80202cc:	b2b6      	uxth	r6, r6
 80202ce:	fb01 2103 	mla	r1, r1, r3, r2
 80202d2:	1c7a      	adds	r2, r7, #1
 80202d4:	f106 0b01 	add.w	fp, r6, #1
 80202d8:	b289      	uxth	r1, r1
 80202da:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80202de:	1c4a      	adds	r2, r1, #1
 80202e0:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80202e4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80202e8:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80202ec:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80202f0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80202f4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80202f8:	4317      	orrs	r7, r2
 80202fa:	ea47 070b 	orr.w	r7, r7, fp
 80202fe:	f820 7b02 	strh.w	r7, [r0], #2
 8020302:	e7be      	b.n	8020282 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 8020304:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020306:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 802030a:	8812      	ldrh	r2, [r2, #0]
 802030c:	1b49      	subs	r1, r1, r5
 802030e:	1b52      	subs	r2, r2, r5
 8020310:	440c      	add	r4, r1
 8020312:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020316:	e7b0      	b.n	802027a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfe>
 8020318:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 802031c:	2203      	movs	r2, #3
 802031e:	2704      	movs	r7, #4
 8020320:	491c      	ldr	r1, [pc, #112]	; (8020394 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8020322:	4548      	cmp	r0, r9
 8020324:	d227      	bcs.n	8020376 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 8020326:	eb00 0c0e 	add.w	ip, r0, lr
 802032a:	4560      	cmp	r0, ip
 802032c:	4623      	mov	r3, r4
 802032e:	d219      	bcs.n	8020364 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8020330:	f893 a000 	ldrb.w	sl, [r3]
 8020334:	3401      	adds	r4, #1
 8020336:	fb12 7a0a 	smlabb	sl, r2, sl, r7
 802033a:	eb08 0b0a 	add.w	fp, r8, sl
 802033e:	f818 a00a 	ldrb.w	sl, [r8, sl]
 8020342:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8020346:	f89b b001 	ldrb.w	fp, [fp, #1]
 802034a:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 802034e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8020352:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020356:	ea43 030b 	orr.w	r3, r3, fp
 802035a:	ea43 03da 	orr.w	r3, r3, sl, lsr #3
 802035e:	f820 3b02 	strh.w	r3, [r0], #2
 8020362:	e7e2      	b.n	802032a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 8020364:	8833      	ldrh	r3, [r6, #0]
 8020366:	1b5b      	subs	r3, r3, r5
 8020368:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802036c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020370:	1b5b      	subs	r3, r3, r5
 8020372:	441c      	add	r4, r3
 8020374:	e7d5      	b.n	8020322 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 8020376:	4b08      	ldr	r3, [pc, #32]	; (8020398 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8020378:	6818      	ldr	r0, [r3, #0]
 802037a:	6803      	ldr	r3, [r0, #0]
 802037c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802037e:	4798      	blx	r3
 8020380:	e75c      	b.n	802023c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8020382:	bf00      	nop
 8020384:	0802cbda 	.word	0x0802cbda
 8020388:	0802d2dd 	.word	0x0802d2dd
 802038c:	0802cf27 	.word	0x0802cf27
 8020390:	200057da 	.word	0x200057da
 8020394:	fffff800 	.word	0xfffff800
 8020398:	200057e0 	.word	0x200057e0

0802039c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 802039c:	b430      	push	{r4, r5}
 802039e:	780d      	ldrb	r5, [r1, #0]
 80203a0:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80203a4:	2d01      	cmp	r5, #1
 80203a6:	d00a      	beq.n	80203be <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 80203a8:	d305      	bcc.n	80203b6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 80203aa:	2d02      	cmp	r5, #2
 80203ac:	d10b      	bne.n	80203c6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 80203ae:	9402      	str	r4, [sp, #8]
 80203b0:	bc30      	pop	{r4, r5}
 80203b2:	f7ff bddf 	b.w	801ff74 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80203b6:	9402      	str	r4, [sp, #8]
 80203b8:	bc30      	pop	{r4, r5}
 80203ba:	f7ff bce7 	b.w	801fd8c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80203be:	9402      	str	r4, [sp, #8]
 80203c0:	bc30      	pop	{r4, r5}
 80203c2:	f7ff bedb 	b.w	802017c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80203c6:	bc30      	pop	{r4, r5}
 80203c8:	4770      	bx	lr
	...

080203cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80203cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203d0:	b087      	sub	sp, #28
 80203d2:	4604      	mov	r4, r0
 80203d4:	460e      	mov	r6, r1
 80203d6:	6810      	ldr	r0, [r2, #0]
 80203d8:	6851      	ldr	r1, [r2, #4]
 80203da:	ad02      	add	r5, sp, #8
 80203dc:	4617      	mov	r7, r2
 80203de:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80203e2:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8020614 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80203e6:	c503      	stmia	r5!, {r0, r1}
 80203e8:	6818      	ldr	r0, [r3, #0]
 80203ea:	ad04      	add	r5, sp, #16
 80203ec:	6859      	ldr	r1, [r3, #4]
 80203ee:	c503      	stmia	r5!, {r0, r1}
 80203f0:	a802      	add	r0, sp, #8
 80203f2:	f7f9 fbe5 	bl	8019bc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80203f6:	4639      	mov	r1, r7
 80203f8:	a804      	add	r0, sp, #16
 80203fa:	f7f9 fbc9 	bl	8019b90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80203fe:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020402:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020406:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 802040a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 802040e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020412:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8020416:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 802041a:	440e      	add	r6, r1
 802041c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8020420:	440a      	add	r2, r1
 8020422:	f8ad 2010 	strh.w	r2, [sp, #16]
 8020426:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802042a:	4413      	add	r3, r2
 802042c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8020430:	4b77      	ldr	r3, [pc, #476]	; (8020610 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8020432:	6818      	ldr	r0, [r3, #0]
 8020434:	6803      	ldr	r3, [r0, #0]
 8020436:	6a1b      	ldr	r3, [r3, #32]
 8020438:	4798      	blx	r3
 802043a:	f8b9 b000 	ldrh.w	fp, [r9]
 802043e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020442:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020446:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802044a:	fb05 f50b 	mul.w	r5, r5, fp
 802044e:	fb0b 2303 	mla	r3, fp, r3, r2
 8020452:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020456:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802045a:	9300      	str	r3, [sp, #0]
 802045c:	d068      	beq.n	8020530 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x164>
 802045e:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8020462:	4558      	cmp	r0, fp
 8020464:	f080 80cc 	bcs.w	8020600 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8020468:	9b00      	ldr	r3, [sp, #0]
 802046a:	4631      	mov	r1, r6
 802046c:	18c3      	adds	r3, r0, r3
 802046e:	9301      	str	r3, [sp, #4]
 8020470:	9b01      	ldr	r3, [sp, #4]
 8020472:	4298      	cmp	r0, r3
 8020474:	d24e      	bcs.n	8020514 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x148>
 8020476:	f811 2b01 	ldrb.w	r2, [r1], #1
 802047a:	2a00      	cmp	r2, #0
 802047c:	d047      	beq.n	802050e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 802047e:	fb0a f202 	mul.w	r2, sl, r2
 8020482:	1c53      	adds	r3, r2, #1
 8020484:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020488:	121b      	asrs	r3, r3, #8
 802048a:	d040      	beq.n	802050e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 802048c:	8802      	ldrh	r2, [r0, #0]
 802048e:	b29e      	uxth	r6, r3
 8020490:	f8b4 c000 	ldrh.w	ip, [r4]
 8020494:	43db      	mvns	r3, r3
 8020496:	1215      	asrs	r5, r2, #8
 8020498:	b2db      	uxtb	r3, r3
 802049a:	ea4f 272c 	mov.w	r7, ip, asr #8
 802049e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80204a2:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 80204a6:	fb15 f503 	smulbb	r5, r5, r3
 80204aa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80204ae:	00d2      	lsls	r2, r2, #3
 80204b0:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80204b4:	fb07 5706 	mla	r7, r7, r6, r5
 80204b8:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80204bc:	b2d2      	uxtb	r2, r2
 80204be:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80204c2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80204c6:	fb1e fe03 	smulbb	lr, lr, r3
 80204ca:	b2bf      	uxth	r7, r7
 80204cc:	fb12 f203 	smulbb	r2, r2, r3
 80204d0:	fa5f fc8c 	uxtb.w	ip, ip
 80204d4:	fb05 e506 	mla	r5, r5, r6, lr
 80204d8:	1c7b      	adds	r3, r7, #1
 80204da:	fb0c 2c06 	mla	ip, ip, r6, r2
 80204de:	b2ad      	uxth	r5, r5
 80204e0:	fa1f fc8c 	uxth.w	ip, ip
 80204e4:	f105 0e01 	add.w	lr, r5, #1
 80204e8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80204ec:	f10c 0601 	add.w	r6, ip, #1
 80204f0:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80204f4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80204f8:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80204fc:	096d      	lsrs	r5, r5, #5
 80204fe:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020502:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020506:	ea47 070c 	orr.w	r7, r7, ip
 802050a:	432f      	orrs	r7, r5
 802050c:	8007      	strh	r7, [r0, #0]
 802050e:	3002      	adds	r0, #2
 8020510:	3402      	adds	r4, #2
 8020512:	e7ad      	b.n	8020470 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8020514:	f8b9 3000 	ldrh.w	r3, [r9]
 8020518:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 802051c:	eba3 0308 	sub.w	r3, r3, r8
 8020520:	eba6 0608 	sub.w	r6, r6, r8
 8020524:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020528:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 802052c:	440e      	add	r6, r1
 802052e:	e798      	b.n	8020462 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8020530:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8020534:	42a8      	cmp	r0, r5
 8020536:	d263      	bcs.n	8020600 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8020538:	9b00      	ldr	r3, [sp, #0]
 802053a:	4631      	mov	r1, r6
 802053c:	eb00 0b03 	add.w	fp, r0, r3
 8020540:	4558      	cmp	r0, fp
 8020542:	d24f      	bcs.n	80205e4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8020544:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020548:	b12b      	cbz	r3, 8020556 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 802054a:	2bff      	cmp	r3, #255	; 0xff
 802054c:	f8b4 e000 	ldrh.w	lr, [r4]
 8020550:	d104      	bne.n	802055c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x190>
 8020552:	f8a0 e000 	strh.w	lr, [r0]
 8020556:	3002      	adds	r0, #2
 8020558:	3402      	adds	r4, #2
 802055a:	e7f1      	b.n	8020540 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x174>
 802055c:	8802      	ldrh	r2, [r0, #0]
 802055e:	b29f      	uxth	r7, r3
 8020560:	43db      	mvns	r3, r3
 8020562:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020566:	1216      	asrs	r6, r2, #8
 8020568:	b2db      	uxtb	r3, r3
 802056a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802056e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020572:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8020576:	00d2      	lsls	r2, r2, #3
 8020578:	fb16 f603 	smulbb	r6, r6, r3
 802057c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020580:	b2d2      	uxtb	r2, r2
 8020582:	fb0c 6c07 	mla	ip, ip, r7, r6
 8020586:	ea4f 06ee 	mov.w	r6, lr, asr #3
 802058a:	fb1a fa03 	smulbb	sl, sl, r3
 802058e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020592:	fb12 f303 	smulbb	r3, r2, r3
 8020596:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802059a:	fa5f fe8e 	uxtb.w	lr, lr
 802059e:	fb06 a607 	mla	r6, r6, r7, sl
 80205a2:	fa1f fc8c 	uxth.w	ip, ip
 80205a6:	fb0e 3e07 	mla	lr, lr, r7, r3
 80205aa:	b2b6      	uxth	r6, r6
 80205ac:	f10c 0201 	add.w	r2, ip, #1
 80205b0:	fa1f fe8e 	uxth.w	lr, lr
 80205b4:	f106 0a01 	add.w	sl, r6, #1
 80205b8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80205bc:	f10e 0301 	add.w	r3, lr, #1
 80205c0:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 80205c4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80205c8:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 80205cc:	0976      	lsrs	r6, r6, #5
 80205ce:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80205d2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80205d6:	ea4c 0c0e 	orr.w	ip, ip, lr
 80205da:	ea4c 0c06 	orr.w	ip, ip, r6
 80205de:	f8a0 c000 	strh.w	ip, [r0]
 80205e2:	e7b8      	b.n	8020556 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 80205e4:	f8b9 3000 	ldrh.w	r3, [r9]
 80205e8:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80205ec:	eba3 0308 	sub.w	r3, r3, r8
 80205f0:	eba6 0608 	sub.w	r6, r6, r8
 80205f4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80205f8:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80205fc:	440e      	add	r6, r1
 80205fe:	e799      	b.n	8020534 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 8020600:	4b03      	ldr	r3, [pc, #12]	; (8020610 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8020602:	6818      	ldr	r0, [r3, #0]
 8020604:	6803      	ldr	r3, [r0, #0]
 8020606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020608:	4798      	blx	r3
 802060a:	b007      	add	sp, #28
 802060c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020610:	200057e0 	.word	0x200057e0
 8020614:	200057da 	.word	0x200057da

08020618 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8020618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802061c:	b089      	sub	sp, #36	; 0x24
 802061e:	4682      	mov	sl, r0
 8020620:	460d      	mov	r5, r1
 8020622:	4691      	mov	r9, r2
 8020624:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8020628:	4698      	mov	r8, r3
 802062a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802062c:	b3ae      	cbz	r6, 802069a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 802062e:	4608      	mov	r0, r1
 8020630:	f7fc fa08 	bl	801ca44 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020634:	4607      	mov	r7, r0
 8020636:	4628      	mov	r0, r5
 8020638:	f7fc fa3e 	bl	801cab8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802063c:	f8ad 000e 	strh.w	r0, [sp, #14]
 8020640:	4628      	mov	r0, r5
 8020642:	f8ad 9008 	strh.w	r9, [sp, #8]
 8020646:	f8ad 800a 	strh.w	r8, [sp, #10]
 802064a:	f8ad 700c 	strh.w	r7, [sp, #12]
 802064e:	f7fc fb8b 	bl	801cd68 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020652:	b178      	cbz	r0, 8020674 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8020654:	4628      	mov	r0, r5
 8020656:	f7fc fb87 	bl	801cd68 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802065a:	2802      	cmp	r0, #2
 802065c:	d00a      	beq.n	8020674 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 802065e:	4628      	mov	r0, r5
 8020660:	f7fc fb82 	bl	801cd68 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020664:	280b      	cmp	r0, #11
 8020666:	d005      	beq.n	8020674 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8020668:	4b69      	ldr	r3, [pc, #420]	; (8020810 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 802066a:	214b      	movs	r1, #75	; 0x4b
 802066c:	4a69      	ldr	r2, [pc, #420]	; (8020814 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 802066e:	486a      	ldr	r0, [pc, #424]	; (8020818 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 8020670:	f008 f812 	bl	8028698 <__assert_func>
 8020674:	4628      	mov	r0, r5
 8020676:	f7fc faed 	bl	801cc54 <_ZNK8touchgfx6Bitmap7getDataEv>
 802067a:	4607      	mov	r7, r0
 802067c:	4628      	mov	r0, r5
 802067e:	f7fc fb1b 	bl	801ccb8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8020682:	4681      	mov	r9, r0
 8020684:	4628      	mov	r0, r5
 8020686:	f7fc fb6f 	bl	801cd68 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802068a:	2802      	cmp	r0, #2
 802068c:	d108      	bne.n	80206a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 802068e:	4633      	mov	r3, r6
 8020690:	4622      	mov	r2, r4
 8020692:	a902      	add	r1, sp, #8
 8020694:	4638      	mov	r0, r7
 8020696:	f7ff fa69 	bl	801fb6c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802069a:	b009      	add	sp, #36	; 0x24
 802069c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206a0:	4628      	mov	r0, r5
 80206a2:	f7fc fb61 	bl	801cd68 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80206a6:	280b      	cmp	r0, #11
 80206a8:	d107      	bne.n	80206ba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 80206aa:	9600      	str	r6, [sp, #0]
 80206ac:	4623      	mov	r3, r4
 80206ae:	aa02      	add	r2, sp, #8
 80206b0:	4649      	mov	r1, r9
 80206b2:	4638      	mov	r0, r7
 80206b4:	f7ff fe72 	bl	802039c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80206b8:	e7ef      	b.n	802069a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80206ba:	4628      	mov	r0, r5
 80206bc:	f7fc fa90 	bl	801cbe0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80206c0:	b950      	cbnz	r0, 80206d8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 80206c2:	f8da 3000 	ldr.w	r3, [sl]
 80206c6:	aa02      	add	r2, sp, #8
 80206c8:	4639      	mov	r1, r7
 80206ca:	e9cd 6000 	strd	r6, r0, [sp]
 80206ce:	4650      	mov	r0, sl
 80206d0:	68dd      	ldr	r5, [r3, #12]
 80206d2:	4623      	mov	r3, r4
 80206d4:	47a8      	blx	r5
 80206d6:	e7e0      	b.n	802069a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80206d8:	f10d 0818 	add.w	r8, sp, #24
 80206dc:	4629      	mov	r1, r5
 80206de:	ad04      	add	r5, sp, #16
 80206e0:	4640      	mov	r0, r8
 80206e2:	f7fc fa23 	bl	801cb2c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80206e6:	e898 0003 	ldmia.w	r8, {r0, r1}
 80206ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80206ee:	4628      	mov	r0, r5
 80206f0:	4621      	mov	r1, r4
 80206f2:	f7f6 f9a9 	bl	8016a48 <_ZN8touchgfx4RectaNERKS0_>
 80206f6:	4628      	mov	r0, r5
 80206f8:	f7f6 f9e9 	bl	8016ace <_ZNK8touchgfx4Rect7isEmptyEv>
 80206fc:	b138      	cbz	r0, 802070e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 80206fe:	4623      	mov	r3, r4
 8020700:	9600      	str	r6, [sp, #0]
 8020702:	aa02      	add	r2, sp, #8
 8020704:	4649      	mov	r1, r9
 8020706:	4638      	mov	r0, r7
 8020708:	f7ff fe60 	bl	80203cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802070c:	e7c5      	b.n	802069a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 802070e:	f8da 3000 	ldr.w	r3, [sl]
 8020712:	aa02      	add	r2, sp, #8
 8020714:	4639      	mov	r1, r7
 8020716:	e9cd 6000 	strd	r6, r0, [sp]
 802071a:	4650      	mov	r0, sl
 802071c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8020720:	462b      	mov	r3, r5
 8020722:	47d8      	blx	fp
 8020724:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020728:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 802072c:	4293      	cmp	r3, r2
 802072e:	dd13      	ble.n	8020758 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 8020730:	f9b4 0000 	ldrsh.w	r0, [r4]
 8020734:	1a9b      	subs	r3, r3, r2
 8020736:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802073a:	f8ad 0018 	strh.w	r0, [sp, #24]
 802073e:	4638      	mov	r0, r7
 8020740:	f8ad 201a 	strh.w	r2, [sp, #26]
 8020744:	aa02      	add	r2, sp, #8
 8020746:	f8ad 101c 	strh.w	r1, [sp, #28]
 802074a:	4649      	mov	r1, r9
 802074c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020750:	4643      	mov	r3, r8
 8020752:	9600      	str	r6, [sp, #0]
 8020754:	f7ff fe3a 	bl	80203cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8020758:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 802075c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8020760:	4293      	cmp	r3, r2
 8020762:	dd13      	ble.n	802078c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 8020764:	1a9b      	subs	r3, r3, r2
 8020766:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 802076a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802076e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8020772:	aa02      	add	r2, sp, #8
 8020774:	f8ad 001a 	strh.w	r0, [sp, #26]
 8020778:	4638      	mov	r0, r7
 802077a:	f8ad 301c 	strh.w	r3, [sp, #28]
 802077e:	4643      	mov	r3, r8
 8020780:	f8ad 101e 	strh.w	r1, [sp, #30]
 8020784:	4649      	mov	r1, r9
 8020786:	9600      	str	r6, [sp, #0]
 8020788:	f7ff fe20 	bl	80203cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802078c:	88a2      	ldrh	r2, [r4, #4]
 802078e:	8823      	ldrh	r3, [r4, #0]
 8020790:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8020794:	4413      	add	r3, r2
 8020796:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802079a:	440a      	add	r2, r1
 802079c:	b29b      	uxth	r3, r3
 802079e:	b292      	uxth	r2, r2
 80207a0:	b218      	sxth	r0, r3
 80207a2:	b211      	sxth	r1, r2
 80207a4:	4288      	cmp	r0, r1
 80207a6:	dd13      	ble.n	80207d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 80207a8:	1a9b      	subs	r3, r3, r2
 80207aa:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80207ae:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 80207b2:	aa02      	add	r2, sp, #8
 80207b4:	f8ad 1018 	strh.w	r1, [sp, #24]
 80207b8:	4649      	mov	r1, r9
 80207ba:	f8ad 301c 	strh.w	r3, [sp, #28]
 80207be:	4643      	mov	r3, r8
 80207c0:	f8ad 001e 	strh.w	r0, [sp, #30]
 80207c4:	4638      	mov	r0, r7
 80207c6:	9600      	str	r6, [sp, #0]
 80207c8:	f8ad 501a 	strh.w	r5, [sp, #26]
 80207cc:	f7ff fdfe 	bl	80203cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80207d0:	88e2      	ldrh	r2, [r4, #6]
 80207d2:	8863      	ldrh	r3, [r4, #2]
 80207d4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80207d8:	4413      	add	r3, r2
 80207da:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80207de:	440a      	add	r2, r1
 80207e0:	b29b      	uxth	r3, r3
 80207e2:	b292      	uxth	r2, r2
 80207e4:	b218      	sxth	r0, r3
 80207e6:	b211      	sxth	r1, r2
 80207e8:	4288      	cmp	r0, r1
 80207ea:	f77f af56 	ble.w	802069a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80207ee:	f9b4 5000 	ldrsh.w	r5, [r4]
 80207f2:	1a9b      	subs	r3, r3, r2
 80207f4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80207f8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80207fc:	4643      	mov	r3, r8
 80207fe:	f8ad 5018 	strh.w	r5, [sp, #24]
 8020802:	f8ad 101a 	strh.w	r1, [sp, #26]
 8020806:	f8ad 001c 	strh.w	r0, [sp, #28]
 802080a:	9600      	str	r6, [sp, #0]
 802080c:	e779      	b.n	8020702 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 802080e:	bf00      	nop
 8020810:	0802cc28 	.word	0x0802cc28
 8020814:	0802d366 	.word	0x0802d366
 8020818:	0802cf27 	.word	0x0802cf27

0802081c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 802081c:	b508      	push	{r3, lr}
 802081e:	b180      	cbz	r0, 8020842 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8020820:	2902      	cmp	r1, #2
 8020822:	d014      	beq.n	802084e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8020824:	2903      	cmp	r1, #3
 8020826:	d01d      	beq.n	8020864 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8020828:	2901      	cmp	r1, #1
 802082a:	d101      	bne.n	8020830 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 802082c:	2001      	movs	r0, #1
 802082e:	bd08      	pop	{r3, pc}
 8020830:	4b0e      	ldr	r3, [pc, #56]	; (802086c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8020832:	8818      	ldrh	r0, [r3, #0]
 8020834:	b990      	cbnz	r0, 802085c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8020836:	4b0e      	ldr	r3, [pc, #56]	; (8020870 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8020838:	2154      	movs	r1, #84	; 0x54
 802083a:	4a0e      	ldr	r2, [pc, #56]	; (8020874 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 802083c:	480e      	ldr	r0, [pc, #56]	; (8020878 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 802083e:	f007 ff2b 	bl	8028698 <__assert_func>
 8020842:	2902      	cmp	r1, #2
 8020844:	d00e      	beq.n	8020864 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8020846:	2903      	cmp	r1, #3
 8020848:	d0f2      	beq.n	8020830 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 802084a:	2901      	cmp	r1, #1
 802084c:	d1ee      	bne.n	802082c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 802084e:	4b07      	ldr	r3, [pc, #28]	; (802086c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8020850:	8818      	ldrh	r0, [r3, #0]
 8020852:	2800      	cmp	r0, #0
 8020854:	d0ef      	beq.n	8020836 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8020856:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802085a:	e7e8      	b.n	802082e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 802085c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020860:	4240      	negs	r0, r0
 8020862:	e7e4      	b.n	802082e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8020864:	f04f 30ff 	mov.w	r0, #4294967295
 8020868:	e7e1      	b.n	802082e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 802086a:	bf00      	nop
 802086c:	200057da 	.word	0x200057da
 8020870:	0802cf59 	.word	0x0802cf59
 8020874:	0802d4e3 	.word	0x0802d4e3
 8020878:	0802cf9b 	.word	0x0802cf9b

0802087c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 802087c:	b508      	push	{r3, lr}
 802087e:	b180      	cbz	r0, 80208a2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8020880:	2902      	cmp	r1, #2
 8020882:	d014      	beq.n	80208ae <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8020884:	2903      	cmp	r1, #3
 8020886:	d018      	beq.n	80208ba <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8020888:	2901      	cmp	r1, #1
 802088a:	d001      	beq.n	8020890 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 802088c:	2001      	movs	r0, #1
 802088e:	e013      	b.n	80208b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8020890:	4b0e      	ldr	r3, [pc, #56]	; (80208cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8020892:	8818      	ldrh	r0, [r3, #0]
 8020894:	b970      	cbnz	r0, 80208b4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 8020896:	4b0e      	ldr	r3, [pc, #56]	; (80208d0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8020898:	2154      	movs	r1, #84	; 0x54
 802089a:	4a0e      	ldr	r2, [pc, #56]	; (80208d4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 802089c:	480e      	ldr	r0, [pc, #56]	; (80208d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 802089e:	f007 fefb 	bl	8028698 <__assert_func>
 80208a2:	2902      	cmp	r1, #2
 80208a4:	d009      	beq.n	80208ba <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 80208a6:	2903      	cmp	r1, #3
 80208a8:	d0f0      	beq.n	802088c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 80208aa:	2901      	cmp	r1, #1
 80208ac:	d1f0      	bne.n	8020890 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 80208ae:	f04f 30ff 	mov.w	r0, #4294967295
 80208b2:	e001      	b.n	80208b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80208b4:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80208b8:	bd08      	pop	{r3, pc}
 80208ba:	4b04      	ldr	r3, [pc, #16]	; (80208cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80208bc:	8818      	ldrh	r0, [r3, #0]
 80208be:	2800      	cmp	r0, #0
 80208c0:	d0e9      	beq.n	8020896 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 80208c2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80208c6:	4240      	negs	r0, r0
 80208c8:	e7f6      	b.n	80208b8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80208ca:	bf00      	nop
 80208cc:	200057da 	.word	0x200057da
 80208d0:	0802cf59 	.word	0x0802cf59
 80208d4:	0802d4e3 	.word	0x0802d4e3
 80208d8:	0802cf9b 	.word	0x0802cf9b

080208dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80208dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208e0:	b099      	sub	sp, #100	; 0x64
 80208e2:	910b      	str	r1, [sp, #44]	; 0x2c
 80208e4:	a914      	add	r1, sp, #80	; 0x50
 80208e6:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 80208ea:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 80208ee:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 80208f2:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 80208f6:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 80208fa:	e881 000c 	stmia.w	r1, {r2, r3}
 80208fe:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8020902:	f89d 10a4 	ldrb.w	r1, [sp, #164]	; 0xa4
 8020906:	9308      	str	r3, [sp, #32]
 8020908:	910c      	str	r1, [sp, #48]	; 0x30
 802090a:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 802090e:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8020912:	910d      	str	r1, [sp, #52]	; 0x34
 8020914:	f893 b00d 	ldrb.w	fp, [r3, #13]
 8020918:	7998      	ldrb	r0, [r3, #6]
 802091a:	ea4f 114b 	mov.w	r1, fp, lsl #5
 802091e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8020922:	4301      	orrs	r1, r0
 8020924:	9109      	str	r1, [sp, #36]	; 0x24
 8020926:	f000 81e4 	beq.w	8020cf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 802092a:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 802092e:	79d9      	ldrb	r1, [r3, #7]
 8020930:	f40b 7b80 	and.w	fp, fp, #256	; 0x100
 8020934:	ea51 0b0b 	orrs.w	fp, r1, fp
 8020938:	f000 81db 	beq.w	8020cf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 802093c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8020940:	b29b      	uxth	r3, r3
 8020942:	2e00      	cmp	r6, #0
 8020944:	f000 80fd 	beq.w	8020b42 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 8020948:	1af6      	subs	r6, r6, r3
 802094a:	b2b6      	uxth	r6, r6
 802094c:	0433      	lsls	r3, r6, #16
 802094e:	d502      	bpl.n	8020956 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8020950:	1bad      	subs	r5, r5, r6
 8020952:	2600      	movs	r6, #0
 8020954:	b22d      	sxth	r5, r5
 8020956:	f9b2 1000 	ldrsh.w	r1, [r2]
 802095a:	a814      	add	r0, sp, #80	; 0x50
 802095c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8020960:	428d      	cmp	r5, r1
 8020962:	b28b      	uxth	r3, r1
 8020964:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8020968:	bfbf      	itttt	lt
 802096a:	18f6      	addlt	r6, r6, r3
 802096c:	1b75      	sublt	r5, r6, r5
 802096e:	b2ae      	uxthlt	r6, r5
 8020970:	460d      	movlt	r5, r1
 8020972:	8891      	ldrh	r1, [r2, #4]
 8020974:	440b      	add	r3, r1
 8020976:	4629      	mov	r1, r5
 8020978:	b21b      	sxth	r3, r3
 802097a:	9311      	str	r3, [sp, #68]	; 0x44
 802097c:	8853      	ldrh	r3, [r2, #2]
 802097e:	88d2      	ldrh	r2, [r2, #6]
 8020980:	4413      	add	r3, r2
 8020982:	9a08      	ldr	r2, [sp, #32]
 8020984:	b21b      	sxth	r3, r3
 8020986:	9310      	str	r3, [sp, #64]	; 0x40
 8020988:	4bb1      	ldr	r3, [pc, #708]	; (8020c50 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 802098a:	f893 9000 	ldrb.w	r9, [r3]
 802098e:	f109 3cff 	add.w	ip, r9, #4294967295
 8020992:	f1dc 0300 	rsbs	r3, ip, #0
 8020996:	eb43 030c 	adc.w	r3, r3, ip
 802099a:	930f      	str	r3, [sp, #60]	; 0x3c
 802099c:	4653      	mov	r3, sl
 802099e:	f7f8 ff68 	bl	8019872 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80209a2:	4629      	mov	r1, r5
 80209a4:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 80209a8:	4653      	mov	r3, sl
 80209aa:	9a08      	ldr	r2, [sp, #32]
 80209ac:	a814      	add	r0, sp, #80	; 0x50
 80209ae:	f7f8 ff78 	bl	80198a2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80209b2:	a918      	add	r1, sp, #96	; 0x60
 80209b4:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80209b8:	a817      	add	r0, sp, #92	; 0x5c
 80209ba:	f7f9 f8d3 	bl	8019b64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80209be:	f1ba 0f00 	cmp.w	sl, #0
 80209c2:	f040 80c1 	bne.w	8020b48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26c>
 80209c6:	f1b9 0f01 	cmp.w	r9, #1
 80209ca:	f040 80c5 	bne.w	8020b58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
 80209ce:	2301      	movs	r3, #1
 80209d0:	f1b8 0f01 	cmp.w	r8, #1
 80209d4:	fa03 f308 	lsl.w	r3, r3, r8
 80209d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80209dc:	b2db      	uxtb	r3, r3
 80209de:	930a      	str	r3, [sp, #40]	; 0x28
 80209e0:	f000 80e5 	beq.w	8020bae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d2>
 80209e4:	f1b8 0f02 	cmp.w	r8, #2
 80209e8:	f000 80e4 	beq.w	8020bb4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 80209ec:	f1b8 0f04 	cmp.w	r8, #4
 80209f0:	bf15      	itete	ne
 80209f2:	46c1      	movne	r9, r8
 80209f4:	f04f 0904 	moveq.w	r9, #4
 80209f8:	2301      	movne	r3, #1
 80209fa:	2311      	moveq	r3, #17
 80209fc:	9307      	str	r3, [sp, #28]
 80209fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020a00:	b153      	cbz	r3, 8020a18 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 8020a02:	2408      	movs	r4, #8
 8020a04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020a06:	fb94 f3f9 	sdiv	r3, r4, r9
 8020a0a:	1e5c      	subs	r4, r3, #1
 8020a0c:	4414      	add	r4, r2
 8020a0e:	fb94 f4f3 	sdiv	r4, r4, r3
 8020a12:	fb14 f403 	smulbb	r4, r4, r3
 8020a16:	b2a4      	uxth	r4, r4
 8020a18:	b906      	cbnz	r6, 8020a1c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8020a1a:	b16f      	cbz	r7, 8020a38 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15c>
 8020a1c:	fb07 6304 	mla	r3, r7, r4, r6
 8020a20:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020a22:	4639      	mov	r1, r7
 8020a24:	fb08 f303 	mul.w	r3, r8, r3
 8020a28:	f003 0707 	and.w	r7, r3, #7
 8020a2c:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
 8020a30:	9328      	str	r3, [sp, #160]	; 0xa0
 8020a32:	ebab 0301 	sub.w	r3, fp, r1
 8020a36:	930e      	str	r3, [sp, #56]	; 0x38
 8020a38:	4651      	mov	r1, sl
 8020a3a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020a3c:	f7ff feee 	bl	802081c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8020a40:	4651      	mov	r1, sl
 8020a42:	4683      	mov	fp, r0
 8020a44:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020a46:	f7ff ff19 	bl	802087c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8020a4a:	9a08      	ldr	r2, [sp, #32]
 8020a4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020a4e:	4682      	mov	sl, r0
 8020a50:	1a9b      	subs	r3, r3, r2
 8020a52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020a54:	429a      	cmp	r2, r3
 8020a56:	bfa8      	it	ge
 8020a58:	461a      	movge	r2, r3
 8020a5a:	2a00      	cmp	r2, #0
 8020a5c:	9208      	str	r2, [sp, #32]
 8020a5e:	f340 8148 	ble.w	8020cf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8020a62:	1bad      	subs	r5, r5, r6
 8020a64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020a66:	1b5d      	subs	r5, r3, r5
 8020a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a6a:	429d      	cmp	r5, r3
 8020a6c:	bfd4      	ite	le
 8020a6e:	ebc6 0605 	rsble	r6, r6, r5
 8020a72:	ebc6 0603 	rsbgt	r6, r6, r3
 8020a76:	2e00      	cmp	r6, #0
 8020a78:	f340 813b 	ble.w	8020cf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8020a7c:	1ba4      	subs	r4, r4, r6
 8020a7e:	fb09 f304 	mul.w	r3, r9, r4
 8020a82:	930e      	str	r3, [sp, #56]	; 0x38
 8020a84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a86:	2b00      	cmp	r3, #0
 8020a88:	f040 809d 	bne.w	8020bc6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ea>
 8020a8c:	4b71      	ldr	r3, [pc, #452]	; (8020c54 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8020a8e:	6818      	ldr	r0, [r3, #0]
 8020a90:	6803      	ldr	r3, [r0, #0]
 8020a92:	6a1b      	ldr	r3, [r3, #32]
 8020a94:	4798      	blx	r3
 8020a96:	4970      	ldr	r1, [pc, #448]	; (8020c58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8020a98:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8020a9c:	880c      	ldrh	r4, [r1, #0]
 8020a9e:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 8020aa2:	fb04 1303 	mla	r3, r4, r3, r1
 8020aa6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8020aac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020aae:	7819      	ldrb	r1, [r3, #0]
 8020ab0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020ab2:	4139      	asrs	r1, r7
 8020ab4:	0a1b      	lsrs	r3, r3, #8
 8020ab6:	b2c9      	uxtb	r1, r1
 8020ab8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8020abc:	930f      	str	r3, [sp, #60]	; 0x3c
 8020abe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020ac0:	08db      	lsrs	r3, r3, #3
 8020ac2:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020ac6:	9310      	str	r3, [sp, #64]	; 0x40
 8020ac8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020aca:	00db      	lsls	r3, r3, #3
 8020acc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8020ad0:	9311      	str	r3, [sp, #68]	; 0x44
 8020ad2:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8020ad6:	fb0b ab16 	mls	fp, fp, r6, sl
 8020ada:	fb03 fa06 	mul.w	sl, r3, r6
 8020ade:	930c      	str	r3, [sp, #48]	; 0x30
 8020ae0:	eb0a 034b 	add.w	r3, sl, fp, lsl #1
 8020ae4:	9312      	str	r3, [sp, #72]	; 0x48
 8020ae6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020ae8:	b29b      	uxth	r3, r3
 8020aea:	9313      	str	r3, [sp, #76]	; 0x4c
 8020aec:	9b08      	ldr	r3, [sp, #32]
 8020aee:	3b01      	subs	r3, #1
 8020af0:	9308      	str	r3, [sp, #32]
 8020af2:	3301      	adds	r3, #1
 8020af4:	f000 80c4 	beq.w	8020c80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 8020af8:	46b2      	mov	sl, r6
 8020afa:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8020afe:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8020b02:	f0c0 80ab 	bcc.w	8020c5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8020b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020b08:	400b      	ands	r3, r1
 8020b0a:	d00a      	beq.n	8020b22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x246>
 8020b0c:	9807      	ldr	r0, [sp, #28]
 8020b0e:	fb13 f300 	smulbb	r3, r3, r0
 8020b12:	2bfe      	cmp	r3, #254	; 0xfe
 8020b14:	dd59      	ble.n	8020bca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 8020b16:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020b18:	28ff      	cmp	r0, #255	; 0xff
 8020b1a:	d156      	bne.n	8020bca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 8020b1c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020b1e:	f8ae 4000 	strh.w	r4, [lr]
 8020b22:	4447      	add	r7, r8
 8020b24:	b2bf      	uxth	r7, r7
 8020b26:	2f07      	cmp	r7, #7
 8020b28:	bf89      	itett	hi
 8020b2a:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8020b2c:	fa41 f109 	asrls.w	r1, r1, r9
 8020b30:	2700      	movhi	r7, #0
 8020b32:	7859      	ldrbhi	r1, [r3, #1]
 8020b34:	bf8a      	itet	hi
 8020b36:	3301      	addhi	r3, #1
 8020b38:	b2c9      	uxtbls	r1, r1
 8020b3a:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8020b3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020b3e:	449e      	add	lr, r3
 8020b40:	e7dd      	b.n	8020afe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x222>
 8020b42:	441d      	add	r5, r3
 8020b44:	b22d      	sxth	r5, r5
 8020b46:	e706      	b.n	8020956 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8020b48:	f1ba 0f01 	cmp.w	sl, #1
 8020b4c:	f47f af3f 	bne.w	80209ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8020b50:	f1b9 0f01 	cmp.w	r9, #1
 8020b54:	f47f af3b 	bne.w	80209ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8020b58:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8020c54 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8020b5c:	f8d9 0000 	ldr.w	r0, [r9]
 8020b60:	6803      	ldr	r3, [r0, #0]
 8020b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b64:	4798      	blx	r3
 8020b66:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8020b6a:	464a      	mov	r2, r9
 8020b6c:	d006      	beq.n	8020b7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8020b6e:	f1b8 0f04 	cmp.w	r8, #4
 8020b72:	d11a      	bne.n	8020baa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8020b74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020b76:	3300      	adds	r3, #0
 8020b78:	bf18      	it	ne
 8020b7a:	2301      	movne	r3, #1
 8020b7c:	05c0      	lsls	r0, r0, #23
 8020b7e:	f140 8088 	bpl.w	8020c92 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 8020b82:	f1b8 0f08 	cmp.w	r8, #8
 8020b86:	f040 8084 	bne.w	8020c92 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 8020b8a:	2b00      	cmp	r3, #0
 8020b8c:	bf14      	ite	ne
 8020b8e:	2180      	movne	r1, #128	; 0x80
 8020b90:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8020b94:	2e00      	cmp	r6, #0
 8020b96:	f040 80af 	bne.w	8020cf8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x41c>
 8020b9a:	2f00      	cmp	r7, #0
 8020b9c:	f000 8083 	beq.w	8020ca6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8020ba0:	23ff      	movs	r3, #255	; 0xff
 8020ba2:	46c1      	mov	r9, r8
 8020ba4:	930a      	str	r3, [sp, #40]	; 0x28
 8020ba6:	2301      	movs	r3, #1
 8020ba8:	e728      	b.n	80209fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8020baa:	2300      	movs	r3, #0
 8020bac:	e7e6      	b.n	8020b7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8020bae:	46c1      	mov	r9, r8
 8020bb0:	23ff      	movs	r3, #255	; 0xff
 8020bb2:	e723      	b.n	80209fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8020bb4:	46c1      	mov	r9, r8
 8020bb6:	2355      	movs	r3, #85	; 0x55
 8020bb8:	e720      	b.n	80209fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8020bba:	23ff      	movs	r3, #255	; 0xff
 8020bbc:	46c1      	mov	r9, r8
 8020bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8020bc0:	2301      	movs	r3, #1
 8020bc2:	9307      	str	r3, [sp, #28]
 8020bc4:	e71d      	b.n	8020a02 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
 8020bc6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020bc8:	e765      	b.n	8020a96 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ba>
 8020bca:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020bcc:	f8be 5000 	ldrh.w	r5, [lr]
 8020bd0:	fb10 f303 	smulbb	r3, r0, r3
 8020bd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020bd6:	122c      	asrs	r4, r5, #8
 8020bd8:	b29b      	uxth	r3, r3
 8020bda:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8020bde:	1c58      	adds	r0, r3, #1
 8020be0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020be4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020be6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020bea:	fa1f fc83 	uxth.w	ip, r3
 8020bee:	43db      	mvns	r3, r3
 8020bf0:	fb10 f00c 	smulbb	r0, r0, ip
 8020bf4:	b2db      	uxtb	r3, r3
 8020bf6:	fb1c fb02 	smulbb	fp, ip, r2
 8020bfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020bfc:	fb04 0403 	mla	r4, r4, r3, r0
 8020c00:	10e8      	asrs	r0, r5, #3
 8020c02:	fb1c fc02 	smulbb	ip, ip, r2
 8020c06:	00ed      	lsls	r5, r5, #3
 8020c08:	b2a4      	uxth	r4, r4
 8020c0a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020c0e:	b2ed      	uxtb	r5, r5
 8020c10:	fb00 b003 	mla	r0, r0, r3, fp
 8020c14:	fb05 cc03 	mla	ip, r5, r3, ip
 8020c18:	1c63      	adds	r3, r4, #1
 8020c1a:	b280      	uxth	r0, r0
 8020c1c:	fa1f fc8c 	uxth.w	ip, ip
 8020c20:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8020c24:	f10c 0b01 	add.w	fp, ip, #1
 8020c28:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8020c2c:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 8020c30:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8020c34:	ea44 040b 	orr.w	r4, r4, fp
 8020c38:	f100 0b01 	add.w	fp, r0, #1
 8020c3c:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8020c40:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8020c44:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020c48:	ea44 040b 	orr.w	r4, r4, fp
 8020c4c:	e767      	b.n	8020b1e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x242>
 8020c4e:	bf00      	nop
 8020c50:	200057d8 	.word	0x200057d8
 8020c54:	200057e0 	.word	0x200057e0
 8020c58:	200057da 	.word	0x200057da
 8020c5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020c5e:	b153      	cbz	r3, 8020c76 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8020c60:	441f      	add	r7, r3
 8020c62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020c64:	b2bf      	uxth	r7, r7
 8020c66:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 8020c6a:	f007 0707 	and.w	r7, r7, #7
 8020c6e:	7819      	ldrb	r1, [r3, #0]
 8020c70:	9328      	str	r3, [sp, #160]	; 0xa0
 8020c72:	4139      	asrs	r1, r7
 8020c74:	b2c9      	uxtb	r1, r1
 8020c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020c78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020c7a:	441a      	add	r2, r3
 8020c7c:	9209      	str	r2, [sp, #36]	; 0x24
 8020c7e:	e735      	b.n	8020aec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x210>
 8020c80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020c82:	2b00      	cmp	r3, #0
 8020c84:	d135      	bne.n	8020cf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8020c86:	4b21      	ldr	r3, [pc, #132]	; (8020d0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x430>)
 8020c88:	6818      	ldr	r0, [r3, #0]
 8020c8a:	6803      	ldr	r3, [r0, #0]
 8020c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020c8e:	4798      	blx	r3
 8020c90:	e02f      	b.n	8020cf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8020c92:	2b00      	cmp	r3, #0
 8020c94:	f43f ae9b 	beq.w	80209ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8020c98:	2e00      	cmp	r6, #0
 8020c9a:	f47f ae98 	bne.w	80209ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8020c9e:	2f00      	cmp	r7, #0
 8020ca0:	f47f ae95 	bne.w	80209ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8020ca4:	2180      	movs	r1, #128	; 0x80
 8020ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ca8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020caa:	18eb      	adds	r3, r5, r3
 8020cac:	4283      	cmp	r3, r0
 8020cae:	f73f ae8e 	bgt.w	80209ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8020cb2:	9b08      	ldr	r3, [sp, #32]
 8020cb4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020cb6:	445b      	add	r3, fp
 8020cb8:	4283      	cmp	r3, r0
 8020cba:	f73f ae88 	bgt.w	80209ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8020cbe:	f1b8 0f08 	cmp.w	r8, #8
 8020cc2:	6810      	ldr	r0, [r2, #0]
 8020cc4:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8020cc8:	bf18      	it	ne
 8020cca:	3401      	addne	r4, #1
 8020ccc:	6805      	ldr	r5, [r0, #0]
 8020cce:	9105      	str	r1, [sp, #20]
 8020cd0:	bf18      	it	ne
 8020cd2:	f024 0401 	bicne.w	r4, r4, #1
 8020cd6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020cd8:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8020cdc:	bf18      	it	ne
 8020cde:	b2a4      	uxthne	r4, r4
 8020ce0:	9104      	str	r1, [sp, #16]
 8020ce2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020ce4:	e9cd 4b00 	strd	r4, fp, [sp]
 8020ce8:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8020cec:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020cee:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8020cf0:	47a0      	blx	r4
 8020cf2:	b019      	add	sp, #100	; 0x64
 8020cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020cf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020cfa:	2b00      	cmp	r3, #0
 8020cfc:	f47f af5d 	bne.w	8020bba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8020d00:	23ff      	movs	r3, #255	; 0xff
 8020d02:	46c1      	mov	r9, r8
 8020d04:	930a      	str	r3, [sp, #40]	; 0x28
 8020d06:	2301      	movs	r3, #1
 8020d08:	9307      	str	r3, [sp, #28]
 8020d0a:	e687      	b.n	8020a1c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8020d0c:	200057e0 	.word	0x200057e0

08020d10 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8020d10:	b538      	push	{r3, r4, r5, lr}
 8020d12:	4c15      	ldr	r4, [pc, #84]	; (8020d68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8020d14:	4605      	mov	r5, r0
 8020d16:	7823      	ldrb	r3, [r4, #0]
 8020d18:	f3bf 8f5b 	dmb	ish
 8020d1c:	07da      	lsls	r2, r3, #31
 8020d1e:	d40b      	bmi.n	8020d38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8020d20:	4620      	mov	r0, r4
 8020d22:	f007 fc8c 	bl	802863e <__cxa_guard_acquire>
 8020d26:	b138      	cbz	r0, 8020d38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8020d28:	4620      	mov	r0, r4
 8020d2a:	f007 fc94 	bl	8028656 <__cxa_guard_release>
 8020d2e:	4a0f      	ldr	r2, [pc, #60]	; (8020d6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8020d30:	490f      	ldr	r1, [pc, #60]	; (8020d70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8020d32:	4810      	ldr	r0, [pc, #64]	; (8020d74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8020d34:	f007 fc7c 	bl	8028630 <__aeabi_atexit>
 8020d38:	4c0f      	ldr	r4, [pc, #60]	; (8020d78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8020d3a:	7823      	ldrb	r3, [r4, #0]
 8020d3c:	f3bf 8f5b 	dmb	ish
 8020d40:	07db      	lsls	r3, r3, #31
 8020d42:	d40b      	bmi.n	8020d5c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8020d44:	4620      	mov	r0, r4
 8020d46:	f007 fc7a 	bl	802863e <__cxa_guard_acquire>
 8020d4a:	b138      	cbz	r0, 8020d5c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8020d4c:	4620      	mov	r0, r4
 8020d4e:	f007 fc82 	bl	8028656 <__cxa_guard_release>
 8020d52:	4a06      	ldr	r2, [pc, #24]	; (8020d6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8020d54:	4909      	ldr	r1, [pc, #36]	; (8020d7c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8020d56:	480a      	ldr	r0, [pc, #40]	; (8020d80 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8020d58:	f007 fc6a 	bl	8028630 <__aeabi_atexit>
 8020d5c:	4b05      	ldr	r3, [pc, #20]	; (8020d74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8020d5e:	612b      	str	r3, [r5, #16]
 8020d60:	4b07      	ldr	r3, [pc, #28]	; (8020d80 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8020d62:	616b      	str	r3, [r5, #20]
 8020d64:	bd38      	pop	{r3, r4, r5, pc}
 8020d66:	bf00      	nop
 8020d68:	200058ac 	.word	0x200058ac
 8020d6c:	20000000 	.word	0x20000000
 8020d70:	0801f313 	.word	0x0801f313
 8020d74:	200001b8 	.word	0x200001b8
 8020d78:	200058b0 	.word	0x200058b0
 8020d7c:	0801f311 	.word	0x0801f311
 8020d80:	200001bc 	.word	0x200001bc

08020d84 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8020d84:	b538      	push	{r3, r4, r5, lr}
 8020d86:	4c15      	ldr	r4, [pc, #84]	; (8020ddc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8020d88:	4605      	mov	r5, r0
 8020d8a:	7823      	ldrb	r3, [r4, #0]
 8020d8c:	f3bf 8f5b 	dmb	ish
 8020d90:	07da      	lsls	r2, r3, #31
 8020d92:	d40b      	bmi.n	8020dac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8020d94:	4620      	mov	r0, r4
 8020d96:	f007 fc52 	bl	802863e <__cxa_guard_acquire>
 8020d9a:	b138      	cbz	r0, 8020dac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8020d9c:	4620      	mov	r0, r4
 8020d9e:	f007 fc5a 	bl	8028656 <__cxa_guard_release>
 8020da2:	4a0f      	ldr	r2, [pc, #60]	; (8020de0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8020da4:	490f      	ldr	r1, [pc, #60]	; (8020de4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8020da6:	4810      	ldr	r0, [pc, #64]	; (8020de8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8020da8:	f007 fc42 	bl	8028630 <__aeabi_atexit>
 8020dac:	4c0f      	ldr	r4, [pc, #60]	; (8020dec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8020dae:	7823      	ldrb	r3, [r4, #0]
 8020db0:	f3bf 8f5b 	dmb	ish
 8020db4:	07db      	lsls	r3, r3, #31
 8020db6:	d40b      	bmi.n	8020dd0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8020db8:	4620      	mov	r0, r4
 8020dba:	f007 fc40 	bl	802863e <__cxa_guard_acquire>
 8020dbe:	b138      	cbz	r0, 8020dd0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8020dc0:	4620      	mov	r0, r4
 8020dc2:	f007 fc48 	bl	8028656 <__cxa_guard_release>
 8020dc6:	4a06      	ldr	r2, [pc, #24]	; (8020de0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8020dc8:	4909      	ldr	r1, [pc, #36]	; (8020df0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8020dca:	480a      	ldr	r0, [pc, #40]	; (8020df4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8020dcc:	f007 fc30 	bl	8028630 <__aeabi_atexit>
 8020dd0:	4b05      	ldr	r3, [pc, #20]	; (8020de8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8020dd2:	60ab      	str	r3, [r5, #8]
 8020dd4:	4b07      	ldr	r3, [pc, #28]	; (8020df4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8020dd6:	60eb      	str	r3, [r5, #12]
 8020dd8:	bd38      	pop	{r3, r4, r5, pc}
 8020dda:	bf00      	nop
 8020ddc:	20005884 	.word	0x20005884
 8020de0:	20000000 	.word	0x20000000
 8020de4:	0801f317 	.word	0x0801f317
 8020de8:	20000190 	.word	0x20000190
 8020dec:	20005888 	.word	0x20005888
 8020df0:	0801f315 	.word	0x0801f315
 8020df4:	20000194 	.word	0x20000194

08020df8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8020df8:	b510      	push	{r4, lr}
 8020dfa:	4604      	mov	r4, r0
 8020dfc:	f7ff ff88 	bl	8020d10 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8020e00:	4620      	mov	r0, r4
 8020e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020e06:	f7ff bfbd 	b.w	8020d84 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08020e0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8020e0c:	b538      	push	{r3, r4, r5, lr}
 8020e0e:	4c15      	ldr	r4, [pc, #84]	; (8020e64 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8020e10:	4605      	mov	r5, r0
 8020e12:	7823      	ldrb	r3, [r4, #0]
 8020e14:	f3bf 8f5b 	dmb	ish
 8020e18:	07da      	lsls	r2, r3, #31
 8020e1a:	d40b      	bmi.n	8020e34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8020e1c:	4620      	mov	r0, r4
 8020e1e:	f007 fc0e 	bl	802863e <__cxa_guard_acquire>
 8020e22:	b138      	cbz	r0, 8020e34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8020e24:	4620      	mov	r0, r4
 8020e26:	f007 fc16 	bl	8028656 <__cxa_guard_release>
 8020e2a:	4a0f      	ldr	r2, [pc, #60]	; (8020e68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020e2c:	490f      	ldr	r1, [pc, #60]	; (8020e6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8020e2e:	4810      	ldr	r0, [pc, #64]	; (8020e70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8020e30:	f007 fbfe 	bl	8028630 <__aeabi_atexit>
 8020e34:	4c0f      	ldr	r4, [pc, #60]	; (8020e74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8020e36:	7823      	ldrb	r3, [r4, #0]
 8020e38:	f3bf 8f5b 	dmb	ish
 8020e3c:	07db      	lsls	r3, r3, #31
 8020e3e:	d40b      	bmi.n	8020e58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8020e40:	4620      	mov	r0, r4
 8020e42:	f007 fbfc 	bl	802863e <__cxa_guard_acquire>
 8020e46:	b138      	cbz	r0, 8020e58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8020e48:	4620      	mov	r0, r4
 8020e4a:	f007 fc04 	bl	8028656 <__cxa_guard_release>
 8020e4e:	4a06      	ldr	r2, [pc, #24]	; (8020e68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020e50:	4909      	ldr	r1, [pc, #36]	; (8020e78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8020e52:	480a      	ldr	r0, [pc, #40]	; (8020e7c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8020e54:	f007 fbec 	bl	8028630 <__aeabi_atexit>
 8020e58:	4b05      	ldr	r3, [pc, #20]	; (8020e70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8020e5a:	622b      	str	r3, [r5, #32]
 8020e5c:	4b07      	ldr	r3, [pc, #28]	; (8020e7c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8020e5e:	626b      	str	r3, [r5, #36]	; 0x24
 8020e60:	bd38      	pop	{r3, r4, r5, pc}
 8020e62:	bf00      	nop
 8020e64:	200058b4 	.word	0x200058b4
 8020e68:	20000000 	.word	0x20000000
 8020e6c:	0801f30b 	.word	0x0801f30b
 8020e70:	200001c0 	.word	0x200001c0
 8020e74:	200058b8 	.word	0x200058b8
 8020e78:	0801f309 	.word	0x0801f309
 8020e7c:	200001c4 	.word	0x200001c4

08020e80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8020e80:	b538      	push	{r3, r4, r5, lr}
 8020e82:	4c15      	ldr	r4, [pc, #84]	; (8020ed8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8020e84:	4605      	mov	r5, r0
 8020e86:	7823      	ldrb	r3, [r4, #0]
 8020e88:	f3bf 8f5b 	dmb	ish
 8020e8c:	07da      	lsls	r2, r3, #31
 8020e8e:	d40b      	bmi.n	8020ea8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020e90:	4620      	mov	r0, r4
 8020e92:	f007 fbd4 	bl	802863e <__cxa_guard_acquire>
 8020e96:	b138      	cbz	r0, 8020ea8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020e98:	4620      	mov	r0, r4
 8020e9a:	f007 fbdc 	bl	8028656 <__cxa_guard_release>
 8020e9e:	4a0f      	ldr	r2, [pc, #60]	; (8020edc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8020ea0:	490f      	ldr	r1, [pc, #60]	; (8020ee0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8020ea2:	4810      	ldr	r0, [pc, #64]	; (8020ee4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8020ea4:	f007 fbc4 	bl	8028630 <__aeabi_atexit>
 8020ea8:	4c0f      	ldr	r4, [pc, #60]	; (8020ee8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8020eaa:	7823      	ldrb	r3, [r4, #0]
 8020eac:	f3bf 8f5b 	dmb	ish
 8020eb0:	07db      	lsls	r3, r3, #31
 8020eb2:	d40b      	bmi.n	8020ecc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8020eb4:	4620      	mov	r0, r4
 8020eb6:	f007 fbc2 	bl	802863e <__cxa_guard_acquire>
 8020eba:	b138      	cbz	r0, 8020ecc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8020ebc:	4620      	mov	r0, r4
 8020ebe:	f007 fbca 	bl	8028656 <__cxa_guard_release>
 8020ec2:	4a06      	ldr	r2, [pc, #24]	; (8020edc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8020ec4:	4909      	ldr	r1, [pc, #36]	; (8020eec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8020ec6:	480a      	ldr	r0, [pc, #40]	; (8020ef0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8020ec8:	f007 fbb2 	bl	8028630 <__aeabi_atexit>
 8020ecc:	4b05      	ldr	r3, [pc, #20]	; (8020ee4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8020ece:	61ab      	str	r3, [r5, #24]
 8020ed0:	4b07      	ldr	r3, [pc, #28]	; (8020ef0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8020ed2:	61eb      	str	r3, [r5, #28]
 8020ed4:	bd38      	pop	{r3, r4, r5, pc}
 8020ed6:	bf00      	nop
 8020ed8:	2000588c 	.word	0x2000588c
 8020edc:	20000000 	.word	0x20000000
 8020ee0:	0801f30f 	.word	0x0801f30f
 8020ee4:	20000198 	.word	0x20000198
 8020ee8:	20005890 	.word	0x20005890
 8020eec:	0801f30d 	.word	0x0801f30d
 8020ef0:	2000019c 	.word	0x2000019c

08020ef4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8020ef4:	b510      	push	{r4, lr}
 8020ef6:	4604      	mov	r4, r0
 8020ef8:	f7ff ff88 	bl	8020e0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8020efc:	4620      	mov	r0, r4
 8020efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020f02:	f7ff bfbd 	b.w	8020e80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08020f08 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8020f08:	b538      	push	{r3, r4, r5, lr}
 8020f0a:	4c15      	ldr	r4, [pc, #84]	; (8020f60 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8020f0c:	4605      	mov	r5, r0
 8020f0e:	7823      	ldrb	r3, [r4, #0]
 8020f10:	f3bf 8f5b 	dmb	ish
 8020f14:	07da      	lsls	r2, r3, #31
 8020f16:	d40b      	bmi.n	8020f30 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8020f18:	4620      	mov	r0, r4
 8020f1a:	f007 fb90 	bl	802863e <__cxa_guard_acquire>
 8020f1e:	b138      	cbz	r0, 8020f30 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8020f20:	4620      	mov	r0, r4
 8020f22:	f007 fb98 	bl	8028656 <__cxa_guard_release>
 8020f26:	4a0f      	ldr	r2, [pc, #60]	; (8020f64 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8020f28:	490f      	ldr	r1, [pc, #60]	; (8020f68 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8020f2a:	4810      	ldr	r0, [pc, #64]	; (8020f6c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8020f2c:	f007 fb80 	bl	8028630 <__aeabi_atexit>
 8020f30:	4c0f      	ldr	r4, [pc, #60]	; (8020f70 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8020f32:	7823      	ldrb	r3, [r4, #0]
 8020f34:	f3bf 8f5b 	dmb	ish
 8020f38:	07db      	lsls	r3, r3, #31
 8020f3a:	d40b      	bmi.n	8020f54 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8020f3c:	4620      	mov	r0, r4
 8020f3e:	f007 fb7e 	bl	802863e <__cxa_guard_acquire>
 8020f42:	b138      	cbz	r0, 8020f54 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8020f44:	4620      	mov	r0, r4
 8020f46:	f007 fb86 	bl	8028656 <__cxa_guard_release>
 8020f4a:	4a06      	ldr	r2, [pc, #24]	; (8020f64 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8020f4c:	4909      	ldr	r1, [pc, #36]	; (8020f74 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8020f4e:	480a      	ldr	r0, [pc, #40]	; (8020f78 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8020f50:	f007 fb6e 	bl	8028630 <__aeabi_atexit>
 8020f54:	4b05      	ldr	r3, [pc, #20]	; (8020f6c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8020f56:	632b      	str	r3, [r5, #48]	; 0x30
 8020f58:	4b07      	ldr	r3, [pc, #28]	; (8020f78 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8020f5a:	636b      	str	r3, [r5, #52]	; 0x34
 8020f5c:	bd38      	pop	{r3, r4, r5, pc}
 8020f5e:	bf00      	nop
 8020f60:	200058c4 	.word	0x200058c4
 8020f64:	20000000 	.word	0x20000000
 8020f68:	0801f303 	.word	0x0801f303
 8020f6c:	200001d0 	.word	0x200001d0
 8020f70:	200058c8 	.word	0x200058c8
 8020f74:	0801f301 	.word	0x0801f301
 8020f78:	200001d4 	.word	0x200001d4

08020f7c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8020f7c:	b538      	push	{r3, r4, r5, lr}
 8020f7e:	4c15      	ldr	r4, [pc, #84]	; (8020fd4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8020f80:	4605      	mov	r5, r0
 8020f82:	7823      	ldrb	r3, [r4, #0]
 8020f84:	f3bf 8f5b 	dmb	ish
 8020f88:	07da      	lsls	r2, r3, #31
 8020f8a:	d40b      	bmi.n	8020fa4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8020f8c:	4620      	mov	r0, r4
 8020f8e:	f007 fb56 	bl	802863e <__cxa_guard_acquire>
 8020f92:	b138      	cbz	r0, 8020fa4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8020f94:	4620      	mov	r0, r4
 8020f96:	f007 fb5e 	bl	8028656 <__cxa_guard_release>
 8020f9a:	4a0f      	ldr	r2, [pc, #60]	; (8020fd8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8020f9c:	490f      	ldr	r1, [pc, #60]	; (8020fdc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8020f9e:	4810      	ldr	r0, [pc, #64]	; (8020fe0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8020fa0:	f007 fb46 	bl	8028630 <__aeabi_atexit>
 8020fa4:	4c0f      	ldr	r4, [pc, #60]	; (8020fe4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8020fa6:	7823      	ldrb	r3, [r4, #0]
 8020fa8:	f3bf 8f5b 	dmb	ish
 8020fac:	07db      	lsls	r3, r3, #31
 8020fae:	d40b      	bmi.n	8020fc8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8020fb0:	4620      	mov	r0, r4
 8020fb2:	f007 fb44 	bl	802863e <__cxa_guard_acquire>
 8020fb6:	b138      	cbz	r0, 8020fc8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8020fb8:	4620      	mov	r0, r4
 8020fba:	f007 fb4c 	bl	8028656 <__cxa_guard_release>
 8020fbe:	4a06      	ldr	r2, [pc, #24]	; (8020fd8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8020fc0:	4909      	ldr	r1, [pc, #36]	; (8020fe8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8020fc2:	480a      	ldr	r0, [pc, #40]	; (8020fec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8020fc4:	f007 fb34 	bl	8028630 <__aeabi_atexit>
 8020fc8:	4b05      	ldr	r3, [pc, #20]	; (8020fe0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8020fca:	62ab      	str	r3, [r5, #40]	; 0x28
 8020fcc:	4b07      	ldr	r3, [pc, #28]	; (8020fec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8020fce:	62eb      	str	r3, [r5, #44]	; 0x2c
 8020fd0:	bd38      	pop	{r3, r4, r5, pc}
 8020fd2:	bf00      	nop
 8020fd4:	20005894 	.word	0x20005894
 8020fd8:	20000000 	.word	0x20000000
 8020fdc:	0801f307 	.word	0x0801f307
 8020fe0:	200001a0 	.word	0x200001a0
 8020fe4:	20005898 	.word	0x20005898
 8020fe8:	0801f305 	.word	0x0801f305
 8020fec:	200001a4 	.word	0x200001a4

08020ff0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8020ff0:	b510      	push	{r4, lr}
 8020ff2:	4604      	mov	r4, r0
 8020ff4:	f7ff ff88 	bl	8020f08 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8020ff8:	4620      	mov	r0, r4
 8020ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020ffe:	f7ff bfbd 	b.w	8020f7c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08021004 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8021004:	b538      	push	{r3, r4, r5, lr}
 8021006:	4c15      	ldr	r4, [pc, #84]	; (802105c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8021008:	4605      	mov	r5, r0
 802100a:	7823      	ldrb	r3, [r4, #0]
 802100c:	f3bf 8f5b 	dmb	ish
 8021010:	07da      	lsls	r2, r3, #31
 8021012:	d40b      	bmi.n	802102c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021014:	4620      	mov	r0, r4
 8021016:	f007 fb12 	bl	802863e <__cxa_guard_acquire>
 802101a:	b138      	cbz	r0, 802102c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 802101c:	4620      	mov	r0, r4
 802101e:	f007 fb1a 	bl	8028656 <__cxa_guard_release>
 8021022:	4a0f      	ldr	r2, [pc, #60]	; (8021060 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021024:	490f      	ldr	r1, [pc, #60]	; (8021064 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8021026:	4810      	ldr	r0, [pc, #64]	; (8021068 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8021028:	f007 fb02 	bl	8028630 <__aeabi_atexit>
 802102c:	4c0f      	ldr	r4, [pc, #60]	; (802106c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 802102e:	7823      	ldrb	r3, [r4, #0]
 8021030:	f3bf 8f5b 	dmb	ish
 8021034:	07db      	lsls	r3, r3, #31
 8021036:	d40b      	bmi.n	8021050 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021038:	4620      	mov	r0, r4
 802103a:	f007 fb00 	bl	802863e <__cxa_guard_acquire>
 802103e:	b138      	cbz	r0, 8021050 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021040:	4620      	mov	r0, r4
 8021042:	f007 fb08 	bl	8028656 <__cxa_guard_release>
 8021046:	4a06      	ldr	r2, [pc, #24]	; (8021060 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021048:	4909      	ldr	r1, [pc, #36]	; (8021070 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 802104a:	480a      	ldr	r0, [pc, #40]	; (8021074 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802104c:	f007 faf0 	bl	8028630 <__aeabi_atexit>
 8021050:	4b05      	ldr	r3, [pc, #20]	; (8021068 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8021052:	652b      	str	r3, [r5, #80]	; 0x50
 8021054:	4b07      	ldr	r3, [pc, #28]	; (8021074 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8021056:	656b      	str	r3, [r5, #84]	; 0x54
 8021058:	bd38      	pop	{r3, r4, r5, pc}
 802105a:	bf00      	nop
 802105c:	200058cc 	.word	0x200058cc
 8021060:	20000000 	.word	0x20000000
 8021064:	0801f2f3 	.word	0x0801f2f3
 8021068:	200001d8 	.word	0x200001d8
 802106c:	200058d0 	.word	0x200058d0
 8021070:	0801f2f1 	.word	0x0801f2f1
 8021074:	200001dc 	.word	0x200001dc

08021078 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8021078:	b538      	push	{r3, r4, r5, lr}
 802107a:	4c15      	ldr	r4, [pc, #84]	; (80210d0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 802107c:	4605      	mov	r5, r0
 802107e:	7823      	ldrb	r3, [r4, #0]
 8021080:	f3bf 8f5b 	dmb	ish
 8021084:	07da      	lsls	r2, r3, #31
 8021086:	d40b      	bmi.n	80210a0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8021088:	4620      	mov	r0, r4
 802108a:	f007 fad8 	bl	802863e <__cxa_guard_acquire>
 802108e:	b138      	cbz	r0, 80210a0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8021090:	4620      	mov	r0, r4
 8021092:	f007 fae0 	bl	8028656 <__cxa_guard_release>
 8021096:	4a0f      	ldr	r2, [pc, #60]	; (80210d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8021098:	490f      	ldr	r1, [pc, #60]	; (80210d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 802109a:	4810      	ldr	r0, [pc, #64]	; (80210dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 802109c:	f007 fac8 	bl	8028630 <__aeabi_atexit>
 80210a0:	4c0f      	ldr	r4, [pc, #60]	; (80210e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80210a2:	7823      	ldrb	r3, [r4, #0]
 80210a4:	f3bf 8f5b 	dmb	ish
 80210a8:	07db      	lsls	r3, r3, #31
 80210aa:	d40b      	bmi.n	80210c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80210ac:	4620      	mov	r0, r4
 80210ae:	f007 fac6 	bl	802863e <__cxa_guard_acquire>
 80210b2:	b138      	cbz	r0, 80210c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80210b4:	4620      	mov	r0, r4
 80210b6:	f007 face 	bl	8028656 <__cxa_guard_release>
 80210ba:	4a06      	ldr	r2, [pc, #24]	; (80210d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80210bc:	4909      	ldr	r1, [pc, #36]	; (80210e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80210be:	480a      	ldr	r0, [pc, #40]	; (80210e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80210c0:	f007 fab6 	bl	8028630 <__aeabi_atexit>
 80210c4:	4b05      	ldr	r3, [pc, #20]	; (80210dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80210c6:	64ab      	str	r3, [r5, #72]	; 0x48
 80210c8:	4b07      	ldr	r3, [pc, #28]	; (80210e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80210ca:	64eb      	str	r3, [r5, #76]	; 0x4c
 80210cc:	bd38      	pop	{r3, r4, r5, pc}
 80210ce:	bf00      	nop
 80210d0:	200058d4 	.word	0x200058d4
 80210d4:	20000000 	.word	0x20000000
 80210d8:	0801f2f7 	.word	0x0801f2f7
 80210dc:	200001e0 	.word	0x200001e0
 80210e0:	200058d8 	.word	0x200058d8
 80210e4:	0801f2f5 	.word	0x0801f2f5
 80210e8:	200001e4 	.word	0x200001e4

080210ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 80210ec:	b538      	push	{r3, r4, r5, lr}
 80210ee:	4c15      	ldr	r4, [pc, #84]	; (8021144 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 80210f0:	4605      	mov	r5, r0
 80210f2:	7823      	ldrb	r3, [r4, #0]
 80210f4:	f3bf 8f5b 	dmb	ish
 80210f8:	07da      	lsls	r2, r3, #31
 80210fa:	d40b      	bmi.n	8021114 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80210fc:	4620      	mov	r0, r4
 80210fe:	f007 fa9e 	bl	802863e <__cxa_guard_acquire>
 8021102:	b138      	cbz	r0, 8021114 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8021104:	4620      	mov	r0, r4
 8021106:	f007 faa6 	bl	8028656 <__cxa_guard_release>
 802110a:	4a0f      	ldr	r2, [pc, #60]	; (8021148 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 802110c:	490f      	ldr	r1, [pc, #60]	; (802114c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 802110e:	4810      	ldr	r0, [pc, #64]	; (8021150 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8021110:	f007 fa8e 	bl	8028630 <__aeabi_atexit>
 8021114:	4c0f      	ldr	r4, [pc, #60]	; (8021154 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8021116:	7823      	ldrb	r3, [r4, #0]
 8021118:	f3bf 8f5b 	dmb	ish
 802111c:	07db      	lsls	r3, r3, #31
 802111e:	d40b      	bmi.n	8021138 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8021120:	4620      	mov	r0, r4
 8021122:	f007 fa8c 	bl	802863e <__cxa_guard_acquire>
 8021126:	b138      	cbz	r0, 8021138 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8021128:	4620      	mov	r0, r4
 802112a:	f007 fa94 	bl	8028656 <__cxa_guard_release>
 802112e:	4a06      	ldr	r2, [pc, #24]	; (8021148 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8021130:	4909      	ldr	r1, [pc, #36]	; (8021158 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8021132:	480a      	ldr	r0, [pc, #40]	; (802115c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8021134:	f007 fa7c 	bl	8028630 <__aeabi_atexit>
 8021138:	4b05      	ldr	r3, [pc, #20]	; (8021150 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802113a:	642b      	str	r3, [r5, #64]	; 0x40
 802113c:	4b07      	ldr	r3, [pc, #28]	; (802115c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 802113e:	646b      	str	r3, [r5, #68]	; 0x44
 8021140:	bd38      	pop	{r3, r4, r5, pc}
 8021142:	bf00      	nop
 8021144:	2000589c 	.word	0x2000589c
 8021148:	20000000 	.word	0x20000000
 802114c:	0801f2fb 	.word	0x0801f2fb
 8021150:	200001a8 	.word	0x200001a8
 8021154:	200058a0 	.word	0x200058a0
 8021158:	0801f2f9 	.word	0x0801f2f9
 802115c:	200001ac 	.word	0x200001ac

08021160 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8021160:	b538      	push	{r3, r4, r5, lr}
 8021162:	4c15      	ldr	r4, [pc, #84]	; (80211b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8021164:	4605      	mov	r5, r0
 8021166:	7823      	ldrb	r3, [r4, #0]
 8021168:	f3bf 8f5b 	dmb	ish
 802116c:	07da      	lsls	r2, r3, #31
 802116e:	d40b      	bmi.n	8021188 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8021170:	4620      	mov	r0, r4
 8021172:	f007 fa64 	bl	802863e <__cxa_guard_acquire>
 8021176:	b138      	cbz	r0, 8021188 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8021178:	4620      	mov	r0, r4
 802117a:	f007 fa6c 	bl	8028656 <__cxa_guard_release>
 802117e:	4a0f      	ldr	r2, [pc, #60]	; (80211bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8021180:	490f      	ldr	r1, [pc, #60]	; (80211c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8021182:	4810      	ldr	r0, [pc, #64]	; (80211c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8021184:	f007 fa54 	bl	8028630 <__aeabi_atexit>
 8021188:	4c0f      	ldr	r4, [pc, #60]	; (80211c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 802118a:	7823      	ldrb	r3, [r4, #0]
 802118c:	f3bf 8f5b 	dmb	ish
 8021190:	07db      	lsls	r3, r3, #31
 8021192:	d40b      	bmi.n	80211ac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8021194:	4620      	mov	r0, r4
 8021196:	f007 fa52 	bl	802863e <__cxa_guard_acquire>
 802119a:	b138      	cbz	r0, 80211ac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 802119c:	4620      	mov	r0, r4
 802119e:	f007 fa5a 	bl	8028656 <__cxa_guard_release>
 80211a2:	4a06      	ldr	r2, [pc, #24]	; (80211bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80211a4:	4909      	ldr	r1, [pc, #36]	; (80211cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80211a6:	480a      	ldr	r0, [pc, #40]	; (80211d0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80211a8:	f007 fa42 	bl	8028630 <__aeabi_atexit>
 80211ac:	4b05      	ldr	r3, [pc, #20]	; (80211c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80211ae:	63ab      	str	r3, [r5, #56]	; 0x38
 80211b0:	4b07      	ldr	r3, [pc, #28]	; (80211d0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80211b2:	63eb      	str	r3, [r5, #60]	; 0x3c
 80211b4:	bd38      	pop	{r3, r4, r5, pc}
 80211b6:	bf00      	nop
 80211b8:	200058bc 	.word	0x200058bc
 80211bc:	20000000 	.word	0x20000000
 80211c0:	0801f2ff 	.word	0x0801f2ff
 80211c4:	200001c8 	.word	0x200001c8
 80211c8:	200058c0 	.word	0x200058c0
 80211cc:	0801f2fd 	.word	0x0801f2fd
 80211d0:	200001cc 	.word	0x200001cc

080211d4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 80211d4:	b510      	push	{r4, lr}
 80211d6:	4604      	mov	r4, r0
 80211d8:	f7ff ff14 	bl	8021004 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 80211dc:	4620      	mov	r0, r4
 80211de:	f7ff ff85 	bl	80210ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 80211e2:	4620      	mov	r0, r4
 80211e4:	f7ff ff48 	bl	8021078 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 80211e8:	4620      	mov	r0, r4
 80211ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80211ee:	f7ff bfb7 	b.w	8021160 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

080211f4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80211f4:	b538      	push	{r3, r4, r5, lr}
 80211f6:	4c15      	ldr	r4, [pc, #84]	; (802124c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80211f8:	4605      	mov	r5, r0
 80211fa:	7823      	ldrb	r3, [r4, #0]
 80211fc:	f3bf 8f5b 	dmb	ish
 8021200:	07da      	lsls	r2, r3, #31
 8021202:	d40b      	bmi.n	802121c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021204:	4620      	mov	r0, r4
 8021206:	f007 fa1a 	bl	802863e <__cxa_guard_acquire>
 802120a:	b138      	cbz	r0, 802121c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 802120c:	4620      	mov	r0, r4
 802120e:	f007 fa22 	bl	8028656 <__cxa_guard_release>
 8021212:	4a0f      	ldr	r2, [pc, #60]	; (8021250 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021214:	490f      	ldr	r1, [pc, #60]	; (8021254 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8021216:	4810      	ldr	r0, [pc, #64]	; (8021258 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021218:	f007 fa0a 	bl	8028630 <__aeabi_atexit>
 802121c:	4c0f      	ldr	r4, [pc, #60]	; (802125c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 802121e:	7823      	ldrb	r3, [r4, #0]
 8021220:	f3bf 8f5b 	dmb	ish
 8021224:	07db      	lsls	r3, r3, #31
 8021226:	d40b      	bmi.n	8021240 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021228:	4620      	mov	r0, r4
 802122a:	f007 fa08 	bl	802863e <__cxa_guard_acquire>
 802122e:	b138      	cbz	r0, 8021240 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021230:	4620      	mov	r0, r4
 8021232:	f007 fa10 	bl	8028656 <__cxa_guard_release>
 8021236:	4a06      	ldr	r2, [pc, #24]	; (8021250 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021238:	4909      	ldr	r1, [pc, #36]	; (8021260 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802123a:	480a      	ldr	r0, [pc, #40]	; (8021264 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802123c:	f007 f9f8 	bl	8028630 <__aeabi_atexit>
 8021240:	4b05      	ldr	r3, [pc, #20]	; (8021258 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021242:	662b      	str	r3, [r5, #96]	; 0x60
 8021244:	4b07      	ldr	r3, [pc, #28]	; (8021264 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8021246:	666b      	str	r3, [r5, #100]	; 0x64
 8021248:	bd38      	pop	{r3, r4, r5, pc}
 802124a:	bf00      	nop
 802124c:	200058a4 	.word	0x200058a4
 8021250:	20000000 	.word	0x20000000
 8021254:	0801f2eb 	.word	0x0801f2eb
 8021258:	200001b0 	.word	0x200001b0
 802125c:	200058a8 	.word	0x200058a8
 8021260:	0801f2e9 	.word	0x0801f2e9
 8021264:	200001b4 	.word	0x200001b4

08021268 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8021268:	b538      	push	{r3, r4, r5, lr}
 802126a:	4c15      	ldr	r4, [pc, #84]	; (80212c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 802126c:	4605      	mov	r5, r0
 802126e:	7823      	ldrb	r3, [r4, #0]
 8021270:	f3bf 8f5b 	dmb	ish
 8021274:	07da      	lsls	r2, r3, #31
 8021276:	d40b      	bmi.n	8021290 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021278:	4620      	mov	r0, r4
 802127a:	f007 f9e0 	bl	802863e <__cxa_guard_acquire>
 802127e:	b138      	cbz	r0, 8021290 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8021280:	4620      	mov	r0, r4
 8021282:	f007 f9e8 	bl	8028656 <__cxa_guard_release>
 8021286:	4a0f      	ldr	r2, [pc, #60]	; (80212c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8021288:	490f      	ldr	r1, [pc, #60]	; (80212c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802128a:	4810      	ldr	r0, [pc, #64]	; (80212cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802128c:	f007 f9d0 	bl	8028630 <__aeabi_atexit>
 8021290:	4c0f      	ldr	r4, [pc, #60]	; (80212d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8021292:	7823      	ldrb	r3, [r4, #0]
 8021294:	f3bf 8f5b 	dmb	ish
 8021298:	07db      	lsls	r3, r3, #31
 802129a:	d40b      	bmi.n	80212b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 802129c:	4620      	mov	r0, r4
 802129e:	f007 f9ce 	bl	802863e <__cxa_guard_acquire>
 80212a2:	b138      	cbz	r0, 80212b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80212a4:	4620      	mov	r0, r4
 80212a6:	f007 f9d6 	bl	8028656 <__cxa_guard_release>
 80212aa:	4a06      	ldr	r2, [pc, #24]	; (80212c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80212ac:	4909      	ldr	r1, [pc, #36]	; (80212d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80212ae:	480a      	ldr	r0, [pc, #40]	; (80212d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80212b0:	f007 f9be 	bl	8028630 <__aeabi_atexit>
 80212b4:	4b05      	ldr	r3, [pc, #20]	; (80212cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80212b6:	65ab      	str	r3, [r5, #88]	; 0x58
 80212b8:	4b07      	ldr	r3, [pc, #28]	; (80212d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80212ba:	65eb      	str	r3, [r5, #92]	; 0x5c
 80212bc:	bd38      	pop	{r3, r4, r5, pc}
 80212be:	bf00      	nop
 80212c0:	2000587c 	.word	0x2000587c
 80212c4:	20000000 	.word	0x20000000
 80212c8:	0801f2ef 	.word	0x0801f2ef
 80212cc:	20000188 	.word	0x20000188
 80212d0:	20005880 	.word	0x20005880
 80212d4:	0801f2ed 	.word	0x0801f2ed
 80212d8:	2000018c 	.word	0x2000018c

080212dc <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 80212dc:	b510      	push	{r4, lr}
 80212de:	4604      	mov	r4, r0
 80212e0:	f7ff ff88 	bl	80211f4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80212e4:	4620      	mov	r0, r4
 80212e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80212ea:	f7ff bfbd 	b.w	8021268 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080212f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80212f0:	b538      	push	{r3, r4, r5, lr}
 80212f2:	4c15      	ldr	r4, [pc, #84]	; (8021348 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80212f4:	4605      	mov	r5, r0
 80212f6:	7823      	ldrb	r3, [r4, #0]
 80212f8:	f3bf 8f5b 	dmb	ish
 80212fc:	07da      	lsls	r2, r3, #31
 80212fe:	d40b      	bmi.n	8021318 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021300:	4620      	mov	r0, r4
 8021302:	f007 f99c 	bl	802863e <__cxa_guard_acquire>
 8021306:	b138      	cbz	r0, 8021318 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021308:	4620      	mov	r0, r4
 802130a:	f007 f9a4 	bl	8028656 <__cxa_guard_release>
 802130e:	4a0f      	ldr	r2, [pc, #60]	; (802134c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021310:	490f      	ldr	r1, [pc, #60]	; (8021350 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8021312:	4810      	ldr	r0, [pc, #64]	; (8021354 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021314:	f007 f98c 	bl	8028630 <__aeabi_atexit>
 8021318:	4c0f      	ldr	r4, [pc, #60]	; (8021358 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 802131a:	7823      	ldrb	r3, [r4, #0]
 802131c:	f3bf 8f5b 	dmb	ish
 8021320:	07db      	lsls	r3, r3, #31
 8021322:	d40b      	bmi.n	802133c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021324:	4620      	mov	r0, r4
 8021326:	f007 f98a 	bl	802863e <__cxa_guard_acquire>
 802132a:	b138      	cbz	r0, 802133c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 802132c:	4620      	mov	r0, r4
 802132e:	f007 f992 	bl	8028656 <__cxa_guard_release>
 8021332:	4a06      	ldr	r2, [pc, #24]	; (802134c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021334:	4909      	ldr	r1, [pc, #36]	; (802135c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8021336:	480a      	ldr	r0, [pc, #40]	; (8021360 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021338:	f007 f97a 	bl	8028630 <__aeabi_atexit>
 802133c:	4b05      	ldr	r3, [pc, #20]	; (8021354 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802133e:	672b      	str	r3, [r5, #112]	; 0x70
 8021340:	4b07      	ldr	r3, [pc, #28]	; (8021360 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021342:	676b      	str	r3, [r5, #116]	; 0x74
 8021344:	bd38      	pop	{r3, r4, r5, pc}
 8021346:	bf00      	nop
 8021348:	20005874 	.word	0x20005874
 802134c:	20000000 	.word	0x20000000
 8021350:	0801f2e3 	.word	0x0801f2e3
 8021354:	20000180 	.word	0x20000180
 8021358:	20005878 	.word	0x20005878
 802135c:	0801f2e1 	.word	0x0801f2e1
 8021360:	20000184 	.word	0x20000184

08021364 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8021364:	b538      	push	{r3, r4, r5, lr}
 8021366:	4c15      	ldr	r4, [pc, #84]	; (80213bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8021368:	4605      	mov	r5, r0
 802136a:	7823      	ldrb	r3, [r4, #0]
 802136c:	f3bf 8f5b 	dmb	ish
 8021370:	07da      	lsls	r2, r3, #31
 8021372:	d40b      	bmi.n	802138c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021374:	4620      	mov	r0, r4
 8021376:	f007 f962 	bl	802863e <__cxa_guard_acquire>
 802137a:	b138      	cbz	r0, 802138c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 802137c:	4620      	mov	r0, r4
 802137e:	f007 f96a 	bl	8028656 <__cxa_guard_release>
 8021382:	4a0f      	ldr	r2, [pc, #60]	; (80213c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021384:	490f      	ldr	r1, [pc, #60]	; (80213c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8021386:	4810      	ldr	r0, [pc, #64]	; (80213c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021388:	f007 f952 	bl	8028630 <__aeabi_atexit>
 802138c:	4c0f      	ldr	r4, [pc, #60]	; (80213cc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 802138e:	7823      	ldrb	r3, [r4, #0]
 8021390:	f3bf 8f5b 	dmb	ish
 8021394:	07db      	lsls	r3, r3, #31
 8021396:	d40b      	bmi.n	80213b0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021398:	4620      	mov	r0, r4
 802139a:	f007 f950 	bl	802863e <__cxa_guard_acquire>
 802139e:	b138      	cbz	r0, 80213b0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80213a0:	4620      	mov	r0, r4
 80213a2:	f007 f958 	bl	8028656 <__cxa_guard_release>
 80213a6:	4a06      	ldr	r2, [pc, #24]	; (80213c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80213a8:	4909      	ldr	r1, [pc, #36]	; (80213d0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80213aa:	480a      	ldr	r0, [pc, #40]	; (80213d4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80213ac:	f007 f940 	bl	8028630 <__aeabi_atexit>
 80213b0:	4b05      	ldr	r3, [pc, #20]	; (80213c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80213b2:	66ab      	str	r3, [r5, #104]	; 0x68
 80213b4:	4b07      	ldr	r3, [pc, #28]	; (80213d4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80213b6:	66eb      	str	r3, [r5, #108]	; 0x6c
 80213b8:	bd38      	pop	{r3, r4, r5, pc}
 80213ba:	bf00      	nop
 80213bc:	2000586c 	.word	0x2000586c
 80213c0:	20000000 	.word	0x20000000
 80213c4:	0801f2e7 	.word	0x0801f2e7
 80213c8:	20000178 	.word	0x20000178
 80213cc:	20005870 	.word	0x20005870
 80213d0:	0801f2e5 	.word	0x0801f2e5
 80213d4:	2000017c 	.word	0x2000017c

080213d8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 80213d8:	b510      	push	{r4, lr}
 80213da:	4604      	mov	r4, r0
 80213dc:	f7ff ff88 	bl	80212f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80213e0:	4620      	mov	r0, r4
 80213e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80213e6:	f7ff bfbd 	b.w	8021364 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

080213ea <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 80213ea:	b510      	push	{r4, lr}
 80213ec:	4604      	mov	r4, r0
 80213ee:	f7ff fff3 	bl	80213d8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 80213f2:	4620      	mov	r0, r4
 80213f4:	f7ff ff72 	bl	80212dc <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 80213f8:	4620      	mov	r0, r4
 80213fa:	f7ff fdf9 	bl	8020ff0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 80213fe:	4620      	mov	r0, r4
 8021400:	f7ff fcfa 	bl	8020df8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8021404:	4620      	mov	r0, r4
 8021406:	f7ff fd75 	bl	8020ef4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 802140a:	4620      	mov	r0, r4
 802140c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021410:	f7ff bee0 	b.w	80211d4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08021414 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8021414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021418:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 802141c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8021420:	f1be 0f00 	cmp.w	lr, #0
 8021424:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8021428:	fb0e 4708 	mla	r7, lr, r8, r4
 802142c:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8021430:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8021434:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8021438:	eb02 0a07 	add.w	sl, r2, r7
 802143c:	8808      	ldrh	r0, [r1, #0]
 802143e:	db37      	blt.n	80214b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8021440:	45f3      	cmp	fp, lr
 8021442:	dd35      	ble.n	80214b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8021444:	2c00      	cmp	r4, #0
 8021446:	db31      	blt.n	80214ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8021448:	45a0      	cmp	r8, r4
 802144a:	dd2f      	ble.n	80214ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 802144c:	5dd2      	ldrb	r2, [r2, r7]
 802144e:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8021452:	1c62      	adds	r2, r4, #1
 8021454:	d42f      	bmi.n	80214b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8021456:	4590      	cmp	r8, r2
 8021458:	dd2d      	ble.n	80214b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 802145a:	b366      	cbz	r6, 80214b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 802145c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8021460:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8021464:	f11e 0e01 	adds.w	lr, lr, #1
 8021468:	d429      	bmi.n	80214be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 802146a:	45f3      	cmp	fp, lr
 802146c:	dd27      	ble.n	80214be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 802146e:	f1bc 0f00 	cmp.w	ip, #0
 8021472:	f000 80a0 	beq.w	80215b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
 8021476:	2c00      	cmp	r4, #0
 8021478:	db1f      	blt.n	80214ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 802147a:	45a0      	cmp	r8, r4
 802147c:	dd1d      	ble.n	80214ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 802147e:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8021482:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8021486:	3401      	adds	r4, #1
 8021488:	d41c      	bmi.n	80214c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 802148a:	45a0      	cmp	r8, r4
 802148c:	dd1a      	ble.n	80214c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 802148e:	b1de      	cbz	r6, 80214c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8021490:	44d0      	add	r8, sl
 8021492:	f898 2001 	ldrb.w	r2, [r8, #1]
 8021496:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802149a:	2e0f      	cmp	r6, #15
 802149c:	d915      	bls.n	80214ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 802149e:	4b49      	ldr	r3, [pc, #292]	; (80215c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 80214a0:	f240 11ef 	movw	r1, #495	; 0x1ef
 80214a4:	4a48      	ldr	r2, [pc, #288]	; (80215c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 80214a6:	4849      	ldr	r0, [pc, #292]	; (80215cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 80214a8:	f007 f8f6 	bl	8028698 <__assert_func>
 80214ac:	4681      	mov	r9, r0
 80214ae:	e7d0      	b.n	8021452 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 80214b0:	4607      	mov	r7, r0
 80214b2:	4681      	mov	r9, r0
 80214b4:	e7d6      	b.n	8021464 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 80214b6:	4607      	mov	r7, r0
 80214b8:	e7d4      	b.n	8021464 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 80214ba:	4686      	mov	lr, r0
 80214bc:	e7e3      	b.n	8021486 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 80214be:	4603      	mov	r3, r0
 80214c0:	4686      	mov	lr, r0
 80214c2:	e7ea      	b.n	802149a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 80214c4:	4603      	mov	r3, r0
 80214c6:	e7e8      	b.n	802149a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 80214c8:	4603      	mov	r3, r0
 80214ca:	f1bc 0f0f 	cmp.w	ip, #15
 80214ce:	d8e6      	bhi.n	802149e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 80214d0:	fb16 f80c 	smulbb	r8, r6, ip
 80214d4:	ea4f 4409 	mov.w	r4, r9, lsl #16
 80214d8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80214dc:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80214e0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80214e4:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80214e8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80214ec:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80214f0:	ea44 0909 	orr.w	r9, r4, r9
 80214f4:	f1cc 0410 	rsb	r4, ip, #16
 80214f8:	041a      	lsls	r2, r3, #16
 80214fa:	ea4a 0707 	orr.w	r7, sl, r7
 80214fe:	1ba4      	subs	r4, r4, r6
 8021500:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8021504:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8021508:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802150c:	4377      	muls	r7, r6
 802150e:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8021512:	4313      	orrs	r3, r2
 8021514:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8021518:	fb04 7409 	mla	r4, r4, r9, r7
 802151c:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8021520:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8021524:	b2af      	uxth	r7, r5
 8021526:	fb08 4303 	mla	r3, r8, r3, r4
 802152a:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 802152e:	43ed      	mvns	r5, r5
 8021530:	10c6      	asrs	r6, r0, #3
 8021532:	4322      	orrs	r2, r4
 8021534:	b2ed      	uxtb	r5, r5
 8021536:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802153a:	fb0c 3202 	mla	r2, ip, r2, r3
 802153e:	fb16 f605 	smulbb	r6, r6, r5
 8021542:	0d53      	lsrs	r3, r2, #21
 8021544:	0952      	lsrs	r2, r2, #5
 8021546:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802154a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802154e:	431a      	orrs	r2, r3
 8021550:	b293      	uxth	r3, r2
 8021552:	1202      	asrs	r2, r0, #8
 8021554:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8021558:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802155c:	00dc      	lsls	r4, r3, #3
 802155e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021562:	fb12 f205 	smulbb	r2, r2, r5
 8021566:	b2e4      	uxtb	r4, r4
 8021568:	fb0c 2c07 	mla	ip, ip, r7, r2
 802156c:	10da      	asrs	r2, r3, #3
 802156e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021572:	fa1f fc8c 	uxth.w	ip, ip
 8021576:	fb02 6207 	mla	r2, r2, r7, r6
 802157a:	f10c 0301 	add.w	r3, ip, #1
 802157e:	b296      	uxth	r6, r2
 8021580:	00c2      	lsls	r2, r0, #3
 8021582:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8021586:	b2d2      	uxtb	r2, r2
 8021588:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802158c:	fb12 f205 	smulbb	r2, r2, r5
 8021590:	fb04 2207 	mla	r2, r4, r7, r2
 8021594:	b292      	uxth	r2, r2
 8021596:	1c50      	adds	r0, r2, #1
 8021598:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802159c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80215a0:	4313      	orrs	r3, r2
 80215a2:	1c72      	adds	r2, r6, #1
 80215a4:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 80215a8:	0952      	lsrs	r2, r2, #5
 80215aa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80215ae:	4313      	orrs	r3, r2
 80215b0:	800b      	strh	r3, [r1, #0]
 80215b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215b6:	2e0f      	cmp	r6, #15
 80215b8:	f63f af71 	bhi.w	802149e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 80215bc:	4603      	mov	r3, r0
 80215be:	4686      	mov	lr, r0
 80215c0:	e786      	b.n	80214d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 80215c2:	bf00      	nop
 80215c4:	0802ceb2 	.word	0x0802ceb2
 80215c8:	0802d51e 	.word	0x0802d51e
 80215cc:	0802cf9b 	.word	0x0802cf9b

080215d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80215d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215d4:	ed2d 8b08 	vpush	{d8-d11}
 80215d8:	b099      	sub	sp, #100	; 0x64
 80215da:	eeb0 aa40 	vmov.f32	s20, s0
 80215de:	eef0 9a60 	vmov.f32	s19, s1
 80215e2:	9215      	str	r2, [sp, #84]	; 0x54
 80215e4:	eeb0 9a41 	vmov.f32	s18, s2
 80215e8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80215ea:	eeb0 8a62 	vmov.f32	s16, s5
 80215ee:	9309      	str	r3, [sp, #36]	; 0x24
 80215f0:	eef0 8a43 	vmov.f32	s17, s6
 80215f4:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 80215f8:	eef0 ba44 	vmov.f32	s23, s8
 80215fc:	9016      	str	r0, [sp, #88]	; 0x58
 80215fe:	eeb0 ba64 	vmov.f32	s22, s9
 8021602:	930d      	str	r3, [sp, #52]	; 0x34
 8021604:	eef0 aa45 	vmov.f32	s21, s10
 8021608:	6850      	ldr	r0, [r2, #4]
 802160a:	910c      	str	r1, [sp, #48]	; 0x30
 802160c:	6812      	ldr	r2, [r2, #0]
 802160e:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8021612:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 8021616:	fb00 1303 	mla	r3, r0, r3, r1
 802161a:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 802161e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021620:	681b      	ldr	r3, [r3, #0]
 8021622:	930b      	str	r3, [sp, #44]	; 0x2c
 8021624:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021626:	685e      	ldr	r6, [r3, #4]
 8021628:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802162a:	3604      	adds	r6, #4
 802162c:	43db      	mvns	r3, r3
 802162e:	b2db      	uxtb	r3, r3
 8021630:	930a      	str	r3, [sp, #40]	; 0x28
 8021632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021634:	2b00      	cmp	r3, #0
 8021636:	dc03      	bgt.n	8021640 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021638:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802163a:	2b00      	cmp	r3, #0
 802163c:	f340 8226 	ble.w	8021a8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8021640:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021642:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021646:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802164a:	1e48      	subs	r0, r1, #1
 802164c:	1e57      	subs	r7, r2, #1
 802164e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021650:	2b00      	cmp	r3, #0
 8021652:	f340 80e4 	ble.w	802181e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8021656:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 802165a:	ea4f 4325 	mov.w	r3, r5, asr #16
 802165e:	d406      	bmi.n	802166e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021660:	4584      	cmp	ip, r0
 8021662:	da04      	bge.n	802166e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021664:	2b00      	cmp	r3, #0
 8021666:	db02      	blt.n	802166e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021668:	42bb      	cmp	r3, r7
 802166a:	f2c0 80d9 	blt.w	8021820 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 802166e:	f11c 0c01 	adds.w	ip, ip, #1
 8021672:	f100 80ca 	bmi.w	802180a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021676:	4561      	cmp	r1, ip
 8021678:	f2c0 80c7 	blt.w	802180a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 802167c:	3301      	adds	r3, #1
 802167e:	f100 80c4 	bmi.w	802180a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021682:	429a      	cmp	r2, r3
 8021684:	f2c0 80c1 	blt.w	802180a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021688:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802168c:	4647      	mov	r7, r8
 802168e:	f1bb 0f00 	cmp.w	fp, #0
 8021692:	f340 80e4 	ble.w	802185e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8021696:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8021698:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802169c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802169e:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80216a2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80216a6:	ea5f 422a 	movs.w	r2, sl, asr #16
 80216aa:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80216ae:	689b      	ldr	r3, [r3, #8]
 80216b0:	f100 8122 	bmi.w	80218f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 80216b4:	f103 39ff 	add.w	r9, r3, #4294967295
 80216b8:	454a      	cmp	r2, r9
 80216ba:	f280 811d 	bge.w	80218f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 80216be:	f1bc 0f00 	cmp.w	ip, #0
 80216c2:	f2c0 8119 	blt.w	80218f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 80216c6:	f10e 39ff 	add.w	r9, lr, #4294967295
 80216ca:	45cc      	cmp	ip, r9
 80216cc:	f280 8114 	bge.w	80218f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x328>
 80216d0:	b21b      	sxth	r3, r3
 80216d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80216d4:	fb0c 2203 	mla	r2, ip, r3, r2
 80216d8:	eb04 0902 	add.w	r9, r4, r2
 80216dc:	5ca2      	ldrb	r2, [r4, r2]
 80216de:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 80216e2:	2800      	cmp	r0, #0
 80216e4:	f000 80ff 	beq.w	80218e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x316>
 80216e8:	f899 2001 	ldrb.w	r2, [r9, #1]
 80216ec:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80216f0:	9211      	str	r2, [sp, #68]	; 0x44
 80216f2:	b151      	cbz	r1, 802170a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80216f4:	eb09 0203 	add.w	r2, r9, r3
 80216f8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80216fc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021700:	930f      	str	r3, [sp, #60]	; 0x3c
 8021702:	7853      	ldrb	r3, [r2, #1]
 8021704:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021708:	9312      	str	r3, [sp, #72]	; 0x48
 802170a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802170c:	fb10 f201 	smulbb	r2, r0, r1
 8021710:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021712:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8021716:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802171a:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 802171e:	10d2      	asrs	r2, r2, #3
 8021720:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021724:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8021728:	ea4c 0c03 	orr.w	ip, ip, r3
 802172c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802172e:	041b      	lsls	r3, r3, #16
 8021730:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021734:	4323      	orrs	r3, r4
 8021736:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021738:	4353      	muls	r3, r2
 802173a:	fb09 330c 	mla	r3, r9, ip, r3
 802173e:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8021742:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021746:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802174a:	ea4c 0e0e 	orr.w	lr, ip, lr
 802174e:	f1c1 0c10 	rsb	ip, r1, #16
 8021752:	ebac 0c00 	sub.w	ip, ip, r0
 8021756:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802175a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 802175e:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8021762:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021764:	0418      	lsls	r0, r3, #16
 8021766:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802176a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802176e:	4318      	orrs	r0, r3
 8021770:	fb02 c200 	mla	r2, r2, r0, ip
 8021774:	f8b7 c000 	ldrh.w	ip, [r7]
 8021778:	0d53      	lsrs	r3, r2, #21
 802177a:	0952      	lsrs	r2, r2, #5
 802177c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021780:	ea4f 212c 	mov.w	r1, ip, asr #8
 8021784:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021788:	ea4f 0eec 	mov.w	lr, ip, asr #3
 802178c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021790:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021794:	431a      	orrs	r2, r3
 8021796:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 802179a:	fb11 f104 	smulbb	r1, r1, r4
 802179e:	fa5f fc8c 	uxtb.w	ip, ip
 80217a2:	b292      	uxth	r2, r2
 80217a4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80217a8:	fb1c fc04 	smulbb	ip, ip, r4
 80217ac:	fb1e fe04 	smulbb	lr, lr, r4
 80217b0:	1210      	asrs	r0, r2, #8
 80217b2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80217b6:	fb00 1003 	mla	r0, r0, r3, r1
 80217ba:	10d1      	asrs	r1, r2, #3
 80217bc:	00d2      	lsls	r2, r2, #3
 80217be:	b280      	uxth	r0, r0
 80217c0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80217c4:	b2d2      	uxtb	r2, r2
 80217c6:	fb01 e103 	mla	r1, r1, r3, lr
 80217ca:	fb02 c203 	mla	r2, r2, r3, ip
 80217ce:	1c43      	adds	r3, r0, #1
 80217d0:	b289      	uxth	r1, r1
 80217d2:	b292      	uxth	r2, r2
 80217d4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80217d8:	f102 0c01 	add.w	ip, r2, #1
 80217dc:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80217e0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80217e4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80217e8:	4313      	orrs	r3, r2
 80217ea:	1c4a      	adds	r2, r1, #1
 80217ec:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80217f0:	0949      	lsrs	r1, r1, #5
 80217f2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80217f6:	430b      	orrs	r3, r1
 80217f8:	803b      	strh	r3, [r7, #0]
 80217fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80217fc:	3702      	adds	r7, #2
 80217fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021802:	449a      	add	sl, r3
 8021804:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021806:	441d      	add	r5, r3
 8021808:	e741      	b.n	802168e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802180a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802180c:	f108 0802 	add.w	r8, r8, #2
 8021810:	449a      	add	sl, r3
 8021812:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021814:	441d      	add	r5, r3
 8021816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021818:	3b01      	subs	r3, #1
 802181a:	9309      	str	r3, [sp, #36]	; 0x24
 802181c:	e717      	b.n	802164e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802181e:	d023      	beq.n	8021868 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8021820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021822:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8021824:	3b01      	subs	r3, #1
 8021826:	fb00 a003 	mla	r0, r0, r3, sl
 802182a:	1400      	asrs	r0, r0, #16
 802182c:	f53f af2c 	bmi.w	8021688 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8021830:	3901      	subs	r1, #1
 8021832:	4288      	cmp	r0, r1
 8021834:	f6bf af28 	bge.w	8021688 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8021838:	992e      	ldr	r1, [sp, #184]	; 0xb8
 802183a:	fb01 5303 	mla	r3, r1, r3, r5
 802183e:	141b      	asrs	r3, r3, #16
 8021840:	f53f af22 	bmi.w	8021688 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8021844:	3a01      	subs	r2, #1
 8021846:	4293      	cmp	r3, r2
 8021848:	f6bf af1e 	bge.w	8021688 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802184c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8021850:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8021854:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8021858:	f1be 0f00 	cmp.w	lr, #0
 802185c:	dc6c      	bgt.n	8021938 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802185e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021860:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021864:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8021868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802186a:	2b00      	cmp	r3, #0
 802186c:	f340 810e 	ble.w	8021a8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8021870:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021874:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021876:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802187a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802187e:	eef0 6a48 	vmov.f32	s13, s16
 8021882:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021886:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802188a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802188e:	ee16 aa90 	vmov	sl, s13
 8021892:	eef0 6a68 	vmov.f32	s13, s17
 8021896:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802189a:	ee16 5a90 	vmov	r5, s13
 802189e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80218a2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80218a6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80218aa:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80218ae:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80218b2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80218b6:	ee18 2a10 	vmov	r2, s16
 80218ba:	eeb0 8a47 	vmov.f32	s16, s14
 80218be:	fb92 f3f3 	sdiv	r3, r2, r3
 80218c2:	ee18 2a90 	vmov	r2, s17
 80218c6:	932d      	str	r3, [sp, #180]	; 0xb4
 80218c8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80218ca:	eef0 8a67 	vmov.f32	s17, s15
 80218ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80218d2:	932e      	str	r3, [sp, #184]	; 0xb8
 80218d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80218d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80218d8:	3b01      	subs	r3, #1
 80218da:	930c      	str	r3, [sp, #48]	; 0x30
 80218dc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80218de:	bf08      	it	eq
 80218e0:	4613      	moveq	r3, r2
 80218e2:	9309      	str	r3, [sp, #36]	; 0x24
 80218e4:	e6a5      	b.n	8021632 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80218e6:	2900      	cmp	r1, #0
 80218e8:	f43f af0f 	beq.w	802170a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80218ec:	f819 3003 	ldrb.w	r3, [r9, r3]
 80218f0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80218f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80218f6:	e708      	b.n	802170a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80218f8:	f112 0901 	adds.w	r9, r2, #1
 80218fc:	f53f af7d 	bmi.w	80217fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8021900:	454b      	cmp	r3, r9
 8021902:	f6ff af7a 	blt.w	80217fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8021906:	f11c 0901 	adds.w	r9, ip, #1
 802190a:	f53f af76 	bmi.w	80217fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802190e:	45ce      	cmp	lr, r9
 8021910:	f6ff af73 	blt.w	80217fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8021914:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021916:	b21b      	sxth	r3, r3
 8021918:	9202      	str	r2, [sp, #8]
 802191a:	fa0f f28e 	sxth.w	r2, lr
 802191e:	9300      	str	r3, [sp, #0]
 8021920:	4633      	mov	r3, r6
 8021922:	9201      	str	r2, [sp, #4]
 8021924:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021926:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802192a:	e9cd c003 	strd	ip, r0, [sp, #12]
 802192e:	4639      	mov	r1, r7
 8021930:	9816      	ldr	r0, [sp, #88]	; 0x58
 8021932:	f7ff fd6f 	bl	8021414 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8021936:	e760      	b.n	80217fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8021938:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802193a:	ea4f 422a 	mov.w	r2, sl, asr #16
 802193e:	1429      	asrs	r1, r5, #16
 8021940:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021942:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8021946:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 802194a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802194e:	fb03 2101 	mla	r1, r3, r1, r2
 8021952:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021954:	440a      	add	r2, r1
 8021956:	5c61      	ldrb	r1, [r4, r1]
 8021958:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 802195c:	f1bc 0f00 	cmp.w	ip, #0
 8021960:	f000 808c 	beq.w	8021a7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8021964:	7857      	ldrb	r7, [r2, #1]
 8021966:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 802196a:	9413      	str	r4, [sp, #76]	; 0x4c
 802196c:	b140      	cbz	r0, 8021980 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 802196e:	18d7      	adds	r7, r2, r3
 8021970:	5cd3      	ldrb	r3, [r2, r3]
 8021972:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021976:	9310      	str	r3, [sp, #64]	; 0x40
 8021978:	787b      	ldrb	r3, [r7, #1]
 802197a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802197e:	9314      	str	r3, [sp, #80]	; 0x50
 8021980:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021982:	fb1c f200 	smulbb	r2, ip, r0
 8021986:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021988:	f10e 3eff 	add.w	lr, lr, #4294967295
 802198c:	041f      	lsls	r7, r3, #16
 802198e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021992:	10d2      	asrs	r2, r2, #3
 8021994:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8021998:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 802199c:	431f      	orrs	r7, r3
 802199e:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 80219a2:	9317      	str	r3, [sp, #92]	; 0x5c
 80219a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80219a6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80219a8:	041b      	lsls	r3, r3, #16
 80219aa:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80219ae:	ea43 030b 	orr.w	r3, r3, fp
 80219b2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80219b6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80219ba:	4353      	muls	r3, r2
 80219bc:	fb04 3707 	mla	r7, r4, r7, r3
 80219c0:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80219c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80219c6:	ea43 0b01 	orr.w	fp, r3, r1
 80219ca:	f1c0 0110 	rsb	r1, r0, #16
 80219ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80219d0:	eba1 0c0c 	sub.w	ip, r1, ip
 80219d4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80219d8:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80219dc:	fb0c 770b 	mla	r7, ip, fp, r7
 80219e0:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80219e4:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 80219e8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80219ec:	ea4c 0c0b 	orr.w	ip, ip, fp
 80219f0:	fb02 770c 	mla	r7, r2, ip, r7
 80219f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80219f6:	0d79      	lsrs	r1, r7, #21
 80219f8:	8812      	ldrh	r2, [r2, #0]
 80219fa:	097f      	lsrs	r7, r7, #5
 80219fc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021a00:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8021a04:	430f      	orrs	r7, r1
 8021a06:	1211      	asrs	r1, r2, #8
 8021a08:	b2bb      	uxth	r3, r7
 8021a0a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021a0e:	10d7      	asrs	r7, r2, #3
 8021a10:	fb11 f104 	smulbb	r1, r1, r4
 8021a14:	1218      	asrs	r0, r3, #8
 8021a16:	00d2      	lsls	r2, r2, #3
 8021a18:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021a1c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021a20:	fb17 f704 	smulbb	r7, r7, r4
 8021a24:	b2d2      	uxtb	r2, r2
 8021a26:	fb00 1009 	mla	r0, r0, r9, r1
 8021a2a:	10d9      	asrs	r1, r3, #3
 8021a2c:	fb12 f204 	smulbb	r2, r2, r4
 8021a30:	00db      	lsls	r3, r3, #3
 8021a32:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021a36:	b280      	uxth	r0, r0
 8021a38:	b2db      	uxtb	r3, r3
 8021a3a:	fb01 7109 	mla	r1, r1, r9, r7
 8021a3e:	fb03 2309 	mla	r3, r3, r9, r2
 8021a42:	1c42      	adds	r2, r0, #1
 8021a44:	b289      	uxth	r1, r1
 8021a46:	b29b      	uxth	r3, r3
 8021a48:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021a4c:	1c4f      	adds	r7, r1, #1
 8021a4e:	1c5a      	adds	r2, r3, #1
 8021a50:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8021a54:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8021a58:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021a5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021a5e:	0949      	lsrs	r1, r1, #5
 8021a60:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021a64:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021a68:	4310      	orrs	r0, r2
 8021a6a:	4308      	orrs	r0, r1
 8021a6c:	f823 0b02 	strh.w	r0, [r3], #2
 8021a70:	930e      	str	r3, [sp, #56]	; 0x38
 8021a72:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8021a74:	449a      	add	sl, r3
 8021a76:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021a78:	441d      	add	r5, r3
 8021a7a:	e6ed      	b.n	8021858 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8021a7c:	2800      	cmp	r0, #0
 8021a7e:	f43f af7f 	beq.w	8021980 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8021a82:	5cd3      	ldrb	r3, [r2, r3]
 8021a84:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021a88:	9310      	str	r3, [sp, #64]	; 0x40
 8021a8a:	e779      	b.n	8021980 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8021a8c:	b019      	add	sp, #100	; 0x64
 8021a8e:	ecbd 8b08 	vpop	{d8-d11}
 8021a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021a98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8021a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021a9c:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 8021aa0:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8021aa4:	2e00      	cmp	r6, #0
 8021aa6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8021aaa:	fb06 570e 	mla	r7, r6, lr, r5
 8021aae:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8021ab2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8021ab6:	eb02 0807 	add.w	r8, r2, r7
 8021aba:	8808      	ldrh	r0, [r1, #0]
 8021abc:	db38      	blt.n	8021b30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8021abe:	45b1      	cmp	r9, r6
 8021ac0:	dd36      	ble.n	8021b30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8021ac2:	2d00      	cmp	r5, #0
 8021ac4:	db32      	blt.n	8021b2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8021ac6:	45ae      	cmp	lr, r5
 8021ac8:	dd30      	ble.n	8021b2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8021aca:	5dd2      	ldrb	r2, [r2, r7]
 8021acc:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8021ad0:	1c6a      	adds	r2, r5, #1
 8021ad2:	d430      	bmi.n	8021b36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8021ad4:	4596      	cmp	lr, r2
 8021ad6:	dd2e      	ble.n	8021b36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8021ad8:	b36c      	cbz	r4, 8021b36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8021ada:	f898 2001 	ldrb.w	r2, [r8, #1]
 8021ade:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8021ae2:	3601      	adds	r6, #1
 8021ae4:	d42b      	bmi.n	8021b3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8021ae6:	45b1      	cmp	r9, r6
 8021ae8:	dd29      	ble.n	8021b3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8021aea:	f1bc 0f00 	cmp.w	ip, #0
 8021aee:	d028      	beq.n	8021b42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8021af0:	2d00      	cmp	r5, #0
 8021af2:	db22      	blt.n	8021b3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8021af4:	45ae      	cmp	lr, r5
 8021af6:	dd20      	ble.n	8021b3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8021af8:	f818 600e 	ldrb.w	r6, [r8, lr]
 8021afc:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8021b00:	3501      	adds	r5, #1
 8021b02:	d407      	bmi.n	8021b14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8021b04:	45ae      	cmp	lr, r5
 8021b06:	dd05      	ble.n	8021b14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8021b08:	b134      	cbz	r4, 8021b18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8021b0a:	44c6      	add	lr, r8
 8021b0c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8021b10:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8021b14:	2c0f      	cmp	r4, #15
 8021b16:	d802      	bhi.n	8021b1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8021b18:	f1bc 0f0f 	cmp.w	ip, #15
 8021b1c:	d914      	bls.n	8021b48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 8021b1e:	4b26      	ldr	r3, [pc, #152]	; (8021bb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8021b20:	f240 11ef 	movw	r1, #495	; 0x1ef
 8021b24:	4a25      	ldr	r2, [pc, #148]	; (8021bbc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 8021b26:	4826      	ldr	r0, [pc, #152]	; (8021bc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 8021b28:	f006 fdb6 	bl	8028698 <__assert_func>
 8021b2c:	4607      	mov	r7, r0
 8021b2e:	e7cf      	b.n	8021ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 8021b30:	4602      	mov	r2, r0
 8021b32:	4607      	mov	r7, r0
 8021b34:	e7d5      	b.n	8021ae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8021b36:	4602      	mov	r2, r0
 8021b38:	e7d3      	b.n	8021ae2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8021b3a:	4606      	mov	r6, r0
 8021b3c:	e7e0      	b.n	8021b00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 8021b3e:	4606      	mov	r6, r0
 8021b40:	e7e8      	b.n	8021b14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8021b42:	2c0f      	cmp	r4, #15
 8021b44:	d8eb      	bhi.n	8021b1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8021b46:	4606      	mov	r6, r0
 8021b48:	fb14 f30c 	smulbb	r3, r4, ip
 8021b4c:	043d      	lsls	r5, r7, #16
 8021b4e:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8021b52:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8021b56:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8021b5a:	10db      	asrs	r3, r3, #3
 8021b5c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021b60:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021b64:	432f      	orrs	r7, r5
 8021b66:	f1cc 0510 	rsb	r5, ip, #16
 8021b6a:	ea4e 0202 	orr.w	r2, lr, r2
 8021b6e:	1b2d      	subs	r5, r5, r4
 8021b70:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8021b74:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8021b78:	4354      	muls	r4, r2
 8021b7a:	fb05 4507 	mla	r5, r5, r7, r4
 8021b7e:	0404      	lsls	r4, r0, #16
 8021b80:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021b84:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8021b88:	4320      	orrs	r0, r4
 8021b8a:	fb03 5400 	mla	r4, r3, r0, r5
 8021b8e:	0430      	lsls	r0, r6, #16
 8021b90:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8021b94:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8021b98:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8021b9c:	4330      	orrs	r0, r6
 8021b9e:	fb03 4000 	mla	r0, r3, r0, r4
 8021ba2:	0d43      	lsrs	r3, r0, #21
 8021ba4:	0940      	lsrs	r0, r0, #5
 8021ba6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021baa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021bae:	4318      	orrs	r0, r3
 8021bb0:	8008      	strh	r0, [r1, #0]
 8021bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021bb6:	bf00      	nop
 8021bb8:	0802ceb2 	.word	0x0802ceb2
 8021bbc:	0802d51e 	.word	0x0802d51e
 8021bc0:	0802cf9b 	.word	0x0802cf9b

08021bc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bc8:	ed2d 8b0a 	vpush	{d8-d12}
 8021bcc:	b093      	sub	sp, #76	; 0x4c
 8021bce:	eeb0 aa40 	vmov.f32	s20, s0
 8021bd2:	eef0 9a60 	vmov.f32	s19, s1
 8021bd6:	920f      	str	r2, [sp, #60]	; 0x3c
 8021bd8:	eeb0 9a41 	vmov.f32	s18, s2
 8021bdc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021bde:	eeb0 8a62 	vmov.f32	s16, s5
 8021be2:	9010      	str	r0, [sp, #64]	; 0x40
 8021be4:	eef0 8a43 	vmov.f32	s17, s6
 8021be8:	6850      	ldr	r0, [r2, #4]
 8021bea:	eeb0 ca44 	vmov.f32	s24, s8
 8021bee:	9108      	str	r1, [sp, #32]
 8021bf0:	eef0 ba64 	vmov.f32	s23, s9
 8021bf4:	9306      	str	r3, [sp, #24]
 8021bf6:	eeb0 ba45 	vmov.f32	s22, s10
 8021bfa:	6812      	ldr	r2, [r2, #0]
 8021bfc:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8021c00:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8021c04:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8021c08:	fb00 1303 	mla	r3, r0, r3, r1
 8021c0c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8021c10:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021c12:	681b      	ldr	r3, [r3, #0]
 8021c14:	9307      	str	r3, [sp, #28]
 8021c16:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021c18:	685f      	ldr	r7, [r3, #4]
 8021c1a:	3704      	adds	r7, #4
 8021c1c:	9b08      	ldr	r3, [sp, #32]
 8021c1e:	2b00      	cmp	r3, #0
 8021c20:	dc03      	bgt.n	8021c2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021c22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021c24:	2b00      	cmp	r3, #0
 8021c26:	f340 81b2 	ble.w	8021f8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8021c2a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021c2c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021c30:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021c34:	1e48      	subs	r0, r1, #1
 8021c36:	f102 3cff 	add.w	ip, r2, #4294967295
 8021c3a:	9b06      	ldr	r3, [sp, #24]
 8021c3c:	2b00      	cmp	r3, #0
 8021c3e:	f340 80a9 	ble.w	8021d94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8021c42:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8021c46:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021c4a:	d406      	bmi.n	8021c5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021c4c:	4586      	cmp	lr, r0
 8021c4e:	da04      	bge.n	8021c5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021c50:	2b00      	cmp	r3, #0
 8021c52:	db02      	blt.n	8021c5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021c54:	4563      	cmp	r3, ip
 8021c56:	f2c0 809e 	blt.w	8021d96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8021c5a:	f11e 0e01 	adds.w	lr, lr, #1
 8021c5e:	f100 808f 	bmi.w	8021d80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8021c62:	4571      	cmp	r1, lr
 8021c64:	f2c0 808c 	blt.w	8021d80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8021c68:	3301      	adds	r3, #1
 8021c6a:	f100 8089 	bmi.w	8021d80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8021c6e:	429a      	cmp	r2, r3
 8021c70:	f2c0 8086 	blt.w	8021d80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8021c74:	f8dd b018 	ldr.w	fp, [sp, #24]
 8021c78:	46c8      	mov	r8, r9
 8021c7a:	f1bb 0f00 	cmp.w	fp, #0
 8021c7e:	f340 80a6 	ble.w	8021dce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8021c82:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8021c84:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8021c88:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021c8a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021c8e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021c92:	1422      	asrs	r2, r4, #16
 8021c94:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021c98:	689b      	ldr	r3, [r3, #8]
 8021c9a:	f100 80e3 	bmi.w	8021e64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8021c9e:	f103 3aff 	add.w	sl, r3, #4294967295
 8021ca2:	4552      	cmp	r2, sl
 8021ca4:	f280 80de 	bge.w	8021e64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8021ca8:	f1bc 0f00 	cmp.w	ip, #0
 8021cac:	f2c0 80da 	blt.w	8021e64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8021cb0:	f10e 3aff 	add.w	sl, lr, #4294967295
 8021cb4:	45d4      	cmp	ip, sl
 8021cb6:	f280 80d5 	bge.w	8021e64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8021cba:	b21b      	sxth	r3, r3
 8021cbc:	9d07      	ldr	r5, [sp, #28]
 8021cbe:	fb0c 2203 	mla	r2, ip, r3, r2
 8021cc2:	eb05 0a02 	add.w	sl, r5, r2
 8021cc6:	5caa      	ldrb	r2, [r5, r2]
 8021cc8:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8021ccc:	2800      	cmp	r0, #0
 8021cce:	f000 80c0 	beq.w	8021e52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8021cd2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8021cd6:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8021cda:	920b      	str	r2, [sp, #44]	; 0x2c
 8021cdc:	b151      	cbz	r1, 8021cf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8021cde:	eb0a 0203 	add.w	r2, sl, r3
 8021ce2:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8021ce6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021cea:	9309      	str	r3, [sp, #36]	; 0x24
 8021cec:	7853      	ldrb	r3, [r2, #1]
 8021cee:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021cf2:	930c      	str	r3, [sp, #48]	; 0x30
 8021cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021cf6:	fb10 f201 	smulbb	r2, r0, r1
 8021cfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021cfc:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8021d00:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021d04:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021d08:	10d2      	asrs	r2, r2, #3
 8021d0a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021d0e:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8021d12:	ea4c 0c03 	orr.w	ip, ip, r3
 8021d16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021d18:	041b      	lsls	r3, r3, #16
 8021d1a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021d1e:	432b      	orrs	r3, r5
 8021d20:	4353      	muls	r3, r2
 8021d22:	fb0a 330c 	mla	r3, sl, ip, r3
 8021d26:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8021d2a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021d2e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021d32:	ea4c 0e0e 	orr.w	lr, ip, lr
 8021d36:	f1c1 0c10 	rsb	ip, r1, #16
 8021d3a:	ebac 0c00 	sub.w	ip, ip, r0
 8021d3e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8021d42:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8021d46:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8021d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d4c:	0418      	lsls	r0, r3, #16
 8021d4e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021d52:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8021d56:	4318      	orrs	r0, r3
 8021d58:	fb02 c200 	mla	r2, r2, r0, ip
 8021d5c:	0d53      	lsrs	r3, r2, #21
 8021d5e:	0952      	lsrs	r2, r2, #5
 8021d60:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021d64:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021d68:	431a      	orrs	r2, r3
 8021d6a:	f8a8 2000 	strh.w	r2, [r8]
 8021d6e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021d70:	f108 0802 	add.w	r8, r8, #2
 8021d74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021d78:	441c      	add	r4, r3
 8021d7a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021d7c:	441e      	add	r6, r3
 8021d7e:	e77c      	b.n	8021c7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021d80:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021d82:	f109 0902 	add.w	r9, r9, #2
 8021d86:	441c      	add	r4, r3
 8021d88:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021d8a:	441e      	add	r6, r3
 8021d8c:	9b06      	ldr	r3, [sp, #24]
 8021d8e:	3b01      	subs	r3, #1
 8021d90:	9306      	str	r3, [sp, #24]
 8021d92:	e752      	b.n	8021c3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021d94:	d020      	beq.n	8021dd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021d96:	9b06      	ldr	r3, [sp, #24]
 8021d98:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8021d9a:	3b01      	subs	r3, #1
 8021d9c:	fb00 4003 	mla	r0, r0, r3, r4
 8021da0:	1400      	asrs	r0, r0, #16
 8021da2:	f53f af67 	bmi.w	8021c74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021da6:	3901      	subs	r1, #1
 8021da8:	4288      	cmp	r0, r1
 8021daa:	f6bf af63 	bge.w	8021c74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021dae:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8021db0:	fb01 6303 	mla	r3, r1, r3, r6
 8021db4:	141b      	asrs	r3, r3, #16
 8021db6:	f53f af5d 	bmi.w	8021c74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021dba:	3a01      	subs	r2, #1
 8021dbc:	4293      	cmp	r3, r2
 8021dbe:	f6bf af59 	bge.w	8021c74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021dc2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8021dc6:	46ca      	mov	sl, r9
 8021dc8:	f1b8 0f00 	cmp.w	r8, #0
 8021dcc:	dc67      	bgt.n	8021e9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8021dce:	9b06      	ldr	r3, [sp, #24]
 8021dd0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8021dd4:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8021dd8:	9b08      	ldr	r3, [sp, #32]
 8021dda:	2b00      	cmp	r3, #0
 8021ddc:	f340 80d7 	ble.w	8021f8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8021de0:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8021de4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021de6:	ee79 9aab 	vadd.f32	s19, s19, s23
 8021dea:	eef0 6a48 	vmov.f32	s13, s16
 8021dee:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8021df2:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8021df6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021dfa:	ee16 4a90 	vmov	r4, s13
 8021dfe:	eef0 6a68 	vmov.f32	s13, s17
 8021e02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021e06:	ee16 6a90 	vmov	r6, s13
 8021e0a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021e0e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021e12:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021e16:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021e1a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021e1e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021e22:	ee18 2a10 	vmov	r2, s16
 8021e26:	eeb0 8a47 	vmov.f32	s16, s14
 8021e2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e2e:	ee18 2a90 	vmov	r2, s17
 8021e32:	9329      	str	r3, [sp, #164]	; 0xa4
 8021e34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021e36:	eef0 8a67 	vmov.f32	s17, s15
 8021e3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e3e:	932a      	str	r3, [sp, #168]	; 0xa8
 8021e40:	9b08      	ldr	r3, [sp, #32]
 8021e42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021e44:	3b01      	subs	r3, #1
 8021e46:	9308      	str	r3, [sp, #32]
 8021e48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021e4a:	bf08      	it	eq
 8021e4c:	4613      	moveq	r3, r2
 8021e4e:	9306      	str	r3, [sp, #24]
 8021e50:	e6e4      	b.n	8021c1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8021e52:	2900      	cmp	r1, #0
 8021e54:	f43f af4e 	beq.w	8021cf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8021e58:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8021e5c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021e60:	9309      	str	r3, [sp, #36]	; 0x24
 8021e62:	e747      	b.n	8021cf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8021e64:	f112 0a01 	adds.w	sl, r2, #1
 8021e68:	d481      	bmi.n	8021d6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8021e6a:	4553      	cmp	r3, sl
 8021e6c:	f6ff af7f 	blt.w	8021d6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8021e70:	f11c 0a01 	adds.w	sl, ip, #1
 8021e74:	f53f af7b 	bmi.w	8021d6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8021e78:	45d6      	cmp	lr, sl
 8021e7a:	f6ff af78 	blt.w	8021d6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8021e7e:	b21b      	sxth	r3, r3
 8021e80:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8021e84:	fa0f f28e 	sxth.w	r2, lr
 8021e88:	9300      	str	r3, [sp, #0]
 8021e8a:	463b      	mov	r3, r7
 8021e8c:	9201      	str	r2, [sp, #4]
 8021e8e:	9a07      	ldr	r2, [sp, #28]
 8021e90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8021e94:	4641      	mov	r1, r8
 8021e96:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021e98:	f7ff fdfe 	bl	8021a98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8021e9c:	e767      	b.n	8021d6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8021e9e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021ea0:	1422      	asrs	r2, r4, #16
 8021ea2:	1431      	asrs	r1, r6, #16
 8021ea4:	9d07      	ldr	r5, [sp, #28]
 8021ea6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8021eaa:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8021eae:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021eb2:	fb03 2101 	mla	r1, r3, r1, r2
 8021eb6:	9a07      	ldr	r2, [sp, #28]
 8021eb8:	440a      	add	r2, r1
 8021eba:	5c69      	ldrb	r1, [r5, r1]
 8021ebc:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8021ec0:	f1be 0f00 	cmp.w	lr, #0
 8021ec4:	d05c      	beq.n	8021f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 8021ec6:	f892 c001 	ldrb.w	ip, [r2, #1]
 8021eca:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8021ece:	950d      	str	r5, [sp, #52]	; 0x34
 8021ed0:	b150      	cbz	r0, 8021ee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8021ed2:	eb02 0c03 	add.w	ip, r2, r3
 8021ed6:	5cd3      	ldrb	r3, [r2, r3]
 8021ed8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021edc:	930a      	str	r3, [sp, #40]	; 0x28
 8021ede:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8021ee2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021ee6:	930e      	str	r3, [sp, #56]	; 0x38
 8021ee8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021eea:	fb1e f200 	smulbb	r2, lr, r0
 8021eee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021ef0:	f108 38ff 	add.w	r8, r8, #4294967295
 8021ef4:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8021ef8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021efc:	10d2      	asrs	r2, r2, #3
 8021efe:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8021f02:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021f06:	ea4c 0c03 	orr.w	ip, ip, r3
 8021f0a:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8021f0e:	9311      	str	r3, [sp, #68]	; 0x44
 8021f10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021f12:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021f14:	041b      	lsls	r3, r3, #16
 8021f16:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021f1a:	ea43 030b 	orr.w	r3, r3, fp
 8021f1e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8021f22:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021f26:	4353      	muls	r3, r2
 8021f28:	fb05 3c0c 	mla	ip, r5, ip, r3
 8021f2c:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8021f30:	ea43 0b01 	orr.w	fp, r3, r1
 8021f34:	f1c0 0110 	rsb	r1, r0, #16
 8021f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021f3a:	eba1 0e0e 	sub.w	lr, r1, lr
 8021f3e:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8021f42:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8021f46:	fb0e cc0b 	mla	ip, lr, fp, ip
 8021f4a:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8021f4e:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8021f52:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8021f56:	ea4b 0e0e 	orr.w	lr, fp, lr
 8021f5a:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021f5e:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8021f62:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021f66:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021f6a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8021f6e:	ea43 0c0c 	orr.w	ip, r3, ip
 8021f72:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021f74:	441c      	add	r4, r3
 8021f76:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021f78:	f82a cb02 	strh.w	ip, [sl], #2
 8021f7c:	441e      	add	r6, r3
 8021f7e:	e723      	b.n	8021dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021f80:	2800      	cmp	r0, #0
 8021f82:	d0b1      	beq.n	8021ee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8021f84:	5cd3      	ldrb	r3, [r2, r3]
 8021f86:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021f8a:	930a      	str	r3, [sp, #40]	; 0x28
 8021f8c:	e7ac      	b.n	8021ee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8021f8e:	b013      	add	sp, #76	; 0x4c
 8021f90:	ecbd 8b0a 	vpop	{d8-d12}
 8021f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021f98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8021f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f9c:	468b      	mov	fp, r1
 8021f9e:	8809      	ldrh	r1, [r1, #0]
 8021fa0:	b089      	sub	sp, #36	; 0x24
 8021fa2:	10cd      	asrs	r5, r1, #3
 8021fa4:	ea4f 2921 	mov.w	r9, r1, asr #8
 8021fa8:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 8021fac:	00c9      	lsls	r1, r1, #3
 8021fae:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021fb2:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8021fb6:	9202      	str	r2, [sp, #8]
 8021fb8:	b2c9      	uxtb	r1, r1
 8021fba:	9500      	str	r5, [sp, #0]
 8021fbc:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8021fc0:	9101      	str	r1, [sp, #4]
 8021fc2:	9900      	ldr	r1, [sp, #0]
 8021fc4:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8021fc8:	0209      	lsls	r1, r1, #8
 8021fca:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8021fce:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 8021fd2:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8021fd6:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 8021fda:	fb04 650e 	mla	r5, r4, lr, r6
 8021fde:	2c00      	cmp	r4, #0
 8021fe0:	eb02 0805 	add.w	r8, r2, r5
 8021fe4:	9a01      	ldr	r2, [sp, #4]
 8021fe6:	ea41 0102 	orr.w	r1, r1, r2
 8021fea:	9107      	str	r1, [sp, #28]
 8021fec:	db43      	blt.n	8022076 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8021fee:	45a2      	cmp	sl, r4
 8021ff0:	dd41      	ble.n	8022076 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8021ff2:	2e00      	cmp	r6, #0
 8021ff4:	db3d      	blt.n	8022072 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8021ff6:	45b6      	cmp	lr, r6
 8021ff8:	dd3b      	ble.n	8022072 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8021ffa:	9a02      	ldr	r2, [sp, #8]
 8021ffc:	5d55      	ldrb	r5, [r2, r5]
 8021ffe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022002:	441d      	add	r5, r3
 8022004:	1c72      	adds	r2, r6, #1
 8022006:	d439      	bmi.n	802207c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8022008:	4596      	cmp	lr, r2
 802200a:	dd37      	ble.n	802207c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 802200c:	2f00      	cmp	r7, #0
 802200e:	d035      	beq.n	802207c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8022010:	f898 1001 	ldrb.w	r1, [r8, #1]
 8022014:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022018:	4419      	add	r1, r3
 802201a:	3401      	adds	r4, #1
 802201c:	d432      	bmi.n	8022084 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 802201e:	45a2      	cmp	sl, r4
 8022020:	dd30      	ble.n	8022084 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8022022:	b378      	cbz	r0, 8022084 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8022024:	2e00      	cmp	r6, #0
 8022026:	db2b      	blt.n	8022080 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8022028:	45b6      	cmp	lr, r6
 802202a:	dd29      	ble.n	8022080 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 802202c:	f818 400e 	ldrb.w	r4, [r8, lr]
 8022030:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022034:	441c      	add	r4, r3
 8022036:	3601      	adds	r6, #1
 8022038:	d427      	bmi.n	802208a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 802203a:	45b6      	cmp	lr, r6
 802203c:	dd25      	ble.n	802208a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 802203e:	b327      	cbz	r7, 802208a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8022040:	44c6      	add	lr, r8
 8022042:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022046:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802204a:	4413      	add	r3, r2
 802204c:	782a      	ldrb	r2, [r5, #0]
 802204e:	2f0f      	cmp	r7, #15
 8022050:	9202      	str	r2, [sp, #8]
 8022052:	780a      	ldrb	r2, [r1, #0]
 8022054:	9203      	str	r2, [sp, #12]
 8022056:	7822      	ldrb	r2, [r4, #0]
 8022058:	9204      	str	r2, [sp, #16]
 802205a:	781a      	ldrb	r2, [r3, #0]
 802205c:	9205      	str	r2, [sp, #20]
 802205e:	d801      	bhi.n	8022064 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 8022060:	280f      	cmp	r0, #15
 8022062:	d914      	bls.n	802208e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 8022064:	4b3f      	ldr	r3, [pc, #252]	; (8022164 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8022066:	f240 210d 	movw	r1, #525	; 0x20d
 802206a:	4a3f      	ldr	r2, [pc, #252]	; (8022168 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 802206c:	483f      	ldr	r0, [pc, #252]	; (802216c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 802206e:	f006 fb13 	bl	8028698 <__assert_func>
 8022072:	ad07      	add	r5, sp, #28
 8022074:	e7c6      	b.n	8022004 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 8022076:	a907      	add	r1, sp, #28
 8022078:	460d      	mov	r5, r1
 802207a:	e7ce      	b.n	802201a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 802207c:	a907      	add	r1, sp, #28
 802207e:	e7cc      	b.n	802201a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8022080:	ac07      	add	r4, sp, #28
 8022082:	e7d8      	b.n	8022036 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 8022084:	ab07      	add	r3, sp, #28
 8022086:	461c      	mov	r4, r3
 8022088:	e7e0      	b.n	802204c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 802208a:	ab07      	add	r3, sp, #28
 802208c:	e7de      	b.n	802204c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 802208e:	b2ba      	uxth	r2, r7
 8022090:	f891 8002 	ldrb.w	r8, [r1, #2]
 8022094:	b280      	uxth	r0, r0
 8022096:	7849      	ldrb	r1, [r1, #1]
 8022098:	78ae      	ldrb	r6, [r5, #2]
 802209a:	fa1f f78c 	uxth.w	r7, ip
 802209e:	fb02 fa00 	mul.w	sl, r2, r0
 80220a2:	0112      	lsls	r2, r2, #4
 80220a4:	786d      	ldrb	r5, [r5, #1]
 80220a6:	ea6f 0c0c 	mvn.w	ip, ip
 80220aa:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80220ae:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80220b2:	eba2 020a 	sub.w	r2, r2, sl
 80220b6:	fa5f fc8c 	uxtb.w	ip, ip
 80220ba:	b280      	uxth	r0, r0
 80220bc:	fb19 f90c 	smulbb	r9, r9, ip
 80220c0:	b292      	uxth	r2, r2
 80220c2:	ebae 0e00 	sub.w	lr, lr, r0
 80220c6:	4351      	muls	r1, r2
 80220c8:	fa1f fe8e 	uxth.w	lr, lr
 80220cc:	fb02 f808 	mul.w	r8, r2, r8
 80220d0:	fb0e 1505 	mla	r5, lr, r5, r1
 80220d4:	7861      	ldrb	r1, [r4, #1]
 80220d6:	fb0e 8806 	mla	r8, lr, r6, r8
 80220da:	78a6      	ldrb	r6, [r4, #2]
 80220dc:	fb00 5501 	mla	r5, r0, r1, r5
 80220e0:	7859      	ldrb	r1, [r3, #1]
 80220e2:	fb00 8806 	mla	r8, r0, r6, r8
 80220e6:	789e      	ldrb	r6, [r3, #2]
 80220e8:	9b00      	ldr	r3, [sp, #0]
 80220ea:	fb0a 5101 	mla	r1, sl, r1, r5
 80220ee:	fb0a 8606 	mla	r6, sl, r6, r8
 80220f2:	fb13 f50c 	smulbb	r5, r3, ip
 80220f6:	9b03      	ldr	r3, [sp, #12]
 80220f8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80220fc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022100:	435a      	muls	r2, r3
 8022102:	9b02      	ldr	r3, [sp, #8]
 8022104:	fb06 9607 	mla	r6, r6, r7, r9
 8022108:	fb0e 2203 	mla	r2, lr, r3, r2
 802210c:	9b04      	ldr	r3, [sp, #16]
 802210e:	fb01 5107 	mla	r1, r1, r7, r5
 8022112:	b2b6      	uxth	r6, r6
 8022114:	fb00 2003 	mla	r0, r0, r3, r2
 8022118:	9b05      	ldr	r3, [sp, #20]
 802211a:	b289      	uxth	r1, r1
 802211c:	f106 0901 	add.w	r9, r6, #1
 8022120:	fb0a 0a03 	mla	sl, sl, r3, r0
 8022124:	9b01      	ldr	r3, [sp, #4]
 8022126:	1c4d      	adds	r5, r1, #1
 8022128:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 802212c:	fb13 fc0c 	smulbb	ip, r3, ip
 8022130:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8022134:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8022138:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 802213c:	fb0a c707 	mla	r7, sl, r7, ip
 8022140:	0949      	lsrs	r1, r1, #5
 8022142:	b2bf      	uxth	r7, r7
 8022144:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022148:	f107 0c01 	add.w	ip, r7, #1
 802214c:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8022150:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022154:	433e      	orrs	r6, r7
 8022156:	430e      	orrs	r6, r1
 8022158:	f8ab 6000 	strh.w	r6, [fp]
 802215c:	b009      	add	sp, #36	; 0x24
 802215e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022162:	bf00      	nop
 8022164:	0802ceb2 	.word	0x0802ceb2
 8022168:	0802d475 	.word	0x0802d475
 802216c:	0802cf9b 	.word	0x0802cf9b

08022170 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022174:	ed2d 8b08 	vpush	{d8-d11}
 8022178:	b095      	sub	sp, #84	; 0x54
 802217a:	eeb0 aa40 	vmov.f32	s20, s0
 802217e:	eef0 9a60 	vmov.f32	s19, s1
 8022182:	9212      	str	r2, [sp, #72]	; 0x48
 8022184:	eeb0 9a41 	vmov.f32	s18, s2
 8022188:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802218a:	eeb0 8a62 	vmov.f32	s16, s5
 802218e:	9309      	str	r3, [sp, #36]	; 0x24
 8022190:	eef0 8a43 	vmov.f32	s17, s6
 8022194:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8022198:	eef0 ba44 	vmov.f32	s23, s8
 802219c:	9013      	str	r0, [sp, #76]	; 0x4c
 802219e:	eeb0 ba64 	vmov.f32	s22, s9
 80221a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80221a4:	eef0 aa45 	vmov.f32	s21, s10
 80221a8:	6850      	ldr	r0, [r2, #4]
 80221aa:	910e      	str	r1, [sp, #56]	; 0x38
 80221ac:	6812      	ldr	r2, [r2, #0]
 80221ae:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80221b2:	fb00 1303 	mla	r3, r0, r3, r1
 80221b6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80221ba:	930a      	str	r3, [sp, #40]	; 0x28
 80221bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80221be:	681b      	ldr	r3, [r3, #0]
 80221c0:	930d      	str	r3, [sp, #52]	; 0x34
 80221c2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80221c4:	685c      	ldr	r4, [r3, #4]
 80221c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80221c8:	3404      	adds	r4, #4
 80221ca:	43db      	mvns	r3, r3
 80221cc:	b2db      	uxtb	r3, r3
 80221ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80221d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80221d2:	2b00      	cmp	r3, #0
 80221d4:	dc03      	bgt.n	80221de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80221d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80221d8:	2b00      	cmp	r3, #0
 80221da:	f340 8258 	ble.w	802268e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 80221de:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80221e0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80221e4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80221e8:	1e48      	subs	r0, r1, #1
 80221ea:	1e55      	subs	r5, r2, #1
 80221ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221ee:	2b00      	cmp	r3, #0
 80221f0:	f340 80fc 	ble.w	80223ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80221f4:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80221f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80221f8:	1436      	asrs	r6, r6, #16
 80221fa:	ea4f 4323 	mov.w	r3, r3, asr #16
 80221fe:	d406      	bmi.n	802220e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022200:	4286      	cmp	r6, r0
 8022202:	da04      	bge.n	802220e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022204:	2b00      	cmp	r3, #0
 8022206:	db02      	blt.n	802220e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022208:	42ab      	cmp	r3, r5
 802220a:	f2c0 80f0 	blt.w	80223ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802220e:	3601      	adds	r6, #1
 8022210:	f100 80dd 	bmi.w	80223ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022214:	42b1      	cmp	r1, r6
 8022216:	f2c0 80da 	blt.w	80223ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 802221a:	3301      	adds	r3, #1
 802221c:	f100 80d7 	bmi.w	80223ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022220:	429a      	cmp	r2, r3
 8022222:	f2c0 80d4 	blt.w	80223ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022228:	9311      	str	r3, [sp, #68]	; 0x44
 802222a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802222c:	930c      	str	r3, [sp, #48]	; 0x30
 802222e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022230:	2b00      	cmp	r3, #0
 8022232:	f340 80fd 	ble.w	8022430 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 8022236:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8022238:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802223a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802223c:	68c6      	ldr	r6, [r0, #12]
 802223e:	141d      	asrs	r5, r3, #16
 8022240:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8022242:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8022246:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022248:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802224a:	1400      	asrs	r0, r0, #16
 802224c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022250:	6892      	ldr	r2, [r2, #8]
 8022252:	f100 8141 	bmi.w	80224d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022256:	1e57      	subs	r7, r2, #1
 8022258:	42b8      	cmp	r0, r7
 802225a:	f280 813d 	bge.w	80224d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802225e:	2d00      	cmp	r5, #0
 8022260:	f2c0 813a 	blt.w	80224d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022264:	1e77      	subs	r7, r6, #1
 8022266:	42bd      	cmp	r5, r7
 8022268:	f280 8136 	bge.w	80224d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802226c:	b212      	sxth	r2, r2
 802226e:	fb05 0002 	mla	r0, r5, r2, r0
 8022272:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022274:	f815 a000 	ldrb.w	sl, [r5, r0]
 8022278:	182e      	adds	r6, r5, r0
 802227a:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 802227e:	eb04 050a 	add.w	r5, r4, sl
 8022282:	2b00      	cmp	r3, #0
 8022284:	f000 811a 	beq.w	80224bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8022288:	f896 c001 	ldrb.w	ip, [r6, #1]
 802228c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022290:	44a4      	add	ip, r4
 8022292:	2900      	cmp	r1, #0
 8022294:	f000 811a 	beq.w	80224cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8022298:	18b0      	adds	r0, r6, r2
 802229a:	5cb2      	ldrb	r2, [r6, r2]
 802229c:	7840      	ldrb	r0, [r0, #1]
 802229e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80222a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80222a6:	4422      	add	r2, r4
 80222a8:	4420      	add	r0, r4
 80222aa:	b29b      	uxth	r3, r3
 80222ac:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80222b0:	b289      	uxth	r1, r1
 80222b2:	f895 b002 	ldrb.w	fp, [r5, #2]
 80222b6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80222b8:	fb03 f901 	mul.w	r9, r3, r1
 80222bc:	011b      	lsls	r3, r3, #4
 80222be:	f8b6 e000 	ldrh.w	lr, [r6]
 80222c2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80222c6:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80222ca:	eba3 0309 	sub.w	r3, r3, r9
 80222ce:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80222d2:	b289      	uxth	r1, r1
 80222d4:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80222d8:	b29b      	uxth	r3, r3
 80222da:	eba8 0801 	sub.w	r8, r8, r1
 80222de:	435f      	muls	r7, r3
 80222e0:	fa1f f888 	uxth.w	r8, r8
 80222e4:	9310      	str	r3, [sp, #64]	; 0x40
 80222e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80222e8:	fb08 770b 	mla	r7, r8, fp, r7
 80222ec:	f892 b002 	ldrb.w	fp, [r2, #2]
 80222f0:	fb01 770b 	mla	r7, r1, fp, r7
 80222f4:	f890 b002 	ldrb.w	fp, [r0, #2]
 80222f8:	fb09 770b 	mla	r7, r9, fp, r7
 80222fc:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8022300:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8022304:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8022308:	fb1b fb03 	smulbb	fp, fp, r3
 802230c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802230e:	fb07 b706 	mla	r7, r7, r6, fp
 8022312:	f895 b001 	ldrb.w	fp, [r5, #1]
 8022316:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802231a:	f89c c000 	ldrb.w	ip, [ip]
 802231e:	b2bf      	uxth	r7, r7
 8022320:	435d      	muls	r5, r3
 8022322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022324:	fb08 550b 	mla	r5, r8, fp, r5
 8022328:	f892 b001 	ldrb.w	fp, [r2, #1]
 802232c:	fb01 550b 	mla	r5, r1, fp, r5
 8022330:	f890 b001 	ldrb.w	fp, [r0, #1]
 8022334:	fb09 550b 	mla	r5, r9, fp, r5
 8022338:	ea4f 0bee 	mov.w	fp, lr, asr #3
 802233c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022340:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8022344:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8022348:	fa5f fe8e 	uxtb.w	lr, lr
 802234c:	fb1b fb03 	smulbb	fp, fp, r3
 8022350:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022352:	fb03 f30c 	mul.w	r3, r3, ip
 8022356:	f892 c000 	ldrb.w	ip, [r2]
 802235a:	fb05 b506 	mla	r5, r5, r6, fp
 802235e:	1c7a      	adds	r2, r7, #1
 8022360:	fb08 330a 	mla	r3, r8, sl, r3
 8022364:	b2ad      	uxth	r5, r5
 8022366:	fb01 330c 	mla	r3, r1, ip, r3
 802236a:	f890 c000 	ldrb.w	ip, [r0]
 802236e:	f105 0b01 	add.w	fp, r5, #1
 8022372:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8022376:	fb09 3c0c 	mla	ip, r9, ip, r3
 802237a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802237c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8022380:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8022384:	fb1e fe03 	smulbb	lr, lr, r3
 8022388:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802238c:	096d      	lsrs	r5, r5, #5
 802238e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022390:	fb0c ee06 	mla	lr, ip, r6, lr
 8022394:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022398:	fa1f fe8e 	uxth.w	lr, lr
 802239c:	f10e 0c01 	add.w	ip, lr, #1
 80223a0:	eb0c 2e1e 	add.w	lr, ip, lr, lsr #8
 80223a4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80223a8:	ea47 070e 	orr.w	r7, r7, lr
 80223ac:	433d      	orrs	r5, r7
 80223ae:	801d      	strh	r5, [r3, #0]
 80223b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80223b2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80223b4:	3302      	adds	r3, #2
 80223b6:	930c      	str	r3, [sp, #48]	; 0x30
 80223b8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80223ba:	4413      	add	r3, r2
 80223bc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80223be:	9327      	str	r3, [sp, #156]	; 0x9c
 80223c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80223c2:	4413      	add	r3, r2
 80223c4:	9328      	str	r3, [sp, #160]	; 0xa0
 80223c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80223c8:	3b01      	subs	r3, #1
 80223ca:	9311      	str	r3, [sp, #68]	; 0x44
 80223cc:	e72f      	b.n	802222e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80223ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80223d0:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80223d2:	4433      	add	r3, r6
 80223d4:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80223d6:	9327      	str	r3, [sp, #156]	; 0x9c
 80223d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80223da:	4433      	add	r3, r6
 80223dc:	9328      	str	r3, [sp, #160]	; 0xa0
 80223de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80223e0:	3b01      	subs	r3, #1
 80223e2:	9309      	str	r3, [sp, #36]	; 0x24
 80223e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80223e6:	3302      	adds	r3, #2
 80223e8:	930a      	str	r3, [sp, #40]	; 0x28
 80223ea:	e6ff      	b.n	80221ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80223ec:	d027      	beq.n	802243e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 80223ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80223f0:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80223f2:	3b01      	subs	r3, #1
 80223f4:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80223f6:	fb00 5003 	mla	r0, r0, r3, r5
 80223fa:	1400      	asrs	r0, r0, #16
 80223fc:	f53f af13 	bmi.w	8022226 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022400:	3901      	subs	r1, #1
 8022402:	4288      	cmp	r0, r1
 8022404:	f6bf af0f 	bge.w	8022226 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022408:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802240a:	9828      	ldr	r0, [sp, #160]	; 0xa0
 802240c:	fb01 0303 	mla	r3, r1, r3, r0
 8022410:	141b      	asrs	r3, r3, #16
 8022412:	f53f af08 	bmi.w	8022226 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8022416:	3a01      	subs	r2, #1
 8022418:	4293      	cmp	r3, r2
 802241a:	f6bf af04 	bge.w	8022226 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802241e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022420:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8022424:	9311      	str	r3, [sp, #68]	; 0x44
 8022426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022428:	930c      	str	r3, [sp, #48]	; 0x30
 802242a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802242c:	2b00      	cmp	r3, #0
 802242e:	dc70      	bgt.n	8022512 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8022430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022432:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022434:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022438:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802243c:	930a      	str	r3, [sp, #40]	; 0x28
 802243e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022440:	2b00      	cmp	r3, #0
 8022442:	f340 8124 	ble.w	802268e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8022446:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802244a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802244c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022450:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022454:	eef0 6a48 	vmov.f32	s13, s16
 8022458:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802245c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022460:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022464:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8022468:	eef0 6a68 	vmov.f32	s13, s17
 802246c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022470:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8022474:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022478:	ee69 7a27 	vmul.f32	s15, s18, s15
 802247c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022480:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022484:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022488:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802248c:	ee18 2a10 	vmov	r2, s16
 8022490:	eeb0 8a47 	vmov.f32	s16, s14
 8022494:	fb92 f3f3 	sdiv	r3, r2, r3
 8022498:	ee18 2a90 	vmov	r2, s17
 802249c:	9329      	str	r3, [sp, #164]	; 0xa4
 802249e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80224a0:	eef0 8a67 	vmov.f32	s17, s15
 80224a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80224a8:	932a      	str	r3, [sp, #168]	; 0xa8
 80224aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80224ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80224ae:	3b01      	subs	r3, #1
 80224b0:	930e      	str	r3, [sp, #56]	; 0x38
 80224b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80224b4:	bf08      	it	eq
 80224b6:	4613      	moveq	r3, r2
 80224b8:	9309      	str	r3, [sp, #36]	; 0x24
 80224ba:	e689      	b.n	80221d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80224bc:	b149      	cbz	r1, 80224d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80224be:	5cb2      	ldrb	r2, [r6, r2]
 80224c0:	4628      	mov	r0, r5
 80224c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80224c6:	4422      	add	r2, r4
 80224c8:	46ac      	mov	ip, r5
 80224ca:	e6ee      	b.n	80222aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80224cc:	4628      	mov	r0, r5
 80224ce:	462a      	mov	r2, r5
 80224d0:	e6eb      	b.n	80222aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80224d2:	4628      	mov	r0, r5
 80224d4:	462a      	mov	r2, r5
 80224d6:	e7f7      	b.n	80224c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80224d8:	1c47      	adds	r7, r0, #1
 80224da:	f53f af69 	bmi.w	80223b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80224de:	42ba      	cmp	r2, r7
 80224e0:	f6ff af66 	blt.w	80223b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80224e4:	1c6f      	adds	r7, r5, #1
 80224e6:	f53f af63 	bmi.w	80223b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80224ea:	42be      	cmp	r6, r7
 80224ec:	f6ff af60 	blt.w	80223b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80224f0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80224f2:	b236      	sxth	r6, r6
 80224f4:	b212      	sxth	r2, r2
 80224f6:	9002      	str	r0, [sp, #8]
 80224f8:	9601      	str	r6, [sp, #4]
 80224fa:	9200      	str	r2, [sp, #0]
 80224fc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80224fe:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8022502:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8022506:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 802250a:	4623      	mov	r3, r4
 802250c:	f7ff fd44 	bl	8021f98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8022510:	e74e      	b.n	80223b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022512:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8022514:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8022516:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802251a:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 802251c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802251e:	1400      	asrs	r0, r0, #16
 8022520:	142d      	asrs	r5, r5, #16
 8022522:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022524:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022528:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802252c:	fb02 5000 	mla	r0, r2, r0, r5
 8022530:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022532:	f815 9000 	ldrb.w	r9, [r5, r0]
 8022536:	182e      	adds	r6, r5, r0
 8022538:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 802253c:	eb04 0509 	add.w	r5, r4, r9
 8022540:	2b00      	cmp	r3, #0
 8022542:	f000 8096 	beq.w	8022672 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x502>
 8022546:	7877      	ldrb	r7, [r6, #1]
 8022548:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802254c:	4427      	add	r7, r4
 802254e:	2900      	cmp	r1, #0
 8022550:	f000 8097 	beq.w	8022682 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8022554:	18b0      	adds	r0, r6, r2
 8022556:	5cb2      	ldrb	r2, [r6, r2]
 8022558:	7840      	ldrb	r0, [r0, #1]
 802255a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802255e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022562:	4422      	add	r2, r4
 8022564:	4420      	add	r0, r4
 8022566:	b29b      	uxth	r3, r3
 8022568:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802256a:	b289      	uxth	r1, r1
 802256c:	f895 b002 	ldrb.w	fp, [r5, #2]
 8022570:	f8b6 c000 	ldrh.w	ip, [r6]
 8022574:	fb03 f801 	mul.w	r8, r3, r1
 8022578:	011b      	lsls	r3, r3, #4
 802257a:	78be      	ldrb	r6, [r7, #2]
 802257c:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8022580:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022584:	eba3 0308 	sub.w	r3, r3, r8
 8022588:	f814 9009 	ldrb.w	r9, [r4, r9]
 802258c:	b289      	uxth	r1, r1
 802258e:	b29b      	uxth	r3, r3
 8022590:	ebae 0e01 	sub.w	lr, lr, r1
 8022594:	435e      	muls	r6, r3
 8022596:	fa1f fe8e 	uxth.w	lr, lr
 802259a:	9310      	str	r3, [sp, #64]	; 0x40
 802259c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802259e:	fb0e 660b 	mla	r6, lr, fp, r6
 80225a2:	f892 b002 	ldrb.w	fp, [r2, #2]
 80225a6:	fb01 660b 	mla	r6, r1, fp, r6
 80225aa:	f890 b002 	ldrb.w	fp, [r0, #2]
 80225ae:	fb08 660b 	mla	r6, r8, fp, r6
 80225b2:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 80225b6:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80225ba:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80225be:	fb1b fb03 	smulbb	fp, fp, r3
 80225c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80225c4:	fb06 b60a 	mla	r6, r6, sl, fp
 80225c8:	f895 b001 	ldrb.w	fp, [r5, #1]
 80225cc:	787d      	ldrb	r5, [r7, #1]
 80225ce:	783f      	ldrb	r7, [r7, #0]
 80225d0:	b2b6      	uxth	r6, r6
 80225d2:	435d      	muls	r5, r3
 80225d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80225d6:	fb0e 550b 	mla	r5, lr, fp, r5
 80225da:	f892 b001 	ldrb.w	fp, [r2, #1]
 80225de:	fb01 550b 	mla	r5, r1, fp, r5
 80225e2:	f890 b001 	ldrb.w	fp, [r0, #1]
 80225e6:	fb08 550b 	mla	r5, r8, fp, r5
 80225ea:	ea4f 0bec 	mov.w	fp, ip, asr #3
 80225ee:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80225f2:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80225f6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80225fa:	fa5f fc8c 	uxtb.w	ip, ip
 80225fe:	fb1b fb03 	smulbb	fp, fp, r3
 8022602:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022604:	437b      	muls	r3, r7
 8022606:	7817      	ldrb	r7, [r2, #0]
 8022608:	fb05 b50a 	mla	r5, r5, sl, fp
 802260c:	fb0e 3309 	mla	r3, lr, r9, r3
 8022610:	b2ad      	uxth	r5, r5
 8022612:	fb01 3307 	mla	r3, r1, r7, r3
 8022616:	7807      	ldrb	r7, [r0, #0]
 8022618:	f105 0b01 	add.w	fp, r5, #1
 802261c:	fb08 3707 	mla	r7, r8, r7, r3
 8022620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022622:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8022626:	fb1c fc03 	smulbb	ip, ip, r3
 802262a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802262e:	1c73      	adds	r3, r6, #1
 8022630:	096d      	lsrs	r5, r5, #5
 8022632:	fb07 c70a 	mla	r7, r7, sl, ip
 8022636:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 802263a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802263e:	b2bf      	uxth	r7, r7
 8022640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022642:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8022646:	1c7a      	adds	r2, r7, #1
 8022648:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 802264c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022650:	4316      	orrs	r6, r2
 8022652:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022654:	432e      	orrs	r6, r5
 8022656:	f823 6b02 	strh.w	r6, [r3], #2
 802265a:	930c      	str	r3, [sp, #48]	; 0x30
 802265c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802265e:	4413      	add	r3, r2
 8022660:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022662:	9327      	str	r3, [sp, #156]	; 0x9c
 8022664:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022666:	4413      	add	r3, r2
 8022668:	9328      	str	r3, [sp, #160]	; 0xa0
 802266a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802266c:	3b01      	subs	r3, #1
 802266e:	9311      	str	r3, [sp, #68]	; 0x44
 8022670:	e6db      	b.n	802242a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8022672:	b149      	cbz	r1, 8022688 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8022674:	5cb2      	ldrb	r2, [r6, r2]
 8022676:	4628      	mov	r0, r5
 8022678:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802267c:	4422      	add	r2, r4
 802267e:	462f      	mov	r7, r5
 8022680:	e771      	b.n	8022566 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8022682:	4628      	mov	r0, r5
 8022684:	462a      	mov	r2, r5
 8022686:	e76e      	b.n	8022566 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8022688:	4628      	mov	r0, r5
 802268a:	462a      	mov	r2, r5
 802268c:	e7f7      	b.n	802267e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50e>
 802268e:	b015      	add	sp, #84	; 0x54
 8022690:	ecbd 8b08 	vpop	{d8-d11}
 8022694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022698 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8022698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802269c:	880e      	ldrh	r6, [r1, #0]
 802269e:	b085      	sub	sp, #20
 80226a0:	4691      	mov	r9, r2
 80226a2:	0230      	lsls	r0, r6, #8
 80226a4:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80226a8:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80226ac:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 80226b0:	0170      	lsls	r0, r6, #5
 80226b2:	00f6      	lsls	r6, r6, #3
 80226b4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80226b8:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 80226bc:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80226c0:	b2f6      	uxtb	r6, r6
 80226c2:	ea4b 0000 	orr.w	r0, fp, r0
 80226c6:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80226ca:	4306      	orrs	r6, r0
 80226cc:	fb05 7a0c 	mla	sl, r5, ip, r7
 80226d0:	2d00      	cmp	r5, #0
 80226d2:	9603      	str	r6, [sp, #12]
 80226d4:	eb09 0e0a 	add.w	lr, r9, sl
 80226d8:	db42      	blt.n	8022760 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 80226da:	45a8      	cmp	r8, r5
 80226dc:	dd40      	ble.n	8022760 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 80226de:	2f00      	cmp	r7, #0
 80226e0:	db3c      	blt.n	802275c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 80226e2:	45bc      	cmp	ip, r7
 80226e4:	dd3a      	ble.n	802275c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 80226e6:	f819 600a 	ldrb.w	r6, [r9, sl]
 80226ea:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80226ee:	441e      	add	r6, r3
 80226f0:	1c78      	adds	r0, r7, #1
 80226f2:	d438      	bmi.n	8022766 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 80226f4:	4584      	cmp	ip, r0
 80226f6:	dd36      	ble.n	8022766 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 80226f8:	b3aa      	cbz	r2, 8022766 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 80226fa:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80226fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022702:	4418      	add	r0, r3
 8022704:	3501      	adds	r5, #1
 8022706:	d432      	bmi.n	802276e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8022708:	45a8      	cmp	r8, r5
 802270a:	dd30      	ble.n	802276e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 802270c:	b37c      	cbz	r4, 802276e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 802270e:	2f00      	cmp	r7, #0
 8022710:	db2b      	blt.n	802276a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 8022712:	45bc      	cmp	ip, r7
 8022714:	dd29      	ble.n	802276a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 8022716:	f81e 500c 	ldrb.w	r5, [lr, ip]
 802271a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802271e:	441d      	add	r5, r3
 8022720:	3701      	adds	r7, #1
 8022722:	d427      	bmi.n	8022774 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8022724:	45bc      	cmp	ip, r7
 8022726:	dd25      	ble.n	8022774 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8022728:	b322      	cbz	r2, 8022774 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 802272a:	44f4      	add	ip, lr
 802272c:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8022730:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022734:	443b      	add	r3, r7
 8022736:	781f      	ldrb	r7, [r3, #0]
 8022738:	2a0f      	cmp	r2, #15
 802273a:	f896 a000 	ldrb.w	sl, [r6]
 802273e:	f890 b000 	ldrb.w	fp, [r0]
 8022742:	f895 9000 	ldrb.w	r9, [r5]
 8022746:	9700      	str	r7, [sp, #0]
 8022748:	d801      	bhi.n	802274e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
 802274a:	2c0f      	cmp	r4, #15
 802274c:	d914      	bls.n	8022778 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
 802274e:	4b2c      	ldr	r3, [pc, #176]	; (8022800 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
 8022750:	f240 210d 	movw	r1, #525	; 0x20d
 8022754:	4a2b      	ldr	r2, [pc, #172]	; (8022804 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 8022756:	482c      	ldr	r0, [pc, #176]	; (8022808 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8022758:	f005 ff9e 	bl	8028698 <__assert_func>
 802275c:	ae03      	add	r6, sp, #12
 802275e:	e7c7      	b.n	80226f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
 8022760:	a803      	add	r0, sp, #12
 8022762:	4606      	mov	r6, r0
 8022764:	e7ce      	b.n	8022704 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 8022766:	a803      	add	r0, sp, #12
 8022768:	e7cc      	b.n	8022704 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 802276a:	ad03      	add	r5, sp, #12
 802276c:	e7d8      	b.n	8022720 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
 802276e:	ab03      	add	r3, sp, #12
 8022770:	461d      	mov	r5, r3
 8022772:	e7e0      	b.n	8022736 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 8022774:	ab03      	add	r3, sp, #12
 8022776:	e7de      	b.n	8022736 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 8022778:	b292      	uxth	r2, r2
 802277a:	f890 e002 	ldrb.w	lr, [r0, #2]
 802277e:	b2a4      	uxth	r4, r4
 8022780:	78b7      	ldrb	r7, [r6, #2]
 8022782:	7840      	ldrb	r0, [r0, #1]
 8022784:	fb02 f804 	mul.w	r8, r2, r4
 8022788:	0112      	lsls	r2, r2, #4
 802278a:	7876      	ldrb	r6, [r6, #1]
 802278c:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8022790:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8022794:	eba2 0208 	sub.w	r2, r2, r8
 8022798:	b2a4      	uxth	r4, r4
 802279a:	b292      	uxth	r2, r2
 802279c:	ebac 0c04 	sub.w	ip, ip, r4
 80227a0:	fb02 fe0e 	mul.w	lr, r2, lr
 80227a4:	fa1f fc8c 	uxth.w	ip, ip
 80227a8:	fb0c ee07 	mla	lr, ip, r7, lr
 80227ac:	78af      	ldrb	r7, [r5, #2]
 80227ae:	fb04 ee07 	mla	lr, r4, r7, lr
 80227b2:	789f      	ldrb	r7, [r3, #2]
 80227b4:	785b      	ldrb	r3, [r3, #1]
 80227b6:	fb08 e707 	mla	r7, r8, r7, lr
 80227ba:	fb02 fe0b 	mul.w	lr, r2, fp
 80227be:	4342      	muls	r2, r0
 80227c0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80227c4:	7868      	ldrb	r0, [r5, #1]
 80227c6:	fb0c ee0a 	mla	lr, ip, sl, lr
 80227ca:	fb0c 2206 	mla	r2, ip, r6, r2
 80227ce:	9701      	str	r7, [sp, #4]
 80227d0:	fb04 ee09 	mla	lr, r4, r9, lr
 80227d4:	9f00      	ldr	r7, [sp, #0]
 80227d6:	fb04 2400 	mla	r4, r4, r0, r2
 80227da:	fb08 ee07 	mla	lr, r8, r7, lr
 80227de:	9f01      	ldr	r7, [sp, #4]
 80227e0:	fb08 4803 	mla	r8, r8, r3, r4
 80227e4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80227e8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80227ec:	ea47 070e 	orr.w	r7, r7, lr
 80227f0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80227f4:	ea47 0708 	orr.w	r7, r7, r8
 80227f8:	800f      	strh	r7, [r1, #0]
 80227fa:	b005      	add	sp, #20
 80227fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022800:	0802ceb2 	.word	0x0802ceb2
 8022804:	0802d475 	.word	0x0802d475
 8022808:	0802cf9b 	.word	0x0802cf9b

0802280c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802280c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022810:	ed2d 8b08 	vpush	{d8-d11}
 8022814:	b08f      	sub	sp, #60	; 0x3c
 8022816:	eeb0 aa40 	vmov.f32	s20, s0
 802281a:	eef0 9a60 	vmov.f32	s19, s1
 802281e:	920c      	str	r2, [sp, #48]	; 0x30
 8022820:	eeb0 9a41 	vmov.f32	s18, s2
 8022824:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022826:	eeb0 8a62 	vmov.f32	s16, s5
 802282a:	900d      	str	r0, [sp, #52]	; 0x34
 802282c:	eef0 8a43 	vmov.f32	s17, s6
 8022830:	6850      	ldr	r0, [r2, #4]
 8022832:	eef0 ba44 	vmov.f32	s23, s8
 8022836:	910a      	str	r1, [sp, #40]	; 0x28
 8022838:	eeb0 ba64 	vmov.f32	s22, s9
 802283c:	9306      	str	r3, [sp, #24]
 802283e:	eef0 aa45 	vmov.f32	s21, s10
 8022842:	6812      	ldr	r2, [r2, #0]
 8022844:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8022848:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 802284c:	fb00 1303 	mla	r3, r0, r3, r1
 8022850:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022854:	9307      	str	r3, [sp, #28]
 8022856:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022858:	681b      	ldr	r3, [r3, #0]
 802285a:	9308      	str	r3, [sp, #32]
 802285c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802285e:	685c      	ldr	r4, [r3, #4]
 8022860:	3404      	adds	r4, #4
 8022862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022864:	2b00      	cmp	r3, #0
 8022866:	dc03      	bgt.n	8022870 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8022868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802286a:	2b00      	cmp	r3, #0
 802286c:	f340 81d5 	ble.w	8022c1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8022870:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022872:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022876:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802287a:	1e48      	subs	r0, r1, #1
 802287c:	1e56      	subs	r6, r2, #1
 802287e:	9b06      	ldr	r3, [sp, #24]
 8022880:	2b00      	cmp	r3, #0
 8022882:	f340 80b6 	ble.w	80229f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8022886:	ea5f 472b 	movs.w	r7, fp, asr #16
 802288a:	ea4f 4325 	mov.w	r3, r5, asr #16
 802288e:	d406      	bmi.n	802289e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022890:	4287      	cmp	r7, r0
 8022892:	da04      	bge.n	802289e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022894:	2b00      	cmp	r3, #0
 8022896:	db02      	blt.n	802289e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022898:	42b3      	cmp	r3, r6
 802289a:	f2c0 80ab 	blt.w	80229f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802289e:	3701      	adds	r7, #1
 80228a0:	f100 809c 	bmi.w	80229dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80228a4:	42b9      	cmp	r1, r7
 80228a6:	f2c0 8099 	blt.w	80229dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80228aa:	3301      	adds	r3, #1
 80228ac:	f100 8096 	bmi.w	80229dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80228b0:	429a      	cmp	r2, r3
 80228b2:	f2c0 8093 	blt.w	80229dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80228b6:	9b06      	ldr	r3, [sp, #24]
 80228b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80228ba:	9b07      	ldr	r3, [sp, #28]
 80228bc:	9309      	str	r3, [sp, #36]	; 0x24
 80228be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80228c0:	2b00      	cmp	r3, #0
 80228c2:	f340 80b4 	ble.w	8022a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80228c6:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80228c8:	142e      	asrs	r6, r5, #16
 80228ca:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80228cc:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80228d0:	68c7      	ldr	r7, [r0, #12]
 80228d2:	ea5f 402b 	movs.w	r0, fp, asr #16
 80228d6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80228da:	6892      	ldr	r2, [r2, #8]
 80228dc:	f100 80fb 	bmi.w	8022ad6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80228e0:	f102 3cff 	add.w	ip, r2, #4294967295
 80228e4:	4560      	cmp	r0, ip
 80228e6:	f280 80f6 	bge.w	8022ad6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80228ea:	2e00      	cmp	r6, #0
 80228ec:	f2c0 80f3 	blt.w	8022ad6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80228f0:	f107 3cff 	add.w	ip, r7, #4294967295
 80228f4:	4566      	cmp	r6, ip
 80228f6:	f280 80ee 	bge.w	8022ad6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80228fa:	b212      	sxth	r2, r2
 80228fc:	fb06 0002 	mla	r0, r6, r2, r0
 8022900:	9e08      	ldr	r6, [sp, #32]
 8022902:	1837      	adds	r7, r6, r0
 8022904:	5c30      	ldrb	r0, [r6, r0]
 8022906:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 802290a:	eb04 0c08 	add.w	ip, r4, r8
 802290e:	2b00      	cmp	r3, #0
 8022910:	f000 80d3 	beq.w	8022aba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8022914:	787e      	ldrb	r6, [r7, #1]
 8022916:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802291a:	4426      	add	r6, r4
 802291c:	2900      	cmp	r1, #0
 802291e:	f000 80d4 	beq.w	8022aca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8022922:	18b8      	adds	r0, r7, r2
 8022924:	5cba      	ldrb	r2, [r7, r2]
 8022926:	7840      	ldrb	r0, [r0, #1]
 8022928:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802292c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022930:	4422      	add	r2, r4
 8022932:	4420      	add	r0, r4
 8022934:	b29b      	uxth	r3, r3
 8022936:	78b7      	ldrb	r7, [r6, #2]
 8022938:	b289      	uxth	r1, r1
 802293a:	f89c a002 	ldrb.w	sl, [ip, #2]
 802293e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8022942:	fb03 f901 	mul.w	r9, r3, r1
 8022946:	011b      	lsls	r3, r3, #4
 8022948:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802294c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022950:	eba3 0309 	sub.w	r3, r3, r9
 8022954:	b289      	uxth	r1, r1
 8022956:	b29b      	uxth	r3, r3
 8022958:	ebae 0e01 	sub.w	lr, lr, r1
 802295c:	435f      	muls	r7, r3
 802295e:	fa1f fe8e 	uxth.w	lr, lr
 8022962:	fb0e 770a 	mla	r7, lr, sl, r7
 8022966:	f892 a002 	ldrb.w	sl, [r2, #2]
 802296a:	fb01 770a 	mla	r7, r1, sl, r7
 802296e:	f890 a002 	ldrb.w	sl, [r0, #2]
 8022972:	fb09 7a0a 	mla	sl, r9, sl, r7
 8022976:	f814 7008 	ldrb.w	r7, [r4, r8]
 802297a:	f896 8000 	ldrb.w	r8, [r6]
 802297e:	7876      	ldrb	r6, [r6, #1]
 8022980:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8022984:	fb03 f808 	mul.w	r8, r3, r8
 8022988:	4373      	muls	r3, r6
 802298a:	fb0e 8807 	mla	r8, lr, r7, r8
 802298e:	7817      	ldrb	r7, [r2, #0]
 8022990:	fb0e 330c 	mla	r3, lr, ip, r3
 8022994:	fb01 8807 	mla	r8, r1, r7, r8
 8022998:	7807      	ldrb	r7, [r0, #0]
 802299a:	fb09 8707 	mla	r7, r9, r7, r8
 802299e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80229a2:	ea4a 0707 	orr.w	r7, sl, r7
 80229a6:	f892 a001 	ldrb.w	sl, [r2, #1]
 80229aa:	fb01 310a 	mla	r1, r1, sl, r3
 80229ae:	f890 a001 	ldrb.w	sl, [r0, #1]
 80229b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80229b4:	fb09 1a0a 	mla	sl, r9, sl, r1
 80229b8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80229bc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80229c0:	ea47 070a 	orr.w	r7, r7, sl
 80229c4:	801f      	strh	r7, [r3, #0]
 80229c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80229c8:	3302      	adds	r3, #2
 80229ca:	9309      	str	r3, [sp, #36]	; 0x24
 80229cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80229ce:	449b      	add	fp, r3
 80229d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80229d2:	441d      	add	r5, r3
 80229d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80229d6:	3b01      	subs	r3, #1
 80229d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80229da:	e770      	b.n	80228be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80229dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80229de:	449b      	add	fp, r3
 80229e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80229e2:	441d      	add	r5, r3
 80229e4:	9b06      	ldr	r3, [sp, #24]
 80229e6:	3b01      	subs	r3, #1
 80229e8:	9306      	str	r3, [sp, #24]
 80229ea:	9b07      	ldr	r3, [sp, #28]
 80229ec:	3302      	adds	r3, #2
 80229ee:	9307      	str	r3, [sp, #28]
 80229f0:	e745      	b.n	802287e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80229f2:	d023      	beq.n	8022a3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80229f4:	9b06      	ldr	r3, [sp, #24]
 80229f6:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80229f8:	3b01      	subs	r3, #1
 80229fa:	fb00 b003 	mla	r0, r0, r3, fp
 80229fe:	1400      	asrs	r0, r0, #16
 8022a00:	f53f af59 	bmi.w	80228b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8022a04:	3901      	subs	r1, #1
 8022a06:	4288      	cmp	r0, r1
 8022a08:	f6bf af55 	bge.w	80228b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8022a0c:	9924      	ldr	r1, [sp, #144]	; 0x90
 8022a0e:	fb01 5303 	mla	r3, r1, r3, r5
 8022a12:	141b      	asrs	r3, r3, #16
 8022a14:	f53f af4f 	bmi.w	80228b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8022a18:	3a01      	subs	r2, #1
 8022a1a:	4293      	cmp	r3, r2
 8022a1c:	f6bf af4b 	bge.w	80228b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8022a20:	9b06      	ldr	r3, [sp, #24]
 8022a22:	9309      	str	r3, [sp, #36]	; 0x24
 8022a24:	9b07      	ldr	r3, [sp, #28]
 8022a26:	930b      	str	r3, [sp, #44]	; 0x2c
 8022a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a2a:	2b00      	cmp	r3, #0
 8022a2c:	dc70      	bgt.n	8022b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8022a2e:	9b06      	ldr	r3, [sp, #24]
 8022a30:	9a07      	ldr	r2, [sp, #28]
 8022a32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022a36:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022a3a:	9307      	str	r3, [sp, #28]
 8022a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022a3e:	2b00      	cmp	r3, #0
 8022a40:	f340 80eb 	ble.w	8022c1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8022a44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022a48:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022a4a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022a4e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022a52:	eef0 6a48 	vmov.f32	s13, s16
 8022a56:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022a5a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022a5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a62:	ee16 ba90 	vmov	fp, s13
 8022a66:	eef0 6a68 	vmov.f32	s13, s17
 8022a6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022a6e:	ee16 5a90 	vmov	r5, s13
 8022a72:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022a76:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022a7a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022a7e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022a82:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022a86:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022a8a:	ee18 2a10 	vmov	r2, s16
 8022a8e:	eeb0 8a47 	vmov.f32	s16, s14
 8022a92:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a96:	ee18 2a90 	vmov	r2, s17
 8022a9a:	9323      	str	r3, [sp, #140]	; 0x8c
 8022a9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022a9e:	eef0 8a67 	vmov.f32	s17, s15
 8022aa2:	fb92 f3f3 	sdiv	r3, r2, r3
 8022aa6:	9324      	str	r3, [sp, #144]	; 0x90
 8022aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022aaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022aac:	3b01      	subs	r3, #1
 8022aae:	930a      	str	r3, [sp, #40]	; 0x28
 8022ab0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022ab2:	bf08      	it	eq
 8022ab4:	4613      	moveq	r3, r2
 8022ab6:	9306      	str	r3, [sp, #24]
 8022ab8:	e6d3      	b.n	8022862 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8022aba:	b149      	cbz	r1, 8022ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 8022abc:	5cba      	ldrb	r2, [r7, r2]
 8022abe:	4660      	mov	r0, ip
 8022ac0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022ac4:	4422      	add	r2, r4
 8022ac6:	4666      	mov	r6, ip
 8022ac8:	e734      	b.n	8022934 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8022aca:	4660      	mov	r0, ip
 8022acc:	4662      	mov	r2, ip
 8022ace:	e731      	b.n	8022934 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8022ad0:	4660      	mov	r0, ip
 8022ad2:	4662      	mov	r2, ip
 8022ad4:	e7f7      	b.n	8022ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8022ad6:	f110 0c01 	adds.w	ip, r0, #1
 8022ada:	f53f af74 	bmi.w	80229c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022ade:	4562      	cmp	r2, ip
 8022ae0:	f6ff af71 	blt.w	80229c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022ae4:	f116 0c01 	adds.w	ip, r6, #1
 8022ae8:	f53f af6d 	bmi.w	80229c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022aec:	4567      	cmp	r7, ip
 8022aee:	f6ff af6a 	blt.w	80229c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022af2:	b23f      	sxth	r7, r7
 8022af4:	b212      	sxth	r2, r2
 8022af6:	9701      	str	r7, [sp, #4]
 8022af8:	9200      	str	r2, [sp, #0]
 8022afa:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8022afe:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8022b02:	4623      	mov	r3, r4
 8022b04:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022b06:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8022b0a:	f7ff fdc5 	bl	8022698 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8022b0e:	e75a      	b.n	80229c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8022b10:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8022b12:	ea4f 462b 	mov.w	r6, fp, asr #16
 8022b16:	1428      	asrs	r0, r5, #16
 8022b18:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022b1c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022b20:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022b24:	fb02 6000 	mla	r0, r2, r0, r6
 8022b28:	9e08      	ldr	r6, [sp, #32]
 8022b2a:	f816 8000 	ldrb.w	r8, [r6, r0]
 8022b2e:	1837      	adds	r7, r6, r0
 8022b30:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022b34:	eb04 0c08 	add.w	ip, r4, r8
 8022b38:	2b00      	cmp	r3, #0
 8022b3a:	d060      	beq.n	8022bfe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8022b3c:	787e      	ldrb	r6, [r7, #1]
 8022b3e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022b42:	4426      	add	r6, r4
 8022b44:	2900      	cmp	r1, #0
 8022b46:	d062      	beq.n	8022c0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8022b48:	18b8      	adds	r0, r7, r2
 8022b4a:	5cba      	ldrb	r2, [r7, r2]
 8022b4c:	7840      	ldrb	r0, [r0, #1]
 8022b4e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022b52:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022b56:	4422      	add	r2, r4
 8022b58:	4420      	add	r0, r4
 8022b5a:	b29b      	uxth	r3, r3
 8022b5c:	78b7      	ldrb	r7, [r6, #2]
 8022b5e:	b289      	uxth	r1, r1
 8022b60:	f89c a002 	ldrb.w	sl, [ip, #2]
 8022b64:	f89c c001 	ldrb.w	ip, [ip, #1]
 8022b68:	fb03 f901 	mul.w	r9, r3, r1
 8022b6c:	011b      	lsls	r3, r3, #4
 8022b6e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022b72:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022b76:	eba3 0309 	sub.w	r3, r3, r9
 8022b7a:	b289      	uxth	r1, r1
 8022b7c:	b29b      	uxth	r3, r3
 8022b7e:	ebae 0e01 	sub.w	lr, lr, r1
 8022b82:	435f      	muls	r7, r3
 8022b84:	fa1f fe8e 	uxth.w	lr, lr
 8022b88:	fb0e 770a 	mla	r7, lr, sl, r7
 8022b8c:	f892 a002 	ldrb.w	sl, [r2, #2]
 8022b90:	fb01 770a 	mla	r7, r1, sl, r7
 8022b94:	f890 a002 	ldrb.w	sl, [r0, #2]
 8022b98:	fb09 7a0a 	mla	sl, r9, sl, r7
 8022b9c:	f814 7008 	ldrb.w	r7, [r4, r8]
 8022ba0:	f896 8000 	ldrb.w	r8, [r6]
 8022ba4:	7876      	ldrb	r6, [r6, #1]
 8022ba6:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8022baa:	fb03 f808 	mul.w	r8, r3, r8
 8022bae:	4373      	muls	r3, r6
 8022bb0:	7856      	ldrb	r6, [r2, #1]
 8022bb2:	fb0e 8807 	mla	r8, lr, r7, r8
 8022bb6:	7817      	ldrb	r7, [r2, #0]
 8022bb8:	fb0e 330c 	mla	r3, lr, ip, r3
 8022bbc:	fb01 8807 	mla	r8, r1, r7, r8
 8022bc0:	7807      	ldrb	r7, [r0, #0]
 8022bc2:	fb01 3306 	mla	r3, r1, r6, r3
 8022bc6:	fb09 8707 	mla	r7, r9, r7, r8
 8022bca:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022bce:	ea4a 0707 	orr.w	r7, sl, r7
 8022bd2:	f890 a001 	ldrb.w	sl, [r0, #1]
 8022bd6:	fb09 3a0a 	mla	sl, r9, sl, r3
 8022bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022bdc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022be0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022be4:	ea47 070a 	orr.w	r7, r7, sl
 8022be8:	f823 7b02 	strh.w	r7, [r3], #2
 8022bec:	930b      	str	r3, [sp, #44]	; 0x2c
 8022bee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022bf0:	449b      	add	fp, r3
 8022bf2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022bf4:	441d      	add	r5, r3
 8022bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022bf8:	3b01      	subs	r3, #1
 8022bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8022bfc:	e714      	b.n	8022a28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 8022bfe:	b149      	cbz	r1, 8022c14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 8022c00:	5cba      	ldrb	r2, [r7, r2]
 8022c02:	4660      	mov	r0, ip
 8022c04:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022c08:	4422      	add	r2, r4
 8022c0a:	4666      	mov	r6, ip
 8022c0c:	e7a5      	b.n	8022b5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8022c0e:	4660      	mov	r0, ip
 8022c10:	4662      	mov	r2, ip
 8022c12:	e7a2      	b.n	8022b5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8022c14:	4660      	mov	r0, ip
 8022c16:	4662      	mov	r2, ip
 8022c18:	e7f7      	b.n	8022c0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 8022c1a:	b00f      	add	sp, #60	; 0x3c
 8022c1c:	ecbd 8b08 	vpop	{d8-d11}
 8022c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022c24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8022c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c28:	880e      	ldrh	r6, [r1, #0]
 8022c2a:	b085      	sub	sp, #20
 8022c2c:	4691      	mov	r9, r2
 8022c2e:	ea4f 2e26 	mov.w	lr, r6, asr #8
 8022c32:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8022c36:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8022c3a:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 8022c3e:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 8022c42:	00f6      	lsls	r6, r6, #3
 8022c44:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8022c48:	9200      	str	r2, [sp, #0]
 8022c4a:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 8022c4e:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8022c52:	9201      	str	r2, [sp, #4]
 8022c54:	b2f2      	uxtb	r2, r6
 8022c56:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8022c5a:	9202      	str	r2, [sp, #8]
 8022c5c:	fb04 560c 	mla	r6, r4, ip, r5
 8022c60:	2c00      	cmp	r4, #0
 8022c62:	eb09 0e06 	add.w	lr, r9, r6
 8022c66:	db3e      	blt.n	8022ce6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8022c68:	45a0      	cmp	r8, r4
 8022c6a:	dd3c      	ble.n	8022ce6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8022c6c:	2d00      	cmp	r5, #0
 8022c6e:	db38      	blt.n	8022ce2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8022c70:	45ac      	cmp	ip, r5
 8022c72:	dd36      	ble.n	8022ce2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8022c74:	f819 2006 	ldrb.w	r2, [r9, r6]
 8022c78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8022c7c:	1c6e      	adds	r6, r5, #1
 8022c7e:	d435      	bmi.n	8022cec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 8022c80:	45b4      	cmp	ip, r6
 8022c82:	dd33      	ble.n	8022cec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc8>
 8022c84:	b3a0      	cbz	r0, 8022cf0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 8022c86:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8022c8a:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8022c8e:	3401      	adds	r4, #1
 8022c90:	d432      	bmi.n	8022cf8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 8022c92:	45a0      	cmp	r8, r4
 8022c94:	dd30      	ble.n	8022cf8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd4>
 8022c96:	b397      	cbz	r7, 8022cfe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 8022c98:	2d00      	cmp	r5, #0
 8022c9a:	db2b      	blt.n	8022cf4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8022c9c:	45ac      	cmp	ip, r5
 8022c9e:	dd29      	ble.n	8022cf4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8022ca0:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8022ca4:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8022ca8:	3501      	adds	r5, #1
 8022caa:	d42b      	bmi.n	8022d04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 8022cac:	45ac      	cmp	ip, r5
 8022cae:	dd29      	ble.n	8022d04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe0>
 8022cb0:	b350      	cbz	r0, 8022d08 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe4>
 8022cb2:	44f4      	add	ip, lr
 8022cb4:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8022cb8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8022cbc:	280f      	cmp	r0, #15
 8022cbe:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022cc2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022cc6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022cca:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8022cce:	d801      	bhi.n	8022cd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb0>
 8022cd0:	2f0f      	cmp	r7, #15
 8022cd2:	d91b      	bls.n	8022d0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe8>
 8022cd4:	4b85      	ldr	r3, [pc, #532]	; (8022eec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 8022cd6:	f240 210d 	movw	r1, #525	; 0x20d
 8022cda:	4a85      	ldr	r2, [pc, #532]	; (8022ef0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 8022cdc:	4885      	ldr	r0, [pc, #532]	; (8022ef4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2d0>)
 8022cde:	f005 fcdb 	bl	8028698 <__assert_func>
 8022ce2:	2200      	movs	r2, #0
 8022ce4:	e7ca      	b.n	8022c7c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x58>
 8022ce6:	2600      	movs	r6, #0
 8022ce8:	4632      	mov	r2, r6
 8022cea:	e7d0      	b.n	8022c8e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8022cec:	2600      	movs	r6, #0
 8022cee:	e7ce      	b.n	8022c8e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8022cf0:	4606      	mov	r6, r0
 8022cf2:	e7cc      	b.n	8022c8e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x6a>
 8022cf4:	2400      	movs	r4, #0
 8022cf6:	e7d7      	b.n	8022ca8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x84>
 8022cf8:	2300      	movs	r3, #0
 8022cfa:	461c      	mov	r4, r3
 8022cfc:	e7de      	b.n	8022cbc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8022cfe:	463b      	mov	r3, r7
 8022d00:	463c      	mov	r4, r7
 8022d02:	e7db      	b.n	8022cbc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8022d04:	2300      	movs	r3, #0
 8022d06:	e7d9      	b.n	8022cbc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8022d08:	4603      	mov	r3, r0
 8022d0a:	e7d7      	b.n	8022cbc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x98>
 8022d0c:	b280      	uxth	r0, r0
 8022d0e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022d12:	b2bf      	uxth	r7, r7
 8022d14:	fb00 fe07 	mul.w	lr, r0, r7
 8022d18:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8022d1c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022d20:	eba0 0c0e 	sub.w	ip, r0, lr
 8022d24:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8022d28:	b2bf      	uxth	r7, r7
 8022d2a:	fa1f fc8c 	uxth.w	ip, ip
 8022d2e:	eba5 0507 	sub.w	r5, r5, r7
 8022d32:	fb0c f00a 	mul.w	r0, ip, sl
 8022d36:	b2ad      	uxth	r5, r5
 8022d38:	fb05 000b 	mla	r0, r5, fp, r0
 8022d3c:	fb07 0009 	mla	r0, r7, r9, r0
 8022d40:	fb0e 0008 	mla	r0, lr, r8, r0
 8022d44:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022d48:	9003      	str	r0, [sp, #12]
 8022d4a:	d018      	beq.n	8022d7e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x15a>
 8022d4c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8022d50:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022d54:	fb0b f000 	mul.w	r0, fp, r0
 8022d58:	fb0b fb02 	mul.w	fp, fp, r2
 8022d5c:	0a02      	lsrs	r2, r0, #8
 8022d5e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8022d62:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022d66:	4402      	add	r2, r0
 8022d68:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8022d6c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8022d70:	0a12      	lsrs	r2, r2, #8
 8022d72:	0a00      	lsrs	r0, r0, #8
 8022d74:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022d78:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022d7c:	4302      	orrs	r2, r0
 8022d7e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022d82:	d019      	beq.n	8022db8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x194>
 8022d84:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8022d88:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022d8c:	fb0a fb0b 	mul.w	fp, sl, fp
 8022d90:	fb0a fa06 	mul.w	sl, sl, r6
 8022d94:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8022d98:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022d9c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8022da0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022da4:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8022da8:	445e      	add	r6, fp
 8022daa:	0a00      	lsrs	r0, r0, #8
 8022dac:	0a36      	lsrs	r6, r6, #8
 8022dae:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022db2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022db6:	4306      	orrs	r6, r0
 8022db8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022dbc:	d019      	beq.n	8022df2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1ce>
 8022dbe:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022dc2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022dc6:	fb09 fa0a 	mul.w	sl, r9, sl
 8022dca:	fb09 f904 	mul.w	r9, r9, r4
 8022dce:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022dd2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022dd6:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8022dda:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022dde:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8022de2:	4454      	add	r4, sl
 8022de4:	0a00      	lsrs	r0, r0, #8
 8022de6:	0a24      	lsrs	r4, r4, #8
 8022de8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022dec:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022df0:	4304      	orrs	r4, r0
 8022df2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022df6:	d019      	beq.n	8022e2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x208>
 8022df8:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8022dfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022e00:	fb08 f909 	mul.w	r9, r8, r9
 8022e04:	fb08 f803 	mul.w	r8, r8, r3
 8022e08:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8022e0c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022e10:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8022e14:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e18:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8022e1c:	444b      	add	r3, r9
 8022e1e:	0a00      	lsrs	r0, r0, #8
 8022e20:	0a1b      	lsrs	r3, r3, #8
 8022e22:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022e26:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022e2a:	4303      	orrs	r3, r0
 8022e2c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8022e30:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8022e34:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022e38:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022e3c:	fb0c f808 	mul.w	r8, ip, r8
 8022e40:	fb0c f606 	mul.w	r6, ip, r6
 8022e44:	fb05 8800 	mla	r8, r5, r0, r8
 8022e48:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8022e4c:	fb05 6202 	mla	r2, r5, r2, r6
 8022e50:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8022e54:	fb07 8800 	mla	r8, r7, r0, r8
 8022e58:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8022e5c:	b2ad      	uxth	r5, r5
 8022e5e:	fb0e 8000 	mla	r0, lr, r0, r8
 8022e62:	0a00      	lsrs	r0, r0, #8
 8022e64:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8022e68:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8022e6c:	9c00      	ldr	r4, [sp, #0]
 8022e6e:	fb07 2700 	mla	r7, r7, r0, r2
 8022e72:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8022e76:	9b03      	ldr	r3, [sp, #12]
 8022e78:	fb0e 7000 	mla	r0, lr, r0, r7
 8022e7c:	436b      	muls	r3, r5
 8022e7e:	0a00      	lsrs	r0, r0, #8
 8022e80:	1c5a      	adds	r2, r3, #1
 8022e82:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022e86:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022e8a:	ea48 0000 	orr.w	r0, r8, r0
 8022e8e:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8022e92:	0c03      	lsrs	r3, r0, #16
 8022e94:	b2d2      	uxtb	r2, r2
 8022e96:	fb14 f602 	smulbb	r6, r4, r2
 8022e9a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8022e9e:	b2c0      	uxtb	r0, r0
 8022ea0:	fb03 6305 	mla	r3, r3, r5, r6
 8022ea4:	b29e      	uxth	r6, r3
 8022ea6:	9b01      	ldr	r3, [sp, #4]
 8022ea8:	fb13 f302 	smulbb	r3, r3, r2
 8022eac:	fb04 3405 	mla	r4, r4, r5, r3
 8022eb0:	9b02      	ldr	r3, [sp, #8]
 8022eb2:	fb13 f202 	smulbb	r2, r3, r2
 8022eb6:	b2a4      	uxth	r4, r4
 8022eb8:	1c73      	adds	r3, r6, #1
 8022eba:	fb00 2005 	mla	r0, r0, r5, r2
 8022ebe:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8022ec2:	b280      	uxth	r0, r0
 8022ec4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8022ec8:	1c42      	adds	r2, r0, #1
 8022eca:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022ece:	1c62      	adds	r2, r4, #1
 8022ed0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8022ed4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8022ed8:	0952      	lsrs	r2, r2, #5
 8022eda:	4303      	orrs	r3, r0
 8022edc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022ee0:	4313      	orrs	r3, r2
 8022ee2:	800b      	strh	r3, [r1, #0]
 8022ee4:	b005      	add	sp, #20
 8022ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022eea:	bf00      	nop
 8022eec:	0802ceb2 	.word	0x0802ceb2
 8022ef0:	0802d475 	.word	0x0802d475
 8022ef4:	0802cf9b 	.word	0x0802cf9b

08022ef8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022efc:	ed2d 8b08 	vpush	{d8-d11}
 8022f00:	b09f      	sub	sp, #124	; 0x7c
 8022f02:	eeb0 aa40 	vmov.f32	s20, s0
 8022f06:	eef0 9a60 	vmov.f32	s19, s1
 8022f0a:	921b      	str	r2, [sp, #108]	; 0x6c
 8022f0c:	eeb0 9a41 	vmov.f32	s18, s2
 8022f10:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8022f12:	eeb0 8a62 	vmov.f32	s16, s5
 8022f16:	9309      	str	r3, [sp, #36]	; 0x24
 8022f18:	eef0 8a43 	vmov.f32	s17, s6
 8022f1c:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8022f20:	eef0 ba44 	vmov.f32	s23, s8
 8022f24:	901d      	str	r0, [sp, #116]	; 0x74
 8022f26:	eeb0 ba64 	vmov.f32	s22, s9
 8022f2a:	931c      	str	r3, [sp, #112]	; 0x70
 8022f2c:	eef0 aa45 	vmov.f32	s21, s10
 8022f30:	6850      	ldr	r0, [r2, #4]
 8022f32:	9119      	str	r1, [sp, #100]	; 0x64
 8022f34:	6812      	ldr	r2, [r2, #0]
 8022f36:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8022f38:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8022f3c:	fb00 1303 	mla	r3, r0, r3, r1
 8022f40:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022f44:	930c      	str	r3, [sp, #48]	; 0x30
 8022f46:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8022f48:	681b      	ldr	r3, [r3, #0]
 8022f4a:	9312      	str	r3, [sp, #72]	; 0x48
 8022f4c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8022f4e:	685e      	ldr	r6, [r3, #4]
 8022f50:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8022f54:	3604      	adds	r6, #4
 8022f56:	930d      	str	r3, [sp, #52]	; 0x34
 8022f58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022f5a:	2b00      	cmp	r3, #0
 8022f5c:	dc03      	bgt.n	8022f66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022f5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022f60:	2b00      	cmp	r3, #0
 8022f62:	f340 838d 	ble.w	8023680 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x788>
 8022f66:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8022f68:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022f6c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022f70:	1e48      	subs	r0, r1, #1
 8022f72:	1e57      	subs	r7, r2, #1
 8022f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f76:	2b00      	cmp	r3, #0
 8022f78:	f340 819a 	ble.w	80232b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8022f7c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8022f7e:	142b      	asrs	r3, r5, #16
 8022f80:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8022f84:	d406      	bmi.n	8022f94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022f86:	4584      	cmp	ip, r0
 8022f88:	da04      	bge.n	8022f94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022f8a:	2b00      	cmp	r3, #0
 8022f8c:	db02      	blt.n	8022f94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022f8e:	42bb      	cmp	r3, r7
 8022f90:	f2c0 818f 	blt.w	80232b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8022f94:	f11c 0c01 	adds.w	ip, ip, #1
 8022f98:	f100 817d 	bmi.w	8023296 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8022f9c:	4561      	cmp	r1, ip
 8022f9e:	f2c0 817a 	blt.w	8023296 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8022fa2:	3301      	adds	r3, #1
 8022fa4:	f100 8177 	bmi.w	8023296 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8022fa8:	429a      	cmp	r2, r3
 8022faa:	f2c0 8174 	blt.w	8023296 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8022fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022fb0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022fb2:	931a      	str	r3, [sp, #104]	; 0x68
 8022fb4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022fb6:	2b00      	cmp	r3, #0
 8022fb8:	f340 8199 	ble.w	80232ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8022fbc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022fbe:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022fc2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022fc6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022fca:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8022fcc:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8022fd0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022fd2:	141b      	asrs	r3, r3, #16
 8022fd4:	f100 81dc 	bmi.w	8023390 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8022fd8:	f100 38ff 	add.w	r8, r0, #4294967295
 8022fdc:	4543      	cmp	r3, r8
 8022fde:	f280 81d7 	bge.w	8023390 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8022fe2:	f1bc 0f00 	cmp.w	ip, #0
 8022fe6:	f2c0 81d3 	blt.w	8023390 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8022fea:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022fee:	45c4      	cmp	ip, r8
 8022ff0:	f280 81ce 	bge.w	8023390 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 8022ff4:	b200      	sxth	r0, r0
 8022ff6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022ff8:	fb0c 3300 	mla	r3, ip, r0, r3
 8022ffc:	eb04 0803 	add.w	r8, r4, r3
 8023000:	5ce3      	ldrb	r3, [r4, r3]
 8023002:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023006:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802300a:	2a00      	cmp	r2, #0
 802300c:	f000 81b5 	beq.w	802337a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8023010:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023014:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8023018:	940e      	str	r4, [sp, #56]	; 0x38
 802301a:	0e24      	lsrs	r4, r4, #24
 802301c:	9415      	str	r4, [sp, #84]	; 0x54
 802301e:	b179      	cbz	r1, 8023040 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8023020:	eb08 0c00 	add.w	ip, r8, r0
 8023024:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023028:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802302c:	900a      	str	r0, [sp, #40]	; 0x28
 802302e:	0e00      	lsrs	r0, r0, #24
 8023030:	9013      	str	r0, [sp, #76]	; 0x4c
 8023032:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8023036:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802303a:	900f      	str	r0, [sp, #60]	; 0x3c
 802303c:	0e00      	lsrs	r0, r0, #24
 802303e:	9016      	str	r0, [sp, #88]	; 0x58
 8023040:	b292      	uxth	r2, r2
 8023042:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023044:	b289      	uxth	r1, r1
 8023046:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023048:	fb02 f901 	mul.w	r9, r2, r1
 802304c:	0112      	lsls	r2, r2, #4
 802304e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023052:	eba2 0809 	sub.w	r8, r2, r9
 8023056:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802305a:	b289      	uxth	r1, r1
 802305c:	fa1f f888 	uxth.w	r8, r8
 8023060:	1a52      	subs	r2, r2, r1
 8023062:	fb08 f000 	mul.w	r0, r8, r0
 8023066:	b292      	uxth	r2, r2
 8023068:	fb02 000e 	mla	r0, r2, lr, r0
 802306c:	fb01 0004 	mla	r0, r1, r4, r0
 8023070:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023072:	fb09 0004 	mla	r0, r9, r4, r0
 8023076:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802307a:	2800      	cmp	r0, #0
 802307c:	f000 8100 	beq.w	8023280 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8023080:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023084:	d01b      	beq.n	80230be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8023086:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802308a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802308e:	fb0e fa0a 	mul.w	sl, lr, sl
 8023092:	fb0e fe03 	mul.w	lr, lr, r3
 8023096:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802309a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802309e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80230a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80230a6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80230aa:	4453      	add	r3, sl
 80230ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80230b0:	0a1b      	lsrs	r3, r3, #8
 80230b2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80230b6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80230ba:	ea43 030c 	orr.w	r3, r3, ip
 80230be:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80230c0:	2cff      	cmp	r4, #255	; 0xff
 80230c2:	d021      	beq.n	8023108 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80230c4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80230c6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80230ca:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80230cc:	fb04 fb0b 	mul.w	fp, r4, fp
 80230d0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80230d2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80230d6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80230d8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80230dc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80230e0:	fb04 fa0a 	mul.w	sl, r4, sl
 80230e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80230e8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80230ec:	44de      	add	lr, fp
 80230ee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80230f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80230f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80230fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80230fe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023102:	ea4e 040a 	orr.w	r4, lr, sl
 8023106:	940e      	str	r4, [sp, #56]	; 0x38
 8023108:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802310a:	2cff      	cmp	r4, #255	; 0xff
 802310c:	d021      	beq.n	8023152 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802310e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023110:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023114:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023116:	fb04 fb0b 	mul.w	fp, r4, fp
 802311a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802311c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023120:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023122:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023126:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802312a:	fb04 fa0a 	mul.w	sl, r4, sl
 802312e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023132:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023136:	44de      	add	lr, fp
 8023138:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802313c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023140:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023144:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023148:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802314c:	ea4e 040a 	orr.w	r4, lr, sl
 8023150:	940a      	str	r4, [sp, #40]	; 0x28
 8023152:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023154:	2cff      	cmp	r4, #255	; 0xff
 8023156:	d021      	beq.n	802319c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8023158:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802315a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802315e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023160:	fb04 fb0b 	mul.w	fp, r4, fp
 8023164:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023166:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802316a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802316c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023170:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023174:	fb04 fa0a 	mul.w	sl, r4, sl
 8023178:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802317c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023180:	44de      	add	lr, fp
 8023182:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023186:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802318a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802318e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023192:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023196:	ea4e 040a 	orr.w	r4, lr, sl
 802319a:	940f      	str	r4, [sp, #60]	; 0x3c
 802319c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802319e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80231a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80231a6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80231aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80231ac:	fb08 fc0c 	mul.w	ip, r8, ip
 80231b0:	fb02 cc0e 	mla	ip, r2, lr, ip
 80231b4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80231b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80231ba:	fb01 cc0e 	mla	ip, r1, lr, ip
 80231be:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80231c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80231c4:	fb09 cc0e 	mla	ip, r9, lr, ip
 80231c8:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80231cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80231ce:	fb08 f80e 	mul.w	r8, r8, lr
 80231d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80231d6:	f8b7 e000 	ldrh.w	lr, [r7]
 80231da:	fb02 8303 	mla	r3, r2, r3, r8
 80231de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80231e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80231e4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80231e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80231ea:	fb01 330a 	mla	r3, r1, sl, r3
 80231ee:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80231f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80231f4:	fb09 3901 	mla	r9, r9, r1, r3
 80231f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80231fa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80231fe:	4343      	muls	r3, r0
 8023200:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023204:	1c58      	adds	r0, r3, #1
 8023206:	ea4c 0c09 	orr.w	ip, ip, r9
 802320a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802320e:	ea4f 232e 	mov.w	r3, lr, asr #8
 8023212:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8023216:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802321a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802321e:	fb11 f102 	smulbb	r1, r1, r2
 8023222:	b2c0      	uxtb	r0, r0
 8023224:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8023228:	fb03 1300 	mla	r3, r3, r0, r1
 802322c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023230:	b299      	uxth	r1, r3
 8023232:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8023236:	fa5f fc8c 	uxtb.w	ip, ip
 802323a:	fb13 f304 	smulbb	r3, r3, r4
 802323e:	fb1c fc04 	smulbb	ip, ip, r4
 8023242:	fb02 3200 	mla	r2, r2, r0, r3
 8023246:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 802324a:	b2db      	uxtb	r3, r3
 802324c:	b292      	uxth	r2, r2
 802324e:	fb03 cc00 	mla	ip, r3, r0, ip
 8023252:	1c4b      	adds	r3, r1, #1
 8023254:	fa1f fc8c 	uxth.w	ip, ip
 8023258:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802325c:	1c51      	adds	r1, r2, #1
 802325e:	f10c 0001 	add.w	r0, ip, #1
 8023262:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023266:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802326a:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 802326e:	0952      	lsrs	r2, r2, #5
 8023270:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023274:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023278:	ea43 030c 	orr.w	r3, r3, ip
 802327c:	4313      	orrs	r3, r2
 802327e:	803b      	strh	r3, [r7, #0]
 8023280:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8023282:	3702      	adds	r7, #2
 8023284:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8023286:	441a      	add	r2, r3
 8023288:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802328a:	441d      	add	r5, r3
 802328c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802328e:	9231      	str	r2, [sp, #196]	; 0xc4
 8023290:	3b01      	subs	r3, #1
 8023292:	931a      	str	r3, [sp, #104]	; 0x68
 8023294:	e68e      	b.n	8022fb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8023296:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8023298:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802329a:	441c      	add	r4, r3
 802329c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802329e:	441d      	add	r5, r3
 80232a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80232a2:	9431      	str	r4, [sp, #196]	; 0xc4
 80232a4:	3b01      	subs	r3, #1
 80232a6:	9309      	str	r3, [sp, #36]	; 0x24
 80232a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80232aa:	3302      	adds	r3, #2
 80232ac:	930c      	str	r3, [sp, #48]	; 0x30
 80232ae:	e661      	b.n	8022f74 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80232b0:	d024      	beq.n	80232fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 80232b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80232b4:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80232b6:	3b01      	subs	r3, #1
 80232b8:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80232ba:	fb00 4003 	mla	r0, r0, r3, r4
 80232be:	1400      	asrs	r0, r0, #16
 80232c0:	f53f ae75 	bmi.w	8022fae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80232c4:	3901      	subs	r1, #1
 80232c6:	4288      	cmp	r0, r1
 80232c8:	f6bf ae71 	bge.w	8022fae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80232cc:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80232ce:	fb01 5303 	mla	r3, r1, r3, r5
 80232d2:	141b      	asrs	r3, r3, #16
 80232d4:	f53f ae6b 	bmi.w	8022fae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80232d8:	3a01      	subs	r2, #1
 80232da:	4293      	cmp	r3, r2
 80232dc:	f6bf ae67 	bge.w	8022fae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80232e0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80232e4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80232e8:	f1bb 0f00 	cmp.w	fp, #0
 80232ec:	dc70      	bgt.n	80233d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80232ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80232f0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80232f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80232f6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80232fa:	930c      	str	r3, [sp, #48]	; 0x30
 80232fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80232fe:	2b00      	cmp	r3, #0
 8023300:	f340 81be 	ble.w	8023680 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x788>
 8023304:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023308:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802330a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802330e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023312:	eef0 6a48 	vmov.f32	s13, s16
 8023316:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802331a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802331e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023322:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8023326:	eef0 6a68 	vmov.f32	s13, s17
 802332a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802332e:	ee16 5a90 	vmov	r5, s13
 8023332:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023336:	ee69 7a27 	vmul.f32	s15, s18, s15
 802333a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802333e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023342:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023346:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802334a:	ee18 2a10 	vmov	r2, s16
 802334e:	eeb0 8a47 	vmov.f32	s16, s14
 8023352:	fb92 f3f3 	sdiv	r3, r2, r3
 8023356:	ee18 2a90 	vmov	r2, s17
 802335a:	9333      	str	r3, [sp, #204]	; 0xcc
 802335c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802335e:	eef0 8a67 	vmov.f32	s17, s15
 8023362:	fb92 f3f3 	sdiv	r3, r2, r3
 8023366:	9334      	str	r3, [sp, #208]	; 0xd0
 8023368:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802336a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802336c:	3b01      	subs	r3, #1
 802336e:	9319      	str	r3, [sp, #100]	; 0x64
 8023370:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023372:	bf08      	it	eq
 8023374:	4613      	moveq	r3, r2
 8023376:	9309      	str	r3, [sp, #36]	; 0x24
 8023378:	e5ee      	b.n	8022f58 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802337a:	2900      	cmp	r1, #0
 802337c:	f43f ae60 	beq.w	8023040 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8023380:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023384:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023388:	900a      	str	r0, [sp, #40]	; 0x28
 802338a:	0e00      	lsrs	r0, r0, #24
 802338c:	9013      	str	r0, [sp, #76]	; 0x4c
 802338e:	e657      	b.n	8023040 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8023390:	f113 0801 	adds.w	r8, r3, #1
 8023394:	f53f af74 	bmi.w	8023280 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8023398:	4540      	cmp	r0, r8
 802339a:	f6ff af71 	blt.w	8023280 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 802339e:	f11c 0801 	adds.w	r8, ip, #1
 80233a2:	f53f af6d 	bmi.w	8023280 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80233a6:	45c6      	cmp	lr, r8
 80233a8:	f6ff af6a 	blt.w	8023280 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80233ac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80233ae:	b200      	sxth	r0, r0
 80233b0:	9302      	str	r3, [sp, #8]
 80233b2:	fa0f f38e 	sxth.w	r3, lr
 80233b6:	9000      	str	r0, [sp, #0]
 80233b8:	9301      	str	r3, [sp, #4]
 80233ba:	4633      	mov	r3, r6
 80233bc:	981d      	ldr	r0, [sp, #116]	; 0x74
 80233be:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80233c2:	e9cd c203 	strd	ip, r2, [sp, #12]
 80233c6:	4639      	mov	r1, r7
 80233c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80233ca:	f7ff fc2b 	bl	8022c24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80233ce:	e757      	b.n	8023280 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80233d0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80233d2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80233d6:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80233d8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80233dc:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80233de:	1427      	asrs	r7, r4, #16
 80233e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80233e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80233e6:	142b      	asrs	r3, r5, #16
 80233e8:	fb01 7303 	mla	r3, r1, r3, r7
 80233ec:	18e7      	adds	r7, r4, r3
 80233ee:	5ce3      	ldrb	r3, [r4, r3]
 80233f0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80233f4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80233f8:	2a00      	cmp	r2, #0
 80233fa:	f000 8137 	beq.w	802366c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 80233fe:	f897 e001 	ldrb.w	lr, [r7, #1]
 8023402:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8023406:	9410      	str	r4, [sp, #64]	; 0x40
 8023408:	0e24      	lsrs	r4, r4, #24
 802340a:	9417      	str	r4, [sp, #92]	; 0x5c
 802340c:	b170      	cbz	r0, 802342c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802340e:	eb07 0e01 	add.w	lr, r7, r1
 8023412:	5c79      	ldrb	r1, [r7, r1]
 8023414:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023418:	910b      	str	r1, [sp, #44]	; 0x2c
 802341a:	0e09      	lsrs	r1, r1, #24
 802341c:	9114      	str	r1, [sp, #80]	; 0x50
 802341e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8023422:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023426:	9111      	str	r1, [sp, #68]	; 0x44
 8023428:	0e09      	lsrs	r1, r1, #24
 802342a:	9118      	str	r1, [sp, #96]	; 0x60
 802342c:	b292      	uxth	r2, r2
 802342e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8023430:	b280      	uxth	r0, r0
 8023432:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023434:	fb02 f800 	mul.w	r8, r2, r0
 8023438:	0112      	lsls	r2, r2, #4
 802343a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802343e:	eba2 0e08 	sub.w	lr, r2, r8
 8023442:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023446:	b280      	uxth	r0, r0
 8023448:	fa1f fe8e 	uxth.w	lr, lr
 802344c:	1a12      	subs	r2, r2, r0
 802344e:	fb0e f101 	mul.w	r1, lr, r1
 8023452:	b292      	uxth	r2, r2
 8023454:	fb02 110c 	mla	r1, r2, ip, r1
 8023458:	fb00 1104 	mla	r1, r0, r4, r1
 802345c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802345e:	fb08 1104 	mla	r1, r8, r4, r1
 8023462:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023466:	2900      	cmp	r1, #0
 8023468:	f000 80f5 	beq.w	8023656 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 802346c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023470:	d019      	beq.n	80234a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ae>
 8023472:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023476:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802347a:	fb0c fa0a 	mul.w	sl, ip, sl
 802347e:	fb0c fc03 	mul.w	ip, ip, r3
 8023482:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023486:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802348a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802348e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023492:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023496:	4453      	add	r3, sl
 8023498:	0a3f      	lsrs	r7, r7, #8
 802349a:	0a1b      	lsrs	r3, r3, #8
 802349c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80234a0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80234a4:	433b      	orrs	r3, r7
 80234a6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80234a8:	2cff      	cmp	r4, #255	; 0xff
 80234aa:	d020      	beq.n	80234ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 80234ac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80234ae:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80234b2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80234b4:	4367      	muls	r7, r4
 80234b6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80234b8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80234bc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80234c0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80234c2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80234c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80234ca:	fb04 fa0a 	mul.w	sl, r4, sl
 80234ce:	44bc      	add	ip, r7
 80234d0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80234d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80234d8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80234dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80234e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80234e4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80234e8:	ea4c 040a 	orr.w	r4, ip, sl
 80234ec:	9410      	str	r4, [sp, #64]	; 0x40
 80234ee:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80234f0:	2cff      	cmp	r4, #255	; 0xff
 80234f2:	d020      	beq.n	8023536 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x63e>
 80234f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80234f6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80234fa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80234fc:	4367      	muls	r7, r4
 80234fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023500:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023504:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023508:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802350a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802350e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023512:	fb04 fa0a 	mul.w	sl, r4, sl
 8023516:	44bc      	add	ip, r7
 8023518:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802351c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023520:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023524:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023528:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802352c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023530:	ea4c 040a 	orr.w	r4, ip, sl
 8023534:	940b      	str	r4, [sp, #44]	; 0x2c
 8023536:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023538:	2cff      	cmp	r4, #255	; 0xff
 802353a:	d020      	beq.n	802357e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x686>
 802353c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802353e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023542:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023544:	4367      	muls	r7, r4
 8023546:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023548:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802354c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023550:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023552:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023556:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802355a:	fb04 fa0a 	mul.w	sl, r4, sl
 802355e:	44bc      	add	ip, r7
 8023560:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023564:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023568:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802356c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023570:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023574:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023578:	ea4c 040a 	orr.w	r4, ip, sl
 802357c:	9411      	str	r4, [sp, #68]	; 0x44
 802357e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023580:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023584:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023588:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802358c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802358e:	fb0e f707 	mul.w	r7, lr, r7
 8023592:	fb02 770c 	mla	r7, r2, ip, r7
 8023596:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802359a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802359c:	fb00 770c 	mla	r7, r0, ip, r7
 80235a0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80235a4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80235a6:	fb08 770c 	mla	r7, r8, ip, r7
 80235aa:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80235ae:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80235b0:	fb0e fe0c 	mul.w	lr, lr, ip
 80235b4:	0a3f      	lsrs	r7, r7, #8
 80235b6:	fb02 e303 	mla	r3, r2, r3, lr
 80235ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80235bc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80235c0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80235c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80235c6:	fb00 330a 	mla	r3, r0, sl, r3
 80235ca:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80235ce:	f8b9 0000 	ldrh.w	r0, [r9]
 80235d2:	fb08 3c0c 	mla	ip, r8, ip, r3
 80235d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80235d8:	1202      	asrs	r2, r0, #8
 80235da:	434b      	muls	r3, r1
 80235dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80235e0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80235e4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80235e8:	1c59      	adds	r1, r3, #1
 80235ea:	ea47 070c 	orr.w	r7, r7, ip
 80235ee:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80235f2:	0c3b      	lsrs	r3, r7, #16
 80235f4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80235f8:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80235fc:	b2ff      	uxtb	r7, r7
 80235fe:	fb13 f304 	smulbb	r3, r3, r4
 8023602:	b2c9      	uxtb	r1, r1
 8023604:	fb1c fc04 	smulbb	ip, ip, r4
 8023608:	fb02 3201 	mla	r2, r2, r1, r3
 802360c:	10c3      	asrs	r3, r0, #3
 802360e:	fb17 f704 	smulbb	r7, r7, r4
 8023612:	00c0      	lsls	r0, r0, #3
 8023614:	b292      	uxth	r2, r2
 8023616:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802361a:	b2c0      	uxtb	r0, r0
 802361c:	fb03 c301 	mla	r3, r3, r1, ip
 8023620:	f102 0c01 	add.w	ip, r2, #1
 8023624:	fb00 7001 	mla	r0, r0, r1, r7
 8023628:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802362c:	b280      	uxth	r0, r0
 802362e:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8023632:	b29b      	uxth	r3, r3
 8023634:	1c42      	adds	r2, r0, #1
 8023636:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802363a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802363e:	ea4c 0200 	orr.w	r2, ip, r0
 8023642:	f103 0c01 	add.w	ip, r3, #1
 8023646:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802364a:	095b      	lsrs	r3, r3, #5
 802364c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023650:	431a      	orrs	r2, r3
 8023652:	f8a9 2000 	strh.w	r2, [r9]
 8023656:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8023658:	f109 0902 	add.w	r9, r9, #2
 802365c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802365e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023662:	441a      	add	r2, r3
 8023664:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023666:	9231      	str	r2, [sp, #196]	; 0xc4
 8023668:	441d      	add	r5, r3
 802366a:	e63d      	b.n	80232e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802366c:	2800      	cmp	r0, #0
 802366e:	f43f aedd 	beq.w	802342c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8023672:	5c79      	ldrb	r1, [r7, r1]
 8023674:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023678:	910b      	str	r1, [sp, #44]	; 0x2c
 802367a:	0e09      	lsrs	r1, r1, #24
 802367c:	9114      	str	r1, [sp, #80]	; 0x50
 802367e:	e6d5      	b.n	802342c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8023680:	b01f      	add	sp, #124	; 0x7c
 8023682:	ecbd 8b08 	vpop	{d8-d11}
 8023686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802368c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 802368c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023690:	880e      	ldrh	r6, [r1, #0]
 8023692:	b085      	sub	sp, #20
 8023694:	4691      	mov	r9, r2
 8023696:	ea4f 2e26 	mov.w	lr, r6, asr #8
 802369a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 802369e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80236a2:	f00e 02f8 	and.w	r2, lr, #248	; 0xf8
 80236a6:	ea4f 0ee6 	mov.w	lr, r6, asr #3
 80236aa:	00f6      	lsls	r6, r6, #3
 80236ac:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80236b0:	9200      	str	r2, [sp, #0]
 80236b2:	f00e 02fc 	and.w	r2, lr, #252	; 0xfc
 80236b6:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80236ba:	9201      	str	r2, [sp, #4]
 80236bc:	b2f2      	uxtb	r2, r6
 80236be:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80236c2:	9202      	str	r2, [sp, #8]
 80236c4:	fb04 560c 	mla	r6, r4, ip, r5
 80236c8:	2c00      	cmp	r4, #0
 80236ca:	eb09 0e06 	add.w	lr, r9, r6
 80236ce:	db3e      	blt.n	802374e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 80236d0:	45a0      	cmp	r8, r4
 80236d2:	dd3c      	ble.n	802374e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc2>
 80236d4:	2d00      	cmp	r5, #0
 80236d6:	db38      	blt.n	802374a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 80236d8:	45ac      	cmp	ip, r5
 80236da:	dd36      	ble.n	802374a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 80236dc:	f819 2006 	ldrb.w	r2, [r9, r6]
 80236e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80236e4:	1c6e      	adds	r6, r5, #1
 80236e6:	d435      	bmi.n	8023754 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 80236e8:	45b4      	cmp	ip, r6
 80236ea:	dd33      	ble.n	8023754 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc8>
 80236ec:	b3a0      	cbz	r0, 8023758 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 80236ee:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80236f2:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80236f6:	3401      	adds	r4, #1
 80236f8:	d432      	bmi.n	8023760 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 80236fa:	45a0      	cmp	r8, r4
 80236fc:	dd30      	ble.n	8023760 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd4>
 80236fe:	b397      	cbz	r7, 8023766 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 8023700:	2d00      	cmp	r5, #0
 8023702:	db2b      	blt.n	802375c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 8023704:	45ac      	cmp	ip, r5
 8023706:	dd29      	ble.n	802375c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 8023708:	f81e 400c 	ldrb.w	r4, [lr, ip]
 802370c:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8023710:	3501      	adds	r5, #1
 8023712:	d42b      	bmi.n	802376c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 8023714:	45ac      	cmp	ip, r5
 8023716:	dd29      	ble.n	802376c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe0>
 8023718:	b350      	cbz	r0, 8023770 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe4>
 802371a:	44f4      	add	ip, lr
 802371c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8023720:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8023724:	280f      	cmp	r0, #15
 8023726:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802372a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802372e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023732:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8023736:	d801      	bhi.n	802373c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb0>
 8023738:	2f0f      	cmp	r7, #15
 802373a:	d91b      	bls.n	8023774 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe8>
 802373c:	4b7e      	ldr	r3, [pc, #504]	; (8023938 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 802373e:	f240 210d 	movw	r1, #525	; 0x20d
 8023742:	4a7e      	ldr	r2, [pc, #504]	; (802393c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8023744:	487e      	ldr	r0, [pc, #504]	; (8023940 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 8023746:	f004 ffa7 	bl	8028698 <__assert_func>
 802374a:	2200      	movs	r2, #0
 802374c:	e7ca      	b.n	80236e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 802374e:	2600      	movs	r6, #0
 8023750:	4632      	mov	r2, r6
 8023752:	e7d0      	b.n	80236f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8023754:	2600      	movs	r6, #0
 8023756:	e7ce      	b.n	80236f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8023758:	4606      	mov	r6, r0
 802375a:	e7cc      	b.n	80236f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 802375c:	2400      	movs	r4, #0
 802375e:	e7d7      	b.n	8023710 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x84>
 8023760:	2300      	movs	r3, #0
 8023762:	461c      	mov	r4, r3
 8023764:	e7de      	b.n	8023724 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8023766:	463b      	mov	r3, r7
 8023768:	463c      	mov	r4, r7
 802376a:	e7db      	b.n	8023724 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 802376c:	2300      	movs	r3, #0
 802376e:	e7d9      	b.n	8023724 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8023770:	4603      	mov	r3, r0
 8023772:	e7d7      	b.n	8023724 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x98>
 8023774:	b280      	uxth	r0, r0
 8023776:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802377a:	b2bf      	uxth	r7, r7
 802377c:	fb00 fe07 	mul.w	lr, r0, r7
 8023780:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8023784:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8023788:	eba0 0c0e 	sub.w	ip, r0, lr
 802378c:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8023790:	b2bf      	uxth	r7, r7
 8023792:	fa1f fc8c 	uxth.w	ip, ip
 8023796:	eba5 0507 	sub.w	r5, r5, r7
 802379a:	fb0c f00a 	mul.w	r0, ip, sl
 802379e:	b2ad      	uxth	r5, r5
 80237a0:	fb05 000b 	mla	r0, r5, fp, r0
 80237a4:	fb07 0009 	mla	r0, r7, r9, r0
 80237a8:	fb0e 0008 	mla	r0, lr, r8, r0
 80237ac:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80237b0:	9003      	str	r0, [sp, #12]
 80237b2:	d018      	beq.n	80237e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15a>
 80237b4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80237b8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80237bc:	fb0b f000 	mul.w	r0, fp, r0
 80237c0:	fb0b fb02 	mul.w	fp, fp, r2
 80237c4:	0a02      	lsrs	r2, r0, #8
 80237c6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80237ca:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80237ce:	4402      	add	r2, r0
 80237d0:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80237d4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80237d8:	0a12      	lsrs	r2, r2, #8
 80237da:	0a00      	lsrs	r0, r0, #8
 80237dc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80237e0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80237e4:	4302      	orrs	r2, r0
 80237e6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80237ea:	d019      	beq.n	8023820 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x194>
 80237ec:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80237f0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80237f4:	fb0a fb0b 	mul.w	fp, sl, fp
 80237f8:	fb0a fa06 	mul.w	sl, sl, r6
 80237fc:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8023800:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023804:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8023808:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802380c:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8023810:	445e      	add	r6, fp
 8023812:	0a00      	lsrs	r0, r0, #8
 8023814:	0a36      	lsrs	r6, r6, #8
 8023816:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802381a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802381e:	4306      	orrs	r6, r0
 8023820:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023824:	d019      	beq.n	802385a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1ce>
 8023826:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802382a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802382e:	fb09 fa0a 	mul.w	sl, r9, sl
 8023832:	fb09 f904 	mul.w	r9, r9, r4
 8023836:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802383a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802383e:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8023842:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023846:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 802384a:	4454      	add	r4, sl
 802384c:	0a00      	lsrs	r0, r0, #8
 802384e:	0a24      	lsrs	r4, r4, #8
 8023850:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023854:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023858:	4304      	orrs	r4, r0
 802385a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802385e:	d019      	beq.n	8023894 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x208>
 8023860:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8023864:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023868:	fb08 f909 	mul.w	r9, r8, r9
 802386c:	fb08 f803 	mul.w	r8, r8, r3
 8023870:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8023874:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8023878:	f508 7080 	add.w	r0, r8, #256	; 0x100
 802387c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023880:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8023884:	444b      	add	r3, r9
 8023886:	0a00      	lsrs	r0, r0, #8
 8023888:	0a1b      	lsrs	r3, r3, #8
 802388a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802388e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023892:	4303      	orrs	r3, r0
 8023894:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8023898:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802389c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80238a0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80238a4:	fb0c f808 	mul.w	r8, ip, r8
 80238a8:	fb0c f606 	mul.w	r6, ip, r6
 80238ac:	fb05 8800 	mla	r8, r5, r0, r8
 80238b0:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80238b4:	fb05 6202 	mla	r2, r5, r2, r6
 80238b8:	9d01      	ldr	r5, [sp, #4]
 80238ba:	fb07 8800 	mla	r8, r7, r0, r8
 80238be:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80238c2:	fb0e 8000 	mla	r0, lr, r0, r8
 80238c6:	0a00      	lsrs	r0, r0, #8
 80238c8:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 80238cc:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 80238d0:	9c02      	ldr	r4, [sp, #8]
 80238d2:	fb07 2700 	mla	r7, r7, r0, r2
 80238d6:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80238da:	9b03      	ldr	r3, [sp, #12]
 80238dc:	fb0e 7000 	mla	r0, lr, r0, r7
 80238e0:	43da      	mvns	r2, r3
 80238e2:	9b00      	ldr	r3, [sp, #0]
 80238e4:	0a00      	lsrs	r0, r0, #8
 80238e6:	b2d2      	uxtb	r2, r2
 80238e8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80238ec:	4353      	muls	r3, r2
 80238ee:	4354      	muls	r4, r2
 80238f0:	ea48 0000 	orr.w	r0, r8, r0
 80238f4:	4355      	muls	r5, r2
 80238f6:	4622      	mov	r2, r4
 80238f8:	1c5c      	adds	r4, r3, #1
 80238fa:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 80238fe:	0c03      	lsrs	r3, r0, #16
 8023900:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8023904:	4b0f      	ldr	r3, [pc, #60]	; (8023944 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b8>)
 8023906:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 802390a:	1c54      	adds	r4, r2, #1
 802390c:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8023910:	b2c2      	uxtb	r2, r0
 8023912:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023916:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802391a:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 802391e:	1c6a      	adds	r2, r5, #1
 8023920:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8023924:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023928:	00c0      	lsls	r0, r0, #3
 802392a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802392e:	4318      	orrs	r0, r3
 8023930:	8008      	strh	r0, [r1, #0]
 8023932:	b005      	add	sp, #20
 8023934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023938:	0802ceb2 	.word	0x0802ceb2
 802393c:	0802d475 	.word	0x0802d475
 8023940:	0802cf9b 	.word	0x0802cf9b
 8023944:	fffff800 	.word	0xfffff800

08023948 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802394c:	ed2d 8b08 	vpush	{d8-d11}
 8023950:	b09b      	sub	sp, #108	; 0x6c
 8023952:	eeb0 aa40 	vmov.f32	s20, s0
 8023956:	eef0 9a60 	vmov.f32	s19, s1
 802395a:	9218      	str	r2, [sp, #96]	; 0x60
 802395c:	eeb0 9a41 	vmov.f32	s18, s2
 8023960:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8023962:	eeb0 8a62 	vmov.f32	s16, s5
 8023966:	9019      	str	r0, [sp, #100]	; 0x64
 8023968:	eef0 8a43 	vmov.f32	s17, s6
 802396c:	6850      	ldr	r0, [r2, #4]
 802396e:	eef0 ba44 	vmov.f32	s23, s8
 8023972:	9116      	str	r1, [sp, #88]	; 0x58
 8023974:	eeb0 ba64 	vmov.f32	s22, s9
 8023978:	9307      	str	r3, [sp, #28]
 802397a:	eef0 aa45 	vmov.f32	s21, s10
 802397e:	6812      	ldr	r2, [r2, #0]
 8023980:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8023982:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8023986:	fb00 1303 	mla	r3, r0, r3, r1
 802398a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802398e:	930a      	str	r3, [sp, #40]	; 0x28
 8023990:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023992:	681b      	ldr	r3, [r3, #0]
 8023994:	930f      	str	r3, [sp, #60]	; 0x3c
 8023996:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023998:	685e      	ldr	r6, [r3, #4]
 802399a:	3604      	adds	r6, #4
 802399c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802399e:	2b00      	cmp	r3, #0
 80239a0:	dc03      	bgt.n	80239aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80239a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80239a4:	2b00      	cmp	r3, #0
 80239a6:	f340 836f 	ble.w	8024088 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 80239aa:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80239ac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80239b0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80239b4:	1e48      	subs	r0, r1, #1
 80239b6:	1e57      	subs	r7, r2, #1
 80239b8:	9b07      	ldr	r3, [sp, #28]
 80239ba:	2b00      	cmp	r3, #0
 80239bc:	f340 8188 	ble.w	8023cd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80239c0:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80239c2:	142b      	asrs	r3, r5, #16
 80239c4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80239c8:	d406      	bmi.n	80239d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80239ca:	4584      	cmp	ip, r0
 80239cc:	da04      	bge.n	80239d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80239ce:	2b00      	cmp	r3, #0
 80239d0:	db02      	blt.n	80239d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80239d2:	42bb      	cmp	r3, r7
 80239d4:	f2c0 817d 	blt.w	8023cd2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80239d8:	f11c 0c01 	adds.w	ip, ip, #1
 80239dc:	f100 816b 	bmi.w	8023cb6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80239e0:	4561      	cmp	r1, ip
 80239e2:	f2c0 8168 	blt.w	8023cb6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80239e6:	3301      	adds	r3, #1
 80239e8:	f100 8165 	bmi.w	8023cb6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80239ec:	429a      	cmp	r2, r3
 80239ee:	f2c0 8162 	blt.w	8023cb6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80239f2:	9b07      	ldr	r3, [sp, #28]
 80239f4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80239f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80239f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80239fa:	2b00      	cmp	r3, #0
 80239fc:	f340 8187 	ble.w	8023d0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8023a00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023a02:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023a06:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023a0a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023a0e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023a10:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8023a14:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023a16:	141b      	asrs	r3, r3, #16
 8023a18:	f100 81ca 	bmi.w	8023db0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8023a1c:	f101 38ff 	add.w	r8, r1, #4294967295
 8023a20:	4543      	cmp	r3, r8
 8023a22:	f280 81c5 	bge.w	8023db0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8023a26:	f1bc 0f00 	cmp.w	ip, #0
 8023a2a:	f2c0 81c1 	blt.w	8023db0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8023a2e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023a32:	45c4      	cmp	ip, r8
 8023a34:	f280 81bc 	bge.w	8023db0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8023a38:	b209      	sxth	r1, r1
 8023a3a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023a3c:	fb0c 3301 	mla	r3, ip, r1, r3
 8023a40:	eb04 0803 	add.w	r8, r4, r3
 8023a44:	5ce3      	ldrb	r3, [r4, r3]
 8023a46:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023a4a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023a4e:	2a00      	cmp	r2, #0
 8023a50:	f000 81a3 	beq.w	8023d9a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023a54:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023a58:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8023a5c:	940b      	str	r4, [sp, #44]	; 0x2c
 8023a5e:	0e24      	lsrs	r4, r4, #24
 8023a60:	9412      	str	r4, [sp, #72]	; 0x48
 8023a62:	b178      	cbz	r0, 8023a84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8023a64:	eb08 0c01 	add.w	ip, r8, r1
 8023a68:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023a6c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023a70:	9108      	str	r1, [sp, #32]
 8023a72:	0e09      	lsrs	r1, r1, #24
 8023a74:	9110      	str	r1, [sp, #64]	; 0x40
 8023a76:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8023a7a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023a7e:	910c      	str	r1, [sp, #48]	; 0x30
 8023a80:	0e09      	lsrs	r1, r1, #24
 8023a82:	9113      	str	r1, [sp, #76]	; 0x4c
 8023a84:	b292      	uxth	r2, r2
 8023a86:	9912      	ldr	r1, [sp, #72]	; 0x48
 8023a88:	b280      	uxth	r0, r0
 8023a8a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023a8c:	fb02 f900 	mul.w	r9, r2, r0
 8023a90:	0112      	lsls	r2, r2, #4
 8023a92:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023a96:	eba2 0809 	sub.w	r8, r2, r9
 8023a9a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023a9e:	b280      	uxth	r0, r0
 8023aa0:	fa1f f888 	uxth.w	r8, r8
 8023aa4:	1a12      	subs	r2, r2, r0
 8023aa6:	fb08 f101 	mul.w	r1, r8, r1
 8023aaa:	b292      	uxth	r2, r2
 8023aac:	fb02 110e 	mla	r1, r2, lr, r1
 8023ab0:	fb00 1104 	mla	r1, r0, r4, r1
 8023ab4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023ab6:	fb09 1104 	mla	r1, r9, r4, r1
 8023aba:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023abe:	2900      	cmp	r1, #0
 8023ac0:	f000 80ee 	beq.w	8023ca0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023ac4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023ac8:	d01b      	beq.n	8023b02 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8023aca:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023ace:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023ad2:	fb0e fa0a 	mul.w	sl, lr, sl
 8023ad6:	fb0e fe03 	mul.w	lr, lr, r3
 8023ada:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023ade:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023ae2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023ae6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023aea:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023aee:	4453      	add	r3, sl
 8023af0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023af4:	0a1b      	lsrs	r3, r3, #8
 8023af6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023afa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023afe:	ea43 030c 	orr.w	r3, r3, ip
 8023b02:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023b04:	2cff      	cmp	r4, #255	; 0xff
 8023b06:	d021      	beq.n	8023b4c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023b08:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023b0a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023b0e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023b10:	fb04 fb0b 	mul.w	fp, r4, fp
 8023b14:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023b16:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023b1a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023b1c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023b20:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023b24:	fb04 fa0a 	mul.w	sl, r4, sl
 8023b28:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b2c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023b30:	44de      	add	lr, fp
 8023b32:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023b36:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023b3a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023b3e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b42:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023b46:	ea4e 040a 	orr.w	r4, lr, sl
 8023b4a:	940b      	str	r4, [sp, #44]	; 0x2c
 8023b4c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023b4e:	2cff      	cmp	r4, #255	; 0xff
 8023b50:	d021      	beq.n	8023b96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8023b52:	9c08      	ldr	r4, [sp, #32]
 8023b54:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023b58:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023b5a:	fb04 fb0b 	mul.w	fp, r4, fp
 8023b5e:	9c08      	ldr	r4, [sp, #32]
 8023b60:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023b64:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023b66:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023b6a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023b6e:	fb04 fa0a 	mul.w	sl, r4, sl
 8023b72:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b76:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023b7a:	44de      	add	lr, fp
 8023b7c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023b80:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023b84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023b88:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023b8c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023b90:	ea4e 040a 	orr.w	r4, lr, sl
 8023b94:	9408      	str	r4, [sp, #32]
 8023b96:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023b98:	2cff      	cmp	r4, #255	; 0xff
 8023b9a:	d021      	beq.n	8023be0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8023b9c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023b9e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023ba2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023ba4:	fb04 fb0b 	mul.w	fp, r4, fp
 8023ba8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023baa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023bae:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023bb0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023bb4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023bb8:	fb04 fa0a 	mul.w	sl, r4, sl
 8023bbc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023bc0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023bc4:	44de      	add	lr, fp
 8023bc6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023bca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023bce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023bd2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023bd6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023bda:	ea4e 040a 	orr.w	r4, lr, sl
 8023bde:	940c      	str	r4, [sp, #48]	; 0x30
 8023be0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023be2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023be6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023bea:	43c9      	mvns	r1, r1
 8023bec:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023bf0:	9c08      	ldr	r4, [sp, #32]
 8023bf2:	b2c9      	uxtb	r1, r1
 8023bf4:	fb08 fc0c 	mul.w	ip, r8, ip
 8023bf8:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023bfc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023c00:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023c02:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023c06:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023c0a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023c0c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023c10:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023c14:	fb08 f80e 	mul.w	r8, r8, lr
 8023c18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c1c:	fb02 8303 	mla	r3, r2, r3, r8
 8023c20:	9a08      	ldr	r2, [sp, #32]
 8023c22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023c26:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023c2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023c2c:	fb00 330a 	mla	r3, r0, sl, r3
 8023c30:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8023c34:	fb09 3900 	mla	r9, r9, r0, r3
 8023c38:	883b      	ldrh	r3, [r7, #0]
 8023c3a:	1218      	asrs	r0, r3, #8
 8023c3c:	10da      	asrs	r2, r3, #3
 8023c3e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023c42:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023c46:	00db      	lsls	r3, r3, #3
 8023c48:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023c4c:	4348      	muls	r0, r1
 8023c4e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023c52:	b2db      	uxtb	r3, r3
 8023c54:	434a      	muls	r2, r1
 8023c56:	ea4c 0c09 	orr.w	ip, ip, r9
 8023c5a:	434b      	muls	r3, r1
 8023c5c:	1c41      	adds	r1, r0, #1
 8023c5e:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8023c62:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8023c66:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8023c6a:	4960      	ldr	r1, [pc, #384]	; (8023dec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8023c6c:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 8023c70:	1c59      	adds	r1, r3, #1
 8023c72:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023c76:	fa5f f38c 	uxtb.w	r3, ip
 8023c7a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023c7e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023c82:	1c51      	adds	r1, r2, #1
 8023c84:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023c88:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
 8023c8c:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8023c90:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023c94:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8023c98:	ea43 0c0c 	orr.w	ip, r3, ip
 8023c9c:	f8a7 c000 	strh.w	ip, [r7]
 8023ca0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8023ca2:	3702      	adds	r7, #2
 8023ca4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023ca6:	441a      	add	r2, r3
 8023ca8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023caa:	441d      	add	r5, r3
 8023cac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023cae:	922d      	str	r2, [sp, #180]	; 0xb4
 8023cb0:	3b01      	subs	r3, #1
 8023cb2:	9317      	str	r3, [sp, #92]	; 0x5c
 8023cb4:	e6a0      	b.n	80239f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8023cb6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8023cb8:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8023cba:	441c      	add	r4, r3
 8023cbc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023cbe:	441d      	add	r5, r3
 8023cc0:	9b07      	ldr	r3, [sp, #28]
 8023cc2:	942d      	str	r4, [sp, #180]	; 0xb4
 8023cc4:	3b01      	subs	r3, #1
 8023cc6:	9307      	str	r3, [sp, #28]
 8023cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023cca:	3302      	adds	r3, #2
 8023ccc:	930a      	str	r3, [sp, #40]	; 0x28
 8023cce:	e673      	b.n	80239b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8023cd0:	d024      	beq.n	8023d1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8023cd2:	9b07      	ldr	r3, [sp, #28]
 8023cd4:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8023cd6:	3b01      	subs	r3, #1
 8023cd8:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8023cda:	fb00 4003 	mla	r0, r0, r3, r4
 8023cde:	1400      	asrs	r0, r0, #16
 8023ce0:	f53f ae87 	bmi.w	80239f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023ce4:	3901      	subs	r1, #1
 8023ce6:	4288      	cmp	r0, r1
 8023ce8:	f6bf ae83 	bge.w	80239f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023cec:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8023cee:	fb01 5303 	mla	r3, r1, r3, r5
 8023cf2:	141b      	asrs	r3, r3, #16
 8023cf4:	f53f ae7d 	bmi.w	80239f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023cf8:	3a01      	subs	r2, #1
 8023cfa:	4293      	cmp	r3, r2
 8023cfc:	f6bf ae79 	bge.w	80239f2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023d00:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023d04:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8023d08:	f1bb 0f00 	cmp.w	fp, #0
 8023d0c:	dc70      	bgt.n	8023df0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8023d0e:	9b07      	ldr	r3, [sp, #28]
 8023d10:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023d16:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8023d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8023d1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023d1e:	2b00      	cmp	r3, #0
 8023d20:	f340 81b2 	ble.w	8024088 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 8023d24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023d28:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023d2a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023d2e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023d32:	eef0 6a48 	vmov.f32	s13, s16
 8023d36:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023d3a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023d3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d42:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8023d46:	eef0 6a68 	vmov.f32	s13, s17
 8023d4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d4e:	ee16 5a90 	vmov	r5, s13
 8023d52:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023d56:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023d5a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023d5e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023d62:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023d66:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023d6a:	ee18 2a10 	vmov	r2, s16
 8023d6e:	eeb0 8a47 	vmov.f32	s16, s14
 8023d72:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d76:	ee18 2a90 	vmov	r2, s17
 8023d7a:	932f      	str	r3, [sp, #188]	; 0xbc
 8023d7c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023d7e:	eef0 8a67 	vmov.f32	s17, s15
 8023d82:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d86:	9330      	str	r3, [sp, #192]	; 0xc0
 8023d88:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023d8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8023d8c:	3b01      	subs	r3, #1
 8023d8e:	9316      	str	r3, [sp, #88]	; 0x58
 8023d90:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023d92:	bf08      	it	eq
 8023d94:	4613      	moveq	r3, r2
 8023d96:	9307      	str	r3, [sp, #28]
 8023d98:	e600      	b.n	802399c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8023d9a:	2800      	cmp	r0, #0
 8023d9c:	f43f ae72 	beq.w	8023a84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8023da0:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023da4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023da8:	9108      	str	r1, [sp, #32]
 8023daa:	0e09      	lsrs	r1, r1, #24
 8023dac:	9110      	str	r1, [sp, #64]	; 0x40
 8023dae:	e669      	b.n	8023a84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8023db0:	f113 0801 	adds.w	r8, r3, #1
 8023db4:	f53f af74 	bmi.w	8023ca0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023db8:	4541      	cmp	r1, r8
 8023dba:	f6ff af71 	blt.w	8023ca0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023dbe:	f11c 0801 	adds.w	r8, ip, #1
 8023dc2:	f53f af6d 	bmi.w	8023ca0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023dc6:	45c6      	cmp	lr, r8
 8023dc8:	f6ff af6a 	blt.w	8023ca0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023dcc:	b209      	sxth	r1, r1
 8023dce:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8023dd2:	fa0f f38e 	sxth.w	r3, lr
 8023dd6:	9100      	str	r1, [sp, #0]
 8023dd8:	4639      	mov	r1, r7
 8023dda:	9301      	str	r3, [sp, #4]
 8023ddc:	4633      	mov	r3, r6
 8023dde:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8023de2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023de4:	9819      	ldr	r0, [sp, #100]	; 0x64
 8023de6:	f7ff fc51 	bl	802368c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8023dea:	e759      	b.n	8023ca0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023dec:	fffff800 	.word	0xfffff800
 8023df0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023df2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023df6:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8023df8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023dfc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023dfe:	1427      	asrs	r7, r4, #16
 8023e00:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023e02:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023e06:	142b      	asrs	r3, r5, #16
 8023e08:	fb01 7303 	mla	r3, r1, r3, r7
 8023e0c:	18e7      	adds	r7, r4, r3
 8023e0e:	5ce3      	ldrb	r3, [r4, r3]
 8023e10:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023e14:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023e18:	2a00      	cmp	r2, #0
 8023e1a:	f000 812b 	beq.w	8024074 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 8023e1e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8023e22:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8023e26:	940d      	str	r4, [sp, #52]	; 0x34
 8023e28:	0e24      	lsrs	r4, r4, #24
 8023e2a:	9414      	str	r4, [sp, #80]	; 0x50
 8023e2c:	b170      	cbz	r0, 8023e4c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8023e2e:	eb07 0e01 	add.w	lr, r7, r1
 8023e32:	5c79      	ldrb	r1, [r7, r1]
 8023e34:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023e38:	9109      	str	r1, [sp, #36]	; 0x24
 8023e3a:	0e09      	lsrs	r1, r1, #24
 8023e3c:	9111      	str	r1, [sp, #68]	; 0x44
 8023e3e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8023e42:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023e46:	910e      	str	r1, [sp, #56]	; 0x38
 8023e48:	0e09      	lsrs	r1, r1, #24
 8023e4a:	9115      	str	r1, [sp, #84]	; 0x54
 8023e4c:	b292      	uxth	r2, r2
 8023e4e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023e50:	b280      	uxth	r0, r0
 8023e52:	fb02 f800 	mul.w	r8, r2, r0
 8023e56:	0112      	lsls	r2, r2, #4
 8023e58:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8023e5c:	eba2 0e08 	sub.w	lr, r2, r8
 8023e60:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023e64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023e66:	b280      	uxth	r0, r0
 8023e68:	fa1f fe8e 	uxth.w	lr, lr
 8023e6c:	1a09      	subs	r1, r1, r0
 8023e6e:	fb0e f202 	mul.w	r2, lr, r2
 8023e72:	b289      	uxth	r1, r1
 8023e74:	fb01 220c 	mla	r2, r1, ip, r2
 8023e78:	fb00 2204 	mla	r2, r0, r4, r2
 8023e7c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023e7e:	fb08 2204 	mla	r2, r8, r4, r2
 8023e82:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023e86:	2a00      	cmp	r2, #0
 8023e88:	f000 80e9 	beq.w	802405e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 8023e8c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023e90:	d019      	beq.n	8023ec6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8023e92:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023e96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023e9a:	fb0c fa0a 	mul.w	sl, ip, sl
 8023e9e:	fb0c fc03 	mul.w	ip, ip, r3
 8023ea2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023ea6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023eaa:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023eae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023eb2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023eb6:	4453      	add	r3, sl
 8023eb8:	0a3f      	lsrs	r7, r7, #8
 8023eba:	0a1b      	lsrs	r3, r3, #8
 8023ebc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023ec0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023ec4:	433b      	orrs	r3, r7
 8023ec6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023ec8:	2cff      	cmp	r4, #255	; 0xff
 8023eca:	d020      	beq.n	8023f0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8023ecc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023ece:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023ed2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023ed4:	4367      	muls	r7, r4
 8023ed6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023ed8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023edc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023ee0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023ee2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023ee6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023eea:	fb04 fa0a 	mul.w	sl, r4, sl
 8023eee:	44bc      	add	ip, r7
 8023ef0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023ef4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023ef8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023efc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f00:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f04:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023f08:	ea4c 040a 	orr.w	r4, ip, sl
 8023f0c:	940d      	str	r4, [sp, #52]	; 0x34
 8023f0e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023f10:	2cff      	cmp	r4, #255	; 0xff
 8023f12:	d020      	beq.n	8023f56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8023f14:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023f16:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023f1a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023f1c:	4367      	muls	r7, r4
 8023f1e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023f20:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023f24:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023f28:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023f2a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023f2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f32:	fb04 fa0a 	mul.w	sl, r4, sl
 8023f36:	44bc      	add	ip, r7
 8023f38:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023f3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f40:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023f44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f48:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f4c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023f50:	ea4c 040a 	orr.w	r4, ip, sl
 8023f54:	9409      	str	r4, [sp, #36]	; 0x24
 8023f56:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023f58:	2cff      	cmp	r4, #255	; 0xff
 8023f5a:	d020      	beq.n	8023f9e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8023f5c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023f5e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023f62:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023f64:	4367      	muls	r7, r4
 8023f66:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023f68:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023f6c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023f70:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023f72:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023f76:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f7a:	fb04 fa0a 	mul.w	sl, r4, sl
 8023f7e:	44bc      	add	ip, r7
 8023f80:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023f84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f88:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023f8c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f90:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f94:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023f98:	ea4c 040a 	orr.w	r4, ip, sl
 8023f9c:	940e      	str	r4, [sp, #56]	; 0x38
 8023f9e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023fa0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023fa4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023fa8:	43d2      	mvns	r2, r2
 8023faa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023fae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023fb0:	b2d2      	uxtb	r2, r2
 8023fb2:	fb0e f707 	mul.w	r7, lr, r7
 8023fb6:	fb01 770c 	mla	r7, r1, ip, r7
 8023fba:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023fbe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023fc0:	fb00 770c 	mla	r7, r0, ip, r7
 8023fc4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023fc8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023fca:	fb08 770c 	mla	r7, r8, ip, r7
 8023fce:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8023fd2:	fb0e fe0c 	mul.w	lr, lr, ip
 8023fd6:	0a3f      	lsrs	r7, r7, #8
 8023fd8:	fb01 e303 	mla	r3, r1, r3, lr
 8023fdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023fde:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023fe2:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8023fe6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023fe8:	fb00 330a 	mla	r3, r0, sl, r3
 8023fec:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8023ff0:	fb08 3c0c 	mla	ip, r8, ip, r3
 8023ff4:	f8b9 3000 	ldrh.w	r3, [r9]
 8023ff8:	1218      	asrs	r0, r3, #8
 8023ffa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023ffe:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024002:	10d9      	asrs	r1, r3, #3
 8024004:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024008:	00db      	lsls	r3, r3, #3
 802400a:	4350      	muls	r0, r2
 802400c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024010:	ea47 070c 	orr.w	r7, r7, ip
 8024014:	b2db      	uxtb	r3, r3
 8024016:	f100 0c01 	add.w	ip, r0, #1
 802401a:	4351      	muls	r1, r2
 802401c:	4353      	muls	r3, r2
 802401e:	4a1d      	ldr	r2, [pc, #116]	; (8024094 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 8024020:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8024024:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8024028:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 802402c:	f103 0c01 	add.w	ip, r3, #1
 8024030:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024034:	fa5f fc87 	uxtb.w	ip, r7
 8024038:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802403c:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8024040:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024044:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 8024048:	1c4b      	adds	r3, r1, #1
 802404a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802404e:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 8024052:	00ff      	lsls	r7, r7, #3
 8024054:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024058:	4338      	orrs	r0, r7
 802405a:	f8a9 0000 	strh.w	r0, [r9]
 802405e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8024060:	f109 0902 	add.w	r9, r9, #2
 8024064:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024066:	f10b 3bff 	add.w	fp, fp, #4294967295
 802406a:	441a      	add	r2, r3
 802406c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802406e:	922d      	str	r2, [sp, #180]	; 0xb4
 8024070:	441d      	add	r5, r3
 8024072:	e649      	b.n	8023d08 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8024074:	2800      	cmp	r0, #0
 8024076:	f43f aee9 	beq.w	8023e4c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 802407a:	5c79      	ldrb	r1, [r7, r1]
 802407c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024080:	9109      	str	r1, [sp, #36]	; 0x24
 8024082:	0e09      	lsrs	r1, r1, #24
 8024084:	9111      	str	r1, [sp, #68]	; 0x44
 8024086:	e6e1      	b.n	8023e4c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8024088:	b01b      	add	sp, #108	; 0x6c
 802408a:	ecbd 8b08 	vpop	{d8-d11}
 802408e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024092:	bf00      	nop
 8024094:	fffff800 	.word	0xfffff800

08024098 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8024098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802409c:	b085      	sub	sp, #20
 802409e:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80240a2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80240a6:	9103      	str	r1, [sp, #12]
 80240a8:	2d00      	cmp	r5, #0
 80240aa:	fb05 7106 	mla	r1, r5, r6, r7
 80240ae:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80240b2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80240b6:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 80240ba:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80240be:	eb03 0901 	add.w	r9, r3, r1
 80240c2:	9401      	str	r4, [sp, #4]
 80240c4:	f2c0 80c0 	blt.w	8024248 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80240c8:	45a8      	cmp	r8, r5
 80240ca:	f340 80bd 	ble.w	8024248 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80240ce:	2f00      	cmp	r7, #0
 80240d0:	f2c0 80b6 	blt.w	8024240 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80240d4:	42be      	cmp	r6, r7
 80240d6:	f340 80b3 	ble.w	8024240 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80240da:	f813 c001 	ldrb.w	ip, [r3, r1]
 80240de:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80240e2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80240e6:	d019      	beq.n	802411c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 80240e8:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 80240ec:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80240f0:	435a      	muls	r2, r3
 80240f2:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 80240f6:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80240fa:	fb0c f403 	mul.w	r4, ip, r3
 80240fe:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8024102:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8024106:	441a      	add	r2, r3
 8024108:	f104 0320 	add.w	r3, r4, #32
 802410c:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8024110:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8024114:	0a1b      	lsrs	r3, r3, #8
 8024116:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802411a:	4319      	orrs	r1, r3
 802411c:	b289      	uxth	r1, r1
 802411e:	1c7b      	adds	r3, r7, #1
 8024120:	f100 8097 	bmi.w	8024252 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8024124:	429e      	cmp	r6, r3
 8024126:	f340 8094 	ble.w	8024252 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 802412a:	2800      	cmp	r0, #0
 802412c:	f000 8094 	beq.w	8024258 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8024130:	f899 4001 	ldrb.w	r4, [r9, #1]
 8024134:	9b01      	ldr	r3, [sp, #4]
 8024136:	2cff      	cmp	r4, #255	; 0xff
 8024138:	885b      	ldrh	r3, [r3, #2]
 802413a:	d01b      	beq.n	8024174 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 802413c:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8024140:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8024144:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024148:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802414c:	fb0a f202 	mul.w	r2, sl, r2
 8024150:	fb04 fa03 	mul.w	sl, r4, r3
 8024154:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8024158:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802415c:	441a      	add	r2, r3
 802415e:	f10a 0320 	add.w	r3, sl, #32
 8024162:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8024166:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 802416a:	0a1b      	lsrs	r3, r3, #8
 802416c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024170:	ea4b 0303 	orr.w	r3, fp, r3
 8024174:	b29b      	uxth	r3, r3
 8024176:	3501      	adds	r5, #1
 8024178:	d474      	bmi.n	8024264 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 802417a:	45a8      	cmp	r8, r5
 802417c:	dd72      	ble.n	8024264 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 802417e:	f1be 0f00 	cmp.w	lr, #0
 8024182:	f000 8120 	beq.w	80243c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 8024186:	2f00      	cmp	r7, #0
 8024188:	db69      	blt.n	802425e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 802418a:	42be      	cmp	r6, r7
 802418c:	dd67      	ble.n	802425e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 802418e:	f819 5006 	ldrb.w	r5, [r9, r6]
 8024192:	9a01      	ldr	r2, [sp, #4]
 8024194:	2dff      	cmp	r5, #255	; 0xff
 8024196:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 802419a:	d01c      	beq.n	80241d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 802419c:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 80241a0:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80241a4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80241a8:	fb08 f802 	mul.w	r8, r8, r2
 80241ac:	fb05 fa0b 	mul.w	sl, r5, fp
 80241b0:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80241b4:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 80241b8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80241bc:	4490      	add	r8, r2
 80241be:	f10a 0220 	add.w	r2, sl, #32
 80241c2:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 80241c6:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 80241ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80241ce:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80241d2:	ea4b 0b0a 	orr.w	fp, fp, sl
 80241d6:	fa1f fb8b 	uxth.w	fp, fp
 80241da:	3701      	adds	r7, #1
 80241dc:	d447      	bmi.n	802426e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 80241de:	42be      	cmp	r6, r7
 80241e0:	dd45      	ble.n	802426e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 80241e2:	2800      	cmp	r0, #0
 80241e4:	d046      	beq.n	8024274 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 80241e6:	3601      	adds	r6, #1
 80241e8:	9a01      	ldr	r2, [sp, #4]
 80241ea:	f819 7006 	ldrb.w	r7, [r9, r6]
 80241ee:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 80241f2:	2fff      	cmp	r7, #255	; 0xff
 80241f4:	d01a      	beq.n	802422c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 80241f6:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 80241fa:	ea4f 08e7 	mov.w	r8, r7, asr #3
 80241fe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024202:	fb08 f806 	mul.w	r8, r8, r6
 8024206:	fb07 f902 	mul.w	r9, r7, r2
 802420a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 802420e:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8024212:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024216:	44b0      	add	r8, r6
 8024218:	f109 0620 	add.w	r6, r9, #32
 802421c:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8024220:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8024224:	0a36      	lsrs	r6, r6, #8
 8024226:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802422a:	4332      	orrs	r2, r6
 802422c:	b292      	uxth	r2, r2
 802422e:	280f      	cmp	r0, #15
 8024230:	d922      	bls.n	8024278 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8024232:	4b69      	ldr	r3, [pc, #420]	; (80243d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8024234:	f240 210d 	movw	r1, #525	; 0x20d
 8024238:	4a68      	ldr	r2, [pc, #416]	; (80243dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 802423a:	4869      	ldr	r0, [pc, #420]	; (80243e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 802423c:	f004 fa2c 	bl	8028698 <__assert_func>
 8024240:	f04f 0c00 	mov.w	ip, #0
 8024244:	4661      	mov	r1, ip
 8024246:	e76a      	b.n	802411e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 8024248:	2400      	movs	r4, #0
 802424a:	46a4      	mov	ip, r4
 802424c:	4623      	mov	r3, r4
 802424e:	4621      	mov	r1, r4
 8024250:	e791      	b.n	8024176 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8024252:	2400      	movs	r4, #0
 8024254:	4623      	mov	r3, r4
 8024256:	e78e      	b.n	8024176 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8024258:	4604      	mov	r4, r0
 802425a:	4603      	mov	r3, r0
 802425c:	e78b      	b.n	8024176 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 802425e:	2500      	movs	r5, #0
 8024260:	46ab      	mov	fp, r5
 8024262:	e7ba      	b.n	80241da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8024264:	2700      	movs	r7, #0
 8024266:	463d      	mov	r5, r7
 8024268:	463a      	mov	r2, r7
 802426a:	46bb      	mov	fp, r7
 802426c:	e7df      	b.n	802422e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 802426e:	2700      	movs	r7, #0
 8024270:	463a      	mov	r2, r7
 8024272:	e7dc      	b.n	802422e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8024274:	4607      	mov	r7, r0
 8024276:	4602      	mov	r2, r0
 8024278:	f1be 0f0f 	cmp.w	lr, #15
 802427c:	d8d9      	bhi.n	8024232 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 802427e:	b286      	uxth	r6, r0
 8024280:	fa1f f98e 	uxth.w	r9, lr
 8024284:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8024288:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802428c:	fb06 f809 	mul.w	r8, r6, r9
 8024290:	0136      	lsls	r6, r6, #4
 8024292:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024296:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802429a:	9601      	str	r6, [sp, #4]
 802429c:	ea4a 0101 	orr.w	r1, sl, r1
 80242a0:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 80242a4:	fa1f f689 	uxth.w	r6, r9
 80242a8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80242ac:	fb10 f90e 	smulbb	r9, r0, lr
 80242b0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80242b4:	9602      	str	r6, [sp, #8]
 80242b6:	460e      	mov	r6, r1
 80242b8:	ea4f 09e9 	mov.w	r9, r9, asr #3
 80242bc:	f1ce 0110 	rsb	r1, lr, #16
 80242c0:	ea4a 0303 	orr.w	r3, sl, r3
 80242c4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80242c8:	1a09      	subs	r1, r1, r0
 80242ca:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 80242ce:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80242d2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80242d6:	4343      	muls	r3, r0
 80242d8:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 80242dc:	9801      	ldr	r0, [sp, #4]
 80242de:	ea4a 0202 	orr.w	r2, sl, r2
 80242e2:	fb01 3106 	mla	r1, r1, r6, r3
 80242e6:	9e02      	ldr	r6, [sp, #8]
 80242e8:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80242ec:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 80242f0:	fb09 1302 	mla	r3, r9, r2, r1
 80242f4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80242f8:	1b80      	subs	r0, r0, r6
 80242fa:	9e01      	ldr	r6, [sp, #4]
 80242fc:	9a03      	ldr	r2, [sp, #12]
 80242fe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024302:	eba6 0608 	sub.w	r6, r6, r8
 8024306:	b280      	uxth	r0, r0
 8024308:	8811      	ldrh	r1, [r2, #0]
 802430a:	ea4a 0b0b 	orr.w	fp, sl, fp
 802430e:	b2b6      	uxth	r6, r6
 8024310:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8024314:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8024318:	4374      	muls	r4, r6
 802431a:	b292      	uxth	r2, r2
 802431c:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8024320:	fb0c 4400 	mla	r4, ip, r0, r4
 8024324:	9802      	ldr	r0, [sp, #8]
 8024326:	ea4f 535e 	mov.w	r3, lr, lsr #21
 802432a:	fb00 4505 	mla	r5, r0, r5, r4
 802432e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024332:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024336:	1208      	asrs	r0, r1, #8
 8024338:	fb08 5707 	mla	r7, r8, r7, r5
 802433c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024340:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024344:	10cd      	asrs	r5, r1, #3
 8024346:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802434a:	ea43 0e0e 	orr.w	lr, r3, lr
 802434e:	00c9      	lsls	r1, r1, #3
 8024350:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8024354:	4357      	muls	r7, r2
 8024356:	fa1f f38e 	uxth.w	r3, lr
 802435a:	b2c9      	uxtb	r1, r1
 802435c:	f107 0801 	add.w	r8, r7, #1
 8024360:	121c      	asrs	r4, r3, #8
 8024362:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8024366:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802436a:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 802436e:	b2ff      	uxtb	r7, r7
 8024370:	fb10 f007 	smulbb	r0, r0, r7
 8024374:	fb11 f107 	smulbb	r1, r1, r7
 8024378:	fb04 0402 	mla	r4, r4, r2, r0
 802437c:	10d8      	asrs	r0, r3, #3
 802437e:	fb15 f507 	smulbb	r5, r5, r7
 8024382:	00db      	lsls	r3, r3, #3
 8024384:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024388:	b2a4      	uxth	r4, r4
 802438a:	b2db      	uxtb	r3, r3
 802438c:	fb00 5002 	mla	r0, r0, r2, r5
 8024390:	fb03 1202 	mla	r2, r3, r2, r1
 8024394:	1c63      	adds	r3, r4, #1
 8024396:	b280      	uxth	r0, r0
 8024398:	b292      	uxth	r2, r2
 802439a:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 802439e:	1c51      	adds	r1, r2, #1
 80243a0:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80243a4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80243a8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80243ac:	4313      	orrs	r3, r2
 80243ae:	1c42      	adds	r2, r0, #1
 80243b0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80243b4:	9a03      	ldr	r2, [sp, #12]
 80243b6:	0940      	lsrs	r0, r0, #5
 80243b8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80243bc:	4303      	orrs	r3, r0
 80243be:	8013      	strh	r3, [r2, #0]
 80243c0:	b005      	add	sp, #20
 80243c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243c6:	280f      	cmp	r0, #15
 80243c8:	f63f af33 	bhi.w	8024232 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 80243cc:	4677      	mov	r7, lr
 80243ce:	4675      	mov	r5, lr
 80243d0:	4672      	mov	r2, lr
 80243d2:	46f3      	mov	fp, lr
 80243d4:	e753      	b.n	802427e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 80243d6:	bf00      	nop
 80243d8:	0802ceb2 	.word	0x0802ceb2
 80243dc:	0802d475 	.word	0x0802d475
 80243e0:	0802cf9b 	.word	0x0802cf9b

080243e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80243e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243e8:	ed2d 8b08 	vpush	{d8-d11}
 80243ec:	b097      	sub	sp, #92	; 0x5c
 80243ee:	eeb0 aa40 	vmov.f32	s20, s0
 80243f2:	eef0 9a60 	vmov.f32	s19, s1
 80243f6:	9214      	str	r2, [sp, #80]	; 0x50
 80243f8:	eeb0 9a41 	vmov.f32	s18, s2
 80243fc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80243fe:	eeb0 8a62 	vmov.f32	s16, s5
 8024402:	9308      	str	r3, [sp, #32]
 8024404:	eef0 8a43 	vmov.f32	s17, s6
 8024408:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802440c:	eef0 ba44 	vmov.f32	s23, s8
 8024410:	9015      	str	r0, [sp, #84]	; 0x54
 8024412:	eeb0 ba64 	vmov.f32	s22, s9
 8024416:	9312      	str	r3, [sp, #72]	; 0x48
 8024418:	eef0 aa45 	vmov.f32	s21, s10
 802441c:	6850      	ldr	r0, [r2, #4]
 802441e:	9111      	str	r1, [sp, #68]	; 0x44
 8024420:	6812      	ldr	r2, [r2, #0]
 8024422:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8024426:	fb00 1303 	mla	r3, r0, r3, r1
 802442a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802442e:	9309      	str	r3, [sp, #36]	; 0x24
 8024430:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024432:	681b      	ldr	r3, [r3, #0]
 8024434:	930b      	str	r3, [sp, #44]	; 0x2c
 8024436:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024438:	685b      	ldr	r3, [r3, #4]
 802443a:	930c      	str	r3, [sp, #48]	; 0x30
 802443c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8024440:	930a      	str	r3, [sp, #40]	; 0x28
 8024442:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024444:	2b00      	cmp	r3, #0
 8024446:	dc03      	bgt.n	8024450 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024448:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802444a:	2b00      	cmp	r3, #0
 802444c:	f340 83cd 	ble.w	8024bea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8024450:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024452:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024456:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802445a:	1e48      	subs	r0, r1, #1
 802445c:	1e55      	subs	r5, r2, #1
 802445e:	9b08      	ldr	r3, [sp, #32]
 8024460:	2b00      	cmp	r3, #0
 8024462:	f340 81a5 	ble.w	80247b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8024466:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8024468:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802446a:	1436      	asrs	r6, r6, #16
 802446c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024470:	d406      	bmi.n	8024480 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024472:	4286      	cmp	r6, r0
 8024474:	da04      	bge.n	8024480 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024476:	2b00      	cmp	r3, #0
 8024478:	db02      	blt.n	8024480 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802447a:	42ab      	cmp	r3, r5
 802447c:	f2c0 8199 	blt.w	80247b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8024480:	3601      	adds	r6, #1
 8024482:	f100 8186 	bmi.w	8024792 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024486:	42b1      	cmp	r1, r6
 8024488:	f2c0 8183 	blt.w	8024792 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802448c:	3301      	adds	r3, #1
 802448e:	f100 8180 	bmi.w	8024792 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024492:	429a      	cmp	r2, r3
 8024494:	f2c0 817d 	blt.w	8024792 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024498:	9b08      	ldr	r3, [sp, #32]
 802449a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802449e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80244a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80244a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80244a4:	2b00      	cmp	r3, #0
 80244a6:	f340 81a6 	ble.w	80247f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80244aa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80244ac:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80244ae:	1418      	asrs	r0, r3, #16
 80244b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80244b2:	142d      	asrs	r5, r5, #16
 80244b4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80244b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80244ba:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80244be:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80244c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80244c4:	f100 81fa 	bmi.w	80248bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80244c8:	f102 3eff 	add.w	lr, r2, #4294967295
 80244cc:	4575      	cmp	r5, lr
 80244ce:	f280 81f5 	bge.w	80248bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80244d2:	2800      	cmp	r0, #0
 80244d4:	f2c0 81f2 	blt.w	80248bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80244d8:	f103 3eff 	add.w	lr, r3, #4294967295
 80244dc:	4570      	cmp	r0, lr
 80244de:	f280 81ed 	bge.w	80248bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80244e2:	b212      	sxth	r2, r2
 80244e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80244e6:	fa1f fe81 	uxth.w	lr, r1
 80244ea:	fb00 5002 	mla	r0, r0, r2, r5
 80244ee:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80244f2:	eb03 0a00 	add.w	sl, r3, r0
 80244f6:	f813 9000 	ldrb.w	r9, [r3, r0]
 80244fa:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80244fe:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024502:	b29b      	uxth	r3, r3
 8024504:	f1bc 0f00 	cmp.w	ip, #0
 8024508:	f000 81bb 	beq.w	8024882 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802450c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8024510:	eb0a 0b02 	add.w	fp, sl, r2
 8024514:	fa1f fa8c 	uxth.w	sl, ip
 8024518:	940d      	str	r4, [sp, #52]	; 0x34
 802451a:	fb0a fe0e 	mul.w	lr, sl, lr
 802451e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024522:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8024526:	eba5 050e 	sub.w	r5, r5, lr
 802452a:	940e      	str	r4, [sp, #56]	; 0x38
 802452c:	fa1f fa8a 	uxth.w	sl, sl
 8024530:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024532:	b2ad      	uxth	r5, r5
 8024534:	eba3 030a 	sub.w	r3, r3, sl
 8024538:	fb08 f505 	mul.w	r5, r8, r5
 802453c:	b29b      	uxth	r3, r3
 802453e:	fb09 5303 	mla	r3, r9, r3, r5
 8024542:	fb0a 3304 	mla	r3, sl, r4, r3
 8024546:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024548:	fb0e 3304 	mla	r3, lr, r4, r3
 802454c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024550:	2b00      	cmp	r3, #0
 8024552:	f000 8111 	beq.w	8024778 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8024556:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024558:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802455c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8024560:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8024564:	f000 8192 	beq.w	802488c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8024568:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802456c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024570:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024574:	fb0a fe0e 	mul.w	lr, sl, lr
 8024578:	fb09 f000 	mul.w	r0, r9, r0
 802457c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8024580:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024584:	f100 0b20 	add.w	fp, r0, #32
 8024588:	44ce      	add	lr, r9
 802458a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802458e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8024592:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024596:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802459a:	ea4e 0909 	orr.w	r9, lr, r9
 802459e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80245a2:	8868      	ldrh	r0, [r5, #2]
 80245a4:	d019      	beq.n	80245da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80245a6:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80245aa:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80245ae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80245b2:	fb0a fe0e 	mul.w	lr, sl, lr
 80245b6:	fb08 f800 	mul.w	r8, r8, r0
 80245ba:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80245be:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80245c2:	f108 0b20 	add.w	fp, r8, #32
 80245c6:	4486      	add	lr, r0
 80245c8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80245cc:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80245d0:	0a00      	lsrs	r0, r0, #8
 80245d2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80245d6:	ea4e 0000 	orr.w	r0, lr, r0
 80245da:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80245de:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80245e2:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80245e6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80245ea:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80245ee:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80245f2:	ea4e 0909 	orr.w	r9, lr, r9
 80245f6:	ea4a 0000 	orr.w	r0, sl, r0
 80245fa:	f1bc 0f00 	cmp.w	ip, #0
 80245fe:	f000 8147 	beq.w	8024890 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8024602:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8024606:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024608:	3a01      	subs	r2, #1
 802460a:	2cff      	cmp	r4, #255	; 0xff
 802460c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024610:	f102 0202 	add.w	r2, r2, #2
 8024614:	eb05 0e02 	add.w	lr, r5, r2
 8024618:	5aaa      	ldrh	r2, [r5, r2]
 802461a:	d018      	beq.n	802464e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 802461c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8024620:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024624:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024628:	fb04 fa02 	mul.w	sl, r4, r2
 802462c:	fb08 f805 	mul.w	r8, r8, r5
 8024630:	f10a 0520 	add.w	r5, sl, #32
 8024634:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8024638:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802463c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8024640:	4442      	add	r2, r8
 8024642:	0a2d      	lsrs	r5, r5, #8
 8024644:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8024648:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802464c:	432a      	orrs	r2, r5
 802464e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024650:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8024654:	2cff      	cmp	r4, #255	; 0xff
 8024656:	d01a      	beq.n	802468e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8024658:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 802465c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024660:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024664:	fb04 fa05 	mul.w	sl, r4, r5
 8024668:	fb08 f80e 	mul.w	r8, r8, lr
 802466c:	f10a 0e20 	add.w	lr, sl, #32
 8024670:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8024674:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024678:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802467c:	4445      	add	r5, r8
 802467e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024682:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8024686:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802468a:	ea45 050e 	orr.w	r5, r5, lr
 802468e:	fb1c fe01 	smulbb	lr, ip, r1
 8024692:	f1cc 0810 	rsb	r8, ip, #16
 8024696:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802469a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802469e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80246a2:	eba8 0801 	sub.w	r8, r8, r1
 80246a6:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80246aa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80246ae:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80246b2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80246b6:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80246ba:	ea4a 0202 	orr.w	r2, sl, r2
 80246be:	4341      	muls	r1, r0
 80246c0:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80246c4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80246c8:	fb09 1108 	mla	r1, r9, r8, r1
 80246cc:	ea4b 0505 	orr.w	r5, fp, r5
 80246d0:	fb0c 1102 	mla	r1, ip, r2, r1
 80246d4:	fb0e 1e05 	mla	lr, lr, r5, r1
 80246d8:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80246dc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80246e0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80246e4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80246e8:	ea42 0e0e 	orr.w	lr, r2, lr
 80246ec:	fa1f f28e 	uxth.w	r2, lr
 80246f0:	2bff      	cmp	r3, #255	; 0xff
 80246f2:	d103      	bne.n	80246fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80246f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80246f6:	29ff      	cmp	r1, #255	; 0xff
 80246f8:	f000 80de 	beq.w	80248b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 80246fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80246fe:	8838      	ldrh	r0, [r7, #0]
 8024700:	434b      	muls	r3, r1
 8024702:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024704:	1205      	asrs	r5, r0, #8
 8024706:	f103 0c01 	add.w	ip, r3, #1
 802470a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802470e:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8024712:	ea6f 2c23 	mvn.w	ip, r3, asr #8
 8024716:	1213      	asrs	r3, r2, #8
 8024718:	fa5f fc8c 	uxtb.w	ip, ip
 802471c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024720:	fb15 f50c 	smulbb	r5, r5, ip
 8024724:	fb03 5301 	mla	r3, r3, r1, r5
 8024728:	10d1      	asrs	r1, r2, #3
 802472a:	00d2      	lsls	r2, r2, #3
 802472c:	b29d      	uxth	r5, r3
 802472e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024732:	10c3      	asrs	r3, r0, #3
 8024734:	00c0      	lsls	r0, r0, #3
 8024736:	b2d2      	uxtb	r2, r2
 8024738:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802473c:	b2c0      	uxtb	r0, r0
 802473e:	fb13 f30c 	smulbb	r3, r3, ip
 8024742:	fb10 f00c 	smulbb	r0, r0, ip
 8024746:	fb01 3104 	mla	r1, r1, r4, r3
 802474a:	1c6b      	adds	r3, r5, #1
 802474c:	fb02 0204 	mla	r2, r2, r4, r0
 8024750:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8024754:	b292      	uxth	r2, r2
 8024756:	b289      	uxth	r1, r1
 8024758:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802475c:	1c50      	adds	r0, r2, #1
 802475e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8024762:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024766:	4313      	orrs	r3, r2
 8024768:	1c4a      	adds	r2, r1, #1
 802476a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802476e:	0949      	lsrs	r1, r1, #5
 8024770:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024774:	430b      	orrs	r3, r1
 8024776:	803b      	strh	r3, [r7, #0]
 8024778:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802477a:	3702      	adds	r7, #2
 802477c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802477e:	4413      	add	r3, r2
 8024780:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024782:	9329      	str	r3, [sp, #164]	; 0xa4
 8024784:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024786:	441a      	add	r2, r3
 8024788:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802478a:	3b01      	subs	r3, #1
 802478c:	922a      	str	r2, [sp, #168]	; 0xa8
 802478e:	9313      	str	r3, [sp, #76]	; 0x4c
 8024790:	e687      	b.n	80244a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8024792:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024794:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8024796:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8024798:	4433      	add	r3, r6
 802479a:	9329      	str	r3, [sp, #164]	; 0xa4
 802479c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802479e:	441c      	add	r4, r3
 80247a0:	9b08      	ldr	r3, [sp, #32]
 80247a2:	3b01      	subs	r3, #1
 80247a4:	942a      	str	r4, [sp, #168]	; 0xa8
 80247a6:	9308      	str	r3, [sp, #32]
 80247a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80247aa:	3302      	adds	r3, #2
 80247ac:	9309      	str	r3, [sp, #36]	; 0x24
 80247ae:	e656      	b.n	802445e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80247b0:	d028      	beq.n	8024804 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80247b2:	9b08      	ldr	r3, [sp, #32]
 80247b4:	982b      	ldr	r0, [sp, #172]	; 0xac
 80247b6:	3b01      	subs	r3, #1
 80247b8:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80247ba:	fb00 5003 	mla	r0, r0, r3, r5
 80247be:	1400      	asrs	r0, r0, #16
 80247c0:	f53f ae6a 	bmi.w	8024498 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80247c4:	3901      	subs	r1, #1
 80247c6:	4288      	cmp	r0, r1
 80247c8:	f6bf ae66 	bge.w	8024498 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80247cc:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80247ce:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80247d0:	fb01 0303 	mla	r3, r1, r3, r0
 80247d4:	141b      	asrs	r3, r3, #16
 80247d6:	f53f ae5f 	bmi.w	8024498 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80247da:	3a01      	subs	r2, #1
 80247dc:	4293      	cmp	r3, r2
 80247de:	f6bf ae5b 	bge.w	8024498 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80247e2:	9b08      	ldr	r3, [sp, #32]
 80247e4:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80247e8:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80247ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80247ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80247f0:	2b00      	cmp	r3, #0
 80247f2:	f300 8082 	bgt.w	80248fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 80247f6:	9b08      	ldr	r3, [sp, #32]
 80247f8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80247fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80247fe:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8024802:	9309      	str	r3, [sp, #36]	; 0x24
 8024804:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024806:	2b00      	cmp	r3, #0
 8024808:	f340 81ef 	ble.w	8024bea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 802480c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024810:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024812:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024816:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802481a:	eef0 6a48 	vmov.f32	s13, s16
 802481e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024822:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024826:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802482a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802482e:	eef0 6a68 	vmov.f32	s13, s17
 8024832:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024836:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 802483a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802483e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024842:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024846:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802484a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802484e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024852:	ee18 2a10 	vmov	r2, s16
 8024856:	eeb0 8a47 	vmov.f32	s16, s14
 802485a:	fb92 f3f3 	sdiv	r3, r2, r3
 802485e:	ee18 2a90 	vmov	r2, s17
 8024862:	932b      	str	r3, [sp, #172]	; 0xac
 8024864:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024866:	eef0 8a67 	vmov.f32	s17, s15
 802486a:	fb92 f3f3 	sdiv	r3, r2, r3
 802486e:	932c      	str	r3, [sp, #176]	; 0xb0
 8024870:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024872:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024874:	3b01      	subs	r3, #1
 8024876:	9311      	str	r3, [sp, #68]	; 0x44
 8024878:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802487a:	bf08      	it	eq
 802487c:	4613      	moveq	r3, r2
 802487e:	9308      	str	r3, [sp, #32]
 8024880:	e5df      	b.n	8024442 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8024882:	fb08 f505 	mul.w	r5, r8, r5
 8024886:	fb09 5303 	mla	r3, r9, r3, r5
 802488a:	e65f      	b.n	802454c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 802488c:	4681      	mov	r9, r0
 802488e:	e686      	b.n	802459e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024890:	f1c1 0210 	rsb	r2, r1, #16
 8024894:	4341      	muls	r1, r0
 8024896:	fb09 1902 	mla	r9, r9, r2, r1
 802489a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802489e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80248a2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80248a6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80248aa:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80248ae:	ea42 0909 	orr.w	r9, r2, r9
 80248b2:	fa1f f289 	uxth.w	r2, r9
 80248b6:	e71b      	b.n	80246f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80248b8:	803a      	strh	r2, [r7, #0]
 80248ba:	e75d      	b.n	8024778 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80248bc:	f115 0e01 	adds.w	lr, r5, #1
 80248c0:	f53f af5a 	bmi.w	8024778 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80248c4:	4572      	cmp	r2, lr
 80248c6:	f6ff af57 	blt.w	8024778 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80248ca:	f110 0e01 	adds.w	lr, r0, #1
 80248ce:	f53f af53 	bmi.w	8024778 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80248d2:	4573      	cmp	r3, lr
 80248d4:	f6ff af50 	blt.w	8024778 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80248d8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80248da:	b21b      	sxth	r3, r3
 80248dc:	b212      	sxth	r2, r2
 80248de:	9502      	str	r5, [sp, #8]
 80248e0:	9301      	str	r3, [sp, #4]
 80248e2:	9200      	str	r2, [sp, #0]
 80248e4:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80248e8:	e9cd c405 	strd	ip, r4, [sp, #20]
 80248ec:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 80248f0:	4639      	mov	r1, r7
 80248f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80248f4:	f7ff fbd0 	bl	8024098 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 80248f8:	e73e      	b.n	8024778 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80248fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80248fc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024900:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024902:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8024906:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024908:	fa1f fc82 	uxth.w	ip, r2
 802490c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024910:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024912:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8024916:	141f      	asrs	r7, r3, #16
 8024918:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802491a:	141b      	asrs	r3, r3, #16
 802491c:	fb01 3707 	mla	r7, r1, r7, r3
 8024920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024922:	eb03 0a07 	add.w	sl, r3, r7
 8024926:	f813 9007 	ldrb.w	r9, [r3, r7]
 802492a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802492e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024932:	b29b      	uxth	r3, r3
 8024934:	2d00      	cmp	r5, #0
 8024936:	f000 813d 	beq.w	8024bb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 802493a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802493e:	eb0a 0b01 	add.w	fp, sl, r1
 8024942:	fa1f fa85 	uxth.w	sl, r5
 8024946:	940f      	str	r4, [sp, #60]	; 0x3c
 8024948:	fb0a fc0c 	mul.w	ip, sl, ip
 802494c:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024950:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8024954:	eba0 000c 	sub.w	r0, r0, ip
 8024958:	9410      	str	r4, [sp, #64]	; 0x40
 802495a:	fa1f fa8a 	uxth.w	sl, sl
 802495e:	b280      	uxth	r0, r0
 8024960:	eba3 030a 	sub.w	r3, r3, sl
 8024964:	fb08 f000 	mul.w	r0, r8, r0
 8024968:	b29b      	uxth	r3, r3
 802496a:	fb09 0303 	mla	r3, r9, r3, r0
 802496e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024970:	fb0a 3300 	mla	r3, sl, r0, r3
 8024974:	fb0c 3304 	mla	r3, ip, r4, r3
 8024978:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802497c:	2b00      	cmp	r3, #0
 802497e:	f000 810b 	beq.w	8024b98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8024982:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024984:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024988:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802498a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802498e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8024992:	f000 8114 	beq.w	8024bbe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 8024996:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802499a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802499e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80249a2:	fb0a fc0c 	mul.w	ip, sl, ip
 80249a6:	fb09 f707 	mul.w	r7, r9, r7
 80249aa:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80249ae:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80249b2:	f107 0b20 	add.w	fp, r7, #32
 80249b6:	44cc      	add	ip, r9
 80249b8:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80249bc:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80249c0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80249c4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80249c8:	ea4c 0909 	orr.w	r9, ip, r9
 80249cc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80249d0:	8847      	ldrh	r7, [r0, #2]
 80249d2:	d019      	beq.n	8024a08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 80249d4:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80249d8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80249dc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80249e0:	fb0a fc0c 	mul.w	ip, sl, ip
 80249e4:	fb08 f807 	mul.w	r8, r8, r7
 80249e8:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80249ec:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80249f0:	f108 0b20 	add.w	fp, r8, #32
 80249f4:	44bc      	add	ip, r7
 80249f6:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80249fa:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80249fe:	0a3f      	lsrs	r7, r7, #8
 8024a00:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024a04:	ea4c 0707 	orr.w	r7, ip, r7
 8024a08:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8024a0c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024a10:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8024a14:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024a18:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024a1c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024a20:	ea4c 0909 	orr.w	r9, ip, r9
 8024a24:	ea4a 0707 	orr.w	r7, sl, r7
 8024a28:	2d00      	cmp	r5, #0
 8024a2a:	f000 80ca 	beq.w	8024bc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8024a2e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8024a32:	3901      	subs	r1, #1
 8024a34:	0049      	lsls	r1, r1, #1
 8024a36:	3102      	adds	r1, #2
 8024a38:	eb00 0c01 	add.w	ip, r0, r1
 8024a3c:	5a41      	ldrh	r1, [r0, r1]
 8024a3e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024a40:	28ff      	cmp	r0, #255	; 0xff
 8024a42:	d019      	beq.n	8024a78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8024a44:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8024a48:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024a4a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024a4e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024a52:	fb04 fa01 	mul.w	sl, r4, r1
 8024a56:	fb08 f800 	mul.w	r8, r8, r0
 8024a5a:	f10a 0020 	add.w	r0, sl, #32
 8024a5e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8024a62:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024a66:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8024a6a:	4441      	add	r1, r8
 8024a6c:	0a00      	lsrs	r0, r0, #8
 8024a6e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8024a72:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024a76:	4301      	orrs	r1, r0
 8024a78:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024a7a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8024a7e:	2cff      	cmp	r4, #255	; 0xff
 8024a80:	d01a      	beq.n	8024ab8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8024a82:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8024a86:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024a8a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024a8e:	fb04 fa00 	mul.w	sl, r4, r0
 8024a92:	fb08 f80c 	mul.w	r8, r8, ip
 8024a96:	f10a 0c20 	add.w	ip, sl, #32
 8024a9a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8024a9e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024aa2:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8024aa6:	4440      	add	r0, r8
 8024aa8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024aac:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8024ab0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024ab4:	ea40 000c 	orr.w	r0, r0, ip
 8024ab8:	fb15 fc02 	smulbb	ip, r5, r2
 8024abc:	f1c5 0810 	rsb	r8, r5, #16
 8024ac0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8024ac4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024ac8:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8024acc:	eba8 0802 	sub.w	r8, r8, r2
 8024ad0:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8024ad4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024ad8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8024adc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024ae0:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8024ae4:	ea4a 0101 	orr.w	r1, sl, r1
 8024ae8:	437a      	muls	r2, r7
 8024aea:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8024aee:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024af2:	fb09 2208 	mla	r2, r9, r8, r2
 8024af6:	ea4b 0000 	orr.w	r0, fp, r0
 8024afa:	fb05 2201 	mla	r2, r5, r1, r2
 8024afe:	fb0c 2200 	mla	r2, ip, r0, r2
 8024b02:	0d57      	lsrs	r7, r2, #21
 8024b04:	0952      	lsrs	r2, r2, #5
 8024b06:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024b0a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024b0e:	433a      	orrs	r2, r7
 8024b10:	2bff      	cmp	r3, #255	; 0xff
 8024b12:	b292      	uxth	r2, r2
 8024b14:	d102      	bne.n	8024b1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8024b16:	9912      	ldr	r1, [sp, #72]	; 0x48
 8024b18:	29ff      	cmp	r1, #255	; 0xff
 8024b1a:	d063      	beq.n	8024be4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 8024b1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024b1e:	1215      	asrs	r5, r2, #8
 8024b20:	f8be 1000 	ldrh.w	r1, [lr]
 8024b24:	4343      	muls	r3, r0
 8024b26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024b28:	10cf      	asrs	r7, r1, #3
 8024b2a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8024b2e:	1c58      	adds	r0, r3, #1
 8024b30:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8024b34:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8024b38:	1208      	asrs	r0, r1, #8
 8024b3a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8024b3e:	00c9      	lsls	r1, r1, #3
 8024b40:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024b44:	b2db      	uxtb	r3, r3
 8024b46:	b2c9      	uxtb	r1, r1
 8024b48:	fb10 f003 	smulbb	r0, r0, r3
 8024b4c:	fb11 f103 	smulbb	r1, r1, r3
 8024b50:	fb05 0504 	mla	r5, r5, r4, r0
 8024b54:	10d0      	asrs	r0, r2, #3
 8024b56:	fb17 f703 	smulbb	r7, r7, r3
 8024b5a:	00d2      	lsls	r2, r2, #3
 8024b5c:	b2ad      	uxth	r5, r5
 8024b5e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024b62:	b2d2      	uxtb	r2, r2
 8024b64:	fb00 7004 	mla	r0, r0, r4, r7
 8024b68:	1c6b      	adds	r3, r5, #1
 8024b6a:	fb02 1204 	mla	r2, r2, r4, r1
 8024b6e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024b72:	b292      	uxth	r2, r2
 8024b74:	b280      	uxth	r0, r0
 8024b76:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8024b7a:	1c57      	adds	r7, r2, #1
 8024b7c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8024b80:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024b84:	433d      	orrs	r5, r7
 8024b86:	1c47      	adds	r7, r0, #1
 8024b88:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8024b8c:	097f      	lsrs	r7, r7, #5
 8024b8e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024b92:	433d      	orrs	r5, r7
 8024b94:	f8ae 5000 	strh.w	r5, [lr]
 8024b98:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024b9a:	f10e 0e02 	add.w	lr, lr, #2
 8024b9e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024ba0:	4413      	add	r3, r2
 8024ba2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024ba4:	9329      	str	r3, [sp, #164]	; 0xa4
 8024ba6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024ba8:	441a      	add	r2, r3
 8024baa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024bac:	3b01      	subs	r3, #1
 8024bae:	922a      	str	r2, [sp, #168]	; 0xa8
 8024bb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8024bb2:	e61c      	b.n	80247ee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8024bb4:	fb08 f000 	mul.w	r0, r8, r0
 8024bb8:	fb09 0303 	mla	r3, r9, r3, r0
 8024bbc:	e6dc      	b.n	8024978 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 8024bbe:	46b9      	mov	r9, r7
 8024bc0:	e704      	b.n	80249cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 8024bc2:	f1c2 0110 	rsb	r1, r2, #16
 8024bc6:	437a      	muls	r2, r7
 8024bc8:	fb09 2901 	mla	r9, r9, r1, r2
 8024bcc:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8024bd0:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8024bd4:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8024bd8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024bdc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024be0:	4302      	orrs	r2, r0
 8024be2:	e795      	b.n	8024b10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 8024be4:	f8ae 2000 	strh.w	r2, [lr]
 8024be8:	e7d6      	b.n	8024b98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8024bea:	b017      	add	sp, #92	; 0x5c
 8024bec:	ecbd 8b08 	vpop	{d8-d11}
 8024bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024bf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8024bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bf8:	b085      	sub	sp, #20
 8024bfa:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8024bfe:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8024c02:	9103      	str	r1, [sp, #12]
 8024c04:	2d00      	cmp	r5, #0
 8024c06:	fb05 7106 	mla	r1, r5, r6, r7
 8024c0a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8024c0e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8024c12:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 8024c16:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8024c1a:	eb02 0901 	add.w	r9, r2, r1
 8024c1e:	9401      	str	r4, [sp, #4]
 8024c20:	f2c0 80c0 	blt.w	8024da4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8024c24:	45a8      	cmp	r8, r5
 8024c26:	f340 80bd 	ble.w	8024da4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8024c2a:	2f00      	cmp	r7, #0
 8024c2c:	f2c0 80b6 	blt.w	8024d9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8024c30:	42be      	cmp	r6, r7
 8024c32:	f340 80b3 	ble.w	8024d9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8024c36:	f812 c001 	ldrb.w	ip, [r2, r1]
 8024c3a:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8024c3e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024c42:	d019      	beq.n	8024c78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 8024c44:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8024c48:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024c4c:	435a      	muls	r2, r3
 8024c4e:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8024c52:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8024c56:	fb0c f403 	mul.w	r4, ip, r3
 8024c5a:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8024c5e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8024c62:	441a      	add	r2, r3
 8024c64:	f104 0320 	add.w	r3, r4, #32
 8024c68:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8024c6c:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8024c70:	0a1b      	lsrs	r3, r3, #8
 8024c72:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024c76:	4319      	orrs	r1, r3
 8024c78:	b289      	uxth	r1, r1
 8024c7a:	1c7b      	adds	r3, r7, #1
 8024c7c:	f100 8097 	bmi.w	8024dae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8024c80:	429e      	cmp	r6, r3
 8024c82:	f340 8094 	ble.w	8024dae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8024c86:	2800      	cmp	r0, #0
 8024c88:	f000 8094 	beq.w	8024db4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 8024c8c:	f899 4001 	ldrb.w	r4, [r9, #1]
 8024c90:	9b01      	ldr	r3, [sp, #4]
 8024c92:	2cff      	cmp	r4, #255	; 0xff
 8024c94:	885b      	ldrh	r3, [r3, #2]
 8024c96:	d01b      	beq.n	8024cd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8024c98:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8024c9c:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8024ca0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024ca4:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8024ca8:	fb0a f202 	mul.w	r2, sl, r2
 8024cac:	fb04 fa03 	mul.w	sl, r4, r3
 8024cb0:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8024cb4:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8024cb8:	441a      	add	r2, r3
 8024cba:	f10a 0320 	add.w	r3, sl, #32
 8024cbe:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8024cc2:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8024cc6:	0a1b      	lsrs	r3, r3, #8
 8024cc8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024ccc:	ea4b 0303 	orr.w	r3, fp, r3
 8024cd0:	b29b      	uxth	r3, r3
 8024cd2:	3501      	adds	r5, #1
 8024cd4:	d474      	bmi.n	8024dc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8024cd6:	45a8      	cmp	r8, r5
 8024cd8:	dd72      	ble.n	8024dc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8024cda:	f1be 0f00 	cmp.w	lr, #0
 8024cde:	f000 8111 	beq.w	8024f04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x310>
 8024ce2:	2f00      	cmp	r7, #0
 8024ce4:	db69      	blt.n	8024dba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8024ce6:	42be      	cmp	r6, r7
 8024ce8:	dd67      	ble.n	8024dba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8024cea:	f819 5006 	ldrb.w	r5, [r9, r6]
 8024cee:	9a01      	ldr	r2, [sp, #4]
 8024cf0:	2dff      	cmp	r5, #255	; 0xff
 8024cf2:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8024cf6:	d01c      	beq.n	8024d32 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 8024cf8:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8024cfc:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8024d00:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8024d04:	fb08 f802 	mul.w	r8, r8, r2
 8024d08:	fb05 fa0b 	mul.w	sl, r5, fp
 8024d0c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8024d10:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8024d14:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024d18:	4490      	add	r8, r2
 8024d1a:	f10a 0220 	add.w	r2, sl, #32
 8024d1e:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8024d22:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8024d26:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024d2a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8024d2e:	ea4b 0b0a 	orr.w	fp, fp, sl
 8024d32:	fa1f fb8b 	uxth.w	fp, fp
 8024d36:	3701      	adds	r7, #1
 8024d38:	d447      	bmi.n	8024dca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8024d3a:	42be      	cmp	r6, r7
 8024d3c:	dd45      	ble.n	8024dca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8024d3e:	2800      	cmp	r0, #0
 8024d40:	d046      	beq.n	8024dd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 8024d42:	3601      	adds	r6, #1
 8024d44:	9a01      	ldr	r2, [sp, #4]
 8024d46:	f819 7006 	ldrb.w	r7, [r9, r6]
 8024d4a:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8024d4e:	2fff      	cmp	r7, #255	; 0xff
 8024d50:	d01a      	beq.n	8024d88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 8024d52:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8024d56:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8024d5a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024d5e:	fb08 f806 	mul.w	r8, r8, r6
 8024d62:	fb07 f902 	mul.w	r9, r7, r2
 8024d66:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8024d6a:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8024d6e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024d72:	44b0      	add	r8, r6
 8024d74:	f109 0620 	add.w	r6, r9, #32
 8024d78:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8024d7c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8024d80:	0a36      	lsrs	r6, r6, #8
 8024d82:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8024d86:	4332      	orrs	r2, r6
 8024d88:	b292      	uxth	r2, r2
 8024d8a:	280f      	cmp	r0, #15
 8024d8c:	d922      	bls.n	8024dd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8024d8e:	4b61      	ldr	r3, [pc, #388]	; (8024f14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8024d90:	f240 210d 	movw	r1, #525	; 0x20d
 8024d94:	4a60      	ldr	r2, [pc, #384]	; (8024f18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 8024d96:	4861      	ldr	r0, [pc, #388]	; (8024f1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 8024d98:	f003 fc7e 	bl	8028698 <__assert_func>
 8024d9c:	f04f 0c00 	mov.w	ip, #0
 8024da0:	4661      	mov	r1, ip
 8024da2:	e76a      	b.n	8024c7a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8024da4:	2400      	movs	r4, #0
 8024da6:	46a4      	mov	ip, r4
 8024da8:	4623      	mov	r3, r4
 8024daa:	4621      	mov	r1, r4
 8024dac:	e791      	b.n	8024cd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8024dae:	2400      	movs	r4, #0
 8024db0:	4623      	mov	r3, r4
 8024db2:	e78e      	b.n	8024cd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8024db4:	4604      	mov	r4, r0
 8024db6:	4603      	mov	r3, r0
 8024db8:	e78b      	b.n	8024cd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8024dba:	2500      	movs	r5, #0
 8024dbc:	46ab      	mov	fp, r5
 8024dbe:	e7ba      	b.n	8024d36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 8024dc0:	2700      	movs	r7, #0
 8024dc2:	463d      	mov	r5, r7
 8024dc4:	463a      	mov	r2, r7
 8024dc6:	46bb      	mov	fp, r7
 8024dc8:	e7df      	b.n	8024d8a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8024dca:	2700      	movs	r7, #0
 8024dcc:	463a      	mov	r2, r7
 8024dce:	e7dc      	b.n	8024d8a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8024dd0:	4607      	mov	r7, r0
 8024dd2:	4602      	mov	r2, r0
 8024dd4:	f1be 0f0f 	cmp.w	lr, #15
 8024dd8:	d8d9      	bhi.n	8024d8e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8024dda:	b286      	uxth	r6, r0
 8024ddc:	fa1f f98e 	uxth.w	r9, lr
 8024de0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8024de4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024de8:	fb06 f809 	mul.w	r8, r6, r9
 8024dec:	0136      	lsls	r6, r6, #4
 8024dee:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024df2:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8024df6:	9601      	str	r6, [sp, #4]
 8024df8:	ea4a 0101 	orr.w	r1, sl, r1
 8024dfc:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8024e00:	fa1f f689 	uxth.w	r6, r9
 8024e04:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024e08:	fb10 f90e 	smulbb	r9, r0, lr
 8024e0c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024e10:	9602      	str	r6, [sp, #8]
 8024e12:	460e      	mov	r6, r1
 8024e14:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8024e18:	f1ce 0110 	rsb	r1, lr, #16
 8024e1c:	ea4a 0303 	orr.w	r3, sl, r3
 8024e20:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8024e24:	1a09      	subs	r1, r1, r0
 8024e26:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8024e2a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024e2e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024e32:	4343      	muls	r3, r0
 8024e34:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8024e38:	ea4a 0202 	orr.w	r2, sl, r2
 8024e3c:	9802      	ldr	r0, [sp, #8]
 8024e3e:	fb01 3106 	mla	r1, r1, r6, r3
 8024e42:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8024e46:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8024e4a:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8024e4e:	fb09 1302 	mla	r3, r9, r2, r1
 8024e52:	9901      	ldr	r1, [sp, #4]
 8024e54:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024e58:	9a03      	ldr	r2, [sp, #12]
 8024e5a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8024e5e:	ea4a 0b0b 	orr.w	fp, sl, fp
 8024e62:	8812      	ldrh	r2, [r2, #0]
 8024e64:	1a09      	subs	r1, r1, r0
 8024e66:	9801      	ldr	r0, [sp, #4]
 8024e68:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8024e6c:	eba0 0608 	sub.w	r6, r0, r8
 8024e70:	b289      	uxth	r1, r1
 8024e72:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8024e76:	b2b6      	uxth	r6, r6
 8024e78:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024e7c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024e80:	4374      	muls	r4, r6
 8024e82:	10d0      	asrs	r0, r2, #3
 8024e84:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024e88:	fb0c 4401 	mla	r4, ip, r1, r4
 8024e8c:	9902      	ldr	r1, [sp, #8]
 8024e8e:	ea43 0e0e 	orr.w	lr, r3, lr
 8024e92:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024e96:	fb01 4505 	mla	r5, r1, r5, r4
 8024e9a:	1211      	asrs	r1, r2, #8
 8024e9c:	00d2      	lsls	r2, r2, #3
 8024e9e:	fb08 5707 	mla	r7, r8, r7, r5
 8024ea2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024ea6:	b2d2      	uxtb	r2, r2
 8024ea8:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8024eac:	fa1f f38e 	uxth.w	r3, lr
 8024eb0:	b2ff      	uxtb	r7, r7
 8024eb2:	4379      	muls	r1, r7
 8024eb4:	4378      	muls	r0, r7
 8024eb6:	4357      	muls	r7, r2
 8024eb8:	1c4a      	adds	r2, r1, #1
 8024eba:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8024ebe:	1219      	asrs	r1, r3, #8
 8024ec0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024ec4:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8024ec8:	4a15      	ldr	r2, [pc, #84]	; (8024f20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x32c>)
 8024eca:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8024ece:	1c42      	adds	r2, r0, #1
 8024ed0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024ed4:	10da      	asrs	r2, r3, #3
 8024ed6:	00db      	lsls	r3, r3, #3
 8024ed8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024edc:	b2db      	uxtb	r3, r3
 8024ede:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024ee2:	00d2      	lsls	r2, r2, #3
 8024ee4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024ee8:	430a      	orrs	r2, r1
 8024eea:	1c79      	adds	r1, r7, #1
 8024eec:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8024ef0:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8024ef4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8024ef8:	4313      	orrs	r3, r2
 8024efa:	9a03      	ldr	r2, [sp, #12]
 8024efc:	8013      	strh	r3, [r2, #0]
 8024efe:	b005      	add	sp, #20
 8024f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f04:	280f      	cmp	r0, #15
 8024f06:	f63f af42 	bhi.w	8024d8e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8024f0a:	4677      	mov	r7, lr
 8024f0c:	4675      	mov	r5, lr
 8024f0e:	4672      	mov	r2, lr
 8024f10:	46f3      	mov	fp, lr
 8024f12:	e762      	b.n	8024dda <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 8024f14:	0802ceb2 	.word	0x0802ceb2
 8024f18:	0802d475 	.word	0x0802d475
 8024f1c:	0802cf9b 	.word	0x0802cf9b
 8024f20:	fffff800 	.word	0xfffff800

08024f24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f28:	ed2d 8b08 	vpush	{d8-d11}
 8024f2c:	b093      	sub	sp, #76	; 0x4c
 8024f2e:	eeb0 aa40 	vmov.f32	s20, s0
 8024f32:	eef0 9a60 	vmov.f32	s19, s1
 8024f36:	9210      	str	r2, [sp, #64]	; 0x40
 8024f38:	eeb0 9a41 	vmov.f32	s18, s2
 8024f3c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024f3e:	eeb0 8a62 	vmov.f32	s16, s5
 8024f42:	9011      	str	r0, [sp, #68]	; 0x44
 8024f44:	eef0 8a43 	vmov.f32	s17, s6
 8024f48:	6850      	ldr	r0, [r2, #4]
 8024f4a:	eef0 ba44 	vmov.f32	s23, s8
 8024f4e:	910e      	str	r1, [sp, #56]	; 0x38
 8024f50:	eeb0 ba64 	vmov.f32	s22, s9
 8024f54:	9306      	str	r3, [sp, #24]
 8024f56:	eef0 aa45 	vmov.f32	s21, s10
 8024f5a:	6812      	ldr	r2, [r2, #0]
 8024f5c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8024f60:	fb00 1303 	mla	r3, r0, r3, r1
 8024f64:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024f68:	9307      	str	r3, [sp, #28]
 8024f6a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024f6c:	681b      	ldr	r3, [r3, #0]
 8024f6e:	9308      	str	r3, [sp, #32]
 8024f70:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024f72:	685b      	ldr	r3, [r3, #4]
 8024f74:	9309      	str	r3, [sp, #36]	; 0x24
 8024f76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024f78:	2b00      	cmp	r3, #0
 8024f7a:	dc03      	bgt.n	8024f84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8024f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024f7e:	2b00      	cmp	r3, #0
 8024f80:	f340 83b8 	ble.w	80256f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 8024f84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024f86:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024f8a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024f8e:	1e48      	subs	r0, r1, #1
 8024f90:	1e55      	subs	r5, r2, #1
 8024f92:	9b06      	ldr	r3, [sp, #24]
 8024f94:	2b00      	cmp	r3, #0
 8024f96:	f340 819b 	ble.w	80252d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8024f9a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8024f9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024f9e:	1436      	asrs	r6, r6, #16
 8024fa0:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024fa4:	d406      	bmi.n	8024fb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024fa6:	4286      	cmp	r6, r0
 8024fa8:	da04      	bge.n	8024fb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024faa:	2b00      	cmp	r3, #0
 8024fac:	db02      	blt.n	8024fb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024fae:	42ab      	cmp	r3, r5
 8024fb0:	f2c0 818f 	blt.w	80252d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024fb4:	3601      	adds	r6, #1
 8024fb6:	f100 817c 	bmi.w	80252b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8024fba:	42b1      	cmp	r1, r6
 8024fbc:	f2c0 8179 	blt.w	80252b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8024fc0:	3301      	adds	r3, #1
 8024fc2:	f100 8176 	bmi.w	80252b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8024fc6:	429a      	cmp	r2, r3
 8024fc8:	f2c0 8173 	blt.w	80252b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8024fcc:	9b06      	ldr	r3, [sp, #24]
 8024fce:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8024fd2:	9f07      	ldr	r7, [sp, #28]
 8024fd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8024fd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024fd8:	2b00      	cmp	r3, #0
 8024fda:	f340 819c 	ble.w	8025316 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8024fde:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024fe0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8024fe2:	1418      	asrs	r0, r3, #16
 8024fe4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024fe6:	142d      	asrs	r5, r5, #16
 8024fe8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8024fec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024fee:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8024ff2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024ff4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024ff8:	f100 81f0 	bmi.w	80253dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8024ffc:	f102 3eff 	add.w	lr, r2, #4294967295
 8025000:	4575      	cmp	r5, lr
 8025002:	f280 81eb 	bge.w	80253dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8025006:	2800      	cmp	r0, #0
 8025008:	f2c0 81e8 	blt.w	80253dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802500c:	f103 3eff 	add.w	lr, r3, #4294967295
 8025010:	4570      	cmp	r0, lr
 8025012:	f280 81e3 	bge.w	80253dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8025016:	b212      	sxth	r2, r2
 8025018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802501a:	fa1f fe81 	uxth.w	lr, r1
 802501e:	fb00 5002 	mla	r0, r0, r2, r5
 8025022:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8025026:	eb03 0a00 	add.w	sl, r3, r0
 802502a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802502e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8025032:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025036:	b29b      	uxth	r3, r3
 8025038:	f1bc 0f00 	cmp.w	ip, #0
 802503c:	f000 81b1 	beq.w	80253a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47e>
 8025040:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025044:	eb0a 0b02 	add.w	fp, sl, r2
 8025048:	fa1f fa8c 	uxth.w	sl, ip
 802504c:	940a      	str	r4, [sp, #40]	; 0x28
 802504e:	fb0a fe0e 	mul.w	lr, sl, lr
 8025052:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025056:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802505a:	eba5 050e 	sub.w	r5, r5, lr
 802505e:	940b      	str	r4, [sp, #44]	; 0x2c
 8025060:	fa1f fa8a 	uxth.w	sl, sl
 8025064:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025066:	b2ad      	uxth	r5, r5
 8025068:	eba3 030a 	sub.w	r3, r3, sl
 802506c:	fb08 f505 	mul.w	r5, r8, r5
 8025070:	b29b      	uxth	r3, r3
 8025072:	fb09 5303 	mla	r3, r9, r3, r5
 8025076:	fb0a 3304 	mla	r3, sl, r4, r3
 802507a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802507c:	fb0e 3304 	mla	r3, lr, r4, r3
 8025080:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025084:	2b00      	cmp	r3, #0
 8025086:	f000 8107 	beq.w	8025298 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802508a:	9c08      	ldr	r4, [sp, #32]
 802508c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025090:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8025094:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8025098:	f000 8188 	beq.w	80253ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802509c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80250a0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80250a4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80250a8:	fb0a fe0e 	mul.w	lr, sl, lr
 80250ac:	fb09 f000 	mul.w	r0, r9, r0
 80250b0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80250b4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80250b8:	f100 0b20 	add.w	fp, r0, #32
 80250bc:	44ce      	add	lr, r9
 80250be:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80250c2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80250c6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80250ca:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80250ce:	ea4e 0909 	orr.w	r9, lr, r9
 80250d2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80250d6:	8868      	ldrh	r0, [r5, #2]
 80250d8:	d019      	beq.n	802510e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80250da:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80250de:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80250e2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80250e6:	fb0a fe0e 	mul.w	lr, sl, lr
 80250ea:	fb08 f800 	mul.w	r8, r8, r0
 80250ee:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80250f2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80250f6:	f108 0b20 	add.w	fp, r8, #32
 80250fa:	4486      	add	lr, r0
 80250fc:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025100:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025104:	0a00      	lsrs	r0, r0, #8
 8025106:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802510a:	ea4e 0000 	orr.w	r0, lr, r0
 802510e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025112:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025116:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802511a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802511e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025122:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025126:	ea4e 0909 	orr.w	r9, lr, r9
 802512a:	ea4a 0000 	orr.w	r0, sl, r0
 802512e:	f1bc 0f00 	cmp.w	ip, #0
 8025132:	f000 813d 	beq.w	80253b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025136:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802513a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802513c:	3a01      	subs	r2, #1
 802513e:	2cff      	cmp	r4, #255	; 0xff
 8025140:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025144:	f102 0202 	add.w	r2, r2, #2
 8025148:	eb05 0e02 	add.w	lr, r5, r2
 802514c:	5aaa      	ldrh	r2, [r5, r2]
 802514e:	d018      	beq.n	8025182 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8025150:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8025154:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025158:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802515c:	fb04 fa02 	mul.w	sl, r4, r2
 8025160:	fb08 f805 	mul.w	r8, r8, r5
 8025164:	f10a 0520 	add.w	r5, sl, #32
 8025168:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 802516c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025170:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8025174:	4442      	add	r2, r8
 8025176:	0a2d      	lsrs	r5, r5, #8
 8025178:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802517c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025180:	432a      	orrs	r2, r5
 8025182:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025184:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025188:	2cff      	cmp	r4, #255	; 0xff
 802518a:	d01a      	beq.n	80251c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 802518c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8025190:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025194:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025198:	fb04 fa05 	mul.w	sl, r4, r5
 802519c:	fb08 f80e 	mul.w	r8, r8, lr
 80251a0:	f10a 0e20 	add.w	lr, sl, #32
 80251a4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80251a8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80251ac:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80251b0:	4445      	add	r5, r8
 80251b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80251b6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80251ba:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80251be:	ea45 050e 	orr.w	r5, r5, lr
 80251c2:	fb1c fe01 	smulbb	lr, ip, r1
 80251c6:	f1cc 0810 	rsb	r8, ip, #16
 80251ca:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80251ce:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80251d2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80251d6:	eba8 0801 	sub.w	r8, r8, r1
 80251da:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80251de:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80251e2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80251e6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80251ea:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80251ee:	ea4a 0202 	orr.w	r2, sl, r2
 80251f2:	4341      	muls	r1, r0
 80251f4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80251f8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80251fc:	fb09 1108 	mla	r1, r9, r8, r1
 8025200:	ea4b 0505 	orr.w	r5, fp, r5
 8025204:	fb0c 1102 	mla	r1, ip, r2, r1
 8025208:	fb0e 1e05 	mla	lr, lr, r5, r1
 802520c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025210:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025214:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025218:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802521c:	ea42 0e0e 	orr.w	lr, r2, lr
 8025220:	fa1f f28e 	uxth.w	r2, lr
 8025224:	2bff      	cmp	r3, #255	; 0xff
 8025226:	f000 80d7 	beq.w	80253d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802522a:	f8b7 c000 	ldrh.w	ip, [r7]
 802522e:	43db      	mvns	r3, r3
 8025230:	ea4f 202c 	mov.w	r0, ip, asr #8
 8025234:	fa5f fe83 	uxtb.w	lr, r3
 8025238:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802523c:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8025240:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8025244:	fb00 f00e 	mul.w	r0, r0, lr
 8025248:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802524c:	b2db      	uxtb	r3, r3
 802524e:	1c41      	adds	r1, r0, #1
 8025250:	fb05 f50e 	mul.w	r5, r5, lr
 8025254:	fb03 f30e 	mul.w	r3, r3, lr
 8025258:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802525c:	1210      	asrs	r0, r2, #8
 802525e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025262:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8025266:	496c      	ldr	r1, [pc, #432]	; (8025418 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>)
 8025268:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 802526c:	1c69      	adds	r1, r5, #1
 802526e:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8025272:	10d1      	asrs	r1, r2, #3
 8025274:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025278:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802527c:	00c9      	lsls	r1, r1, #3
 802527e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025282:	4301      	orrs	r1, r0
 8025284:	1c58      	adds	r0, r3, #1
 8025286:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802528a:	00d3      	lsls	r3, r2, #3
 802528c:	b2db      	uxtb	r3, r3
 802528e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025292:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 8025296:	803b      	strh	r3, [r7, #0]
 8025298:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802529a:	3702      	adds	r7, #2
 802529c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802529e:	4413      	add	r3, r2
 80252a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80252a2:	9325      	str	r3, [sp, #148]	; 0x94
 80252a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80252a6:	441a      	add	r2, r3
 80252a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80252aa:	3b01      	subs	r3, #1
 80252ac:	9226      	str	r2, [sp, #152]	; 0x98
 80252ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80252b0:	e691      	b.n	8024fd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80252b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80252b4:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80252b6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80252b8:	4433      	add	r3, r6
 80252ba:	9325      	str	r3, [sp, #148]	; 0x94
 80252bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80252be:	441c      	add	r4, r3
 80252c0:	9b06      	ldr	r3, [sp, #24]
 80252c2:	3b01      	subs	r3, #1
 80252c4:	9426      	str	r4, [sp, #152]	; 0x98
 80252c6:	9306      	str	r3, [sp, #24]
 80252c8:	9b07      	ldr	r3, [sp, #28]
 80252ca:	3302      	adds	r3, #2
 80252cc:	9307      	str	r3, [sp, #28]
 80252ce:	e660      	b.n	8024f92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80252d0:	d028      	beq.n	8025324 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 80252d2:	9b06      	ldr	r3, [sp, #24]
 80252d4:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80252d6:	3b01      	subs	r3, #1
 80252d8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80252da:	fb00 5003 	mla	r0, r0, r3, r5
 80252de:	1400      	asrs	r0, r0, #16
 80252e0:	f53f ae74 	bmi.w	8024fcc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80252e4:	3901      	subs	r1, #1
 80252e6:	4288      	cmp	r0, r1
 80252e8:	f6bf ae70 	bge.w	8024fcc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80252ec:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80252ee:	9826      	ldr	r0, [sp, #152]	; 0x98
 80252f0:	fb01 0303 	mla	r3, r1, r3, r0
 80252f4:	141b      	asrs	r3, r3, #16
 80252f6:	f53f ae69 	bmi.w	8024fcc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80252fa:	3a01      	subs	r2, #1
 80252fc:	4293      	cmp	r3, r2
 80252fe:	f6bf ae65 	bge.w	8024fcc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8025302:	9b06      	ldr	r3, [sp, #24]
 8025304:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025308:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802530c:	930f      	str	r3, [sp, #60]	; 0x3c
 802530e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025310:	2b00      	cmp	r3, #0
 8025312:	f300 8083 	bgt.w	802541c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f8>
 8025316:	9b06      	ldr	r3, [sp, #24]
 8025318:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802531c:	9b07      	ldr	r3, [sp, #28]
 802531e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025322:	9307      	str	r3, [sp, #28]
 8025324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025326:	2b00      	cmp	r3, #0
 8025328:	f340 81e4 	ble.w	80256f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 802532c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025330:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025332:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025336:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802533a:	eef0 6a48 	vmov.f32	s13, s16
 802533e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025342:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025346:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802534a:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 802534e:	eef0 6a68 	vmov.f32	s13, s17
 8025352:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025356:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 802535a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802535e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025362:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025366:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802536a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802536e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025372:	ee18 2a10 	vmov	r2, s16
 8025376:	eeb0 8a47 	vmov.f32	s16, s14
 802537a:	fb92 f3f3 	sdiv	r3, r2, r3
 802537e:	ee18 2a90 	vmov	r2, s17
 8025382:	9327      	str	r3, [sp, #156]	; 0x9c
 8025384:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025386:	eef0 8a67 	vmov.f32	s17, s15
 802538a:	fb92 f3f3 	sdiv	r3, r2, r3
 802538e:	9328      	str	r3, [sp, #160]	; 0xa0
 8025390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025392:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025394:	3b01      	subs	r3, #1
 8025396:	930e      	str	r3, [sp, #56]	; 0x38
 8025398:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802539a:	bf08      	it	eq
 802539c:	4613      	moveq	r3, r2
 802539e:	9306      	str	r3, [sp, #24]
 80253a0:	e5e9      	b.n	8024f76 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80253a2:	fb08 f505 	mul.w	r5, r8, r5
 80253a6:	fb09 5303 	mla	r3, r9, r3, r5
 80253aa:	e669      	b.n	8025080 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80253ac:	4681      	mov	r9, r0
 80253ae:	e690      	b.n	80250d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80253b0:	f1c1 0210 	rsb	r2, r1, #16
 80253b4:	4341      	muls	r1, r0
 80253b6:	fb09 1902 	mla	r9, r9, r2, r1
 80253ba:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80253be:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80253c2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80253c6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80253ca:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80253ce:	ea42 0909 	orr.w	r9, r2, r9
 80253d2:	fa1f f289 	uxth.w	r2, r9
 80253d6:	e725      	b.n	8025224 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80253d8:	803a      	strh	r2, [r7, #0]
 80253da:	e75d      	b.n	8025298 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80253dc:	f115 0e01 	adds.w	lr, r5, #1
 80253e0:	f53f af5a 	bmi.w	8025298 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80253e4:	4572      	cmp	r2, lr
 80253e6:	f6ff af57 	blt.w	8025298 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80253ea:	f110 0e01 	adds.w	lr, r0, #1
 80253ee:	f53f af53 	bmi.w	8025298 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80253f2:	4573      	cmp	r3, lr
 80253f4:	f6ff af50 	blt.w	8025298 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80253f8:	b21b      	sxth	r3, r3
 80253fa:	b212      	sxth	r2, r2
 80253fc:	9301      	str	r3, [sp, #4]
 80253fe:	9200      	str	r2, [sp, #0]
 8025400:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8025404:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8025408:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 802540c:	4639      	mov	r1, r7
 802540e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025410:	f7ff fbf0 	bl	8024bf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8025414:	e740      	b.n	8025298 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8025416:	bf00      	nop
 8025418:	fffff800 	.word	0xfffff800
 802541c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802541e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025422:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025424:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8025428:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802542a:	fa1f fc82 	uxth.w	ip, r2
 802542e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025432:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025434:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8025438:	141f      	asrs	r7, r3, #16
 802543a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802543c:	141b      	asrs	r3, r3, #16
 802543e:	fb01 3707 	mla	r7, r1, r7, r3
 8025442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025444:	eb03 0a07 	add.w	sl, r3, r7
 8025448:	f813 9007 	ldrb.w	r9, [r3, r7]
 802544c:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8025450:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025454:	b29b      	uxth	r3, r3
 8025456:	2d00      	cmp	r5, #0
 8025458:	f000 8131 	beq.w	80256be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x79a>
 802545c:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8025460:	eb0a 0b01 	add.w	fp, sl, r1
 8025464:	fa1f fa85 	uxth.w	sl, r5
 8025468:	940c      	str	r4, [sp, #48]	; 0x30
 802546a:	fb0a fc0c 	mul.w	ip, sl, ip
 802546e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025472:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8025476:	eba0 000c 	sub.w	r0, r0, ip
 802547a:	940d      	str	r4, [sp, #52]	; 0x34
 802547c:	fa1f fa8a 	uxth.w	sl, sl
 8025480:	b280      	uxth	r0, r0
 8025482:	eba3 030a 	sub.w	r3, r3, sl
 8025486:	fb08 f000 	mul.w	r0, r8, r0
 802548a:	b29b      	uxth	r3, r3
 802548c:	fb09 0303 	mla	r3, r9, r3, r0
 8025490:	980c      	ldr	r0, [sp, #48]	; 0x30
 8025492:	fb0a 3300 	mla	r3, sl, r0, r3
 8025496:	fb0c 3304 	mla	r3, ip, r4, r3
 802549a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802549e:	2b00      	cmp	r3, #0
 80254a0:	f000 80ff 	beq.w	80256a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 80254a4:	9808      	ldr	r0, [sp, #32]
 80254a6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80254aa:	9c08      	ldr	r4, [sp, #32]
 80254ac:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80254b0:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80254b4:	f000 8108 	beq.w	80256c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 80254b8:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80254bc:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80254c0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80254c4:	fb0a fc0c 	mul.w	ip, sl, ip
 80254c8:	fb09 f707 	mul.w	r7, r9, r7
 80254cc:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80254d0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80254d4:	f107 0b20 	add.w	fp, r7, #32
 80254d8:	44cc      	add	ip, r9
 80254da:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80254de:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80254e2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80254e6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80254ea:	ea4c 0909 	orr.w	r9, ip, r9
 80254ee:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80254f2:	8847      	ldrh	r7, [r0, #2]
 80254f4:	d019      	beq.n	802552a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x606>
 80254f6:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80254fa:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80254fe:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025502:	fb0a fc0c 	mul.w	ip, sl, ip
 8025506:	fb08 f807 	mul.w	r8, r8, r7
 802550a:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 802550e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025512:	f108 0b20 	add.w	fp, r8, #32
 8025516:	44bc      	add	ip, r7
 8025518:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802551c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025520:	0a3f      	lsrs	r7, r7, #8
 8025522:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025526:	ea4c 0707 	orr.w	r7, ip, r7
 802552a:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802552e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025532:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8025536:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802553a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802553e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025542:	ea4c 0909 	orr.w	r9, ip, r9
 8025546:	ea4a 0707 	orr.w	r7, sl, r7
 802554a:	2d00      	cmp	r5, #0
 802554c:	f000 80be 	beq.w	80256cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8025550:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8025554:	3901      	subs	r1, #1
 8025556:	0049      	lsls	r1, r1, #1
 8025558:	3102      	adds	r1, #2
 802555a:	eb00 0c01 	add.w	ip, r0, r1
 802555e:	5a41      	ldrh	r1, [r0, r1]
 8025560:	980c      	ldr	r0, [sp, #48]	; 0x30
 8025562:	28ff      	cmp	r0, #255	; 0xff
 8025564:	d019      	beq.n	802559a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x676>
 8025566:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 802556a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802556c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025570:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025574:	fb04 fa01 	mul.w	sl, r4, r1
 8025578:	fb08 f800 	mul.w	r8, r8, r0
 802557c:	f10a 0020 	add.w	r0, sl, #32
 8025580:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8025584:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025588:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802558c:	4441      	add	r1, r8
 802558e:	0a00      	lsrs	r0, r0, #8
 8025590:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8025594:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025598:	4301      	orrs	r1, r0
 802559a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802559c:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80255a0:	2cff      	cmp	r4, #255	; 0xff
 80255a2:	d01a      	beq.n	80255da <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 80255a4:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80255a8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80255ac:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80255b0:	fb04 fa00 	mul.w	sl, r4, r0
 80255b4:	fb08 f80c 	mul.w	r8, r8, ip
 80255b8:	f10a 0c20 	add.w	ip, sl, #32
 80255bc:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80255c0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80255c4:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80255c8:	4440      	add	r0, r8
 80255ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80255ce:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80255d2:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80255d6:	ea40 000c 	orr.w	r0, r0, ip
 80255da:	fb15 fc02 	smulbb	ip, r5, r2
 80255de:	f1c5 0810 	rsb	r8, r5, #16
 80255e2:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80255e6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80255ea:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80255ee:	eba8 0802 	sub.w	r8, r8, r2
 80255f2:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80255f6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80255fa:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80255fe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025602:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8025606:	ea4a 0101 	orr.w	r1, sl, r1
 802560a:	437a      	muls	r2, r7
 802560c:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8025610:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025614:	fb09 2208 	mla	r2, r9, r8, r2
 8025618:	ea4b 0000 	orr.w	r0, fp, r0
 802561c:	fb05 2201 	mla	r2, r5, r1, r2
 8025620:	fb0c 2200 	mla	r2, ip, r0, r2
 8025624:	0d57      	lsrs	r7, r2, #21
 8025626:	0952      	lsrs	r2, r2, #5
 8025628:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802562c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025630:	433a      	orrs	r2, r7
 8025632:	2bff      	cmp	r3, #255	; 0xff
 8025634:	b292      	uxth	r2, r2
 8025636:	d05a      	beq.n	80256ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ca>
 8025638:	f8be 7000 	ldrh.w	r7, [lr]
 802563c:	43db      	mvns	r3, r3
 802563e:	4c30      	ldr	r4, [pc, #192]	; (8025700 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>)
 8025640:	1238      	asrs	r0, r7, #8
 8025642:	fa5f fc83 	uxtb.w	ip, r3
 8025646:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802564a:	10fd      	asrs	r5, r7, #3
 802564c:	00fb      	lsls	r3, r7, #3
 802564e:	fb00 f00c 	mul.w	r0, r0, ip
 8025652:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8025656:	b2db      	uxtb	r3, r3
 8025658:	fb05 f10c 	mul.w	r1, r5, ip
 802565c:	1c45      	adds	r5, r0, #1
 802565e:	fb03 f30c 	mul.w	r3, r3, ip
 8025662:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025666:	1215      	asrs	r5, r2, #8
 8025668:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802566c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025670:	1c4d      	adds	r5, r1, #1
 8025672:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8025676:	10d1      	asrs	r1, r2, #3
 8025678:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802567c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025680:	00d2      	lsls	r2, r2, #3
 8025682:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8025686:	00c9      	lsls	r1, r1, #3
 8025688:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802568c:	4308      	orrs	r0, r1
 802568e:	1c59      	adds	r1, r3, #1
 8025690:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025694:	b2d1      	uxtb	r1, r2
 8025696:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802569a:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 802569e:	f8ae 0000 	strh.w	r0, [lr]
 80256a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80256a4:	f10e 0e02 	add.w	lr, lr, #2
 80256a8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80256aa:	4413      	add	r3, r2
 80256ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80256ae:	9325      	str	r3, [sp, #148]	; 0x94
 80256b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80256b2:	441a      	add	r2, r3
 80256b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80256b6:	3b01      	subs	r3, #1
 80256b8:	9226      	str	r2, [sp, #152]	; 0x98
 80256ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80256bc:	e627      	b.n	802530e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80256be:	fb08 f000 	mul.w	r0, r8, r0
 80256c2:	fb09 0303 	mla	r3, r9, r3, r0
 80256c6:	e6e8      	b.n	802549a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x576>
 80256c8:	46b9      	mov	r9, r7
 80256ca:	e710      	b.n	80254ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 80256cc:	f1c2 0110 	rsb	r1, r2, #16
 80256d0:	437a      	muls	r2, r7
 80256d2:	fb09 2901 	mla	r9, r9, r1, r2
 80256d6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80256da:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80256de:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80256e2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80256e6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80256ea:	4302      	orrs	r2, r0
 80256ec:	e7a1      	b.n	8025632 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70e>
 80256ee:	f8ae 2000 	strh.w	r2, [lr]
 80256f2:	e7d6      	b.n	80256a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 80256f4:	b013      	add	sp, #76	; 0x4c
 80256f6:	ecbd 8b08 	vpop	{d8-d11}
 80256fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80256fe:	bf00      	nop
 8025700:	fffff800 	.word	0xfffff800

08025704 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8025704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025708:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 802570c:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8025710:	fb0c 4e03 	mla	lr, ip, r3, r4
 8025714:	f1bc 0f00 	cmp.w	ip, #0
 8025718:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 802571c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8025720:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8025724:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8025728:	8808      	ldrh	r0, [r1, #0]
 802572a:	db2f      	blt.n	802578c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 802572c:	45e2      	cmp	sl, ip
 802572e:	dd2d      	ble.n	802578c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8025730:	2c00      	cmp	r4, #0
 8025732:	db29      	blt.n	8025788 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8025734:	42a3      	cmp	r3, r4
 8025736:	dd27      	ble.n	8025788 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8025738:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 802573c:	1c62      	adds	r2, r4, #1
 802573e:	d428      	bmi.n	8025792 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8025740:	4293      	cmp	r3, r2
 8025742:	dd26      	ble.n	8025792 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8025744:	b32f      	cbz	r7, 8025792 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8025746:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 802574a:	f11c 0c01 	adds.w	ip, ip, #1
 802574e:	d424      	bmi.n	802579a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8025750:	45e2      	cmp	sl, ip
 8025752:	dd22      	ble.n	802579a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8025754:	2e00      	cmp	r6, #0
 8025756:	f000 809c 	beq.w	8025892 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
 802575a:	2c00      	cmp	r4, #0
 802575c:	db1b      	blt.n	8025796 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 802575e:	42a3      	cmp	r3, r4
 8025760:	dd19      	ble.n	8025796 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8025762:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8025766:	3401      	adds	r4, #1
 8025768:	d41a      	bmi.n	80257a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 802576a:	42a3      	cmp	r3, r4
 802576c:	dd18      	ble.n	80257a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 802576e:	b1cf      	cbz	r7, 80257a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8025770:	3301      	adds	r3, #1
 8025772:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8025776:	2f0f      	cmp	r7, #15
 8025778:	d915      	bls.n	80257a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 802577a:	4b49      	ldr	r3, [pc, #292]	; (80258a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 802577c:	f240 11ef 	movw	r1, #495	; 0x1ef
 8025780:	4a48      	ldr	r2, [pc, #288]	; (80258a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8025782:	4849      	ldr	r0, [pc, #292]	; (80258a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8025784:	f002 ff88 	bl	8028698 <__assert_func>
 8025788:	4681      	mov	r9, r0
 802578a:	e7d7      	b.n	802573c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 802578c:	4686      	mov	lr, r0
 802578e:	4681      	mov	r9, r0
 8025790:	e7db      	b.n	802574a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8025792:	4686      	mov	lr, r0
 8025794:	e7d9      	b.n	802574a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8025796:	4684      	mov	ip, r0
 8025798:	e7e5      	b.n	8025766 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 802579a:	4603      	mov	r3, r0
 802579c:	4684      	mov	ip, r0
 802579e:	e7ea      	b.n	8025776 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 80257a0:	4603      	mov	r3, r0
 80257a2:	e7e8      	b.n	8025776 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 80257a4:	4603      	mov	r3, r0
 80257a6:	2e0f      	cmp	r6, #15
 80257a8:	d8e7      	bhi.n	802577a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 80257aa:	fb17 f806 	smulbb	r8, r7, r6
 80257ae:	ea4f 4409 	mov.w	r4, r9, lsl #16
 80257b2:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 80257b6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80257ba:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80257be:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80257c2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80257c6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80257ca:	ea44 0909 	orr.w	r9, r4, r9
 80257ce:	f1c6 0410 	rsb	r4, r6, #16
 80257d2:	041a      	lsls	r2, r3, #16
 80257d4:	ea4a 0e0e 	orr.w	lr, sl, lr
 80257d8:	1be4      	subs	r4, r4, r7
 80257da:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 80257de:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80257e2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80257e6:	fb07 fe0e 	mul.w	lr, r7, lr
 80257ea:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 80257ee:	4313      	orrs	r3, r2
 80257f0:	ea4f 420c 	mov.w	r2, ip, lsl #16
 80257f4:	fb04 e409 	mla	r4, r4, r9, lr
 80257f8:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 80257fc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025800:	b2af      	uxth	r7, r5
 8025802:	fb08 4303 	mla	r3, r8, r3, r4
 8025806:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 802580a:	43ed      	mvns	r5, r5
 802580c:	4322      	orrs	r2, r4
 802580e:	b2ed      	uxtb	r5, r5
 8025810:	fb06 3202 	mla	r2, r6, r2, r3
 8025814:	10c6      	asrs	r6, r0, #3
 8025816:	0d53      	lsrs	r3, r2, #21
 8025818:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802581c:	0952      	lsrs	r2, r2, #5
 802581e:	fb16 f605 	smulbb	r6, r6, r5
 8025822:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025826:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802582a:	431a      	orrs	r2, r3
 802582c:	b293      	uxth	r3, r2
 802582e:	1202      	asrs	r2, r0, #8
 8025830:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8025834:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025838:	00dc      	lsls	r4, r3, #3
 802583a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802583e:	fb12 f205 	smulbb	r2, r2, r5
 8025842:	b2e4      	uxtb	r4, r4
 8025844:	fb0c 2c07 	mla	ip, ip, r7, r2
 8025848:	10da      	asrs	r2, r3, #3
 802584a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802584e:	fa1f fc8c 	uxth.w	ip, ip
 8025852:	fb02 6207 	mla	r2, r2, r7, r6
 8025856:	f10c 0301 	add.w	r3, ip, #1
 802585a:	b296      	uxth	r6, r2
 802585c:	00c2      	lsls	r2, r0, #3
 802585e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8025862:	b2d2      	uxtb	r2, r2
 8025864:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8025868:	fb12 f205 	smulbb	r2, r2, r5
 802586c:	fb04 2207 	mla	r2, r4, r7, r2
 8025870:	b292      	uxth	r2, r2
 8025872:	1c50      	adds	r0, r2, #1
 8025874:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025878:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802587c:	4313      	orrs	r3, r2
 802587e:	1c72      	adds	r2, r6, #1
 8025880:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8025884:	0952      	lsrs	r2, r2, #5
 8025886:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802588a:	4313      	orrs	r3, r2
 802588c:	800b      	strh	r3, [r1, #0]
 802588e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025892:	2f0f      	cmp	r7, #15
 8025894:	f63f af71 	bhi.w	802577a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8025898:	4603      	mov	r3, r0
 802589a:	4684      	mov	ip, r0
 802589c:	e785      	b.n	80257aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 802589e:	bf00      	nop
 80258a0:	0802ceb2 	.word	0x0802ceb2
 80258a4:	0802d51e 	.word	0x0802d51e
 80258a8:	0802cf9b 	.word	0x0802cf9b

080258ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80258ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80258b0:	ed2d 8b08 	vpush	{d8-d11}
 80258b4:	b093      	sub	sp, #76	; 0x4c
 80258b6:	461d      	mov	r5, r3
 80258b8:	eeb0 aa40 	vmov.f32	s20, s0
 80258bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80258be:	eef0 9a60 	vmov.f32	s19, s1
 80258c2:	9210      	str	r2, [sp, #64]	; 0x40
 80258c4:	eeb0 9a41 	vmov.f32	s18, s2
 80258c8:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 80258cc:	eeb0 8a62 	vmov.f32	s16, s5
 80258d0:	910a      	str	r1, [sp, #40]	; 0x28
 80258d2:	eef0 8a43 	vmov.f32	s17, s6
 80258d6:	920b      	str	r2, [sp, #44]	; 0x2c
 80258d8:	eef0 ba44 	vmov.f32	s23, s8
 80258dc:	6859      	ldr	r1, [r3, #4]
 80258de:	eeb0 ba64 	vmov.f32	s22, s9
 80258e2:	681b      	ldr	r3, [r3, #0]
 80258e4:	eef0 aa45 	vmov.f32	s21, s10
 80258e8:	9011      	str	r0, [sp, #68]	; 0x44
 80258ea:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 80258ee:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 80258f2:	fb01 2707 	mla	r7, r1, r7, r2
 80258f6:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80258fa:	9307      	str	r3, [sp, #28]
 80258fc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80258fe:	681b      	ldr	r3, [r3, #0]
 8025900:	9309      	str	r3, [sp, #36]	; 0x24
 8025902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025904:	43db      	mvns	r3, r3
 8025906:	b2db      	uxtb	r3, r3
 8025908:	9308      	str	r3, [sp, #32]
 802590a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802590c:	2b00      	cmp	r3, #0
 802590e:	dc03      	bgt.n	8025918 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025910:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025912:	2b00      	cmp	r3, #0
 8025914:	f340 8205 	ble.w	8025d22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025918:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802591a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802591e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025922:	1e48      	subs	r0, r1, #1
 8025924:	f102 3cff 	add.w	ip, r2, #4294967295
 8025928:	2d00      	cmp	r5, #0
 802592a:	f340 80da 	ble.w	8025ae2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802592e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025932:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025936:	d406      	bmi.n	8025946 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8025938:	4586      	cmp	lr, r0
 802593a:	da04      	bge.n	8025946 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802593c:	2b00      	cmp	r3, #0
 802593e:	db02      	blt.n	8025946 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8025940:	4563      	cmp	r3, ip
 8025942:	f2c0 80cf 	blt.w	8025ae4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8025946:	f11e 0e01 	adds.w	lr, lr, #1
 802594a:	f100 80c1 	bmi.w	8025ad0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802594e:	4571      	cmp	r1, lr
 8025950:	f2c0 80be 	blt.w	8025ad0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8025954:	3301      	adds	r3, #1
 8025956:	f100 80bb 	bmi.w	8025ad0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802595a:	429a      	cmp	r2, r3
 802595c:	f2c0 80b8 	blt.w	8025ad0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8025960:	46a9      	mov	r9, r5
 8025962:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8025966:	f1b9 0f00 	cmp.w	r9, #0
 802596a:	f340 80d8 	ble.w	8025b1e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 802596e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025970:	1421      	asrs	r1, r4, #16
 8025972:	ea4f 4026 	mov.w	r0, r6, asr #16
 8025976:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802597a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802597e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8025982:	f100 8112 	bmi.w	8025baa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8025986:	f10e 3aff 	add.w	sl, lr, #4294967295
 802598a:	4551      	cmp	r1, sl
 802598c:	f280 810d 	bge.w	8025baa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8025990:	2800      	cmp	r0, #0
 8025992:	f2c0 810a 	blt.w	8025baa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8025996:	f103 3aff 	add.w	sl, r3, #4294967295
 802599a:	4550      	cmp	r0, sl
 802599c:	f280 8105 	bge.w	8025baa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80259a0:	fa0f f38e 	sxth.w	r3, lr
 80259a4:	fb00 1103 	mla	r1, r0, r3, r1
 80259a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80259aa:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 80259ae:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 80259b2:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80259b6:	f1bc 0f00 	cmp.w	ip, #0
 80259ba:	d007      	beq.n	80259cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80259bc:	005b      	lsls	r3, r3, #1
 80259be:	eb0a 0003 	add.w	r0, sl, r3
 80259c2:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80259c6:	930c      	str	r3, [sp, #48]	; 0x30
 80259c8:	8843      	ldrh	r3, [r0, #2]
 80259ca:	930d      	str	r3, [sp, #52]	; 0x34
 80259cc:	ea4f 400e 	mov.w	r0, lr, lsl #16
 80259d0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80259d4:	fb12 f30c 	smulbb	r3, r2, ip
 80259d8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80259dc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80259e0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80259e4:	10db      	asrs	r3, r3, #3
 80259e6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80259ea:	ea40 000e 	orr.w	r0, r0, lr
 80259ee:	f1cc 0e10 	rsb	lr, ip, #16
 80259f2:	ea4a 0101 	orr.w	r1, sl, r1
 80259f6:	9f08      	ldr	r7, [sp, #32]
 80259f8:	ebae 0e02 	sub.w	lr, lr, r2
 80259fc:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8025a00:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8025a04:	4351      	muls	r1, r2
 8025a06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025a08:	fb0e 1e00 	mla	lr, lr, r0, r1
 8025a0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025a0e:	0410      	lsls	r0, r2, #16
 8025a10:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025a14:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025a18:	4310      	orrs	r0, r2
 8025a1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025a1c:	0412      	lsls	r2, r2, #16
 8025a1e:	fb03 e000 	mla	r0, r3, r0, lr
 8025a22:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8025a26:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8025a2a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025a2e:	f8b8 c000 	ldrh.w	ip, [r8]
 8025a32:	ea42 020e 	orr.w	r2, r2, lr
 8025a36:	ea4f 212c 	mov.w	r1, ip, asr #8
 8025a3a:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8025a3e:	fb03 0302 	mla	r3, r3, r2, r0
 8025a42:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025a46:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025a4a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8025a4e:	fb11 f107 	smulbb	r1, r1, r7
 8025a52:	0d5a      	lsrs	r2, r3, #21
 8025a54:	095b      	lsrs	r3, r3, #5
 8025a56:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025a5a:	fa5f fc8c 	uxtb.w	ip, ip
 8025a5e:	fb1e fe07 	smulbb	lr, lr, r7
 8025a62:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025a66:	fb1c fc07 	smulbb	ip, ip, r7
 8025a6a:	4313      	orrs	r3, r2
 8025a6c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8025a70:	b29b      	uxth	r3, r3
 8025a72:	1218      	asrs	r0, r3, #8
 8025a74:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025a78:	fb00 1002 	mla	r0, r0, r2, r1
 8025a7c:	10d9      	asrs	r1, r3, #3
 8025a7e:	00db      	lsls	r3, r3, #3
 8025a80:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025a84:	b280      	uxth	r0, r0
 8025a86:	b2db      	uxtb	r3, r3
 8025a88:	fb01 e102 	mla	r1, r1, r2, lr
 8025a8c:	fb03 c202 	mla	r2, r3, r2, ip
 8025a90:	1c43      	adds	r3, r0, #1
 8025a92:	b289      	uxth	r1, r1
 8025a94:	b292      	uxth	r2, r2
 8025a96:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025a9a:	f102 0c01 	add.w	ip, r2, #1
 8025a9e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8025aa2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025aa6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025aaa:	4313      	orrs	r3, r2
 8025aac:	1c4a      	adds	r2, r1, #1
 8025aae:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025ab2:	0949      	lsrs	r1, r1, #5
 8025ab4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025ab8:	430b      	orrs	r3, r1
 8025aba:	f8a8 3000 	strh.w	r3, [r8]
 8025abe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025ac0:	f108 0802 	add.w	r8, r8, #2
 8025ac4:	f109 39ff 	add.w	r9, r9, #4294967295
 8025ac8:	441c      	add	r4, r3
 8025aca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025acc:	441e      	add	r6, r3
 8025ace:	e74a      	b.n	8025966 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8025ad0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025ad2:	3d01      	subs	r5, #1
 8025ad4:	441c      	add	r4, r3
 8025ad6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025ad8:	441e      	add	r6, r3
 8025ada:	9b07      	ldr	r3, [sp, #28]
 8025adc:	3302      	adds	r3, #2
 8025ade:	9307      	str	r3, [sp, #28]
 8025ae0:	e722      	b.n	8025928 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025ae2:	d022      	beq.n	8025b2a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8025ae4:	1e6b      	subs	r3, r5, #1
 8025ae6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8025ae8:	fb00 4003 	mla	r0, r0, r3, r4
 8025aec:	1400      	asrs	r0, r0, #16
 8025aee:	f53f af37 	bmi.w	8025960 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025af2:	3901      	subs	r1, #1
 8025af4:	4288      	cmp	r0, r1
 8025af6:	f6bf af33 	bge.w	8025960 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025afa:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8025afc:	fb01 6303 	mla	r3, r1, r3, r6
 8025b00:	141b      	asrs	r3, r3, #16
 8025b02:	f53f af2d 	bmi.w	8025960 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025b06:	3a01      	subs	r2, #1
 8025b08:	4293      	cmp	r3, r2
 8025b0a:	f6bf af29 	bge.w	8025960 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025b0e:	46a8      	mov	r8, r5
 8025b10:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8025b14:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8025b18:	f1b8 0f00 	cmp.w	r8, #0
 8025b1c:	dc60      	bgt.n	8025be0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8025b1e:	9b07      	ldr	r3, [sp, #28]
 8025b20:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8025b24:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8025b28:	9307      	str	r3, [sp, #28]
 8025b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025b2c:	2b00      	cmp	r3, #0
 8025b2e:	f340 80f8 	ble.w	8025d22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025b32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025b36:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025b38:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025b3c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025b40:	eef0 6a48 	vmov.f32	s13, s16
 8025b44:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025b48:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025b4c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b50:	ee16 4a90 	vmov	r4, s13
 8025b54:	eef0 6a68 	vmov.f32	s13, s17
 8025b58:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b5c:	ee16 6a90 	vmov	r6, s13
 8025b60:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025b64:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025b68:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025b6c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025b70:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025b74:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025b78:	ee18 2a10 	vmov	r2, s16
 8025b7c:	eeb0 8a47 	vmov.f32	s16, s14
 8025b80:	fb92 f3f3 	sdiv	r3, r2, r3
 8025b84:	ee18 2a90 	vmov	r2, s17
 8025b88:	9327      	str	r3, [sp, #156]	; 0x9c
 8025b8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025b8c:	eef0 8a67 	vmov.f32	s17, s15
 8025b90:	fb92 f3f3 	sdiv	r3, r2, r3
 8025b94:	9328      	str	r3, [sp, #160]	; 0xa0
 8025b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025b98:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025b9a:	3b01      	subs	r3, #1
 8025b9c:	930a      	str	r3, [sp, #40]	; 0x28
 8025b9e:	bf08      	it	eq
 8025ba0:	4615      	moveq	r5, r2
 8025ba2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025ba4:	bf18      	it	ne
 8025ba6:	461d      	movne	r5, r3
 8025ba8:	e6af      	b.n	802590a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8025baa:	f111 0a01 	adds.w	sl, r1, #1
 8025bae:	d486      	bmi.n	8025abe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8025bb0:	45d6      	cmp	lr, sl
 8025bb2:	db84      	blt.n	8025abe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8025bb4:	f110 0a01 	adds.w	sl, r0, #1
 8025bb8:	d481      	bmi.n	8025abe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8025bba:	4553      	cmp	r3, sl
 8025bbc:	f6ff af7f 	blt.w	8025abe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8025bc0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8025bc2:	b21b      	sxth	r3, r3
 8025bc4:	9101      	str	r1, [sp, #4]
 8025bc6:	4641      	mov	r1, r8
 8025bc8:	9300      	str	r3, [sp, #0]
 8025bca:	fa0f f38e 	sxth.w	r3, lr
 8025bce:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8025bd2:	e9cd c704 	strd	ip, r7, [sp, #16]
 8025bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025bd8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025bda:	f7ff fd93 	bl	8025704 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8025bde:	e76e      	b.n	8025abe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8025be0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025be2:	1430      	asrs	r0, r6, #16
 8025be4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025be6:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8025bea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025bee:	1423      	asrs	r3, r4, #16
 8025bf0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025bf4:	fb01 3000 	mla	r0, r1, r0, r3
 8025bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025bfa:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8025bfe:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8025c02:	8858      	ldrh	r0, [r3, #2]
 8025c04:	f1be 0f00 	cmp.w	lr, #0
 8025c08:	d00b      	beq.n	8025c22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8025c0a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8025c0e:	3901      	subs	r1, #1
 8025c10:	0049      	lsls	r1, r1, #1
 8025c12:	3102      	adds	r1, #2
 8025c14:	eb03 0b01 	add.w	fp, r3, r1
 8025c18:	5a5b      	ldrh	r3, [r3, r1]
 8025c1a:	930e      	str	r3, [sp, #56]	; 0x38
 8025c1c:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8025c20:	930f      	str	r3, [sp, #60]	; 0x3c
 8025c22:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8025c26:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025c2a:	fb12 f30e 	smulbb	r3, r2, lr
 8025c2e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025c32:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8025c36:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025c3a:	10db      	asrs	r3, r3, #3
 8025c3c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025c40:	ea41 010c 	orr.w	r1, r1, ip
 8025c44:	f1ce 0c10 	rsb	ip, lr, #16
 8025c48:	ea4b 0000 	orr.w	r0, fp, r0
 8025c4c:	9f08      	ldr	r7, [sp, #32]
 8025c4e:	ebac 0c02 	sub.w	ip, ip, r2
 8025c52:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8025c56:	f108 38ff 	add.w	r8, r8, #4294967295
 8025c5a:	4350      	muls	r0, r2
 8025c5c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8025c60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025c62:	fb0c 0c01 	mla	ip, ip, r1, r0
 8025c66:	980e      	ldr	r0, [sp, #56]	; 0x38
 8025c68:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8025c6c:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8025c70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025c72:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025c76:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025c7a:	0412      	lsls	r2, r2, #16
 8025c7c:	ea4b 0101 	orr.w	r1, fp, r1
 8025c80:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025c84:	fb03 c101 	mla	r1, r3, r1, ip
 8025c88:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8025c8c:	4302      	orrs	r2, r0
 8025c8e:	fb03 1202 	mla	r2, r3, r2, r1
 8025c92:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8025c96:	0952      	lsrs	r2, r2, #5
 8025c98:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8025c9c:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8025ca0:	f8b9 2000 	ldrh.w	r2, [r9]
 8025ca4:	ea4b 0303 	orr.w	r3, fp, r3
 8025ca8:	1211      	asrs	r1, r2, #8
 8025caa:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8025cae:	b29b      	uxth	r3, r3
 8025cb0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025cb4:	00d2      	lsls	r2, r2, #3
 8025cb6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8025cba:	fb11 f107 	smulbb	r1, r1, r7
 8025cbe:	1218      	asrs	r0, r3, #8
 8025cc0:	fb1c fc07 	smulbb	ip, ip, r7
 8025cc4:	b2d2      	uxtb	r2, r2
 8025cc6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025cca:	fb12 f207 	smulbb	r2, r2, r7
 8025cce:	fb00 100a 	mla	r0, r0, sl, r1
 8025cd2:	10d9      	asrs	r1, r3, #3
 8025cd4:	00db      	lsls	r3, r3, #3
 8025cd6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025cda:	b280      	uxth	r0, r0
 8025cdc:	b2db      	uxtb	r3, r3
 8025cde:	fb01 c10a 	mla	r1, r1, sl, ip
 8025ce2:	fb03 230a 	mla	r3, r3, sl, r2
 8025ce6:	1c42      	adds	r2, r0, #1
 8025ce8:	b289      	uxth	r1, r1
 8025cea:	b29b      	uxth	r3, r3
 8025cec:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025cf0:	f101 0c01 	add.w	ip, r1, #1
 8025cf4:	1c5a      	adds	r2, r3, #1
 8025cf6:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8025cfa:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8025cfe:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025d02:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025d04:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8025d08:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025d0c:	441c      	add	r4, r3
 8025d0e:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025d12:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025d14:	4310      	orrs	r0, r2
 8025d16:	441e      	add	r6, r3
 8025d18:	ea40 000c 	orr.w	r0, r0, ip
 8025d1c:	f829 0b02 	strh.w	r0, [r9], #2
 8025d20:	e6fa      	b.n	8025b18 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8025d22:	b013      	add	sp, #76	; 0x4c
 8025d24:	ecbd 8b08 	vpop	{d8-d11}
 8025d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025d2c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8025d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025d30:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8025d34:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8025d38:	fb06 5c03 	mla	ip, r6, r3, r5
 8025d3c:	2e00      	cmp	r6, #0
 8025d3e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8025d42:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8025d46:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8025d4a:	8808      	ldrh	r0, [r1, #0]
 8025d4c:	db2e      	blt.n	8025dac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8025d4e:	45b0      	cmp	r8, r6
 8025d50:	dd2c      	ble.n	8025dac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8025d52:	2d00      	cmp	r5, #0
 8025d54:	db28      	blt.n	8025da8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8025d56:	42ab      	cmp	r3, r5
 8025d58:	dd26      	ble.n	8025da8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8025d5a:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8025d5e:	1c6a      	adds	r2, r5, #1
 8025d60:	d427      	bmi.n	8025db2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8025d62:	4293      	cmp	r3, r2
 8025d64:	dd25      	ble.n	8025db2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8025d66:	b324      	cbz	r4, 8025db2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8025d68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8025d6c:	3601      	adds	r6, #1
 8025d6e:	d424      	bmi.n	8025dba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8025d70:	45b0      	cmp	r8, r6
 8025d72:	dd22      	ble.n	8025dba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8025d74:	b31f      	cbz	r7, 8025dbe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8025d76:	2d00      	cmp	r5, #0
 8025d78:	db1d      	blt.n	8025db6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8025d7a:	42ab      	cmp	r3, r5
 8025d7c:	dd1b      	ble.n	8025db6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8025d7e:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 8025d82:	3501      	adds	r5, #1
 8025d84:	d405      	bmi.n	8025d92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8025d86:	42ab      	cmp	r3, r5
 8025d88:	dd03      	ble.n	8025d92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8025d8a:	b124      	cbz	r4, 8025d96 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8025d8c:	3301      	adds	r3, #1
 8025d8e:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 8025d92:	2c0f      	cmp	r4, #15
 8025d94:	d801      	bhi.n	8025d9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8025d96:	2f0f      	cmp	r7, #15
 8025d98:	d914      	bls.n	8025dc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8025d9a:	4b27      	ldr	r3, [pc, #156]	; (8025e38 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8025d9c:	f240 11ef 	movw	r1, #495	; 0x1ef
 8025da0:	4a26      	ldr	r2, [pc, #152]	; (8025e3c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8025da2:	4827      	ldr	r0, [pc, #156]	; (8025e40 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8025da4:	f002 fc78 	bl	8028698 <__assert_func>
 8025da8:	4684      	mov	ip, r0
 8025daa:	e7d8      	b.n	8025d5e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8025dac:	4602      	mov	r2, r0
 8025dae:	4684      	mov	ip, r0
 8025db0:	e7dc      	b.n	8025d6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8025db2:	4602      	mov	r2, r0
 8025db4:	e7da      	b.n	8025d6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8025db6:	4606      	mov	r6, r0
 8025db8:	e7e3      	b.n	8025d82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8025dba:	4606      	mov	r6, r0
 8025dbc:	e7e9      	b.n	8025d92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8025dbe:	2c0f      	cmp	r4, #15
 8025dc0:	d8eb      	bhi.n	8025d9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8025dc2:	4606      	mov	r6, r0
 8025dc4:	fb14 f307 	smulbb	r3, r4, r7
 8025dc8:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8025dcc:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8025dd0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025dd4:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8025dd8:	10db      	asrs	r3, r3, #3
 8025dda:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025dde:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025de2:	ea45 0c0c 	orr.w	ip, r5, ip
 8025de6:	f1c7 0510 	rsb	r5, r7, #16
 8025dea:	ea4e 0202 	orr.w	r2, lr, r2
 8025dee:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8025df2:	1b2d      	subs	r5, r5, r4
 8025df4:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8025df8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8025dfc:	4354      	muls	r4, r2
 8025dfe:	fb05 450c 	mla	r5, r5, ip, r4
 8025e02:	0404      	lsls	r4, r0, #16
 8025e04:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025e08:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8025e0c:	4320      	orrs	r0, r4
 8025e0e:	fb03 5400 	mla	r4, r3, r0, r5
 8025e12:	0430      	lsls	r0, r6, #16
 8025e14:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8025e18:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025e1c:	4330      	orrs	r0, r6
 8025e1e:	fb07 4000 	mla	r0, r7, r0, r4
 8025e22:	0d43      	lsrs	r3, r0, #21
 8025e24:	0940      	lsrs	r0, r0, #5
 8025e26:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025e2a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025e2e:	4318      	orrs	r0, r3
 8025e30:	8008      	strh	r0, [r1, #0]
 8025e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025e36:	bf00      	nop
 8025e38:	0802ceb2 	.word	0x0802ceb2
 8025e3c:	0802d51e 	.word	0x0802d51e
 8025e40:	0802cf9b 	.word	0x0802cf9b

08025e44 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e48:	ed2d 8b08 	vpush	{d8-d11}
 8025e4c:	b08f      	sub	sp, #60	; 0x3c
 8025e4e:	461d      	mov	r5, r3
 8025e50:	eeb0 aa40 	vmov.f32	s20, s0
 8025e54:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025e56:	eef0 9a60 	vmov.f32	s19, s1
 8025e5a:	9107      	str	r1, [sp, #28]
 8025e5c:	eeb0 9a41 	vmov.f32	s18, s2
 8025e60:	6859      	ldr	r1, [r3, #4]
 8025e62:	eeb0 8a62 	vmov.f32	s16, s5
 8025e66:	920c      	str	r2, [sp, #48]	; 0x30
 8025e68:	eef0 8a43 	vmov.f32	s17, s6
 8025e6c:	681b      	ldr	r3, [r3, #0]
 8025e6e:	eef0 ba44 	vmov.f32	s23, s8
 8025e72:	eeb0 ba64 	vmov.f32	s22, s9
 8025e76:	900d      	str	r0, [sp, #52]	; 0x34
 8025e78:	eef0 aa45 	vmov.f32	s21, s10
 8025e7c:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 8025e80:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8025e84:	fb01 2707 	mla	r7, r1, r7, r2
 8025e88:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8025e8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025e8e:	f8d3 8000 	ldr.w	r8, [r3]
 8025e92:	9b07      	ldr	r3, [sp, #28]
 8025e94:	2b00      	cmp	r3, #0
 8025e96:	dc03      	bgt.n	8025ea0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8025e98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025e9a:	2b00      	cmp	r3, #0
 8025e9c:	f340 8182 	ble.w	80261a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8025ea0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025ea2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025ea6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025eaa:	1e48      	subs	r0, r1, #1
 8025eac:	f102 3cff 	add.w	ip, r2, #4294967295
 8025eb0:	2d00      	cmp	r5, #0
 8025eb2:	f340 809b 	ble.w	8025fec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 8025eb6:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025eba:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025ebe:	d406      	bmi.n	8025ece <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025ec0:	4586      	cmp	lr, r0
 8025ec2:	da04      	bge.n	8025ece <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025ec4:	2b00      	cmp	r3, #0
 8025ec6:	db02      	blt.n	8025ece <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025ec8:	4563      	cmp	r3, ip
 8025eca:	f2c0 8090 	blt.w	8025fee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025ece:	f11e 0e01 	adds.w	lr, lr, #1
 8025ed2:	f100 8084 	bmi.w	8025fde <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8025ed6:	4571      	cmp	r1, lr
 8025ed8:	f2c0 8081 	blt.w	8025fde <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8025edc:	3301      	adds	r3, #1
 8025ede:	d47e      	bmi.n	8025fde <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8025ee0:	429a      	cmp	r2, r3
 8025ee2:	db7c      	blt.n	8025fde <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8025ee4:	46aa      	mov	sl, r5
 8025ee6:	46b9      	mov	r9, r7
 8025ee8:	f1ba 0f00 	cmp.w	sl, #0
 8025eec:	f340 8099 	ble.w	8026022 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8025ef0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025ef2:	1421      	asrs	r1, r4, #16
 8025ef4:	ea4f 4026 	mov.w	r0, r6, asr #16
 8025ef8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025efc:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025f00:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8025f04:	f100 80d1 	bmi.w	80260aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8025f08:	f10e 3bff 	add.w	fp, lr, #4294967295
 8025f0c:	4559      	cmp	r1, fp
 8025f0e:	f280 80cc 	bge.w	80260aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8025f12:	2800      	cmp	r0, #0
 8025f14:	f2c0 80c9 	blt.w	80260aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8025f18:	f103 3bff 	add.w	fp, r3, #4294967295
 8025f1c:	4558      	cmp	r0, fp
 8025f1e:	f280 80c4 	bge.w	80260aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8025f22:	fa0f fe8e 	sxth.w	lr, lr
 8025f26:	fb00 110e 	mla	r1, r0, lr, r1
 8025f2a:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8025f2e:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8025f32:	8841      	ldrh	r1, [r0, #2]
 8025f34:	f1bc 0f00 	cmp.w	ip, #0
 8025f38:	d00b      	beq.n	8025f52 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8025f3a:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8025f3e:	3b01      	subs	r3, #1
 8025f40:	005b      	lsls	r3, r3, #1
 8025f42:	3302      	adds	r3, #2
 8025f44:	eb00 0e03 	add.w	lr, r0, r3
 8025f48:	5ac3      	ldrh	r3, [r0, r3]
 8025f4a:	9308      	str	r3, [sp, #32]
 8025f4c:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8025f50:	9309      	str	r3, [sp, #36]	; 0x24
 8025f52:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8025f56:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8025f5a:	fb12 f30c 	smulbb	r3, r2, ip
 8025f5e:	f1cc 0e10 	rsb	lr, ip, #16
 8025f62:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025f66:	10db      	asrs	r3, r3, #3
 8025f68:	ebae 0e02 	sub.w	lr, lr, r2
 8025f6c:	ea40 000b 	orr.w	r0, r0, fp
 8025f70:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8025f74:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025f78:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8025f7c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025f80:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8025f84:	ea4b 0101 	orr.w	r1, fp, r1
 8025f88:	4351      	muls	r1, r2
 8025f8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025f8c:	fb0e 1e00 	mla	lr, lr, r0, r1
 8025f90:	0410      	lsls	r0, r2, #16
 8025f92:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025f96:	9908      	ldr	r1, [sp, #32]
 8025f98:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025f9c:	4310      	orrs	r0, r2
 8025f9e:	9a08      	ldr	r2, [sp, #32]
 8025fa0:	0412      	lsls	r2, r2, #16
 8025fa2:	fb03 e000 	mla	r0, r3, r0, lr
 8025fa6:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8025faa:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8025fae:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025fb2:	ea42 020e 	orr.w	r2, r2, lr
 8025fb6:	fb03 0302 	mla	r3, r3, r2, r0
 8025fba:	0d5a      	lsrs	r2, r3, #21
 8025fbc:	095b      	lsrs	r3, r3, #5
 8025fbe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025fc2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025fc6:	4313      	orrs	r3, r2
 8025fc8:	f8a9 3000 	strh.w	r3, [r9]
 8025fcc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025fce:	f109 0902 	add.w	r9, r9, #2
 8025fd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025fd6:	441c      	add	r4, r3
 8025fd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025fda:	441e      	add	r6, r3
 8025fdc:	e784      	b.n	8025ee8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8025fde:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025fe0:	3d01      	subs	r5, #1
 8025fe2:	3702      	adds	r7, #2
 8025fe4:	441c      	add	r4, r3
 8025fe6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025fe8:	441e      	add	r6, r3
 8025fea:	e761      	b.n	8025eb0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025fec:	d01d      	beq.n	802602a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8025fee:	1e6b      	subs	r3, r5, #1
 8025ff0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8025ff2:	fb00 4003 	mla	r0, r0, r3, r4
 8025ff6:	1400      	asrs	r0, r0, #16
 8025ff8:	f53f af74 	bmi.w	8025ee4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8025ffc:	3901      	subs	r1, #1
 8025ffe:	4288      	cmp	r0, r1
 8026000:	f6bf af70 	bge.w	8025ee4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8026004:	9924      	ldr	r1, [sp, #144]	; 0x90
 8026006:	fb01 6303 	mla	r3, r1, r3, r6
 802600a:	141b      	asrs	r3, r3, #16
 802600c:	f53f af6a 	bmi.w	8025ee4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8026010:	3a01      	subs	r2, #1
 8026012:	4293      	cmp	r3, r2
 8026014:	f6bf af66 	bge.w	8025ee4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8026018:	46a9      	mov	r9, r5
 802601a:	46ba      	mov	sl, r7
 802601c:	f1b9 0f00 	cmp.w	r9, #0
 8026020:	dc5b      	bgt.n	80260da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8026022:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026026:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802602a:	9b07      	ldr	r3, [sp, #28]
 802602c:	2b00      	cmp	r3, #0
 802602e:	f340 80b9 	ble.w	80261a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8026032:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026036:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026038:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802603c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026040:	eef0 6a48 	vmov.f32	s13, s16
 8026044:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026048:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802604c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026050:	ee16 4a90 	vmov	r4, s13
 8026054:	eef0 6a68 	vmov.f32	s13, s17
 8026058:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802605c:	ee16 6a90 	vmov	r6, s13
 8026060:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026064:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026068:	ee37 8a48 	vsub.f32	s16, s14, s16
 802606c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026070:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026074:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026078:	ee18 2a10 	vmov	r2, s16
 802607c:	eeb0 8a47 	vmov.f32	s16, s14
 8026080:	fb92 f3f3 	sdiv	r3, r2, r3
 8026084:	ee18 2a90 	vmov	r2, s17
 8026088:	9323      	str	r3, [sp, #140]	; 0x8c
 802608a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802608c:	eef0 8a67 	vmov.f32	s17, s15
 8026090:	fb92 f3f3 	sdiv	r3, r2, r3
 8026094:	9324      	str	r3, [sp, #144]	; 0x90
 8026096:	9b07      	ldr	r3, [sp, #28]
 8026098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802609a:	3b01      	subs	r3, #1
 802609c:	9307      	str	r3, [sp, #28]
 802609e:	bf08      	it	eq
 80260a0:	4615      	moveq	r5, r2
 80260a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80260a4:	bf18      	it	ne
 80260a6:	461d      	movne	r5, r3
 80260a8:	e6f3      	b.n	8025e92 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80260aa:	f111 0b01 	adds.w	fp, r1, #1
 80260ae:	d48d      	bmi.n	8025fcc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80260b0:	45de      	cmp	lr, fp
 80260b2:	db8b      	blt.n	8025fcc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80260b4:	f110 0b01 	adds.w	fp, r0, #1
 80260b8:	d488      	bmi.n	8025fcc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80260ba:	455b      	cmp	r3, fp
 80260bc:	db86      	blt.n	8025fcc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80260be:	b21b      	sxth	r3, r3
 80260c0:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80260c4:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80260c8:	9300      	str	r3, [sp, #0]
 80260ca:	4642      	mov	r2, r8
 80260cc:	fa0f f38e 	sxth.w	r3, lr
 80260d0:	4649      	mov	r1, r9
 80260d2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80260d4:	f7ff fe2a 	bl	8025d2c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80260d8:	e778      	b.n	8025fcc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80260da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80260dc:	1420      	asrs	r0, r4, #16
 80260de:	1431      	asrs	r1, r6, #16
 80260e0:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80260e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80260e8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80260ec:	fb03 0101 	mla	r1, r3, r1, r0
 80260f0:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80260f4:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80260f8:	8841      	ldrh	r1, [r0, #2]
 80260fa:	f1be 0f00 	cmp.w	lr, #0
 80260fe:	d00b      	beq.n	8026118 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8026100:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8026104:	3b01      	subs	r3, #1
 8026106:	005b      	lsls	r3, r3, #1
 8026108:	3302      	adds	r3, #2
 802610a:	eb00 0b03 	add.w	fp, r0, r3
 802610e:	5ac3      	ldrh	r3, [r0, r3]
 8026110:	930a      	str	r3, [sp, #40]	; 0x28
 8026112:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8026116:	930b      	str	r3, [sp, #44]	; 0x2c
 8026118:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802611c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026120:	fb12 f30e 	smulbb	r3, r2, lr
 8026124:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026128:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802612c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026130:	10db      	asrs	r3, r3, #3
 8026132:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026136:	ea40 000c 	orr.w	r0, r0, ip
 802613a:	f1ce 0c10 	rsb	ip, lr, #16
 802613e:	ea4b 0101 	orr.w	r1, fp, r1
 8026142:	f109 39ff 	add.w	r9, r9, #4294967295
 8026146:	ebac 0c02 	sub.w	ip, ip, r2
 802614a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802614e:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8026152:	4351      	muls	r1, r2
 8026154:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026156:	fb0c 1c00 	mla	ip, ip, r0, r1
 802615a:	990a      	ldr	r1, [sp, #40]	; 0x28
 802615c:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8026160:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8026164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026166:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802616a:	0412      	lsls	r2, r2, #16
 802616c:	ea4b 0000 	orr.w	r0, fp, r0
 8026170:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8026174:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026178:	fb03 c000 	mla	r0, r3, r0, ip
 802617c:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8026180:	ea42 0b0b 	orr.w	fp, r2, fp
 8026184:	fb03 000b 	mla	r0, r3, fp, r0
 8026188:	0d43      	lsrs	r3, r0, #21
 802618a:	0940      	lsrs	r0, r0, #5
 802618c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026190:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026194:	4318      	orrs	r0, r3
 8026196:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8026198:	441c      	add	r4, r3
 802619a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802619c:	f82a 0b02 	strh.w	r0, [sl], #2
 80261a0:	441e      	add	r6, r3
 80261a2:	e73b      	b.n	802601c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80261a4:	b00f      	add	sp, #60	; 0x3c
 80261a6:	ecbd 8b08 	vpop	{d8-d11}
 80261aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080261b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80261b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261b4:	880e      	ldrh	r6, [r1, #0]
 80261b6:	b085      	sub	sp, #20
 80261b8:	4690      	mov	r8, r2
 80261ba:	ea4f 2c26 	mov.w	ip, r6, asr #8
 80261be:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 80261c2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80261c6:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 80261ca:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 80261ce:	00f6      	lsls	r6, r6, #3
 80261d0:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80261d4:	9200      	str	r2, [sp, #0]
 80261d6:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 80261da:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 80261de:	9201      	str	r2, [sp, #4]
 80261e0:	b2f2      	uxtb	r2, r6
 80261e2:	2c00      	cmp	r4, #0
 80261e4:	fb04 5603 	mla	r6, r4, r3, r5
 80261e8:	9202      	str	r2, [sp, #8]
 80261ea:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 80261ee:	db36      	blt.n	802625e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 80261f0:	45a6      	cmp	lr, r4
 80261f2:	dd34      	ble.n	802625e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xae>
 80261f4:	2d00      	cmp	r5, #0
 80261f6:	db30      	blt.n	802625a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 80261f8:	42ab      	cmp	r3, r5
 80261fa:	dd2e      	ble.n	802625a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xaa>
 80261fc:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 8026200:	1c6e      	adds	r6, r5, #1
 8026202:	d42f      	bmi.n	8026264 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8026204:	42b3      	cmp	r3, r6
 8026206:	dd2d      	ble.n	8026264 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8026208:	b370      	cbz	r0, 8026268 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb8>
 802620a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802620e:	3401      	adds	r4, #1
 8026210:	d42e      	bmi.n	8026270 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 8026212:	45a6      	cmp	lr, r4
 8026214:	dd2c      	ble.n	8026270 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc0>
 8026216:	b377      	cbz	r7, 8026276 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc6>
 8026218:	2d00      	cmp	r5, #0
 802621a:	db27      	blt.n	802626c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 802621c:	42ab      	cmp	r3, r5
 802621e:	dd25      	ble.n	802626c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbc>
 8026220:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8026224:	3501      	adds	r5, #1
 8026226:	d429      	bmi.n	802627c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 8026228:	42ab      	cmp	r3, r5
 802622a:	dd27      	ble.n	802627c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 802622c:	b340      	cbz	r0, 8026280 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 802622e:	3301      	adds	r3, #1
 8026230:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8026234:	280f      	cmp	r0, #15
 8026236:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802623a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802623e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026242:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8026246:	d801      	bhi.n	802624c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8026248:	2f0f      	cmp	r7, #15
 802624a:	d91b      	bls.n	8026284 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 802624c:	4b85      	ldr	r3, [pc, #532]	; (8026464 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 802624e:	f240 210d 	movw	r1, #525	; 0x20d
 8026252:	4a85      	ldr	r2, [pc, #532]	; (8026468 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8026254:	4885      	ldr	r0, [pc, #532]	; (802646c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 8026256:	f002 fa1f 	bl	8028698 <__assert_func>
 802625a:	2200      	movs	r2, #0
 802625c:	e7d0      	b.n	8026200 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x50>
 802625e:	2600      	movs	r6, #0
 8026260:	4632      	mov	r2, r6
 8026262:	e7d4      	b.n	802620e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8026264:	2600      	movs	r6, #0
 8026266:	e7d2      	b.n	802620e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 8026268:	4606      	mov	r6, r0
 802626a:	e7d0      	b.n	802620e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 802626c:	2400      	movs	r4, #0
 802626e:	e7d9      	b.n	8026224 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8026270:	2300      	movs	r3, #0
 8026272:	461c      	mov	r4, r3
 8026274:	e7de      	b.n	8026234 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8026276:	463b      	mov	r3, r7
 8026278:	463c      	mov	r4, r7
 802627a:	e7db      	b.n	8026234 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 802627c:	2300      	movs	r3, #0
 802627e:	e7d9      	b.n	8026234 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8026280:	4603      	mov	r3, r0
 8026282:	e7d7      	b.n	8026234 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x84>
 8026284:	b280      	uxth	r0, r0
 8026286:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802628a:	b2bf      	uxth	r7, r7
 802628c:	fb00 fe07 	mul.w	lr, r0, r7
 8026290:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8026294:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8026298:	eba0 0c0e 	sub.w	ip, r0, lr
 802629c:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80262a0:	b2bf      	uxth	r7, r7
 80262a2:	fa1f fc8c 	uxth.w	ip, ip
 80262a6:	eba5 0507 	sub.w	r5, r5, r7
 80262aa:	fb0c f00a 	mul.w	r0, ip, sl
 80262ae:	b2ad      	uxth	r5, r5
 80262b0:	fb05 000b 	mla	r0, r5, fp, r0
 80262b4:	fb07 0009 	mla	r0, r7, r9, r0
 80262b8:	fb0e 0008 	mla	r0, lr, r8, r0
 80262bc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80262c0:	9003      	str	r0, [sp, #12]
 80262c2:	d018      	beq.n	80262f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x146>
 80262c4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80262c8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80262cc:	fb0b f000 	mul.w	r0, fp, r0
 80262d0:	fb0b fb02 	mul.w	fp, fp, r2
 80262d4:	0a02      	lsrs	r2, r0, #8
 80262d6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80262da:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80262de:	4402      	add	r2, r0
 80262e0:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80262e4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80262e8:	0a12      	lsrs	r2, r2, #8
 80262ea:	0a00      	lsrs	r0, r0, #8
 80262ec:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80262f0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80262f4:	4302      	orrs	r2, r0
 80262f6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80262fa:	d019      	beq.n	8026330 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x180>
 80262fc:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8026300:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026304:	fb0a fb0b 	mul.w	fp, sl, fp
 8026308:	fb0a fa06 	mul.w	sl, sl, r6
 802630c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8026310:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026314:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8026318:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802631c:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026320:	445e      	add	r6, fp
 8026322:	0a00      	lsrs	r0, r0, #8
 8026324:	0a36      	lsrs	r6, r6, #8
 8026326:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802632a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802632e:	4306      	orrs	r6, r0
 8026330:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026334:	d019      	beq.n	802636a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1ba>
 8026336:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802633a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802633e:	fb09 fa0a 	mul.w	sl, r9, sl
 8026342:	fb09 f904 	mul.w	r9, r9, r4
 8026346:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802634a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802634e:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8026352:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026356:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 802635a:	4454      	add	r4, sl
 802635c:	0a00      	lsrs	r0, r0, #8
 802635e:	0a24      	lsrs	r4, r4, #8
 8026360:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026364:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026368:	4304      	orrs	r4, r0
 802636a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802636e:	d019      	beq.n	80263a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f4>
 8026370:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8026374:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026378:	fb08 f909 	mul.w	r9, r8, r9
 802637c:	fb08 f803 	mul.w	r8, r8, r3
 8026380:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8026384:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8026388:	f508 7080 	add.w	r0, r8, #256	; 0x100
 802638c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026390:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026394:	444b      	add	r3, r9
 8026396:	0a00      	lsrs	r0, r0, #8
 8026398:	0a1b      	lsrs	r3, r3, #8
 802639a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802639e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80263a2:	4303      	orrs	r3, r0
 80263a4:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80263a8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80263ac:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80263b0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80263b4:	fb0c f808 	mul.w	r8, ip, r8
 80263b8:	fb0c f606 	mul.w	r6, ip, r6
 80263bc:	fb05 8800 	mla	r8, r5, r0, r8
 80263c0:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80263c4:	fb05 6202 	mla	r2, r5, r2, r6
 80263c8:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 80263cc:	fb07 8800 	mla	r8, r7, r0, r8
 80263d0:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80263d4:	b2ad      	uxth	r5, r5
 80263d6:	fb0e 8000 	mla	r0, lr, r0, r8
 80263da:	0a00      	lsrs	r0, r0, #8
 80263dc:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 80263e0:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 80263e4:	9c00      	ldr	r4, [sp, #0]
 80263e6:	fb07 2700 	mla	r7, r7, r0, r2
 80263ea:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80263ee:	9b03      	ldr	r3, [sp, #12]
 80263f0:	fb0e 7000 	mla	r0, lr, r0, r7
 80263f4:	436b      	muls	r3, r5
 80263f6:	0a00      	lsrs	r0, r0, #8
 80263f8:	1c5a      	adds	r2, r3, #1
 80263fa:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80263fe:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026402:	ea48 0000 	orr.w	r0, r8, r0
 8026406:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 802640a:	0c03      	lsrs	r3, r0, #16
 802640c:	b2d2      	uxtb	r2, r2
 802640e:	fb14 f602 	smulbb	r6, r4, r2
 8026412:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8026416:	b2c0      	uxtb	r0, r0
 8026418:	fb03 6305 	mla	r3, r3, r5, r6
 802641c:	b29e      	uxth	r6, r3
 802641e:	9b01      	ldr	r3, [sp, #4]
 8026420:	fb13 f302 	smulbb	r3, r3, r2
 8026424:	fb04 3405 	mla	r4, r4, r5, r3
 8026428:	9b02      	ldr	r3, [sp, #8]
 802642a:	fb13 f202 	smulbb	r2, r3, r2
 802642e:	b2a4      	uxth	r4, r4
 8026430:	1c73      	adds	r3, r6, #1
 8026432:	fb00 2005 	mla	r0, r0, r5, r2
 8026436:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 802643a:	b280      	uxth	r0, r0
 802643c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8026440:	1c42      	adds	r2, r0, #1
 8026442:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026446:	1c62      	adds	r2, r4, #1
 8026448:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802644c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8026450:	0952      	lsrs	r2, r2, #5
 8026452:	4303      	orrs	r3, r0
 8026454:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026458:	4313      	orrs	r3, r2
 802645a:	800b      	strh	r3, [r1, #0]
 802645c:	b005      	add	sp, #20
 802645e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026462:	bf00      	nop
 8026464:	0802ceb2 	.word	0x0802ceb2
 8026468:	0802d475 	.word	0x0802d475
 802646c:	0802cf9b 	.word	0x0802cf9b

08026470 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026474:	ed2d 8b08 	vpush	{d8-d11}
 8026478:	b09d      	sub	sp, #116	; 0x74
 802647a:	eeb0 aa40 	vmov.f32	s20, s0
 802647e:	eef0 9a60 	vmov.f32	s19, s1
 8026482:	9219      	str	r2, [sp, #100]	; 0x64
 8026484:	eeb0 9a41 	vmov.f32	s18, s2
 8026488:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 802648a:	eeb0 8a62 	vmov.f32	s16, s5
 802648e:	9307      	str	r3, [sp, #28]
 8026490:	eef0 8a43 	vmov.f32	s17, s6
 8026494:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8026498:	eef0 ba44 	vmov.f32	s23, s8
 802649c:	901b      	str	r0, [sp, #108]	; 0x6c
 802649e:	eeb0 ba64 	vmov.f32	s22, s9
 80264a2:	931a      	str	r3, [sp, #104]	; 0x68
 80264a4:	eef0 aa45 	vmov.f32	s21, s10
 80264a8:	6850      	ldr	r0, [r2, #4]
 80264aa:	9117      	str	r1, [sp, #92]	; 0x5c
 80264ac:	6812      	ldr	r2, [r2, #0]
 80264ae:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 80264b2:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 80264b6:	fb00 1303 	mla	r3, r0, r3, r1
 80264ba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80264be:	930a      	str	r3, [sp, #40]	; 0x28
 80264c0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80264c2:	681b      	ldr	r3, [r3, #0]
 80264c4:	9310      	str	r3, [sp, #64]	; 0x40
 80264c6:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80264ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80264cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80264ce:	2b00      	cmp	r3, #0
 80264d0:	dc03      	bgt.n	80264da <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80264d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80264d4:	2b00      	cmp	r3, #0
 80264d6:	f340 837b 	ble.w	8026bd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 80264da:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80264dc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80264e0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80264e4:	1e48      	subs	r0, r1, #1
 80264e6:	1e57      	subs	r7, r2, #1
 80264e8:	9b07      	ldr	r3, [sp, #28]
 80264ea:	2b00      	cmp	r3, #0
 80264ec:	f340 8194 	ble.w	8026818 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 80264f0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80264f4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80264f8:	d406      	bmi.n	8026508 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80264fa:	4584      	cmp	ip, r0
 80264fc:	da04      	bge.n	8026508 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80264fe:	2b00      	cmp	r3, #0
 8026500:	db02      	blt.n	8026508 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8026502:	42bb      	cmp	r3, r7
 8026504:	f2c0 8189 	blt.w	802681a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8026508:	f11c 0c01 	adds.w	ip, ip, #1
 802650c:	f100 8179 	bmi.w	8026802 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8026510:	4561      	cmp	r1, ip
 8026512:	f2c0 8176 	blt.w	8026802 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8026516:	3301      	adds	r3, #1
 8026518:	f100 8173 	bmi.w	8026802 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802651c:	429a      	cmp	r2, r3
 802651e:	f2c0 8170 	blt.w	8026802 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8026522:	9b07      	ldr	r3, [sp, #28]
 8026524:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026526:	9318      	str	r3, [sp, #96]	; 0x60
 8026528:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802652a:	2b00      	cmp	r3, #0
 802652c:	f340 8192 	ble.w	8026854 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8026530:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8026532:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8026536:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8026538:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802653c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8026540:	1422      	asrs	r2, r4, #16
 8026542:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026546:	689b      	ldr	r3, [r3, #8]
 8026548:	f100 81d3 	bmi.w	80268f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802654c:	f103 38ff 	add.w	r8, r3, #4294967295
 8026550:	4542      	cmp	r2, r8
 8026552:	f280 81ce 	bge.w	80268f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8026556:	f1bc 0f00 	cmp.w	ip, #0
 802655a:	f2c0 81ca 	blt.w	80268f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802655e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026562:	45c4      	cmp	ip, r8
 8026564:	f280 81c5 	bge.w	80268f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8026568:	b21b      	sxth	r3, r3
 802656a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802656c:	fb0c 2203 	mla	r2, ip, r3, r2
 8026570:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8026574:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8026578:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802657c:	2800      	cmp	r0, #0
 802657e:	f000 81af 	beq.w	80268e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8026582:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8026586:	950c      	str	r5, [sp, #48]	; 0x30
 8026588:	0e2d      	lsrs	r5, r5, #24
 802658a:	9513      	str	r5, [sp, #76]	; 0x4c
 802658c:	b181      	cbz	r1, 80265b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802658e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8026592:	3b01      	subs	r3, #1
 8026594:	009b      	lsls	r3, r3, #2
 8026596:	3304      	adds	r3, #4
 8026598:	eb08 0c03 	add.w	ip, r8, r3
 802659c:	f858 3003 	ldr.w	r3, [r8, r3]
 80265a0:	9308      	str	r3, [sp, #32]
 80265a2:	0e1b      	lsrs	r3, r3, #24
 80265a4:	9311      	str	r3, [sp, #68]	; 0x44
 80265a6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80265aa:	930d      	str	r3, [sp, #52]	; 0x34
 80265ac:	0e1b      	lsrs	r3, r3, #24
 80265ae:	9314      	str	r3, [sp, #80]	; 0x50
 80265b0:	b280      	uxth	r0, r0
 80265b2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80265b4:	b289      	uxth	r1, r1
 80265b6:	fb00 f901 	mul.w	r9, r0, r1
 80265ba:	0100      	lsls	r0, r0, #4
 80265bc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80265c0:	eba0 0809 	sub.w	r8, r0, r9
 80265c4:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80265c8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80265ca:	b289      	uxth	r1, r1
 80265cc:	fa1f f888 	uxth.w	r8, r8
 80265d0:	1a5b      	subs	r3, r3, r1
 80265d2:	fb08 f000 	mul.w	r0, r8, r0
 80265d6:	b29b      	uxth	r3, r3
 80265d8:	fb03 000e 	mla	r0, r3, lr, r0
 80265dc:	fb01 0005 	mla	r0, r1, r5, r0
 80265e0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80265e2:	fb09 0005 	mla	r0, r9, r5, r0
 80265e6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80265ea:	2800      	cmp	r0, #0
 80265ec:	f000 8100 	beq.w	80267f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80265f0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80265f4:	d01b      	beq.n	802662e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80265f6:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80265fa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80265fe:	fb0e fa0a 	mul.w	sl, lr, sl
 8026602:	fb0e fe02 	mul.w	lr, lr, r2
 8026606:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802660a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802660e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026612:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026616:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802661a:	4452      	add	r2, sl
 802661c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026620:	0a12      	lsrs	r2, r2, #8
 8026622:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026626:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802662a:	ea42 020c 	orr.w	r2, r2, ip
 802662e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026630:	2dff      	cmp	r5, #255	; 0xff
 8026632:	d021      	beq.n	8026678 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8026634:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026636:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802663a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802663c:	fb05 fb0b 	mul.w	fp, r5, fp
 8026640:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026642:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026646:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026648:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802664c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026650:	fb05 fa0a 	mul.w	sl, r5, sl
 8026654:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026658:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802665c:	44de      	add	lr, fp
 802665e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026662:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026666:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802666a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802666e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026672:	ea4e 050a 	orr.w	r5, lr, sl
 8026676:	950c      	str	r5, [sp, #48]	; 0x30
 8026678:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802667a:	2dff      	cmp	r5, #255	; 0xff
 802667c:	d021      	beq.n	80266c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802667e:	9d08      	ldr	r5, [sp, #32]
 8026680:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026684:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026686:	fb05 fb0b 	mul.w	fp, r5, fp
 802668a:	9d08      	ldr	r5, [sp, #32]
 802668c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026690:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026692:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026696:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802669a:	fb05 fa0a 	mul.w	sl, r5, sl
 802669e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80266a2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80266a6:	44de      	add	lr, fp
 80266a8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80266ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80266b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80266b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80266b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80266bc:	ea4e 050a 	orr.w	r5, lr, sl
 80266c0:	9508      	str	r5, [sp, #32]
 80266c2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80266c4:	2dff      	cmp	r5, #255	; 0xff
 80266c6:	d021      	beq.n	802670c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 80266c8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80266ca:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80266ce:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80266d0:	fb05 fb0b 	mul.w	fp, r5, fp
 80266d4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80266d6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80266da:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80266dc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80266e0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80266e4:	fb05 fa0a 	mul.w	sl, r5, sl
 80266e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80266ec:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80266f0:	44de      	add	lr, fp
 80266f2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80266f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80266fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80266fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026702:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026706:	ea4e 050a 	orr.w	r5, lr, sl
 802670a:	950d      	str	r5, [sp, #52]	; 0x34
 802670c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802670e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8026712:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026716:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802671a:	9d08      	ldr	r5, [sp, #32]
 802671c:	fb08 fc0c 	mul.w	ip, r8, ip
 8026720:	fb03 cc0e 	mla	ip, r3, lr, ip
 8026724:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8026728:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802672a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802672e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8026732:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026734:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026738:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802673c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802673e:	fb08 f80e 	mul.w	r8, r8, lr
 8026742:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026746:	f8b7 e000 	ldrh.w	lr, [r7]
 802674a:	fb03 8202 	mla	r2, r3, r2, r8
 802674e:	9b08      	ldr	r3, [sp, #32]
 8026750:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026754:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8026758:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802675a:	fb01 220a 	mla	r2, r1, sl, r2
 802675e:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8026762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026764:	fb09 2901 	mla	r9, r9, r1, r2
 8026768:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802676a:	4343      	muls	r3, r0
 802676c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026770:	1c58      	adds	r0, r3, #1
 8026772:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026776:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802677a:	ea4c 0c09 	orr.w	ip, ip, r9
 802677e:	ea4f 232e 	mov.w	r3, lr, asr #8
 8026782:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8026786:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802678a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802678e:	b2c0      	uxtb	r0, r0
 8026790:	fb11 f102 	smulbb	r1, r1, r2
 8026794:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8026798:	fb03 1300 	mla	r3, r3, r0, r1
 802679c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80267a0:	b299      	uxth	r1, r3
 80267a2:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80267a6:	fa5f fc8c 	uxtb.w	ip, ip
 80267aa:	fb13 f305 	smulbb	r3, r3, r5
 80267ae:	fb1c fc05 	smulbb	ip, ip, r5
 80267b2:	fb02 3200 	mla	r2, r2, r0, r3
 80267b6:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80267ba:	b2db      	uxtb	r3, r3
 80267bc:	b292      	uxth	r2, r2
 80267be:	fb03 cc00 	mla	ip, r3, r0, ip
 80267c2:	1c4b      	adds	r3, r1, #1
 80267c4:	fa1f fc8c 	uxth.w	ip, ip
 80267c8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80267cc:	1c51      	adds	r1, r2, #1
 80267ce:	f10c 0001 	add.w	r0, ip, #1
 80267d2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80267d6:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80267da:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 80267de:	0952      	lsrs	r2, r2, #5
 80267e0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80267e4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80267e8:	ea43 030c 	orr.w	r3, r3, ip
 80267ec:	4313      	orrs	r3, r2
 80267ee:	803b      	strh	r3, [r7, #0]
 80267f0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80267f2:	3702      	adds	r7, #2
 80267f4:	441c      	add	r4, r3
 80267f6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80267f8:	441e      	add	r6, r3
 80267fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80267fc:	3b01      	subs	r3, #1
 80267fe:	9318      	str	r3, [sp, #96]	; 0x60
 8026800:	e692      	b.n	8026528 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8026802:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8026804:	441c      	add	r4, r3
 8026806:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8026808:	441e      	add	r6, r3
 802680a:	9b07      	ldr	r3, [sp, #28]
 802680c:	3b01      	subs	r3, #1
 802680e:	9307      	str	r3, [sp, #28]
 8026810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026812:	3302      	adds	r3, #2
 8026814:	930a      	str	r3, [sp, #40]	; 0x28
 8026816:	e667      	b.n	80264e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026818:	d023      	beq.n	8026862 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802681a:	9b07      	ldr	r3, [sp, #28]
 802681c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 802681e:	3b01      	subs	r3, #1
 8026820:	fb00 4003 	mla	r0, r0, r3, r4
 8026824:	1400      	asrs	r0, r0, #16
 8026826:	f53f ae7c 	bmi.w	8026522 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802682a:	3901      	subs	r1, #1
 802682c:	4288      	cmp	r0, r1
 802682e:	f6bf ae78 	bge.w	8026522 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8026832:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8026834:	fb01 6303 	mla	r3, r1, r3, r6
 8026838:	141b      	asrs	r3, r3, #16
 802683a:	f53f ae72 	bmi.w	8026522 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802683e:	3a01      	subs	r2, #1
 8026840:	4293      	cmp	r3, r2
 8026842:	f6bf ae6e 	bge.w	8026522 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8026846:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802684a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802684e:	f1bb 0f00 	cmp.w	fp, #0
 8026852:	dc6c      	bgt.n	802692e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4be>
 8026854:	9b07      	ldr	r3, [sp, #28]
 8026856:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802685a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802685c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8026860:	930a      	str	r3, [sp, #40]	; 0x28
 8026862:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026864:	2b00      	cmp	r3, #0
 8026866:	f340 81b3 	ble.w	8026bd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 802686a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802686e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026870:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026874:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026878:	eef0 6a48 	vmov.f32	s13, s16
 802687c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026880:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026884:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026888:	ee16 4a90 	vmov	r4, s13
 802688c:	eef0 6a68 	vmov.f32	s13, s17
 8026890:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026894:	ee16 6a90 	vmov	r6, s13
 8026898:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802689c:	ee69 7a27 	vmul.f32	s15, s18, s15
 80268a0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80268a4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80268a8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80268ac:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80268b0:	ee18 2a10 	vmov	r2, s16
 80268b4:	eeb0 8a47 	vmov.f32	s16, s14
 80268b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80268bc:	ee18 2a90 	vmov	r2, s17
 80268c0:	9331      	str	r3, [sp, #196]	; 0xc4
 80268c2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80268c4:	eef0 8a67 	vmov.f32	s17, s15
 80268c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80268cc:	9332      	str	r3, [sp, #200]	; 0xc8
 80268ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80268d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80268d2:	3b01      	subs	r3, #1
 80268d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80268d6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80268d8:	bf08      	it	eq
 80268da:	4613      	moveq	r3, r2
 80268dc:	9307      	str	r3, [sp, #28]
 80268de:	e5f5      	b.n	80264cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80268e0:	2900      	cmp	r1, #0
 80268e2:	f43f ae65 	beq.w	80265b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80268e6:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80268ea:	9308      	str	r3, [sp, #32]
 80268ec:	0e1b      	lsrs	r3, r3, #24
 80268ee:	9311      	str	r3, [sp, #68]	; 0x44
 80268f0:	e65e      	b.n	80265b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80268f2:	f112 0801 	adds.w	r8, r2, #1
 80268f6:	f53f af7b 	bmi.w	80267f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80268fa:	4543      	cmp	r3, r8
 80268fc:	f6ff af78 	blt.w	80267f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8026900:	f11c 0801 	adds.w	r8, ip, #1
 8026904:	f53f af74 	bmi.w	80267f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 8026908:	45c6      	cmp	lr, r8
 802690a:	f6ff af71 	blt.w	80267f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802690e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8026910:	b21b      	sxth	r3, r3
 8026912:	9201      	str	r2, [sp, #4]
 8026914:	fa0f f28e 	sxth.w	r2, lr
 8026918:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802691c:	e9cd c002 	strd	ip, r0, [sp, #8]
 8026920:	9200      	str	r2, [sp, #0]
 8026922:	4639      	mov	r1, r7
 8026924:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026926:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8026928:	f7ff fc42 	bl	80261b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802692c:	e760      	b.n	80267f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802692e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8026930:	1427      	asrs	r7, r4, #16
 8026932:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026934:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026938:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802693c:	1433      	asrs	r3, r6, #16
 802693e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026942:	fb01 7303 	mla	r3, r1, r3, r7
 8026946:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 802694a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802694e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026952:	2a00      	cmp	r2, #0
 8026954:	f000 8133 	beq.w	8026bbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74e>
 8026958:	687d      	ldr	r5, [r7, #4]
 802695a:	950e      	str	r5, [sp, #56]	; 0x38
 802695c:	0e2d      	lsrs	r5, r5, #24
 802695e:	9515      	str	r5, [sp, #84]	; 0x54
 8026960:	b178      	cbz	r0, 8026982 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8026962:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8026966:	3901      	subs	r1, #1
 8026968:	0089      	lsls	r1, r1, #2
 802696a:	3104      	adds	r1, #4
 802696c:	eb07 0e01 	add.w	lr, r7, r1
 8026970:	5879      	ldr	r1, [r7, r1]
 8026972:	9109      	str	r1, [sp, #36]	; 0x24
 8026974:	0e09      	lsrs	r1, r1, #24
 8026976:	9112      	str	r1, [sp, #72]	; 0x48
 8026978:	f8de 1004 	ldr.w	r1, [lr, #4]
 802697c:	910f      	str	r1, [sp, #60]	; 0x3c
 802697e:	0e09      	lsrs	r1, r1, #24
 8026980:	9116      	str	r1, [sp, #88]	; 0x58
 8026982:	b292      	uxth	r2, r2
 8026984:	9915      	ldr	r1, [sp, #84]	; 0x54
 8026986:	b280      	uxth	r0, r0
 8026988:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802698a:	fb02 f800 	mul.w	r8, r2, r0
 802698e:	0112      	lsls	r2, r2, #4
 8026990:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026994:	eba2 0e08 	sub.w	lr, r2, r8
 8026998:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802699c:	b280      	uxth	r0, r0
 802699e:	fa1f fe8e 	uxth.w	lr, lr
 80269a2:	1a12      	subs	r2, r2, r0
 80269a4:	fb0e f101 	mul.w	r1, lr, r1
 80269a8:	b292      	uxth	r2, r2
 80269aa:	fb02 110c 	mla	r1, r2, ip, r1
 80269ae:	fb00 1105 	mla	r1, r0, r5, r1
 80269b2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80269b4:	fb08 1105 	mla	r1, r8, r5, r1
 80269b8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80269bc:	2900      	cmp	r1, #0
 80269be:	f000 80f5 	beq.w	8026bac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80269c2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80269c6:	d019      	beq.n	80269fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 80269c8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80269cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80269d0:	fb0c fa0a 	mul.w	sl, ip, sl
 80269d4:	fb0c fc03 	mul.w	ip, ip, r3
 80269d8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80269dc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80269e0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80269e4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80269e8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80269ec:	4453      	add	r3, sl
 80269ee:	0a3f      	lsrs	r7, r7, #8
 80269f0:	0a1b      	lsrs	r3, r3, #8
 80269f2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80269f6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80269fa:	433b      	orrs	r3, r7
 80269fc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80269fe:	2dff      	cmp	r5, #255	; 0xff
 8026a00:	d020      	beq.n	8026a44 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 8026a02:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026a04:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8026a08:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8026a0a:	436f      	muls	r7, r5
 8026a0c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026a0e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026a12:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026a16:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8026a18:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026a1c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026a20:	fb05 fa0a 	mul.w	sl, r5, sl
 8026a24:	44bc      	add	ip, r7
 8026a26:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026a2a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026a2e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026a32:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026a36:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026a3a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026a3e:	ea4c 050a 	orr.w	r5, ip, sl
 8026a42:	950e      	str	r5, [sp, #56]	; 0x38
 8026a44:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026a46:	2dff      	cmp	r5, #255	; 0xff
 8026a48:	d020      	beq.n	8026a8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8026a4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8026a4c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8026a50:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026a52:	436f      	muls	r7, r5
 8026a54:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8026a56:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026a5a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026a5e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026a60:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026a64:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026a68:	fb05 fa0a 	mul.w	sl, r5, sl
 8026a6c:	44bc      	add	ip, r7
 8026a6e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026a72:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026a76:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026a7a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026a7e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026a82:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026a86:	ea4c 050a 	orr.w	r5, ip, sl
 8026a8a:	9509      	str	r5, [sp, #36]	; 0x24
 8026a8c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8026a8e:	2dff      	cmp	r5, #255	; 0xff
 8026a90:	d020      	beq.n	8026ad4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 8026a92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026a94:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8026a98:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8026a9a:	436f      	muls	r7, r5
 8026a9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026a9e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026aa2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026aa6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8026aa8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026aac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026ab0:	fb05 fa0a 	mul.w	sl, r5, sl
 8026ab4:	44bc      	add	ip, r7
 8026ab6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026aba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026abe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026ac2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026ac6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026aca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026ace:	ea4c 050a 	orr.w	r5, ip, sl
 8026ad2:	950f      	str	r5, [sp, #60]	; 0x3c
 8026ad4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026ad6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026ada:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026ade:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8026ae2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8026ae4:	fb0e f707 	mul.w	r7, lr, r7
 8026ae8:	fb02 770c 	mla	r7, r2, ip, r7
 8026aec:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8026af0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026af2:	fb00 770c 	mla	r7, r0, ip, r7
 8026af6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8026afa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026afc:	fb08 770c 	mla	r7, r8, ip, r7
 8026b00:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8026b04:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026b06:	fb0e fe0c 	mul.w	lr, lr, ip
 8026b0a:	0a3f      	lsrs	r7, r7, #8
 8026b0c:	fb02 e303 	mla	r3, r2, r3, lr
 8026b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026b12:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026b16:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026b1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026b1c:	fb00 330a 	mla	r3, r0, sl, r3
 8026b20:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8026b24:	f8b9 0000 	ldrh.w	r0, [r9]
 8026b28:	fb08 3c0c 	mla	ip, r8, ip, r3
 8026b2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026b2e:	1202      	asrs	r2, r0, #8
 8026b30:	4359      	muls	r1, r3
 8026b32:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026b36:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026b3a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026b3e:	1c4b      	adds	r3, r1, #1
 8026b40:	ea47 070c 	orr.w	r7, r7, ip
 8026b44:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8026b48:	0c3b      	lsrs	r3, r7, #16
 8026b4a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026b4e:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8026b52:	b2ff      	uxtb	r7, r7
 8026b54:	fb13 f305 	smulbb	r3, r3, r5
 8026b58:	b2c9      	uxtb	r1, r1
 8026b5a:	fb17 f705 	smulbb	r7, r7, r5
 8026b5e:	fb02 3201 	mla	r2, r2, r1, r3
 8026b62:	10c3      	asrs	r3, r0, #3
 8026b64:	fb1c fc05 	smulbb	ip, ip, r5
 8026b68:	00c0      	lsls	r0, r0, #3
 8026b6a:	b292      	uxth	r2, r2
 8026b6c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8026b70:	b2c0      	uxtb	r0, r0
 8026b72:	fb03 c301 	mla	r3, r3, r1, ip
 8026b76:	fb00 7001 	mla	r0, r0, r1, r7
 8026b7a:	1c51      	adds	r1, r2, #1
 8026b7c:	b29b      	uxth	r3, r3
 8026b7e:	b280      	uxth	r0, r0
 8026b80:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026b84:	f100 0c01 	add.w	ip, r0, #1
 8026b88:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8026b8c:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8026b90:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8026b94:	ea42 020c 	orr.w	r2, r2, ip
 8026b98:	f103 0c01 	add.w	ip, r3, #1
 8026b9c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8026ba0:	095b      	lsrs	r3, r3, #5
 8026ba2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026ba6:	431a      	orrs	r2, r3
 8026ba8:	f8a9 2000 	strh.w	r2, [r9]
 8026bac:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8026bae:	f109 0902 	add.w	r9, r9, #2
 8026bb2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026bb6:	441c      	add	r4, r3
 8026bb8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8026bba:	441e      	add	r6, r3
 8026bbc:	e647      	b.n	802684e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8026bbe:	2800      	cmp	r0, #0
 8026bc0:	f43f aedf 	beq.w	8026982 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8026bc4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8026bc8:	9109      	str	r1, [sp, #36]	; 0x24
 8026bca:	0e09      	lsrs	r1, r1, #24
 8026bcc:	9112      	str	r1, [sp, #72]	; 0x48
 8026bce:	e6d8      	b.n	8026982 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8026bd0:	b01d      	add	sp, #116	; 0x74
 8026bd2:	ecbd 8b08 	vpop	{d8-d11}
 8026bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08026bdc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8026bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026be0:	880e      	ldrh	r6, [r1, #0]
 8026be2:	b085      	sub	sp, #20
 8026be4:	4690      	mov	r8, r2
 8026be6:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8026bea:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8026bee:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8026bf2:	f00c 02f8 	and.w	r2, ip, #248	; 0xf8
 8026bf6:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 8026bfa:	00f6      	lsls	r6, r6, #3
 8026bfc:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8026c00:	9200      	str	r2, [sp, #0]
 8026c02:	f00c 02fc 	and.w	r2, ip, #252	; 0xfc
 8026c06:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	; 0x3c
 8026c0a:	9201      	str	r2, [sp, #4]
 8026c0c:	b2f2      	uxtb	r2, r6
 8026c0e:	2c00      	cmp	r4, #0
 8026c10:	fb04 5603 	mla	r6, r4, r3, r5
 8026c14:	9202      	str	r2, [sp, #8]
 8026c16:	eb08 0c86 	add.w	ip, r8, r6, lsl #2
 8026c1a:	db36      	blt.n	8026c8a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8026c1c:	45a6      	cmp	lr, r4
 8026c1e:	dd34      	ble.n	8026c8a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8026c20:	2d00      	cmp	r5, #0
 8026c22:	db30      	blt.n	8026c86 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 8026c24:	42ab      	cmp	r3, r5
 8026c26:	dd2e      	ble.n	8026c86 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xaa>
 8026c28:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
 8026c2c:	1c6e      	adds	r6, r5, #1
 8026c2e:	d42f      	bmi.n	8026c90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 8026c30:	42b3      	cmp	r3, r6
 8026c32:	dd2d      	ble.n	8026c90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb4>
 8026c34:	b370      	cbz	r0, 8026c94 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb8>
 8026c36:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8026c3a:	3401      	adds	r4, #1
 8026c3c:	d42e      	bmi.n	8026c9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 8026c3e:	45a6      	cmp	lr, r4
 8026c40:	dd2c      	ble.n	8026c9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc0>
 8026c42:	b377      	cbz	r7, 8026ca2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc6>
 8026c44:	2d00      	cmp	r5, #0
 8026c46:	db27      	blt.n	8026c98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 8026c48:	42ab      	cmp	r3, r5
 8026c4a:	dd25      	ble.n	8026c98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbc>
 8026c4c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8026c50:	3501      	adds	r5, #1
 8026c52:	d429      	bmi.n	8026ca8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 8026c54:	42ab      	cmp	r3, r5
 8026c56:	dd27      	ble.n	8026ca8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 8026c58:	b340      	cbz	r0, 8026cac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 8026c5a:	3301      	adds	r3, #1
 8026c5c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8026c60:	280f      	cmp	r0, #15
 8026c62:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8026c66:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026c6a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026c6e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8026c72:	d801      	bhi.n	8026c78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9c>
 8026c74:	2f0f      	cmp	r7, #15
 8026c76:	d91b      	bls.n	8026cb0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
 8026c78:	4b7e      	ldr	r3, [pc, #504]	; (8026e74 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x298>)
 8026c7a:	f240 210d 	movw	r1, #525	; 0x20d
 8026c7e:	4a7e      	ldr	r2, [pc, #504]	; (8026e78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 8026c80:	487e      	ldr	r0, [pc, #504]	; (8026e7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8026c82:	f001 fd09 	bl	8028698 <__assert_func>
 8026c86:	2200      	movs	r2, #0
 8026c88:	e7d0      	b.n	8026c2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x50>
 8026c8a:	2600      	movs	r6, #0
 8026c8c:	4632      	mov	r2, r6
 8026c8e:	e7d4      	b.n	8026c3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8026c90:	2600      	movs	r6, #0
 8026c92:	e7d2      	b.n	8026c3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8026c94:	4606      	mov	r6, r0
 8026c96:	e7d0      	b.n	8026c3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 8026c98:	2400      	movs	r4, #0
 8026c9a:	e7d9      	b.n	8026c50 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x74>
 8026c9c:	2300      	movs	r3, #0
 8026c9e:	461c      	mov	r4, r3
 8026ca0:	e7de      	b.n	8026c60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8026ca2:	463b      	mov	r3, r7
 8026ca4:	463c      	mov	r4, r7
 8026ca6:	e7db      	b.n	8026c60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8026ca8:	2300      	movs	r3, #0
 8026caa:	e7d9      	b.n	8026c60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8026cac:	4603      	mov	r3, r0
 8026cae:	e7d7      	b.n	8026c60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x84>
 8026cb0:	b280      	uxth	r0, r0
 8026cb2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8026cb6:	b2bf      	uxth	r7, r7
 8026cb8:	fb00 fe07 	mul.w	lr, r0, r7
 8026cbc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8026cc0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8026cc4:	eba0 0c0e 	sub.w	ip, r0, lr
 8026cc8:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8026ccc:	b2bf      	uxth	r7, r7
 8026cce:	fa1f fc8c 	uxth.w	ip, ip
 8026cd2:	eba5 0507 	sub.w	r5, r5, r7
 8026cd6:	fb0c f00a 	mul.w	r0, ip, sl
 8026cda:	b2ad      	uxth	r5, r5
 8026cdc:	fb05 000b 	mla	r0, r5, fp, r0
 8026ce0:	fb07 0009 	mla	r0, r7, r9, r0
 8026ce4:	fb0e 0008 	mla	r0, lr, r8, r0
 8026ce8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026cec:	9003      	str	r0, [sp, #12]
 8026cee:	d018      	beq.n	8026d22 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x146>
 8026cf0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8026cf4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026cf8:	fb0b f000 	mul.w	r0, fp, r0
 8026cfc:	fb0b fb02 	mul.w	fp, fp, r2
 8026d00:	0a02      	lsrs	r2, r0, #8
 8026d02:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8026d06:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026d0a:	4402      	add	r2, r0
 8026d0c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8026d10:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8026d14:	0a12      	lsrs	r2, r2, #8
 8026d16:	0a00      	lsrs	r0, r0, #8
 8026d18:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026d1c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026d20:	4302      	orrs	r2, r0
 8026d22:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8026d26:	d019      	beq.n	8026d5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x180>
 8026d28:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8026d2c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026d30:	fb0a fb0b 	mul.w	fp, sl, fp
 8026d34:	fb0a fa06 	mul.w	sl, sl, r6
 8026d38:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8026d3c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026d40:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8026d44:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026d48:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026d4c:	445e      	add	r6, fp
 8026d4e:	0a00      	lsrs	r0, r0, #8
 8026d50:	0a36      	lsrs	r6, r6, #8
 8026d52:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026d56:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026d5a:	4306      	orrs	r6, r0
 8026d5c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026d60:	d019      	beq.n	8026d96 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1ba>
 8026d62:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8026d66:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026d6a:	fb09 fa0a 	mul.w	sl, r9, sl
 8026d6e:	fb09 f904 	mul.w	r9, r9, r4
 8026d72:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8026d76:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026d7a:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8026d7e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026d82:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8026d86:	4454      	add	r4, sl
 8026d88:	0a00      	lsrs	r0, r0, #8
 8026d8a:	0a24      	lsrs	r4, r4, #8
 8026d8c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026d90:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026d94:	4304      	orrs	r4, r0
 8026d96:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026d9a:	d019      	beq.n	8026dd0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f4>
 8026d9c:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8026da0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026da4:	fb08 f909 	mul.w	r9, r8, r9
 8026da8:	fb08 f803 	mul.w	r8, r8, r3
 8026dac:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8026db0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8026db4:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8026db8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026dbc:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026dc0:	444b      	add	r3, r9
 8026dc2:	0a00      	lsrs	r0, r0, #8
 8026dc4:	0a1b      	lsrs	r3, r3, #8
 8026dc6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026dca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026dce:	4303      	orrs	r3, r0
 8026dd0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8026dd4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8026dd8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026ddc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026de0:	fb0c f808 	mul.w	r8, ip, r8
 8026de4:	fb0c f606 	mul.w	r6, ip, r6
 8026de8:	fb05 8800 	mla	r8, r5, r0, r8
 8026dec:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8026df0:	fb05 6202 	mla	r2, r5, r2, r6
 8026df4:	9d01      	ldr	r5, [sp, #4]
 8026df6:	fb07 8800 	mla	r8, r7, r0, r8
 8026dfa:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8026dfe:	fb0e 8000 	mla	r0, lr, r0, r8
 8026e02:	0a00      	lsrs	r0, r0, #8
 8026e04:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8026e08:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8026e0c:	9c02      	ldr	r4, [sp, #8]
 8026e0e:	fb07 2700 	mla	r7, r7, r0, r2
 8026e12:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8026e16:	9b03      	ldr	r3, [sp, #12]
 8026e18:	fb0e 7000 	mla	r0, lr, r0, r7
 8026e1c:	43da      	mvns	r2, r3
 8026e1e:	9b00      	ldr	r3, [sp, #0]
 8026e20:	0a00      	lsrs	r0, r0, #8
 8026e22:	b2d2      	uxtb	r2, r2
 8026e24:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026e28:	4353      	muls	r3, r2
 8026e2a:	4354      	muls	r4, r2
 8026e2c:	ea48 0000 	orr.w	r0, r8, r0
 8026e30:	4355      	muls	r5, r2
 8026e32:	4622      	mov	r2, r4
 8026e34:	1c5c      	adds	r4, r3, #1
 8026e36:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 8026e3a:	0c03      	lsrs	r3, r0, #16
 8026e3c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026e40:	4b0f      	ldr	r3, [pc, #60]	; (8026e80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8026e42:	ea03 2304 	and.w	r3, r3, r4, lsl #8
 8026e46:	1c54      	adds	r4, r2, #1
 8026e48:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8026e4c:	b2c2      	uxtb	r2, r0
 8026e4e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026e52:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8026e56:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8026e5a:	1c6a      	adds	r2, r5, #1
 8026e5c:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8026e60:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8026e64:	00c0      	lsls	r0, r0, #3
 8026e66:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026e6a:	4318      	orrs	r0, r3
 8026e6c:	8008      	strh	r0, [r1, #0]
 8026e6e:	b005      	add	sp, #20
 8026e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e74:	0802ceb2 	.word	0x0802ceb2
 8026e78:	0802d475 	.word	0x0802d475
 8026e7c:	0802cf9b 	.word	0x0802cf9b
 8026e80:	fffff800 	.word	0xfffff800

08026e84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e88:	ed2d 8b08 	vpush	{d8-d11}
 8026e8c:	b09b      	sub	sp, #108	; 0x6c
 8026e8e:	eeb0 aa40 	vmov.f32	s20, s0
 8026e92:	eef0 9a60 	vmov.f32	s19, s1
 8026e96:	9218      	str	r2, [sp, #96]	; 0x60
 8026e98:	eeb0 9a41 	vmov.f32	s18, s2
 8026e9c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8026e9e:	eeb0 8a62 	vmov.f32	s16, s5
 8026ea2:	9019      	str	r0, [sp, #100]	; 0x64
 8026ea4:	eef0 8a43 	vmov.f32	s17, s6
 8026ea8:	6850      	ldr	r0, [r2, #4]
 8026eaa:	eef0 ba44 	vmov.f32	s23, s8
 8026eae:	9116      	str	r1, [sp, #88]	; 0x58
 8026eb0:	eeb0 ba64 	vmov.f32	s22, s9
 8026eb4:	9307      	str	r3, [sp, #28]
 8026eb6:	eef0 aa45 	vmov.f32	s21, s10
 8026eba:	6812      	ldr	r2, [r2, #0]
 8026ebc:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8026ec0:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 8026ec4:	fb00 1303 	mla	r3, r0, r3, r1
 8026ec8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026ecc:	930a      	str	r3, [sp, #40]	; 0x28
 8026ece:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026ed0:	681b      	ldr	r3, [r3, #0]
 8026ed2:	930f      	str	r3, [sp, #60]	; 0x3c
 8026ed4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026ed6:	2b00      	cmp	r3, #0
 8026ed8:	dc03      	bgt.n	8026ee2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8026eda:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026edc:	2b00      	cmp	r3, #0
 8026ede:	f340 838b 	ble.w	80275f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 8026ee2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026ee4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026ee8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026eec:	1e48      	subs	r0, r1, #1
 8026eee:	1e57      	subs	r7, r2, #1
 8026ef0:	9b07      	ldr	r3, [sp, #28]
 8026ef2:	2b00      	cmp	r3, #0
 8026ef4:	f340 818b 	ble.w	802720e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8026ef8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026efc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026f00:	d406      	bmi.n	8026f10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026f02:	4584      	cmp	ip, r0
 8026f04:	da04      	bge.n	8026f10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026f06:	2b00      	cmp	r3, #0
 8026f08:	db02      	blt.n	8026f10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026f0a:	42bb      	cmp	r3, r7
 8026f0c:	f2c0 8180 	blt.w	8027210 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8026f10:	f11c 0c01 	adds.w	ip, ip, #1
 8026f14:	f100 8170 	bmi.w	80271f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8026f18:	4561      	cmp	r1, ip
 8026f1a:	f2c0 816d 	blt.w	80271f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8026f1e:	3301      	adds	r3, #1
 8026f20:	f100 816a 	bmi.w	80271f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8026f24:	429a      	cmp	r2, r3
 8026f26:	f2c0 8167 	blt.w	80271f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8026f2a:	9b07      	ldr	r3, [sp, #28]
 8026f2c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026f2e:	9317      	str	r3, [sp, #92]	; 0x5c
 8026f30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026f32:	2b00      	cmp	r3, #0
 8026f34:	f340 8189 	ble.w	802724a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8026f38:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8026f3a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8026f3e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026f40:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8026f44:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8026f48:	1422      	asrs	r2, r4, #16
 8026f4a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026f4e:	689b      	ldr	r3, [r3, #8]
 8026f50:	f100 81d8 	bmi.w	8027304 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8026f54:	f103 38ff 	add.w	r8, r3, #4294967295
 8026f58:	4542      	cmp	r2, r8
 8026f5a:	f280 81d3 	bge.w	8027304 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8026f5e:	f1bc 0f00 	cmp.w	ip, #0
 8026f62:	f2c0 81cf 	blt.w	8027304 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8026f66:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026f6a:	45c4      	cmp	ip, r8
 8026f6c:	f280 81ca 	bge.w	8027304 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8026f70:	b21b      	sxth	r3, r3
 8026f72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026f74:	fb0c 2203 	mla	r2, ip, r3, r2
 8026f78:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8026f7c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8026f80:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8026f84:	2900      	cmp	r1, #0
 8026f86:	f000 81a6 	beq.w	80272d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026f8a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8026f8e:	950b      	str	r5, [sp, #44]	; 0x2c
 8026f90:	0e2d      	lsrs	r5, r5, #24
 8026f92:	9512      	str	r5, [sp, #72]	; 0x48
 8026f94:	b180      	cbz	r0, 8026fb8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8026f96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8026f9a:	3b01      	subs	r3, #1
 8026f9c:	009b      	lsls	r3, r3, #2
 8026f9e:	3304      	adds	r3, #4
 8026fa0:	eb08 0c03 	add.w	ip, r8, r3
 8026fa4:	f858 3003 	ldr.w	r3, [r8, r3]
 8026fa8:	9308      	str	r3, [sp, #32]
 8026faa:	0e1b      	lsrs	r3, r3, #24
 8026fac:	9310      	str	r3, [sp, #64]	; 0x40
 8026fae:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8026fb2:	930c      	str	r3, [sp, #48]	; 0x30
 8026fb4:	0e1b      	lsrs	r3, r3, #24
 8026fb6:	9313      	str	r3, [sp, #76]	; 0x4c
 8026fb8:	b289      	uxth	r1, r1
 8026fba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8026fbc:	b280      	uxth	r0, r0
 8026fbe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026fc0:	fb01 f900 	mul.w	r9, r1, r0
 8026fc4:	0109      	lsls	r1, r1, #4
 8026fc6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026fca:	eba1 0809 	sub.w	r8, r1, r9
 8026fce:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8026fd2:	b280      	uxth	r0, r0
 8026fd4:	fa1f f888 	uxth.w	r8, r8
 8026fd8:	1a09      	subs	r1, r1, r0
 8026fda:	fb08 f303 	mul.w	r3, r8, r3
 8026fde:	b289      	uxth	r1, r1
 8026fe0:	fb01 330e 	mla	r3, r1, lr, r3
 8026fe4:	fb00 3305 	mla	r3, r0, r5, r3
 8026fe8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026fea:	fb09 3305 	mla	r3, r9, r5, r3
 8026fee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026ff2:	2b00      	cmp	r3, #0
 8026ff4:	f000 80f7 	beq.w	80271e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026ff8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026ffc:	d01b      	beq.n	8027036 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8026ffe:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8027002:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027006:	fb0e fa0a 	mul.w	sl, lr, sl
 802700a:	fb0e fe02 	mul.w	lr, lr, r2
 802700e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8027012:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027016:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802701a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802701e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027022:	4452      	add	r2, sl
 8027024:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027028:	0a12      	lsrs	r2, r2, #8
 802702a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802702e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027032:	ea42 020c 	orr.w	r2, r2, ip
 8027036:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027038:	2dff      	cmp	r5, #255	; 0xff
 802703a:	d021      	beq.n	8027080 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802703c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802703e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027042:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027044:	fb05 fb0b 	mul.w	fp, r5, fp
 8027048:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802704a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802704e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027050:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027054:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027058:	fb05 fa0a 	mul.w	sl, r5, sl
 802705c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027060:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027064:	44de      	add	lr, fp
 8027066:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802706a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802706e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027072:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027076:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802707a:	ea4e 050a 	orr.w	r5, lr, sl
 802707e:	950b      	str	r5, [sp, #44]	; 0x2c
 8027080:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027082:	2dff      	cmp	r5, #255	; 0xff
 8027084:	d021      	beq.n	80270ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8027086:	9d08      	ldr	r5, [sp, #32]
 8027088:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802708c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802708e:	fb05 fb0b 	mul.w	fp, r5, fp
 8027092:	9d08      	ldr	r5, [sp, #32]
 8027094:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027098:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802709a:	fb05 fa0e 	mul.w	sl, r5, lr
 802709e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80270a2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80270a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80270aa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80270ae:	44de      	add	lr, fp
 80270b0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80270b4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80270b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80270bc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80270c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80270c4:	ea4e 050a 	orr.w	r5, lr, sl
 80270c8:	9508      	str	r5, [sp, #32]
 80270ca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80270cc:	2dff      	cmp	r5, #255	; 0xff
 80270ce:	d021      	beq.n	8027114 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 80270d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80270d2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80270d6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80270d8:	fb05 fb0b 	mul.w	fp, r5, fp
 80270dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80270de:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80270e2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80270e4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80270e8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80270ec:	fb05 fa0a 	mul.w	sl, r5, sl
 80270f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80270f4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80270f8:	44de      	add	lr, fp
 80270fa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80270fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027102:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027106:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802710a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802710e:	ea4e 050a 	orr.w	r5, lr, sl
 8027112:	950c      	str	r5, [sp, #48]	; 0x30
 8027114:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027116:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802711a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802711e:	2bff      	cmp	r3, #255	; 0xff
 8027120:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027124:	9d08      	ldr	r5, [sp, #32]
 8027126:	fb08 fc0c 	mul.w	ip, r8, ip
 802712a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802712e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027132:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027134:	fb00 cc0e 	mla	ip, r0, lr, ip
 8027138:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802713c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802713e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027142:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027146:	fb08 f80e 	mul.w	r8, r8, lr
 802714a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802714e:	fb01 8202 	mla	r2, r1, r2, r8
 8027152:	9908      	ldr	r1, [sp, #32]
 8027154:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027158:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802715c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802715e:	fb00 220a 	mla	r2, r0, sl, r2
 8027162:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8027166:	fb09 2900 	mla	r9, r9, r0, r2
 802716a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802716e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027172:	ea4c 0c09 	orr.w	ip, ip, r9
 8027176:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802717a:	f000 80b5 	beq.w	80272e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 802717e:	8839      	ldrh	r1, [r7, #0]
 8027180:	43db      	mvns	r3, r3
 8027182:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8027186:	fa5f f883 	uxtb.w	r8, r3
 802718a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802718e:	10c8      	asrs	r0, r1, #3
 8027190:	00cb      	lsls	r3, r1, #3
 8027192:	fb0e fe08 	mul.w	lr, lr, r8
 8027196:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802719a:	b2db      	uxtb	r3, r3
 802719c:	f10e 0101 	add.w	r1, lr, #1
 80271a0:	fb00 f008 	mul.w	r0, r0, r8
 80271a4:	fb03 f308 	mul.w	r3, r3, r8
 80271a8:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80271ac:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80271b0:	fa5f fc8c 	uxtb.w	ip, ip
 80271b4:	eb0e 2e11 	add.w	lr, lr, r1, lsr #8
 80271b8:	4960      	ldr	r1, [pc, #384]	; (802733c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>)
 80271ba:	ea01 2e0e 	and.w	lr, r1, lr, lsl #8
 80271be:	1c59      	adds	r1, r3, #1
 80271c0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80271c4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80271c8:	1c43      	adds	r3, r0, #1
 80271ca:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80271ce:	b2d3      	uxtb	r3, r2
 80271d0:	ea4e 0cdc 	orr.w	ip, lr, ip, lsr #3
 80271d4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80271d8:	00db      	lsls	r3, r3, #3
 80271da:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80271de:	ea4c 0c03 	orr.w	ip, ip, r3
 80271e2:	f8a7 c000 	strh.w	ip, [r7]
 80271e6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80271e8:	3702      	adds	r7, #2
 80271ea:	441c      	add	r4, r3
 80271ec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80271ee:	441e      	add	r6, r3
 80271f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80271f2:	3b01      	subs	r3, #1
 80271f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80271f6:	e69b      	b.n	8026f30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80271f8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80271fa:	441c      	add	r4, r3
 80271fc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80271fe:	441e      	add	r6, r3
 8027200:	9b07      	ldr	r3, [sp, #28]
 8027202:	3b01      	subs	r3, #1
 8027204:	9307      	str	r3, [sp, #28]
 8027206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027208:	3302      	adds	r3, #2
 802720a:	930a      	str	r3, [sp, #40]	; 0x28
 802720c:	e670      	b.n	8026ef0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802720e:	d023      	beq.n	8027258 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8027210:	9b07      	ldr	r3, [sp, #28]
 8027212:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8027214:	3b01      	subs	r3, #1
 8027216:	fb00 4003 	mla	r0, r0, r3, r4
 802721a:	1400      	asrs	r0, r0, #16
 802721c:	f53f ae85 	bmi.w	8026f2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8027220:	3901      	subs	r1, #1
 8027222:	4288      	cmp	r0, r1
 8027224:	f6bf ae81 	bge.w	8026f2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8027228:	9930      	ldr	r1, [sp, #192]	; 0xc0
 802722a:	fb01 6303 	mla	r3, r1, r3, r6
 802722e:	141b      	asrs	r3, r3, #16
 8027230:	f53f ae7b 	bmi.w	8026f2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8027234:	3a01      	subs	r2, #1
 8027236:	4293      	cmp	r3, r2
 8027238:	f6bf ae77 	bge.w	8026f2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802723c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027240:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8027244:	f1bb 0f00 	cmp.w	fp, #0
 8027248:	dc7a      	bgt.n	8027340 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 802724a:	9b07      	ldr	r3, [sp, #28]
 802724c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027252:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027256:	930a      	str	r3, [sp, #40]	; 0x28
 8027258:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802725a:	2b00      	cmp	r3, #0
 802725c:	f340 81cc 	ble.w	80275f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>
 8027260:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027264:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027266:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802726a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802726e:	eef0 6a48 	vmov.f32	s13, s16
 8027272:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027276:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802727a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802727e:	ee16 4a90 	vmov	r4, s13
 8027282:	eef0 6a68 	vmov.f32	s13, s17
 8027286:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802728a:	ee16 6a90 	vmov	r6, s13
 802728e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027292:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027296:	ee37 8a48 	vsub.f32	s16, s14, s16
 802729a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802729e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80272a2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80272a6:	ee18 2a10 	vmov	r2, s16
 80272aa:	eeb0 8a47 	vmov.f32	s16, s14
 80272ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80272b2:	ee18 2a90 	vmov	r2, s17
 80272b6:	932f      	str	r3, [sp, #188]	; 0xbc
 80272b8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80272ba:	eef0 8a67 	vmov.f32	s17, s15
 80272be:	fb92 f3f3 	sdiv	r3, r2, r3
 80272c2:	9330      	str	r3, [sp, #192]	; 0xc0
 80272c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80272c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80272c8:	3b01      	subs	r3, #1
 80272ca:	9316      	str	r3, [sp, #88]	; 0x58
 80272cc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80272ce:	bf08      	it	eq
 80272d0:	4613      	moveq	r3, r2
 80272d2:	9307      	str	r3, [sp, #28]
 80272d4:	e5fe      	b.n	8026ed4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80272d6:	2800      	cmp	r0, #0
 80272d8:	f43f ae6e 	beq.w	8026fb8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80272dc:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80272e0:	9308      	str	r3, [sp, #32]
 80272e2:	0e1b      	lsrs	r3, r3, #24
 80272e4:	9310      	str	r3, [sp, #64]	; 0x40
 80272e6:	e667      	b.n	8026fb8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80272e8:	ea4f 135c 	mov.w	r3, ip, lsr #5
 80272ec:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80272f0:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80272f4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80272f8:	f022 0207 	bic.w	r2, r2, #7
 80272fc:	431a      	orrs	r2, r3
 80272fe:	ea42 0c0c 	orr.w	ip, r2, ip
 8027302:	e76e      	b.n	80271e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8027304:	f112 0801 	adds.w	r8, r2, #1
 8027308:	f53f af6d 	bmi.w	80271e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802730c:	4543      	cmp	r3, r8
 802730e:	f6ff af6a 	blt.w	80271e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027312:	f11c 0801 	adds.w	r8, ip, #1
 8027316:	f53f af66 	bmi.w	80271e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802731a:	45c6      	cmp	lr, r8
 802731c:	f6ff af63 	blt.w	80271e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027320:	b21b      	sxth	r3, r3
 8027322:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8027326:	fa0f f28e 	sxth.w	r2, lr
 802732a:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802732e:	9200      	str	r2, [sp, #0]
 8027330:	4639      	mov	r1, r7
 8027332:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027334:	9819      	ldr	r0, [sp, #100]	; 0x64
 8027336:	f7ff fc51 	bl	8026bdc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 802733a:	e754      	b.n	80271e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802733c:	fffff800 	.word	0xfffff800
 8027340:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8027342:	1421      	asrs	r1, r4, #16
 8027344:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027346:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802734a:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802734e:	1433      	asrs	r3, r6, #16
 8027350:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027354:	fb07 1303 	mla	r3, r7, r3, r1
 8027358:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802735a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802735e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027362:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027366:	2a00      	cmp	r2, #0
 8027368:	f000 812f 	beq.w	80275ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 802736c:	684d      	ldr	r5, [r1, #4]
 802736e:	950d      	str	r5, [sp, #52]	; 0x34
 8027370:	0e2d      	lsrs	r5, r5, #24
 8027372:	9514      	str	r5, [sp, #80]	; 0x50
 8027374:	b178      	cbz	r0, 8027396 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8027376:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 802737a:	3f01      	subs	r7, #1
 802737c:	00bf      	lsls	r7, r7, #2
 802737e:	3704      	adds	r7, #4
 8027380:	eb01 0e07 	add.w	lr, r1, r7
 8027384:	59c9      	ldr	r1, [r1, r7]
 8027386:	9109      	str	r1, [sp, #36]	; 0x24
 8027388:	0e09      	lsrs	r1, r1, #24
 802738a:	9111      	str	r1, [sp, #68]	; 0x44
 802738c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8027390:	910e      	str	r1, [sp, #56]	; 0x38
 8027392:	0e09      	lsrs	r1, r1, #24
 8027394:	9115      	str	r1, [sp, #84]	; 0x54
 8027396:	b292      	uxth	r2, r2
 8027398:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802739a:	b280      	uxth	r0, r0
 802739c:	fb02 f900 	mul.w	r9, r2, r0
 80273a0:	0112      	lsls	r2, r2, #4
 80273a2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80273a6:	eba2 0e09 	sub.w	lr, r2, r9
 80273aa:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80273ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80273b0:	b280      	uxth	r0, r0
 80273b2:	fa1f fe8e 	uxth.w	lr, lr
 80273b6:	1a09      	subs	r1, r1, r0
 80273b8:	fb0e f202 	mul.w	r2, lr, r2
 80273bc:	b289      	uxth	r1, r1
 80273be:	fb01 220c 	mla	r2, r1, ip, r2
 80273c2:	fb00 2205 	mla	r2, r0, r5, r2
 80273c6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80273c8:	fb09 2205 	mla	r2, r9, r5, r2
 80273cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80273d0:	2a00      	cmp	r2, #0
 80273d2:	f000 80f1 	beq.w	80275b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 80273d6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80273da:	d019      	beq.n	8027410 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 80273dc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80273e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80273e4:	fb0c fa0a 	mul.w	sl, ip, sl
 80273e8:	fb0c fc03 	mul.w	ip, ip, r3
 80273ec:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80273f0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80273f4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80273f8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80273fc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027400:	4453      	add	r3, sl
 8027402:	0a3f      	lsrs	r7, r7, #8
 8027404:	0a1b      	lsrs	r3, r3, #8
 8027406:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802740a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802740e:	433b      	orrs	r3, r7
 8027410:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027412:	2dff      	cmp	r5, #255	; 0xff
 8027414:	d020      	beq.n	8027458 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d4>
 8027416:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027418:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802741c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802741e:	436f      	muls	r7, r5
 8027420:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027422:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027426:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802742a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802742c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027430:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027434:	fb05 fa0a 	mul.w	sl, r5, sl
 8027438:	44bc      	add	ip, r7
 802743a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802743e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027442:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027446:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802744a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802744e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027452:	ea4c 050a 	orr.w	r5, ip, sl
 8027456:	950d      	str	r5, [sp, #52]	; 0x34
 8027458:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802745a:	2dff      	cmp	r5, #255	; 0xff
 802745c:	d020      	beq.n	80274a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 802745e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027460:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027464:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027466:	436f      	muls	r7, r5
 8027468:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802746a:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802746e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027470:	fb05 fa0c 	mul.w	sl, r5, ip
 8027474:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027478:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802747c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027480:	44bc      	add	ip, r7
 8027482:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027486:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802748a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802748e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027492:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027496:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802749a:	ea4c 050a 	orr.w	r5, ip, sl
 802749e:	9509      	str	r5, [sp, #36]	; 0x24
 80274a0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80274a2:	2dff      	cmp	r5, #255	; 0xff
 80274a4:	d020      	beq.n	80274e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x664>
 80274a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80274a8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80274ac:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80274ae:	436f      	muls	r7, r5
 80274b0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80274b2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80274b6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80274ba:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80274bc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80274c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80274c4:	fb05 fa0a 	mul.w	sl, r5, sl
 80274c8:	44bc      	add	ip, r7
 80274ca:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80274ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80274d2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80274d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80274da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80274de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80274e2:	ea4c 050a 	orr.w	r5, ip, sl
 80274e6:	950e      	str	r5, [sp, #56]	; 0x38
 80274e8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80274ea:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80274ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80274f2:	2aff      	cmp	r2, #255	; 0xff
 80274f4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80274f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80274fa:	fb0e f707 	mul.w	r7, lr, r7
 80274fe:	fb01 770c 	mla	r7, r1, ip, r7
 8027502:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027506:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027508:	fb00 770c 	mla	r7, r0, ip, r7
 802750c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027510:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027512:	fb09 770c 	mla	r7, r9, ip, r7
 8027516:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802751a:	fb0e fe0c 	mul.w	lr, lr, ip
 802751e:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8027522:	fb01 e303 	mla	r3, r1, r3, lr
 8027526:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027528:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802752c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8027530:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027532:	fb00 330a 	mla	r3, r0, sl, r3
 8027536:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802753a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802753e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027542:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027546:	ea47 070c 	orr.w	r7, r7, ip
 802754a:	ea4f 2317 	mov.w	r3, r7, lsr #8
 802754e:	d045      	beq.n	80275dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8027550:	f8b8 1000 	ldrh.w	r1, [r8]
 8027554:	43d2      	mvns	r2, r2
 8027556:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802755a:	fa5f fe82 	uxtb.w	lr, r2
 802755e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8027562:	10c8      	asrs	r0, r1, #3
 8027564:	00ca      	lsls	r2, r1, #3
 8027566:	fb0c fc0e 	mul.w	ip, ip, lr
 802756a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802756e:	b2d2      	uxtb	r2, r2
 8027570:	f10c 0101 	add.w	r1, ip, #1
 8027574:	fb00 f00e 	mul.w	r0, r0, lr
 8027578:	fb02 f20e 	mul.w	r2, r2, lr
 802757c:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 8027580:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8027584:	b2ff      	uxtb	r7, r7
 8027586:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802758a:	491e      	ldr	r1, [pc, #120]	; (8027604 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x780>)
 802758c:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8027590:	1c51      	adds	r1, r2, #1
 8027592:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027596:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802759a:	1c42      	adds	r2, r0, #1
 802759c:	ea4c 0cd7 	orr.w	ip, ip, r7, lsr #3
 80275a0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80275a4:	b2df      	uxtb	r7, r3
 80275a6:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80275aa:	00ff      	lsls	r7, r7, #3
 80275ac:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80275b0:	ea4c 0c07 	orr.w	ip, ip, r7
 80275b4:	f8a8 c000 	strh.w	ip, [r8]
 80275b8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80275ba:	f108 0802 	add.w	r8, r8, #2
 80275be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80275c2:	441c      	add	r4, r3
 80275c4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80275c6:	441e      	add	r6, r3
 80275c8:	e63c      	b.n	8027244 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80275ca:	2800      	cmp	r0, #0
 80275cc:	f43f aee3 	beq.w	8027396 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 80275d0:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80275d4:	9109      	str	r1, [sp, #36]	; 0x24
 80275d6:	0e09      	lsrs	r1, r1, #24
 80275d8:	9111      	str	r1, [sp, #68]	; 0x44
 80275da:	e6dc      	b.n	8027396 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 80275dc:	097a      	lsrs	r2, r7, #5
 80275de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80275e2:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80275e6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80275ea:	f023 0307 	bic.w	r3, r3, #7
 80275ee:	4313      	orrs	r3, r2
 80275f0:	431f      	orrs	r7, r3
 80275f2:	f8a8 7000 	strh.w	r7, [r8]
 80275f6:	e7df      	b.n	80275b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 80275f8:	b01b      	add	sp, #108	; 0x6c
 80275fa:	ecbd 8b08 	vpop	{d8-d11}
 80275fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027602:	bf00      	nop
 8027604:	fffff800 	.word	0xfffff800

08027608 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8027608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802760c:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8027610:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8027614:	2c00      	cmp	r4, #0
 8027616:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802761a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802761e:	fb04 ce03 	mla	lr, r4, r3, ip
 8027622:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8027626:	db60      	blt.n	80276ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8027628:	45a1      	cmp	r9, r4
 802762a:	dd5e      	ble.n	80276ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 802762c:	f1bc 0f00 	cmp.w	ip, #0
 8027630:	db59      	blt.n	80276e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8027632:	45e0      	cmp	r8, ip
 8027634:	dd57      	ble.n	80276e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8027636:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802763a:	f01e 0f01 	tst.w	lr, #1
 802763e:	5c16      	ldrb	r6, [r2, r0]
 8027640:	bf0c      	ite	eq
 8027642:	f006 060f 	andeq.w	r6, r6, #15
 8027646:	1136      	asrne	r6, r6, #4
 8027648:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802764c:	b2f6      	uxtb	r6, r6
 802764e:	f11c 0001 	adds.w	r0, ip, #1
 8027652:	d44d      	bmi.n	80276f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8027654:	4580      	cmp	r8, r0
 8027656:	dd4b      	ble.n	80276f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8027658:	2d00      	cmp	r5, #0
 802765a:	d04b      	beq.n	80276f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 802765c:	f10e 0a01 	add.w	sl, lr, #1
 8027660:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8027664:	f01a 0f01 	tst.w	sl, #1
 8027668:	5c10      	ldrb	r0, [r2, r0]
 802766a:	bf0c      	ite	eq
 802766c:	f000 000f 	andeq.w	r0, r0, #15
 8027670:	1100      	asrne	r0, r0, #4
 8027672:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027676:	b2c0      	uxtb	r0, r0
 8027678:	3401      	adds	r4, #1
 802767a:	d43f      	bmi.n	80276fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 802767c:	45a1      	cmp	r9, r4
 802767e:	dd3d      	ble.n	80276fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8027680:	2f00      	cmp	r7, #0
 8027682:	f000 809e 	beq.w	80277c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
 8027686:	f1bc 0f00 	cmp.w	ip, #0
 802768a:	db35      	blt.n	80276f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 802768c:	45e0      	cmp	r8, ip
 802768e:	dd33      	ble.n	80276f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8027690:	eb03 090e 	add.w	r9, r3, lr
 8027694:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8027698:	f019 0f01 	tst.w	r9, #1
 802769c:	5d14      	ldrb	r4, [r2, r4]
 802769e:	bf0c      	ite	eq
 80276a0:	f004 040f 	andeq.w	r4, r4, #15
 80276a4:	1124      	asrne	r4, r4, #4
 80276a6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80276aa:	b2e4      	uxtb	r4, r4
 80276ac:	f11c 0c01 	adds.w	ip, ip, #1
 80276b0:	d427      	bmi.n	8027702 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 80276b2:	45e0      	cmp	r8, ip
 80276b4:	dd25      	ble.n	8027702 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 80276b6:	b335      	cbz	r5, 8027706 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 80276b8:	3301      	adds	r3, #1
 80276ba:	449e      	add	lr, r3
 80276bc:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80276c0:	f01e 0f01 	tst.w	lr, #1
 80276c4:	5cd2      	ldrb	r2, [r2, r3]
 80276c6:	bf0c      	ite	eq
 80276c8:	f002 020f 	andeq.w	r2, r2, #15
 80276cc:	1112      	asrne	r2, r2, #4
 80276ce:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80276d2:	b2d3      	uxtb	r3, r2
 80276d4:	2d0f      	cmp	r5, #15
 80276d6:	d917      	bls.n	8027708 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 80276d8:	4b3c      	ldr	r3, [pc, #240]	; (80277cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c4>)
 80276da:	f240 210d 	movw	r1, #525	; 0x20d
 80276de:	4a3c      	ldr	r2, [pc, #240]	; (80277d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 80276e0:	483c      	ldr	r0, [pc, #240]	; (80277d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 80276e2:	f000 ffd9 	bl	8028698 <__assert_func>
 80276e6:	2600      	movs	r6, #0
 80276e8:	e7b1      	b.n	802764e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 80276ea:	2000      	movs	r0, #0
 80276ec:	4606      	mov	r6, r0
 80276ee:	e7c3      	b.n	8027678 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80276f0:	2000      	movs	r0, #0
 80276f2:	e7c1      	b.n	8027678 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80276f4:	4628      	mov	r0, r5
 80276f6:	e7bf      	b.n	8027678 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80276f8:	2400      	movs	r4, #0
 80276fa:	e7d7      	b.n	80276ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 80276fc:	2300      	movs	r3, #0
 80276fe:	461c      	mov	r4, r3
 8027700:	e7e8      	b.n	80276d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8027702:	2300      	movs	r3, #0
 8027704:	e7e6      	b.n	80276d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8027706:	462b      	mov	r3, r5
 8027708:	2f0f      	cmp	r7, #15
 802770a:	d8e5      	bhi.n	80276d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802770c:	b2ad      	uxth	r5, r5
 802770e:	b2bf      	uxth	r7, r7
 8027710:	fb05 fc07 	mul.w	ip, r5, r7
 8027714:	012d      	lsls	r5, r5, #4
 8027716:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802771a:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802771e:	eba5 050c 	sub.w	r5, r5, ip
 8027722:	b2bf      	uxth	r7, r7
 8027724:	b2ad      	uxth	r5, r5
 8027726:	1bd2      	subs	r2, r2, r7
 8027728:	4368      	muls	r0, r5
 802772a:	b292      	uxth	r2, r2
 802772c:	fb06 0002 	mla	r0, r6, r2, r0
 8027730:	fb07 0404 	mla	r4, r7, r4, r0
 8027734:	fb0c 4303 	mla	r3, ip, r3, r4
 8027738:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802773c:	2b00      	cmp	r3, #0
 802773e:	d03e      	beq.n	80277be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1b6>
 8027740:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8027744:	4a24      	ldr	r2, [pc, #144]	; (80277d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
 8027746:	4343      	muls	r3, r0
 8027748:	6816      	ldr	r6, [r2, #0]
 802774a:	1c58      	adds	r0, r3, #1
 802774c:	880a      	ldrh	r2, [r1, #0]
 802774e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8027752:	1215      	asrs	r5, r2, #8
 8027754:	1200      	asrs	r0, r0, #8
 8027756:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802775a:	10d7      	asrs	r7, r2, #3
 802775c:	b284      	uxth	r4, r0
 802775e:	43c0      	mvns	r0, r0
 8027760:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8027764:	00d2      	lsls	r2, r2, #3
 8027766:	b2c3      	uxtb	r3, r0
 8027768:	0a30      	lsrs	r0, r6, #8
 802776a:	fb15 f503 	smulbb	r5, r5, r3
 802776e:	b2d2      	uxtb	r2, r2
 8027770:	fb17 f703 	smulbb	r7, r7, r3
 8027774:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027778:	fb12 f303 	smulbb	r3, r2, r3
 802777c:	fb00 5004 	mla	r0, r0, r4, r5
 8027780:	08f5      	lsrs	r5, r6, #3
 8027782:	00f6      	lsls	r6, r6, #3
 8027784:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027788:	b280      	uxth	r0, r0
 802778a:	b2f6      	uxtb	r6, r6
 802778c:	fb05 7504 	mla	r5, r5, r4, r7
 8027790:	fb06 3304 	mla	r3, r6, r4, r3
 8027794:	1c44      	adds	r4, r0, #1
 8027796:	b2ad      	uxth	r5, r5
 8027798:	b29a      	uxth	r2, r3
 802779a:	1c6b      	adds	r3, r5, #1
 802779c:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80277a0:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 80277a4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80277a8:	095b      	lsrs	r3, r3, #5
 80277aa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80277ae:	4303      	orrs	r3, r0
 80277b0:	1c50      	adds	r0, r2, #1
 80277b2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80277b6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80277ba:	4313      	orrs	r3, r2
 80277bc:	800b      	strh	r3, [r1, #0]
 80277be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80277c2:	2d0f      	cmp	r5, #15
 80277c4:	d888      	bhi.n	80276d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 80277c6:	463b      	mov	r3, r7
 80277c8:	463c      	mov	r4, r7
 80277ca:	e79f      	b.n	802770c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 80277cc:	0802ceb2 	.word	0x0802ceb2
 80277d0:	0802d475 	.word	0x0802d475
 80277d4:	0802cf9b 	.word	0x0802cf9b
 80277d8:	200057e8 	.word	0x200057e8

080277dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80277dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80277e0:	ed2d 8b08 	vpush	{d8-d11}
 80277e4:	b097      	sub	sp, #92	; 0x5c
 80277e6:	eeb0 aa40 	vmov.f32	s20, s0
 80277ea:	eef0 9a60 	vmov.f32	s19, s1
 80277ee:	9214      	str	r2, [sp, #80]	; 0x50
 80277f0:	eeb0 9a41 	vmov.f32	s18, s2
 80277f4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80277f6:	eeb0 8a62 	vmov.f32	s16, s5
 80277fa:	9309      	str	r3, [sp, #36]	; 0x24
 80277fc:	eef0 8a43 	vmov.f32	s17, s6
 8027800:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8027804:	eef0 ba44 	vmov.f32	s23, s8
 8027808:	9015      	str	r0, [sp, #84]	; 0x54
 802780a:	eeb0 ba64 	vmov.f32	s22, s9
 802780e:	6850      	ldr	r0, [r2, #4]
 8027810:	eef0 aa45 	vmov.f32	s21, s10
 8027814:	910d      	str	r1, [sp, #52]	; 0x34
 8027816:	930e      	str	r3, [sp, #56]	; 0x38
 8027818:	6812      	ldr	r2, [r2, #0]
 802781a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802781e:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 8027822:	fb00 1303 	mla	r3, r0, r3, r1
 8027826:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
 802782a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802782c:	689b      	ldr	r3, [r3, #8]
 802782e:	3301      	adds	r3, #1
 8027830:	f023 0301 	bic.w	r3, r3, #1
 8027834:	930a      	str	r3, [sp, #40]	; 0x28
 8027836:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027838:	681f      	ldr	r7, [r3, #0]
 802783a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802783c:	2b00      	cmp	r3, #0
 802783e:	dc03      	bgt.n	8027848 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027840:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027842:	2b00      	cmp	r3, #0
 8027844:	f340 826b 	ble.w	8027d1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x542>
 8027848:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802784a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802784e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027852:	1e48      	subs	r0, r1, #1
 8027854:	f102 3cff 	add.w	ip, r2, #4294967295
 8027858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802785a:	2b00      	cmp	r3, #0
 802785c:	f340 80f4 	ble.w	8027a48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8027860:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027864:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027868:	d406      	bmi.n	8027878 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802786a:	4586      	cmp	lr, r0
 802786c:	da04      	bge.n	8027878 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802786e:	2b00      	cmp	r3, #0
 8027870:	db02      	blt.n	8027878 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8027872:	4563      	cmp	r3, ip
 8027874:	f2c0 80e9 	blt.w	8027a4a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8027878:	f11e 0e01 	adds.w	lr, lr, #1
 802787c:	f100 80da 	bmi.w	8027a34 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8027880:	4571      	cmp	r1, lr
 8027882:	f2c0 80d7 	blt.w	8027a34 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8027886:	3301      	adds	r3, #1
 8027888:	f100 80d4 	bmi.w	8027a34 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 802788c:	429a      	cmp	r2, r3
 802788e:	f2c0 80d1 	blt.w	8027a34 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8027892:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8027896:	46d0      	mov	r8, sl
 8027898:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 802789c:	930f      	str	r3, [sp, #60]	; 0x3c
 802789e:	f1b9 0f00 	cmp.w	r9, #0
 80278a2:	f340 80f1 	ble.w	8027a88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 80278a6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80278a8:	1430      	asrs	r0, r6, #16
 80278aa:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80278ae:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80278b2:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80278b6:	1423      	asrs	r3, r4, #16
 80278b8:	f100 813b 	bmi.w	8027b32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80278bc:	f10c 3bff 	add.w	fp, ip, #4294967295
 80278c0:	455b      	cmp	r3, fp
 80278c2:	f280 8136 	bge.w	8027b32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80278c6:	2800      	cmp	r0, #0
 80278c8:	f2c0 8133 	blt.w	8027b32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80278cc:	f10e 3bff 	add.w	fp, lr, #4294967295
 80278d0:	4558      	cmp	r0, fp
 80278d2:	f280 812e 	bge.w	8027b32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80278d6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80278d8:	fb00 3305 	mla	r3, r0, r5, r3
 80278dc:	0858      	lsrs	r0, r3, #1
 80278de:	07dd      	lsls	r5, r3, #31
 80278e0:	f817 c000 	ldrb.w	ip, [r7, r0]
 80278e4:	bf54      	ite	pl
 80278e6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80278ea:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80278ee:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80278f2:	fa5f fc8c 	uxtb.w	ip, ip
 80278f6:	2a00      	cmp	r2, #0
 80278f8:	f000 810a 	beq.w	8027b10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 80278fc:	1c58      	adds	r0, r3, #1
 80278fe:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8027902:	07c0      	lsls	r0, r0, #31
 8027904:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8027908:	bf54      	ite	pl
 802790a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802790e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027912:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027916:	fa5f f08e 	uxtb.w	r0, lr
 802791a:	9010      	str	r0, [sp, #64]	; 0x40
 802791c:	b1e1      	cbz	r1, 8027958 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 802791e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027920:	4403      	add	r3, r0
 8027922:	0858      	lsrs	r0, r3, #1
 8027924:	07dd      	lsls	r5, r3, #31
 8027926:	f103 0301 	add.w	r3, r3, #1
 802792a:	5c38      	ldrb	r0, [r7, r0]
 802792c:	bf54      	ite	pl
 802792e:	f000 000f 	andpl.w	r0, r0, #15
 8027932:	1100      	asrmi	r0, r0, #4
 8027934:	07dd      	lsls	r5, r3, #31
 8027936:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802793a:	b2c0      	uxtb	r0, r0
 802793c:	900b      	str	r0, [sp, #44]	; 0x2c
 802793e:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8027942:	f817 e000 	ldrb.w	lr, [r7, r0]
 8027946:	bf54      	ite	pl
 8027948:	f00e 030f 	andpl.w	r3, lr, #15
 802794c:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8027950:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027954:	b2db      	uxtb	r3, r3
 8027956:	9311      	str	r3, [sp, #68]	; 0x44
 8027958:	b292      	uxth	r2, r2
 802795a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802795c:	b289      	uxth	r1, r1
 802795e:	fb02 f301 	mul.w	r3, r2, r1
 8027962:	0112      	lsls	r2, r2, #4
 8027964:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8027968:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802796c:	1ad2      	subs	r2, r2, r3
 802796e:	b289      	uxth	r1, r1
 8027970:	b292      	uxth	r2, r2
 8027972:	1a40      	subs	r0, r0, r1
 8027974:	436a      	muls	r2, r5
 8027976:	b280      	uxth	r0, r0
 8027978:	fb0c 2c00 	mla	ip, ip, r0, r2
 802797c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802797e:	fb01 c102 	mla	r1, r1, r2, ip
 8027982:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027984:	fb03 1302 	mla	r3, r3, r2, r1
 8027988:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802798c:	2b00      	cmp	r3, #0
 802798e:	d048      	beq.n	8027a22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8027990:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027992:	4a78      	ldr	r2, [pc, #480]	; (8027b74 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>)
 8027994:	434b      	muls	r3, r1
 8027996:	f8d2 e000 	ldr.w	lr, [r2]
 802799a:	1c59      	adds	r1, r3, #1
 802799c:	f8b8 2000 	ldrh.w	r2, [r8]
 80279a0:	ea4f 201e 	mov.w	r0, lr, lsr #8
 80279a4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80279a8:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80279ac:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80279b0:	121b      	asrs	r3, r3, #8
 80279b2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80279b6:	ea4f 0be2 	mov.w	fp, r2, asr #3
 80279ba:	b299      	uxth	r1, r3
 80279bc:	43db      	mvns	r3, r3
 80279be:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80279c2:	00d2      	lsls	r2, r2, #3
 80279c4:	b2db      	uxtb	r3, r3
 80279c6:	b2d2      	uxtb	r2, r2
 80279c8:	fb1c fc03 	smulbb	ip, ip, r3
 80279cc:	fb1b fb03 	smulbb	fp, fp, r3
 80279d0:	fb00 c001 	mla	r0, r0, r1, ip
 80279d4:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 80279d8:	fb12 f303 	smulbb	r3, r2, r3
 80279dc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80279e0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80279e4:	b280      	uxth	r0, r0
 80279e6:	fa5f fe8e 	uxtb.w	lr, lr
 80279ea:	fb0c bc01 	mla	ip, ip, r1, fp
 80279ee:	fb0e 3101 	mla	r1, lr, r1, r3
 80279f2:	1c43      	adds	r3, r0, #1
 80279f4:	fa1f fc8c 	uxth.w	ip, ip
 80279f8:	b289      	uxth	r1, r1
 80279fa:	f10c 0201 	add.w	r2, ip, #1
 80279fe:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027a02:	1c4b      	adds	r3, r1, #1
 8027a04:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 8027a08:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8027a0c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027a10:	0952      	lsrs	r2, r2, #5
 8027a12:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8027a16:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027a1a:	4310      	orrs	r0, r2
 8027a1c:	4308      	orrs	r0, r1
 8027a1e:	f8a8 0000 	strh.w	r0, [r8]
 8027a22:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8027a24:	f108 0802 	add.w	r8, r8, #2
 8027a28:	f109 39ff 	add.w	r9, r9, #4294967295
 8027a2c:	441c      	add	r4, r3
 8027a2e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027a30:	441e      	add	r6, r3
 8027a32:	e734      	b.n	802789e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc2>
 8027a34:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8027a36:	f10a 0a02 	add.w	sl, sl, #2
 8027a3a:	441c      	add	r4, r3
 8027a3c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027a3e:	441e      	add	r6, r3
 8027a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027a42:	3b01      	subs	r3, #1
 8027a44:	9309      	str	r3, [sp, #36]	; 0x24
 8027a46:	e707      	b.n	8027858 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027a48:	d023      	beq.n	8027a92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8027a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027a4c:	982b      	ldr	r0, [sp, #172]	; 0xac
 8027a4e:	3b01      	subs	r3, #1
 8027a50:	fb00 4003 	mla	r0, r0, r3, r4
 8027a54:	1400      	asrs	r0, r0, #16
 8027a56:	f53f af1c 	bmi.w	8027892 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8027a5a:	3901      	subs	r1, #1
 8027a5c:	4288      	cmp	r0, r1
 8027a5e:	f6bf af18 	bge.w	8027892 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8027a62:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8027a64:	fb01 6303 	mla	r3, r1, r3, r6
 8027a68:	141b      	asrs	r3, r3, #16
 8027a6a:	f53f af12 	bmi.w	8027892 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8027a6e:	3a01      	subs	r2, #1
 8027a70:	4293      	cmp	r3, r2
 8027a72:	f6bf af0e 	bge.w	8027892 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8027a76:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8027a7a:	46d1      	mov	r9, sl
 8027a7c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8027a80:	930f      	str	r3, [sp, #60]	; 0x3c
 8027a82:	f1bb 0f00 	cmp.w	fp, #0
 8027a86:	dc77      	bgt.n	8027b78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8027a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027a8a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027a8e:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8027a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027a94:	2b00      	cmp	r3, #0
 8027a96:	f340 8142 	ble.w	8027d1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x542>
 8027a9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027a9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027aa0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027aa4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027aa8:	eef0 6a48 	vmov.f32	s13, s16
 8027aac:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027ab0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027ab4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ab8:	ee16 4a90 	vmov	r4, s13
 8027abc:	eef0 6a68 	vmov.f32	s13, s17
 8027ac0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ac4:	ee16 6a90 	vmov	r6, s13
 8027ac8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027acc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027ad0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027ad4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027ad8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027adc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027ae0:	ee18 2a10 	vmov	r2, s16
 8027ae4:	eeb0 8a47 	vmov.f32	s16, s14
 8027ae8:	fb92 f3f3 	sdiv	r3, r2, r3
 8027aec:	ee18 2a90 	vmov	r2, s17
 8027af0:	932b      	str	r3, [sp, #172]	; 0xac
 8027af2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027af4:	eef0 8a67 	vmov.f32	s17, s15
 8027af8:	fb92 f3f3 	sdiv	r3, r2, r3
 8027afc:	932c      	str	r3, [sp, #176]	; 0xb0
 8027afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027b00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027b02:	3b01      	subs	r3, #1
 8027b04:	930d      	str	r3, [sp, #52]	; 0x34
 8027b06:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027b08:	bf08      	it	eq
 8027b0a:	4613      	moveq	r3, r2
 8027b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8027b0e:	e694      	b.n	802783a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8027b10:	2900      	cmp	r1, #0
 8027b12:	f43f af21 	beq.w	8027958 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8027b16:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027b18:	4418      	add	r0, r3
 8027b1a:	0843      	lsrs	r3, r0, #1
 8027b1c:	07c0      	lsls	r0, r0, #31
 8027b1e:	5cfb      	ldrb	r3, [r7, r3]
 8027b20:	bf54      	ite	pl
 8027b22:	f003 030f 	andpl.w	r3, r3, #15
 8027b26:	111b      	asrmi	r3, r3, #4
 8027b28:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027b2c:	b2db      	uxtb	r3, r3
 8027b2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8027b30:	e712      	b.n	8027958 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8027b32:	f113 0b01 	adds.w	fp, r3, #1
 8027b36:	f53f af74 	bmi.w	8027a22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8027b3a:	45dc      	cmp	ip, fp
 8027b3c:	f6ff af71 	blt.w	8027a22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8027b40:	f110 0b01 	adds.w	fp, r0, #1
 8027b44:	f53f af6d 	bmi.w	8027a22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8027b48:	45de      	cmp	lr, fp
 8027b4a:	f6ff af6a 	blt.w	8027a22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8027b4e:	9302      	str	r3, [sp, #8]
 8027b50:	fa0f f38e 	sxth.w	r3, lr
 8027b54:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027b56:	9301      	str	r3, [sp, #4]
 8027b58:	fa0f f38c 	sxth.w	r3, ip
 8027b5c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8027b60:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8027b64:	9300      	str	r3, [sp, #0]
 8027b66:	463a      	mov	r2, r7
 8027b68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027b6a:	4641      	mov	r1, r8
 8027b6c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8027b6e:	f7ff fd4b 	bl	8027608 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8027b72:	e756      	b.n	8027a22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8027b74:	200057e8 	.word	0x200057e8
 8027b78:	1422      	asrs	r2, r4, #16
 8027b7a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8027b7c:	1433      	asrs	r3, r6, #16
 8027b7e:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8027b82:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027b86:	fb05 2303 	mla	r3, r5, r3, r2
 8027b8a:	085a      	lsrs	r2, r3, #1
 8027b8c:	07dd      	lsls	r5, r3, #31
 8027b8e:	5cba      	ldrb	r2, [r7, r2]
 8027b90:	bf54      	ite	pl
 8027b92:	f002 020f 	andpl.w	r2, r2, #15
 8027b96:	1112      	asrmi	r2, r2, #4
 8027b98:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8027b9c:	b2d2      	uxtb	r2, r2
 8027b9e:	2900      	cmp	r1, #0
 8027ba0:	f000 80a9 	beq.w	8027cf6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51a>
 8027ba4:	f103 0e01 	add.w	lr, r3, #1
 8027ba8:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8027bac:	f01e 0f01 	tst.w	lr, #1
 8027bb0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027bb4:	bf0c      	ite	eq
 8027bb6:	f00c 0c0f 	andeq.w	ip, ip, #15
 8027bba:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8027bbe:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027bc2:	fa5f f58c 	uxtb.w	r5, ip
 8027bc6:	9512      	str	r5, [sp, #72]	; 0x48
 8027bc8:	b308      	cbz	r0, 8027c0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 8027bca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027bcc:	442b      	add	r3, r5
 8027bce:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027bd2:	07dd      	lsls	r5, r3, #31
 8027bd4:	f103 0301 	add.w	r3, r3, #1
 8027bd8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027bdc:	bf54      	ite	pl
 8027bde:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027be2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027be6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027bea:	fa5f f58c 	uxtb.w	r5, ip
 8027bee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027bf2:	950c      	str	r5, [sp, #48]	; 0x30
 8027bf4:	07dd      	lsls	r5, r3, #31
 8027bf6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027bfa:	bf54      	ite	pl
 8027bfc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027c00:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027c04:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027c08:	fa5f f38c 	uxtb.w	r3, ip
 8027c0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8027c0e:	b289      	uxth	r1, r1
 8027c10:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027c12:	b280      	uxth	r0, r0
 8027c14:	fb01 f300 	mul.w	r3, r1, r0
 8027c18:	0109      	lsls	r1, r1, #4
 8027c1a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8027c1e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8027c22:	1ac9      	subs	r1, r1, r3
 8027c24:	b280      	uxth	r0, r0
 8027c26:	b289      	uxth	r1, r1
 8027c28:	ebac 0c00 	sub.w	ip, ip, r0
 8027c2c:	4369      	muls	r1, r5
 8027c2e:	fa1f fc8c 	uxth.w	ip, ip
 8027c32:	fb02 120c 	mla	r2, r2, ip, r1
 8027c36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027c38:	fb00 2001 	mla	r0, r0, r1, r2
 8027c3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8027c3e:	fb03 0302 	mla	r3, r3, r2, r0
 8027c42:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027c46:	2b00      	cmp	r3, #0
 8027c48:	d04c      	beq.n	8027ce4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8027c4a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027c4c:	4a36      	ldr	r2, [pc, #216]	; (8027d28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>)
 8027c4e:	434b      	muls	r3, r1
 8027c50:	f8d2 e000 	ldr.w	lr, [r2]
 8027c54:	1c59      	adds	r1, r3, #1
 8027c56:	f8b9 2000 	ldrh.w	r2, [r9]
 8027c5a:	ea4f 201e 	mov.w	r0, lr, lsr #8
 8027c5e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027c62:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8027c66:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027c6a:	121b      	asrs	r3, r3, #8
 8027c6c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8027c70:	ea4f 08e2 	mov.w	r8, r2, asr #3
 8027c74:	b299      	uxth	r1, r3
 8027c76:	43db      	mvns	r3, r3
 8027c78:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8027c7c:	00d2      	lsls	r2, r2, #3
 8027c7e:	b2db      	uxtb	r3, r3
 8027c80:	b2d2      	uxtb	r2, r2
 8027c82:	fb1c fc03 	smulbb	ip, ip, r3
 8027c86:	fb18 f803 	smulbb	r8, r8, r3
 8027c8a:	fb00 c001 	mla	r0, r0, r1, ip
 8027c8e:	ea4f 0cde 	mov.w	ip, lr, lsr #3
 8027c92:	fb12 f203 	smulbb	r2, r2, r3
 8027c96:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8027c9a:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8027c9e:	b280      	uxth	r0, r0
 8027ca0:	fa5f fe8e 	uxtb.w	lr, lr
 8027ca4:	fb0c 8c01 	mla	ip, ip, r1, r8
 8027ca8:	fb0e 2201 	mla	r2, lr, r1, r2
 8027cac:	fa1f fc8c 	uxth.w	ip, ip
 8027cb0:	b292      	uxth	r2, r2
 8027cb2:	f10c 0801 	add.w	r8, ip, #1
 8027cb6:	1c51      	adds	r1, r2, #1
 8027cb8:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 8027cbc:	f100 0801 	add.w	r8, r0, #1
 8027cc0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027cc4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027cc8:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 8027ccc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8027cd0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8027cd4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8027cd8:	ea4c 0c00 	orr.w	ip, ip, r0
 8027cdc:	ea4c 0c02 	orr.w	ip, ip, r2
 8027ce0:	f8a9 c000 	strh.w	ip, [r9]
 8027ce4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8027ce6:	f109 0902 	add.w	r9, r9, #2
 8027cea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027cee:	441c      	add	r4, r3
 8027cf0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027cf2:	441e      	add	r6, r3
 8027cf4:	e6c5      	b.n	8027a82 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8027cf6:	2800      	cmp	r0, #0
 8027cf8:	d089      	beq.n	8027c0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 8027cfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027cfc:	442b      	add	r3, r5
 8027cfe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027d02:	07db      	lsls	r3, r3, #31
 8027d04:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027d08:	bf54      	ite	pl
 8027d0a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027d0e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027d12:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027d16:	fa5f f38c 	uxtb.w	r3, ip
 8027d1a:	930c      	str	r3, [sp, #48]	; 0x30
 8027d1c:	e777      	b.n	8027c0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x432>
 8027d1e:	b017      	add	sp, #92	; 0x5c
 8027d20:	ecbd 8b08 	vpop	{d8-d11}
 8027d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027d28:	200057e8 	.word	0x200057e8

08027d2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8027d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027d30:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8027d34:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8027d38:	2c00      	cmp	r4, #0
 8027d3a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8027d3e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8027d42:	fb04 ce03 	mla	lr, r4, r3, ip
 8027d46:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8027d4a:	db60      	blt.n	8027e0e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8027d4c:	45a1      	cmp	r9, r4
 8027d4e:	dd5e      	ble.n	8027e0e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8027d50:	f1bc 0f00 	cmp.w	ip, #0
 8027d54:	db59      	blt.n	8027e0a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8027d56:	45e0      	cmp	r8, ip
 8027d58:	dd57      	ble.n	8027e0a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8027d5a:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8027d5e:	f01e 0f01 	tst.w	lr, #1
 8027d62:	5c16      	ldrb	r6, [r2, r0]
 8027d64:	bf0c      	ite	eq
 8027d66:	f006 060f 	andeq.w	r6, r6, #15
 8027d6a:	1136      	asrne	r6, r6, #4
 8027d6c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027d70:	b2f6      	uxtb	r6, r6
 8027d72:	f11c 0001 	adds.w	r0, ip, #1
 8027d76:	d44d      	bmi.n	8027e14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8027d78:	4580      	cmp	r8, r0
 8027d7a:	dd4b      	ble.n	8027e14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8027d7c:	2d00      	cmp	r5, #0
 8027d7e:	d04b      	beq.n	8027e18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 8027d80:	f10e 0a01 	add.w	sl, lr, #1
 8027d84:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8027d88:	f01a 0f01 	tst.w	sl, #1
 8027d8c:	5c10      	ldrb	r0, [r2, r0]
 8027d8e:	bf0c      	ite	eq
 8027d90:	f000 000f 	andeq.w	r0, r0, #15
 8027d94:	1100      	asrne	r0, r0, #4
 8027d96:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027d9a:	b2c0      	uxtb	r0, r0
 8027d9c:	3401      	adds	r4, #1
 8027d9e:	d43f      	bmi.n	8027e20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8027da0:	45a1      	cmp	r9, r4
 8027da2:	dd3d      	ble.n	8027e20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8027da4:	2f00      	cmp	r7, #0
 8027da6:	f000 8097 	beq.w	8027ed8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
 8027daa:	f1bc 0f00 	cmp.w	ip, #0
 8027dae:	db35      	blt.n	8027e1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8027db0:	45e0      	cmp	r8, ip
 8027db2:	dd33      	ble.n	8027e1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8027db4:	eb03 090e 	add.w	r9, r3, lr
 8027db8:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8027dbc:	f019 0f01 	tst.w	r9, #1
 8027dc0:	5d14      	ldrb	r4, [r2, r4]
 8027dc2:	bf0c      	ite	eq
 8027dc4:	f004 040f 	andeq.w	r4, r4, #15
 8027dc8:	1124      	asrne	r4, r4, #4
 8027dca:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8027dce:	b2e4      	uxtb	r4, r4
 8027dd0:	f11c 0c01 	adds.w	ip, ip, #1
 8027dd4:	d427      	bmi.n	8027e26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8027dd6:	45e0      	cmp	r8, ip
 8027dd8:	dd25      	ble.n	8027e26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8027dda:	b335      	cbz	r5, 8027e2a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 8027ddc:	3301      	adds	r3, #1
 8027dde:	449e      	add	lr, r3
 8027de0:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027de4:	f01e 0f01 	tst.w	lr, #1
 8027de8:	5cd2      	ldrb	r2, [r2, r3]
 8027dea:	bf0c      	ite	eq
 8027dec:	f002 020f 	andeq.w	r2, r2, #15
 8027df0:	1112      	asrne	r2, r2, #4
 8027df2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8027df6:	b2d3      	uxtb	r3, r2
 8027df8:	2d0f      	cmp	r5, #15
 8027dfa:	d917      	bls.n	8027e2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 8027dfc:	4b39      	ldr	r3, [pc, #228]	; (8027ee4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 8027dfe:	f240 210d 	movw	r1, #525	; 0x20d
 8027e02:	4a39      	ldr	r2, [pc, #228]	; (8027ee8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 8027e04:	4839      	ldr	r0, [pc, #228]	; (8027eec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
 8027e06:	f000 fc47 	bl	8028698 <__assert_func>
 8027e0a:	2600      	movs	r6, #0
 8027e0c:	e7b1      	b.n	8027d72 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 8027e0e:	2000      	movs	r0, #0
 8027e10:	4606      	mov	r6, r0
 8027e12:	e7c3      	b.n	8027d9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8027e14:	2000      	movs	r0, #0
 8027e16:	e7c1      	b.n	8027d9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8027e18:	4628      	mov	r0, r5
 8027e1a:	e7bf      	b.n	8027d9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8027e1c:	2400      	movs	r4, #0
 8027e1e:	e7d7      	b.n	8027dd0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 8027e20:	2300      	movs	r3, #0
 8027e22:	461c      	mov	r4, r3
 8027e24:	e7e8      	b.n	8027df8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8027e26:	2300      	movs	r3, #0
 8027e28:	e7e6      	b.n	8027df8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8027e2a:	462b      	mov	r3, r5
 8027e2c:	2f0f      	cmp	r7, #15
 8027e2e:	d8e5      	bhi.n	8027dfc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8027e30:	b2ad      	uxth	r5, r5
 8027e32:	b2bf      	uxth	r7, r7
 8027e34:	fb05 fc07 	mul.w	ip, r5, r7
 8027e38:	012d      	lsls	r5, r5, #4
 8027e3a:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8027e3e:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8027e42:	eba5 050c 	sub.w	r5, r5, ip
 8027e46:	b2bf      	uxth	r7, r7
 8027e48:	b2ad      	uxth	r5, r5
 8027e4a:	1bd2      	subs	r2, r2, r7
 8027e4c:	4368      	muls	r0, r5
 8027e4e:	b292      	uxth	r2, r2
 8027e50:	fb06 0002 	mla	r0, r6, r2, r0
 8027e54:	fb07 0404 	mla	r4, r7, r4, r0
 8027e58:	fb0c 4303 	mla	r3, ip, r3, r4
 8027e5c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027e60:	2b00      	cmp	r3, #0
 8027e62:	d037      	beq.n	8027ed4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>
 8027e64:	4a22      	ldr	r2, [pc, #136]	; (8027ef0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
 8027e66:	b298      	uxth	r0, r3
 8027e68:	43db      	mvns	r3, r3
 8027e6a:	6816      	ldr	r6, [r2, #0]
 8027e6c:	880a      	ldrh	r2, [r1, #0]
 8027e6e:	b2db      	uxtb	r3, r3
 8027e70:	0a34      	lsrs	r4, r6, #8
 8027e72:	1215      	asrs	r5, r2, #8
 8027e74:	10d7      	asrs	r7, r2, #3
 8027e76:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8027e7a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027e7e:	00d2      	lsls	r2, r2, #3
 8027e80:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8027e84:	fb15 f503 	smulbb	r5, r5, r3
 8027e88:	b2d2      	uxtb	r2, r2
 8027e8a:	fb17 f703 	smulbb	r7, r7, r3
 8027e8e:	fb04 5400 	mla	r4, r4, r0, r5
 8027e92:	08f5      	lsrs	r5, r6, #3
 8027e94:	fb12 f303 	smulbb	r3, r2, r3
 8027e98:	00f6      	lsls	r6, r6, #3
 8027e9a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027e9e:	b2a4      	uxth	r4, r4
 8027ea0:	b2f6      	uxtb	r6, r6
 8027ea2:	fb05 7500 	mla	r5, r5, r0, r7
 8027ea6:	1c62      	adds	r2, r4, #1
 8027ea8:	fb06 3000 	mla	r0, r6, r0, r3
 8027eac:	b2ad      	uxth	r5, r5
 8027eae:	b280      	uxth	r0, r0
 8027eb0:	1c6b      	adds	r3, r5, #1
 8027eb2:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8027eb6:	1c42      	adds	r2, r0, #1
 8027eb8:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8027ebc:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8027ec0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027ec4:	095b      	lsrs	r3, r3, #5
 8027ec6:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8027eca:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027ece:	4323      	orrs	r3, r4
 8027ed0:	4303      	orrs	r3, r0
 8027ed2:	800b      	strh	r3, [r1, #0]
 8027ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027ed8:	2d0f      	cmp	r5, #15
 8027eda:	d88f      	bhi.n	8027dfc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8027edc:	463b      	mov	r3, r7
 8027ede:	463c      	mov	r4, r7
 8027ee0:	e7a6      	b.n	8027e30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 8027ee2:	bf00      	nop
 8027ee4:	0802ceb2 	.word	0x0802ceb2
 8027ee8:	0802d475 	.word	0x0802d475
 8027eec:	0802cf9b 	.word	0x0802cf9b
 8027ef0:	200057e8 	.word	0x200057e8

08027ef4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ef8:	ed2d 8b08 	vpush	{d8-d11}
 8027efc:	b093      	sub	sp, #76	; 0x4c
 8027efe:	461d      	mov	r5, r3
 8027f00:	eeb0 aa40 	vmov.f32	s20, s0
 8027f04:	920c      	str	r2, [sp, #48]	; 0x30
 8027f06:	eef0 9a60 	vmov.f32	s19, s1
 8027f0a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8027f0c:	eeb0 9a41 	vmov.f32	s18, s2
 8027f10:	9011      	str	r0, [sp, #68]	; 0x44
 8027f12:	eeb0 8a62 	vmov.f32	s16, s5
 8027f16:	6850      	ldr	r0, [r2, #4]
 8027f18:	eef0 8a43 	vmov.f32	s17, s6
 8027f1c:	9107      	str	r1, [sp, #28]
 8027f1e:	eef0 ba44 	vmov.f32	s23, s8
 8027f22:	6812      	ldr	r2, [r2, #0]
 8027f24:	eeb0 ba64 	vmov.f32	s22, s9
 8027f28:	eef0 aa45 	vmov.f32	s21, s10
 8027f2c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8027f30:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8027f34:	fb00 1303 	mla	r3, r0, r3, r1
 8027f38:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8027f3c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027f3e:	689b      	ldr	r3, [r3, #8]
 8027f40:	3301      	adds	r3, #1
 8027f42:	f023 0301 	bic.w	r3, r3, #1
 8027f46:	9306      	str	r3, [sp, #24]
 8027f48:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027f4a:	681f      	ldr	r7, [r3, #0]
 8027f4c:	9b07      	ldr	r3, [sp, #28]
 8027f4e:	2b00      	cmp	r3, #0
 8027f50:	dc03      	bgt.n	8027f5a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8027f52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027f54:	2b00      	cmp	r3, #0
 8027f56:	f340 8262 	ble.w	802841e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 8027f5a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027f5c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027f60:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027f64:	1e48      	subs	r0, r1, #1
 8027f66:	f102 3cff 	add.w	ip, r2, #4294967295
 8027f6a:	2d00      	cmp	r5, #0
 8027f6c:	f340 80ee 	ble.w	802814c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8027f70:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027f74:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027f78:	d406      	bmi.n	8027f88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8027f7a:	4586      	cmp	lr, r0
 8027f7c:	da04      	bge.n	8027f88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8027f7e:	2b00      	cmp	r3, #0
 8027f80:	db02      	blt.n	8027f88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8027f82:	4563      	cmp	r3, ip
 8027f84:	f2c0 80e3 	blt.w	802814e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8027f88:	f11e 0e01 	adds.w	lr, lr, #1
 8027f8c:	f100 80d6 	bmi.w	802813c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8027f90:	4571      	cmp	r1, lr
 8027f92:	f2c0 80d3 	blt.w	802813c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8027f96:	3301      	adds	r3, #1
 8027f98:	f100 80d0 	bmi.w	802813c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8027f9c:	429a      	cmp	r2, r3
 8027f9e:	f2c0 80cd 	blt.w	802813c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8027fa2:	46c8      	mov	r8, r9
 8027fa4:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8027fa8:	9509      	str	r5, [sp, #36]	; 0x24
 8027faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027fac:	2b00      	cmp	r3, #0
 8027fae:	f340 80eb 	ble.w	8028188 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8027fb2:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8027fb6:	1430      	asrs	r0, r6, #16
 8027fb8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027fbc:	9308      	str	r3, [sp, #32]
 8027fbe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027fc0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8027fc4:	1423      	asrs	r3, r4, #16
 8027fc6:	f100 813c 	bmi.w	8028242 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8027fca:	f10c 3bff 	add.w	fp, ip, #4294967295
 8027fce:	455b      	cmp	r3, fp
 8027fd0:	f280 8137 	bge.w	8028242 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8027fd4:	2800      	cmp	r0, #0
 8027fd6:	f2c0 8134 	blt.w	8028242 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8027fda:	f10e 3bff 	add.w	fp, lr, #4294967295
 8027fde:	4558      	cmp	r0, fp
 8027fe0:	f280 812f 	bge.w	8028242 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8027fe4:	9a06      	ldr	r2, [sp, #24]
 8027fe6:	fb00 3302 	mla	r3, r0, r2, r3
 8027fea:	0858      	lsrs	r0, r3, #1
 8027fec:	07da      	lsls	r2, r3, #31
 8027fee:	9a08      	ldr	r2, [sp, #32]
 8027ff0:	f817 c000 	ldrb.w	ip, [r7, r0]
 8027ff4:	bf54      	ite	pl
 8027ff6:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027ffa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027ffe:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028002:	fa5f fc8c 	uxtb.w	ip, ip
 8028006:	2a00      	cmp	r2, #0
 8028008:	f000 8102 	beq.w	8028210 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802800c:	1c58      	adds	r0, r3, #1
 802800e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028012:	07c0      	lsls	r0, r0, #31
 8028014:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8028018:	bf54      	ite	pl
 802801a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802801e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028022:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028026:	fa5f fe8e 	uxtb.w	lr, lr
 802802a:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802802e:	b1b9      	cbz	r1, 8028060 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8028030:	4453      	add	r3, sl
 8028032:	0858      	lsrs	r0, r3, #1
 8028034:	07da      	lsls	r2, r3, #31
 8028036:	5c38      	ldrb	r0, [r7, r0]
 8028038:	bf54      	ite	pl
 802803a:	f000 000f 	andpl.w	r0, r0, #15
 802803e:	1100      	asrmi	r0, r0, #4
 8028040:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028044:	b2c0      	uxtb	r0, r0
 8028046:	900a      	str	r0, [sp, #40]	; 0x28
 8028048:	1c58      	adds	r0, r3, #1
 802804a:	0843      	lsrs	r3, r0, #1
 802804c:	07c2      	lsls	r2, r0, #31
 802804e:	5cfb      	ldrb	r3, [r7, r3]
 8028050:	bf54      	ite	pl
 8028052:	f003 030f 	andpl.w	r3, r3, #15
 8028056:	111b      	asrmi	r3, r3, #4
 8028058:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802805c:	b2db      	uxtb	r3, r3
 802805e:	930e      	str	r3, [sp, #56]	; 0x38
 8028060:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8028064:	b289      	uxth	r1, r1
 8028066:	fb02 f301 	mul.w	r3, r2, r1
 802806a:	0112      	lsls	r2, r2, #4
 802806c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8028070:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8028074:	1ad2      	subs	r2, r2, r3
 8028076:	b289      	uxth	r1, r1
 8028078:	b292      	uxth	r2, r2
 802807a:	1a40      	subs	r0, r0, r1
 802807c:	fa1f fe80 	uxth.w	lr, r0
 8028080:	980d      	ldr	r0, [sp, #52]	; 0x34
 8028082:	4342      	muls	r2, r0
 8028084:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8028088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802808a:	fb01 c102 	mla	r1, r1, r2, ip
 802808e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028090:	fb03 1302 	mla	r3, r3, r2, r1
 8028094:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028098:	2b00      	cmp	r3, #0
 802809a:	d045      	beq.n	8028128 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802809c:	4a79      	ldr	r2, [pc, #484]	; (8028284 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>)
 802809e:	2bff      	cmp	r3, #255	; 0xff
 80280a0:	6811      	ldr	r1, [r2, #0]
 80280a2:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 80280a6:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 80280aa:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 80280ae:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80280b2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80280b6:	b2c9      	uxtb	r1, r1
 80280b8:	f000 80bb 	beq.w	8028232 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80280bc:	f8b8 c000 	ldrh.w	ip, [r8]
 80280c0:	fa1f fb83 	uxth.w	fp, r3
 80280c4:	43db      	mvns	r3, r3
 80280c6:	fb1e fe0b 	smulbb	lr, lr, fp
 80280ca:	ea4f 202c 	mov.w	r0, ip, asr #8
 80280ce:	fb12 f20b 	smulbb	r2, r2, fp
 80280d2:	b2db      	uxtb	r3, r3
 80280d4:	fb11 f10b 	smulbb	r1, r1, fp
 80280d8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80280dc:	fb00 e003 	mla	r0, r0, r3, lr
 80280e0:	ea4f 0eec 	mov.w	lr, ip, asr #3
 80280e4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80280e8:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80280ec:	b280      	uxth	r0, r0
 80280ee:	fa5f fc8c 	uxtb.w	ip, ip
 80280f2:	fb0e 2203 	mla	r2, lr, r3, r2
 80280f6:	fb0c 1303 	mla	r3, ip, r3, r1
 80280fa:	1c41      	adds	r1, r0, #1
 80280fc:	b292      	uxth	r2, r2
 80280fe:	b29b      	uxth	r3, r3
 8028100:	f102 0e01 	add.w	lr, r2, #1
 8028104:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8028108:	1c59      	adds	r1, r3, #1
 802810a:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 802810e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028112:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028116:	0952      	lsrs	r2, r2, #5
 8028118:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802811c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028120:	4310      	orrs	r0, r2
 8028122:	4318      	orrs	r0, r3
 8028124:	f8a8 0000 	strh.w	r0, [r8]
 8028128:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802812a:	f108 0802 	add.w	r8, r8, #2
 802812e:	441c      	add	r4, r3
 8028130:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028132:	441e      	add	r6, r3
 8028134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028136:	3b01      	subs	r3, #1
 8028138:	9309      	str	r3, [sp, #36]	; 0x24
 802813a:	e736      	b.n	8027faa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802813c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802813e:	3d01      	subs	r5, #1
 8028140:	f109 0902 	add.w	r9, r9, #2
 8028144:	441c      	add	r4, r3
 8028146:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028148:	441e      	add	r6, r3
 802814a:	e70e      	b.n	8027f6a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802814c:	d020      	beq.n	8028190 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 802814e:	1e6b      	subs	r3, r5, #1
 8028150:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8028152:	fb00 4003 	mla	r0, r0, r3, r4
 8028156:	1400      	asrs	r0, r0, #16
 8028158:	f53f af23 	bmi.w	8027fa2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802815c:	3901      	subs	r1, #1
 802815e:	4288      	cmp	r0, r1
 8028160:	f6bf af1f 	bge.w	8027fa2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8028164:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8028166:	fb01 6303 	mla	r3, r1, r3, r6
 802816a:	141b      	asrs	r3, r3, #16
 802816c:	f53f af19 	bmi.w	8027fa2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8028170:	3a01      	subs	r2, #1
 8028172:	4293      	cmp	r3, r2
 8028174:	f6bf af15 	bge.w	8027fa2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8028178:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802817c:	46aa      	mov	sl, r5
 802817e:	46c8      	mov	r8, r9
 8028180:	9308      	str	r3, [sp, #32]
 8028182:	f1ba 0f00 	cmp.w	sl, #0
 8028186:	dc7f      	bgt.n	8028288 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8028188:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802818c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8028190:	9b07      	ldr	r3, [sp, #28]
 8028192:	2b00      	cmp	r3, #0
 8028194:	f340 8143 	ble.w	802841e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 8028198:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802819c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802819e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80281a2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80281a6:	eef0 6a48 	vmov.f32	s13, s16
 80281aa:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80281ae:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80281b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80281b6:	ee16 4a90 	vmov	r4, s13
 80281ba:	eef0 6a68 	vmov.f32	s13, s17
 80281be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80281c2:	ee16 6a90 	vmov	r6, s13
 80281c6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80281ca:	ee69 7a27 	vmul.f32	s15, s18, s15
 80281ce:	ee37 8a48 	vsub.f32	s16, s14, s16
 80281d2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80281d6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80281da:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80281de:	ee18 2a10 	vmov	r2, s16
 80281e2:	eeb0 8a47 	vmov.f32	s16, s14
 80281e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80281ea:	ee18 2a90 	vmov	r2, s17
 80281ee:	9327      	str	r3, [sp, #156]	; 0x9c
 80281f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80281f2:	eef0 8a67 	vmov.f32	s17, s15
 80281f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80281fa:	9328      	str	r3, [sp, #160]	; 0xa0
 80281fc:	9b07      	ldr	r3, [sp, #28]
 80281fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028200:	3b01      	subs	r3, #1
 8028202:	9307      	str	r3, [sp, #28]
 8028204:	bf08      	it	eq
 8028206:	4615      	moveq	r5, r2
 8028208:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802820a:	bf18      	it	ne
 802820c:	461d      	movne	r5, r3
 802820e:	e69d      	b.n	8027f4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8028210:	2900      	cmp	r1, #0
 8028212:	f43f af25 	beq.w	8028060 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8028216:	eb0a 0003 	add.w	r0, sl, r3
 802821a:	0843      	lsrs	r3, r0, #1
 802821c:	07c0      	lsls	r0, r0, #31
 802821e:	5cfb      	ldrb	r3, [r7, r3]
 8028220:	bf54      	ite	pl
 8028222:	f003 030f 	andpl.w	r3, r3, #15
 8028226:	111b      	asrmi	r3, r3, #4
 8028228:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802822c:	b2db      	uxtb	r3, r3
 802822e:	930a      	str	r3, [sp, #40]	; 0x28
 8028230:	e716      	b.n	8028060 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8028232:	00d2      	lsls	r2, r2, #3
 8028234:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 8028238:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 802823c:	f8a8 1000 	strh.w	r1, [r8]
 8028240:	e772      	b.n	8028128 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8028242:	f113 0b01 	adds.w	fp, r3, #1
 8028246:	f53f af6f 	bmi.w	8028128 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802824a:	45dc      	cmp	ip, fp
 802824c:	f6ff af6c 	blt.w	8028128 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8028250:	f110 0b01 	adds.w	fp, r0, #1
 8028254:	f53f af68 	bmi.w	8028128 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8028258:	45de      	cmp	lr, fp
 802825a:	f6ff af65 	blt.w	8028128 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802825e:	9302      	str	r3, [sp, #8]
 8028260:	fa0f f38e 	sxth.w	r3, lr
 8028264:	9a08      	ldr	r2, [sp, #32]
 8028266:	9301      	str	r3, [sp, #4]
 8028268:	fa0f f38c 	sxth.w	r3, ip
 802826c:	9105      	str	r1, [sp, #20]
 802826e:	4641      	mov	r1, r8
 8028270:	9300      	str	r3, [sp, #0]
 8028272:	4653      	mov	r3, sl
 8028274:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8028278:	463a      	mov	r2, r7
 802827a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802827c:	f7ff fd56 	bl	8027d2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8028280:	e752      	b.n	8028128 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8028282:	bf00      	nop
 8028284:	200057e8 	.word	0x200057e8
 8028288:	1422      	asrs	r2, r4, #16
 802828a:	9906      	ldr	r1, [sp, #24]
 802828c:	1433      	asrs	r3, r6, #16
 802828e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028292:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028296:	fb01 2303 	mla	r3, r1, r3, r2
 802829a:	085a      	lsrs	r2, r3, #1
 802829c:	07d9      	lsls	r1, r3, #31
 802829e:	5cba      	ldrb	r2, [r7, r2]
 80282a0:	bf54      	ite	pl
 80282a2:	f002 020f 	andpl.w	r2, r2, #15
 80282a6:	1112      	asrmi	r2, r2, #4
 80282a8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80282ac:	b2d2      	uxtb	r2, r2
 80282ae:	2800      	cmp	r0, #0
 80282b0:	f000 809c 	beq.w	80283ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f8>
 80282b4:	f103 0e01 	add.w	lr, r3, #1
 80282b8:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80282bc:	f01e 0f01 	tst.w	lr, #1
 80282c0:	5c79      	ldrb	r1, [r7, r1]
 80282c2:	bf0c      	ite	eq
 80282c4:	f001 010f 	andeq.w	r1, r1, #15
 80282c8:	1109      	asrne	r1, r1, #4
 80282ca:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80282ce:	b2c9      	uxtb	r1, r1
 80282d0:	910f      	str	r1, [sp, #60]	; 0x3c
 80282d2:	f1bc 0f00 	cmp.w	ip, #0
 80282d6:	d01a      	beq.n	802830e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 80282d8:	9908      	ldr	r1, [sp, #32]
 80282da:	440b      	add	r3, r1
 80282dc:	0859      	lsrs	r1, r3, #1
 80282de:	f013 0f01 	tst.w	r3, #1
 80282e2:	f103 0301 	add.w	r3, r3, #1
 80282e6:	5c79      	ldrb	r1, [r7, r1]
 80282e8:	bf0c      	ite	eq
 80282ea:	f001 010f 	andeq.w	r1, r1, #15
 80282ee:	1109      	asrne	r1, r1, #4
 80282f0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80282f4:	b2c9      	uxtb	r1, r1
 80282f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80282f8:	0859      	lsrs	r1, r3, #1
 80282fa:	07db      	lsls	r3, r3, #31
 80282fc:	5c79      	ldrb	r1, [r7, r1]
 80282fe:	bf54      	ite	pl
 8028300:	f001 010f 	andpl.w	r1, r1, #15
 8028304:	1109      	asrmi	r1, r1, #4
 8028306:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802830a:	b2c9      	uxtb	r1, r1
 802830c:	9110      	str	r1, [sp, #64]	; 0x40
 802830e:	b280      	uxth	r0, r0
 8028310:	fa1f fc8c 	uxth.w	ip, ip
 8028314:	fb00 f30c 	mul.w	r3, r0, ip
 8028318:	0100      	lsls	r0, r0, #4
 802831a:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802831e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8028322:	1ac0      	subs	r0, r0, r3
 8028324:	fa1f fc8c 	uxth.w	ip, ip
 8028328:	b280      	uxth	r0, r0
 802832a:	eba1 010c 	sub.w	r1, r1, ip
 802832e:	fa1f fe81 	uxth.w	lr, r1
 8028332:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028334:	4348      	muls	r0, r1
 8028336:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8028338:	fb02 020e 	mla	r2, r2, lr, r0
 802833c:	fb0c 2c01 	mla	ip, ip, r1, r2
 8028340:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028342:	fb03 c302 	mla	r3, r3, r2, ip
 8028346:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802834a:	2b00      	cmp	r3, #0
 802834c:	d045      	beq.n	80283da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 802834e:	4a36      	ldr	r2, [pc, #216]	; (8028428 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>)
 8028350:	2bff      	cmp	r3, #255	; 0xff
 8028352:	6811      	ldr	r1, [r2, #0]
 8028354:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8028358:	ea4f 02d1 	mov.w	r2, r1, lsr #3
 802835c:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8028360:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8028364:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028368:	b2c9      	uxtb	r1, r1
 802836a:	d050      	beq.n	802840e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51a>
 802836c:	f8b8 c000 	ldrh.w	ip, [r8]
 8028370:	fa1f fb83 	uxth.w	fp, r3
 8028374:	43db      	mvns	r3, r3
 8028376:	fb1e fe0b 	smulbb	lr, lr, fp
 802837a:	ea4f 202c 	mov.w	r0, ip, asr #8
 802837e:	fb12 f20b 	smulbb	r2, r2, fp
 8028382:	b2db      	uxtb	r3, r3
 8028384:	fb11 f10b 	smulbb	r1, r1, fp
 8028388:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802838c:	fb00 e003 	mla	r0, r0, r3, lr
 8028390:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8028394:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8028398:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802839c:	b280      	uxth	r0, r0
 802839e:	fa5f fc8c 	uxtb.w	ip, ip
 80283a2:	fb0e 2203 	mla	r2, lr, r3, r2
 80283a6:	fb0c 1103 	mla	r1, ip, r3, r1
 80283aa:	b292      	uxth	r2, r2
 80283ac:	b289      	uxth	r1, r1
 80283ae:	f102 0e01 	add.w	lr, r2, #1
 80283b2:	1c4b      	adds	r3, r1, #1
 80283b4:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80283b8:	f100 0e01 	add.w	lr, r0, #1
 80283bc:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80283c0:	0952      	lsrs	r2, r2, #5
 80283c2:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 80283c6:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80283ca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80283ce:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80283d2:	4302      	orrs	r2, r0
 80283d4:	430a      	orrs	r2, r1
 80283d6:	f8a8 2000 	strh.w	r2, [r8]
 80283da:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80283dc:	f108 0802 	add.w	r8, r8, #2
 80283e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80283e4:	441c      	add	r4, r3
 80283e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80283e8:	441e      	add	r6, r3
 80283ea:	e6ca      	b.n	8028182 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 80283ec:	f1bc 0f00 	cmp.w	ip, #0
 80283f0:	d08d      	beq.n	802830e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 80283f2:	9908      	ldr	r1, [sp, #32]
 80283f4:	440b      	add	r3, r1
 80283f6:	0859      	lsrs	r1, r3, #1
 80283f8:	07db      	lsls	r3, r3, #31
 80283fa:	5c79      	ldrb	r1, [r7, r1]
 80283fc:	bf54      	ite	pl
 80283fe:	f001 010f 	andpl.w	r1, r1, #15
 8028402:	1109      	asrmi	r1, r1, #4
 8028404:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028408:	b2c9      	uxtb	r1, r1
 802840a:	910b      	str	r1, [sp, #44]	; 0x2c
 802840c:	e77f      	b.n	802830e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41a>
 802840e:	00d2      	lsls	r2, r2, #3
 8028410:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 8028414:	ea4e 01d1 	orr.w	r1, lr, r1, lsr #3
 8028418:	f8a8 1000 	strh.w	r1, [r8]
 802841c:	e7dd      	b.n	80283da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 802841e:	b013      	add	sp, #76	; 0x4c
 8028420:	ecbd 8b08 	vpop	{d8-d11}
 8028424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028428:	200057e8 	.word	0x200057e8

0802842c <CRC_Lock>:
 802842c:	4a1d      	ldr	r2, [pc, #116]	; (80284a4 <CRC_Lock+0x78>)
 802842e:	b530      	push	{r4, r5, lr}
 8028430:	6813      	ldr	r3, [r2, #0]
 8028432:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8028436:	f24c 2540 	movw	r5, #49728	; 0xc240
 802843a:	f023 0301 	bic.w	r3, r3, #1
 802843e:	6013      	str	r3, [r2, #0]
 8028440:	4b19      	ldr	r3, [pc, #100]	; (80284a8 <CRC_Lock+0x7c>)
 8028442:	681a      	ldr	r2, [r3, #0]
 8028444:	4022      	ands	r2, r4
 8028446:	42aa      	cmp	r2, r5
 8028448:	d005      	beq.n	8028456 <CRC_Lock+0x2a>
 802844a:	681b      	ldr	r3, [r3, #0]
 802844c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8028450:	4023      	ands	r3, r4
 8028452:	4293      	cmp	r3, r2
 8028454:	d11d      	bne.n	8028492 <CRC_Lock+0x66>
 8028456:	4b15      	ldr	r3, [pc, #84]	; (80284ac <CRC_Lock+0x80>)
 8028458:	681b      	ldr	r3, [r3, #0]
 802845a:	b9d3      	cbnz	r3, 8028492 <CRC_Lock+0x66>
 802845c:	4a14      	ldr	r2, [pc, #80]	; (80284b0 <CRC_Lock+0x84>)
 802845e:	6813      	ldr	r3, [r2, #0]
 8028460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028464:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8028468:	d006      	beq.n	8028478 <CRC_Lock+0x4c>
 802846a:	6813      	ldr	r3, [r2, #0]
 802846c:	f240 4283 	movw	r2, #1155	; 0x483
 8028470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028474:	4293      	cmp	r3, r2
 8028476:	d10c      	bne.n	8028492 <CRC_Lock+0x66>
 8028478:	4b0e      	ldr	r3, [pc, #56]	; (80284b4 <CRC_Lock+0x88>)
 802847a:	2201      	movs	r2, #1
 802847c:	601a      	str	r2, [r3, #0]
 802847e:	681a      	ldr	r2, [r3, #0]
 8028480:	2a00      	cmp	r2, #0
 8028482:	d1fc      	bne.n	802847e <CRC_Lock+0x52>
 8028484:	4b0c      	ldr	r3, [pc, #48]	; (80284b8 <CRC_Lock+0x8c>)
 8028486:	6018      	str	r0, [r3, #0]
 8028488:	6818      	ldr	r0, [r3, #0]
 802848a:	1a43      	subs	r3, r0, r1
 802848c:	4258      	negs	r0, r3
 802848e:	4158      	adcs	r0, r3
 8028490:	bd30      	pop	{r4, r5, pc}
 8028492:	4b0a      	ldr	r3, [pc, #40]	; (80284bc <CRC_Lock+0x90>)
 8028494:	2201      	movs	r2, #1
 8028496:	601a      	str	r2, [r3, #0]
 8028498:	681a      	ldr	r2, [r3, #0]
 802849a:	2a00      	cmp	r2, #0
 802849c:	d1fc      	bne.n	8028498 <CRC_Lock+0x6c>
 802849e:	4b08      	ldr	r3, [pc, #32]	; (80284c0 <CRC_Lock+0x94>)
 80284a0:	e7f1      	b.n	8028486 <CRC_Lock+0x5a>
 80284a2:	bf00      	nop
 80284a4:	e0002000 	.word	0xe0002000
 80284a8:	e000ed00 	.word	0xe000ed00
 80284ac:	e0042000 	.word	0xe0042000
 80284b0:	5c001000 	.word	0x5c001000
 80284b4:	58024c08 	.word	0x58024c08
 80284b8:	58024c00 	.word	0x58024c00
 80284bc:	40023008 	.word	0x40023008
 80284c0:	40023000 	.word	0x40023000

080284c4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80284c4:	6101      	str	r1, [r0, #16]
 80284c6:	4770      	bx	lr

080284c8 <_ZN8touchgfx8Gestures4tickEv>:
 80284c8:	7b83      	ldrb	r3, [r0, #14]
 80284ca:	b14b      	cbz	r3, 80284e0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80284cc:	8903      	ldrh	r3, [r0, #8]
 80284ce:	3301      	adds	r3, #1
 80284d0:	b29b      	uxth	r3, r3
 80284d2:	2b07      	cmp	r3, #7
 80284d4:	8103      	strh	r3, [r0, #8]
 80284d6:	bf81      	itttt	hi
 80284d8:	2300      	movhi	r3, #0
 80284da:	8143      	strhhi	r3, [r0, #10]
 80284dc:	8183      	strhhi	r3, [r0, #12]
 80284de:	7383      	strbhi	r3, [r0, #14]
 80284e0:	4770      	bx	lr
	...

080284e4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80284e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80284e8:	4604      	mov	r4, r0
 80284ea:	4698      	mov	r8, r3
 80284ec:	8880      	ldrh	r0, [r0, #4]
 80284ee:	4617      	mov	r7, r2
 80284f0:	4b1d      	ldr	r3, [pc, #116]	; (8028568 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80284f2:	460e      	mov	r6, r1
 80284f4:	f8ad 0006 	strh.w	r0, [sp, #6]
 80284f8:	eba8 0000 	sub.w	r0, r8, r0
 80284fc:	9300      	str	r3, [sp, #0]
 80284fe:	2300      	movs	r3, #0
 8028500:	b280      	uxth	r0, r0
 8028502:	8aa2      	ldrh	r2, [r4, #20]
 8028504:	f88d 3004 	strb.w	r3, [sp, #4]
 8028508:	b203      	sxth	r3, r0
 802850a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802850e:	88e1      	ldrh	r1, [r4, #6]
 8028510:	2b00      	cmp	r3, #0
 8028512:	f8ad 800a 	strh.w	r8, [sp, #10]
 8028516:	f8ad 1008 	strh.w	r1, [sp, #8]
 802851a:	bfb8      	it	lt
 802851c:	4240      	neglt	r0, r0
 802851e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8028522:	bfb8      	it	lt
 8028524:	b203      	sxthlt	r3, r0
 8028526:	4293      	cmp	r3, r2
 8028528:	dc08      	bgt.n	802853c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802852a:	1a69      	subs	r1, r5, r1
 802852c:	b289      	uxth	r1, r1
 802852e:	b20b      	sxth	r3, r1
 8028530:	2b00      	cmp	r3, #0
 8028532:	bfbc      	itt	lt
 8028534:	4249      	neglt	r1, r1
 8028536:	b20b      	sxthlt	r3, r1
 8028538:	429a      	cmp	r2, r3
 802853a:	da13      	bge.n	8028564 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 802853c:	6920      	ldr	r0, [r4, #16]
 802853e:	4669      	mov	r1, sp
 8028540:	eba8 0606 	sub.w	r6, r8, r6
 8028544:	1bef      	subs	r7, r5, r7
 8028546:	6803      	ldr	r3, [r0, #0]
 8028548:	685b      	ldr	r3, [r3, #4]
 802854a:	4798      	blx	r3
 802854c:	2300      	movs	r3, #0
 802854e:	2001      	movs	r0, #1
 8028550:	8166      	strh	r6, [r4, #10]
 8028552:	8123      	strh	r3, [r4, #8]
 8028554:	81a7      	strh	r7, [r4, #12]
 8028556:	f8a4 8004 	strh.w	r8, [r4, #4]
 802855a:	80e5      	strh	r5, [r4, #6]
 802855c:	73a0      	strb	r0, [r4, #14]
 802855e:	b004      	add	sp, #16
 8028560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028564:	2000      	movs	r0, #0
 8028566:	e7fa      	b.n	802855e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8028568:	0802c330 	.word	0x0802c330

0802856c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802856c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802856e:	461e      	mov	r6, r3
 8028570:	1e4b      	subs	r3, r1, #1
 8028572:	b085      	sub	sp, #20
 8028574:	4604      	mov	r4, r0
 8028576:	2b01      	cmp	r3, #1
 8028578:	460d      	mov	r5, r1
 802857a:	4617      	mov	r7, r2
 802857c:	d84b      	bhi.n	8028616 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802857e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8028582:	1cd3      	adds	r3, r2, #3
 8028584:	b29b      	uxth	r3, r3
 8028586:	2b06      	cmp	r3, #6
 8028588:	d916      	bls.n	80285b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802858a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802862c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802858e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028592:	f8cd c004 	str.w	ip, [sp, #4]
 8028596:	f04f 0c00 	mov.w	ip, #0
 802859a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802859e:	6900      	ldr	r0, [r0, #16]
 80285a0:	f8ad 100c 	strh.w	r1, [sp, #12]
 80285a4:	a901      	add	r1, sp, #4
 80285a6:	f88d c008 	strb.w	ip, [sp, #8]
 80285aa:	f8ad 200a 	strh.w	r2, [sp, #10]
 80285ae:	f8ad 300e 	strh.w	r3, [sp, #14]
 80285b2:	6803      	ldr	r3, [r0, #0]
 80285b4:	689b      	ldr	r3, [r3, #8]
 80285b6:	4798      	blx	r3
 80285b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80285bc:	1cd3      	adds	r3, r2, #3
 80285be:	b29b      	uxth	r3, r3
 80285c0:	2b06      	cmp	r3, #6
 80285c2:	d916      	bls.n	80285f2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80285c4:	f8df c064 	ldr.w	ip, [pc, #100]	; 802862c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80285c8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80285cc:	f8cd c004 	str.w	ip, [sp, #4]
 80285d0:	f04f 0c01 	mov.w	ip, #1
 80285d4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80285d8:	6920      	ldr	r0, [r4, #16]
 80285da:	f8ad 100c 	strh.w	r1, [sp, #12]
 80285de:	a901      	add	r1, sp, #4
 80285e0:	f88d c008 	strb.w	ip, [sp, #8]
 80285e4:	f8ad 200a 	strh.w	r2, [sp, #10]
 80285e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80285ec:	6803      	ldr	r3, [r0, #0]
 80285ee:	689b      	ldr	r3, [r3, #8]
 80285f0:	4798      	blx	r3
 80285f2:	4b0d      	ldr	r3, [pc, #52]	; (8028628 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80285f4:	a901      	add	r1, sp, #4
 80285f6:	6920      	ldr	r0, [r4, #16]
 80285f8:	9301      	str	r3, [sp, #4]
 80285fa:	2300      	movs	r3, #0
 80285fc:	f88d 5008 	strb.w	r5, [sp, #8]
 8028600:	f8ad 700a 	strh.w	r7, [sp, #10]
 8028604:	f8ad 600c 	strh.w	r6, [sp, #12]
 8028608:	f8ad 300e 	strh.w	r3, [sp, #14]
 802860c:	6803      	ldr	r3, [r0, #0]
 802860e:	681b      	ldr	r3, [r3, #0]
 8028610:	4798      	blx	r3
 8028612:	b005      	add	sp, #20
 8028614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028616:	2900      	cmp	r1, #0
 8028618:	d1eb      	bne.n	80285f2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802861a:	80a2      	strh	r2, [r4, #4]
 802861c:	80c6      	strh	r6, [r0, #6]
 802861e:	60a1      	str	r1, [r4, #8]
 8028620:	81a1      	strh	r1, [r4, #12]
 8028622:	73a1      	strb	r1, [r4, #14]
 8028624:	e7e5      	b.n	80285f2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028626:	bf00      	nop
 8028628:	0802c31c 	.word	0x0802c31c
 802862c:	0802c344 	.word	0x0802c344

08028630 <__aeabi_atexit>:
 8028630:	460b      	mov	r3, r1
 8028632:	4601      	mov	r1, r0
 8028634:	4618      	mov	r0, r3
 8028636:	f000 b853 	b.w	80286e0 <__cxa_atexit>

0802863a <_ZdlPvj>:
 802863a:	f000 b812 	b.w	8028662 <_ZdlPv>

0802863e <__cxa_guard_acquire>:
 802863e:	6803      	ldr	r3, [r0, #0]
 8028640:	07db      	lsls	r3, r3, #31
 8028642:	d406      	bmi.n	8028652 <__cxa_guard_acquire+0x14>
 8028644:	7843      	ldrb	r3, [r0, #1]
 8028646:	b103      	cbz	r3, 802864a <__cxa_guard_acquire+0xc>
 8028648:	deff      	udf	#255	; 0xff
 802864a:	2301      	movs	r3, #1
 802864c:	7043      	strb	r3, [r0, #1]
 802864e:	4618      	mov	r0, r3
 8028650:	4770      	bx	lr
 8028652:	2000      	movs	r0, #0
 8028654:	4770      	bx	lr

08028656 <__cxa_guard_release>:
 8028656:	2301      	movs	r3, #1
 8028658:	6003      	str	r3, [r0, #0]
 802865a:	4770      	bx	lr

0802865c <__cxa_pure_virtual>:
 802865c:	b508      	push	{r3, lr}
 802865e:	f000 f80f 	bl	8028680 <_ZSt9terminatev>

08028662 <_ZdlPv>:
 8028662:	f000 b989 	b.w	8028978 <free>

08028666 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8028666:	b508      	push	{r3, lr}
 8028668:	4780      	blx	r0
 802866a:	f000 f80e 	bl	802868a <abort>
	...

08028670 <_ZSt13get_terminatev>:
 8028670:	4b02      	ldr	r3, [pc, #8]	; (802867c <_ZSt13get_terminatev+0xc>)
 8028672:	6818      	ldr	r0, [r3, #0]
 8028674:	f3bf 8f5b 	dmb	ish
 8028678:	4770      	bx	lr
 802867a:	bf00      	nop
 802867c:	200001e8 	.word	0x200001e8

08028680 <_ZSt9terminatev>:
 8028680:	b508      	push	{r3, lr}
 8028682:	f7ff fff5 	bl	8028670 <_ZSt13get_terminatev>
 8028686:	f7ff ffee 	bl	8028666 <_ZN10__cxxabiv111__terminateEPFvvE>

0802868a <abort>:
 802868a:	b508      	push	{r3, lr}
 802868c:	2006      	movs	r0, #6
 802868e:	f000 fe01 	bl	8029294 <raise>
 8028692:	2001      	movs	r0, #1
 8028694:	f7db faa0 	bl	8003bd8 <_exit>

08028698 <__assert_func>:
 8028698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802869a:	4614      	mov	r4, r2
 802869c:	461a      	mov	r2, r3
 802869e:	4b09      	ldr	r3, [pc, #36]	; (80286c4 <__assert_func+0x2c>)
 80286a0:	681b      	ldr	r3, [r3, #0]
 80286a2:	4605      	mov	r5, r0
 80286a4:	68d8      	ldr	r0, [r3, #12]
 80286a6:	b14c      	cbz	r4, 80286bc <__assert_func+0x24>
 80286a8:	4b07      	ldr	r3, [pc, #28]	; (80286c8 <__assert_func+0x30>)
 80286aa:	9100      	str	r1, [sp, #0]
 80286ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80286b0:	4906      	ldr	r1, [pc, #24]	; (80286cc <__assert_func+0x34>)
 80286b2:	462b      	mov	r3, r5
 80286b4:	f000 f8fe 	bl	80288b4 <fiprintf>
 80286b8:	f7ff ffe7 	bl	802868a <abort>
 80286bc:	4b04      	ldr	r3, [pc, #16]	; (80286d0 <__assert_func+0x38>)
 80286be:	461c      	mov	r4, r3
 80286c0:	e7f3      	b.n	80286aa <__assert_func+0x12>
 80286c2:	bf00      	nop
 80286c4:	200001ec 	.word	0x200001ec
 80286c8:	0802d70f 	.word	0x0802d70f
 80286cc:	0802d71c 	.word	0x0802d71c
 80286d0:	0802d74a 	.word	0x0802d74a

080286d4 <atexit>:
 80286d4:	2300      	movs	r3, #0
 80286d6:	4601      	mov	r1, r0
 80286d8:	461a      	mov	r2, r3
 80286da:	4618      	mov	r0, r3
 80286dc:	f000 bf0c 	b.w	80294f8 <__register_exitproc>

080286e0 <__cxa_atexit>:
 80286e0:	b510      	push	{r4, lr}
 80286e2:	4c05      	ldr	r4, [pc, #20]	; (80286f8 <__cxa_atexit+0x18>)
 80286e4:	4613      	mov	r3, r2
 80286e6:	b12c      	cbz	r4, 80286f4 <__cxa_atexit+0x14>
 80286e8:	460a      	mov	r2, r1
 80286ea:	4601      	mov	r1, r0
 80286ec:	2002      	movs	r0, #2
 80286ee:	f000 ff03 	bl	80294f8 <__register_exitproc>
 80286f2:	bd10      	pop	{r4, pc}
 80286f4:	4620      	mov	r0, r4
 80286f6:	e7fc      	b.n	80286f2 <__cxa_atexit+0x12>
 80286f8:	080294f9 	.word	0x080294f9

080286fc <__errno>:
 80286fc:	4b01      	ldr	r3, [pc, #4]	; (8028704 <__errno+0x8>)
 80286fe:	6818      	ldr	r0, [r3, #0]
 8028700:	4770      	bx	lr
 8028702:	bf00      	nop
 8028704:	200001ec 	.word	0x200001ec

08028708 <std>:
 8028708:	2300      	movs	r3, #0
 802870a:	b510      	push	{r4, lr}
 802870c:	4604      	mov	r4, r0
 802870e:	e9c0 3300 	strd	r3, r3, [r0]
 8028712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8028716:	6083      	str	r3, [r0, #8]
 8028718:	8181      	strh	r1, [r0, #12]
 802871a:	6643      	str	r3, [r0, #100]	; 0x64
 802871c:	81c2      	strh	r2, [r0, #14]
 802871e:	6183      	str	r3, [r0, #24]
 8028720:	4619      	mov	r1, r3
 8028722:	2208      	movs	r2, #8
 8028724:	305c      	adds	r0, #92	; 0x5c
 8028726:	f000 f93d 	bl	80289a4 <memset>
 802872a:	4b05      	ldr	r3, [pc, #20]	; (8028740 <std+0x38>)
 802872c:	6263      	str	r3, [r4, #36]	; 0x24
 802872e:	4b05      	ldr	r3, [pc, #20]	; (8028744 <std+0x3c>)
 8028730:	62a3      	str	r3, [r4, #40]	; 0x28
 8028732:	4b05      	ldr	r3, [pc, #20]	; (8028748 <std+0x40>)
 8028734:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028736:	4b05      	ldr	r3, [pc, #20]	; (802874c <std+0x44>)
 8028738:	6224      	str	r4, [r4, #32]
 802873a:	6323      	str	r3, [r4, #48]	; 0x30
 802873c:	bd10      	pop	{r4, pc}
 802873e:	bf00      	nop
 8028740:	080292cd 	.word	0x080292cd
 8028744:	080292ef 	.word	0x080292ef
 8028748:	08029327 	.word	0x08029327
 802874c:	0802934b 	.word	0x0802934b

08028750 <_cleanup_r>:
 8028750:	4901      	ldr	r1, [pc, #4]	; (8028758 <_cleanup_r+0x8>)
 8028752:	f000 b8c1 	b.w	80288d8 <_fwalk_reent>
 8028756:	bf00      	nop
 8028758:	080296e9 	.word	0x080296e9

0802875c <__sfmoreglue>:
 802875c:	b570      	push	{r4, r5, r6, lr}
 802875e:	2268      	movs	r2, #104	; 0x68
 8028760:	1e4d      	subs	r5, r1, #1
 8028762:	4355      	muls	r5, r2
 8028764:	460e      	mov	r6, r1
 8028766:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802876a:	f000 f98f 	bl	8028a8c <_malloc_r>
 802876e:	4604      	mov	r4, r0
 8028770:	b140      	cbz	r0, 8028784 <__sfmoreglue+0x28>
 8028772:	2100      	movs	r1, #0
 8028774:	e9c0 1600 	strd	r1, r6, [r0]
 8028778:	300c      	adds	r0, #12
 802877a:	60a0      	str	r0, [r4, #8]
 802877c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8028780:	f000 f910 	bl	80289a4 <memset>
 8028784:	4620      	mov	r0, r4
 8028786:	bd70      	pop	{r4, r5, r6, pc}

08028788 <__sfp_lock_acquire>:
 8028788:	4801      	ldr	r0, [pc, #4]	; (8028790 <__sfp_lock_acquire+0x8>)
 802878a:	f000 b8ea 	b.w	8028962 <__retarget_lock_acquire_recursive>
 802878e:	bf00      	nop
 8028790:	200058de 	.word	0x200058de

08028794 <__sfp_lock_release>:
 8028794:	4801      	ldr	r0, [pc, #4]	; (802879c <__sfp_lock_release+0x8>)
 8028796:	f000 b8e6 	b.w	8028966 <__retarget_lock_release_recursive>
 802879a:	bf00      	nop
 802879c:	200058de 	.word	0x200058de

080287a0 <__sinit_lock_acquire>:
 80287a0:	4801      	ldr	r0, [pc, #4]	; (80287a8 <__sinit_lock_acquire+0x8>)
 80287a2:	f000 b8de 	b.w	8028962 <__retarget_lock_acquire_recursive>
 80287a6:	bf00      	nop
 80287a8:	200058df 	.word	0x200058df

080287ac <__sinit_lock_release>:
 80287ac:	4801      	ldr	r0, [pc, #4]	; (80287b4 <__sinit_lock_release+0x8>)
 80287ae:	f000 b8da 	b.w	8028966 <__retarget_lock_release_recursive>
 80287b2:	bf00      	nop
 80287b4:	200058df 	.word	0x200058df

080287b8 <__sinit>:
 80287b8:	b510      	push	{r4, lr}
 80287ba:	4604      	mov	r4, r0
 80287bc:	f7ff fff0 	bl	80287a0 <__sinit_lock_acquire>
 80287c0:	69a3      	ldr	r3, [r4, #24]
 80287c2:	b11b      	cbz	r3, 80287cc <__sinit+0x14>
 80287c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80287c8:	f7ff bff0 	b.w	80287ac <__sinit_lock_release>
 80287cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80287d0:	6523      	str	r3, [r4, #80]	; 0x50
 80287d2:	4b13      	ldr	r3, [pc, #76]	; (8028820 <__sinit+0x68>)
 80287d4:	4a13      	ldr	r2, [pc, #76]	; (8028824 <__sinit+0x6c>)
 80287d6:	681b      	ldr	r3, [r3, #0]
 80287d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80287da:	42a3      	cmp	r3, r4
 80287dc:	bf04      	itt	eq
 80287de:	2301      	moveq	r3, #1
 80287e0:	61a3      	streq	r3, [r4, #24]
 80287e2:	4620      	mov	r0, r4
 80287e4:	f000 f820 	bl	8028828 <__sfp>
 80287e8:	6060      	str	r0, [r4, #4]
 80287ea:	4620      	mov	r0, r4
 80287ec:	f000 f81c 	bl	8028828 <__sfp>
 80287f0:	60a0      	str	r0, [r4, #8]
 80287f2:	4620      	mov	r0, r4
 80287f4:	f000 f818 	bl	8028828 <__sfp>
 80287f8:	2200      	movs	r2, #0
 80287fa:	60e0      	str	r0, [r4, #12]
 80287fc:	2104      	movs	r1, #4
 80287fe:	6860      	ldr	r0, [r4, #4]
 8028800:	f7ff ff82 	bl	8028708 <std>
 8028804:	68a0      	ldr	r0, [r4, #8]
 8028806:	2201      	movs	r2, #1
 8028808:	2109      	movs	r1, #9
 802880a:	f7ff ff7d 	bl	8028708 <std>
 802880e:	68e0      	ldr	r0, [r4, #12]
 8028810:	2202      	movs	r2, #2
 8028812:	2112      	movs	r1, #18
 8028814:	f7ff ff78 	bl	8028708 <std>
 8028818:	2301      	movs	r3, #1
 802881a:	61a3      	str	r3, [r4, #24]
 802881c:	e7d2      	b.n	80287c4 <__sinit+0xc>
 802881e:	bf00      	nop
 8028820:	0802d7ac 	.word	0x0802d7ac
 8028824:	08028751 	.word	0x08028751

08028828 <__sfp>:
 8028828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802882a:	4607      	mov	r7, r0
 802882c:	f7ff ffac 	bl	8028788 <__sfp_lock_acquire>
 8028830:	4b1e      	ldr	r3, [pc, #120]	; (80288ac <__sfp+0x84>)
 8028832:	681e      	ldr	r6, [r3, #0]
 8028834:	69b3      	ldr	r3, [r6, #24]
 8028836:	b913      	cbnz	r3, 802883e <__sfp+0x16>
 8028838:	4630      	mov	r0, r6
 802883a:	f7ff ffbd 	bl	80287b8 <__sinit>
 802883e:	3648      	adds	r6, #72	; 0x48
 8028840:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8028844:	3b01      	subs	r3, #1
 8028846:	d503      	bpl.n	8028850 <__sfp+0x28>
 8028848:	6833      	ldr	r3, [r6, #0]
 802884a:	b30b      	cbz	r3, 8028890 <__sfp+0x68>
 802884c:	6836      	ldr	r6, [r6, #0]
 802884e:	e7f7      	b.n	8028840 <__sfp+0x18>
 8028850:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8028854:	b9d5      	cbnz	r5, 802888c <__sfp+0x64>
 8028856:	4b16      	ldr	r3, [pc, #88]	; (80288b0 <__sfp+0x88>)
 8028858:	60e3      	str	r3, [r4, #12]
 802885a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802885e:	6665      	str	r5, [r4, #100]	; 0x64
 8028860:	f000 f87e 	bl	8028960 <__retarget_lock_init_recursive>
 8028864:	f7ff ff96 	bl	8028794 <__sfp_lock_release>
 8028868:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802886c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8028870:	6025      	str	r5, [r4, #0]
 8028872:	61a5      	str	r5, [r4, #24]
 8028874:	2208      	movs	r2, #8
 8028876:	4629      	mov	r1, r5
 8028878:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802887c:	f000 f892 	bl	80289a4 <memset>
 8028880:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8028884:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8028888:	4620      	mov	r0, r4
 802888a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802888c:	3468      	adds	r4, #104	; 0x68
 802888e:	e7d9      	b.n	8028844 <__sfp+0x1c>
 8028890:	2104      	movs	r1, #4
 8028892:	4638      	mov	r0, r7
 8028894:	f7ff ff62 	bl	802875c <__sfmoreglue>
 8028898:	4604      	mov	r4, r0
 802889a:	6030      	str	r0, [r6, #0]
 802889c:	2800      	cmp	r0, #0
 802889e:	d1d5      	bne.n	802884c <__sfp+0x24>
 80288a0:	f7ff ff78 	bl	8028794 <__sfp_lock_release>
 80288a4:	230c      	movs	r3, #12
 80288a6:	603b      	str	r3, [r7, #0]
 80288a8:	e7ee      	b.n	8028888 <__sfp+0x60>
 80288aa:	bf00      	nop
 80288ac:	0802d7ac 	.word	0x0802d7ac
 80288b0:	ffff0001 	.word	0xffff0001

080288b4 <fiprintf>:
 80288b4:	b40e      	push	{r1, r2, r3}
 80288b6:	b503      	push	{r0, r1, lr}
 80288b8:	4601      	mov	r1, r0
 80288ba:	ab03      	add	r3, sp, #12
 80288bc:	4805      	ldr	r0, [pc, #20]	; (80288d4 <fiprintf+0x20>)
 80288be:	f853 2b04 	ldr.w	r2, [r3], #4
 80288c2:	6800      	ldr	r0, [r0, #0]
 80288c4:	9301      	str	r3, [sp, #4]
 80288c6:	f000 f97f 	bl	8028bc8 <_vfiprintf_r>
 80288ca:	b002      	add	sp, #8
 80288cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80288d0:	b003      	add	sp, #12
 80288d2:	4770      	bx	lr
 80288d4:	200001ec 	.word	0x200001ec

080288d8 <_fwalk_reent>:
 80288d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80288dc:	4606      	mov	r6, r0
 80288de:	4688      	mov	r8, r1
 80288e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80288e4:	2700      	movs	r7, #0
 80288e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80288ea:	f1b9 0901 	subs.w	r9, r9, #1
 80288ee:	d505      	bpl.n	80288fc <_fwalk_reent+0x24>
 80288f0:	6824      	ldr	r4, [r4, #0]
 80288f2:	2c00      	cmp	r4, #0
 80288f4:	d1f7      	bne.n	80288e6 <_fwalk_reent+0xe>
 80288f6:	4638      	mov	r0, r7
 80288f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80288fc:	89ab      	ldrh	r3, [r5, #12]
 80288fe:	2b01      	cmp	r3, #1
 8028900:	d907      	bls.n	8028912 <_fwalk_reent+0x3a>
 8028902:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8028906:	3301      	adds	r3, #1
 8028908:	d003      	beq.n	8028912 <_fwalk_reent+0x3a>
 802890a:	4629      	mov	r1, r5
 802890c:	4630      	mov	r0, r6
 802890e:	47c0      	blx	r8
 8028910:	4307      	orrs	r7, r0
 8028912:	3568      	adds	r5, #104	; 0x68
 8028914:	e7e9      	b.n	80288ea <_fwalk_reent+0x12>
	...

08028918 <__libc_init_array>:
 8028918:	b570      	push	{r4, r5, r6, lr}
 802891a:	4d0d      	ldr	r5, [pc, #52]	; (8028950 <__libc_init_array+0x38>)
 802891c:	4c0d      	ldr	r4, [pc, #52]	; (8028954 <__libc_init_array+0x3c>)
 802891e:	1b64      	subs	r4, r4, r5
 8028920:	10a4      	asrs	r4, r4, #2
 8028922:	2600      	movs	r6, #0
 8028924:	42a6      	cmp	r6, r4
 8028926:	d109      	bne.n	802893c <__libc_init_array+0x24>
 8028928:	4d0b      	ldr	r5, [pc, #44]	; (8028958 <__libc_init_array+0x40>)
 802892a:	4c0c      	ldr	r4, [pc, #48]	; (802895c <__libc_init_array+0x44>)
 802892c:	f000 ffd0 	bl	80298d0 <_init>
 8028930:	1b64      	subs	r4, r4, r5
 8028932:	10a4      	asrs	r4, r4, #2
 8028934:	2600      	movs	r6, #0
 8028936:	42a6      	cmp	r6, r4
 8028938:	d105      	bne.n	8028946 <__libc_init_array+0x2e>
 802893a:	bd70      	pop	{r4, r5, r6, pc}
 802893c:	f855 3b04 	ldr.w	r3, [r5], #4
 8028940:	4798      	blx	r3
 8028942:	3601      	adds	r6, #1
 8028944:	e7ee      	b.n	8028924 <__libc_init_array+0xc>
 8028946:	f855 3b04 	ldr.w	r3, [r5], #4
 802894a:	4798      	blx	r3
 802894c:	3601      	adds	r6, #1
 802894e:	e7f2      	b.n	8028936 <__libc_init_array+0x1e>
 8028950:	080448bc 	.word	0x080448bc
 8028954:	080448bc 	.word	0x080448bc
 8028958:	080448bc 	.word	0x080448bc
 802895c:	080448d0 	.word	0x080448d0

08028960 <__retarget_lock_init_recursive>:
 8028960:	4770      	bx	lr

08028962 <__retarget_lock_acquire_recursive>:
 8028962:	4770      	bx	lr

08028964 <__retarget_lock_release>:
 8028964:	4770      	bx	lr

08028966 <__retarget_lock_release_recursive>:
 8028966:	4770      	bx	lr

08028968 <malloc>:
 8028968:	4b02      	ldr	r3, [pc, #8]	; (8028974 <malloc+0xc>)
 802896a:	4601      	mov	r1, r0
 802896c:	6818      	ldr	r0, [r3, #0]
 802896e:	f000 b88d 	b.w	8028a8c <_malloc_r>
 8028972:	bf00      	nop
 8028974:	200001ec 	.word	0x200001ec

08028978 <free>:
 8028978:	4b02      	ldr	r3, [pc, #8]	; (8028984 <free+0xc>)
 802897a:	4601      	mov	r1, r0
 802897c:	6818      	ldr	r0, [r3, #0]
 802897e:	f000 b819 	b.w	80289b4 <_free_r>
 8028982:	bf00      	nop
 8028984:	200001ec 	.word	0x200001ec

08028988 <memcpy>:
 8028988:	440a      	add	r2, r1
 802898a:	4291      	cmp	r1, r2
 802898c:	f100 33ff 	add.w	r3, r0, #4294967295
 8028990:	d100      	bne.n	8028994 <memcpy+0xc>
 8028992:	4770      	bx	lr
 8028994:	b510      	push	{r4, lr}
 8028996:	f811 4b01 	ldrb.w	r4, [r1], #1
 802899a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802899e:	4291      	cmp	r1, r2
 80289a0:	d1f9      	bne.n	8028996 <memcpy+0xe>
 80289a2:	bd10      	pop	{r4, pc}

080289a4 <memset>:
 80289a4:	4402      	add	r2, r0
 80289a6:	4603      	mov	r3, r0
 80289a8:	4293      	cmp	r3, r2
 80289aa:	d100      	bne.n	80289ae <memset+0xa>
 80289ac:	4770      	bx	lr
 80289ae:	f803 1b01 	strb.w	r1, [r3], #1
 80289b2:	e7f9      	b.n	80289a8 <memset+0x4>

080289b4 <_free_r>:
 80289b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80289b6:	2900      	cmp	r1, #0
 80289b8:	d044      	beq.n	8028a44 <_free_r+0x90>
 80289ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80289be:	9001      	str	r0, [sp, #4]
 80289c0:	2b00      	cmp	r3, #0
 80289c2:	f1a1 0404 	sub.w	r4, r1, #4
 80289c6:	bfb8      	it	lt
 80289c8:	18e4      	addlt	r4, r4, r3
 80289ca:	f000 ff41 	bl	8029850 <__malloc_lock>
 80289ce:	4a1e      	ldr	r2, [pc, #120]	; (8028a48 <_free_r+0x94>)
 80289d0:	9801      	ldr	r0, [sp, #4]
 80289d2:	6813      	ldr	r3, [r2, #0]
 80289d4:	b933      	cbnz	r3, 80289e4 <_free_r+0x30>
 80289d6:	6063      	str	r3, [r4, #4]
 80289d8:	6014      	str	r4, [r2, #0]
 80289da:	b003      	add	sp, #12
 80289dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80289e0:	f000 bf3c 	b.w	802985c <__malloc_unlock>
 80289e4:	42a3      	cmp	r3, r4
 80289e6:	d908      	bls.n	80289fa <_free_r+0x46>
 80289e8:	6825      	ldr	r5, [r4, #0]
 80289ea:	1961      	adds	r1, r4, r5
 80289ec:	428b      	cmp	r3, r1
 80289ee:	bf01      	itttt	eq
 80289f0:	6819      	ldreq	r1, [r3, #0]
 80289f2:	685b      	ldreq	r3, [r3, #4]
 80289f4:	1949      	addeq	r1, r1, r5
 80289f6:	6021      	streq	r1, [r4, #0]
 80289f8:	e7ed      	b.n	80289d6 <_free_r+0x22>
 80289fa:	461a      	mov	r2, r3
 80289fc:	685b      	ldr	r3, [r3, #4]
 80289fe:	b10b      	cbz	r3, 8028a04 <_free_r+0x50>
 8028a00:	42a3      	cmp	r3, r4
 8028a02:	d9fa      	bls.n	80289fa <_free_r+0x46>
 8028a04:	6811      	ldr	r1, [r2, #0]
 8028a06:	1855      	adds	r5, r2, r1
 8028a08:	42a5      	cmp	r5, r4
 8028a0a:	d10b      	bne.n	8028a24 <_free_r+0x70>
 8028a0c:	6824      	ldr	r4, [r4, #0]
 8028a0e:	4421      	add	r1, r4
 8028a10:	1854      	adds	r4, r2, r1
 8028a12:	42a3      	cmp	r3, r4
 8028a14:	6011      	str	r1, [r2, #0]
 8028a16:	d1e0      	bne.n	80289da <_free_r+0x26>
 8028a18:	681c      	ldr	r4, [r3, #0]
 8028a1a:	685b      	ldr	r3, [r3, #4]
 8028a1c:	6053      	str	r3, [r2, #4]
 8028a1e:	4421      	add	r1, r4
 8028a20:	6011      	str	r1, [r2, #0]
 8028a22:	e7da      	b.n	80289da <_free_r+0x26>
 8028a24:	d902      	bls.n	8028a2c <_free_r+0x78>
 8028a26:	230c      	movs	r3, #12
 8028a28:	6003      	str	r3, [r0, #0]
 8028a2a:	e7d6      	b.n	80289da <_free_r+0x26>
 8028a2c:	6825      	ldr	r5, [r4, #0]
 8028a2e:	1961      	adds	r1, r4, r5
 8028a30:	428b      	cmp	r3, r1
 8028a32:	bf04      	itt	eq
 8028a34:	6819      	ldreq	r1, [r3, #0]
 8028a36:	685b      	ldreq	r3, [r3, #4]
 8028a38:	6063      	str	r3, [r4, #4]
 8028a3a:	bf04      	itt	eq
 8028a3c:	1949      	addeq	r1, r1, r5
 8028a3e:	6021      	streq	r1, [r4, #0]
 8028a40:	6054      	str	r4, [r2, #4]
 8028a42:	e7ca      	b.n	80289da <_free_r+0x26>
 8028a44:	b003      	add	sp, #12
 8028a46:	bd30      	pop	{r4, r5, pc}
 8028a48:	200058e0 	.word	0x200058e0

08028a4c <sbrk_aligned>:
 8028a4c:	b570      	push	{r4, r5, r6, lr}
 8028a4e:	4e0e      	ldr	r6, [pc, #56]	; (8028a88 <sbrk_aligned+0x3c>)
 8028a50:	460c      	mov	r4, r1
 8028a52:	6831      	ldr	r1, [r6, #0]
 8028a54:	4605      	mov	r5, r0
 8028a56:	b911      	cbnz	r1, 8028a5e <sbrk_aligned+0x12>
 8028a58:	f000 fbe4 	bl	8029224 <_sbrk_r>
 8028a5c:	6030      	str	r0, [r6, #0]
 8028a5e:	4621      	mov	r1, r4
 8028a60:	4628      	mov	r0, r5
 8028a62:	f000 fbdf 	bl	8029224 <_sbrk_r>
 8028a66:	1c43      	adds	r3, r0, #1
 8028a68:	d00a      	beq.n	8028a80 <sbrk_aligned+0x34>
 8028a6a:	1cc4      	adds	r4, r0, #3
 8028a6c:	f024 0403 	bic.w	r4, r4, #3
 8028a70:	42a0      	cmp	r0, r4
 8028a72:	d007      	beq.n	8028a84 <sbrk_aligned+0x38>
 8028a74:	1a21      	subs	r1, r4, r0
 8028a76:	4628      	mov	r0, r5
 8028a78:	f000 fbd4 	bl	8029224 <_sbrk_r>
 8028a7c:	3001      	adds	r0, #1
 8028a7e:	d101      	bne.n	8028a84 <sbrk_aligned+0x38>
 8028a80:	f04f 34ff 	mov.w	r4, #4294967295
 8028a84:	4620      	mov	r0, r4
 8028a86:	bd70      	pop	{r4, r5, r6, pc}
 8028a88:	200058e4 	.word	0x200058e4

08028a8c <_malloc_r>:
 8028a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028a90:	1ccd      	adds	r5, r1, #3
 8028a92:	f025 0503 	bic.w	r5, r5, #3
 8028a96:	3508      	adds	r5, #8
 8028a98:	2d0c      	cmp	r5, #12
 8028a9a:	bf38      	it	cc
 8028a9c:	250c      	movcc	r5, #12
 8028a9e:	2d00      	cmp	r5, #0
 8028aa0:	4607      	mov	r7, r0
 8028aa2:	db01      	blt.n	8028aa8 <_malloc_r+0x1c>
 8028aa4:	42a9      	cmp	r1, r5
 8028aa6:	d905      	bls.n	8028ab4 <_malloc_r+0x28>
 8028aa8:	230c      	movs	r3, #12
 8028aaa:	603b      	str	r3, [r7, #0]
 8028aac:	2600      	movs	r6, #0
 8028aae:	4630      	mov	r0, r6
 8028ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028ab4:	4e2e      	ldr	r6, [pc, #184]	; (8028b70 <_malloc_r+0xe4>)
 8028ab6:	f000 fecb 	bl	8029850 <__malloc_lock>
 8028aba:	6833      	ldr	r3, [r6, #0]
 8028abc:	461c      	mov	r4, r3
 8028abe:	bb34      	cbnz	r4, 8028b0e <_malloc_r+0x82>
 8028ac0:	4629      	mov	r1, r5
 8028ac2:	4638      	mov	r0, r7
 8028ac4:	f7ff ffc2 	bl	8028a4c <sbrk_aligned>
 8028ac8:	1c43      	adds	r3, r0, #1
 8028aca:	4604      	mov	r4, r0
 8028acc:	d14d      	bne.n	8028b6a <_malloc_r+0xde>
 8028ace:	6834      	ldr	r4, [r6, #0]
 8028ad0:	4626      	mov	r6, r4
 8028ad2:	2e00      	cmp	r6, #0
 8028ad4:	d140      	bne.n	8028b58 <_malloc_r+0xcc>
 8028ad6:	6823      	ldr	r3, [r4, #0]
 8028ad8:	4631      	mov	r1, r6
 8028ada:	4638      	mov	r0, r7
 8028adc:	eb04 0803 	add.w	r8, r4, r3
 8028ae0:	f000 fba0 	bl	8029224 <_sbrk_r>
 8028ae4:	4580      	cmp	r8, r0
 8028ae6:	d13a      	bne.n	8028b5e <_malloc_r+0xd2>
 8028ae8:	6821      	ldr	r1, [r4, #0]
 8028aea:	3503      	adds	r5, #3
 8028aec:	1a6d      	subs	r5, r5, r1
 8028aee:	f025 0503 	bic.w	r5, r5, #3
 8028af2:	3508      	adds	r5, #8
 8028af4:	2d0c      	cmp	r5, #12
 8028af6:	bf38      	it	cc
 8028af8:	250c      	movcc	r5, #12
 8028afa:	4629      	mov	r1, r5
 8028afc:	4638      	mov	r0, r7
 8028afe:	f7ff ffa5 	bl	8028a4c <sbrk_aligned>
 8028b02:	3001      	adds	r0, #1
 8028b04:	d02b      	beq.n	8028b5e <_malloc_r+0xd2>
 8028b06:	6823      	ldr	r3, [r4, #0]
 8028b08:	442b      	add	r3, r5
 8028b0a:	6023      	str	r3, [r4, #0]
 8028b0c:	e00e      	b.n	8028b2c <_malloc_r+0xa0>
 8028b0e:	6822      	ldr	r2, [r4, #0]
 8028b10:	1b52      	subs	r2, r2, r5
 8028b12:	d41e      	bmi.n	8028b52 <_malloc_r+0xc6>
 8028b14:	2a0b      	cmp	r2, #11
 8028b16:	d916      	bls.n	8028b46 <_malloc_r+0xba>
 8028b18:	1961      	adds	r1, r4, r5
 8028b1a:	42a3      	cmp	r3, r4
 8028b1c:	6025      	str	r5, [r4, #0]
 8028b1e:	bf18      	it	ne
 8028b20:	6059      	strne	r1, [r3, #4]
 8028b22:	6863      	ldr	r3, [r4, #4]
 8028b24:	bf08      	it	eq
 8028b26:	6031      	streq	r1, [r6, #0]
 8028b28:	5162      	str	r2, [r4, r5]
 8028b2a:	604b      	str	r3, [r1, #4]
 8028b2c:	4638      	mov	r0, r7
 8028b2e:	f104 060b 	add.w	r6, r4, #11
 8028b32:	f000 fe93 	bl	802985c <__malloc_unlock>
 8028b36:	f026 0607 	bic.w	r6, r6, #7
 8028b3a:	1d23      	adds	r3, r4, #4
 8028b3c:	1af2      	subs	r2, r6, r3
 8028b3e:	d0b6      	beq.n	8028aae <_malloc_r+0x22>
 8028b40:	1b9b      	subs	r3, r3, r6
 8028b42:	50a3      	str	r3, [r4, r2]
 8028b44:	e7b3      	b.n	8028aae <_malloc_r+0x22>
 8028b46:	6862      	ldr	r2, [r4, #4]
 8028b48:	42a3      	cmp	r3, r4
 8028b4a:	bf0c      	ite	eq
 8028b4c:	6032      	streq	r2, [r6, #0]
 8028b4e:	605a      	strne	r2, [r3, #4]
 8028b50:	e7ec      	b.n	8028b2c <_malloc_r+0xa0>
 8028b52:	4623      	mov	r3, r4
 8028b54:	6864      	ldr	r4, [r4, #4]
 8028b56:	e7b2      	b.n	8028abe <_malloc_r+0x32>
 8028b58:	4634      	mov	r4, r6
 8028b5a:	6876      	ldr	r6, [r6, #4]
 8028b5c:	e7b9      	b.n	8028ad2 <_malloc_r+0x46>
 8028b5e:	230c      	movs	r3, #12
 8028b60:	603b      	str	r3, [r7, #0]
 8028b62:	4638      	mov	r0, r7
 8028b64:	f000 fe7a 	bl	802985c <__malloc_unlock>
 8028b68:	e7a1      	b.n	8028aae <_malloc_r+0x22>
 8028b6a:	6025      	str	r5, [r4, #0]
 8028b6c:	e7de      	b.n	8028b2c <_malloc_r+0xa0>
 8028b6e:	bf00      	nop
 8028b70:	200058e0 	.word	0x200058e0

08028b74 <__sfputc_r>:
 8028b74:	6893      	ldr	r3, [r2, #8]
 8028b76:	3b01      	subs	r3, #1
 8028b78:	2b00      	cmp	r3, #0
 8028b7a:	b410      	push	{r4}
 8028b7c:	6093      	str	r3, [r2, #8]
 8028b7e:	da08      	bge.n	8028b92 <__sfputc_r+0x1e>
 8028b80:	6994      	ldr	r4, [r2, #24]
 8028b82:	42a3      	cmp	r3, r4
 8028b84:	db01      	blt.n	8028b8a <__sfputc_r+0x16>
 8028b86:	290a      	cmp	r1, #10
 8028b88:	d103      	bne.n	8028b92 <__sfputc_r+0x1e>
 8028b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028b8e:	f000 bbe1 	b.w	8029354 <__swbuf_r>
 8028b92:	6813      	ldr	r3, [r2, #0]
 8028b94:	1c58      	adds	r0, r3, #1
 8028b96:	6010      	str	r0, [r2, #0]
 8028b98:	7019      	strb	r1, [r3, #0]
 8028b9a:	4608      	mov	r0, r1
 8028b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028ba0:	4770      	bx	lr

08028ba2 <__sfputs_r>:
 8028ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028ba4:	4606      	mov	r6, r0
 8028ba6:	460f      	mov	r7, r1
 8028ba8:	4614      	mov	r4, r2
 8028baa:	18d5      	adds	r5, r2, r3
 8028bac:	42ac      	cmp	r4, r5
 8028bae:	d101      	bne.n	8028bb4 <__sfputs_r+0x12>
 8028bb0:	2000      	movs	r0, #0
 8028bb2:	e007      	b.n	8028bc4 <__sfputs_r+0x22>
 8028bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028bb8:	463a      	mov	r2, r7
 8028bba:	4630      	mov	r0, r6
 8028bbc:	f7ff ffda 	bl	8028b74 <__sfputc_r>
 8028bc0:	1c43      	adds	r3, r0, #1
 8028bc2:	d1f3      	bne.n	8028bac <__sfputs_r+0xa>
 8028bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028bc8 <_vfiprintf_r>:
 8028bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028bcc:	460d      	mov	r5, r1
 8028bce:	b09d      	sub	sp, #116	; 0x74
 8028bd0:	4614      	mov	r4, r2
 8028bd2:	4698      	mov	r8, r3
 8028bd4:	4606      	mov	r6, r0
 8028bd6:	b118      	cbz	r0, 8028be0 <_vfiprintf_r+0x18>
 8028bd8:	6983      	ldr	r3, [r0, #24]
 8028bda:	b90b      	cbnz	r3, 8028be0 <_vfiprintf_r+0x18>
 8028bdc:	f7ff fdec 	bl	80287b8 <__sinit>
 8028be0:	4b89      	ldr	r3, [pc, #548]	; (8028e08 <_vfiprintf_r+0x240>)
 8028be2:	429d      	cmp	r5, r3
 8028be4:	d11b      	bne.n	8028c1e <_vfiprintf_r+0x56>
 8028be6:	6875      	ldr	r5, [r6, #4]
 8028be8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028bea:	07d9      	lsls	r1, r3, #31
 8028bec:	d405      	bmi.n	8028bfa <_vfiprintf_r+0x32>
 8028bee:	89ab      	ldrh	r3, [r5, #12]
 8028bf0:	059a      	lsls	r2, r3, #22
 8028bf2:	d402      	bmi.n	8028bfa <_vfiprintf_r+0x32>
 8028bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028bf6:	f7ff feb4 	bl	8028962 <__retarget_lock_acquire_recursive>
 8028bfa:	89ab      	ldrh	r3, [r5, #12]
 8028bfc:	071b      	lsls	r3, r3, #28
 8028bfe:	d501      	bpl.n	8028c04 <_vfiprintf_r+0x3c>
 8028c00:	692b      	ldr	r3, [r5, #16]
 8028c02:	b9eb      	cbnz	r3, 8028c40 <_vfiprintf_r+0x78>
 8028c04:	4629      	mov	r1, r5
 8028c06:	4630      	mov	r0, r6
 8028c08:	f000 fc08 	bl	802941c <__swsetup_r>
 8028c0c:	b1c0      	cbz	r0, 8028c40 <_vfiprintf_r+0x78>
 8028c0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028c10:	07dc      	lsls	r4, r3, #31
 8028c12:	d50e      	bpl.n	8028c32 <_vfiprintf_r+0x6a>
 8028c14:	f04f 30ff 	mov.w	r0, #4294967295
 8028c18:	b01d      	add	sp, #116	; 0x74
 8028c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028c1e:	4b7b      	ldr	r3, [pc, #492]	; (8028e0c <_vfiprintf_r+0x244>)
 8028c20:	429d      	cmp	r5, r3
 8028c22:	d101      	bne.n	8028c28 <_vfiprintf_r+0x60>
 8028c24:	68b5      	ldr	r5, [r6, #8]
 8028c26:	e7df      	b.n	8028be8 <_vfiprintf_r+0x20>
 8028c28:	4b79      	ldr	r3, [pc, #484]	; (8028e10 <_vfiprintf_r+0x248>)
 8028c2a:	429d      	cmp	r5, r3
 8028c2c:	bf08      	it	eq
 8028c2e:	68f5      	ldreq	r5, [r6, #12]
 8028c30:	e7da      	b.n	8028be8 <_vfiprintf_r+0x20>
 8028c32:	89ab      	ldrh	r3, [r5, #12]
 8028c34:	0598      	lsls	r0, r3, #22
 8028c36:	d4ed      	bmi.n	8028c14 <_vfiprintf_r+0x4c>
 8028c38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028c3a:	f7ff fe94 	bl	8028966 <__retarget_lock_release_recursive>
 8028c3e:	e7e9      	b.n	8028c14 <_vfiprintf_r+0x4c>
 8028c40:	2300      	movs	r3, #0
 8028c42:	9309      	str	r3, [sp, #36]	; 0x24
 8028c44:	2320      	movs	r3, #32
 8028c46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028c4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8028c4e:	2330      	movs	r3, #48	; 0x30
 8028c50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8028e14 <_vfiprintf_r+0x24c>
 8028c54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8028c58:	f04f 0901 	mov.w	r9, #1
 8028c5c:	4623      	mov	r3, r4
 8028c5e:	469a      	mov	sl, r3
 8028c60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028c64:	b10a      	cbz	r2, 8028c6a <_vfiprintf_r+0xa2>
 8028c66:	2a25      	cmp	r2, #37	; 0x25
 8028c68:	d1f9      	bne.n	8028c5e <_vfiprintf_r+0x96>
 8028c6a:	ebba 0b04 	subs.w	fp, sl, r4
 8028c6e:	d00b      	beq.n	8028c88 <_vfiprintf_r+0xc0>
 8028c70:	465b      	mov	r3, fp
 8028c72:	4622      	mov	r2, r4
 8028c74:	4629      	mov	r1, r5
 8028c76:	4630      	mov	r0, r6
 8028c78:	f7ff ff93 	bl	8028ba2 <__sfputs_r>
 8028c7c:	3001      	adds	r0, #1
 8028c7e:	f000 80aa 	beq.w	8028dd6 <_vfiprintf_r+0x20e>
 8028c82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028c84:	445a      	add	r2, fp
 8028c86:	9209      	str	r2, [sp, #36]	; 0x24
 8028c88:	f89a 3000 	ldrb.w	r3, [sl]
 8028c8c:	2b00      	cmp	r3, #0
 8028c8e:	f000 80a2 	beq.w	8028dd6 <_vfiprintf_r+0x20e>
 8028c92:	2300      	movs	r3, #0
 8028c94:	f04f 32ff 	mov.w	r2, #4294967295
 8028c98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028c9c:	f10a 0a01 	add.w	sl, sl, #1
 8028ca0:	9304      	str	r3, [sp, #16]
 8028ca2:	9307      	str	r3, [sp, #28]
 8028ca4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028ca8:	931a      	str	r3, [sp, #104]	; 0x68
 8028caa:	4654      	mov	r4, sl
 8028cac:	2205      	movs	r2, #5
 8028cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028cb2:	4858      	ldr	r0, [pc, #352]	; (8028e14 <_vfiprintf_r+0x24c>)
 8028cb4:	f7d7 fb14 	bl	80002e0 <memchr>
 8028cb8:	9a04      	ldr	r2, [sp, #16]
 8028cba:	b9d8      	cbnz	r0, 8028cf4 <_vfiprintf_r+0x12c>
 8028cbc:	06d1      	lsls	r1, r2, #27
 8028cbe:	bf44      	itt	mi
 8028cc0:	2320      	movmi	r3, #32
 8028cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028cc6:	0713      	lsls	r3, r2, #28
 8028cc8:	bf44      	itt	mi
 8028cca:	232b      	movmi	r3, #43	; 0x2b
 8028ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8028cd4:	2b2a      	cmp	r3, #42	; 0x2a
 8028cd6:	d015      	beq.n	8028d04 <_vfiprintf_r+0x13c>
 8028cd8:	9a07      	ldr	r2, [sp, #28]
 8028cda:	4654      	mov	r4, sl
 8028cdc:	2000      	movs	r0, #0
 8028cde:	f04f 0c0a 	mov.w	ip, #10
 8028ce2:	4621      	mov	r1, r4
 8028ce4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028ce8:	3b30      	subs	r3, #48	; 0x30
 8028cea:	2b09      	cmp	r3, #9
 8028cec:	d94e      	bls.n	8028d8c <_vfiprintf_r+0x1c4>
 8028cee:	b1b0      	cbz	r0, 8028d1e <_vfiprintf_r+0x156>
 8028cf0:	9207      	str	r2, [sp, #28]
 8028cf2:	e014      	b.n	8028d1e <_vfiprintf_r+0x156>
 8028cf4:	eba0 0308 	sub.w	r3, r0, r8
 8028cf8:	fa09 f303 	lsl.w	r3, r9, r3
 8028cfc:	4313      	orrs	r3, r2
 8028cfe:	9304      	str	r3, [sp, #16]
 8028d00:	46a2      	mov	sl, r4
 8028d02:	e7d2      	b.n	8028caa <_vfiprintf_r+0xe2>
 8028d04:	9b03      	ldr	r3, [sp, #12]
 8028d06:	1d19      	adds	r1, r3, #4
 8028d08:	681b      	ldr	r3, [r3, #0]
 8028d0a:	9103      	str	r1, [sp, #12]
 8028d0c:	2b00      	cmp	r3, #0
 8028d0e:	bfbb      	ittet	lt
 8028d10:	425b      	neglt	r3, r3
 8028d12:	f042 0202 	orrlt.w	r2, r2, #2
 8028d16:	9307      	strge	r3, [sp, #28]
 8028d18:	9307      	strlt	r3, [sp, #28]
 8028d1a:	bfb8      	it	lt
 8028d1c:	9204      	strlt	r2, [sp, #16]
 8028d1e:	7823      	ldrb	r3, [r4, #0]
 8028d20:	2b2e      	cmp	r3, #46	; 0x2e
 8028d22:	d10c      	bne.n	8028d3e <_vfiprintf_r+0x176>
 8028d24:	7863      	ldrb	r3, [r4, #1]
 8028d26:	2b2a      	cmp	r3, #42	; 0x2a
 8028d28:	d135      	bne.n	8028d96 <_vfiprintf_r+0x1ce>
 8028d2a:	9b03      	ldr	r3, [sp, #12]
 8028d2c:	1d1a      	adds	r2, r3, #4
 8028d2e:	681b      	ldr	r3, [r3, #0]
 8028d30:	9203      	str	r2, [sp, #12]
 8028d32:	2b00      	cmp	r3, #0
 8028d34:	bfb8      	it	lt
 8028d36:	f04f 33ff 	movlt.w	r3, #4294967295
 8028d3a:	3402      	adds	r4, #2
 8028d3c:	9305      	str	r3, [sp, #20]
 8028d3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8028e24 <_vfiprintf_r+0x25c>
 8028d42:	7821      	ldrb	r1, [r4, #0]
 8028d44:	2203      	movs	r2, #3
 8028d46:	4650      	mov	r0, sl
 8028d48:	f7d7 faca 	bl	80002e0 <memchr>
 8028d4c:	b140      	cbz	r0, 8028d60 <_vfiprintf_r+0x198>
 8028d4e:	2340      	movs	r3, #64	; 0x40
 8028d50:	eba0 000a 	sub.w	r0, r0, sl
 8028d54:	fa03 f000 	lsl.w	r0, r3, r0
 8028d58:	9b04      	ldr	r3, [sp, #16]
 8028d5a:	4303      	orrs	r3, r0
 8028d5c:	3401      	adds	r4, #1
 8028d5e:	9304      	str	r3, [sp, #16]
 8028d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028d64:	482c      	ldr	r0, [pc, #176]	; (8028e18 <_vfiprintf_r+0x250>)
 8028d66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8028d6a:	2206      	movs	r2, #6
 8028d6c:	f7d7 fab8 	bl	80002e0 <memchr>
 8028d70:	2800      	cmp	r0, #0
 8028d72:	d03f      	beq.n	8028df4 <_vfiprintf_r+0x22c>
 8028d74:	4b29      	ldr	r3, [pc, #164]	; (8028e1c <_vfiprintf_r+0x254>)
 8028d76:	bb1b      	cbnz	r3, 8028dc0 <_vfiprintf_r+0x1f8>
 8028d78:	9b03      	ldr	r3, [sp, #12]
 8028d7a:	3307      	adds	r3, #7
 8028d7c:	f023 0307 	bic.w	r3, r3, #7
 8028d80:	3308      	adds	r3, #8
 8028d82:	9303      	str	r3, [sp, #12]
 8028d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028d86:	443b      	add	r3, r7
 8028d88:	9309      	str	r3, [sp, #36]	; 0x24
 8028d8a:	e767      	b.n	8028c5c <_vfiprintf_r+0x94>
 8028d8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8028d90:	460c      	mov	r4, r1
 8028d92:	2001      	movs	r0, #1
 8028d94:	e7a5      	b.n	8028ce2 <_vfiprintf_r+0x11a>
 8028d96:	2300      	movs	r3, #0
 8028d98:	3401      	adds	r4, #1
 8028d9a:	9305      	str	r3, [sp, #20]
 8028d9c:	4619      	mov	r1, r3
 8028d9e:	f04f 0c0a 	mov.w	ip, #10
 8028da2:	4620      	mov	r0, r4
 8028da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028da8:	3a30      	subs	r2, #48	; 0x30
 8028daa:	2a09      	cmp	r2, #9
 8028dac:	d903      	bls.n	8028db6 <_vfiprintf_r+0x1ee>
 8028dae:	2b00      	cmp	r3, #0
 8028db0:	d0c5      	beq.n	8028d3e <_vfiprintf_r+0x176>
 8028db2:	9105      	str	r1, [sp, #20]
 8028db4:	e7c3      	b.n	8028d3e <_vfiprintf_r+0x176>
 8028db6:	fb0c 2101 	mla	r1, ip, r1, r2
 8028dba:	4604      	mov	r4, r0
 8028dbc:	2301      	movs	r3, #1
 8028dbe:	e7f0      	b.n	8028da2 <_vfiprintf_r+0x1da>
 8028dc0:	ab03      	add	r3, sp, #12
 8028dc2:	9300      	str	r3, [sp, #0]
 8028dc4:	462a      	mov	r2, r5
 8028dc6:	4b16      	ldr	r3, [pc, #88]	; (8028e20 <_vfiprintf_r+0x258>)
 8028dc8:	a904      	add	r1, sp, #16
 8028dca:	4630      	mov	r0, r6
 8028dcc:	f3af 8000 	nop.w
 8028dd0:	4607      	mov	r7, r0
 8028dd2:	1c78      	adds	r0, r7, #1
 8028dd4:	d1d6      	bne.n	8028d84 <_vfiprintf_r+0x1bc>
 8028dd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028dd8:	07d9      	lsls	r1, r3, #31
 8028dda:	d405      	bmi.n	8028de8 <_vfiprintf_r+0x220>
 8028ddc:	89ab      	ldrh	r3, [r5, #12]
 8028dde:	059a      	lsls	r2, r3, #22
 8028de0:	d402      	bmi.n	8028de8 <_vfiprintf_r+0x220>
 8028de2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028de4:	f7ff fdbf 	bl	8028966 <__retarget_lock_release_recursive>
 8028de8:	89ab      	ldrh	r3, [r5, #12]
 8028dea:	065b      	lsls	r3, r3, #25
 8028dec:	f53f af12 	bmi.w	8028c14 <_vfiprintf_r+0x4c>
 8028df0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028df2:	e711      	b.n	8028c18 <_vfiprintf_r+0x50>
 8028df4:	ab03      	add	r3, sp, #12
 8028df6:	9300      	str	r3, [sp, #0]
 8028df8:	462a      	mov	r2, r5
 8028dfa:	4b09      	ldr	r3, [pc, #36]	; (8028e20 <_vfiprintf_r+0x258>)
 8028dfc:	a904      	add	r1, sp, #16
 8028dfe:	4630      	mov	r0, r6
 8028e00:	f000 f880 	bl	8028f04 <_printf_i>
 8028e04:	e7e4      	b.n	8028dd0 <_vfiprintf_r+0x208>
 8028e06:	bf00      	nop
 8028e08:	0802d76c 	.word	0x0802d76c
 8028e0c:	0802d78c 	.word	0x0802d78c
 8028e10:	0802d74c 	.word	0x0802d74c
 8028e14:	0802d7b0 	.word	0x0802d7b0
 8028e18:	0802d7ba 	.word	0x0802d7ba
 8028e1c:	00000000 	.word	0x00000000
 8028e20:	08028ba3 	.word	0x08028ba3
 8028e24:	0802d7b6 	.word	0x0802d7b6

08028e28 <_printf_common>:
 8028e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028e2c:	4616      	mov	r6, r2
 8028e2e:	4699      	mov	r9, r3
 8028e30:	688a      	ldr	r2, [r1, #8]
 8028e32:	690b      	ldr	r3, [r1, #16]
 8028e34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8028e38:	4293      	cmp	r3, r2
 8028e3a:	bfb8      	it	lt
 8028e3c:	4613      	movlt	r3, r2
 8028e3e:	6033      	str	r3, [r6, #0]
 8028e40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8028e44:	4607      	mov	r7, r0
 8028e46:	460c      	mov	r4, r1
 8028e48:	b10a      	cbz	r2, 8028e4e <_printf_common+0x26>
 8028e4a:	3301      	adds	r3, #1
 8028e4c:	6033      	str	r3, [r6, #0]
 8028e4e:	6823      	ldr	r3, [r4, #0]
 8028e50:	0699      	lsls	r1, r3, #26
 8028e52:	bf42      	ittt	mi
 8028e54:	6833      	ldrmi	r3, [r6, #0]
 8028e56:	3302      	addmi	r3, #2
 8028e58:	6033      	strmi	r3, [r6, #0]
 8028e5a:	6825      	ldr	r5, [r4, #0]
 8028e5c:	f015 0506 	ands.w	r5, r5, #6
 8028e60:	d106      	bne.n	8028e70 <_printf_common+0x48>
 8028e62:	f104 0a19 	add.w	sl, r4, #25
 8028e66:	68e3      	ldr	r3, [r4, #12]
 8028e68:	6832      	ldr	r2, [r6, #0]
 8028e6a:	1a9b      	subs	r3, r3, r2
 8028e6c:	42ab      	cmp	r3, r5
 8028e6e:	dc26      	bgt.n	8028ebe <_printf_common+0x96>
 8028e70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8028e74:	1e13      	subs	r3, r2, #0
 8028e76:	6822      	ldr	r2, [r4, #0]
 8028e78:	bf18      	it	ne
 8028e7a:	2301      	movne	r3, #1
 8028e7c:	0692      	lsls	r2, r2, #26
 8028e7e:	d42b      	bmi.n	8028ed8 <_printf_common+0xb0>
 8028e80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8028e84:	4649      	mov	r1, r9
 8028e86:	4638      	mov	r0, r7
 8028e88:	47c0      	blx	r8
 8028e8a:	3001      	adds	r0, #1
 8028e8c:	d01e      	beq.n	8028ecc <_printf_common+0xa4>
 8028e8e:	6823      	ldr	r3, [r4, #0]
 8028e90:	68e5      	ldr	r5, [r4, #12]
 8028e92:	6832      	ldr	r2, [r6, #0]
 8028e94:	f003 0306 	and.w	r3, r3, #6
 8028e98:	2b04      	cmp	r3, #4
 8028e9a:	bf08      	it	eq
 8028e9c:	1aad      	subeq	r5, r5, r2
 8028e9e:	68a3      	ldr	r3, [r4, #8]
 8028ea0:	6922      	ldr	r2, [r4, #16]
 8028ea2:	bf0c      	ite	eq
 8028ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8028ea8:	2500      	movne	r5, #0
 8028eaa:	4293      	cmp	r3, r2
 8028eac:	bfc4      	itt	gt
 8028eae:	1a9b      	subgt	r3, r3, r2
 8028eb0:	18ed      	addgt	r5, r5, r3
 8028eb2:	2600      	movs	r6, #0
 8028eb4:	341a      	adds	r4, #26
 8028eb6:	42b5      	cmp	r5, r6
 8028eb8:	d11a      	bne.n	8028ef0 <_printf_common+0xc8>
 8028eba:	2000      	movs	r0, #0
 8028ebc:	e008      	b.n	8028ed0 <_printf_common+0xa8>
 8028ebe:	2301      	movs	r3, #1
 8028ec0:	4652      	mov	r2, sl
 8028ec2:	4649      	mov	r1, r9
 8028ec4:	4638      	mov	r0, r7
 8028ec6:	47c0      	blx	r8
 8028ec8:	3001      	adds	r0, #1
 8028eca:	d103      	bne.n	8028ed4 <_printf_common+0xac>
 8028ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8028ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028ed4:	3501      	adds	r5, #1
 8028ed6:	e7c6      	b.n	8028e66 <_printf_common+0x3e>
 8028ed8:	18e1      	adds	r1, r4, r3
 8028eda:	1c5a      	adds	r2, r3, #1
 8028edc:	2030      	movs	r0, #48	; 0x30
 8028ede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8028ee2:	4422      	add	r2, r4
 8028ee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8028ee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8028eec:	3302      	adds	r3, #2
 8028eee:	e7c7      	b.n	8028e80 <_printf_common+0x58>
 8028ef0:	2301      	movs	r3, #1
 8028ef2:	4622      	mov	r2, r4
 8028ef4:	4649      	mov	r1, r9
 8028ef6:	4638      	mov	r0, r7
 8028ef8:	47c0      	blx	r8
 8028efa:	3001      	adds	r0, #1
 8028efc:	d0e6      	beq.n	8028ecc <_printf_common+0xa4>
 8028efe:	3601      	adds	r6, #1
 8028f00:	e7d9      	b.n	8028eb6 <_printf_common+0x8e>
	...

08028f04 <_printf_i>:
 8028f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028f08:	7e0f      	ldrb	r7, [r1, #24]
 8028f0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028f0c:	2f78      	cmp	r7, #120	; 0x78
 8028f0e:	4691      	mov	r9, r2
 8028f10:	4680      	mov	r8, r0
 8028f12:	460c      	mov	r4, r1
 8028f14:	469a      	mov	sl, r3
 8028f16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8028f1a:	d807      	bhi.n	8028f2c <_printf_i+0x28>
 8028f1c:	2f62      	cmp	r7, #98	; 0x62
 8028f1e:	d80a      	bhi.n	8028f36 <_printf_i+0x32>
 8028f20:	2f00      	cmp	r7, #0
 8028f22:	f000 80d8 	beq.w	80290d6 <_printf_i+0x1d2>
 8028f26:	2f58      	cmp	r7, #88	; 0x58
 8028f28:	f000 80a3 	beq.w	8029072 <_printf_i+0x16e>
 8028f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8028f30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8028f34:	e03a      	b.n	8028fac <_printf_i+0xa8>
 8028f36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8028f3a:	2b15      	cmp	r3, #21
 8028f3c:	d8f6      	bhi.n	8028f2c <_printf_i+0x28>
 8028f3e:	a101      	add	r1, pc, #4	; (adr r1, 8028f44 <_printf_i+0x40>)
 8028f40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8028f44:	08028f9d 	.word	0x08028f9d
 8028f48:	08028fb1 	.word	0x08028fb1
 8028f4c:	08028f2d 	.word	0x08028f2d
 8028f50:	08028f2d 	.word	0x08028f2d
 8028f54:	08028f2d 	.word	0x08028f2d
 8028f58:	08028f2d 	.word	0x08028f2d
 8028f5c:	08028fb1 	.word	0x08028fb1
 8028f60:	08028f2d 	.word	0x08028f2d
 8028f64:	08028f2d 	.word	0x08028f2d
 8028f68:	08028f2d 	.word	0x08028f2d
 8028f6c:	08028f2d 	.word	0x08028f2d
 8028f70:	080290bd 	.word	0x080290bd
 8028f74:	08028fe1 	.word	0x08028fe1
 8028f78:	0802909f 	.word	0x0802909f
 8028f7c:	08028f2d 	.word	0x08028f2d
 8028f80:	08028f2d 	.word	0x08028f2d
 8028f84:	080290df 	.word	0x080290df
 8028f88:	08028f2d 	.word	0x08028f2d
 8028f8c:	08028fe1 	.word	0x08028fe1
 8028f90:	08028f2d 	.word	0x08028f2d
 8028f94:	08028f2d 	.word	0x08028f2d
 8028f98:	080290a7 	.word	0x080290a7
 8028f9c:	682b      	ldr	r3, [r5, #0]
 8028f9e:	1d1a      	adds	r2, r3, #4
 8028fa0:	681b      	ldr	r3, [r3, #0]
 8028fa2:	602a      	str	r2, [r5, #0]
 8028fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8028fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8028fac:	2301      	movs	r3, #1
 8028fae:	e0a3      	b.n	80290f8 <_printf_i+0x1f4>
 8028fb0:	6820      	ldr	r0, [r4, #0]
 8028fb2:	6829      	ldr	r1, [r5, #0]
 8028fb4:	0606      	lsls	r6, r0, #24
 8028fb6:	f101 0304 	add.w	r3, r1, #4
 8028fba:	d50a      	bpl.n	8028fd2 <_printf_i+0xce>
 8028fbc:	680e      	ldr	r6, [r1, #0]
 8028fbe:	602b      	str	r3, [r5, #0]
 8028fc0:	2e00      	cmp	r6, #0
 8028fc2:	da03      	bge.n	8028fcc <_printf_i+0xc8>
 8028fc4:	232d      	movs	r3, #45	; 0x2d
 8028fc6:	4276      	negs	r6, r6
 8028fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028fcc:	485e      	ldr	r0, [pc, #376]	; (8029148 <_printf_i+0x244>)
 8028fce:	230a      	movs	r3, #10
 8028fd0:	e019      	b.n	8029006 <_printf_i+0x102>
 8028fd2:	680e      	ldr	r6, [r1, #0]
 8028fd4:	602b      	str	r3, [r5, #0]
 8028fd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8028fda:	bf18      	it	ne
 8028fdc:	b236      	sxthne	r6, r6
 8028fde:	e7ef      	b.n	8028fc0 <_printf_i+0xbc>
 8028fe0:	682b      	ldr	r3, [r5, #0]
 8028fe2:	6820      	ldr	r0, [r4, #0]
 8028fe4:	1d19      	adds	r1, r3, #4
 8028fe6:	6029      	str	r1, [r5, #0]
 8028fe8:	0601      	lsls	r1, r0, #24
 8028fea:	d501      	bpl.n	8028ff0 <_printf_i+0xec>
 8028fec:	681e      	ldr	r6, [r3, #0]
 8028fee:	e002      	b.n	8028ff6 <_printf_i+0xf2>
 8028ff0:	0646      	lsls	r6, r0, #25
 8028ff2:	d5fb      	bpl.n	8028fec <_printf_i+0xe8>
 8028ff4:	881e      	ldrh	r6, [r3, #0]
 8028ff6:	4854      	ldr	r0, [pc, #336]	; (8029148 <_printf_i+0x244>)
 8028ff8:	2f6f      	cmp	r7, #111	; 0x6f
 8028ffa:	bf0c      	ite	eq
 8028ffc:	2308      	moveq	r3, #8
 8028ffe:	230a      	movne	r3, #10
 8029000:	2100      	movs	r1, #0
 8029002:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8029006:	6865      	ldr	r5, [r4, #4]
 8029008:	60a5      	str	r5, [r4, #8]
 802900a:	2d00      	cmp	r5, #0
 802900c:	bfa2      	ittt	ge
 802900e:	6821      	ldrge	r1, [r4, #0]
 8029010:	f021 0104 	bicge.w	r1, r1, #4
 8029014:	6021      	strge	r1, [r4, #0]
 8029016:	b90e      	cbnz	r6, 802901c <_printf_i+0x118>
 8029018:	2d00      	cmp	r5, #0
 802901a:	d04d      	beq.n	80290b8 <_printf_i+0x1b4>
 802901c:	4615      	mov	r5, r2
 802901e:	fbb6 f1f3 	udiv	r1, r6, r3
 8029022:	fb03 6711 	mls	r7, r3, r1, r6
 8029026:	5dc7      	ldrb	r7, [r0, r7]
 8029028:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802902c:	4637      	mov	r7, r6
 802902e:	42bb      	cmp	r3, r7
 8029030:	460e      	mov	r6, r1
 8029032:	d9f4      	bls.n	802901e <_printf_i+0x11a>
 8029034:	2b08      	cmp	r3, #8
 8029036:	d10b      	bne.n	8029050 <_printf_i+0x14c>
 8029038:	6823      	ldr	r3, [r4, #0]
 802903a:	07de      	lsls	r6, r3, #31
 802903c:	d508      	bpl.n	8029050 <_printf_i+0x14c>
 802903e:	6923      	ldr	r3, [r4, #16]
 8029040:	6861      	ldr	r1, [r4, #4]
 8029042:	4299      	cmp	r1, r3
 8029044:	bfde      	ittt	le
 8029046:	2330      	movle	r3, #48	; 0x30
 8029048:	f805 3c01 	strble.w	r3, [r5, #-1]
 802904c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8029050:	1b52      	subs	r2, r2, r5
 8029052:	6122      	str	r2, [r4, #16]
 8029054:	f8cd a000 	str.w	sl, [sp]
 8029058:	464b      	mov	r3, r9
 802905a:	aa03      	add	r2, sp, #12
 802905c:	4621      	mov	r1, r4
 802905e:	4640      	mov	r0, r8
 8029060:	f7ff fee2 	bl	8028e28 <_printf_common>
 8029064:	3001      	adds	r0, #1
 8029066:	d14c      	bne.n	8029102 <_printf_i+0x1fe>
 8029068:	f04f 30ff 	mov.w	r0, #4294967295
 802906c:	b004      	add	sp, #16
 802906e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029072:	4835      	ldr	r0, [pc, #212]	; (8029148 <_printf_i+0x244>)
 8029074:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8029078:	6829      	ldr	r1, [r5, #0]
 802907a:	6823      	ldr	r3, [r4, #0]
 802907c:	f851 6b04 	ldr.w	r6, [r1], #4
 8029080:	6029      	str	r1, [r5, #0]
 8029082:	061d      	lsls	r5, r3, #24
 8029084:	d514      	bpl.n	80290b0 <_printf_i+0x1ac>
 8029086:	07df      	lsls	r7, r3, #31
 8029088:	bf44      	itt	mi
 802908a:	f043 0320 	orrmi.w	r3, r3, #32
 802908e:	6023      	strmi	r3, [r4, #0]
 8029090:	b91e      	cbnz	r6, 802909a <_printf_i+0x196>
 8029092:	6823      	ldr	r3, [r4, #0]
 8029094:	f023 0320 	bic.w	r3, r3, #32
 8029098:	6023      	str	r3, [r4, #0]
 802909a:	2310      	movs	r3, #16
 802909c:	e7b0      	b.n	8029000 <_printf_i+0xfc>
 802909e:	6823      	ldr	r3, [r4, #0]
 80290a0:	f043 0320 	orr.w	r3, r3, #32
 80290a4:	6023      	str	r3, [r4, #0]
 80290a6:	2378      	movs	r3, #120	; 0x78
 80290a8:	4828      	ldr	r0, [pc, #160]	; (802914c <_printf_i+0x248>)
 80290aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80290ae:	e7e3      	b.n	8029078 <_printf_i+0x174>
 80290b0:	0659      	lsls	r1, r3, #25
 80290b2:	bf48      	it	mi
 80290b4:	b2b6      	uxthmi	r6, r6
 80290b6:	e7e6      	b.n	8029086 <_printf_i+0x182>
 80290b8:	4615      	mov	r5, r2
 80290ba:	e7bb      	b.n	8029034 <_printf_i+0x130>
 80290bc:	682b      	ldr	r3, [r5, #0]
 80290be:	6826      	ldr	r6, [r4, #0]
 80290c0:	6961      	ldr	r1, [r4, #20]
 80290c2:	1d18      	adds	r0, r3, #4
 80290c4:	6028      	str	r0, [r5, #0]
 80290c6:	0635      	lsls	r5, r6, #24
 80290c8:	681b      	ldr	r3, [r3, #0]
 80290ca:	d501      	bpl.n	80290d0 <_printf_i+0x1cc>
 80290cc:	6019      	str	r1, [r3, #0]
 80290ce:	e002      	b.n	80290d6 <_printf_i+0x1d2>
 80290d0:	0670      	lsls	r0, r6, #25
 80290d2:	d5fb      	bpl.n	80290cc <_printf_i+0x1c8>
 80290d4:	8019      	strh	r1, [r3, #0]
 80290d6:	2300      	movs	r3, #0
 80290d8:	6123      	str	r3, [r4, #16]
 80290da:	4615      	mov	r5, r2
 80290dc:	e7ba      	b.n	8029054 <_printf_i+0x150>
 80290de:	682b      	ldr	r3, [r5, #0]
 80290e0:	1d1a      	adds	r2, r3, #4
 80290e2:	602a      	str	r2, [r5, #0]
 80290e4:	681d      	ldr	r5, [r3, #0]
 80290e6:	6862      	ldr	r2, [r4, #4]
 80290e8:	2100      	movs	r1, #0
 80290ea:	4628      	mov	r0, r5
 80290ec:	f7d7 f8f8 	bl	80002e0 <memchr>
 80290f0:	b108      	cbz	r0, 80290f6 <_printf_i+0x1f2>
 80290f2:	1b40      	subs	r0, r0, r5
 80290f4:	6060      	str	r0, [r4, #4]
 80290f6:	6863      	ldr	r3, [r4, #4]
 80290f8:	6123      	str	r3, [r4, #16]
 80290fa:	2300      	movs	r3, #0
 80290fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8029100:	e7a8      	b.n	8029054 <_printf_i+0x150>
 8029102:	6923      	ldr	r3, [r4, #16]
 8029104:	462a      	mov	r2, r5
 8029106:	4649      	mov	r1, r9
 8029108:	4640      	mov	r0, r8
 802910a:	47d0      	blx	sl
 802910c:	3001      	adds	r0, #1
 802910e:	d0ab      	beq.n	8029068 <_printf_i+0x164>
 8029110:	6823      	ldr	r3, [r4, #0]
 8029112:	079b      	lsls	r3, r3, #30
 8029114:	d413      	bmi.n	802913e <_printf_i+0x23a>
 8029116:	68e0      	ldr	r0, [r4, #12]
 8029118:	9b03      	ldr	r3, [sp, #12]
 802911a:	4298      	cmp	r0, r3
 802911c:	bfb8      	it	lt
 802911e:	4618      	movlt	r0, r3
 8029120:	e7a4      	b.n	802906c <_printf_i+0x168>
 8029122:	2301      	movs	r3, #1
 8029124:	4632      	mov	r2, r6
 8029126:	4649      	mov	r1, r9
 8029128:	4640      	mov	r0, r8
 802912a:	47d0      	blx	sl
 802912c:	3001      	adds	r0, #1
 802912e:	d09b      	beq.n	8029068 <_printf_i+0x164>
 8029130:	3501      	adds	r5, #1
 8029132:	68e3      	ldr	r3, [r4, #12]
 8029134:	9903      	ldr	r1, [sp, #12]
 8029136:	1a5b      	subs	r3, r3, r1
 8029138:	42ab      	cmp	r3, r5
 802913a:	dcf2      	bgt.n	8029122 <_printf_i+0x21e>
 802913c:	e7eb      	b.n	8029116 <_printf_i+0x212>
 802913e:	2500      	movs	r5, #0
 8029140:	f104 0619 	add.w	r6, r4, #25
 8029144:	e7f5      	b.n	8029132 <_printf_i+0x22e>
 8029146:	bf00      	nop
 8029148:	0802d7c1 	.word	0x0802d7c1
 802914c:	0802d7d2 	.word	0x0802d7d2

08029150 <cleanup_glue>:
 8029150:	b538      	push	{r3, r4, r5, lr}
 8029152:	460c      	mov	r4, r1
 8029154:	6809      	ldr	r1, [r1, #0]
 8029156:	4605      	mov	r5, r0
 8029158:	b109      	cbz	r1, 802915e <cleanup_glue+0xe>
 802915a:	f7ff fff9 	bl	8029150 <cleanup_glue>
 802915e:	4621      	mov	r1, r4
 8029160:	4628      	mov	r0, r5
 8029162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029166:	f7ff bc25 	b.w	80289b4 <_free_r>
	...

0802916c <_reclaim_reent>:
 802916c:	4b2c      	ldr	r3, [pc, #176]	; (8029220 <_reclaim_reent+0xb4>)
 802916e:	681b      	ldr	r3, [r3, #0]
 8029170:	4283      	cmp	r3, r0
 8029172:	b570      	push	{r4, r5, r6, lr}
 8029174:	4604      	mov	r4, r0
 8029176:	d051      	beq.n	802921c <_reclaim_reent+0xb0>
 8029178:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802917a:	b143      	cbz	r3, 802918e <_reclaim_reent+0x22>
 802917c:	68db      	ldr	r3, [r3, #12]
 802917e:	2b00      	cmp	r3, #0
 8029180:	d14a      	bne.n	8029218 <_reclaim_reent+0xac>
 8029182:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029184:	6819      	ldr	r1, [r3, #0]
 8029186:	b111      	cbz	r1, 802918e <_reclaim_reent+0x22>
 8029188:	4620      	mov	r0, r4
 802918a:	f7ff fc13 	bl	80289b4 <_free_r>
 802918e:	6961      	ldr	r1, [r4, #20]
 8029190:	b111      	cbz	r1, 8029198 <_reclaim_reent+0x2c>
 8029192:	4620      	mov	r0, r4
 8029194:	f7ff fc0e 	bl	80289b4 <_free_r>
 8029198:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802919a:	b111      	cbz	r1, 80291a2 <_reclaim_reent+0x36>
 802919c:	4620      	mov	r0, r4
 802919e:	f7ff fc09 	bl	80289b4 <_free_r>
 80291a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80291a4:	b111      	cbz	r1, 80291ac <_reclaim_reent+0x40>
 80291a6:	4620      	mov	r0, r4
 80291a8:	f7ff fc04 	bl	80289b4 <_free_r>
 80291ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80291ae:	b111      	cbz	r1, 80291b6 <_reclaim_reent+0x4a>
 80291b0:	4620      	mov	r0, r4
 80291b2:	f7ff fbff 	bl	80289b4 <_free_r>
 80291b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80291b8:	b111      	cbz	r1, 80291c0 <_reclaim_reent+0x54>
 80291ba:	4620      	mov	r0, r4
 80291bc:	f7ff fbfa 	bl	80289b4 <_free_r>
 80291c0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80291c2:	b111      	cbz	r1, 80291ca <_reclaim_reent+0x5e>
 80291c4:	4620      	mov	r0, r4
 80291c6:	f7ff fbf5 	bl	80289b4 <_free_r>
 80291ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80291cc:	b111      	cbz	r1, 80291d4 <_reclaim_reent+0x68>
 80291ce:	4620      	mov	r0, r4
 80291d0:	f7ff fbf0 	bl	80289b4 <_free_r>
 80291d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80291d6:	b111      	cbz	r1, 80291de <_reclaim_reent+0x72>
 80291d8:	4620      	mov	r0, r4
 80291da:	f7ff fbeb 	bl	80289b4 <_free_r>
 80291de:	69a3      	ldr	r3, [r4, #24]
 80291e0:	b1e3      	cbz	r3, 802921c <_reclaim_reent+0xb0>
 80291e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80291e4:	4620      	mov	r0, r4
 80291e6:	4798      	blx	r3
 80291e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80291ea:	b1b9      	cbz	r1, 802921c <_reclaim_reent+0xb0>
 80291ec:	4620      	mov	r0, r4
 80291ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80291f2:	f7ff bfad 	b.w	8029150 <cleanup_glue>
 80291f6:	5949      	ldr	r1, [r1, r5]
 80291f8:	b941      	cbnz	r1, 802920c <_reclaim_reent+0xa0>
 80291fa:	3504      	adds	r5, #4
 80291fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80291fe:	2d80      	cmp	r5, #128	; 0x80
 8029200:	68d9      	ldr	r1, [r3, #12]
 8029202:	d1f8      	bne.n	80291f6 <_reclaim_reent+0x8a>
 8029204:	4620      	mov	r0, r4
 8029206:	f7ff fbd5 	bl	80289b4 <_free_r>
 802920a:	e7ba      	b.n	8029182 <_reclaim_reent+0x16>
 802920c:	680e      	ldr	r6, [r1, #0]
 802920e:	4620      	mov	r0, r4
 8029210:	f7ff fbd0 	bl	80289b4 <_free_r>
 8029214:	4631      	mov	r1, r6
 8029216:	e7ef      	b.n	80291f8 <_reclaim_reent+0x8c>
 8029218:	2500      	movs	r5, #0
 802921a:	e7ef      	b.n	80291fc <_reclaim_reent+0x90>
 802921c:	bd70      	pop	{r4, r5, r6, pc}
 802921e:	bf00      	nop
 8029220:	200001ec 	.word	0x200001ec

08029224 <_sbrk_r>:
 8029224:	b538      	push	{r3, r4, r5, lr}
 8029226:	4d06      	ldr	r5, [pc, #24]	; (8029240 <_sbrk_r+0x1c>)
 8029228:	2300      	movs	r3, #0
 802922a:	4604      	mov	r4, r0
 802922c:	4608      	mov	r0, r1
 802922e:	602b      	str	r3, [r5, #0]
 8029230:	f7da fd4a 	bl	8003cc8 <_sbrk>
 8029234:	1c43      	adds	r3, r0, #1
 8029236:	d102      	bne.n	802923e <_sbrk_r+0x1a>
 8029238:	682b      	ldr	r3, [r5, #0]
 802923a:	b103      	cbz	r3, 802923e <_sbrk_r+0x1a>
 802923c:	6023      	str	r3, [r4, #0]
 802923e:	bd38      	pop	{r3, r4, r5, pc}
 8029240:	200059f0 	.word	0x200059f0

08029244 <_raise_r>:
 8029244:	291f      	cmp	r1, #31
 8029246:	b538      	push	{r3, r4, r5, lr}
 8029248:	4604      	mov	r4, r0
 802924a:	460d      	mov	r5, r1
 802924c:	d904      	bls.n	8029258 <_raise_r+0x14>
 802924e:	2316      	movs	r3, #22
 8029250:	6003      	str	r3, [r0, #0]
 8029252:	f04f 30ff 	mov.w	r0, #4294967295
 8029256:	bd38      	pop	{r3, r4, r5, pc}
 8029258:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802925a:	b112      	cbz	r2, 8029262 <_raise_r+0x1e>
 802925c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029260:	b94b      	cbnz	r3, 8029276 <_raise_r+0x32>
 8029262:	4620      	mov	r0, r4
 8029264:	f000 f830 	bl	80292c8 <_getpid_r>
 8029268:	462a      	mov	r2, r5
 802926a:	4601      	mov	r1, r0
 802926c:	4620      	mov	r0, r4
 802926e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029272:	f000 b817 	b.w	80292a4 <_kill_r>
 8029276:	2b01      	cmp	r3, #1
 8029278:	d00a      	beq.n	8029290 <_raise_r+0x4c>
 802927a:	1c59      	adds	r1, r3, #1
 802927c:	d103      	bne.n	8029286 <_raise_r+0x42>
 802927e:	2316      	movs	r3, #22
 8029280:	6003      	str	r3, [r0, #0]
 8029282:	2001      	movs	r0, #1
 8029284:	e7e7      	b.n	8029256 <_raise_r+0x12>
 8029286:	2400      	movs	r4, #0
 8029288:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802928c:	4628      	mov	r0, r5
 802928e:	4798      	blx	r3
 8029290:	2000      	movs	r0, #0
 8029292:	e7e0      	b.n	8029256 <_raise_r+0x12>

08029294 <raise>:
 8029294:	4b02      	ldr	r3, [pc, #8]	; (80292a0 <raise+0xc>)
 8029296:	4601      	mov	r1, r0
 8029298:	6818      	ldr	r0, [r3, #0]
 802929a:	f7ff bfd3 	b.w	8029244 <_raise_r>
 802929e:	bf00      	nop
 80292a0:	200001ec 	.word	0x200001ec

080292a4 <_kill_r>:
 80292a4:	b538      	push	{r3, r4, r5, lr}
 80292a6:	4d07      	ldr	r5, [pc, #28]	; (80292c4 <_kill_r+0x20>)
 80292a8:	2300      	movs	r3, #0
 80292aa:	4604      	mov	r4, r0
 80292ac:	4608      	mov	r0, r1
 80292ae:	4611      	mov	r1, r2
 80292b0:	602b      	str	r3, [r5, #0]
 80292b2:	f7da fc81 	bl	8003bb8 <_kill>
 80292b6:	1c43      	adds	r3, r0, #1
 80292b8:	d102      	bne.n	80292c0 <_kill_r+0x1c>
 80292ba:	682b      	ldr	r3, [r5, #0]
 80292bc:	b103      	cbz	r3, 80292c0 <_kill_r+0x1c>
 80292be:	6023      	str	r3, [r4, #0]
 80292c0:	bd38      	pop	{r3, r4, r5, pc}
 80292c2:	bf00      	nop
 80292c4:	200059f0 	.word	0x200059f0

080292c8 <_getpid_r>:
 80292c8:	f7da bc6e 	b.w	8003ba8 <_getpid>

080292cc <__sread>:
 80292cc:	b510      	push	{r4, lr}
 80292ce:	460c      	mov	r4, r1
 80292d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80292d4:	f000 fac8 	bl	8029868 <_read_r>
 80292d8:	2800      	cmp	r0, #0
 80292da:	bfab      	itete	ge
 80292dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80292de:	89a3      	ldrhlt	r3, [r4, #12]
 80292e0:	181b      	addge	r3, r3, r0
 80292e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80292e6:	bfac      	ite	ge
 80292e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80292ea:	81a3      	strhlt	r3, [r4, #12]
 80292ec:	bd10      	pop	{r4, pc}

080292ee <__swrite>:
 80292ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80292f2:	461f      	mov	r7, r3
 80292f4:	898b      	ldrh	r3, [r1, #12]
 80292f6:	05db      	lsls	r3, r3, #23
 80292f8:	4605      	mov	r5, r0
 80292fa:	460c      	mov	r4, r1
 80292fc:	4616      	mov	r6, r2
 80292fe:	d505      	bpl.n	802930c <__swrite+0x1e>
 8029300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029304:	2302      	movs	r3, #2
 8029306:	2200      	movs	r2, #0
 8029308:	f000 fa2a 	bl	8029760 <_lseek_r>
 802930c:	89a3      	ldrh	r3, [r4, #12]
 802930e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8029316:	81a3      	strh	r3, [r4, #12]
 8029318:	4632      	mov	r2, r6
 802931a:	463b      	mov	r3, r7
 802931c:	4628      	mov	r0, r5
 802931e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029322:	f000 b869 	b.w	80293f8 <_write_r>

08029326 <__sseek>:
 8029326:	b510      	push	{r4, lr}
 8029328:	460c      	mov	r4, r1
 802932a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802932e:	f000 fa17 	bl	8029760 <_lseek_r>
 8029332:	1c43      	adds	r3, r0, #1
 8029334:	89a3      	ldrh	r3, [r4, #12]
 8029336:	bf15      	itete	ne
 8029338:	6560      	strne	r0, [r4, #84]	; 0x54
 802933a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802933e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8029342:	81a3      	strheq	r3, [r4, #12]
 8029344:	bf18      	it	ne
 8029346:	81a3      	strhne	r3, [r4, #12]
 8029348:	bd10      	pop	{r4, pc}

0802934a <__sclose>:
 802934a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802934e:	f000 b935 	b.w	80295bc <_close_r>
	...

08029354 <__swbuf_r>:
 8029354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029356:	460e      	mov	r6, r1
 8029358:	4614      	mov	r4, r2
 802935a:	4605      	mov	r5, r0
 802935c:	b118      	cbz	r0, 8029366 <__swbuf_r+0x12>
 802935e:	6983      	ldr	r3, [r0, #24]
 8029360:	b90b      	cbnz	r3, 8029366 <__swbuf_r+0x12>
 8029362:	f7ff fa29 	bl	80287b8 <__sinit>
 8029366:	4b21      	ldr	r3, [pc, #132]	; (80293ec <__swbuf_r+0x98>)
 8029368:	429c      	cmp	r4, r3
 802936a:	d12b      	bne.n	80293c4 <__swbuf_r+0x70>
 802936c:	686c      	ldr	r4, [r5, #4]
 802936e:	69a3      	ldr	r3, [r4, #24]
 8029370:	60a3      	str	r3, [r4, #8]
 8029372:	89a3      	ldrh	r3, [r4, #12]
 8029374:	071a      	lsls	r2, r3, #28
 8029376:	d52f      	bpl.n	80293d8 <__swbuf_r+0x84>
 8029378:	6923      	ldr	r3, [r4, #16]
 802937a:	b36b      	cbz	r3, 80293d8 <__swbuf_r+0x84>
 802937c:	6923      	ldr	r3, [r4, #16]
 802937e:	6820      	ldr	r0, [r4, #0]
 8029380:	1ac0      	subs	r0, r0, r3
 8029382:	6963      	ldr	r3, [r4, #20]
 8029384:	b2f6      	uxtb	r6, r6
 8029386:	4283      	cmp	r3, r0
 8029388:	4637      	mov	r7, r6
 802938a:	dc04      	bgt.n	8029396 <__swbuf_r+0x42>
 802938c:	4621      	mov	r1, r4
 802938e:	4628      	mov	r0, r5
 8029390:	f000 f9aa 	bl	80296e8 <_fflush_r>
 8029394:	bb30      	cbnz	r0, 80293e4 <__swbuf_r+0x90>
 8029396:	68a3      	ldr	r3, [r4, #8]
 8029398:	3b01      	subs	r3, #1
 802939a:	60a3      	str	r3, [r4, #8]
 802939c:	6823      	ldr	r3, [r4, #0]
 802939e:	1c5a      	adds	r2, r3, #1
 80293a0:	6022      	str	r2, [r4, #0]
 80293a2:	701e      	strb	r6, [r3, #0]
 80293a4:	6963      	ldr	r3, [r4, #20]
 80293a6:	3001      	adds	r0, #1
 80293a8:	4283      	cmp	r3, r0
 80293aa:	d004      	beq.n	80293b6 <__swbuf_r+0x62>
 80293ac:	89a3      	ldrh	r3, [r4, #12]
 80293ae:	07db      	lsls	r3, r3, #31
 80293b0:	d506      	bpl.n	80293c0 <__swbuf_r+0x6c>
 80293b2:	2e0a      	cmp	r6, #10
 80293b4:	d104      	bne.n	80293c0 <__swbuf_r+0x6c>
 80293b6:	4621      	mov	r1, r4
 80293b8:	4628      	mov	r0, r5
 80293ba:	f000 f995 	bl	80296e8 <_fflush_r>
 80293be:	b988      	cbnz	r0, 80293e4 <__swbuf_r+0x90>
 80293c0:	4638      	mov	r0, r7
 80293c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80293c4:	4b0a      	ldr	r3, [pc, #40]	; (80293f0 <__swbuf_r+0x9c>)
 80293c6:	429c      	cmp	r4, r3
 80293c8:	d101      	bne.n	80293ce <__swbuf_r+0x7a>
 80293ca:	68ac      	ldr	r4, [r5, #8]
 80293cc:	e7cf      	b.n	802936e <__swbuf_r+0x1a>
 80293ce:	4b09      	ldr	r3, [pc, #36]	; (80293f4 <__swbuf_r+0xa0>)
 80293d0:	429c      	cmp	r4, r3
 80293d2:	bf08      	it	eq
 80293d4:	68ec      	ldreq	r4, [r5, #12]
 80293d6:	e7ca      	b.n	802936e <__swbuf_r+0x1a>
 80293d8:	4621      	mov	r1, r4
 80293da:	4628      	mov	r0, r5
 80293dc:	f000 f81e 	bl	802941c <__swsetup_r>
 80293e0:	2800      	cmp	r0, #0
 80293e2:	d0cb      	beq.n	802937c <__swbuf_r+0x28>
 80293e4:	f04f 37ff 	mov.w	r7, #4294967295
 80293e8:	e7ea      	b.n	80293c0 <__swbuf_r+0x6c>
 80293ea:	bf00      	nop
 80293ec:	0802d76c 	.word	0x0802d76c
 80293f0:	0802d78c 	.word	0x0802d78c
 80293f4:	0802d74c 	.word	0x0802d74c

080293f8 <_write_r>:
 80293f8:	b538      	push	{r3, r4, r5, lr}
 80293fa:	4d07      	ldr	r5, [pc, #28]	; (8029418 <_write_r+0x20>)
 80293fc:	4604      	mov	r4, r0
 80293fe:	4608      	mov	r0, r1
 8029400:	4611      	mov	r1, r2
 8029402:	2200      	movs	r2, #0
 8029404:	602a      	str	r2, [r5, #0]
 8029406:	461a      	mov	r2, r3
 8029408:	f7da fc0d 	bl	8003c26 <_write>
 802940c:	1c43      	adds	r3, r0, #1
 802940e:	d102      	bne.n	8029416 <_write_r+0x1e>
 8029410:	682b      	ldr	r3, [r5, #0]
 8029412:	b103      	cbz	r3, 8029416 <_write_r+0x1e>
 8029414:	6023      	str	r3, [r4, #0]
 8029416:	bd38      	pop	{r3, r4, r5, pc}
 8029418:	200059f0 	.word	0x200059f0

0802941c <__swsetup_r>:
 802941c:	4b32      	ldr	r3, [pc, #200]	; (80294e8 <__swsetup_r+0xcc>)
 802941e:	b570      	push	{r4, r5, r6, lr}
 8029420:	681d      	ldr	r5, [r3, #0]
 8029422:	4606      	mov	r6, r0
 8029424:	460c      	mov	r4, r1
 8029426:	b125      	cbz	r5, 8029432 <__swsetup_r+0x16>
 8029428:	69ab      	ldr	r3, [r5, #24]
 802942a:	b913      	cbnz	r3, 8029432 <__swsetup_r+0x16>
 802942c:	4628      	mov	r0, r5
 802942e:	f7ff f9c3 	bl	80287b8 <__sinit>
 8029432:	4b2e      	ldr	r3, [pc, #184]	; (80294ec <__swsetup_r+0xd0>)
 8029434:	429c      	cmp	r4, r3
 8029436:	d10f      	bne.n	8029458 <__swsetup_r+0x3c>
 8029438:	686c      	ldr	r4, [r5, #4]
 802943a:	89a3      	ldrh	r3, [r4, #12]
 802943c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029440:	0719      	lsls	r1, r3, #28
 8029442:	d42c      	bmi.n	802949e <__swsetup_r+0x82>
 8029444:	06dd      	lsls	r5, r3, #27
 8029446:	d411      	bmi.n	802946c <__swsetup_r+0x50>
 8029448:	2309      	movs	r3, #9
 802944a:	6033      	str	r3, [r6, #0]
 802944c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8029450:	81a3      	strh	r3, [r4, #12]
 8029452:	f04f 30ff 	mov.w	r0, #4294967295
 8029456:	e03e      	b.n	80294d6 <__swsetup_r+0xba>
 8029458:	4b25      	ldr	r3, [pc, #148]	; (80294f0 <__swsetup_r+0xd4>)
 802945a:	429c      	cmp	r4, r3
 802945c:	d101      	bne.n	8029462 <__swsetup_r+0x46>
 802945e:	68ac      	ldr	r4, [r5, #8]
 8029460:	e7eb      	b.n	802943a <__swsetup_r+0x1e>
 8029462:	4b24      	ldr	r3, [pc, #144]	; (80294f4 <__swsetup_r+0xd8>)
 8029464:	429c      	cmp	r4, r3
 8029466:	bf08      	it	eq
 8029468:	68ec      	ldreq	r4, [r5, #12]
 802946a:	e7e6      	b.n	802943a <__swsetup_r+0x1e>
 802946c:	0758      	lsls	r0, r3, #29
 802946e:	d512      	bpl.n	8029496 <__swsetup_r+0x7a>
 8029470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8029472:	b141      	cbz	r1, 8029486 <__swsetup_r+0x6a>
 8029474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029478:	4299      	cmp	r1, r3
 802947a:	d002      	beq.n	8029482 <__swsetup_r+0x66>
 802947c:	4630      	mov	r0, r6
 802947e:	f7ff fa99 	bl	80289b4 <_free_r>
 8029482:	2300      	movs	r3, #0
 8029484:	6363      	str	r3, [r4, #52]	; 0x34
 8029486:	89a3      	ldrh	r3, [r4, #12]
 8029488:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802948c:	81a3      	strh	r3, [r4, #12]
 802948e:	2300      	movs	r3, #0
 8029490:	6063      	str	r3, [r4, #4]
 8029492:	6923      	ldr	r3, [r4, #16]
 8029494:	6023      	str	r3, [r4, #0]
 8029496:	89a3      	ldrh	r3, [r4, #12]
 8029498:	f043 0308 	orr.w	r3, r3, #8
 802949c:	81a3      	strh	r3, [r4, #12]
 802949e:	6923      	ldr	r3, [r4, #16]
 80294a0:	b94b      	cbnz	r3, 80294b6 <__swsetup_r+0x9a>
 80294a2:	89a3      	ldrh	r3, [r4, #12]
 80294a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80294a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80294ac:	d003      	beq.n	80294b6 <__swsetup_r+0x9a>
 80294ae:	4621      	mov	r1, r4
 80294b0:	4630      	mov	r0, r6
 80294b2:	f000 f98d 	bl	80297d0 <__smakebuf_r>
 80294b6:	89a0      	ldrh	r0, [r4, #12]
 80294b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80294bc:	f010 0301 	ands.w	r3, r0, #1
 80294c0:	d00a      	beq.n	80294d8 <__swsetup_r+0xbc>
 80294c2:	2300      	movs	r3, #0
 80294c4:	60a3      	str	r3, [r4, #8]
 80294c6:	6963      	ldr	r3, [r4, #20]
 80294c8:	425b      	negs	r3, r3
 80294ca:	61a3      	str	r3, [r4, #24]
 80294cc:	6923      	ldr	r3, [r4, #16]
 80294ce:	b943      	cbnz	r3, 80294e2 <__swsetup_r+0xc6>
 80294d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80294d4:	d1ba      	bne.n	802944c <__swsetup_r+0x30>
 80294d6:	bd70      	pop	{r4, r5, r6, pc}
 80294d8:	0781      	lsls	r1, r0, #30
 80294da:	bf58      	it	pl
 80294dc:	6963      	ldrpl	r3, [r4, #20]
 80294de:	60a3      	str	r3, [r4, #8]
 80294e0:	e7f4      	b.n	80294cc <__swsetup_r+0xb0>
 80294e2:	2000      	movs	r0, #0
 80294e4:	e7f7      	b.n	80294d6 <__swsetup_r+0xba>
 80294e6:	bf00      	nop
 80294e8:	200001ec 	.word	0x200001ec
 80294ec:	0802d76c 	.word	0x0802d76c
 80294f0:	0802d78c 	.word	0x0802d78c
 80294f4:	0802d74c 	.word	0x0802d74c

080294f8 <__register_exitproc>:
 80294f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80294fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80295b8 <__register_exitproc+0xc0>
 8029500:	4606      	mov	r6, r0
 8029502:	f8d8 0000 	ldr.w	r0, [r8]
 8029506:	461f      	mov	r7, r3
 8029508:	460d      	mov	r5, r1
 802950a:	4691      	mov	r9, r2
 802950c:	f7ff fa29 	bl	8028962 <__retarget_lock_acquire_recursive>
 8029510:	4b25      	ldr	r3, [pc, #148]	; (80295a8 <__register_exitproc+0xb0>)
 8029512:	681c      	ldr	r4, [r3, #0]
 8029514:	b934      	cbnz	r4, 8029524 <__register_exitproc+0x2c>
 8029516:	4c25      	ldr	r4, [pc, #148]	; (80295ac <__register_exitproc+0xb4>)
 8029518:	601c      	str	r4, [r3, #0]
 802951a:	4b25      	ldr	r3, [pc, #148]	; (80295b0 <__register_exitproc+0xb8>)
 802951c:	b113      	cbz	r3, 8029524 <__register_exitproc+0x2c>
 802951e:	681b      	ldr	r3, [r3, #0]
 8029520:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8029524:	6863      	ldr	r3, [r4, #4]
 8029526:	2b1f      	cmp	r3, #31
 8029528:	dd07      	ble.n	802953a <__register_exitproc+0x42>
 802952a:	f8d8 0000 	ldr.w	r0, [r8]
 802952e:	f7ff fa1a 	bl	8028966 <__retarget_lock_release_recursive>
 8029532:	f04f 30ff 	mov.w	r0, #4294967295
 8029536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802953a:	b34e      	cbz	r6, 8029590 <__register_exitproc+0x98>
 802953c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8029540:	b988      	cbnz	r0, 8029566 <__register_exitproc+0x6e>
 8029542:	4b1c      	ldr	r3, [pc, #112]	; (80295b4 <__register_exitproc+0xbc>)
 8029544:	b923      	cbnz	r3, 8029550 <__register_exitproc+0x58>
 8029546:	f8d8 0000 	ldr.w	r0, [r8]
 802954a:	f7ff fa0b 	bl	8028964 <__retarget_lock_release>
 802954e:	e7f0      	b.n	8029532 <__register_exitproc+0x3a>
 8029550:	f44f 7084 	mov.w	r0, #264	; 0x108
 8029554:	f7ff fa08 	bl	8028968 <malloc>
 8029558:	2800      	cmp	r0, #0
 802955a:	d0f4      	beq.n	8029546 <__register_exitproc+0x4e>
 802955c:	2300      	movs	r3, #0
 802955e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8029562:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8029566:	6863      	ldr	r3, [r4, #4]
 8029568:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802956c:	2201      	movs	r2, #1
 802956e:	409a      	lsls	r2, r3
 8029570:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8029574:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8029578:	4313      	orrs	r3, r2
 802957a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802957e:	2e02      	cmp	r6, #2
 8029580:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8029584:	bf02      	ittt	eq
 8029586:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802958a:	4313      	orreq	r3, r2
 802958c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8029590:	6863      	ldr	r3, [r4, #4]
 8029592:	f8d8 0000 	ldr.w	r0, [r8]
 8029596:	1c5a      	adds	r2, r3, #1
 8029598:	3302      	adds	r3, #2
 802959a:	6062      	str	r2, [r4, #4]
 802959c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80295a0:	f7ff f9e1 	bl	8028966 <__retarget_lock_release_recursive>
 80295a4:	2000      	movs	r0, #0
 80295a6:	e7c6      	b.n	8029536 <__register_exitproc+0x3e>
 80295a8:	20005a80 	.word	0x20005a80
 80295ac:	200059f4 	.word	0x200059f4
 80295b0:	0802d7e4 	.word	0x0802d7e4
 80295b4:	08028969 	.word	0x08028969
 80295b8:	20000250 	.word	0x20000250

080295bc <_close_r>:
 80295bc:	b538      	push	{r3, r4, r5, lr}
 80295be:	4d06      	ldr	r5, [pc, #24]	; (80295d8 <_close_r+0x1c>)
 80295c0:	2300      	movs	r3, #0
 80295c2:	4604      	mov	r4, r0
 80295c4:	4608      	mov	r0, r1
 80295c6:	602b      	str	r3, [r5, #0]
 80295c8:	f7da fb49 	bl	8003c5e <_close>
 80295cc:	1c43      	adds	r3, r0, #1
 80295ce:	d102      	bne.n	80295d6 <_close_r+0x1a>
 80295d0:	682b      	ldr	r3, [r5, #0]
 80295d2:	b103      	cbz	r3, 80295d6 <_close_r+0x1a>
 80295d4:	6023      	str	r3, [r4, #0]
 80295d6:	bd38      	pop	{r3, r4, r5, pc}
 80295d8:	200059f0 	.word	0x200059f0

080295dc <__sflush_r>:
 80295dc:	898a      	ldrh	r2, [r1, #12]
 80295de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80295e2:	4605      	mov	r5, r0
 80295e4:	0710      	lsls	r0, r2, #28
 80295e6:	460c      	mov	r4, r1
 80295e8:	d458      	bmi.n	802969c <__sflush_r+0xc0>
 80295ea:	684b      	ldr	r3, [r1, #4]
 80295ec:	2b00      	cmp	r3, #0
 80295ee:	dc05      	bgt.n	80295fc <__sflush_r+0x20>
 80295f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80295f2:	2b00      	cmp	r3, #0
 80295f4:	dc02      	bgt.n	80295fc <__sflush_r+0x20>
 80295f6:	2000      	movs	r0, #0
 80295f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80295fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80295fe:	2e00      	cmp	r6, #0
 8029600:	d0f9      	beq.n	80295f6 <__sflush_r+0x1a>
 8029602:	2300      	movs	r3, #0
 8029604:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8029608:	682f      	ldr	r7, [r5, #0]
 802960a:	602b      	str	r3, [r5, #0]
 802960c:	d032      	beq.n	8029674 <__sflush_r+0x98>
 802960e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8029610:	89a3      	ldrh	r3, [r4, #12]
 8029612:	075a      	lsls	r2, r3, #29
 8029614:	d505      	bpl.n	8029622 <__sflush_r+0x46>
 8029616:	6863      	ldr	r3, [r4, #4]
 8029618:	1ac0      	subs	r0, r0, r3
 802961a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802961c:	b10b      	cbz	r3, 8029622 <__sflush_r+0x46>
 802961e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029620:	1ac0      	subs	r0, r0, r3
 8029622:	2300      	movs	r3, #0
 8029624:	4602      	mov	r2, r0
 8029626:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029628:	6a21      	ldr	r1, [r4, #32]
 802962a:	4628      	mov	r0, r5
 802962c:	47b0      	blx	r6
 802962e:	1c43      	adds	r3, r0, #1
 8029630:	89a3      	ldrh	r3, [r4, #12]
 8029632:	d106      	bne.n	8029642 <__sflush_r+0x66>
 8029634:	6829      	ldr	r1, [r5, #0]
 8029636:	291d      	cmp	r1, #29
 8029638:	d82c      	bhi.n	8029694 <__sflush_r+0xb8>
 802963a:	4a2a      	ldr	r2, [pc, #168]	; (80296e4 <__sflush_r+0x108>)
 802963c:	40ca      	lsrs	r2, r1
 802963e:	07d6      	lsls	r6, r2, #31
 8029640:	d528      	bpl.n	8029694 <__sflush_r+0xb8>
 8029642:	2200      	movs	r2, #0
 8029644:	6062      	str	r2, [r4, #4]
 8029646:	04d9      	lsls	r1, r3, #19
 8029648:	6922      	ldr	r2, [r4, #16]
 802964a:	6022      	str	r2, [r4, #0]
 802964c:	d504      	bpl.n	8029658 <__sflush_r+0x7c>
 802964e:	1c42      	adds	r2, r0, #1
 8029650:	d101      	bne.n	8029656 <__sflush_r+0x7a>
 8029652:	682b      	ldr	r3, [r5, #0]
 8029654:	b903      	cbnz	r3, 8029658 <__sflush_r+0x7c>
 8029656:	6560      	str	r0, [r4, #84]	; 0x54
 8029658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802965a:	602f      	str	r7, [r5, #0]
 802965c:	2900      	cmp	r1, #0
 802965e:	d0ca      	beq.n	80295f6 <__sflush_r+0x1a>
 8029660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029664:	4299      	cmp	r1, r3
 8029666:	d002      	beq.n	802966e <__sflush_r+0x92>
 8029668:	4628      	mov	r0, r5
 802966a:	f7ff f9a3 	bl	80289b4 <_free_r>
 802966e:	2000      	movs	r0, #0
 8029670:	6360      	str	r0, [r4, #52]	; 0x34
 8029672:	e7c1      	b.n	80295f8 <__sflush_r+0x1c>
 8029674:	6a21      	ldr	r1, [r4, #32]
 8029676:	2301      	movs	r3, #1
 8029678:	4628      	mov	r0, r5
 802967a:	47b0      	blx	r6
 802967c:	1c41      	adds	r1, r0, #1
 802967e:	d1c7      	bne.n	8029610 <__sflush_r+0x34>
 8029680:	682b      	ldr	r3, [r5, #0]
 8029682:	2b00      	cmp	r3, #0
 8029684:	d0c4      	beq.n	8029610 <__sflush_r+0x34>
 8029686:	2b1d      	cmp	r3, #29
 8029688:	d001      	beq.n	802968e <__sflush_r+0xb2>
 802968a:	2b16      	cmp	r3, #22
 802968c:	d101      	bne.n	8029692 <__sflush_r+0xb6>
 802968e:	602f      	str	r7, [r5, #0]
 8029690:	e7b1      	b.n	80295f6 <__sflush_r+0x1a>
 8029692:	89a3      	ldrh	r3, [r4, #12]
 8029694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029698:	81a3      	strh	r3, [r4, #12]
 802969a:	e7ad      	b.n	80295f8 <__sflush_r+0x1c>
 802969c:	690f      	ldr	r7, [r1, #16]
 802969e:	2f00      	cmp	r7, #0
 80296a0:	d0a9      	beq.n	80295f6 <__sflush_r+0x1a>
 80296a2:	0793      	lsls	r3, r2, #30
 80296a4:	680e      	ldr	r6, [r1, #0]
 80296a6:	bf08      	it	eq
 80296a8:	694b      	ldreq	r3, [r1, #20]
 80296aa:	600f      	str	r7, [r1, #0]
 80296ac:	bf18      	it	ne
 80296ae:	2300      	movne	r3, #0
 80296b0:	eba6 0807 	sub.w	r8, r6, r7
 80296b4:	608b      	str	r3, [r1, #8]
 80296b6:	f1b8 0f00 	cmp.w	r8, #0
 80296ba:	dd9c      	ble.n	80295f6 <__sflush_r+0x1a>
 80296bc:	6a21      	ldr	r1, [r4, #32]
 80296be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80296c0:	4643      	mov	r3, r8
 80296c2:	463a      	mov	r2, r7
 80296c4:	4628      	mov	r0, r5
 80296c6:	47b0      	blx	r6
 80296c8:	2800      	cmp	r0, #0
 80296ca:	dc06      	bgt.n	80296da <__sflush_r+0xfe>
 80296cc:	89a3      	ldrh	r3, [r4, #12]
 80296ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80296d2:	81a3      	strh	r3, [r4, #12]
 80296d4:	f04f 30ff 	mov.w	r0, #4294967295
 80296d8:	e78e      	b.n	80295f8 <__sflush_r+0x1c>
 80296da:	4407      	add	r7, r0
 80296dc:	eba8 0800 	sub.w	r8, r8, r0
 80296e0:	e7e9      	b.n	80296b6 <__sflush_r+0xda>
 80296e2:	bf00      	nop
 80296e4:	20400001 	.word	0x20400001

080296e8 <_fflush_r>:
 80296e8:	b538      	push	{r3, r4, r5, lr}
 80296ea:	690b      	ldr	r3, [r1, #16]
 80296ec:	4605      	mov	r5, r0
 80296ee:	460c      	mov	r4, r1
 80296f0:	b913      	cbnz	r3, 80296f8 <_fflush_r+0x10>
 80296f2:	2500      	movs	r5, #0
 80296f4:	4628      	mov	r0, r5
 80296f6:	bd38      	pop	{r3, r4, r5, pc}
 80296f8:	b118      	cbz	r0, 8029702 <_fflush_r+0x1a>
 80296fa:	6983      	ldr	r3, [r0, #24]
 80296fc:	b90b      	cbnz	r3, 8029702 <_fflush_r+0x1a>
 80296fe:	f7ff f85b 	bl	80287b8 <__sinit>
 8029702:	4b14      	ldr	r3, [pc, #80]	; (8029754 <_fflush_r+0x6c>)
 8029704:	429c      	cmp	r4, r3
 8029706:	d11b      	bne.n	8029740 <_fflush_r+0x58>
 8029708:	686c      	ldr	r4, [r5, #4]
 802970a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802970e:	2b00      	cmp	r3, #0
 8029710:	d0ef      	beq.n	80296f2 <_fflush_r+0xa>
 8029712:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8029714:	07d0      	lsls	r0, r2, #31
 8029716:	d404      	bmi.n	8029722 <_fflush_r+0x3a>
 8029718:	0599      	lsls	r1, r3, #22
 802971a:	d402      	bmi.n	8029722 <_fflush_r+0x3a>
 802971c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802971e:	f7ff f920 	bl	8028962 <__retarget_lock_acquire_recursive>
 8029722:	4628      	mov	r0, r5
 8029724:	4621      	mov	r1, r4
 8029726:	f7ff ff59 	bl	80295dc <__sflush_r>
 802972a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802972c:	07da      	lsls	r2, r3, #31
 802972e:	4605      	mov	r5, r0
 8029730:	d4e0      	bmi.n	80296f4 <_fflush_r+0xc>
 8029732:	89a3      	ldrh	r3, [r4, #12]
 8029734:	059b      	lsls	r3, r3, #22
 8029736:	d4dd      	bmi.n	80296f4 <_fflush_r+0xc>
 8029738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802973a:	f7ff f914 	bl	8028966 <__retarget_lock_release_recursive>
 802973e:	e7d9      	b.n	80296f4 <_fflush_r+0xc>
 8029740:	4b05      	ldr	r3, [pc, #20]	; (8029758 <_fflush_r+0x70>)
 8029742:	429c      	cmp	r4, r3
 8029744:	d101      	bne.n	802974a <_fflush_r+0x62>
 8029746:	68ac      	ldr	r4, [r5, #8]
 8029748:	e7df      	b.n	802970a <_fflush_r+0x22>
 802974a:	4b04      	ldr	r3, [pc, #16]	; (802975c <_fflush_r+0x74>)
 802974c:	429c      	cmp	r4, r3
 802974e:	bf08      	it	eq
 8029750:	68ec      	ldreq	r4, [r5, #12]
 8029752:	e7da      	b.n	802970a <_fflush_r+0x22>
 8029754:	0802d76c 	.word	0x0802d76c
 8029758:	0802d78c 	.word	0x0802d78c
 802975c:	0802d74c 	.word	0x0802d74c

08029760 <_lseek_r>:
 8029760:	b538      	push	{r3, r4, r5, lr}
 8029762:	4d07      	ldr	r5, [pc, #28]	; (8029780 <_lseek_r+0x20>)
 8029764:	4604      	mov	r4, r0
 8029766:	4608      	mov	r0, r1
 8029768:	4611      	mov	r1, r2
 802976a:	2200      	movs	r2, #0
 802976c:	602a      	str	r2, [r5, #0]
 802976e:	461a      	mov	r2, r3
 8029770:	f7da fa9c 	bl	8003cac <_lseek>
 8029774:	1c43      	adds	r3, r0, #1
 8029776:	d102      	bne.n	802977e <_lseek_r+0x1e>
 8029778:	682b      	ldr	r3, [r5, #0]
 802977a:	b103      	cbz	r3, 802977e <_lseek_r+0x1e>
 802977c:	6023      	str	r3, [r4, #0]
 802977e:	bd38      	pop	{r3, r4, r5, pc}
 8029780:	200059f0 	.word	0x200059f0

08029784 <__swhatbuf_r>:
 8029784:	b570      	push	{r4, r5, r6, lr}
 8029786:	460e      	mov	r6, r1
 8029788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802978c:	2900      	cmp	r1, #0
 802978e:	b096      	sub	sp, #88	; 0x58
 8029790:	4614      	mov	r4, r2
 8029792:	461d      	mov	r5, r3
 8029794:	da08      	bge.n	80297a8 <__swhatbuf_r+0x24>
 8029796:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802979a:	2200      	movs	r2, #0
 802979c:	602a      	str	r2, [r5, #0]
 802979e:	061a      	lsls	r2, r3, #24
 80297a0:	d410      	bmi.n	80297c4 <__swhatbuf_r+0x40>
 80297a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80297a6:	e00e      	b.n	80297c6 <__swhatbuf_r+0x42>
 80297a8:	466a      	mov	r2, sp
 80297aa:	f000 f86f 	bl	802988c <_fstat_r>
 80297ae:	2800      	cmp	r0, #0
 80297b0:	dbf1      	blt.n	8029796 <__swhatbuf_r+0x12>
 80297b2:	9a01      	ldr	r2, [sp, #4]
 80297b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80297b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80297bc:	425a      	negs	r2, r3
 80297be:	415a      	adcs	r2, r3
 80297c0:	602a      	str	r2, [r5, #0]
 80297c2:	e7ee      	b.n	80297a2 <__swhatbuf_r+0x1e>
 80297c4:	2340      	movs	r3, #64	; 0x40
 80297c6:	2000      	movs	r0, #0
 80297c8:	6023      	str	r3, [r4, #0]
 80297ca:	b016      	add	sp, #88	; 0x58
 80297cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080297d0 <__smakebuf_r>:
 80297d0:	898b      	ldrh	r3, [r1, #12]
 80297d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80297d4:	079d      	lsls	r5, r3, #30
 80297d6:	4606      	mov	r6, r0
 80297d8:	460c      	mov	r4, r1
 80297da:	d507      	bpl.n	80297ec <__smakebuf_r+0x1c>
 80297dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80297e0:	6023      	str	r3, [r4, #0]
 80297e2:	6123      	str	r3, [r4, #16]
 80297e4:	2301      	movs	r3, #1
 80297e6:	6163      	str	r3, [r4, #20]
 80297e8:	b002      	add	sp, #8
 80297ea:	bd70      	pop	{r4, r5, r6, pc}
 80297ec:	ab01      	add	r3, sp, #4
 80297ee:	466a      	mov	r2, sp
 80297f0:	f7ff ffc8 	bl	8029784 <__swhatbuf_r>
 80297f4:	9900      	ldr	r1, [sp, #0]
 80297f6:	4605      	mov	r5, r0
 80297f8:	4630      	mov	r0, r6
 80297fa:	f7ff f947 	bl	8028a8c <_malloc_r>
 80297fe:	b948      	cbnz	r0, 8029814 <__smakebuf_r+0x44>
 8029800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029804:	059a      	lsls	r2, r3, #22
 8029806:	d4ef      	bmi.n	80297e8 <__smakebuf_r+0x18>
 8029808:	f023 0303 	bic.w	r3, r3, #3
 802980c:	f043 0302 	orr.w	r3, r3, #2
 8029810:	81a3      	strh	r3, [r4, #12]
 8029812:	e7e3      	b.n	80297dc <__smakebuf_r+0xc>
 8029814:	4b0d      	ldr	r3, [pc, #52]	; (802984c <__smakebuf_r+0x7c>)
 8029816:	62b3      	str	r3, [r6, #40]	; 0x28
 8029818:	89a3      	ldrh	r3, [r4, #12]
 802981a:	6020      	str	r0, [r4, #0]
 802981c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029820:	81a3      	strh	r3, [r4, #12]
 8029822:	9b00      	ldr	r3, [sp, #0]
 8029824:	6163      	str	r3, [r4, #20]
 8029826:	9b01      	ldr	r3, [sp, #4]
 8029828:	6120      	str	r0, [r4, #16]
 802982a:	b15b      	cbz	r3, 8029844 <__smakebuf_r+0x74>
 802982c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029830:	4630      	mov	r0, r6
 8029832:	f000 f83d 	bl	80298b0 <_isatty_r>
 8029836:	b128      	cbz	r0, 8029844 <__smakebuf_r+0x74>
 8029838:	89a3      	ldrh	r3, [r4, #12]
 802983a:	f023 0303 	bic.w	r3, r3, #3
 802983e:	f043 0301 	orr.w	r3, r3, #1
 8029842:	81a3      	strh	r3, [r4, #12]
 8029844:	89a0      	ldrh	r0, [r4, #12]
 8029846:	4305      	orrs	r5, r0
 8029848:	81a5      	strh	r5, [r4, #12]
 802984a:	e7cd      	b.n	80297e8 <__smakebuf_r+0x18>
 802984c:	08028751 	.word	0x08028751

08029850 <__malloc_lock>:
 8029850:	4801      	ldr	r0, [pc, #4]	; (8029858 <__malloc_lock+0x8>)
 8029852:	f7ff b886 	b.w	8028962 <__retarget_lock_acquire_recursive>
 8029856:	bf00      	nop
 8029858:	200058dd 	.word	0x200058dd

0802985c <__malloc_unlock>:
 802985c:	4801      	ldr	r0, [pc, #4]	; (8029864 <__malloc_unlock+0x8>)
 802985e:	f7ff b882 	b.w	8028966 <__retarget_lock_release_recursive>
 8029862:	bf00      	nop
 8029864:	200058dd 	.word	0x200058dd

08029868 <_read_r>:
 8029868:	b538      	push	{r3, r4, r5, lr}
 802986a:	4d07      	ldr	r5, [pc, #28]	; (8029888 <_read_r+0x20>)
 802986c:	4604      	mov	r4, r0
 802986e:	4608      	mov	r0, r1
 8029870:	4611      	mov	r1, r2
 8029872:	2200      	movs	r2, #0
 8029874:	602a      	str	r2, [r5, #0]
 8029876:	461a      	mov	r2, r3
 8029878:	f7da f9b8 	bl	8003bec <_read>
 802987c:	1c43      	adds	r3, r0, #1
 802987e:	d102      	bne.n	8029886 <_read_r+0x1e>
 8029880:	682b      	ldr	r3, [r5, #0]
 8029882:	b103      	cbz	r3, 8029886 <_read_r+0x1e>
 8029884:	6023      	str	r3, [r4, #0]
 8029886:	bd38      	pop	{r3, r4, r5, pc}
 8029888:	200059f0 	.word	0x200059f0

0802988c <_fstat_r>:
 802988c:	b538      	push	{r3, r4, r5, lr}
 802988e:	4d07      	ldr	r5, [pc, #28]	; (80298ac <_fstat_r+0x20>)
 8029890:	2300      	movs	r3, #0
 8029892:	4604      	mov	r4, r0
 8029894:	4608      	mov	r0, r1
 8029896:	4611      	mov	r1, r2
 8029898:	602b      	str	r3, [r5, #0]
 802989a:	f7da f9ec 	bl	8003c76 <_fstat>
 802989e:	1c43      	adds	r3, r0, #1
 80298a0:	d102      	bne.n	80298a8 <_fstat_r+0x1c>
 80298a2:	682b      	ldr	r3, [r5, #0]
 80298a4:	b103      	cbz	r3, 80298a8 <_fstat_r+0x1c>
 80298a6:	6023      	str	r3, [r4, #0]
 80298a8:	bd38      	pop	{r3, r4, r5, pc}
 80298aa:	bf00      	nop
 80298ac:	200059f0 	.word	0x200059f0

080298b0 <_isatty_r>:
 80298b0:	b538      	push	{r3, r4, r5, lr}
 80298b2:	4d06      	ldr	r5, [pc, #24]	; (80298cc <_isatty_r+0x1c>)
 80298b4:	2300      	movs	r3, #0
 80298b6:	4604      	mov	r4, r0
 80298b8:	4608      	mov	r0, r1
 80298ba:	602b      	str	r3, [r5, #0]
 80298bc:	f7da f9eb 	bl	8003c96 <_isatty>
 80298c0:	1c43      	adds	r3, r0, #1
 80298c2:	d102      	bne.n	80298ca <_isatty_r+0x1a>
 80298c4:	682b      	ldr	r3, [r5, #0]
 80298c6:	b103      	cbz	r3, 80298ca <_isatty_r+0x1a>
 80298c8:	6023      	str	r3, [r4, #0]
 80298ca:	bd38      	pop	{r3, r4, r5, pc}
 80298cc:	200059f0 	.word	0x200059f0

080298d0 <_init>:
 80298d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80298d2:	bf00      	nop
 80298d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80298d6:	bc08      	pop	{r3}
 80298d8:	469e      	mov	lr, r3
 80298da:	4770      	bx	lr

080298dc <_fini>:
 80298dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80298de:	bf00      	nop
 80298e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80298e2:	bc08      	pop	{r3}
 80298e4:	469e      	mov	lr, r3
 80298e6:	4770      	bx	lr
