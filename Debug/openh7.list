
openh7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f538  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800f7d8  0800f7d8  0001f7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f90c  0800f90c  0001f90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f914  0800f914  0001f914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f918  0800f918  0001f918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000168  20000000  0800f91c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004ee8  20000168  0800fa84  00020168  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20005050  0800fa84  00025050  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004b299  00000000  00000000  00020196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000073ca  00000000  00000000  0006b42f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026b8  00000000  00000000  00072800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002488  00000000  00000000  00074eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003fa59  00000000  00000000  00077340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030149  00000000  00000000  000b6d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018f578  00000000  00000000  000e6ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0027645a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a380  00000000  00000000  002764b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000168 	.word	0x20000168
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f7c0 	.word	0x0800f7c0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000016c 	.word	0x2000016c
 80002dc:	0800f7c0 	.word	0x0800f7c0

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
 80005ec:	615a      	str	r2, [r3, #20]
 80005ee:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80005f0:	4b29      	ldr	r3, [pc, #164]	; (8000698 <MX_ADC3_Init+0xc0>)
 80005f2:	4a2a      	ldr	r2, [pc, #168]	; (800069c <MX_ADC3_Init+0xc4>)
 80005f4:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80005f6:	4b28      	ldr	r3, [pc, #160]	; (8000698 <MX_ADC3_Init+0xc0>)
 80005f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80005fc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80005fe:	4b26      	ldr	r3, [pc, #152]	; (8000698 <MX_ADC3_Init+0xc0>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000604:	4b24      	ldr	r3, [pc, #144]	; (8000698 <MX_ADC3_Init+0xc0>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <MX_ADC3_Init+0xc0>)
 800060c:	2204      	movs	r2, #4
 800060e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000610:	4b21      	ldr	r3, [pc, #132]	; (8000698 <MX_ADC3_Init+0xc0>)
 8000612:	2200      	movs	r2, #0
 8000614:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000616:	4b20      	ldr	r3, [pc, #128]	; (8000698 <MX_ADC3_Init+0xc0>)
 8000618:	2201      	movs	r2, #1
 800061a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800061c:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <MX_ADC3_Init+0xc0>)
 800061e:	2201      	movs	r2, #1
 8000620:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_ADC3_Init+0xc0>)
 8000624:	2200      	movs	r2, #0
 8000626:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <MX_ADC3_Init+0xc0>)
 800062a:	2200      	movs	r2, #0
 800062c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_ADC3_Init+0xc0>)
 8000630:	2200      	movs	r2, #0
 8000632:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_ADC3_Init+0xc0>)
 8000636:	2200      	movs	r2, #0
 8000638:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800063a:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_ADC3_Init+0xc0>)
 800063c:	2200      	movs	r2, #0
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_ADC3_Init+0xc0>)
 8000642:	2200      	movs	r2, #0
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000646:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_ADC3_Init+0xc0>)
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800064e:	4812      	ldr	r0, [pc, #72]	; (8000698 <MX_ADC3_Init+0xc0>)
 8000650:	f004 f8b0 	bl	80047b4 <HAL_ADC_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800065a:	f002 ffdd 	bl	8003618 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_ADC3_Init+0xc8>)
 8000660:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000662:	2306      	movs	r3, #6
 8000664:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000666:	2306      	movs	r3, #6
 8000668:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800066a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800066e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000670:	2304      	movs	r3, #4
 8000672:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000678:	2300      	movs	r3, #0
 800067a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_ADC3_Init+0xc0>)
 8000682:	f004 fc03 	bl	8004e8c <HAL_ADC_ConfigChannel>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 800068c:	f002 ffc4 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20004b44 	.word	0x20004b44
 800069c:	58026000 	.word	0x58026000
 80006a0:	cb840000 	.word	0xcb840000

080006a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b0b2      	sub	sp, #200	; 0xc8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	22bc      	movs	r2, #188	; 0xbc
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f00f f87b 	bl	800f7b0 <memset>
  if(adcHandle->Instance==ADC3)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a1b      	ldr	r2, [pc, #108]	; (800072c <HAL_ADC_MspInit+0x88>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d12f      	bne.n	8000724 <HAL_ADC_MspInit+0x80>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80006c8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 80006ce:	2312      	movs	r3, #18
 80006d0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80006de:	23c0      	movs	r3, #192	; 0xc0
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80006e2:	2320      	movs	r3, #32
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 80006e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80006ec:	2300      	movs	r3, #0
 80006ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	4618      	mov	r0, r3
 80006f8:	f007 f8f6 	bl	80078e8 <HAL_RCCEx_PeriphCLKConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <HAL_ADC_MspInit+0x62>
    {
      Error_Handler();
 8000702:	f002 ff89 	bl	8003618 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <HAL_ADC_MspInit+0x8c>)
 8000708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070c:	4a08      	ldr	r2, [pc, #32]	; (8000730 <HAL_ADC_MspInit+0x8c>)
 800070e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000712:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_ADC_MspInit+0x8c>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000724:	bf00      	nop
 8000726:	37c8      	adds	r7, #200	; 0xc8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	58026000 	.word	0x58026000
 8000730:	58024400 	.word	0x58024400

08000734 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_CRC_Init+0x3c>)
 800073a:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <MX_CRC_Init+0x40>)
 800073c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_CRC_Init+0x3c>)
 8000740:	2200      	movs	r2, #0
 8000742:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_CRC_Init+0x3c>)
 8000746:	2200      	movs	r2, #0
 8000748:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_CRC_Init+0x3c>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_CRC_Init+0x3c>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_CRC_Init+0x3c>)
 8000758:	2201      	movs	r2, #1
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_CRC_Init+0x3c>)
 800075e:	f005 f959 	bl	8005a14 <HAL_CRC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000768:	f002 ff56 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20004ba8 	.word	0x20004ba8
 8000774:	58024c00 	.word	0x58024c00

08000778 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <HAL_CRC_MspInit+0x3c>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d10e      	bne.n	80007a8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <HAL_CRC_MspInit+0x40>)
 800078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000790:	4a09      	ldr	r2, [pc, #36]	; (80007b8 <HAL_CRC_MspInit+0x40>)
 8000792:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000796:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800079a:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <HAL_CRC_MspInit+0x40>)
 800079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	58024c00 	.word	0x58024c00
 80007b8:	58024400 	.word	0x58024400

080007bc <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_DMA2D_Init+0x6c>)
 80007c2:	4a1a      	ldr	r2, [pc, #104]	; (800082c <MX_DMA2D_Init+0x70>)
 80007c4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_DMA2D_Init+0x6c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_DMA2D_Init+0x6c>)
 80007ce:	2202      	movs	r2, #2
 80007d0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_DMA2D_Init+0x6c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_DMA2D_Init+0x6c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_DMA2D_Init+0x6c>)
 80007e0:	2202      	movs	r2, #2
 80007e2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_DMA2D_Init+0x6c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_DMA2D_Init+0x6c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_DMA2D_Init+0x6c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_DMA2D_Init+0x6c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_DMA2D_Init+0x6c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000802:	4809      	ldr	r0, [pc, #36]	; (8000828 <MX_DMA2D_Init+0x6c>)
 8000804:	f005 f9f0 	bl	8005be8 <HAL_DMA2D_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800080e:	f002 ff03 	bl	8003618 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000812:	2101      	movs	r1, #1
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_DMA2D_Init+0x6c>)
 8000816:	f005 fa4b 	bl	8005cb0 <HAL_DMA2D_ConfigLayer>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000820:	f002 fefa 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20004bcc 	.word	0x20004bcc
 800082c:	52001000 	.word	0x52001000

08000830 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a0b      	ldr	r2, [pc, #44]	; (800086c <HAL_DMA2D_MspInit+0x3c>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d10e      	bne.n	8000860 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <HAL_DMA2D_MspInit+0x40>)
 8000844:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000848:	4a09      	ldr	r2, [pc, #36]	; (8000870 <HAL_DMA2D_MspInit+0x40>)
 800084a:	f043 0310 	orr.w	r3, r3, #16
 800084e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000852:	4b07      	ldr	r3, [pc, #28]	; (8000870 <HAL_DMA2D_MspInit+0x40>)
 8000854:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000858:	f003 0310 	and.w	r3, r3, #16
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	52001000 	.word	0x52001000
 8000870:	58024400 	.word	0x58024400

08000874 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000878:	4a14      	ldr	r2, [pc, #80]	; (80008cc <MX_FREERTOS_Init+0x58>)
 800087a:	2100      	movs	r1, #0
 800087c:	4814      	ldr	r0, [pc, #80]	; (80008d0 <MX_FREERTOS_Init+0x5c>)
 800087e:	f00c fa53 	bl	800cd28 <osThreadNew>
 8000882:	4603      	mov	r3, r0
 8000884:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <MX_FREERTOS_Init+0x60>)
 8000886:	6013      	str	r3, [r2, #0]

  /* creation of Stepper */
  StepperHandle = osThreadNew(Stepper_motor, NULL, &Stepper_attributes);
 8000888:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <MX_FREERTOS_Init+0x64>)
 800088a:	2100      	movs	r1, #0
 800088c:	4813      	ldr	r0, [pc, #76]	; (80008dc <MX_FREERTOS_Init+0x68>)
 800088e:	f00c fa4b 	bl	800cd28 <osThreadNew>
 8000892:	4603      	mov	r3, r0
 8000894:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <MX_FREERTOS_Init+0x6c>)
 8000896:	6013      	str	r3, [r2, #0]

  /* creation of Connectivity */
  ConnectivityHandle = osThreadNew(Cloud_Connectivity, NULL, &Connectivity_attributes);
 8000898:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <MX_FREERTOS_Init+0x70>)
 800089a:	2100      	movs	r1, #0
 800089c:	4812      	ldr	r0, [pc, #72]	; (80008e8 <MX_FREERTOS_Init+0x74>)
 800089e:	f00c fa43 	bl	800cd28 <osThreadNew>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4a11      	ldr	r2, [pc, #68]	; (80008ec <MX_FREERTOS_Init+0x78>)
 80008a6:	6013      	str	r3, [r2, #0]

  /* creation of Sensors */
  SensorsHandle = osThreadNew(Sensors_measurements, NULL, &Sensors_attributes);
 80008a8:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <MX_FREERTOS_Init+0x7c>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	4811      	ldr	r0, [pc, #68]	; (80008f4 <MX_FREERTOS_Init+0x80>)
 80008ae:	f00c fa3b 	bl	800cd28 <osThreadNew>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <MX_FREERTOS_Init+0x84>)
 80008b6:	6013      	str	r3, [r2, #0]

  /* creation of IHM */
  IHMHandle = osThreadNew(Interface, NULL, &IHM_attributes);
 80008b8:	4a10      	ldr	r2, [pc, #64]	; (80008fc <MX_FREERTOS_Init+0x88>)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4810      	ldr	r0, [pc, #64]	; (8000900 <MX_FREERTOS_Init+0x8c>)
 80008be:	f00c fa33 	bl	800cd28 <osThreadNew>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a0f      	ldr	r2, [pc, #60]	; (8000904 <MX_FREERTOS_Init+0x90>)
 80008c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	0800f820 	.word	0x0800f820
 80008d0:	08000909 	.word	0x08000909
 80008d4:	20004c3c 	.word	0x20004c3c
 80008d8:	0800f844 	.word	0x0800f844
 80008dc:	08000919 	.word	0x08000919
 80008e0:	20004c38 	.word	0x20004c38
 80008e4:	0800f868 	.word	0x0800f868
 80008e8:	08000971 	.word	0x08000971
 80008ec:	20004c48 	.word	0x20004c48
 80008f0:	0800f88c 	.word	0x0800f88c
 80008f4:	08000981 	.word	0x08000981
 80008f8:	20004c40 	.word	0x20004c40
 80008fc:	0800f8b0 	.word	0x0800f8b0
 8000900:	080009e9 	.word	0x080009e9
 8000904:	20004c34 	.word	0x20004c34

08000908 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f00c fa9b 	bl	800ce4c <osDelay>
 8000916:	e7fb      	b.n	8000910 <StartDefaultTask+0x8>

08000918 <Stepper_motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Stepper_motor */
void Stepper_motor(void *argument)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Stepper_motor */
	BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 8000920:	4812      	ldr	r0, [pc, #72]	; (800096c <Stepper_motor+0x54>)
 8000922:	f002 fe97 	bl	8003654 <BSP_MotorControl_AttachFlagInterrupt>
  /* Infinite loop */
  for(;;)
  {
	L6474_SetMaxSpeed(0, 100);
 8000926:	2164      	movs	r1, #100	; 0x64
 8000928:	2000      	movs	r0, #0
 800092a:	f001 fa73 	bl	8001e14 <L6474_SetMaxSpeed>
	L6474_SetMinSpeed(0, 100);
 800092e:	2164      	movs	r1, #100	; 0x64
 8000930:	2000      	movs	r0, #0
 8000932:	f001 fabb 	bl	8001eac <L6474_SetMinSpeed>
	L6474_Move(0, BACKWARD, 16000);
 8000936:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800093a:	2100      	movs	r1, #0
 800093c:	2000      	movs	r0, #0
 800093e:	f000 ff4b 	bl	80017d8 <L6474_Move>
	L6474_WaitWhileActive(0);
 8000942:	2000      	movs	r0, #0
 8000944:	f001 fb40 	bl	8001fc8 <L6474_WaitWhileActive>
	osDelay(1000);
 8000948:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800094c:	f00c fa7e 	bl	800ce4c <osDelay>
	L6474_Move(0, FORWARD, 16000);
 8000950:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000954:	2101      	movs	r1, #1
 8000956:	2000      	movs	r0, #0
 8000958:	f000 ff3e 	bl	80017d8 <L6474_Move>
	L6474_WaitWhileActive(0);
 800095c:	2000      	movs	r0, #0
 800095e:	f001 fb33 	bl	8001fc8 <L6474_WaitWhileActive>
	osDelay(1000);
 8000962:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000966:	f00c fa71 	bl	800ce4c <osDelay>
	L6474_SetMaxSpeed(0, 100);
 800096a:	e7dc      	b.n	8000926 <Stepper_motor+0xe>
 800096c:	080035dd 	.word	0x080035dd

08000970 <Cloud_Connectivity>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Cloud_Connectivity */
void Cloud_Connectivity(void *argument)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Cloud_Connectivity */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000978:	2001      	movs	r0, #1
 800097a:	f00c fa67 	bl	800ce4c <osDelay>
 800097e:	e7fb      	b.n	8000978 <Cloud_Connectivity+0x8>

08000980 <Sensors_measurements>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensors_measurements */
void Sensors_measurements(void *argument)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	uint16_t readValue;

  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_PollForConversion(&hadc3, 10000);
 8000988:	f242 7110 	movw	r1, #10000	; 0x2710
 800098c:	4814      	ldr	r0, [pc, #80]	; (80009e0 <Sensors_measurements+0x60>)
 800098e:	f004 f97b 	bl	8004c88 <HAL_ADC_PollForConversion>
	  readValue = HAL_ADC_GetValue(&hadc3);
 8000992:	4813      	ldr	r0, [pc, #76]	; (80009e0 <Sensors_measurements+0x60>)
 8000994:	f004 fa6c 	bl	8004e70 <HAL_ADC_GetValue>
 8000998:	4603      	mov	r3, r0
 800099a:	81fb      	strh	r3, [r7, #14]
	  tCelsius = 357.558 - 0.187364 * readValue;
 800099c:	89fb      	ldrh	r3, [r7, #14]
 800099e:	ee07 3a90 	vmov	s15, r3
 80009a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009a6:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 80009d0 <Sensors_measurements+0x50>
 80009aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009ae:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 80009d8 <Sensors_measurements+0x58>
 80009b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80009b6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80009ba:	ee17 2a90 	vmov	r2, s15
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <Sensors_measurements+0x64>)
 80009c0:	601a      	str	r2, [r3, #0]
	  osDelay(1000);
 80009c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c6:	f00c fa41 	bl	800ce4c <osDelay>
	  HAL_ADC_PollForConversion(&hadc3, 10000);
 80009ca:	e7dd      	b.n	8000988 <Sensors_measurements+0x8>
 80009cc:	f3af 8000 	nop.w
 80009d0:	26394fad 	.word	0x26394fad
 80009d4:	3fc7fb8b 	.word	0x3fc7fb8b
 80009d8:	916872b0 	.word	0x916872b0
 80009dc:	407658ed 	.word	0x407658ed
 80009e0:	20004b44 	.word	0x20004b44
 80009e4:	20004c44 	.word	0x20004c44

080009e8 <Interface>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Interface */
void Interface(void *argument)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Interface */
  /* Infinite loop */
  for(;;)
 80009f0:	e7fe      	b.n	80009f0 <Interface+0x8>
	...

080009f4 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PA15 (JTDI)   ------> S_TIM2_CH1
*/
void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08e      	sub	sp, #56	; 0x38
 80009f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a0a:	4b68      	ldr	r3, [pc, #416]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	4a66      	ldr	r2, [pc, #408]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1a:	4b64      	ldr	r3, [pc, #400]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a20:	f003 0310 	and.w	r3, r3, #16
 8000a24:	623b      	str	r3, [r7, #32]
 8000a26:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a28:	4b60      	ldr	r3, [pc, #384]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2e:	4a5f      	ldr	r2, [pc, #380]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a38:	4b5c      	ldr	r3, [pc, #368]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a42:	61fb      	str	r3, [r7, #28]
 8000a44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a46:	4b59      	ldr	r3, [pc, #356]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	4a57      	ldr	r2, [pc, #348]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000a4e:	f043 0320 	orr.w	r3, r3, #32
 8000a52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a56:	4b55      	ldr	r3, [pc, #340]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5c:	f003 0320 	and.w	r3, r3, #32
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a64:	4b51      	ldr	r3, [pc, #324]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6a:	4a50      	ldr	r2, [pc, #320]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a74:	4b4d      	ldr	r3, [pc, #308]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b4a      	ldr	r3, [pc, #296]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a88:	4a48      	ldr	r2, [pc, #288]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a92:	4b46      	ldr	r3, [pc, #280]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	4b42      	ldr	r3, [pc, #264]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa6:	4a41      	ldr	r2, [pc, #260]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b3b      	ldr	r3, [pc, #236]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac4:	4a39      	ldr	r2, [pc, #228]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ace:	4b37      	ldr	r3, [pc, #220]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000adc:	4b33      	ldr	r3, [pc, #204]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae2:	4a32      	ldr	r2, [pc, #200]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aec:	4b2f      	ldr	r3, [pc, #188]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	4a2a      	ldr	r2, [pc, #168]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000b02:	f043 0308 	orr.w	r3, r3, #8
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0a:	4b28      	ldr	r3, [pc, #160]	; (8000bac <MX_GPIO_Init+0x1b8>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	f003 0308 	and.w	r3, r3, #8
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, STBY_RST_Pin|DIR1_Pin, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000b1e:	4824      	ldr	r0, [pc, #144]	; (8000bb0 <MX_GPIO_Init+0x1bc>)
 8000b20:	f005 fb2a 	bl	8006178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	21c0      	movs	r1, #192	; 0xc0
 8000b28:	4822      	ldr	r0, [pc, #136]	; (8000bb4 <MX_GPIO_Init+0x1c0>)
 8000b2a:	f005 fb25 	bl	8006178 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = STBY_RST_Pin|DIR1_Pin;
 8000b2e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	481a      	ldr	r0, [pc, #104]	; (8000bb0 <MX_GPIO_Init+0x1bc>)
 8000b48:	f005 f966 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLAG_Pin;
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(FLAG_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4816      	ldr	r0, [pc, #88]	; (8000bb8 <MX_GPIO_Init+0x1c4>)
 8000b60:	f005 f95a 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b76:	2301      	movs	r3, #1
 8000b78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480e      	ldr	r0, [pc, #56]	; (8000bbc <MX_GPIO_Init+0x1c8>)
 8000b82:	f005 f949 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000b86:	23c0      	movs	r3, #192	; 0xc0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_GPIO_Init+0x1c0>)
 8000b9e:	f005 f93b 	bl	8005e18 <HAL_GPIO_Init>

}
 8000ba2:	bf00      	nop
 8000ba4:	3738      	adds	r7, #56	; 0x38
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	58024400 	.word	0x58024400
 8000bb0:	58022000 	.word	0x58022000
 8000bb4:	58020400 	.word	0x58020400
 8000bb8:	58021c00 	.word	0x58021c00
 8000bbc:	58020000 	.word	0x58020000

08000bc0 <MX_I2C1_SMBUS_Init>:
SMBUS_HandleTypeDef hsmbus1;

/* I2C1 init function */

void MX_I2C1_SMBUS_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_I2C1_SMBUS_Init+0x7c>)
 8000bc6:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <MX_I2C1_SMBUS_Init+0x80>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x10C0ECFF;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_I2C1_SMBUS_Init+0x7c>)
 8000bcc:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <MX_I2C1_SMBUS_Init+0x84>)
 8000bce:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_I2C1_SMBUS_Init+0x7c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_I2C1_SMBUS_Init+0x7c>)
 8000bd8:	2202      	movs	r2, #2
 8000bda:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <MX_I2C1_SMBUS_Init+0x7c>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MX_I2C1_SMBUS_Init+0x7c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_I2C1_SMBUS_Init+0x7c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <MX_I2C1_SMBUS_Init+0x7c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_I2C1_SMBUS_Init+0x7c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <MX_I2C1_SMBUS_Init+0x7c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_I2C1_SMBUS_Init+0x7c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <MX_I2C1_SMBUS_Init+0x7c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x000084C4;
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <MX_I2C1_SMBUS_Init+0x7c>)
 8000c0e:	f248 42c4 	movw	r2, #33988	; 0x84c4
 8000c12:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000c14:	4809      	ldr	r0, [pc, #36]	; (8000c3c <MX_I2C1_SMBUS_Init+0x7c>)
 8000c16:	f008 ffed 	bl	8009bf4 <HAL_SMBUS_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000c20:	f002 fcfa 	bl	8003618 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_SMBUS_ConfigDigitalFilter(&hsmbus1, 0) != HAL_OK)
 8000c24:	2100      	movs	r1, #0
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_I2C1_SMBUS_Init+0x7c>)
 8000c28:	f009 f89c 	bl	8009d64 <HAL_SMBUS_ConfigDigitalFilter>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_I2C1_SMBUS_Init+0x76>
  {
    Error_Handler();
 8000c32:	f002 fcf1 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20004c4c 	.word	0x20004c4c
 8000c40:	40005400 	.word	0x40005400
 8000c44:	10c0ecff 	.word	0x10c0ecff

08000c48 <HAL_SMBUS_MspInit>:

void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* smbusHandle)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b0b8      	sub	sp, #224	; 0xe0
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	22bc      	movs	r2, #188	; 0xbc
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f00e fda1 	bl	800f7b0 <memset>
  if(smbusHandle->Instance==I2C1)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a25      	ldr	r2, [pc, #148]	; (8000d08 <HAL_SMBUS_MspInit+0xc0>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d142      	bne.n	8000cfe <HAL_SMBUS_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c82:	f107 0310 	add.w	r3, r7, #16
 8000c86:	4618      	mov	r0, r3
 8000c88:	f006 fe2e 	bl	80078e8 <HAL_RCCEx_PeriphCLKConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_SMBUS_MspInit+0x4e>
    {
      Error_Handler();
 8000c92:	f002 fcc1 	bl	8003618 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <HAL_SMBUS_MspInit+0xc4>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	; (8000d0c <HAL_SMBUS_MspInit+0xc4>)
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_SMBUS_MspInit+0xc4>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cbc:	2312      	movs	r3, #18
 8000cbe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480d      	ldr	r0, [pc, #52]	; (8000d10 <HAL_SMBUS_MspInit+0xc8>)
 8000cdc:	f005 f89c 	bl	8005e18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_SMBUS_MspInit+0xc4>)
 8000ce2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ce6:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <HAL_SMBUS_MspInit+0xc4>)
 8000ce8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_SMBUS_MspInit+0xc4>)
 8000cf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000cfe:	bf00      	nop
 8000d00:	37e0      	adds	r7, #224	; 0xe0
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40005400 	.word	0x40005400
 8000d0c:	58024400 	.word	0x58024400
 8000d10:	58020400 	.word	0x58020400

08000d14 <L6474_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void L6474_AttachErrorHandler(void (*callback)(uint16_t))
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <L6474_AttachErrorHandler+0x1c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20004d14 	.word	0x20004d14

08000d34 <L6474_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void L6474_AttachFlagInterrupt(void (*callback)(void))
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <L6474_AttachFlagInterrupt+0x1c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20004d18 	.word	0x20004d18

08000d54 <L6474_CmdDisable>:
 * @brief  Issue the Disable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdDisable(uint8_t deviceId)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_DISABLE);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	21a8      	movs	r1, #168	; 0xa8
 8000d62:	4618      	mov	r0, r3
 8000d64:	f001 fa8c 	bl	8002280 <L6474_SendCommand>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <L6474_CmdEnable>:
 * @brief  Issues the Enable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdEnable(uint8_t deviceId)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_ENABLE);
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	21b8      	movs	r1, #184	; 0xb8
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 fa7e 	bl	8002280 <L6474_SendCommand>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <L6474_CmdGetParam>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Register adress (L6474_ABS_POS, L6474_MARK,...)
 * @retval Register value
 **********************************************************/
uint32_t L6474_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint32_t spiRxData;
  uint8_t maxArgumentNbBytes = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8000d9c:	4b70      	ldr	r3, [pc, #448]	; (8000f60 <L6474_CmdGetParam+0x1d4>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	3b01      	subs	r3, #1
 8000daa:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 8000dac:	2300      	movs	r3, #0
 8000dae:	74bb      	strb	r3, [r7, #18]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8000db0:	4b6c      	ldr	r3, [pc, #432]	; (8000f64 <L6474_CmdGetParam+0x1d8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8000db6:	7cbb      	ldrb	r3, [r7, #18]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <L6474_CmdGetParam+0x34>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      //L6474_Board_EnableIrq();
      //__enable_irq();
      itDisable = FALSE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	74bb      	strb	r3, [r7, #18]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	e02b      	b.n	8000e1e <L6474_CmdGetParam+0x92>
    {
      spiTxBursts[0][i] = L6474_NOP;
 8000dc6:	4a68      	ldr	r2, [pc, #416]	; (8000f68 <L6474_CmdGetParam+0x1dc>)
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	4413      	add	r3, r2
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 8000dd0:	4a65      	ldr	r2, [pc, #404]	; (8000f68 <L6474_CmdGetParam+0x1dc>)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	3303      	adds	r3, #3
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 8000ddc:	4a62      	ldr	r2, [pc, #392]	; (8000f68 <L6474_CmdGetParam+0x1dc>)
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	4413      	add	r3, r2
 8000de2:	3306      	adds	r3, #6
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 8000de8:	4a5f      	ldr	r2, [pc, #380]	; (8000f68 <L6474_CmdGetParam+0x1dc>)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	4413      	add	r3, r2
 8000dee:	3309      	adds	r3, #9
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
      spiRxBursts[1][i] = 0;
 8000df4:	4a5d      	ldr	r2, [pc, #372]	; (8000f6c <L6474_CmdGetParam+0x1e0>)
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	4413      	add	r3, r2
 8000dfa:	3303      	adds	r3, #3
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
      spiRxBursts[2][i] = 0;
 8000e00:	4a5a      	ldr	r2, [pc, #360]	; (8000f6c <L6474_CmdGetParam+0x1e0>)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	4413      	add	r3, r2
 8000e06:	3306      	adds	r3, #6
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
      spiRxBursts[3][i] = 0;    
 8000e0c:	4a57      	ldr	r2, [pc, #348]	; (8000f6c <L6474_CmdGetParam+0x1e0>)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	4413      	add	r3, r2
 8000e12:	3309      	adds	r3, #9
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	4b50      	ldr	r3, [pc, #320]	; (8000f60 <L6474_CmdGetParam+0x1d4>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	461a      	mov	r2, r3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d3cc      	bcc.n	8000dc6 <L6474_CmdGetParam+0x3a>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	2b18      	cmp	r3, #24
 8000e32:	d84d      	bhi.n	8000ed0 <L6474_CmdGetParam+0x144>
 8000e34:	a201      	add	r2, pc, #4	; (adr r2, 8000e3c <L6474_CmdGetParam+0xb0>)
 8000e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3a:	bf00      	nop
 8000e3c:	08000ea1 	.word	0x08000ea1
 8000e40:	08000eb7 	.word	0x08000eb7
 8000e44:	08000ea1 	.word	0x08000ea1
 8000e48:	08000ed1 	.word	0x08000ed1
 8000e4c:	08000ed1 	.word	0x08000ed1
 8000e50:	08000ed1 	.word	0x08000ed1
 8000e54:	08000ed1 	.word	0x08000ed1
 8000e58:	08000ed1 	.word	0x08000ed1
 8000e5c:	08000ed1 	.word	0x08000ed1
 8000e60:	08000ed1 	.word	0x08000ed1
 8000e64:	08000ed1 	.word	0x08000ed1
 8000e68:	08000ed1 	.word	0x08000ed1
 8000e6c:	08000ed1 	.word	0x08000ed1
 8000e70:	08000ed1 	.word	0x08000ed1
 8000e74:	08000ed1 	.word	0x08000ed1
 8000e78:	08000ed1 	.word	0x08000ed1
 8000e7c:	08000ed1 	.word	0x08000ed1
 8000e80:	08000ed1 	.word	0x08000ed1
 8000e84:	08000ed1 	.word	0x08000ed1
 8000e88:	08000ed1 	.word	0x08000ed1
 8000e8c:	08000ed1 	.word	0x08000ed1
 8000e90:	08000ed1 	.word	0x08000ed1
 8000e94:	08000ed1 	.word	0x08000ed1
 8000e98:	08000eb7 	.word	0x08000eb7
 8000e9c:	08000eb7 	.word	0x08000eb7
    }
    switch (param)
    {
      case L6474_ABS_POS: ;
      case L6474_MARK:
        spiTxBursts[0][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	7c7b      	ldrb	r3, [r7, #17]
 8000ea6:	f042 0220 	orr.w	r2, r2, #32
 8000eaa:	b2d1      	uxtb	r1, r2
 8000eac:	4a2e      	ldr	r2, [pc, #184]	; (8000f68 <L6474_CmdGetParam+0x1dc>)
 8000eae:	54d1      	strb	r1, [r2, r3]
        maxArgumentNbBytes = 3;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	74fb      	strb	r3, [r7, #19]
        break;
 8000eb4:	e018      	b.n	8000ee8 <L6474_CmdGetParam+0x15c>
      case L6474_EL_POS: ;
      case L6474_CONFIG: ;
      case L6474_STATUS:
        spiTxBursts[1][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	7c7b      	ldrb	r3, [r7, #17]
 8000ebc:	f042 0220 	orr.w	r2, r2, #32
 8000ec0:	b2d1      	uxtb	r1, r2
 8000ec2:	4a29      	ldr	r2, [pc, #164]	; (8000f68 <L6474_CmdGetParam+0x1dc>)
 8000ec4:	4413      	add	r3, r2
 8000ec6:	460a      	mov	r2, r1
 8000ec8:	70da      	strb	r2, [r3, #3]
        maxArgumentNbBytes = 2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	74fb      	strb	r3, [r7, #19]
        break;
 8000ece:	e00b      	b.n	8000ee8 <L6474_CmdGetParam+0x15c>
      default:
        spiTxBursts[2][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	7c7b      	ldrb	r3, [r7, #17]
 8000ed6:	f042 0220 	orr.w	r2, r2, #32
 8000eda:	b2d1      	uxtb	r1, r2
 8000edc:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <L6474_CmdGetParam+0x1dc>)
 8000ede:	4413      	add	r3, r2
 8000ee0:	460a      	mov	r2, r1
 8000ee2:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	74fb      	strb	r3, [r7, #19]
    }
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8000ee8:	f002 ff45 	bl	8003d76 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8000eec:	2301      	movs	r3, #1
 8000eee:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <L6474_CmdGetParam+0x1d8>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f47f af5a 	bne.w	8000db0 <L6474_CmdGetParam+0x24>
    
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8000efc:	7cfb      	ldrb	r3, [r7, #19]
 8000efe:	f1c3 0303 	rsb	r3, r3, #3
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	e011      	b.n	8000f2a <L6474_CmdGetParam+0x19e>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a16      	ldr	r2, [pc, #88]	; (8000f68 <L6474_CmdGetParam+0x1dc>)
 8000f10:	1898      	adds	r0, r3, r2
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4613      	mov	r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <L6474_CmdGetParam+0x1e0>)
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f002 f850 	bl	8002fc4 <L6474_WriteBytes>
       i++)
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	3301      	adds	r3, #1
 8000f28:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d9ea      	bls.n	8000f06 <L6474_CmdGetParam+0x17a>
                          &spiRxBursts[i][0]);
  }
  
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8000f30:	7c7b      	ldrb	r3, [r7, #17]
 8000f32:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <L6474_CmdGetParam+0x1e0>)
 8000f34:	4413      	add	r3, r2
 8000f36:	78db      	ldrb	r3, [r3, #3]
 8000f38:	041b      	lsls	r3, r3, #16
              (spiRxBursts[2][spiIndex] << 8) |
 8000f3a:	7c7a      	ldrb	r2, [r7, #17]
 8000f3c:	490b      	ldr	r1, [pc, #44]	; (8000f6c <L6474_CmdGetParam+0x1e0>)
 8000f3e:	440a      	add	r2, r1
 8000f40:	7992      	ldrb	r2, [r2, #6]
 8000f42:	0212      	lsls	r2, r2, #8
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8000f44:	4313      	orrs	r3, r2
              (spiRxBursts[3][spiIndex]);
 8000f46:	7c7a      	ldrb	r2, [r7, #17]
 8000f48:	4908      	ldr	r1, [pc, #32]	; (8000f6c <L6474_CmdGetParam+0x1e0>)
 8000f4a:	440a      	add	r2, r1
 8000f4c:	7a52      	ldrb	r2, [r2, #9]
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8000f52:	f002 ff19 	bl	8003d88 <L6474_Board_EnableIrq>
    
  return (spiRxData);
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000184 	.word	0x20000184
 8000f64:	200001a0 	.word	0x200001a0
 8000f68:	20000188 	.word	0x20000188
 8000f6c:	20000194 	.word	0x20000194

08000f70 <L6474_CmdGetStatus>:
 * @note Once the GetStatus command is performed, the flags of the status register
 * are reset. This is not the case when the status register is read with the
 * GetParam command (via the functions L6474ReadStatusRegister or L6474CmdGetParam).
 **********************************************************/
uint16_t L6474_CmdGetStatus(uint8_t deviceId)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint16_t status;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8000f7a:	4b3c      	ldr	r3, [pc, #240]	; (800106c <L6474_CmdGetStatus+0xfc>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	3b01      	subs	r3, #1
 8000f88:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8000f8e:	4b38      	ldr	r3, [pc, #224]	; (8001070 <L6474_CmdGetStatus+0x100>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8000f94:	7afb      	ldrb	r3, [r7, #11]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <L6474_CmdGetStatus+0x32>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8000f9a:	f002 fef5 	bl	8003d88 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	72fb      	strb	r3, [r7, #11]
    }

    for (i = 0; i < numberOfDevices; i++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	e01f      	b.n	8000fe8 <L6474_CmdGetStatus+0x78>
    {
       spiTxBursts[0][i] = L6474_NOP;
 8000fa8:	4a32      	ldr	r2, [pc, #200]	; (8001074 <L6474_CmdGetStatus+0x104>)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4413      	add	r3, r2
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
       spiTxBursts[1][i] = L6474_NOP;
 8000fb2:	4a30      	ldr	r2, [pc, #192]	; (8001074 <L6474_CmdGetStatus+0x104>)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3303      	adds	r3, #3
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
       spiTxBursts[2][i] = L6474_NOP;
 8000fbe:	4a2d      	ldr	r2, [pc, #180]	; (8001074 <L6474_CmdGetStatus+0x104>)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	3306      	adds	r3, #6
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
       spiRxBursts[1][i] = 0;
 8000fca:	4a2b      	ldr	r2, [pc, #172]	; (8001078 <L6474_CmdGetStatus+0x108>)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	3303      	adds	r3, #3
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
       spiRxBursts[2][i] = 0;
 8000fd6:	4a28      	ldr	r2, [pc, #160]	; (8001078 <L6474_CmdGetStatus+0x108>)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	3306      	adds	r3, #6
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	4b20      	ldr	r3, [pc, #128]	; (800106c <L6474_CmdGetStatus+0xfc>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d3d8      	bcc.n	8000fa8 <L6474_CmdGetStatus+0x38>
    }
    spiTxBursts[0][spiIndex] = L6474_GET_STATUS;
 8000ff6:	7abb      	ldrb	r3, [r7, #10]
 8000ff8:	4a1e      	ldr	r2, [pc, #120]	; (8001074 <L6474_CmdGetStatus+0x104>)
 8000ffa:	21d0      	movs	r1, #208	; 0xd0
 8000ffc:	54d1      	strb	r1, [r2, r3]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8000ffe:	f002 feba 	bl	8003d76 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8001002:	2301      	movs	r3, #1
 8001004:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <L6474_CmdGetStatus+0x100>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1be      	bne.n	8000f8e <L6474_CmdGetStatus+0x1e>

  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	e011      	b.n	800103a <L6474_CmdGetStatus+0xca>
  {
     L6474_WriteBytes(&spiTxBursts[i][0], &spiRxBursts[i][0]);
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	4a15      	ldr	r2, [pc, #84]	; (8001074 <L6474_CmdGetStatus+0x104>)
 8001020:	1898      	adds	r0, r3, r2
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <L6474_CmdGetStatus+0x108>)
 800102c:	4413      	add	r3, r2
 800102e:	4619      	mov	r1, r3
 8001030:	f001 ffc8 	bl	8002fc4 <L6474_WriteBytes>
  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d9ea      	bls.n	8001016 <L6474_CmdGetStatus+0xa6>
  }
  status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8001040:	7abb      	ldrb	r3, [r7, #10]
 8001042:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <L6474_CmdGetStatus+0x108>)
 8001044:	4413      	add	r3, r2
 8001046:	78db      	ldrb	r3, [r3, #3]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	b21a      	sxth	r2, r3
 800104c:	7abb      	ldrb	r3, [r7, #10]
 800104e:	490a      	ldr	r1, [pc, #40]	; (8001078 <L6474_CmdGetStatus+0x108>)
 8001050:	440b      	add	r3, r1
 8001052:	799b      	ldrb	r3, [r3, #6]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21b      	sxth	r3, r3
 800105a:	813b      	strh	r3, [r7, #8]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 800105c:	f002 fe94 	bl	8003d88 <L6474_Board_EnableIrq>
  
  return (status);
 8001060:	893b      	ldrh	r3, [r7, #8]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000184 	.word	0x20000184
 8001070:	200001a0 	.word	0x200001a0
 8001074:	20000188 	.word	0x20000188
 8001078:	20000194 	.word	0x20000194

0800107c <L6474_CmdNop>:
 * @brief  Issues the Nop command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdNop(uint8_t deviceId)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_NOP);
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f001 f8f8 	bl	8002280 <L6474_SendCommand>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <L6474_CmdSetParam>:
 * @retval None
 **********************************************************/
void L6474_CmdSetParam(uint8_t deviceId,
                       uint32_t param,
                       uint32_t value)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	73fb      	strb	r3, [r7, #15]
  uint32_t i;
  uint8_t maxArgumentNbBytes = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80010aa:	4b69      	ldr	r3, [pc, #420]	; (8001250 <L6474_CmdSetParam+0x1b8>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	3b01      	subs	r3, #1
 80010b8:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 80010ba:	2300      	movs	r3, #0
 80010bc:	74bb      	strb	r3, [r7, #18]
  do
  {
    spiPreemtionByIsr = FALSE;
 80010be:	4b65      	ldr	r3, [pc, #404]	; (8001254 <L6474_CmdSetParam+0x1bc>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80010c4:	7cbb      	ldrb	r3, [r7, #18]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <L6474_CmdSetParam+0x3a>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80010ca:	f002 fe5d 	bl	8003d88 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	74bb      	strb	r3, [r7, #18]
    }
    for (i = 0; i < numberOfDevices; i++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	e019      	b.n	800110c <L6474_CmdSetParam+0x74>
    {
      spiTxBursts[0][i] = L6474_NOP;
 80010d8:	4a5f      	ldr	r2, [pc, #380]	; (8001258 <L6474_CmdSetParam+0x1c0>)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	4413      	add	r3, r2
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 80010e2:	4a5d      	ldr	r2, [pc, #372]	; (8001258 <L6474_CmdSetParam+0x1c0>)
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	4413      	add	r3, r2
 80010e8:	3303      	adds	r3, #3
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 80010ee:	4a5a      	ldr	r2, [pc, #360]	; (8001258 <L6474_CmdSetParam+0x1c0>)
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	4413      	add	r3, r2
 80010f4:	3306      	adds	r3, #6
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 80010fa:	4a57      	ldr	r2, [pc, #348]	; (8001258 <L6474_CmdSetParam+0x1c0>)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	4413      	add	r3, r2
 8001100:	3309      	adds	r3, #9
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3301      	adds	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	4b50      	ldr	r3, [pc, #320]	; (8001250 <L6474_CmdSetParam+0x1b8>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	461a      	mov	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	4293      	cmp	r3, r2
 8001118:	d3de      	bcc.n	80010d8 <L6474_CmdSetParam+0x40>
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	3b01      	subs	r3, #1
 800111e:	2b17      	cmp	r3, #23
 8001120:	d85c      	bhi.n	80011dc <L6474_CmdSetParam+0x144>
 8001122:	a201      	add	r2, pc, #4	; (adr r2, 8001128 <L6474_CmdSetParam+0x90>)
 8001124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001128:	08001189 	.word	0x08001189
 800112c:	080011b9 	.word	0x080011b9
 8001130:	08001189 	.word	0x08001189
 8001134:	080011dd 	.word	0x080011dd
 8001138:	080011dd 	.word	0x080011dd
 800113c:	080011dd 	.word	0x080011dd
 8001140:	080011dd 	.word	0x080011dd
 8001144:	080011dd 	.word	0x080011dd
 8001148:	080011dd 	.word	0x080011dd
 800114c:	080011dd 	.word	0x080011dd
 8001150:	080011dd 	.word	0x080011dd
 8001154:	080011dd 	.word	0x080011dd
 8001158:	080011dd 	.word	0x080011dd
 800115c:	080011dd 	.word	0x080011dd
 8001160:	080011dd 	.word	0x080011dd
 8001164:	080011dd 	.word	0x080011dd
 8001168:	080011dd 	.word	0x080011dd
 800116c:	080011dd 	.word	0x080011dd
 8001170:	080011dd 	.word	0x080011dd
 8001174:	080011dd 	.word	0x080011dd
 8001178:	080011dd 	.word	0x080011dd
 800117c:	080011dd 	.word	0x080011dd
 8001180:	080011dd 	.word	0x080011dd
 8001184:	080011b9 	.word	0x080011b9
    }
    switch (param)
  {
    case L6474_ABS_POS: ;
    case L6474_MARK:
        spiTxBursts[0][spiIndex] = param;
 8001188:	7c7b      	ldrb	r3, [r7, #17]
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	b2d1      	uxtb	r1, r2
 800118e:	4a32      	ldr	r2, [pc, #200]	; (8001258 <L6474_CmdSetParam+0x1c0>)
 8001190:	54d1      	strb	r1, [r2, r3]
        spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	0c1a      	lsrs	r2, r3, #16
 8001196:	7c7b      	ldrb	r3, [r7, #17]
 8001198:	b2d1      	uxtb	r1, r2
 800119a:	4a2f      	ldr	r2, [pc, #188]	; (8001258 <L6474_CmdSetParam+0x1c0>)
 800119c:	4413      	add	r3, r2
 800119e:	460a      	mov	r2, r1
 80011a0:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	0a1a      	lsrs	r2, r3, #8
 80011a6:	7c7b      	ldrb	r3, [r7, #17]
 80011a8:	b2d1      	uxtb	r1, r2
 80011aa:	4a2b      	ldr	r2, [pc, #172]	; (8001258 <L6474_CmdSetParam+0x1c0>)
 80011ac:	4413      	add	r3, r2
 80011ae:	460a      	mov	r2, r1
 80011b0:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 3;
 80011b2:	2303      	movs	r3, #3
 80011b4:	74fb      	strb	r3, [r7, #19]
        break;
 80011b6:	e01a      	b.n	80011ee <L6474_CmdSetParam+0x156>
    case L6474_EL_POS: ;
    case L6474_CONFIG:
        spiTxBursts[1][spiIndex] = param;
 80011b8:	7c7b      	ldrb	r3, [r7, #17]
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	b2d1      	uxtb	r1, r2
 80011be:	4a26      	ldr	r2, [pc, #152]	; (8001258 <L6474_CmdSetParam+0x1c0>)
 80011c0:	4413      	add	r3, r2
 80011c2:	460a      	mov	r2, r1
 80011c4:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	0a1a      	lsrs	r2, r3, #8
 80011ca:	7c7b      	ldrb	r3, [r7, #17]
 80011cc:	b2d1      	uxtb	r1, r2
 80011ce:	4a22      	ldr	r2, [pc, #136]	; (8001258 <L6474_CmdSetParam+0x1c0>)
 80011d0:	4413      	add	r3, r2
 80011d2:	460a      	mov	r2, r1
 80011d4:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	74fb      	strb	r3, [r7, #19]
        break;
 80011da:	e008      	b.n	80011ee <L6474_CmdSetParam+0x156>
    default:
        spiTxBursts[2][spiIndex] = param;
 80011dc:	7c7b      	ldrb	r3, [r7, #17]
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	b2d1      	uxtb	r1, r2
 80011e2:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <L6474_CmdSetParam+0x1c0>)
 80011e4:	4413      	add	r3, r2
 80011e6:	460a      	mov	r2, r1
 80011e8:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	74fb      	strb	r3, [r7, #19]
    }
    spiTxBursts[3][spiIndex] = (uint8_t)(value);
 80011ee:	7c7b      	ldrb	r3, [r7, #17]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	b2d1      	uxtb	r1, r2
 80011f4:	4a18      	ldr	r2, [pc, #96]	; (8001258 <L6474_CmdSetParam+0x1c0>)
 80011f6:	4413      	add	r3, r2
 80011f8:	460a      	mov	r2, r1
 80011fa:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80011fc:	f002 fdbb 	bl	8003d76 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8001200:	2301      	movs	r3, #1
 8001202:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <L6474_CmdSetParam+0x1bc>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	f47f af57 	bne.w	80010be <L6474_CmdSetParam+0x26>
 
  /* SPI transfer */
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001210:	7cfb      	ldrb	r3, [r7, #19]
 8001212:	f1c3 0303 	rsb	r3, r3, #3
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e011      	b.n	800123e <L6474_CmdSetParam+0x1a6>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],&spiRxBursts[i][0]);
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	4a0d      	ldr	r2, [pc, #52]	; (8001258 <L6474_CmdSetParam+0x1c0>)
 8001224:	1898      	adds	r0, r3, r2
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	4a0b      	ldr	r2, [pc, #44]	; (800125c <L6474_CmdSetParam+0x1c4>)
 8001230:	4413      	add	r3, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f001 fec6 	bl	8002fc4 <L6474_WriteBytes>
       i++)
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	3301      	adds	r3, #1
 800123c:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	2b03      	cmp	r3, #3
 8001242:	d9ea      	bls.n	800121a <L6474_CmdSetParam+0x182>
  }
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001244:	f002 fda0 	bl	8003d88 <L6474_Board_EnableIrq>
}
 8001248:	bf00      	nop
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000184 	.word	0x20000184
 8001254:	200001a0 	.word	0x200001a0
 8001258:	20000188 	.word	0x20000188
 800125c:	20000194 	.word	0x20000194

08001260 <L6474_Init>:
 * @brief Starts a new L6474 instance 
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void L6474_Init(void* pInit)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs */
  L6474_Board_GpioInit(l6474DriverInstance);
 8001268:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <L6474_Init+0x94>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f002 fd94 	bl	8003d9c <L6474_Board_GpioInit>
  
  if(L6474_Board_SpiInit() != 0)
 8001274:	f002 ff90 	bl	8004198 <L6474_Board_SpiInit>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <L6474_Init+0x26>
  {
    /* Initialization Error */
    L6474_ErrorHandler(L6474_ERROR_0);
 800127e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001282:	f000 ffd1 	bl	8002228 <L6474_ErrorHandler>
  } 

  /* Initialise the PWMs used for the Step clocks ----------------------------*/
  L6474_Board_PwmInit(l6474DriverInstance);
 8001286:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <L6474_Init+0x94>)
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	4618      	mov	r0, r3
 800128e:	f002 feaf 	bl	8003ff0 <L6474_Board_PwmInit>
 
  /* Standby-reset deactivation */
  L6474_Board_ReleaseReset(l6474DriverInstance);
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <L6474_Init+0x94>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	4618      	mov	r0, r3
 800129a:	f002 ff29 	bl	80040f0 <L6474_Board_ReleaseReset>
  
  /* Let a delay after reset */
  L6474_Board_Delay(1); 
 800129e:	2001      	movs	r0, #1
 80012a0:	f002 fd5e 	bl	8003d60 <L6474_Board_Delay>
  
  /* Set all registers and context variables to the predefined values from l6474_target_config.h */
  if (pInit == 0)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d106      	bne.n	80012b8 <L6474_Init+0x58>
  {
    L6474_SetDeviceParamsToPredefinedValues(l6474DriverInstance);
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <L6474_Init+0x94>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	4618      	mov	r0, r3
 80012b2:	f001 f8db 	bl	800246c <L6474_SetDeviceParamsToPredefinedValues>
 80012b6:	e006      	b.n	80012c6 <L6474_Init+0x66>
  }
  else
  {
    L6474_SetDeviceParamsToGivenValues(l6474DriverInstance, pInit);
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <L6474_Init+0x94>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f001 f82f 	bl	8002324 <L6474_SetDeviceParamsToGivenValues>
  }
  /* Disable L6474 powerstage */
  L6474_CmdDisable(l6474DriverInstance);
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <L6474_Init+0x94>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fd41 	bl	8000d54 <L6474_CmdDisable>

  /* Get Status to clear flags after start up */
  L6474_CmdGetStatus(l6474DriverInstance);
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <L6474_Init+0x94>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fe49 	bl	8000f70 <L6474_CmdGetStatus>

  l6474DriverInstance++;
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <L6474_Init+0x94>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	3301      	adds	r3, #1
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <L6474_Init+0x94>)
 80012e8:	801a      	strh	r2, [r3, #0]
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200001a2 	.word	0x200001a2

080012f8 <L6474_GetAcceleration>:
 * @brief Returns the acceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Acceleration in pps^2
 **********************************************************/
uint16_t L6474_GetAcceleration(uint8_t deviceId)
{                                                  
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].acceleration);
 8001302:	79fa      	ldrb	r2, [r7, #7]
 8001304:	4907      	ldr	r1, [pc, #28]	; (8001324 <L6474_GetAcceleration+0x2c>)
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	440b      	add	r3, r1
 8001310:	3318      	adds	r3, #24
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	b29b      	uxth	r3, r3
}            
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20004c9c 	.word	0x20004c9c

08001328 <L6474_GetCurrentSpeed>:
 * @brief Returns the current speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Speed in pps
 **********************************************************/
uint16_t L6474_GetCurrentSpeed(uint8_t deviceId)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].speed;
 8001332:	79fa      	ldrb	r2, [r7, #7]
 8001334:	4907      	ldr	r1, [pc, #28]	; (8001354 <L6474_GetCurrentSpeed+0x2c>)
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	440b      	add	r3, r1
 8001340:	3320      	adds	r3, #32
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	b29b      	uxth	r3, r3
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20004c9c 	.word	0x20004c9c

08001358 <L6474_GetDeceleration>:
 * @brief Returns the deceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Deceleration in pps^2
 **********************************************************/
uint16_t L6474_GetDeceleration(uint8_t deviceId)
{                                                  
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].deceleration);
 8001362:	79fa      	ldrb	r2, [r7, #7]
 8001364:	4907      	ldr	r1, [pc, #28]	; (8001384 <L6474_GetDeceleration+0x2c>)
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	331a      	adds	r3, #26
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	b29b      	uxth	r3, r3
}          
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20004c9c 	.word	0x20004c9c

08001388 <L6474_GetDeviceState>:
 * @brief Returns the device state
 * @param[in] deviceId (from 0 to 2)
 * @retval State (ACCELERATING, DECELERATING, STEADY or INACTIVE)
 **********************************************************/
motorState_t L6474_GetDeviceState(uint8_t deviceId)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].motionState;
 8001392:	79fa      	ldrb	r2, [r7, #7]
 8001394:	4907      	ldr	r1, [pc, #28]	; (80013b4 <L6474_GetDeviceState+0x2c>)
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	440b      	add	r3, r1
 80013a0:	3324      	adds	r3, #36	; 0x24
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b2db      	uxtb	r3, r3
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20004c9c 	.word	0x20004c9c

080013b8 <L6474_GetDirection>:
 * @brief Get the motor current direction
 * @param[in] deviceId Unused parameter
 * @retval direction
 **********************************************************/
motorDir_t L6474_GetDirection(uint8_t deviceId)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].direction;
 80013c2:	79fa      	ldrb	r2, [r7, #7]
 80013c4:	4907      	ldr	r1, [pc, #28]	; (80013e4 <L6474_GetDirection+0x2c>)
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	440b      	add	r3, r1
 80013d0:	3323      	adds	r3, #35	; 0x23
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b2db      	uxtb	r3, r3
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20004c9c 	.word	0x20004c9c

080013e8 <L6474_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval L6474_FW_VERSION
 **********************************************************/
uint32_t L6474_GetFwVersion(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return (L6474_FW_VERSION);
 80013ec:	f44f 3385 	mov.w	r3, #68096	; 0x10a00
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <L6474_GetMotorHandle>:
/******************************************************//**
 * @brief  Return motor handle (pointer to the L6474 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* L6474_GetMotorHandle(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return (&l6474Drv);
 8001400:	4b02      	ldr	r3, [pc, #8]	; (800140c <L6474_GetMotorHandle+0x10>)
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	20000000 	.word	0x20000000

08001410 <L6474_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t L6474_GetMark(uint8_t deviceId)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2103      	movs	r1, #3
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fcb4 	bl	8000d8c <L6474_CmdGetParam>
 8001424:	4603      	mov	r3, r0
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fede 	bl	80021e8 <L6474_ConvertPosition>
 800142c:	4603      	mov	r3, r0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <L6474_GetMaxSpeed>:
 * @brief  Returns the max speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval maxSpeed in pps
 **********************************************************/
uint16_t L6474_GetMaxSpeed(uint8_t deviceId)
{                                                  
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].maxSpeed);
 8001442:	79fa      	ldrb	r2, [r7, #7]
 8001444:	4907      	ldr	r1, [pc, #28]	; (8001464 <L6474_GetMaxSpeed+0x2c>)
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
 8001450:	331c      	adds	r3, #28
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	b29b      	uxth	r3, r3
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20004c9c 	.word	0x20004c9c

08001468 <L6474_GetMinSpeed>:
 * @brief  Returns the min speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval minSpeed in pps
 **********************************************************/
uint16_t L6474_GetMinSpeed(uint8_t deviceId)
{                                                  
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].minSpeed);
 8001472:	79fa      	ldrb	r2, [r7, #7]
 8001474:	4907      	ldr	r1, [pc, #28]	; (8001494 <L6474_GetMinSpeed+0x2c>)
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	440b      	add	r3, r1
 8001480:	331e      	adds	r3, #30
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	b29b      	uxth	r3, r3
}                                                     
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20004c9c 	.word	0x20004c9c

08001498 <L6474_GetNbDevices>:
/******************************************************//**
 * @brief  Returns the number of devices
 * @retval number of devices
 **********************************************************/
uint8_t L6474_GetNbDevices(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return (numberOfDevices);
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <L6474_GetNbDevices+0x14>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b2db      	uxtb	r3, r3
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	20000184 	.word	0x20000184

080014b0 <L6474_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t L6474_GetPosition(uint8_t deviceId)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2101      	movs	r1, #1
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fc64 	bl	8000d8c <L6474_CmdGetParam>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fe8e 	bl	80021e8 <L6474_ConvertPosition>
 80014cc:	4603      	mov	r3, r0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <L6474_GetStepMode>:
 * @brief Get the motor step mode
 * @param[in] deviceId Unused parameter
 * @retval step mode
 **********************************************************/
motorStepMode_t L6474_GetStepMode(uint8_t deviceId)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  motorStepMode_t stepMode;
  uint8_t stepSelValue;
  
  /* Get STEP_SEL field of step mode register  */
  stepSelValue = (uint8_t)((0x07 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE))|0x08) ;
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2116      	movs	r1, #22
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fc50 	bl	8000d8c <L6474_CmdGetParam>
 80014ec:	4603      	mov	r3, r0
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f043 0308 	orr.w	r3, r3, #8
 80014fa:	73bb      	strb	r3, [r7, #14]
  
   switch (stepSelValue)
 80014fc:	7bbb      	ldrb	r3, [r7, #14]
 80014fe:	3b08      	subs	r3, #8
 8001500:	2b04      	cmp	r3, #4
 8001502:	d81c      	bhi.n	800153e <L6474_GetStepMode+0x66>
 8001504:	a201      	add	r2, pc, #4	; (adr r2, 800150c <L6474_GetStepMode+0x34>)
 8001506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150a:	bf00      	nop
 800150c:	08001521 	.word	0x08001521
 8001510:	08001527 	.word	0x08001527
 8001514:	0800152d 	.word	0x0800152d
 8001518:	08001533 	.word	0x08001533
 800151c:	08001539 	.word	0x08001539
  {
    case L6474_STEP_SEL_1:
      stepMode = STEP_MODE_FULL;
 8001520:	2300      	movs	r3, #0
 8001522:	73fb      	strb	r3, [r7, #15]
      break;
 8001524:	e00e      	b.n	8001544 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_2:
      stepMode = STEP_MODE_HALF;
 8001526:	2301      	movs	r3, #1
 8001528:	73fb      	strb	r3, [r7, #15]
      break;    
 800152a:	e00b      	b.n	8001544 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_4:
      stepMode = STEP_MODE_1_4;
 800152c:	2302      	movs	r3, #2
 800152e:	73fb      	strb	r3, [r7, #15]
      break;        
 8001530:	e008      	b.n	8001544 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_8:
      stepMode = STEP_MODE_1_8;
 8001532:	2303      	movs	r3, #3
 8001534:	73fb      	strb	r3, [r7, #15]
      break;       
 8001536:	e005      	b.n	8001544 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_16:
      stepMode = STEP_MODE_1_16;
 8001538:	2304      	movs	r3, #4
 800153a:	73fb      	strb	r3, [r7, #15]
      break;
 800153c:	e002      	b.n	8001544 <L6474_GetStepMode+0x6c>
    default:
      stepMode = STEP_MODE_UNKNOW;
 800153e:	23fe      	movs	r3, #254	; 0xfe
 8001540:	73fb      	strb	r3, [r7, #15]
      break;       
 8001542:	bf00      	nop
  }
  
  return stepMode;
 8001544:	7bfb      	ldrb	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop

08001550 <L6474_GetStopMode>:
 * @brief Get the selected stop mode
 * @param[in] deviceId Unused parameter
 * @retval the selected stop mode
 **********************************************************/
motorStopMode_t L6474_GetStopMode(uint8_t deviceId)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].stopMode;
 800155a:	79fa      	ldrb	r2, [r7, #7]
 800155c:	4907      	ldr	r1, [pc, #28]	; (800157c <L6474_GetStopMode+0x2c>)
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	440b      	add	r3, r1
 8001568:	3325      	adds	r3, #37	; 0x25
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b2db      	uxtb	r3, r3
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20004c9c 	.word	0x20004c9c

08001580 <L6474_GoHome>:
 * @brief  Requests the motor to move to the home position (ABS_POSITION = 0)
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoHome(uint8_t deviceId)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  L6474_GoTo(deviceId, 0);
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f81e 	bl	80015d0 <L6474_GoTo>
} 
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <L6474_GoMark>:
 * @brief  Requests the motor to move to the mark position 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoMark(uint8_t deviceId)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  uint32_t mark;

  mark = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	2103      	movs	r1, #3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fbee 	bl	8000d8c <L6474_CmdGetParam>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 fe18 	bl	80021e8 <L6474_ConvertPosition>
 80015b8:	4603      	mov	r3, r0
 80015ba:	60fb      	str	r3, [r7, #12]
  L6474_GoTo(deviceId,mark);  
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f804 	bl	80015d0 <L6474_GoTo>
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <L6474_GoTo>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] targetPosition absolute position in steps
 * @retval None
 **********************************************************/
void L6474_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
  motorDir_t direction;
  int32_t steps;
  
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 80015dc:	79fa      	ldrb	r2, [r7, #7]
 80015de:	493a      	ldr	r1, [pc, #232]	; (80016c8 <L6474_GoTo+0xf8>)
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	440b      	add	r3, r1
 80015ea:	3324      	adds	r3, #36	; 0x24
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d003      	beq.n	80015fc <L6474_GoTo+0x2c>
  {
    L6474_HardStop(deviceId);
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 f868 	bl	80016cc <L6474_HardStop>
  }

  /* Get current position */
  devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	2101      	movs	r1, #1
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fbc3 	bl	8000d8c <L6474_CmdGetParam>
 8001606:	4603      	mov	r3, r0
 8001608:	79fc      	ldrb	r4, [r7, #7]
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fdec 	bl	80021e8 <L6474_ConvertPosition>
 8001610:	4602      	mov	r2, r0
 8001612:	492d      	ldr	r1, [pc, #180]	; (80016c8 <L6474_GoTo+0xf8>)
 8001614:	4623      	mov	r3, r4
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4423      	add	r3, r4
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	440b      	add	r3, r1
 800161e:	3304      	adds	r3, #4
 8001620:	601a      	str	r2, [r3, #0]
  
  /* Compute the number of steps to perform */
  steps = targetPosition - devicePrm[deviceId].currentPosition;
 8001622:	79fa      	ldrb	r2, [r7, #7]
 8001624:	4928      	ldr	r1, [pc, #160]	; (80016c8 <L6474_GoTo+0xf8>)
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	440b      	add	r3, r1
 8001630:	3304      	adds	r3, #4
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	60bb      	str	r3, [r7, #8]
  
  if (steps >= 0) 
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	db0c      	blt.n	800165a <L6474_GoTo+0x8a>
  {
    devicePrm[deviceId].stepsToTake = steps;
 8001640:	79fa      	ldrb	r2, [r7, #7]
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	4820      	ldr	r0, [pc, #128]	; (80016c8 <L6474_GoTo+0xf8>)
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4403      	add	r3, r0
 8001650:	3314      	adds	r3, #20
 8001652:	6019      	str	r1, [r3, #0]
    direction = FORWARD;
 8001654:	2301      	movs	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e00d      	b.n	8001676 <L6474_GoTo+0xa6>
    
  } 
  else 
  {
    devicePrm[deviceId].stepsToTake = -steps;
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	425b      	negs	r3, r3
 800165e:	79fa      	ldrb	r2, [r7, #7]
 8001660:	4618      	mov	r0, r3
 8001662:	4919      	ldr	r1, [pc, #100]	; (80016c8 <L6474_GoTo+0xf8>)
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	440b      	add	r3, r1
 800166e:	3314      	adds	r3, #20
 8001670:	6018      	str	r0, [r3, #0]
    direction = BACKWARD;
 8001672:	2300      	movs	r3, #0
 8001674:	73fb      	strb	r3, [r7, #15]
  }
  
  if (steps != 0) 
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d021      	beq.n	80016c0 <L6474_GoTo+0xf0>
  {
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 800167c:	79fa      	ldrb	r2, [r7, #7]
 800167e:	4912      	ldr	r1, [pc, #72]	; (80016c8 <L6474_GoTo+0xf8>)
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	440b      	add	r3, r1
 800168a:	3322      	adds	r3, #34	; 0x22
 800168c:	2201      	movs	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]
        
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fb48 	bl	8001d2c <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, devicePrm[deviceId].stepsToTake);
 800169c:	79fa      	ldrb	r2, [r7, #7]
 800169e:	490a      	ldr	r1, [pc, #40]	; (80016c8 <L6474_GoTo+0xf8>)
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	440b      	add	r3, r1
 80016aa:	3314      	adds	r3, #20
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 fcda 	bl	800206c <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f001 f8ea 	bl	8002894 <L6474_StartMovement>
  }  
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd90      	pop	{r4, r7, pc}
 80016c8:	20004c9c 	.word	0x20004c9c

080016cc <L6474_HardStop>:
 * @brief  Immediatly stops the motor 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HardStop(uint8_t deviceId) 
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  if (devicePrm[deviceId].stopMode == HOLD_MODE)
 80016d6:	79fa      	ldrb	r2, [r7, #7]
 80016d8:	4920      	ldr	r1, [pc, #128]	; (800175c <L6474_HardStop+0x90>)
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	440b      	add	r3, r1
 80016e4:	3325      	adds	r3, #37	; 0x25
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d12d      	bne.n	800174a <L6474_HardStop+0x7e>
  {
    /* Disable corresponding PWM */
    L6474_Board_PwmStop(deviceId);
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f002 fcd3 	bl	800409c <L6474_Board_PwmStop>

    /* Set inactive state */
    devicePrm[deviceId].motionState = INACTIVE;
 80016f6:	79fa      	ldrb	r2, [r7, #7]
 80016f8:	4918      	ldr	r1, [pc, #96]	; (800175c <L6474_HardStop+0x90>)
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	3324      	adds	r3, #36	; 0x24
 8001706:	2208      	movs	r2, #8
 8001708:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].commandExecuted = NO_CMD;
 800170a:	79fa      	ldrb	r2, [r7, #7]
 800170c:	4913      	ldr	r1, [pc, #76]	; (800175c <L6474_HardStop+0x90>)
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	440b      	add	r3, r1
 8001718:	3322      	adds	r3, #34	; 0x22
 800171a:	2203      	movs	r2, #3
 800171c:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 800171e:	79fa      	ldrb	r2, [r7, #7]
 8001720:	490e      	ldr	r1, [pc, #56]	; (800175c <L6474_HardStop+0x90>)
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	440b      	add	r3, r1
 800172c:	3314      	adds	r3, #20
 800172e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001732:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].speed = 0;
 8001734:	79fa      	ldrb	r2, [r7, #7]
 8001736:	4909      	ldr	r1, [pc, #36]	; (800175c <L6474_HardStop+0x90>)
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	440b      	add	r3, r1
 8001742:	3320      	adds	r3, #32
 8001744:	2200      	movs	r2, #0
 8001746:	801a      	strh	r2, [r3, #0]
  else
  {
    //same handling for HIZ_MODE and STANDBY_MODE
    L6474_HizStop(deviceId);
  }
}
 8001748:	e003      	b.n	8001752 <L6474_HardStop+0x86>
    L6474_HizStop(deviceId);
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	4618      	mov	r0, r3
 800174e:	f000 f807 	bl	8001760 <L6474_HizStop>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20004c9c 	.word	0x20004c9c

08001760 <L6474_HizStop>:
 * @brief  Immediatly stops the motor and disable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HizStop(uint8_t deviceId) 
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  /* Disable corresponding PWM */
  L6474_Board_PwmStop(deviceId);
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	4618      	mov	r0, r3
 800176e:	f002 fc95 	bl	800409c <L6474_Board_PwmStop>

  /* Disable power stage */
  L6474_CmdDisable(deviceId);
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff faed 	bl	8000d54 <L6474_CmdDisable>

  /* Set inactive state */
  devicePrm[deviceId].motionState = INACTIVE;
 800177a:	79fa      	ldrb	r2, [r7, #7]
 800177c:	4915      	ldr	r1, [pc, #84]	; (80017d4 <L6474_HizStop+0x74>)
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	440b      	add	r3, r1
 8001788:	3324      	adds	r3, #36	; 0x24
 800178a:	2208      	movs	r2, #8
 800178c:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 800178e:	79fa      	ldrb	r2, [r7, #7]
 8001790:	4910      	ldr	r1, [pc, #64]	; (80017d4 <L6474_HizStop+0x74>)
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	440b      	add	r3, r1
 800179c:	3322      	adds	r3, #34	; 0x22
 800179e:	2203      	movs	r2, #3
 80017a0:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 80017a2:	79fa      	ldrb	r2, [r7, #7]
 80017a4:	490b      	ldr	r1, [pc, #44]	; (80017d4 <L6474_HizStop+0x74>)
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	440b      	add	r3, r1
 80017b0:	3314      	adds	r3, #20
 80017b2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80017b6:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 80017b8:	79fa      	ldrb	r2, [r7, #7]
 80017ba:	4906      	ldr	r1, [pc, #24]	; (80017d4 <L6474_HizStop+0x74>)
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	440b      	add	r3, r1
 80017c6:	3320      	adds	r3, #32
 80017c8:	2200      	movs	r2, #0
 80017ca:	801a      	strh	r2, [r3, #0]
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20004c9c 	.word	0x20004c9c

080017d8 <L6474_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void L6474_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	603a      	str	r2, [r7, #0]
 80017e2:	71fb      	strb	r3, [r7, #7]
 80017e4:	460b      	mov	r3, r1
 80017e6:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 80017e8:	79fa      	ldrb	r2, [r7, #7]
 80017ea:	4926      	ldr	r1, [pc, #152]	; (8001884 <L6474_Move+0xac>)
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	440b      	add	r3, r1
 80017f6:	3324      	adds	r3, #36	; 0x24
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d003      	beq.n	8001808 <L6474_Move+0x30>
  {
    L6474_HardStop(deviceId);
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff62 	bl	80016cc <L6474_HardStop>
  }
  
  if (stepCount != 0) 
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d035      	beq.n	800187a <L6474_Move+0xa2>
  {
    devicePrm[deviceId].stepsToTake = stepCount;
 800180e:	79fa      	ldrb	r2, [r7, #7]
 8001810:	491c      	ldr	r1, [pc, #112]	; (8001884 <L6474_Move+0xac>)
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	3314      	adds	r3, #20
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	601a      	str	r2, [r3, #0]
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 8001822:	79fa      	ldrb	r2, [r7, #7]
 8001824:	4917      	ldr	r1, [pc, #92]	; (8001884 <L6474_Move+0xac>)
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	3322      	adds	r3, #34	; 0x22
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
    
    devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2101      	movs	r1, #1
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff faa6 	bl	8000d8c <L6474_CmdGetParam>
 8001840:	4603      	mov	r3, r0
 8001842:	79fc      	ldrb	r4, [r7, #7]
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fccf 	bl	80021e8 <L6474_ConvertPosition>
 800184a:	4602      	mov	r2, r0
 800184c:	490d      	ldr	r1, [pc, #52]	; (8001884 <L6474_Move+0xac>)
 800184e:	4623      	mov	r3, r4
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4423      	add	r3, r4
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	440b      	add	r3, r1
 8001858:	3304      	adds	r3, #4
 800185a:	601a      	str	r2, [r3, #0]
    
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 800185c:	79ba      	ldrb	r2, [r7, #6]
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fa62 	bl	8001d2c <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, stepCount);
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	6839      	ldr	r1, [r7, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f000 fbfd 	bl	800206c <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	4618      	mov	r0, r3
 8001876:	f001 f80d 	bl	8002894 <L6474_StartMovement>
  }  
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	bd90      	pop	{r4, r7, pc}
 8001882:	bf00      	nop
 8001884:	20004c9c 	.word	0x20004c9c

08001888 <L6474_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the l6474 Driver Instance
 **********************************************************/
uint16_t L6474_ReadId(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return(l6474DriverInstance);
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <L6474_ReadId+0x14>)
 800188e:	881b      	ldrh	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	200001a2 	.word	0x200001a2

080018a0 <L6474_ReadStatusRegister>:
 * @retval Status register valued
 * @note The status register flags are not cleared 
 * at the difference with L6474CmdGetStatus()
 **********************************************************/
uint16_t L6474_ReadStatusRegister(uint8_t deviceId)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  return (L6474_CmdGetParam(deviceId,L6474_STATUS));
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2119      	movs	r1, #25
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fa6c 	bl	8000d8c <L6474_CmdGetParam>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b29b      	uxth	r3, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <L6474_ReleaseReset>:
/******************************************************//**
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @retval None
 **********************************************************/
void L6474_ReleaseReset(uint8_t deviceId)
{ 
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  L6474_Board_ReleaseReset(deviceId); 
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 fc0f 	bl	80040f0 <L6474_Board_ReleaseReset>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <L6474_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Reset(uint8_t deviceId)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	71fb      	strb	r3, [r7, #7]
  L6474_Board_Reset(deviceId); 
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 fc14 	bl	8004114 <L6474_Board_Reset>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <L6474_ResetAllDevices>:
/******************************************************//**
 * @brief Resets all L6474 devices
 * @retval None
 **********************************************************/
void L6474_ResetAllDevices(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 	uint8_t loop;
 	
 	for (loop = 0; loop < numberOfDevices; loop++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	71fb      	strb	r3, [r7, #7]
 80018fe:	e014      	b.n	800192a <L6474_ResetAllDevices+0x36>
 	{
   	/* Stop movement and disable power stage*/
  	L6474_HizStop(loop);
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ff2c 	bl	8001760 <L6474_HizStop>
    L6474_Reset(loop);
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff ffe5 	bl	80018da <L6474_Reset>
    L6474_Board_Delay(1); // Reset pin must be forced low for at least 10us
 8001910:	2001      	movs	r0, #1
 8001912:	f002 fa25 	bl	8003d60 <L6474_Board_Delay>
    L6474_Board_ReleaseReset(loop);
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	4618      	mov	r0, r3
 800191a:	f002 fbe9 	bl	80040f0 <L6474_Board_ReleaseReset>
    L6474_Board_Delay(1); 
 800191e:	2001      	movs	r0, #1
 8001920:	f002 fa1e 	bl	8003d60 <L6474_Board_Delay>
 	for (loop = 0; loop < numberOfDevices; loop++)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	3301      	adds	r3, #1
 8001928:	71fb      	strb	r3, [r7, #7]
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <L6474_ResetAllDevices+0x4c>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	79fa      	ldrb	r2, [r7, #7]
 8001932:	429a      	cmp	r2, r3
 8001934:	d3e4      	bcc.n	8001900 <L6474_ResetAllDevices+0xc>
  }
}
 8001936:	bf00      	nop
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000184 	.word	0x20000184

08001944 <L6474_Run>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] direction FORWARD or BACKWARD
 * @retval None
 **********************************************************/
void L6474_Run(uint8_t deviceId, motorDir_t direction)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	460a      	mov	r2, r1
 800194e:	71fb      	strb	r3, [r7, #7]
 8001950:	4613      	mov	r3, r2
 8001952:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001954:	79fa      	ldrb	r2, [r7, #7]
 8001956:	4913      	ldr	r1, [pc, #76]	; (80019a4 <L6474_Run+0x60>)
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	440b      	add	r3, r1
 8001962:	3324      	adds	r3, #36	; 0x24
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b08      	cmp	r3, #8
 800196a:	d003      	beq.n	8001974 <L6474_Run+0x30>
  {
    L6474_HardStop(deviceId);
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff feac 	bl	80016cc <L6474_HardStop>
  }
  
	/* Direction setup */
	L6474_SetDirection(deviceId,direction);
 8001974:	79ba      	ldrb	r2, [r7, #6]
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f000 f9d6 	bl	8001d2c <L6474_SetDirection>

	devicePrm[deviceId].commandExecuted = RUN_CMD;
 8001980:	79fa      	ldrb	r2, [r7, #7]
 8001982:	4908      	ldr	r1, [pc, #32]	; (80019a4 <L6474_Run+0x60>)
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	440b      	add	r3, r1
 800198e:	3322      	adds	r3, #34	; 0x22
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]

	/* Motor activation */
	L6474_StartMovement(deviceId); 
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	4618      	mov	r0, r3
 8001998:	f000 ff7c 	bl	8002894 <L6474_StartMovement>
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20004c9c 	.word	0x20004c9c

080019a8 <L6474_SelectStepMode>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] stepMod from full step to 1/16 microstep as specified in enum motorStepMode_t
 * @retval None
 **********************************************************/
bool L6474_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMod)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	460a      	mov	r2, r1
 80019b2:	71fb      	strb	r3, [r7, #7]
 80019b4:	4613      	mov	r3, r2
 80019b6:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  L6474_STEP_SEL_t l6474StepMod;
  
  switch (stepMod)
 80019b8:	79bb      	ldrb	r3, [r7, #6]
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	d816      	bhi.n	80019ec <L6474_SelectStepMode+0x44>
 80019be:	a201      	add	r2, pc, #4	; (adr r2, 80019c4 <L6474_SelectStepMode+0x1c>)
 80019c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c4:	080019d5 	.word	0x080019d5
 80019c8:	080019db 	.word	0x080019db
 80019cc:	080019e1 	.word	0x080019e1
 80019d0:	080019e7 	.word	0x080019e7
  {
    case STEP_MODE_FULL:
      l6474StepMod = L6474_STEP_SEL_1;
 80019d4:	2308      	movs	r3, #8
 80019d6:	73fb      	strb	r3, [r7, #15]
      break;
 80019d8:	e00b      	b.n	80019f2 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_HALF:
      l6474StepMod = L6474_STEP_SEL_1_2;
 80019da:	2309      	movs	r3, #9
 80019dc:	73fb      	strb	r3, [r7, #15]
      break;    
 80019de:	e008      	b.n	80019f2 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_4:
      l6474StepMod = L6474_STEP_SEL_1_4;
 80019e0:	230a      	movs	r3, #10
 80019e2:	73fb      	strb	r3, [r7, #15]
      break;        
 80019e4:	e005      	b.n	80019f2 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_8:
      l6474StepMod = L6474_STEP_SEL_1_8;
 80019e6:	230b      	movs	r3, #11
 80019e8:	73fb      	strb	r3, [r7, #15]
      break;       
 80019ea:	e002      	b.n	80019f2 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_16:
    default:
      l6474StepMod = L6474_STEP_SEL_1_16;
 80019ec:	230c      	movs	r3, #12
 80019ee:	73fb      	strb	r3, [r7, #15]
      break;       
 80019f0:	bf00      	nop
  }

  /* Deactivate motor*/
  L6474_HizStop(deviceId);
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff feb3 	bl	8001760 <L6474_HizStop>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE)) ;
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	2116      	movs	r1, #22
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f9c4 	bl	8000d8c <L6474_CmdGetParam>
 8001a04:	4603      	mov	r3, r0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f023 0307 	bic.w	r3, r3, #7
 8001a0c:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  L6474_CmdSetParam(deviceId, L6474_STEP_MODE, stepModeRegister | (uint8_t)l6474StepMod);
 8001a0e:	7bba      	ldrb	r2, [r7, #14]
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	2116      	movs	r1, #22
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fb3b 	bl	8001098 <L6474_CmdSetParam>

  /* Reset abs pos register */
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, 0);
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2200      	movs	r2, #0
 8001a26:	2101      	movs	r1, #1
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fb35 	bl	8001098 <L6474_CmdSetParam>
  
  return (1);
 8001a2e:	2301      	movs	r3, #1
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <L6474_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	460a      	mov	r2, r1
 8001a42:	71fb      	strb	r3, [r7, #7]
 8001a44:	4613      	mov	r3, r2
 8001a46:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]
  if ((newAcc != 0)&&
 8001a4c:	88bb      	ldrh	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d023      	beq.n	8001a9a <L6474_SetAcceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001a52:	79fa      	ldrb	r2, [r7, #7]
 8001a54:	4914      	ldr	r1, [pc, #80]	; (8001aa8 <L6474_SetAcceleration+0x70>)
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	440b      	add	r3, r1
 8001a60:	3324      	adds	r3, #36	; 0x24
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	b2db      	uxtb	r3, r3
  if ((newAcc != 0)&&
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d00b      	beq.n	8001a82 <L6474_SetAcceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001a6a:	79fa      	ldrb	r2, [r7, #7]
 8001a6c:	490e      	ldr	r1, [pc, #56]	; (8001aa8 <L6474_SetAcceleration+0x70>)
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	440b      	add	r3, r1
 8001a78:	3322      	adds	r3, #34	; 0x22
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10b      	bne.n	8001a9a <L6474_SetAcceleration+0x62>
  {
    devicePrm[deviceId].acceleration = newAcc;
 8001a82:	79fa      	ldrb	r2, [r7, #7]
 8001a84:	4908      	ldr	r1, [pc, #32]	; (8001aa8 <L6474_SetAcceleration+0x70>)
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	440b      	add	r3, r1
 8001a90:	3318      	adds	r3, #24
 8001a92:	88ba      	ldrh	r2, [r7, #4]
 8001a94:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001a96:	2301      	movs	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
  }    
  return cmdExecuted;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
}            
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	20004c9c 	.word	0x20004c9c

08001aac <L6474_SetAnalogValue>:
 * L6474_TVAL, L6474_TON_MIN, L6474_TOFF_MIN, L6474_OCD_TH)
 * @param[in] value Analog value to convert and set into the register
 * @retval TRUE if param and param is valid, FALSE otherwise
 *********************************************************/
bool L6474_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001aba:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8001abc:	2301      	movs	r3, #1
 8001abe:	74fb      	strb	r3, [r7, #19]
  if ((value < 0)&&(param != L6474_ABS_POS)&&(param != L6474_MARK)) 
 8001ac0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ac4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001acc:	d508      	bpl.n	8001ae0 <L6474_SetAnalogValue+0x34>
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d005      	beq.n	8001ae0 <L6474_SetAnalogValue+0x34>
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d002      	beq.n	8001ae0 <L6474_SetAnalogValue+0x34>
  {
    result = FALSE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	74fb      	strb	r3, [r7, #19]
 8001ade:	e0d9      	b.n	8001c94 <L6474_SetAnalogValue+0x1e8>
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	2b12      	cmp	r3, #18
 8001ae6:	f200 80ca 	bhi.w	8001c7e <L6474_SetAnalogValue+0x1d2>
 8001aea:	a201      	add	r2, pc, #4	; (adr r2, 8001af0 <L6474_SetAnalogValue+0x44>)
 8001aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af0:	08001ba3 	.word	0x08001ba3
 8001af4:	08001b3d 	.word	0x08001b3d
 8001af8:	08001ba3 	.word	0x08001ba3
 8001afc:	08001c7f 	.word	0x08001c7f
 8001b00:	08001c7f 	.word	0x08001c7f
 8001b04:	08001c7f 	.word	0x08001c7f
 8001b08:	08001c7f 	.word	0x08001c7f
 8001b0c:	08001c7f 	.word	0x08001c7f
 8001b10:	08001c0d 	.word	0x08001c0d
 8001b14:	08001c7f 	.word	0x08001c7f
 8001b18:	08001c7f 	.word	0x08001c7f
 8001b1c:	08001c7f 	.word	0x08001c7f
 8001b20:	08001c7f 	.word	0x08001c7f
 8001b24:	08001c7f 	.word	0x08001c7f
 8001b28:	08001c59 	.word	0x08001c59
 8001b2c:	08001c59 	.word	0x08001c59
 8001b30:	08001c7f 	.word	0x08001c7f
 8001b34:	08001c7f 	.word	0x08001c7f
 8001b38:	08001c33 	.word	0x08001c33
  else
  {
    switch (param)
    {
      case L6474_EL_POS:
        if  ((value !=0)&&
 8001b3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b40:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b48:	d021      	beq.n	8001b8e <L6474_SetAnalogValue+0xe2>
 8001b4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b4e:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001ca0 <L6474_SetAnalogValue+0x1f4>
 8001b52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5a:	dc15      	bgt.n	8001b88 <L6474_SetAnalogValue+0xdc>
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
             (value < (1<<(7-(L6474_STEP_MODE_STEP_SEL & L6474_CmdGetParam(0,L6474_STEP_MODE)))))))
 8001b5c:	2116      	movs	r1, #22
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f7ff f914 	bl	8000d8c <L6474_CmdGetParam>
 8001b64:	4603      	mov	r3, r0
 8001b66:	43db      	mvns	r3, r3
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
 8001b7a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b86:	d502      	bpl.n	8001b8e <L6474_SetAnalogValue+0xe2>
        {
          result = FALSE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
        }
        break;
 8001b8c:	e079      	b.n	8001c82 <L6474_SetAnalogValue+0x1d6>
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
 8001b8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b96:	ee17 3a90 	vmov	r3, s15
 8001b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b9e:	617b      	str	r3, [r7, #20]
        break;
 8001ba0:	e06f      	b.n	8001c82 <L6474_SetAnalogValue+0x1d6>
      case L6474_ABS_POS:
      case L6474_MARK:
        if ((value >= L6474_MIN_POSITION) &&
 8001ba2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ba6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001ca4 <L6474_SetAnalogValue+0x1f8>
 8001baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb2:	db27      	blt.n	8001c04 <L6474_SetAnalogValue+0x158>
 8001bb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bb8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001ca8 <L6474_SetAnalogValue+0x1fc>
 8001bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc4:	d81e      	bhi.n	8001c04 <L6474_SetAnalogValue+0x158>
            (value <= L6474_MAX_POSITION))
        {
          if (value >= 0)
 8001bc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd2:	db09      	blt.n	8001be8 <L6474_SetAnalogValue+0x13c>
          {
            registerValue = ((uint32_t) value)& L6474_ABS_POS_VALUE_MASK;
 8001bd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bdc:	ee17 3a90 	vmov	r3, s15
 8001be0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001be4:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001be6:	e010      	b.n	8001c0a <L6474_SetAnalogValue+0x15e>
          }
          else
          {
            registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-value))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001be8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bec:	eef1 7a67 	vneg.f32	s15, s15
 8001bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bf4:	ee17 3a90 	vmov	r3, s15
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001bfe:	3301      	adds	r3, #1
 8001c00:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001c02:	e002      	b.n	8001c0a <L6474_SetAnalogValue+0x15e>
          }
        }
        else 
        {
          result = FALSE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	74fb      	strb	r3, [r7, #19]
        }
        break;
 8001c08:	e03b      	b.n	8001c82 <L6474_SetAnalogValue+0x1d6>
 8001c0a:	e03a      	b.n	8001c82 <L6474_SetAnalogValue+0x1d6>
      case L6474_TVAL:
        if (value > L6474_TVAL_MAX_VALUE)
 8001c0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c10:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001cac <L6474_SetAnalogValue+0x200>
 8001c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1c:	dd02      	ble.n	8001c24 <L6474_SetAnalogValue+0x178>
        {
          result = FALSE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tval_Current_to_Par(value);
        }
        break;
 8001c22:	e02e      	b.n	8001c82 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tval_Current_to_Par(value);
 8001c24:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c28:	f001 f98a 	bl	8002f40 <L6474_Tval_Current_to_Par>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	617b      	str	r3, [r7, #20]
        break;
 8001c30:	e027      	b.n	8001c82 <L6474_SetAnalogValue+0x1d6>
      case L6474_OCD_TH:
        if (value > L6474_OCD_TH_MAX_VALUE)
 8001c32:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c36:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001cb0 <L6474_SetAnalogValue+0x204>
 8001c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c42:	dd02      	ble.n	8001c4a <L6474_SetAnalogValue+0x19e>
        {
          result = FALSE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	74fb      	strb	r3, [r7, #19]
        }
        else 
        {
          registerValue = L6474_Ocd_Th_to_Par(value);
        }
        break;
 8001c48:	e01b      	b.n	8001c82 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Ocd_Th_to_Par(value);
 8001c4a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c4e:	f001 f953 	bl	8002ef8 <L6474_Ocd_Th_to_Par>
 8001c52:	4603      	mov	r3, r0
 8001c54:	617b      	str	r3, [r7, #20]
        break;
 8001c56:	e014      	b.n	8001c82 <L6474_SetAnalogValue+0x1d6>
      case L6474_TON_MIN:
      case L6474_TOFF_MIN:
        if (value > L6474_TOFF_TON_MIN_MAX_VALUE)
 8001c58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c5c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001cb4 <L6474_SetAnalogValue+0x208>
 8001c60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c68:	dd02      	ble.n	8001c70 <L6474_SetAnalogValue+0x1c4>
        {
          result = FALSE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tmin_Time_to_Par(value);
        }
        break;    
 8001c6e:	e008      	b.n	8001c82 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tmin_Time_to_Par(value);
 8001c70:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c74:	f001 f988 	bl	8002f88 <L6474_Tmin_Time_to_Par>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	617b      	str	r3, [r7, #20]
        break;    
 8001c7c:	e001      	b.n	8001c82 <L6474_SetAnalogValue+0x1d6>
      default:
        result = FALSE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	74fb      	strb	r3, [r7, #19]
    }
    if (result != FALSE)
 8001c82:	7cfb      	ldrb	r3, [r7, #19]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <L6474_SetAnalogValue+0x1e8>
    {
      L6474_CmdSetParam(deviceId, param, registerValue);
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fa02 	bl	8001098 <L6474_CmdSetParam>
    }
  }
  return result;
 8001c94:	7cfb      	ldrb	r3, [r7, #19]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	43ff8000 	.word	0x43ff8000
 8001ca4:	ca000000 	.word	0xca000000
 8001ca8:	49fffff8 	.word	0x49fffff8
 8001cac:	457a0000 	.word	0x457a0000
 8001cb0:	45bb8000 	.word	0x45bb8000
 8001cb4:	42800000 	.word	0x42800000

08001cb8 <L6474_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	71fb      	strb	r3, [r7, #7]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73fb      	strb	r3, [r7, #15]
  if ((newDec != 0)&& 
 8001ccc:	88bb      	ldrh	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d023      	beq.n	8001d1a <L6474_SetDeceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001cd2:	79fa      	ldrb	r2, [r7, #7]
 8001cd4:	4914      	ldr	r1, [pc, #80]	; (8001d28 <L6474_SetDeceleration+0x70>)
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	440b      	add	r3, r1
 8001ce0:	3324      	adds	r3, #36	; 0x24
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	b2db      	uxtb	r3, r3
  if ((newDec != 0)&& 
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d00b      	beq.n	8001d02 <L6474_SetDeceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001cea:	79fa      	ldrb	r2, [r7, #7]
 8001cec:	490e      	ldr	r1, [pc, #56]	; (8001d28 <L6474_SetDeceleration+0x70>)
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3322      	adds	r3, #34	; 0x22
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10b      	bne.n	8001d1a <L6474_SetDeceleration+0x62>
  {
    devicePrm[deviceId].deceleration = newDec;
 8001d02:	79fa      	ldrb	r2, [r7, #7]
 8001d04:	4908      	ldr	r1, [pc, #32]	; (8001d28 <L6474_SetDeceleration+0x70>)
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	440b      	add	r3, r1
 8001d10:	331a      	adds	r3, #26
 8001d12:	88ba      	ldrh	r2, [r7, #4]
 8001d14:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001d16:	2301      	movs	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
  }      
  return cmdExecuted;
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
}        
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	20004c9c 	.word	0x20004c9c

08001d2c <L6474_SetDirection>:
 * @note The direction change is only applied if the device 
 * is in INACTIVE state
 * @retval None
 **********************************************************/
void L6474_SetDirection(uint8_t deviceId, motorDir_t dir)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	460a      	mov	r2, r1
 8001d36:	71fb      	strb	r3, [r7, #7]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	71bb      	strb	r3, [r7, #6]
  if (devicePrm[deviceId].motionState == INACTIVE)
 8001d3c:	79fa      	ldrb	r2, [r7, #7]
 8001d3e:	490f      	ldr	r1, [pc, #60]	; (8001d7c <L6474_SetDirection+0x50>)
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	440b      	add	r3, r1
 8001d4a:	3324      	adds	r3, #36	; 0x24
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d10f      	bne.n	8001d74 <L6474_SetDirection+0x48>
  {
    devicePrm[deviceId].direction = dir;
 8001d54:	79fa      	ldrb	r2, [r7, #7]
 8001d56:	4909      	ldr	r1, [pc, #36]	; (8001d7c <L6474_SetDirection+0x50>)
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	440b      	add	r3, r1
 8001d62:	3323      	adds	r3, #35	; 0x23
 8001d64:	79ba      	ldrb	r2, [r7, #6]
 8001d66:	701a      	strb	r2, [r3, #0]
    L6474_Board_SetDirectionGpio(deviceId, dir);
 8001d68:	79ba      	ldrb	r2, [r7, #6]
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f002 f9e2 	bl	8004138 <L6474_Board_SetDirectionGpio>
  }
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20004c9c 	.word	0x20004c9c

08001d80 <L6474_SetHome>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new home position
 * @retval None
 **********************************************************/
void L6474_SetHome(uint8_t deviceId, int32_t homePos)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	71fb      	strb	r3, [r7, #7]
  int32_t absHomePos = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS)) - homePos;
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	2101      	movs	r1, #1
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fffb 	bl	8000d8c <L6474_CmdGetParam>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 fa25 	bl	80021e8 <L6474_ConvertPosition>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	60bb      	str	r3, [r7, #8]
  uint32_t registerValue;
  
  if (absHomePos >= 0)
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db04      	blt.n	8001db6 <L6474_SetHome+0x36>
  {
    registerValue = ((uint32_t) absHomePos)& L6474_ABS_POS_VALUE_MASK;
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	e005      	b.n	8001dc2 <L6474_SetHome+0x42>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-absHomePos))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	60fb      	str	r3, [r7, #12]
  }
 
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, registerValue);
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff f965 	bl	8001098 <L6474_CmdSetParam>
}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <L6474_SetMark>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new Mark position
 * @retval None
 **********************************************************/
void L6474_SetMark(uint8_t deviceId, int32_t markPos)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	6039      	str	r1, [r7, #0]
 8001de0:	71fb      	strb	r3, [r7, #7]
  uint32_t registerValue;
  if (markPos >= 0)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	db04      	blt.n	8001df2 <L6474_SetMark+0x1c>
  {
    registerValue = ((uint32_t) markPos)& L6474_ABS_POS_VALUE_MASK;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	e005      	b.n	8001dfe <L6474_SetMark+0x28>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-markPos))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	60fb      	str	r3, [r7, #12]
  }
  
  L6474_CmdSetParam(deviceId,L6474_MARK, registerValue);
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	2103      	movs	r1, #3
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff f947 	bl	8001098 <L6474_CmdSetParam>
}
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <L6474_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	460a      	mov	r2, r1
 8001e1e:	71fb      	strb	r3, [r7, #7]
 8001e20:	4613      	mov	r3, r2
 8001e22:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
 8001e28:	88bb      	ldrh	r3, [r7, #4]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d935      	bls.n	8001e9a <L6474_SetMaxSpeed+0x86>
 8001e2e:	88bb      	ldrh	r3, [r7, #4]
 8001e30:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d830      	bhi.n	8001e9a <L6474_SetMaxSpeed+0x86>
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001e38:	79fa      	ldrb	r2, [r7, #7]
 8001e3a:	491b      	ldr	r1, [pc, #108]	; (8001ea8 <L6474_SetMaxSpeed+0x94>)
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	331e      	adds	r3, #30
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
 8001e4c:	88ba      	ldrh	r2, [r7, #4]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d323      	bcc.n	8001e9a <L6474_SetMaxSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001e52:	79fa      	ldrb	r2, [r7, #7]
 8001e54:	4914      	ldr	r1, [pc, #80]	; (8001ea8 <L6474_SetMaxSpeed+0x94>)
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	440b      	add	r3, r1
 8001e60:	3324      	adds	r3, #36	; 0x24
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	b2db      	uxtb	r3, r3
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d00b      	beq.n	8001e82 <L6474_SetMaxSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001e6a:	79fa      	ldrb	r2, [r7, #7]
 8001e6c:	490e      	ldr	r1, [pc, #56]	; (8001ea8 <L6474_SetMaxSpeed+0x94>)
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	440b      	add	r3, r1
 8001e78:	3322      	adds	r3, #34	; 0x22
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10b      	bne.n	8001e9a <L6474_SetMaxSpeed+0x86>
  {
    devicePrm[deviceId].maxSpeed = newMaxSpeed;
 8001e82:	79fa      	ldrb	r2, [r7, #7]
 8001e84:	4908      	ldr	r1, [pc, #32]	; (8001ea8 <L6474_SetMaxSpeed+0x94>)
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	440b      	add	r3, r1
 8001e90:	331c      	adds	r3, #28
 8001e92:	88ba      	ldrh	r2, [r7, #4]
 8001e94:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001e96:	2301      	movs	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	20004c9c 	.word	0x20004c9c

08001eac <L6474_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	71fb      	strb	r3, [r7, #7]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	73fb      	strb	r3, [r7, #15]
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
 8001ec0:	88bb      	ldrh	r3, [r7, #4]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d935      	bls.n	8001f32 <L6474_SetMinSpeed+0x86>
 8001ec6:	88bb      	ldrh	r3, [r7, #4]
 8001ec8:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d830      	bhi.n	8001f32 <L6474_SetMinSpeed+0x86>
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8001ed0:	79fa      	ldrb	r2, [r7, #7]
 8001ed2:	491b      	ldr	r1, [pc, #108]	; (8001f40 <L6474_SetMinSpeed+0x94>)
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	440b      	add	r3, r1
 8001ede:	331c      	adds	r3, #28
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	b29b      	uxth	r3, r3
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
 8001ee4:	88ba      	ldrh	r2, [r7, #4]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d823      	bhi.n	8001f32 <L6474_SetMinSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001eea:	79fa      	ldrb	r2, [r7, #7]
 8001eec:	4914      	ldr	r1, [pc, #80]	; (8001f40 <L6474_SetMinSpeed+0x94>)
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	440b      	add	r3, r1
 8001ef8:	3324      	adds	r3, #36	; 0x24
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	b2db      	uxtb	r3, r3
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d00b      	beq.n	8001f1a <L6474_SetMinSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001f02:	79fa      	ldrb	r2, [r7, #7]
 8001f04:	490e      	ldr	r1, [pc, #56]	; (8001f40 <L6474_SetMinSpeed+0x94>)
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	3322      	adds	r3, #34	; 0x22
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10b      	bne.n	8001f32 <L6474_SetMinSpeed+0x86>
  {
    devicePrm[deviceId].minSpeed = newMinSpeed;
 8001f1a:	79fa      	ldrb	r2, [r7, #7]
 8001f1c:	4908      	ldr	r1, [pc, #32]	; (8001f40 <L6474_SetMinSpeed+0x94>)
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	440b      	add	r3, r1
 8001f28:	331e      	adds	r3, #30
 8001f2a:	88ba      	ldrh	r2, [r7, #4]
 8001f2c:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	73fb      	strb	r3, [r7, #15]
  }  
  return cmdExecuted;
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
}                 
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	20004c9c 	.word	0x20004c9c

08001f44 <L6474_SetStopMode>:
 * @param[in] deviceId Unused parameter
 * @param[in] stopMode HOLD_MODE to let power bridge enabled
 * @retval None
 **********************************************************/
void L6474_SetStopMode(uint8_t deviceId, motorStopMode_t stopMode)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	460a      	mov	r2, r1
 8001f4e:	71fb      	strb	r3, [r7, #7]
 8001f50:	4613      	mov	r3, r2
 8001f52:	71bb      	strb	r3, [r7, #6]
  devicePrm[deviceId].stopMode = stopMode;
 8001f54:	79fa      	ldrb	r2, [r7, #7]
 8001f56:	4907      	ldr	r1, [pc, #28]	; (8001f74 <L6474_SetStopMode+0x30>)
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	440b      	add	r3, r1
 8001f62:	3325      	adds	r3, #37	; 0x25
 8001f64:	79ba      	ldrb	r2, [r7, #6]
 8001f66:	701a      	strb	r2, [r3, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	20004c9c 	.word	0x20004c9c

08001f78 <L6474_SoftStop>:
 * @param[in] deviceId (from 0 to 2)
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is in INACTIVE state.
 **********************************************************/
bool L6474_SoftStop(uint8_t deviceId)
{	
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  bool cmdExecuted = FALSE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	73fb      	strb	r3, [r7, #15]
  if (devicePrm[deviceId].motionState != INACTIVE)
 8001f86:	79fa      	ldrb	r2, [r7, #7]
 8001f88:	490e      	ldr	r1, [pc, #56]	; (8001fc4 <L6474_SoftStop+0x4c>)
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	3324      	adds	r3, #36	; 0x24
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d00b      	beq.n	8001fb6 <L6474_SoftStop+0x3e>
  {
    devicePrm[deviceId].commandExecuted = SOFT_STOP_CMD;
 8001f9e:	79fa      	ldrb	r2, [r7, #7]
 8001fa0:	4908      	ldr	r1, [pc, #32]	; (8001fc4 <L6474_SoftStop+0x4c>)
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	440b      	add	r3, r1
 8001fac:	3322      	adds	r3, #34	; 0x22
 8001fae:	2202      	movs	r2, #2
 8001fb0:	701a      	strb	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	73fb      	strb	r3, [r7, #15]
  }
  return (cmdExecuted);
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	20004c9c 	.word	0x20004c9c

08001fc8 <L6474_WaitWhileActive>:
 * @brief  Locks until the device state becomes Inactive
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_WaitWhileActive(uint8_t deviceId)
 {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (L6474_GetDeviceState(deviceId) != INACTIVE);
 8001fd2:	bf00      	nop
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff f9d6 	bl	8001388 <L6474_GetDeviceState>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d1f8      	bne.n	8001fd4 <L6474_WaitWhileActive+0xc>
}
 8001fe2:	bf00      	nop
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <L6474_ApplySpeed>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] newSpeed in pps
 * @retval None
 **********************************************************/
void L6474_ApplySpeed(uint8_t deviceId, uint16_t newSpeed)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	460a      	mov	r2, r1
 8001ff6:	71fb      	strb	r3, [r7, #7]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	80bb      	strh	r3, [r7, #4]
  if (newSpeed < L6474_MIN_PWM_FREQ)
 8001ffc:	88bb      	ldrh	r3, [r7, #4]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d801      	bhi.n	8002006 <L6474_ApplySpeed+0x1a>
  {
    newSpeed = L6474_MIN_PWM_FREQ;  
 8002002:	2302      	movs	r3, #2
 8002004:	80bb      	strh	r3, [r7, #4]
  }
  if (newSpeed > L6474_MAX_PWM_FREQ)
 8002006:	88bb      	ldrh	r3, [r7, #4]
 8002008:	f242 7210 	movw	r2, #10000	; 0x2710
 800200c:	4293      	cmp	r3, r2
 800200e:	d902      	bls.n	8002016 <L6474_ApplySpeed+0x2a>
  {
    newSpeed = L6474_MAX_PWM_FREQ;
 8002010:	f242 7310 	movw	r3, #10000	; 0x2710
 8002014:	80bb      	strh	r3, [r7, #4]
  }
  
  devicePrm[deviceId].speed = newSpeed;
 8002016:	79fa      	ldrb	r2, [r7, #7]
 8002018:	4913      	ldr	r1, [pc, #76]	; (8002068 <L6474_ApplySpeed+0x7c>)
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	440b      	add	r3, r1
 8002024:	3320      	adds	r3, #32
 8002026:	88ba      	ldrh	r2, [r7, #4]
 8002028:	801a      	strh	r2, [r3, #0]

  switch (deviceId)
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d010      	beq.n	8002052 <L6474_ApplySpeed+0x66>
 8002030:	2b02      	cmp	r3, #2
 8002032:	dc13      	bgt.n	800205c <L6474_ApplySpeed+0x70>
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <L6474_ApplySpeed+0x52>
 8002038:	2b01      	cmp	r3, #1
 800203a:	d005      	beq.n	8002048 <L6474_ApplySpeed+0x5c>
      break;
    case 2:
      L6474_Board_Pwm3SetFreq(newSpeed);
      break;
    default:
      break; //ignore error
 800203c:	e00e      	b.n	800205c <L6474_ApplySpeed+0x70>
      L6474_Board_Pwm1SetFreq(newSpeed);
 800203e:	88bb      	ldrh	r3, [r7, #4]
 8002040:	4618      	mov	r0, r3
 8002042:	f001 ff63 	bl	8003f0c <L6474_Board_Pwm1SetFreq>
      break;
 8002046:	e00a      	b.n	800205e <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm2SetFreq(newSpeed);
 8002048:	88bb      	ldrh	r3, [r7, #4]
 800204a:	4618      	mov	r0, r3
 800204c:	f001 ff84 	bl	8003f58 <L6474_Board_Pwm2SetFreq>
      break;
 8002050:	e005      	b.n	800205e <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm3SetFreq(newSpeed);
 8002052:	88bb      	ldrh	r3, [r7, #4]
 8002054:	4618      	mov	r0, r3
 8002056:	f001 ffa5 	bl	8003fa4 <L6474_Board_Pwm3SetFreq>
      break;
 800205a:	e000      	b.n	800205e <L6474_ApplySpeed+0x72>
      break; //ignore error
 800205c:	bf00      	nop
  }
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20004c9c 	.word	0x20004c9c

0800206c <L6474_ComputeSpeedProfile>:
 * speed.
 * Else, a triangular move is performed (no steady phase: the maximum speed is never
 * reached.
 **********************************************************/
void L6474_ComputeSpeedProfile(uint8_t deviceId, uint32_t nbSteps)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	71fb      	strb	r3, [r7, #7]
  uint32_t reqAccSteps; 
  uint32_t reqDecSteps;
   
  /* compute the number of steps to get the targeted speed */
  uint16_t minSpeed = devicePrm[deviceId].minSpeed;
 8002078:	79fa      	ldrb	r2, [r7, #7]
 800207a:	495a      	ldr	r1, [pc, #360]	; (80021e4 <L6474_ComputeSpeedProfile+0x178>)
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	440b      	add	r3, r1
 8002086:	331e      	adds	r3, #30
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	837b      	strh	r3, [r7, #26]
  reqAccSteps = (devicePrm[deviceId].maxSpeed - minSpeed);
 800208c:	79fa      	ldrb	r2, [r7, #7]
 800208e:	4955      	ldr	r1, [pc, #340]	; (80021e4 <L6474_ComputeSpeedProfile+0x178>)
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	440b      	add	r3, r1
 800209a:	331c      	adds	r3, #28
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	8b7b      	ldrh	r3, [r7, #26]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	61fb      	str	r3, [r7, #28]
  reqAccSteps *= (devicePrm[deviceId].maxSpeed + minSpeed);
 80020a8:	79fa      	ldrb	r2, [r7, #7]
 80020aa:	494e      	ldr	r1, [pc, #312]	; (80021e4 <L6474_ComputeSpeedProfile+0x178>)
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	440b      	add	r3, r1
 80020b6:	331c      	adds	r3, #28
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	8b7b      	ldrh	r3, [r7, #26]
 80020c0:	4413      	add	r3, r2
 80020c2:	461a      	mov	r2, r3
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	61fb      	str	r3, [r7, #28]
  reqDecSteps = reqAccSteps;
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	617b      	str	r3, [r7, #20]
  reqAccSteps /= (uint32_t)devicePrm[deviceId].acceleration;
 80020d0:	79fa      	ldrb	r2, [r7, #7]
 80020d2:	4944      	ldr	r1, [pc, #272]	; (80021e4 <L6474_ComputeSpeedProfile+0x178>)
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	440b      	add	r3, r1
 80020de:	3318      	adds	r3, #24
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80020ec:	61fb      	str	r3, [r7, #28]
  reqAccSteps /= 2;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	085b      	lsrs	r3, r3, #1
 80020f2:	61fb      	str	r3, [r7, #28]

  /* compute the number of steps to stop */
  reqDecSteps /= (uint32_t)devicePrm[deviceId].deceleration;
 80020f4:	79fa      	ldrb	r2, [r7, #7]
 80020f6:	493b      	ldr	r1, [pc, #236]	; (80021e4 <L6474_ComputeSpeedProfile+0x178>)
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	331a      	adds	r3, #26
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002110:	617b      	str	r3, [r7, #20]
  reqDecSteps /= 2;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	085b      	lsrs	r3, r3, #1
 8002116:	617b      	str	r3, [r7, #20]

	if(( reqAccSteps + reqDecSteps ) > nbSteps)
 8002118:	69fa      	ldr	r2, [r7, #28]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	4413      	add	r3, r2
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d242      	bcs.n	80021aa <L6474_ComputeSpeedProfile+0x13e>
	{	
    /* Triangular move  */
    /* reqDecSteps = (Pos * Dec) /(Dec+Acc) */
    uint32_t dec = devicePrm[deviceId].deceleration;
 8002124:	79fa      	ldrb	r2, [r7, #7]
 8002126:	492f      	ldr	r1, [pc, #188]	; (80021e4 <L6474_ComputeSpeedProfile+0x178>)
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	440b      	add	r3, r1
 8002132:	331a      	adds	r3, #26
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	b29b      	uxth	r3, r3
 8002138:	613b      	str	r3, [r7, #16]
    uint32_t acc = devicePrm[deviceId].acceleration;
 800213a:	79fa      	ldrb	r2, [r7, #7]
 800213c:	4929      	ldr	r1, [pc, #164]	; (80021e4 <L6474_ComputeSpeedProfile+0x178>)
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	440b      	add	r3, r1
 8002148:	3318      	adds	r3, #24
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	60fb      	str	r3, [r7, #12]
    
    reqDecSteps =  ((uint32_t) dec * nbSteps) / (acc + dec);
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	fb02 f203 	mul.w	r2, r2, r3
 8002158:	68f9      	ldr	r1, [r7, #12]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	440b      	add	r3, r1
 800215e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002162:	617b      	str	r3, [r7, #20]
    if (reqDecSteps > 1)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d908      	bls.n	800217c <L6474_ComputeSpeedProfile+0x110>
    {
      reqAccSteps = reqDecSteps - 1;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	3b01      	subs	r3, #1
 800216e:	61fb      	str	r3, [r7, #28]
      if(reqAccSteps == 0)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d104      	bne.n	8002180 <L6474_ComputeSpeedProfile+0x114>
      {
        reqAccSteps = 1;
 8002176:	2301      	movs	r3, #1
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	e001      	b.n	8002180 <L6474_ComputeSpeedProfile+0x114>
      }      
    }
    else
    {
      reqAccSteps = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
    }
    devicePrm[deviceId].endAccPos = reqAccSteps;
 8002180:	79fa      	ldrb	r2, [r7, #7]
 8002182:	4918      	ldr	r1, [pc, #96]	; (80021e4 <L6474_ComputeSpeedProfile+0x178>)
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	440b      	add	r3, r1
 800218e:	3308      	adds	r3, #8
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = reqDecSteps;
 8002194:	79fa      	ldrb	r2, [r7, #7]
 8002196:	4913      	ldr	r1, [pc, #76]	; (80021e4 <L6474_ComputeSpeedProfile+0x178>)
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	440b      	add	r3, r1
 80021a2:	3310      	adds	r3, #16
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	601a      	str	r2, [r3, #0]
    /* steady phase from  endAccPos to startDecPos */
    /* decelerating from startDecPos to stepsToTake*/
    devicePrm[deviceId].endAccPos = reqAccSteps;
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
	}
}
 80021a8:	e016      	b.n	80021d8 <L6474_ComputeSpeedProfile+0x16c>
    devicePrm[deviceId].endAccPos = reqAccSteps;
 80021aa:	79fa      	ldrb	r2, [r7, #7]
 80021ac:	490d      	ldr	r1, [pc, #52]	; (80021e4 <L6474_ComputeSpeedProfile+0x178>)
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	440b      	add	r3, r1
 80021b8:	3308      	adds	r3, #8
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	79fa      	ldrb	r2, [r7, #7]
 80021c6:	1e59      	subs	r1, r3, #1
 80021c8:	4806      	ldr	r0, [pc, #24]	; (80021e4 <L6474_ComputeSpeedProfile+0x178>)
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4403      	add	r3, r0
 80021d4:	3310      	adds	r3, #16
 80021d6:	6019      	str	r1, [r3, #0]
}
 80021d8:	bf00      	nop
 80021da:	3724      	adds	r7, #36	; 0x24
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	20004c9c 	.word	0x20004c9c

080021e8 <L6474_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t L6474_ConvertPosition(uint32_t abs_position_reg)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  int32_t operation_result;

  if (abs_position_reg & L6474_ABS_POS_SIGN_BIT_MASK) 
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00d      	beq.n	8002216 <L6474_ConvertPosition+0x2e>
  {
    /* Negative register value */
    abs_position_reg = ~abs_position_reg;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	607b      	str	r3, [r7, #4]
    abs_position_reg += 1;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3301      	adds	r3, #1
 8002204:	607b      	str	r3, [r7, #4]

    operation_result = (int32_t) (abs_position_reg & L6474_ABS_POS_VALUE_MASK);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800220c:	60fb      	str	r3, [r7, #12]
    operation_result = -operation_result;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	425b      	negs	r3, r3
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	e001      	b.n	800221a <L6474_ConvertPosition+0x32>
  } 
  else 
  {
    operation_result = (int32_t) abs_position_reg;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	60fb      	str	r3, [r7, #12]
  }
  return operation_result;
 800221a:	68fb      	ldr	r3, [r7, #12]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <L6474_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void L6474_ErrorHandler(uint16_t error)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <L6474_ErrorHandler+0x28>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <L6474_ErrorHandler+0x1e>
  {
    (void) errorHandlerCallback(error);
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <L6474_ErrorHandler+0x28>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	88fa      	ldrh	r2, [r7, #6]
 8002240:	4610      	mov	r0, r2
 8002242:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 8002244:	e000      	b.n	8002248 <L6474_ErrorHandler+0x20>
    while(1)
 8002246:	e7fe      	b.n	8002246 <L6474_ErrorHandler+0x1e>
}
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20004d14 	.word	0x20004d14

08002254 <L6474_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void L6474_FlagInterruptHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 8002258:	4b07      	ldr	r3, [pc, #28]	; (8002278 <L6474_FlagInterruptHandler+0x24>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <L6474_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <L6474_FlagInterruptHandler+0x28>)
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 8002266:	4b04      	ldr	r3, [pc, #16]	; (8002278 <L6474_FlagInterruptHandler+0x24>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 800226c:	4b03      	ldr	r3, [pc, #12]	; (800227c <L6474_FlagInterruptHandler+0x28>)
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
  }
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20004d18 	.word	0x20004d18
 800227c:	200001a1 	.word	0x200001a1

08002280 <L6474_SendCommand>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Command to send 
 * @retval None
 **********************************************************/
void L6474_SendCommand(uint8_t deviceId, uint8_t param)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	460a      	mov	r2, r1
 800228a:	71fb      	strb	r3, [r7, #7]
 800228c:	4613      	mov	r3, r2
 800228e:	71bb      	strb	r3, [r7, #6]
  uint32_t i;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8002290:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <L6474_SendCommand+0x90>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	3b01      	subs	r3, #1
 800229e:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 80022a0:	2300      	movs	r3, #0
 80022a2:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 80022a4:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <L6474_SendCommand+0x94>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80022aa:	7afb      	ldrb	r3, [r7, #11]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <L6474_SendCommand+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80022b0:	f001 fd6a 	bl	8003d88 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	72fb      	strb	r3, [r7, #11]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	e008      	b.n	80022d0 <L6474_SendCommand+0x50>
    {
      spiTxBursts[3][i] = L6474_NOP;     
 80022be:	4a16      	ldr	r2, [pc, #88]	; (8002318 <L6474_SendCommand+0x98>)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	3309      	adds	r3, #9
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	3301      	adds	r3, #1
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <L6474_SendCommand+0x90>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	461a      	mov	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4293      	cmp	r3, r2
 80022dc:	d3ef      	bcc.n	80022be <L6474_SendCommand+0x3e>
    }
    spiTxBursts[3][spiIndex] = param;
 80022de:	7abb      	ldrb	r3, [r7, #10]
 80022e0:	4a0d      	ldr	r2, [pc, #52]	; (8002318 <L6474_SendCommand+0x98>)
 80022e2:	4413      	add	r3, r2
 80022e4:	79ba      	ldrb	r2, [r7, #6]
 80022e6:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80022e8:	f001 fd45 	bl	8003d76 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80022ec:	2301      	movs	r3, #1
 80022ee:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <L6474_SendCommand+0x94>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1d4      	bne.n	80022a4 <L6474_SendCommand+0x24>

  L6474_WriteBytes(&spiTxBursts[3][0], &spiRxBursts[3][0]); 
 80022fa:	4908      	ldr	r1, [pc, #32]	; (800231c <L6474_SendCommand+0x9c>)
 80022fc:	4808      	ldr	r0, [pc, #32]	; (8002320 <L6474_SendCommand+0xa0>)
 80022fe:	f000 fe61 	bl	8002fc4 <L6474_WriteBytes>
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8002302:	f001 fd41 	bl	8003d88 <L6474_Board_EnableIrq>
}
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000184 	.word	0x20000184
 8002314:	200001a0 	.word	0x200001a0
 8002318:	20000188 	.word	0x20000188
 800231c:	2000019d 	.word	0x2000019d
 8002320:	20000191 	.word	0x20000191

08002324 <L6474_SetDeviceParamsToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = pInitPrm->acceleration_step_s2;
 8002330:	79fa      	ldrb	r2, [r7, #7]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	8818      	ldrh	r0, [r3, #0]
 8002336:	494c      	ldr	r1, [pc, #304]	; (8002468 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	440b      	add	r3, r1
 8002342:	3318      	adds	r3, #24
 8002344:	4602      	mov	r2, r0
 8002346:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = pInitPrm->deceleration_step_s2;
 8002348:	79fa      	ldrb	r2, [r7, #7]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	8858      	ldrh	r0, [r3, #2]
 800234e:	4946      	ldr	r1, [pc, #280]	; (8002468 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	440b      	add	r3, r1
 800235a:	331a      	adds	r3, #26
 800235c:	4602      	mov	r2, r0
 800235e:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = pInitPrm->maximum_speed_step_s;
 8002360:	79fa      	ldrb	r2, [r7, #7]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	8898      	ldrh	r0, [r3, #4]
 8002366:	4940      	ldr	r1, [pc, #256]	; (8002468 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	440b      	add	r3, r1
 8002372:	331c      	adds	r3, #28
 8002374:	4602      	mov	r2, r0
 8002376:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = pInitPrm->minimum_speed_step_s;
 8002378:	79fa      	ldrb	r2, [r7, #7]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	88d8      	ldrh	r0, [r3, #6]
 800237e:	493a      	ldr	r1, [pc, #232]	; (8002468 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	440b      	add	r3, r1
 800238a:	331e      	adds	r3, #30
 800238c:	4602      	mov	r2, r0
 800238e:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 8002390:	79fa      	ldrb	r2, [r7, #7]
 8002392:	4935      	ldr	r1, [pc, #212]	; (8002468 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	440b      	add	r3, r1
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 80023a2:	79fa      	ldrb	r2, [r7, #7]
 80023a4:	4930      	ldr	r1, [pc, #192]	; (8002468 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	440b      	add	r3, r1
 80023b0:	3304      	adds	r3, #4
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 80023b6:	79fa      	ldrb	r2, [r7, #7]
 80023b8:	492b      	ldr	r1, [pc, #172]	; (8002468 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	440b      	add	r3, r1
 80023c4:	3308      	adds	r3, #8
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 80023ca:	79fa      	ldrb	r2, [r7, #7]
 80023cc:	4926      	ldr	r1, [pc, #152]	; (8002468 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	440b      	add	r3, r1
 80023d8:	330c      	adds	r3, #12
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 80023de:	79fa      	ldrb	r2, [r7, #7]
 80023e0:	4921      	ldr	r1, [pc, #132]	; (8002468 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	440b      	add	r3, r1
 80023ec:	3310      	adds	r3, #16
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 80023f2:	79fa      	ldrb	r2, [r7, #7]
 80023f4:	491c      	ldr	r1, [pc, #112]	; (8002468 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	3314      	adds	r3, #20
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8002406:	79fa      	ldrb	r2, [r7, #7]
 8002408:	4917      	ldr	r1, [pc, #92]	; (8002468 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	440b      	add	r3, r1
 8002414:	3320      	adds	r3, #32
 8002416:	2200      	movs	r2, #0
 8002418:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 800241a:	79fa      	ldrb	r2, [r7, #7]
 800241c:	4912      	ldr	r1, [pc, #72]	; (8002468 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	3322      	adds	r3, #34	; 0x22
 800242a:	2203      	movs	r2, #3
 800242c:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 800242e:	79fa      	ldrb	r2, [r7, #7]
 8002430:	490d      	ldr	r1, [pc, #52]	; (8002468 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	440b      	add	r3, r1
 800243c:	3323      	adds	r3, #35	; 0x23
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;  
 8002442:	79fa      	ldrb	r2, [r7, #7]
 8002444:	4908      	ldr	r1, [pc, #32]	; (8002468 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	3324      	adds	r3, #36	; 0x24
 8002452:	2208      	movs	r2, #8
 8002454:	701a      	strb	r2, [r3, #0]
 
  L6474_SetRegisterToGivenValues(deviceId, pInitPrm);
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	6839      	ldr	r1, [r7, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f000 f8a2 	bl	80025a4 <L6474_SetRegisterToGivenValues>
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20004c9c 	.word	0x20004c9c

0800246c <L6474_SetDeviceParamsToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToPredefinedValues(uint8_t deviceId)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = L6474_CONF_PARAM_ACC_DEVICE_0;
 8002476:	79fa      	ldrb	r2, [r7, #7]
 8002478:	4949      	ldr	r1, [pc, #292]	; (80025a0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	440b      	add	r3, r1
 8002484:	3318      	adds	r3, #24
 8002486:	22a0      	movs	r2, #160	; 0xa0
 8002488:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = L6474_CONF_PARAM_DEC_DEVICE_0;
 800248a:	79fa      	ldrb	r2, [r7, #7]
 800248c:	4944      	ldr	r1, [pc, #272]	; (80025a0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	440b      	add	r3, r1
 8002498:	331a      	adds	r3, #26
 800249a:	22a0      	movs	r2, #160	; 0xa0
 800249c:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = L6474_CONF_PARAM_MAX_SPEED_DEVICE_0;
 800249e:	79fa      	ldrb	r2, [r7, #7]
 80024a0:	493f      	ldr	r1, [pc, #252]	; (80025a0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	440b      	add	r3, r1
 80024ac:	331c      	adds	r3, #28
 80024ae:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80024b2:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = L6474_CONF_PARAM_MIN_SPEED_DEVICE_0;
 80024b4:	79fa      	ldrb	r2, [r7, #7]
 80024b6:	493a      	ldr	r1, [pc, #232]	; (80025a0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	440b      	add	r3, r1
 80024c2:	331e      	adds	r3, #30
 80024c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80024c8:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 80024ca:	79fa      	ldrb	r2, [r7, #7]
 80024cc:	4934      	ldr	r1, [pc, #208]	; (80025a0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	440b      	add	r3, r1
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 80024dc:	79fa      	ldrb	r2, [r7, #7]
 80024de:	4930      	ldr	r1, [pc, #192]	; (80025a0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	440b      	add	r3, r1
 80024ea:	3304      	adds	r3, #4
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 80024f0:	79fa      	ldrb	r2, [r7, #7]
 80024f2:	492b      	ldr	r1, [pc, #172]	; (80025a0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	440b      	add	r3, r1
 80024fe:	3308      	adds	r3, #8
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8002504:	79fa      	ldrb	r2, [r7, #7]
 8002506:	4926      	ldr	r1, [pc, #152]	; (80025a0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	440b      	add	r3, r1
 8002512:	330c      	adds	r3, #12
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 8002518:	79fa      	ldrb	r2, [r7, #7]
 800251a:	4921      	ldr	r1, [pc, #132]	; (80025a0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	440b      	add	r3, r1
 8002526:	3310      	adds	r3, #16
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 800252c:	79fa      	ldrb	r2, [r7, #7]
 800252e:	491c      	ldr	r1, [pc, #112]	; (80025a0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	440b      	add	r3, r1
 800253a:	3314      	adds	r3, #20
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8002540:	79fa      	ldrb	r2, [r7, #7]
 8002542:	4917      	ldr	r1, [pc, #92]	; (80025a0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	3320      	adds	r3, #32
 8002550:	2200      	movs	r2, #0
 8002552:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8002554:	79fa      	ldrb	r2, [r7, #7]
 8002556:	4912      	ldr	r1, [pc, #72]	; (80025a0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	440b      	add	r3, r1
 8002562:	3322      	adds	r3, #34	; 0x22
 8002564:	2203      	movs	r2, #3
 8002566:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 8002568:	79fa      	ldrb	r2, [r7, #7]
 800256a:	490d      	ldr	r1, [pc, #52]	; (80025a0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	440b      	add	r3, r1
 8002576:	3323      	adds	r3, #35	; 0x23
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;
 800257c:	79fa      	ldrb	r2, [r7, #7]
 800257e:	4908      	ldr	r1, [pc, #32]	; (80025a0 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	440b      	add	r3, r1
 800258a:	3324      	adds	r3, #36	; 0x24
 800258c:	2208      	movs	r2, #8
 800258e:	701a      	strb	r2, [r3, #0]
  
  L6474_SetRegisterToPredefinedValues(deviceId);
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	4618      	mov	r0, r3
 8002594:	f000 f882 	bl	800269c <L6474_SetRegisterToPredefinedValues>

}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20004c9c 	.word	0x20004c9c

080025a4 <L6474_SetRegisterToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetRegisterToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	2200      	movs	r2, #0
 80025b4:	2101      	movs	r1, #1
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fd6e 	bl	8001098 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	2200      	movs	r2, #0
 80025c0:	2102      	movs	r1, #2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fd68 	bl	8001098 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	2200      	movs	r2, #0
 80025cc:	2103      	movs	r1, #3
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe fd62 	bl	8001098 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  L6474_SetAnalogValue(deviceId,
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	eeb0 0a67 	vmov.f32	s0, s15
 80025e0:	2109      	movs	r1, #9
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fa62 	bl	8001aac <L6474_SetAnalogValue>
                       L6474_TVAL,
                       pInitPrm->torque_regulation_current_mA);
  L6474_CmdSetParam(deviceId,
                    L6474_T_FAST,
                    (uint8_t) pInitPrm->maximum_fast_decay_time |
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	7d5a      	ldrb	r2, [r3, #21]
                    (uint8_t) pInitPrm->fall_time);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	7d1b      	ldrb	r3, [r3, #20]
  L6474_CmdSetParam(deviceId,
 80025f0:	4313      	orrs	r3, r2
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	210e      	movs	r1, #14
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fd4c 	bl	8001098 <L6474_CmdSetParam>
  L6474_SetAnalogValue(deviceId,
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	edd3 7a06 	vldr	s15, [r3, #24]
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	eeb0 0a67 	vmov.f32	s0, s15
 800260c:	210f      	movs	r1, #15
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fa4c 	bl	8001aac <L6474_SetAnalogValue>
                       L6474_TON_MIN,
                       pInitPrm->minimum_ON_time_us);
  L6474_SetAnalogValue(deviceId,
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	edd3 7a07 	vldr	s15, [r3, #28]
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	eeb0 0a67 	vmov.f32	s0, s15
 8002620:	2110      	movs	r1, #16
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fa42 	bl	8001aac <L6474_SetAnalogValue>
                       L6474_TOFF_MIN,
                       pInitPrm->minimum_OFF_time_us);
  L6474_SetAnalogValue(deviceId,
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	edd3 7a03 	vldr	s15, [r3, #12]
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	eeb0 0a67 	vmov.f32	s0, s15
 8002634:	2113      	movs	r1, #19
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fa38 	bl	8001aac <L6474_SetAnalogValue>
                       L6474_OCD_TH,
                       pInitPrm->overcurrent_threshold);
  L6474_CmdSetParam(deviceId,
                  L6474_STEP_MODE,
                  (uint8_t) pInitPrm->step_selection |
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	7c9a      	ldrb	r2, [r3, #18]
                  (uint8_t) pInitPrm->sync_selection);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	7cdb      	ldrb	r3, [r3, #19]
  L6474_CmdSetParam(deviceId,
 8002644:	4313      	orrs	r3, r2
 8002646:	b2db      	uxtb	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	2116      	movs	r1, #22
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fd22 	bl	8001098 <L6474_CmdSetParam>
  L6474_CmdSetParam(deviceId,
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	2117      	movs	r1, #23
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe fd1b 	bl	8001098 <L6474_CmdSetParam>
                    L6474_ALARM_EN,
                    pInitPrm->alarm);
  L6474_CmdSetParam(deviceId,
                    L6474_CONFIG,
                    (uint16_t) pInitPrm->clock |
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
                    (uint16_t) pInitPrm->torque_regulation_method |
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	7c5b      	ldrb	r3, [r3, #17]
 800266c:	4313      	orrs	r3, r2
 800266e:	b2da      	uxtb	r2, r3
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	7c1b      	ldrb	r3, [r3, #16]
                    (uint16_t) pInitPrm->torque_regulation_method |
 8002674:	4313      	orrs	r3, r2
 8002676:	b2db      	uxtb	r3, r3
 8002678:	461a      	mov	r2, r3
                    (uint16_t) pInitPrm->slew_rate |
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 800267e:	4313      	orrs	r3, r2
                    (uint16_t) pInitPrm->target_swicthing_period);
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	8c12      	ldrh	r2, [r2, #32]
                    (uint16_t) pInitPrm->slew_rate |
 8002684:	4313      	orrs	r3, r2
  L6474_CmdSetParam(deviceId,
 8002686:	461a      	mov	r2, r3
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	2118      	movs	r1, #24
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe fd03 	bl	8001098 <L6474_CmdSetParam>
  
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <L6474_SetRegisterToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetRegisterToPredefinedValues(uint8_t deviceId)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	2200      	movs	r2, #0
 80026aa:	2101      	movs	r1, #1
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fcf3 	bl	8001098 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	2200      	movs	r2, #0
 80026b6:	2102      	movs	r1, #2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe fced 	bl	8001098 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	2200      	movs	r2, #0
 80026c2:	2103      	movs	r1, #3
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe fce7 	bl	8001098 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  switch (deviceId)
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	f000 8094 	beq.w	80027fa <L6474_SetRegisterToPredefinedValues+0x15e>
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	f300 80d7 	bgt.w	8002886 <L6474_SetRegisterToPredefinedValues+0x1ea>
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <L6474_SetRegisterToPredefinedValues+0x46>
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d046      	beq.n	800276e <L6474_SetRegisterToPredefinedValues+0xd2>
#endif         
      break;
#endif      
    default: ;
  }
}
 80026e0:	e0d1      	b.n	8002886 <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_0));
 80026e2:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8002890 <L6474_SetRegisterToPredefinedValues+0x1f4>
 80026e6:	f000 fc2b 	bl	8002f40 <L6474_Tval_Current_to_Par>
 80026ea:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80026ec:	461a      	mov	r2, r3
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	2109      	movs	r1, #9
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fcd0 	bl	8001098 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	2235      	movs	r2, #53	; 0x35
 80026fc:	210e      	movs	r1, #14
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe fcca 	bl	8001098 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_0)
 8002704:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002708:	f000 fc3e 	bl	8002f88 <L6474_Tmin_Time_to_Par>
 800270c:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800270e:	461a      	mov	r2, r3
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	210f      	movs	r1, #15
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe fcbf 	bl	8001098 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_0));
 800271a:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 800271e:	f000 fc33 	bl	8002f88 <L6474_Tmin_Time_to_Par>
 8002722:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002724:	461a      	mov	r2, r3
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	2110      	movs	r1, #16
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe fcb4 	bl	8001098 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	2201      	movs	r2, #1
 8002734:	2113      	movs	r1, #19
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe fcae 	bl	8001098 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	228c      	movs	r2, #140	; 0x8c
 8002740:	2116      	movs	r1, #22
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fca8 	bl	8001098 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	22cf      	movs	r2, #207	; 0xcf
 800274c:	2117      	movs	r1, #23
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fca2 	bl	8001098 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 800275a:	2118      	movs	r1, #24
 800275c:	4618      	mov	r0, r3
 800275e:	f7fe fc9b 	bl	8001098 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_0);
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fbec 	bl	8001f44 <L6474_SetStopMode>
      break;
 800276c:	e08b      	b.n	8002886 <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_1));
 800276e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8002890 <L6474_SetRegisterToPredefinedValues+0x1f4>
 8002772:	f000 fbe5 	bl	8002f40 <L6474_Tval_Current_to_Par>
 8002776:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002778:	461a      	mov	r2, r3
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	2109      	movs	r1, #9
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fc8a 	bl	8001098 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	2235      	movs	r2, #53	; 0x35
 8002788:	210e      	movs	r1, #14
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe fc84 	bl	8001098 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_1));
 8002790:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002794:	f000 fbf8 	bl	8002f88 <L6474_Tmin_Time_to_Par>
 8002798:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800279a:	461a      	mov	r2, r3
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	210f      	movs	r1, #15
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe fc79 	bl	8001098 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_1));
 80027a6:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 80027aa:	f000 fbed 	bl	8002f88 <L6474_Tmin_Time_to_Par>
 80027ae:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80027b0:	461a      	mov	r2, r3
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	2110      	movs	r1, #16
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fc6e 	bl	8001098 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	2201      	movs	r2, #1
 80027c0:	2113      	movs	r1, #19
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe fc68 	bl	8001098 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	228c      	movs	r2, #140	; 0x8c
 80027cc:	2116      	movs	r1, #22
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fc62 	bl	8001098 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	22cf      	movs	r2, #207	; 0xcf
 80027d8:	2117      	movs	r1, #23
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fc5c 	bl	8001098 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 80027e6:	2118      	movs	r1, #24
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe fc55 	bl	8001098 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_1);
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fba6 	bl	8001f44 <L6474_SetStopMode>
      break;
 80027f8:	e045      	b.n	8002886 <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_2));
 80027fa:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8002890 <L6474_SetRegisterToPredefinedValues+0x1f4>
 80027fe:	f000 fb9f 	bl	8002f40 <L6474_Tval_Current_to_Par>
 8002802:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002804:	461a      	mov	r2, r3
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	2109      	movs	r1, #9
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe fc44 	bl	8001098 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	2235      	movs	r2, #53	; 0x35
 8002814:	210e      	movs	r1, #14
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe fc3e 	bl	8001098 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_2));
 800281c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002820:	f000 fbb2 	bl	8002f88 <L6474_Tmin_Time_to_Par>
 8002824:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002826:	461a      	mov	r2, r3
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	210f      	movs	r1, #15
 800282c:	4618      	mov	r0, r3
 800282e:	f7fe fc33 	bl	8001098 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_2));
 8002832:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002836:	f000 fba7 	bl	8002f88 <L6474_Tmin_Time_to_Par>
 800283a:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800283c:	461a      	mov	r2, r3
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	2110      	movs	r1, #16
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fc28 	bl	8001098 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	2201      	movs	r2, #1
 800284c:	2113      	movs	r1, #19
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fc22 	bl	8001098 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	228c      	movs	r2, #140	; 0x8c
 8002858:	2116      	movs	r1, #22
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe fc1c 	bl	8001098 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	22cf      	movs	r2, #207	; 0xcf
 8002864:	2117      	movs	r1, #23
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fc16 	bl	8001098 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002872:	2118      	movs	r1, #24
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe fc0f 	bl	8001098 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_2);
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fb60 	bl	8001f44 <L6474_SetStopMode>
      break;
 8002884:	bf00      	nop
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	437a0000 	.word	0x437a0000

08002894 <L6474_StartMovement>:
 * and enable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_StartMovement(uint8_t deviceId)  
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
  /* Enable L6474 powerstage */
  L6474_CmdEnable(deviceId);
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fe fa65 	bl	8000d70 <L6474_CmdEnable>
  if (devicePrm[deviceId].endAccPos != 0)
 80028a6:	79fa      	ldrb	r2, [r7, #7]
 80028a8:	4922      	ldr	r1, [pc, #136]	; (8002934 <L6474_StartMovement+0xa0>)
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	440b      	add	r3, r1
 80028b4:	3308      	adds	r3, #8
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <L6474_StartMovement+0x3e>
  {
    devicePrm[deviceId].motionState = ACCELERATING;
 80028bc:	79fa      	ldrb	r2, [r7, #7]
 80028be:	491d      	ldr	r1, [pc, #116]	; (8002934 <L6474_StartMovement+0xa0>)
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	440b      	add	r3, r1
 80028ca:	3324      	adds	r3, #36	; 0x24
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
 80028d0:	e009      	b.n	80028e6 <L6474_StartMovement+0x52>
  }
  else
  {
    devicePrm[deviceId].motionState = DECELERATING;    
 80028d2:	79fa      	ldrb	r2, [r7, #7]
 80028d4:	4917      	ldr	r1, [pc, #92]	; (8002934 <L6474_StartMovement+0xa0>)
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	440b      	add	r3, r1
 80028e0:	3324      	adds	r3, #36	; 0x24
 80028e2:	2202      	movs	r2, #2
 80028e4:	701a      	strb	r2, [r3, #0]
  }
  devicePrm[deviceId].accu = 0;
 80028e6:	79fa      	ldrb	r2, [r7, #7]
 80028e8:	4912      	ldr	r1, [pc, #72]	; (8002934 <L6474_StartMovement+0xa0>)
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	440b      	add	r3, r1
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 80028f8:	79fa      	ldrb	r2, [r7, #7]
 80028fa:	490e      	ldr	r1, [pc, #56]	; (8002934 <L6474_StartMovement+0xa0>)
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	330c      	adds	r3, #12
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
  L6474_ApplySpeed(deviceId, devicePrm[deviceId].minSpeed);
 800290c:	79fa      	ldrb	r2, [r7, #7]
 800290e:	4909      	ldr	r1, [pc, #36]	; (8002934 <L6474_StartMovement+0xa0>)
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	440b      	add	r3, r1
 800291a:	331e      	adds	r3, #30
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	b29a      	uxth	r2, r3
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fb61 	bl	8001fec <L6474_ApplySpeed>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20004c9c 	.word	0x20004c9c

08002938 <L6474_StepClockHandler>:
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void L6474_StepClockHandler(uint8_t deviceId)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08c      	sub	sp, #48	; 0x30
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
  /* Set isr flag */
  isrFlag = TRUE;
 8002942:	4b96      	ldr	r3, [pc, #600]	; (8002b9c <L6474_StepClockHandler+0x264>)
 8002944:	2201      	movs	r2, #1
 8002946:	701a      	strb	r2, [r3, #0]
  
  /* Incrementation of the relative position */
  devicePrm[deviceId].relativePos++;
 8002948:	79fa      	ldrb	r2, [r7, #7]
 800294a:	4995      	ldr	r1, [pc, #596]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	440b      	add	r3, r1
 8002956:	330c      	adds	r3, #12
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	1c59      	adds	r1, r3, #1
 800295c:	4890      	ldr	r0, [pc, #576]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4403      	add	r3, r0
 8002968:	330c      	adds	r3, #12
 800296a:	6019      	str	r1, [r3, #0]

  switch (devicePrm[deviceId].motionState) 
 800296c:	79fa      	ldrb	r2, [r7, #7]
 800296e:	498c      	ldr	r1, [pc, #560]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	440b      	add	r3, r1
 800297a:	3324      	adds	r3, #36	; 0x24
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b03      	cmp	r3, #3
 8002982:	f000 810f 	beq.w	8002ba4 <L6474_StepClockHandler+0x26c>
 8002986:	2b03      	cmp	r3, #3
 8002988:	f300 82a4 	bgt.w	8002ed4 <L6474_StepClockHandler+0x59c>
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <L6474_StepClockHandler+0x60>
 8002990:	2b02      	cmp	r3, #2
 8002992:	f000 819b 	beq.w	8002ccc <L6474_StepClockHandler+0x394>
      }
      break;
    }
    default: 
    {
      break;
 8002996:	e29d      	b.n	8002ed4 <L6474_StepClockHandler+0x59c>
        uint32_t relPos = devicePrm[deviceId].relativePos;
 8002998:	79fa      	ldrb	r2, [r7, #7]
 800299a:	4981      	ldr	r1, [pc, #516]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	330c      	adds	r3, #12
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	617b      	str	r3, [r7, #20]
        uint32_t endAccPos = devicePrm[deviceId].endAccPos;
 80029ac:	79fa      	ldrb	r2, [r7, #7]
 80029ae:	497c      	ldr	r1, [pc, #496]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	440b      	add	r3, r1
 80029ba:	3308      	adds	r3, #8
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	613b      	str	r3, [r7, #16]
        uint16_t speed = devicePrm[deviceId].speed;
 80029c0:	79fa      	ldrb	r2, [r7, #7]
 80029c2:	4977      	ldr	r1, [pc, #476]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	440b      	add	r3, r1
 80029ce:	3320      	adds	r3, #32
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
        uint32_t acc = ((uint32_t)devicePrm[deviceId].acceleration << 16);
 80029d4:	79fa      	ldrb	r2, [r7, #7]
 80029d6:	4972      	ldr	r1, [pc, #456]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	440b      	add	r3, r1
 80029e2:	3318      	adds	r3, #24
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	041b      	lsls	r3, r3, #16
 80029ea:	60fb      	str	r3, [r7, #12]
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 80029ec:	79fa      	ldrb	r2, [r7, #7]
 80029ee:	496c      	ldr	r1, [pc, #432]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	440b      	add	r3, r1
 80029fa:	3322      	adds	r3, #34	; 0x22
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d017      	beq.n	8002a34 <L6474_StepClockHandler+0xfc>
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8002a04:	79fa      	ldrb	r2, [r7, #7]
 8002a06:	4966      	ldr	r1, [pc, #408]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	440b      	add	r3, r1
 8002a12:	3322      	adds	r3, #34	; 0x22
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	b2db      	uxtb	r3, r3
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01f      	beq.n	8002a5c <L6474_StepClockHandler+0x124>
             (relPos == devicePrm[deviceId].startDecPos)))
 8002a1c:	79fa      	ldrb	r2, [r7, #7]
 8002a1e:	4960      	ldr	r1, [pc, #384]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	440b      	add	r3, r1
 8002a2a:	3310      	adds	r3, #16
 8002a2c:	681b      	ldr	r3, [r3, #0]
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d113      	bne.n	8002a5c <L6474_StepClockHandler+0x124>
          devicePrm[deviceId].motionState = DECELERATING;
 8002a34:	79fa      	ldrb	r2, [r7, #7]
 8002a36:	495a      	ldr	r1, [pc, #360]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	440b      	add	r3, r1
 8002a42:	3324      	adds	r3, #36	; 0x24
 8002a44:	2202      	movs	r2, #2
 8002a46:	701a      	strb	r2, [r3, #0]
          devicePrm[deviceId].accu = 0;
 8002a48:	79fa      	ldrb	r2, [r7, #7]
 8002a4a:	4955      	ldr	r1, [pc, #340]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	440b      	add	r3, r1
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	e09e      	b.n	8002b9a <L6474_StepClockHandler+0x262>
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002a5c:	79fa      	ldrb	r2, [r7, #7]
 8002a5e:	4950      	ldr	r1, [pc, #320]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	440b      	add	r3, r1
 8002a6a:	331c      	adds	r3, #28
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d20f      	bcs.n	8002a96 <L6474_StepClockHandler+0x15e>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002a76:	79fa      	ldrb	r2, [r7, #7]
 8002a78:	4949      	ldr	r1, [pc, #292]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	440b      	add	r3, r1
 8002a84:	3322      	adds	r3, #34	; 0x22
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	b2db      	uxtb	r3, r3
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00e      	beq.n	8002aac <L6474_StepClockHandler+0x174>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d10a      	bne.n	8002aac <L6474_StepClockHandler+0x174>
          devicePrm[deviceId].motionState = STEADY;
 8002a96:	79fa      	ldrb	r2, [r7, #7]
 8002a98:	4941      	ldr	r1, [pc, #260]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	440b      	add	r3, r1
 8002aa4:	3324      	adds	r3, #36	; 0x24
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	e076      	b.n	8002b9a <L6474_StepClockHandler+0x262>
          bool speedUpdated = FALSE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          if (speed == 0) speed =1;
 8002ab2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <L6474_StepClockHandler+0x184>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	85fb      	strh	r3, [r7, #46]	; 0x2e
          devicePrm[deviceId].accu += acc / speed;
 8002abc:	79fa      	ldrb	r2, [r7, #7]
 8002abe:	4938      	ldr	r1, [pc, #224]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	440b      	add	r3, r1
 8002aca:	6819      	ldr	r1, [r3, #0]
 8002acc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad4:	79fa      	ldrb	r2, [r7, #7]
 8002ad6:	4419      	add	r1, r3
 8002ad8:	4831      	ldr	r0, [pc, #196]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4403      	add	r3, r0
 8002ae4:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002ae6:	e017      	b.n	8002b18 <L6474_StepClockHandler+0x1e0>
            devicePrm[deviceId].accu -= (0X10000L);
 8002ae8:	79fa      	ldrb	r2, [r7, #7]
 8002aea:	492d      	ldr	r1, [pc, #180]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	440b      	add	r3, r1
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	79fa      	ldrb	r2, [r7, #7]
 8002afa:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 8002afe:	4828      	ldr	r0, [pc, #160]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4403      	add	r3, r0
 8002b0a:	6019      	str	r1, [r3, #0]
            speed +=1;
 8002b0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b0e:	3301      	adds	r3, #1
 8002b10:	85fb      	strh	r3, [r7, #46]	; 0x2e
            speedUpdated = TRUE;
 8002b12:	2301      	movs	r3, #1
 8002b14:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002b18:	79fa      	ldrb	r2, [r7, #7]
 8002b1a:	4921      	ldr	r1, [pc, #132]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	440b      	add	r3, r1
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2c:	d2dc      	bcs.n	8002ae8 <L6474_StepClockHandler+0x1b0>
          if (speedUpdated)
 8002b2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 81d0 	beq.w	8002ed8 <L6474_StepClockHandler+0x5a0>
            if (speed > devicePrm[deviceId].maxSpeed)
 8002b38:	79fa      	ldrb	r2, [r7, #7]
 8002b3a:	4919      	ldr	r1, [pc, #100]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	440b      	add	r3, r1
 8002b46:	331c      	adds	r3, #28
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d909      	bls.n	8002b66 <L6474_StepClockHandler+0x22e>
              speed = devicePrm[deviceId].maxSpeed;
 8002b52:	79fa      	ldrb	r2, [r7, #7]
 8002b54:	4912      	ldr	r1, [pc, #72]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	440b      	add	r3, r1
 8002b60:	331c      	adds	r3, #28
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	85fb      	strh	r3, [r7, #46]	; 0x2e
            devicePrm[deviceId].speed = speed;
 8002b66:	79fa      	ldrb	r2, [r7, #7]
 8002b68:	490d      	ldr	r1, [pc, #52]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	440b      	add	r3, r1
 8002b74:	3320      	adds	r3, #32
 8002b76:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002b78:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 8002b7a:	79fa      	ldrb	r2, [r7, #7]
 8002b7c:	4908      	ldr	r1, [pc, #32]	; (8002ba0 <L6474_StepClockHandler+0x268>)
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	440b      	add	r3, r1
 8002b88:	3320      	adds	r3, #32
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	4611      	mov	r1, r2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fa2a 	bl	8001fec <L6474_ApplySpeed>
        break;
 8002b98:	e19e      	b.n	8002ed8 <L6474_StepClockHandler+0x5a0>
 8002b9a:	e19d      	b.n	8002ed8 <L6474_StepClockHandler+0x5a0>
 8002b9c:	200001a1 	.word	0x200001a1
 8002ba0:	20004c9c 	.word	0x20004c9c
      uint16_t maxSpeed = devicePrm[deviceId].maxSpeed;
 8002ba4:	79fa      	ldrb	r2, [r7, #7]
 8002ba6:	499c      	ldr	r1, [pc, #624]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	440b      	add	r3, r1
 8002bb2:	331c      	adds	r3, #28
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	84fb      	strh	r3, [r7, #38]	; 0x26
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8002bb8:	79fa      	ldrb	r2, [r7, #7]
 8002bba:	4997      	ldr	r1, [pc, #604]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	330c      	adds	r3, #12
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	623b      	str	r3, [r7, #32]
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002bcc:	79fa      	ldrb	r2, [r7, #7]
 8002bce:	4992      	ldr	r1, [pc, #584]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	3322      	adds	r3, #34	; 0x22
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d030      	beq.n	8002c46 <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002be4:	79fa      	ldrb	r2, [r7, #7]
 8002be6:	498c      	ldr	r1, [pc, #560]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3322      	adds	r3, #34	; 0x22
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	b2db      	uxtb	r3, r3
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00b      	beq.n	8002c14 <L6474_StepClockHandler+0x2dc>
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 8002bfc:	79fa      	ldrb	r2, [r7, #7]
 8002bfe:	4986      	ldr	r1, [pc, #536]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	440b      	add	r3, r1
 8002c0a:	3310      	adds	r3, #16
 8002c0c:	681b      	ldr	r3, [r3, #0]
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002c0e:	6a3a      	ldr	r2, [r7, #32]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d218      	bcs.n	8002c46 <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002c14:	79fa      	ldrb	r2, [r7, #7]
 8002c16:	4980      	ldr	r1, [pc, #512]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	440b      	add	r3, r1
 8002c22:	3322      	adds	r3, #34	; 0x22
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b2db      	uxtb	r3, r3
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d120      	bne.n	8002c6e <L6474_StepClockHandler+0x336>
            (devicePrm[deviceId].speed > maxSpeed)))
 8002c2c:	79fa      	ldrb	r2, [r7, #7]
 8002c2e:	497a      	ldr	r1, [pc, #488]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	3320      	adds	r3, #32
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	b29b      	uxth	r3, r3
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002c40:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d213      	bcs.n	8002c6e <L6474_StepClockHandler+0x336>
        devicePrm[deviceId].motionState = DECELERATING;
 8002c46:	79fa      	ldrb	r2, [r7, #7]
 8002c48:	4973      	ldr	r1, [pc, #460]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	440b      	add	r3, r1
 8002c54:	3324      	adds	r3, #36	; 0x24
 8002c56:	2202      	movs	r2, #2
 8002c58:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 8002c5a:	79fa      	ldrb	r2, [r7, #7]
 8002c5c:	496e      	ldr	r1, [pc, #440]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	440b      	add	r3, r1
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
      break;
 8002c6c:	e136      	b.n	8002edc <L6474_StepClockHandler+0x5a4>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002c6e:	79fa      	ldrb	r2, [r7, #7]
 8002c70:	4969      	ldr	r1, [pc, #420]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3322      	adds	r3, #34	; 0x22
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f040 812a 	bne.w	8002edc <L6474_StepClockHandler+0x5a4>
               (devicePrm[deviceId].speed < maxSpeed))
 8002c88:	79fa      	ldrb	r2, [r7, #7]
 8002c8a:	4963      	ldr	r1, [pc, #396]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	440b      	add	r3, r1
 8002c96:	3320      	adds	r3, #32
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002c9c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	f240 811c 	bls.w	8002edc <L6474_StepClockHandler+0x5a4>
        devicePrm[deviceId].motionState = ACCELERATING;
 8002ca4:	79fa      	ldrb	r2, [r7, #7]
 8002ca6:	495c      	ldr	r1, [pc, #368]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	3324      	adds	r3, #36	; 0x24
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 8002cb8:	79fa      	ldrb	r2, [r7, #7]
 8002cba:	4957      	ldr	r1, [pc, #348]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	440b      	add	r3, r1
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
      break;
 8002cca:	e107      	b.n	8002edc <L6474_StepClockHandler+0x5a4>
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8002ccc:	79fa      	ldrb	r2, [r7, #7]
 8002cce:	4952      	ldr	r1, [pc, #328]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	330c      	adds	r3, #12
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	61fb      	str	r3, [r7, #28]
      uint16_t speed = devicePrm[deviceId].speed;
 8002ce0:	79fa      	ldrb	r2, [r7, #7]
 8002ce2:	494d      	ldr	r1, [pc, #308]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	440b      	add	r3, r1
 8002cee:	3320      	adds	r3, #32
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	857b      	strh	r3, [r7, #42]	; 0x2a
      uint32_t deceleration = ((uint32_t)devicePrm[deviceId].deceleration << 16);
 8002cf4:	79fa      	ldrb	r2, [r7, #7]
 8002cf6:	4948      	ldr	r1, [pc, #288]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	440b      	add	r3, r1
 8002d02:	331a      	adds	r3, #26
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	041b      	lsls	r3, r3, #16
 8002d0a:	61bb      	str	r3, [r7, #24]
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 8002d0c:	79fa      	ldrb	r2, [r7, #7]
 8002d0e:	4942      	ldr	r1, [pc, #264]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	440b      	add	r3, r1
 8002d1a:	3322      	adds	r3, #34	; 0x22
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d10c      	bne.n	8002d3e <L6474_StepClockHandler+0x406>
 8002d24:	79fa      	ldrb	r2, [r7, #7]
 8002d26:	493c      	ldr	r1, [pc, #240]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	331e      	adds	r3, #30
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d917      	bls.n	8002d6e <L6474_StepClockHandler+0x436>
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002d3e:	79fa      	ldrb	r2, [r7, #7]
 8002d40:	4935      	ldr	r1, [pc, #212]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3322      	adds	r3, #34	; 0x22
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	b2db      	uxtb	r3, r3
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d010      	beq.n	8002d78 <L6474_StepClockHandler+0x440>
           (relativePos >= devicePrm[deviceId].stepsToTake)))
 8002d56:	79fa      	ldrb	r2, [r7, #7]
 8002d58:	492f      	ldr	r1, [pc, #188]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	440b      	add	r3, r1
 8002d64:	3314      	adds	r3, #20
 8002d66:	681b      	ldr	r3, [r3, #0]
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d304      	bcc.n	8002d78 <L6474_StepClockHandler+0x440>
        L6474_HardStop(deviceId);
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fe fcab 	bl	80016cc <L6474_HardStop>
 8002d76:	e0ac      	b.n	8002ed2 <L6474_StepClockHandler+0x59a>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002d78:	79fa      	ldrb	r2, [r7, #7]
 8002d7a:	4927      	ldr	r1, [pc, #156]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	440b      	add	r3, r1
 8002d86:	3322      	adds	r3, #34	; 0x22
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d117      	bne.n	8002dc0 <L6474_StepClockHandler+0x488>
               (speed <= devicePrm[deviceId].maxSpeed))
 8002d90:	79fa      	ldrb	r2, [r7, #7]
 8002d92:	4921      	ldr	r1, [pc, #132]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	440b      	add	r3, r1
 8002d9e:	331c      	adds	r3, #28
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002da4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d80a      	bhi.n	8002dc0 <L6474_StepClockHandler+0x488>
        devicePrm[deviceId].motionState = STEADY;
 8002daa:	79fa      	ldrb	r2, [r7, #7]
 8002dac:	491a      	ldr	r1, [pc, #104]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	440b      	add	r3, r1
 8002db8:	3324      	adds	r3, #36	; 0x24
 8002dba:	2203      	movs	r2, #3
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e088      	b.n	8002ed2 <L6474_StepClockHandler+0x59a>
        if (speed > devicePrm[deviceId].minSpeed)
 8002dc0:	79fa      	ldrb	r2, [r7, #7]
 8002dc2:	4915      	ldr	r1, [pc, #84]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	440b      	add	r3, r1
 8002dce:	331e      	adds	r3, #30
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	f240 8082 	bls.w	8002ee0 <L6474_StepClockHandler+0x5a8>
          bool speedUpdated = FALSE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          if (speed == 0) speed =1;
 8002de2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <L6474_StepClockHandler+0x4b4>
 8002de8:	2301      	movs	r3, #1
 8002dea:	857b      	strh	r3, [r7, #42]	; 0x2a
          devicePrm[deviceId].accu += deceleration / speed;
 8002dec:	79fa      	ldrb	r2, [r7, #7]
 8002dee:	490a      	ldr	r1, [pc, #40]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	6819      	ldr	r1, [r3, #0]
 8002dfc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e04:	79fa      	ldrb	r2, [r7, #7]
 8002e06:	4419      	add	r1, r3
 8002e08:	4803      	ldr	r0, [pc, #12]	; (8002e18 <L6474_StepClockHandler+0x4e0>)
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4403      	add	r3, r0
 8002e14:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002e16:	e01c      	b.n	8002e52 <L6474_StepClockHandler+0x51a>
 8002e18:	20004c9c 	.word	0x20004c9c
            devicePrm[deviceId].accu -= (0X10000L);
 8002e1c:	79fa      	ldrb	r2, [r7, #7]
 8002e1e:	4934      	ldr	r1, [pc, #208]	; (8002ef0 <L6474_StepClockHandler+0x5b8>)
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	440b      	add	r3, r1
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	79fa      	ldrb	r2, [r7, #7]
 8002e2e:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 8002e32:	482f      	ldr	r0, [pc, #188]	; (8002ef0 <L6474_StepClockHandler+0x5b8>)
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4403      	add	r3, r0
 8002e3e:	6019      	str	r1, [r3, #0]
            if (speed > 1)
 8002e40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d902      	bls.n	8002e4c <L6474_StepClockHandler+0x514>
              speed -=1;
 8002e46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	857b      	strh	r3, [r7, #42]	; 0x2a
            speedUpdated = TRUE;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002e52:	79fa      	ldrb	r2, [r7, #7]
 8002e54:	4926      	ldr	r1, [pc, #152]	; (8002ef0 <L6474_StepClockHandler+0x5b8>)
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	440b      	add	r3, r1
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e66:	d2d9      	bcs.n	8002e1c <L6474_StepClockHandler+0x4e4>
          if (speedUpdated)
 8002e68:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d037      	beq.n	8002ee0 <L6474_StepClockHandler+0x5a8>
            if (speed < devicePrm[deviceId].minSpeed)
 8002e70:	79fa      	ldrb	r2, [r7, #7]
 8002e72:	491f      	ldr	r1, [pc, #124]	; (8002ef0 <L6474_StepClockHandler+0x5b8>)
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	440b      	add	r3, r1
 8002e7e:	331e      	adds	r3, #30
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d209      	bcs.n	8002e9e <L6474_StepClockHandler+0x566>
              speed = devicePrm[deviceId].minSpeed;
 8002e8a:	79fa      	ldrb	r2, [r7, #7]
 8002e8c:	4918      	ldr	r1, [pc, #96]	; (8002ef0 <L6474_StepClockHandler+0x5b8>)
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	440b      	add	r3, r1
 8002e98:	331e      	adds	r3, #30
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	857b      	strh	r3, [r7, #42]	; 0x2a
            devicePrm[deviceId].speed = speed;
 8002e9e:	79fa      	ldrb	r2, [r7, #7]
 8002ea0:	4913      	ldr	r1, [pc, #76]	; (8002ef0 <L6474_StepClockHandler+0x5b8>)
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	440b      	add	r3, r1
 8002eac:	3320      	adds	r3, #32
 8002eae:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002eb0:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 8002eb2:	79fa      	ldrb	r2, [r7, #7]
 8002eb4:	490e      	ldr	r1, [pc, #56]	; (8002ef0 <L6474_StepClockHandler+0x5b8>)
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3320      	adds	r3, #32
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff f88e 	bl	8001fec <L6474_ApplySpeed>
      break;
 8002ed0:	e006      	b.n	8002ee0 <L6474_StepClockHandler+0x5a8>
 8002ed2:	e005      	b.n	8002ee0 <L6474_StepClockHandler+0x5a8>
      break;
 8002ed4:	bf00      	nop
 8002ed6:	e004      	b.n	8002ee2 <L6474_StepClockHandler+0x5aa>
        break;
 8002ed8:	bf00      	nop
 8002eda:	e002      	b.n	8002ee2 <L6474_StepClockHandler+0x5aa>
      break;
 8002edc:	bf00      	nop
 8002ede:	e000      	b.n	8002ee2 <L6474_StepClockHandler+0x5aa>
      break;
 8002ee0:	bf00      	nop
    }
  }  
  /* Set isr flag */
  isrFlag = FALSE;
 8002ee2:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <L6474_StepClockHandler+0x5bc>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	3730      	adds	r7, #48	; 0x30
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20004c9c 	.word	0x20004c9c
 8002ef4:	200001a1 	.word	0x200001a1

08002ef8 <L6474_Ocd_Th_to_Par>:
 * @brief Converts mA in compatible values for OCD_TH register
 * @param[in] Tval
 * @retval OCD_TH values
 **********************************************************/
inline uint8_t L6474_Ocd_Th_to_Par(float Tval)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 375)*0.002666f)+0.5f));
 8002f02:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f06:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002f38 <L6474_Ocd_Th_to_Par+0x40>
 8002f0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f0e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002f3c <L6474_Ocd_Th_to_Par+0x44>
 8002f12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f22:	edc7 7a00 	vstr	s15, [r7]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	b2db      	uxtb	r3, r3
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	43bb8000 	.word	0x43bb8000
 8002f3c:	3b2eb80f 	.word	0x3b2eb80f

08002f40 <L6474_Tval_Current_to_Par>:
 * @brief Converts mA in compatible values for TVAL register 
 * @param[in] Tval
 * @retval TVAL values
 **********************************************************/
inline uint8_t L6474_Tval_Current_to_Par(float Tval)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 31.25f)*0.032f)+0.5f));
 8002f4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f4e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002f80 <L6474_Tval_Current_to_Par+0x40>
 8002f52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f56:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002f84 <L6474_Tval_Current_to_Par+0x44>
 8002f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f5e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f6a:	edc7 7a00 	vstr	s15, [r7]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	b2db      	uxtb	r3, r3
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	41fa0000 	.word	0x41fa0000
 8002f84:	3d03126f 	.word	0x3d03126f

08002f88 <L6474_Tmin_Time_to_Par>:
 * for TON_MIN register
 * @param[in] Tmin
 * @retval TON_MIN values
 **********************************************************/
inline uint8_t L6474_Tmin_Time_to_Par(float Tmin)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tmin - 0.5f)*2.0f)+0.5f));
 8002f92:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f96:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fa2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002fa6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fae:	edc7 7a00 	vstr	s15, [r7]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	b2db      	uxtb	r3, r3
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <L6474_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 **********************************************************/
void L6474_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  if (L6474_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 8002fce:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <L6474_WriteBytes+0x40>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	6839      	ldr	r1, [r7, #0]
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f001 f917 	bl	800420c <L6474_Board_SpiWriteBytes>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <L6474_WriteBytes+0x28>
  {
    L6474_ErrorHandler(L6474_ERROR_1);
 8002fe4:	f248 0001 	movw	r0, #32769	; 0x8001
 8002fe8:	f7ff f91e 	bl	8002228 <L6474_ErrorHandler>
  }
  
  if (isrFlag)
 8002fec:	4b06      	ldr	r3, [pc, #24]	; (8003008 <L6474_WriteBytes+0x44>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <L6474_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <L6474_WriteBytes+0x48>)
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	701a      	strb	r2, [r3, #0]
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000184 	.word	0x20000184
 8003008:	200001a1 	.word	0x200001a1
 800300c:	200001a0 	.word	0x200001a0

08003010 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08e      	sub	sp, #56	; 0x38
 8003014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003016:	1d3b      	adds	r3, r7, #4
 8003018:	2234      	movs	r2, #52	; 0x34
 800301a:	2100      	movs	r1, #0
 800301c:	4618      	mov	r0, r3
 800301e:	f00c fbc7 	bl	800f7b0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003022:	4b3a      	ldr	r3, [pc, #232]	; (800310c <MX_LTDC_Init+0xfc>)
 8003024:	4a3a      	ldr	r2, [pc, #232]	; (8003110 <MX_LTDC_Init+0x100>)
 8003026:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003028:	4b38      	ldr	r3, [pc, #224]	; (800310c <MX_LTDC_Init+0xfc>)
 800302a:	2200      	movs	r2, #0
 800302c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800302e:	4b37      	ldr	r3, [pc, #220]	; (800310c <MX_LTDC_Init+0xfc>)
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003034:	4b35      	ldr	r3, [pc, #212]	; (800310c <MX_LTDC_Init+0xfc>)
 8003036:	2200      	movs	r2, #0
 8003038:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800303a:	4b34      	ldr	r3, [pc, #208]	; (800310c <MX_LTDC_Init+0xfc>)
 800303c:	2200      	movs	r2, #0
 800303e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 39;
 8003040:	4b32      	ldr	r3, [pc, #200]	; (800310c <MX_LTDC_Init+0xfc>)
 8003042:	2227      	movs	r2, #39	; 0x27
 8003044:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 8;
 8003046:	4b31      	ldr	r3, [pc, #196]	; (800310c <MX_LTDC_Init+0xfc>)
 8003048:	2208      	movs	r2, #8
 800304a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 800304c:	4b2f      	ldr	r3, [pc, #188]	; (800310c <MX_LTDC_Init+0xfc>)
 800304e:	222a      	movs	r2, #42	; 0x2a
 8003050:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8003052:	4b2e      	ldr	r3, [pc, #184]	; (800310c <MX_LTDC_Init+0xfc>)
 8003054:	220b      	movs	r2, #11
 8003056:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8003058:	4b2c      	ldr	r3, [pc, #176]	; (800310c <MX_LTDC_Init+0xfc>)
 800305a:	f240 220a 	movw	r2, #522	; 0x20a
 800305e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8003060:	4b2a      	ldr	r3, [pc, #168]	; (800310c <MX_LTDC_Init+0xfc>)
 8003062:	f240 121b 	movw	r2, #283	; 0x11b
 8003066:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 528;
 8003068:	4b28      	ldr	r3, [pc, #160]	; (800310c <MX_LTDC_Init+0xfc>)
 800306a:	f44f 7204 	mov.w	r2, #528	; 0x210
 800306e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8003070:	4b26      	ldr	r3, [pc, #152]	; (800310c <MX_LTDC_Init+0xfc>)
 8003072:	f240 121d 	movw	r2, #285	; 0x11d
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003078:	4b24      	ldr	r3, [pc, #144]	; (800310c <MX_LTDC_Init+0xfc>)
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003080:	4b22      	ldr	r3, [pc, #136]	; (800310c <MX_LTDC_Init+0xfc>)
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003088:	4b20      	ldr	r3, [pc, #128]	; (800310c <MX_LTDC_Init+0xfc>)
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003090:	481e      	ldr	r0, [pc, #120]	; (800310c <MX_LTDC_Init+0xfc>)
 8003092:	f003 f88b 	bl	80061ac <HAL_LTDC_Init>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800309c:	f000 fabc 	bl	8003618 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80030a4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80030a8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80030ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 80030b2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80030b4:	2302      	movs	r3, #2
 80030b6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80030b8:	23ff      	movs	r3, #255	; 0xff
 80030ba:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80030c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030c4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80030c6:	2305      	movs	r3, #5
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80030ce:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80030d4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80030d8:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80030ec:	1d3b      	adds	r3, r7, #4
 80030ee:	2200      	movs	r2, #0
 80030f0:	4619      	mov	r1, r3
 80030f2:	4806      	ldr	r0, [pc, #24]	; (800310c <MX_LTDC_Init+0xfc>)
 80030f4:	f003 f9ec 	bl	80064d0 <HAL_LTDC_ConfigLayer>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 80030fe:	f000 fa8b 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003102:	bf00      	nop
 8003104:	3738      	adds	r7, #56	; 0x38
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20004d1c 	.word	0x20004d1c
 8003110:	50001000 	.word	0x50001000

08003114 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b0c0      	sub	sp, #256	; 0x100
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	60da      	str	r2, [r3, #12]
 800312a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800312c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003130:	22bc      	movs	r2, #188	; 0xbc
 8003132:	2100      	movs	r1, #0
 8003134:	4618      	mov	r0, r3
 8003136:	f00c fb3b 	bl	800f7b0 <memset>
  if(ltdcHandle->Instance==LTDC)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4abd      	ldr	r2, [pc, #756]	; (8003434 <HAL_LTDC_MspInit+0x320>)
 8003140:	4293      	cmp	r3, r2
 8003142:	f040 8171 	bne.w	8003428 <HAL_LTDC_MspInit+0x314>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003146:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800314a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800314c:	2301      	movs	r3, #1
 800314e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8003150:	2312      	movs	r3, #18
 8003152:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003154:	2302      	movs	r3, #2
 8003156:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003158:	2302      	movs	r3, #2
 800315a:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3R = 1;
 800315c:	2301      	movs	r3, #1
 800315e:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8003160:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003164:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8003166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800316a:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 800316c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003170:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003172:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003176:	4618      	mov	r0, r3
 8003178:	f004 fbb6 	bl	80078e8 <HAL_RCCEx_PeriphCLKConfig>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_LTDC_MspInit+0x72>
    {
      Error_Handler();
 8003182:	f000 fa49 	bl	8003618 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003186:	4bac      	ldr	r3, [pc, #688]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 8003188:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800318c:	4aaa      	ldr	r2, [pc, #680]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 800318e:	f043 0308 	orr.w	r3, r3, #8
 8003192:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003196:	4ba8      	ldr	r3, [pc, #672]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 8003198:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031a4:	4ba4      	ldr	r3, [pc, #656]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 80031a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031aa:	4aa3      	ldr	r2, [pc, #652]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 80031ac:	f043 0310 	orr.w	r3, r3, #16
 80031b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031b4:	4ba0      	ldr	r3, [pc, #640]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 80031b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
 80031c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80031c2:	4b9d      	ldr	r3, [pc, #628]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 80031c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031c8:	4a9b      	ldr	r2, [pc, #620]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 80031ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031d2:	4b99      	ldr	r3, [pc, #612]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 80031d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80031e0:	4b95      	ldr	r3, [pc, #596]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 80031e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e6:	4a94      	ldr	r2, [pc, #592]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 80031e8:	f043 0320 	orr.w	r3, r3, #32
 80031ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031f0:	4b91      	ldr	r3, [pc, #580]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 80031f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	623b      	str	r3, [r7, #32]
 80031fc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031fe:	4b8e      	ldr	r3, [pc, #568]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 8003200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003204:	4a8c      	ldr	r2, [pc, #560]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 8003206:	f043 0304 	orr.w	r3, r3, #4
 800320a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800320e:	4b8a      	ldr	r3, [pc, #552]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 8003210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800321c:	4b86      	ldr	r3, [pc, #536]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 800321e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003222:	4a85      	ldr	r2, [pc, #532]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800322c:	4b82      	ldr	r3, [pc, #520]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 800322e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	61bb      	str	r3, [r7, #24]
 8003238:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800323a:	4b7f      	ldr	r3, [pc, #508]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 800323c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003240:	4a7d      	ldr	r2, [pc, #500]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 8003242:	f043 0302 	orr.w	r3, r3, #2
 8003246:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800324a:	4b7b      	ldr	r3, [pc, #492]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 800324c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003258:	4b77      	ldr	r3, [pc, #476]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 800325a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800325e:	4a76      	ldr	r2, [pc, #472]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 8003260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003264:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003268:	4b73      	ldr	r3, [pc, #460]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 800326a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800326e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003276:	4b70      	ldr	r3, [pc, #448]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 8003278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800327c:	4a6e      	ldr	r2, [pc, #440]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 800327e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003282:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003286:	4b6c      	ldr	r3, [pc, #432]	; (8003438 <HAL_LTDC_MspInit+0x324>)
 8003288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003294:	2370      	movs	r3, #112	; 0x70
 8003296:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a6:	2300      	movs	r3, #0
 80032a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80032ac:	230e      	movs	r3, #14
 80032ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032b2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80032b6:	4619      	mov	r1, r3
 80032b8:	4860      	ldr	r0, [pc, #384]	; (800343c <HAL_LTDC_MspInit+0x328>)
 80032ba:	f002 fdad 	bl	8005e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 80032be:	f240 63f7 	movw	r3, #1783	; 0x6f7
 80032c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c6:	2302      	movs	r3, #2
 80032c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d2:	2300      	movs	r3, #0
 80032d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80032d8:	230e      	movs	r3, #14
 80032da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80032de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80032e2:	4619      	mov	r1, r3
 80032e4:	4856      	ldr	r0, [pc, #344]	; (8003440 <HAL_LTDC_MspInit+0x32c>)
 80032e6:	f002 fd97 	bl	8005e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f2:	2302      	movs	r3, #2
 80032f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fe:	2300      	movs	r3, #0
 8003300:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003304:	230e      	movs	r3, #14
 8003306:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800330a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800330e:	4619      	mov	r1, r3
 8003310:	484c      	ldr	r0, [pc, #304]	; (8003444 <HAL_LTDC_MspInit+0x330>)
 8003312:	f002 fd81 	bl	8005e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003316:	2301      	movs	r3, #1
 8003318:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331c:	2302      	movs	r3, #2
 800331e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003322:	2300      	movs	r3, #0
 8003324:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003328:	2300      	movs	r3, #0
 800332a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800332e:	230e      	movs	r3, #14
 8003330:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003334:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003338:	4619      	mov	r1, r3
 800333a:	4843      	ldr	r0, [pc, #268]	; (8003448 <HAL_LTDC_MspInit+0x334>)
 800333c:	f002 fd6c 	bl	8005e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003340:	2320      	movs	r3, #32
 8003342:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003346:	2302      	movs	r3, #2
 8003348:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003352:	2300      	movs	r3, #0
 8003354:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003358:	230e      	movs	r3, #14
 800335a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003362:	4619      	mov	r1, r3
 8003364:	4839      	ldr	r0, [pc, #228]	; (800344c <HAL_LTDC_MspInit+0x338>)
 8003366:	f002 fd57 	bl	8005e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800336a:	2302      	movs	r3, #2
 800336c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003370:	2302      	movs	r3, #2
 8003372:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337c:	2300      	movs	r3, #0
 800337e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003382:	2309      	movs	r3, #9
 8003384:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003388:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800338c:	4619      	mov	r1, r3
 800338e:	4830      	ldr	r0, [pc, #192]	; (8003450 <HAL_LTDC_MspInit+0x33c>)
 8003390:	f002 fd42 	bl	8005e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13|GPIO_PIN_15;
 8003394:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 8003398:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339c:	2302      	movs	r3, #2
 800339e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a8:	2300      	movs	r3, #0
 80033aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033ae:	230e      	movs	r3, #14
 80033b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80033b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033b8:	4619      	mov	r1, r3
 80033ba:	4826      	ldr	r0, [pc, #152]	; (8003454 <HAL_LTDC_MspInit+0x340>)
 80033bc:	f002 fd2c 	bl	8005e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80033c0:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80033c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c8:	2302      	movs	r3, #2
 80033ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d4:	2300      	movs	r3, #0
 80033d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033da:	230e      	movs	r3, #14
 80033dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033e0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80033e4:	4619      	mov	r1, r3
 80033e6:	481c      	ldr	r0, [pc, #112]	; (8003458 <HAL_LTDC_MspInit+0x344>)
 80033e8:	f002 fd16 	bl	8005e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f4:	2302      	movs	r3, #2
 80033f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003406:	2309      	movs	r3, #9
 8003408:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800340c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003410:	4619      	mov	r1, r3
 8003412:	4811      	ldr	r0, [pc, #68]	; (8003458 <HAL_LTDC_MspInit+0x344>)
 8003414:	f002 fd00 	bl	8005e18 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003418:	2200      	movs	r2, #0
 800341a:	2105      	movs	r1, #5
 800341c:	2058      	movs	r0, #88	; 0x58
 800341e:	f002 fad1 	bl	80059c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003422:	2058      	movs	r0, #88	; 0x58
 8003424:	f002 fae8 	bl	80059f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8003428:	bf00      	nop
 800342a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	50001000 	.word	0x50001000
 8003438:	58024400 	.word	0x58024400
 800343c:	58021000 	.word	0x58021000
 8003440:	58022000 	.word	0x58022000
 8003444:	58021400 	.word	0x58021400
 8003448:	58020800 	.word	0x58020800
 800344c:	58020000 	.word	0x58020000
 8003450:	58020400 	.word	0x58020400
 8003454:	58021c00 	.word	0x58021c00
 8003458:	58021800 	.word	0x58021800

0800345c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800345c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345e:	b089      	sub	sp, #36	; 0x24
 8003460:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003462:	f000 ff39 	bl	80042d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003466:	f000 f835 	bl	80034d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800346a:	f7fd fac3 	bl	80009f4 <MX_GPIO_Init>
  MX_SPI2_Init();
 800346e:	f000 f9a7 	bl	80037c0 <MX_SPI2_Init>
  MX_ADC3_Init();
 8003472:	f7fd f8b1 	bl	80005d8 <MX_ADC3_Init>
  MX_UART5_Init();
 8003476:	f000 fb9b 	bl	8003bb0 <MX_UART5_Init>
  MX_I2C1_SMBUS_Init();
 800347a:	f7fd fba1 	bl	8000bc0 <MX_I2C1_SMBUS_Init>
  MX_DMA2D_Init();
 800347e:	f7fd f99d 	bl	80007bc <MX_DMA2D_Init>
  MX_LTDC_Init();
 8003482:	f7ff fdc5 	bl	8003010 <MX_LTDC_Init>
  MX_CRC_Init();
 8003486:	f7fd f955 	bl	8000734 <MX_CRC_Init>
  MX_TouchGFX_Init();
 800348a:	f00c f957 	bl	800f73c <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  L6474_SetRegisterToGivenValues(0,gL6474InitParams);
 800348e:	4e0f      	ldr	r6, [pc, #60]	; (80034cc <main+0x70>)
 8003490:	466d      	mov	r5, sp
 8003492:	f106 040c 	add.w	r4, r6, #12
 8003496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800349a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800349e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80034a2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80034a6:	2000      	movs	r0, #0
 80034a8:	f7ff f87c 	bl	80025a4 <L6474_SetRegisterToGivenValues>
  BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6474,1);
 80034ac:	2101      	movs	r1, #1
 80034ae:	f641 104a 	movw	r0, #6474	; 0x194a
 80034b2:	f000 f90b 	bl	80036cc <BSP_MotorControl_Init>
  HAL_ADC_Start(&hadc3); // internal_temp measurement
 80034b6:	4806      	ldr	r0, [pc, #24]	; (80034d0 <main+0x74>)
 80034b8:	f001 fb1c 	bl	8004af4 <HAL_ADC_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80034bc:	f009 fbea 	bl	800cc94 <osKernelInitialize>
  MX_FREERTOS_Init();
 80034c0:	f7fd f9d8 	bl	8000874 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80034c4:	f009 fc0a 	bl	800ccdc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80034c8:	e7fe      	b.n	80034c8 <main+0x6c>
 80034ca:	bf00      	nop
 80034cc:	20000128 	.word	0x20000128
 80034d0:	20004b44 	.word	0x20004b44

080034d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b09c      	sub	sp, #112	; 0x70
 80034d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034de:	224c      	movs	r2, #76	; 0x4c
 80034e0:	2100      	movs	r1, #0
 80034e2:	4618      	mov	r0, r3
 80034e4:	f00c f964 	bl	800f7b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034e8:	1d3b      	adds	r3, r7, #4
 80034ea:	2220      	movs	r2, #32
 80034ec:	2100      	movs	r1, #0
 80034ee:	4618      	mov	r0, r3
 80034f0:	f00c f95e 	bl	800f7b0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80034f4:	2002      	movs	r0, #2
 80034f6:	f003 f9c3 	bl	8006880 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034fa:	2300      	movs	r3, #0
 80034fc:	603b      	str	r3, [r7, #0]
 80034fe:	4b34      	ldr	r3, [pc, #208]	; (80035d0 <SystemClock_Config+0xfc>)
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	4a33      	ldr	r2, [pc, #204]	; (80035d0 <SystemClock_Config+0xfc>)
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	62d3      	str	r3, [r2, #44]	; 0x2c
 800350a:	4b31      	ldr	r3, [pc, #196]	; (80035d0 <SystemClock_Config+0xfc>)
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <SystemClock_Config+0x100>)
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	4a2e      	ldr	r2, [pc, #184]	; (80035d4 <SystemClock_Config+0x100>)
 800351a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800351e:	6193      	str	r3, [r2, #24]
 8003520:	4b2c      	ldr	r3, [pc, #176]	; (80035d4 <SystemClock_Config+0x100>)
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003528:	603b      	str	r3, [r7, #0]
 800352a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800352c:	bf00      	nop
 800352e:	4b29      	ldr	r3, [pc, #164]	; (80035d4 <SystemClock_Config+0x100>)
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800353a:	d1f8      	bne.n	800352e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800353c:	4b26      	ldr	r3, [pc, #152]	; (80035d8 <SystemClock_Config+0x104>)
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	f023 0303 	bic.w	r3, r3, #3
 8003544:	4a24      	ldr	r2, [pc, #144]	; (80035d8 <SystemClock_Config+0x104>)
 8003546:	f043 0302 	orr.w	r3, r3, #2
 800354a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800354c:	2301      	movs	r3, #1
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003554:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003556:	2302      	movs	r3, #2
 8003558:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800355a:	2302      	movs	r3, #2
 800355c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800355e:	2301      	movs	r3, #1
 8003560:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003562:	2364      	movs	r3, #100	; 0x64
 8003564:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003566:	2302      	movs	r3, #2
 8003568:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800356a:	2304      	movs	r3, #4
 800356c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800356e:	2302      	movs	r3, #2
 8003570:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003572:	230c      	movs	r3, #12
 8003574:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003576:	2300      	movs	r3, #0
 8003578:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800357a:	2300      	movs	r3, #0
 800357c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800357e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003582:	4618      	mov	r0, r3
 8003584:	f003 f9b6 	bl	80068f4 <HAL_RCC_OscConfig>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800358e:	f000 f843 	bl	8003618 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003592:	233f      	movs	r3, #63	; 0x3f
 8003594:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003596:	2303      	movs	r3, #3
 8003598:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800359e:	2308      	movs	r3, #8
 80035a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80035a2:	2340      	movs	r3, #64	; 0x40
 80035a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80035a6:	2340      	movs	r3, #64	; 0x40
 80035a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80035aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80035b0:	2340      	movs	r3, #64	; 0x40
 80035b2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80035b4:	1d3b      	adds	r3, r7, #4
 80035b6:	2102      	movs	r1, #2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f003 fdc7 	bl	800714c <HAL_RCC_ClockConfig>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80035c4:	f000 f828 	bl	8003618 <Error_Handler>
  }
}
 80035c8:	bf00      	nop
 80035ca:	3770      	adds	r7, #112	; 0x70
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	58000400 	.word	0x58000400
 80035d4:	58024800 	.word	0x58024800
 80035d8:	58024400 	.word	0x58024400

080035dc <MyFlagInterruptHandler>:

/* USER CODE BEGIN 4 */
void MyFlagInterruptHandler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
  /* Get the value of the status register via the L6474 command GET_STATUS */
  uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(0);
 80035e2:	2000      	movs	r0, #0
 80035e4:	f000 f8c6 	bl	8003774 <BSP_MotorControl_CmdGetStatus>
 80035e8:	4603      	mov	r3, r0
 80035ea:	80fb      	strh	r3, [r7, #6]
  {
    //overcurrent detection
    // Action to be customized
  }

}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a04      	ldr	r2, [pc, #16]	; (8003614 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003606:	f000 fea3 	bl	8004350 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40000400 	.word	0x40000400

08003618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800361c:	b672      	cpsid	i
}
 800361e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003620:	e7fe      	b.n	8003620 <Error_Handler+0x8>

08003622 <Powerstep01_GetMotorHandle>:
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003622:	b480      	push	{r7}
 8003624:	af00      	add	r7, sp, #0
 8003626:	2300      	movs	r3, #0
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <L6206_GetMotorHandle>:
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003632:	b480      	push	{r7}
 8003634:	af00      	add	r7, sp, #0
 8003636:	2300      	movs	r3, #0
 8003638:	4618      	mov	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003642:	b480      	push	{r7}
 8003644:	af00      	add	r7, sp, #0
 8003646:	2300      	movs	r3, #0
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <BSP_MotorControl_AttachFlagInterrupt+0x26>
 8003664:	4b09      	ldr	r3, [pc, #36]	; (800368c <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 800366e:	4b07      	ldr	r3, [pc, #28]	; (800368c <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4798      	blx	r3
 8003678:	e004      	b.n	8003684 <BSP_MotorControl_AttachFlagInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 800367a:	f640 0002 	movw	r0, #2050	; 0x802
 800367e:	f000 f807 	bl	8003690 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003682:	bf00      	nop
 8003684:	bf00      	nop
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	200001a4 	.word	0x200001a4

08003690 <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 800369a:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <BSP_MotorControl_ErrorHandler+0x38>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00d      	beq.n	80036be <BSP_MotorControl_ErrorHandler+0x2e>
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <BSP_MotorControl_ErrorHandler+0x38>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d007      	beq.n	80036be <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <BSP_MotorControl_ErrorHandler+0x38>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036b6:	88fa      	ldrh	r2, [r7, #6]
 80036b8:	4610      	mov	r0, r2
 80036ba:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 80036bc:	e000      	b.n	80036c0 <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 80036be:	e7fe      	b.n	80036be <BSP_MotorControl_ErrorHandler+0x2e>
}
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	200001a4 	.word	0x200001a4

080036cc <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] nbDevices Number of motor devices to use (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, uint8_t nbDevices)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	460a      	mov	r2, r1
 80036d6:	80fb      	strh	r3, [r7, #6]
 80036d8:	4613      	mov	r3, r2
 80036da:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 80036dc:	4a23      	ldr	r2, [pc, #140]	; (800376c <BSP_MotorControl_Init+0xa0>)
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	8013      	strh	r3, [r2, #0]
  
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	f641 124a 	movw	r2, #6474	; 0x194a
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d105      	bne.n	80036f8 <BSP_MotorControl_Init+0x2c>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 80036ec:	f7fd fe86 	bl	80013fc <L6474_GetMotorHandle>
 80036f0:	4603      	mov	r3, r0
 80036f2:	4a1f      	ldr	r2, [pc, #124]	; (8003770 <BSP_MotorControl_Init+0xa4>)
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	e020      	b.n	800373a <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d105      	bne.n	800370a <BSP_MotorControl_Init+0x3e>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 80036fe:	f7ff ff90 	bl	8003622 <Powerstep01_GetMotorHandle>
 8003702:	4603      	mov	r3, r0
 8003704:	4a1a      	ldr	r2, [pc, #104]	; (8003770 <BSP_MotorControl_Init+0xa4>)
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	e017      	b.n	800373a <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	f641 023e 	movw	r2, #6206	; 0x183e
 8003710:	4293      	cmp	r3, r2
 8003712:	d105      	bne.n	8003720 <BSP_MotorControl_Init+0x54>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 8003714:	f7ff ff8d 	bl	8003632 <L6206_GetMotorHandle>
 8003718:	4603      	mov	r3, r0
 800371a:	4a15      	ldr	r2, [pc, #84]	; (8003770 <BSP_MotorControl_Init+0xa4>)
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	e00c      	b.n	800373a <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	f5b3 5fc2 	cmp.w	r3, #6208	; 0x1840
 8003726:	d105      	bne.n	8003734 <BSP_MotorControl_Init+0x68>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 8003728:	f7ff ff8b 	bl	8003642 <L6208_GetMotorHandle>
 800372c:	4603      	mov	r3, r0
 800372e:	4a10      	ldr	r2, [pc, #64]	; (8003770 <BSP_MotorControl_Init+0xa4>)
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e002      	b.n	800373a <BSP_MotorControl_Init+0x6e>
  }
  else
  {
    motorDrvHandle = 0;
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <BSP_MotorControl_Init+0xa4>)
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
  }

  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 800373a:	4b0d      	ldr	r3, [pc, #52]	; (8003770 <BSP_MotorControl_Init+0xa4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00b      	beq.n	800375a <BSP_MotorControl_Init+0x8e>
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <BSP_MotorControl_Init+0xa4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d006      	beq.n	800375a <BSP_MotorControl_Init+0x8e>
  {
    motorDrvHandle->Init(nbDevices);
 800374c:	4b08      	ldr	r3, [pc, #32]	; (8003770 <BSP_MotorControl_Init+0xa4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	797a      	ldrb	r2, [r7, #5]
 8003754:	4610      	mov	r0, r2
 8003756:	4798      	blx	r3
 8003758:	e004      	b.n	8003764 <BSP_MotorControl_Init+0x98>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(4);
 800375a:	f640 0004 	movw	r0, #2052	; 0x804
 800375e:	f7ff ff97 	bl	8003690 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003762:	bf00      	nop
 8003764:	bf00      	nop
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	200001a8 	.word	0x200001a8
 8003770:	200001a4 	.word	0x200001a4

08003774 <BSP_MotorControl_CmdGetStatus>:
 * the flags of the status register are reset. 
 * This is not the case when the status register is read with the
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 800377e:	2300      	movs	r3, #0
 8003780:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 8003782:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <BSP_MotorControl_CmdGetStatus+0x48>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00f      	beq.n	80037aa <BSP_MotorControl_CmdGetStatus+0x36>
 800378a:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <BSP_MotorControl_CmdGetStatus+0x48>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <BSP_MotorControl_CmdGetStatus+0x36>
  {
    status = motorDrvHandle->CmdGetStatus(deviceId);
 8003796:	4b09      	ldr	r3, [pc, #36]	; (80037bc <BSP_MotorControl_CmdGetStatus+0x48>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379e:	79fa      	ldrb	r2, [r7, #7]
 80037a0:	4610      	mov	r0, r2
 80037a2:	4798      	blx	r3
 80037a4:	4603      	mov	r3, r0
 80037a6:	81fb      	strh	r3, [r7, #14]
 80037a8:	e003      	b.n	80037b2 <BSP_MotorControl_CmdGetStatus+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 80037aa:	f640 0022 	movw	r0, #2082	; 0x822
 80037ae:	f7ff ff6f 	bl	8003690 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 80037b2:	89fb      	ldrh	r3, [r7, #14]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	200001a4 	.word	0x200001a4

080037c0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80037c4:	4b27      	ldr	r3, [pc, #156]	; (8003864 <MX_SPI2_Init+0xa4>)
 80037c6:	4a28      	ldr	r2, [pc, #160]	; (8003868 <MX_SPI2_Init+0xa8>)
 80037c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80037ca:	4b26      	ldr	r3, [pc, #152]	; (8003864 <MX_SPI2_Init+0xa4>)
 80037cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80037d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80037d2:	4b24      	ldr	r3, [pc, #144]	; (8003864 <MX_SPI2_Init+0xa4>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_32BIT;
 80037d8:	4b22      	ldr	r3, [pc, #136]	; (8003864 <MX_SPI2_Init+0xa4>)
 80037da:	221f      	movs	r2, #31
 80037dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037de:	4b21      	ldr	r3, [pc, #132]	; (8003864 <MX_SPI2_Init+0xa4>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037e4:	4b1f      	ldr	r3, [pc, #124]	; (8003864 <MX_SPI2_Init+0xa4>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80037ea:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <MX_SPI2_Init+0xa4>)
 80037ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80037f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80037f2:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <MX_SPI2_Init+0xa4>)
 80037f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037f8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037fa:	4b1a      	ldr	r3, [pc, #104]	; (8003864 <MX_SPI2_Init+0xa4>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003800:	4b18      	ldr	r3, [pc, #96]	; (8003864 <MX_SPI2_Init+0xa4>)
 8003802:	2200      	movs	r2, #0
 8003804:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003806:	4b17      	ldr	r3, [pc, #92]	; (8003864 <MX_SPI2_Init+0xa4>)
 8003808:	2200      	movs	r2, #0
 800380a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800380c:	4b15      	ldr	r3, [pc, #84]	; (8003864 <MX_SPI2_Init+0xa4>)
 800380e:	2200      	movs	r2, #0
 8003810:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003812:	4b14      	ldr	r3, [pc, #80]	; (8003864 <MX_SPI2_Init+0xa4>)
 8003814:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003818:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800381a:	4b12      	ldr	r3, [pc, #72]	; (8003864 <MX_SPI2_Init+0xa4>)
 800381c:	2200      	movs	r2, #0
 800381e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003820:	4b10      	ldr	r3, [pc, #64]	; (8003864 <MX_SPI2_Init+0xa4>)
 8003822:	2200      	movs	r2, #0
 8003824:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003826:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <MX_SPI2_Init+0xa4>)
 8003828:	2200      	movs	r2, #0
 800382a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800382c:	4b0d      	ldr	r3, [pc, #52]	; (8003864 <MX_SPI2_Init+0xa4>)
 800382e:	2200      	movs	r2, #0
 8003830:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003832:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <MX_SPI2_Init+0xa4>)
 8003834:	2200      	movs	r2, #0
 8003836:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <MX_SPI2_Init+0xa4>)
 800383a:	2200      	movs	r2, #0
 800383c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800383e:	4b09      	ldr	r3, [pc, #36]	; (8003864 <MX_SPI2_Init+0xa4>)
 8003840:	2200      	movs	r2, #0
 8003842:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003844:	4b07      	ldr	r3, [pc, #28]	; (8003864 <MX_SPI2_Init+0xa4>)
 8003846:	2200      	movs	r2, #0
 8003848:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <MX_SPI2_Init+0xa4>)
 800384c:	2200      	movs	r2, #0
 800384e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003850:	4804      	ldr	r0, [pc, #16]	; (8003864 <MX_SPI2_Init+0xa4>)
 8003852:	f006 facf 	bl	8009df4 <HAL_SPI_Init>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800385c:	f7ff fedc 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003860:	bf00      	nop
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20004dc4 	.word	0x20004dc4
 8003868:	40003800 	.word	0x40003800

0800386c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b0b8      	sub	sp, #224	; 0xe0
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003874:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003884:	f107 0310 	add.w	r3, r7, #16
 8003888:	22bc      	movs	r2, #188	; 0xbc
 800388a:	2100      	movs	r1, #0
 800388c:	4618      	mov	r0, r3
 800388e:	f00b ff8f 	bl	800f7b0 <memset>
  if(spiHandle->Instance==SPI2)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a25      	ldr	r2, [pc, #148]	; (800392c <HAL_SPI_MspInit+0xc0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d142      	bne.n	8003922 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800389c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038a6:	f107 0310 	add.w	r3, r7, #16
 80038aa:	4618      	mov	r0, r3
 80038ac:	f004 f81c 	bl	80078e8 <HAL_RCCEx_PeriphCLKConfig>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80038b6:	f7ff feaf 	bl	8003618 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80038ba:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <HAL_SPI_MspInit+0xc4>)
 80038bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038c0:	4a1b      	ldr	r2, [pc, #108]	; (8003930 <HAL_SPI_MspInit+0xc4>)
 80038c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038ca:	4b19      	ldr	r3, [pc, #100]	; (8003930 <HAL_SPI_MspInit+0xc4>)
 80038cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038d8:	4b15      	ldr	r3, [pc, #84]	; (8003930 <HAL_SPI_MspInit+0xc4>)
 80038da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038de:	4a14      	ldr	r2, [pc, #80]	; (8003930 <HAL_SPI_MspInit+0xc4>)
 80038e0:	f043 0302 	orr.w	r3, r3, #2
 80038e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038e8:	4b11      	ldr	r3, [pc, #68]	; (8003930 <HAL_SPI_MspInit+0xc4>)
 80038ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80038f6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80038fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fe:	2302      	movs	r3, #2
 8003900:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003904:	2300      	movs	r3, #0
 8003906:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390a:	2300      	movs	r3, #0
 800390c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003910:	2305      	movs	r3, #5
 8003912:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003916:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800391a:	4619      	mov	r1, r3
 800391c:	4805      	ldr	r0, [pc, #20]	; (8003934 <HAL_SPI_MspInit+0xc8>)
 800391e:	f002 fa7b 	bl	8005e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003922:	bf00      	nop
 8003924:	37e0      	adds	r7, #224	; 0xe0
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40003800 	.word	0x40003800
 8003930:	58024400 	.word	0x58024400
 8003934:	58020400 	.word	0x58020400

08003938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800393e:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <HAL_MspInit+0x38>)
 8003940:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003944:	4a0a      	ldr	r2, [pc, #40]	; (8003970 <HAL_MspInit+0x38>)
 8003946:	f043 0302 	orr.w	r3, r3, #2
 800394a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800394e:	4b08      	ldr	r3, [pc, #32]	; (8003970 <HAL_MspInit+0x38>)
 8003950:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800395c:	2200      	movs	r2, #0
 800395e:	210f      	movs	r1, #15
 8003960:	f06f 0001 	mvn.w	r0, #1
 8003964:	f002 f82e 	bl	80059c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003968:	bf00      	nop
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	58024400 	.word	0x58024400

08003974 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b090      	sub	sp, #64	; 0x40
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b0f      	cmp	r3, #15
 8003980:	d827      	bhi.n	80039d2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0U);
 8003982:	2200      	movs	r2, #0
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	201d      	movs	r0, #29
 8003988:	f002 f81c 	bl	80059c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800398c:	201d      	movs	r0, #29
 800398e:	f002 f833 	bl	80059f8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003992:	4a29      	ldr	r2, [pc, #164]	; (8003a38 <HAL_InitTick+0xc4>)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8003998:	4b28      	ldr	r3, [pc, #160]	; (8003a3c <HAL_InitTick+0xc8>)
 800399a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800399e:	4a27      	ldr	r2, [pc, #156]	; (8003a3c <HAL_InitTick+0xc8>)
 80039a0:	f043 0302 	orr.w	r3, r3, #2
 80039a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039a8:	4b24      	ldr	r3, [pc, #144]	; (8003a3c <HAL_InitTick+0xc8>)
 80039aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80039b6:	f107 0210 	add.w	r2, r7, #16
 80039ba:	f107 0314 	add.w	r3, r7, #20
 80039be:	4611      	mov	r1, r2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f003 ff4f 	bl	8007864 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80039c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80039ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d106      	bne.n	80039de <HAL_InitTick+0x6a>
 80039d0:	e001      	b.n	80039d6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e02b      	b.n	8003a2e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80039d6:	f003 ff19 	bl	800780c <HAL_RCC_GetPCLK1Freq>
 80039da:	63f8      	str	r0, [r7, #60]	; 0x3c
 80039dc:	e004      	b.n	80039e8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80039de:	f003 ff15 	bl	800780c <HAL_RCC_GetPCLK1Freq>
 80039e2:	4603      	mov	r3, r0
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80039e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ea:	4a15      	ldr	r2, [pc, #84]	; (8003a40 <HAL_InitTick+0xcc>)
 80039ec:	fba2 2303 	umull	r2, r3, r2, r3
 80039f0:	0c9b      	lsrs	r3, r3, #18
 80039f2:	3b01      	subs	r3, #1
 80039f4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80039f6:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <HAL_InitTick+0xd0>)
 80039f8:	4a13      	ldr	r2, [pc, #76]	; (8003a48 <HAL_InitTick+0xd4>)
 80039fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80039fc:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <HAL_InitTick+0xd0>)
 80039fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a02:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8003a04:	4a0f      	ldr	r2, [pc, #60]	; (8003a44 <HAL_InitTick+0xd0>)
 8003a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a08:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8003a0a:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <HAL_InitTick+0xd0>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <HAL_InitTick+0xd0>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8003a16:	480b      	ldr	r0, [pc, #44]	; (8003a44 <HAL_InitTick+0xd0>)
 8003a18:	f006 fec7 	bl	800a7aa <HAL_TIM_Base_Init>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d104      	bne.n	8003a2c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8003a22:	4808      	ldr	r0, [pc, #32]	; (8003a44 <HAL_InitTick+0xd0>)
 8003a24:	f006 ff22 	bl	800a86c <HAL_TIM_Base_Start_IT>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	e000      	b.n	8003a2e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3740      	adds	r7, #64	; 0x40
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	2000015c 	.word	0x2000015c
 8003a3c:	58024400 	.word	0x58024400
 8003a40:	431bde83 	.word	0x431bde83
 8003a44:	20004e4c 	.word	0x20004e4c
 8003a48:	40000400 	.word	0x40000400

08003a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a50:	e7fe      	b.n	8003a50 <NMI_Handler+0x4>

08003a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a52:	b480      	push	{r7}
 8003a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a56:	e7fe      	b.n	8003a56 <HardFault_Handler+0x4>

08003a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a5c:	e7fe      	b.n	8003a5c <MemManage_Handler+0x4>

08003a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a62:	e7fe      	b.n	8003a62 <BusFault_Handler+0x4>

08003a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a68:	e7fe      	b.n	8003a68 <UsageFault_Handler+0x4>

08003a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a7c:	4802      	ldr	r0, [pc, #8]	; (8003a88 <TIM3_IRQHandler+0x10>)
 8003a7e:	f007 f9bf 	bl	800ae00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20004e4c 	.word	0x20004e4c

08003a8c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003a90:	4802      	ldr	r0, [pc, #8]	; (8003a9c <LTDC_IRQHandler+0x10>)
 8003a92:	f002 fc5b 	bl	800634c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20004d1c 	.word	0x20004d1c

08003aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003aa4:	4b37      	ldr	r3, [pc, #220]	; (8003b84 <SystemInit+0xe4>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	4a36      	ldr	r2, [pc, #216]	; (8003b84 <SystemInit+0xe4>)
 8003aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ab4:	4b34      	ldr	r3, [pc, #208]	; (8003b88 <SystemInit+0xe8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	2b06      	cmp	r3, #6
 8003abe:	d807      	bhi.n	8003ad0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ac0:	4b31      	ldr	r3, [pc, #196]	; (8003b88 <SystemInit+0xe8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f023 030f 	bic.w	r3, r3, #15
 8003ac8:	4a2f      	ldr	r2, [pc, #188]	; (8003b88 <SystemInit+0xe8>)
 8003aca:	f043 0307 	orr.w	r3, r3, #7
 8003ace:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003ad0:	4b2e      	ldr	r3, [pc, #184]	; (8003b8c <SystemInit+0xec>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a2d      	ldr	r2, [pc, #180]	; (8003b8c <SystemInit+0xec>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003adc:	4b2b      	ldr	r3, [pc, #172]	; (8003b8c <SystemInit+0xec>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003ae2:	4b2a      	ldr	r3, [pc, #168]	; (8003b8c <SystemInit+0xec>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	4929      	ldr	r1, [pc, #164]	; (8003b8c <SystemInit+0xec>)
 8003ae8:	4b29      	ldr	r3, [pc, #164]	; (8003b90 <SystemInit+0xf0>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003aee:	4b26      	ldr	r3, [pc, #152]	; (8003b88 <SystemInit+0xe8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d007      	beq.n	8003b0a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003afa:	4b23      	ldr	r3, [pc, #140]	; (8003b88 <SystemInit+0xe8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 030f 	bic.w	r3, r3, #15
 8003b02:	4a21      	ldr	r2, [pc, #132]	; (8003b88 <SystemInit+0xe8>)
 8003b04:	f043 0307 	orr.w	r3, r3, #7
 8003b08:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <SystemInit+0xec>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003b10:	4b1e      	ldr	r3, [pc, #120]	; (8003b8c <SystemInit+0xec>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003b16:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <SystemInit+0xec>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <SystemInit+0xec>)
 8003b1e:	4a1d      	ldr	r2, [pc, #116]	; (8003b94 <SystemInit+0xf4>)
 8003b20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003b22:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <SystemInit+0xec>)
 8003b24:	4a1c      	ldr	r2, [pc, #112]	; (8003b98 <SystemInit+0xf8>)
 8003b26:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003b28:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <SystemInit+0xec>)
 8003b2a:	4a1c      	ldr	r2, [pc, #112]	; (8003b9c <SystemInit+0xfc>)
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003b2e:	4b17      	ldr	r3, [pc, #92]	; (8003b8c <SystemInit+0xec>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003b34:	4b15      	ldr	r3, [pc, #84]	; (8003b8c <SystemInit+0xec>)
 8003b36:	4a19      	ldr	r2, [pc, #100]	; (8003b9c <SystemInit+0xfc>)
 8003b38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003b3a:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <SystemInit+0xec>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003b40:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <SystemInit+0xec>)
 8003b42:	4a16      	ldr	r2, [pc, #88]	; (8003b9c <SystemInit+0xfc>)
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003b46:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <SystemInit+0xec>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b4c:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <SystemInit+0xec>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0e      	ldr	r2, [pc, #56]	; (8003b8c <SystemInit+0xec>)
 8003b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <SystemInit+0xec>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003b5e:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <SystemInit+0x100>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <SystemInit+0x104>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b6a:	d202      	bcs.n	8003b72 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003b6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <SystemInit+0x108>)
 8003b6e:	2201      	movs	r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003b72:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <SystemInit+0x10c>)
 8003b74:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003b78:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003b7a:	bf00      	nop
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	e000ed00 	.word	0xe000ed00
 8003b88:	52002000 	.word	0x52002000
 8003b8c:	58024400 	.word	0x58024400
 8003b90:	eaf6ed7f 	.word	0xeaf6ed7f
 8003b94:	02020200 	.word	0x02020200
 8003b98:	01ff0000 	.word	0x01ff0000
 8003b9c:	01010280 	.word	0x01010280
 8003ba0:	5c001000 	.word	0x5c001000
 8003ba4:	ffff0000 	.word	0xffff0000
 8003ba8:	51008108 	.word	0x51008108
 8003bac:	52004000 	.word	0x52004000

08003bb0 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003bb4:	4b22      	ldr	r3, [pc, #136]	; (8003c40 <MX_UART5_Init+0x90>)
 8003bb6:	4a23      	ldr	r2, [pc, #140]	; (8003c44 <MX_UART5_Init+0x94>)
 8003bb8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8003bba:	4b21      	ldr	r3, [pc, #132]	; (8003c40 <MX_UART5_Init+0x90>)
 8003bbc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003bc0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003bc2:	4b1f      	ldr	r3, [pc, #124]	; (8003c40 <MX_UART5_Init+0x90>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <MX_UART5_Init+0x90>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003bce:	4b1c      	ldr	r3, [pc, #112]	; (8003c40 <MX_UART5_Init+0x90>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003bd4:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <MX_UART5_Init+0x90>)
 8003bd6:	220c      	movs	r2, #12
 8003bd8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bda:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <MX_UART5_Init+0x90>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003be0:	4b17      	ldr	r3, [pc, #92]	; (8003c40 <MX_UART5_Init+0x90>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003be6:	4b16      	ldr	r3, [pc, #88]	; (8003c40 <MX_UART5_Init+0x90>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003bec:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <MX_UART5_Init+0x90>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bf2:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <MX_UART5_Init+0x90>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003bf8:	4811      	ldr	r0, [pc, #68]	; (8003c40 <MX_UART5_Init+0x90>)
 8003bfa:	f007 ff9f 	bl	800bb3c <HAL_UART_Init>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8003c04:	f7ff fd08 	bl	8003618 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c08:	2100      	movs	r1, #0
 8003c0a:	480d      	ldr	r0, [pc, #52]	; (8003c40 <MX_UART5_Init+0x90>)
 8003c0c:	f008 ff34 	bl	800ca78 <HAL_UARTEx_SetTxFifoThreshold>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8003c16:	f7ff fcff 	bl	8003618 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4808      	ldr	r0, [pc, #32]	; (8003c40 <MX_UART5_Init+0x90>)
 8003c1e:	f008 ff69 	bl	800caf4 <HAL_UARTEx_SetRxFifoThreshold>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8003c28:	f7ff fcf6 	bl	8003618 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003c2c:	4804      	ldr	r0, [pc, #16]	; (8003c40 <MX_UART5_Init+0x90>)
 8003c2e:	f008 feea 	bl	800ca06 <HAL_UARTEx_DisableFifoMode>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8003c38:	f7ff fcee 	bl	8003618 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003c3c:	bf00      	nop
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20004e98 	.word	0x20004e98
 8003c44:	40005000 	.word	0x40005000

08003c48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b0ba      	sub	sp, #232	; 0xe8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	609a      	str	r2, [r3, #8]
 8003c5c:	60da      	str	r2, [r3, #12]
 8003c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c60:	f107 0318 	add.w	r3, r7, #24
 8003c64:	22bc      	movs	r2, #188	; 0xbc
 8003c66:	2100      	movs	r1, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f00b fda1 	bl	800f7b0 <memset>
  if(uartHandle->Instance==UART5)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a37      	ldr	r2, [pc, #220]	; (8003d50 <HAL_UART_MspInit+0x108>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d166      	bne.n	8003d46 <HAL_UART_MspInit+0xfe>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c82:	f107 0318 	add.w	r3, r7, #24
 8003c86:	4618      	mov	r0, r3
 8003c88:	f003 fe2e 	bl	80078e8 <HAL_RCCEx_PeriphCLKConfig>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003c92:	f7ff fcc1 	bl	8003618 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003c96:	4b2f      	ldr	r3, [pc, #188]	; (8003d54 <HAL_UART_MspInit+0x10c>)
 8003c98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c9c:	4a2d      	ldr	r2, [pc, #180]	; (8003d54 <HAL_UART_MspInit+0x10c>)
 8003c9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ca2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ca6:	4b2b      	ldr	r3, [pc, #172]	; (8003d54 <HAL_UART_MspInit+0x10c>)
 8003ca8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cb4:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <HAL_UART_MspInit+0x10c>)
 8003cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cba:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <HAL_UART_MspInit+0x10c>)
 8003cbc:	f043 0304 	orr.w	r3, r3, #4
 8003cc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003cc4:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <HAL_UART_MspInit+0x10c>)
 8003cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cd2:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <HAL_UART_MspInit+0x10c>)
 8003cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cd8:	4a1e      	ldr	r2, [pc, #120]	; (8003d54 <HAL_UART_MspInit+0x10c>)
 8003cda:	f043 0308 	orr.w	r3, r3, #8
 8003cde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ce2:	4b1c      	ldr	r3, [pc, #112]	; (8003d54 <HAL_UART_MspInit+0x10c>)
 8003ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d04:	2300      	movs	r3, #0
 8003d06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d14:	4619      	mov	r1, r3
 8003d16:	4810      	ldr	r0, [pc, #64]	; (8003d58 <HAL_UART_MspInit+0x110>)
 8003d18:	f002 f87e 	bl	8005e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d22:	2302      	movs	r3, #2
 8003d24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003d34:	2308      	movs	r3, #8
 8003d36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d3a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4806      	ldr	r0, [pc, #24]	; (8003d5c <HAL_UART_MspInit+0x114>)
 8003d42:	f002 f869 	bl	8005e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8003d46:	bf00      	nop
 8003d48:	37e8      	adds	r7, #232	; 0xe8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40005000 	.word	0x40005000
 8003d54:	58024400 	.word	0x58024400
 8003d58:	58020800 	.word	0x58020800
 8003d5c:	58020c00 	.word	0x58020c00

08003d60 <L6474_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void L6474_Board_Delay(uint32_t delay)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fb11 	bl	8004390 <HAL_Delay>
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <L6474_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
  * @retval None
 **********************************************************/
void L6474_Board_DisableIrq(void)
{
 8003d76:	b480      	push	{r7}
 8003d78:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003d7a:	b672      	cpsid	i
}
 8003d7c:	bf00      	nop
  __disable_irq();
}
 8003d7e:	bf00      	nop
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <L6474_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void L6474_Board_EnableIrq(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8003d8c:	b662      	cpsie	i
}
 8003d8e:	bf00      	nop
  __enable_irq();
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <L6474_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the L6474s
 * @param[in] deviceId (from 0 to 2)
 * @retval None
  **********************************************************/
void L6474_Board_GpioInit(uint8_t deviceId)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08a      	sub	sp, #40	; 0x28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  if (deviceId ==0)
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d16a      	bne.n	8003e82 <L6474_Board_GpioInit+0xe6>
  {
    /* GPIO Ports Clock Enable */
    __GPIOC_CLK_ENABLE();
 8003dac:	4b53      	ldr	r3, [pc, #332]	; (8003efc <L6474_Board_GpioInit+0x160>)
 8003dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003db2:	4a52      	ldr	r2, [pc, #328]	; (8003efc <L6474_Board_GpioInit+0x160>)
 8003db4:	f043 0304 	orr.w	r3, r3, #4
 8003db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dbc:	4b4f      	ldr	r3, [pc, #316]	; (8003efc <L6474_Board_GpioInit+0x160>)
 8003dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	693b      	ldr	r3, [r7, #16]
    __GPIOA_CLK_ENABLE();
 8003dca:	4b4c      	ldr	r3, [pc, #304]	; (8003efc <L6474_Board_GpioInit+0x160>)
 8003dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dd0:	4a4a      	ldr	r2, [pc, #296]	; (8003efc <L6474_Board_GpioInit+0x160>)
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dda:	4b48      	ldr	r3, [pc, #288]	; (8003efc <L6474_Board_GpioInit+0x160>)
 8003ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]
    __GPIOB_CLK_ENABLE();
 8003de8:	4b44      	ldr	r3, [pc, #272]	; (8003efc <L6474_Board_GpioInit+0x160>)
 8003dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dee:	4a43      	ldr	r2, [pc, #268]	; (8003efc <L6474_Board_GpioInit+0x160>)
 8003df0:	f043 0302 	orr.w	r3, r3, #2
 8003df4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003df8:	4b40      	ldr	r3, [pc, #256]	; (8003efc <L6474_Board_GpioInit+0x160>)
 8003dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]
    
    /* Configure L6474 - Flag pin -------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 8003e06:	2310      	movs	r3, #16
 8003e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e0a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e10:	2301      	movs	r3, #1
 8003e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003e14:	2301      	movs	r3, #1
 8003e16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 8003e18:	f107 0314 	add.w	r3, r7, #20
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4838      	ldr	r0, [pc, #224]	; (8003f00 <L6474_Board_GpioInit+0x164>)
 8003e20:	f001 fffa 	bl	8005e18 <HAL_GPIO_Init>
    
   /* Set Priority of External Line Interrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(EXTI_MCU_LINE_IRQn, 5, 0);
 8003e24:	2200      	movs	r2, #0
 8003e26:	2105      	movs	r1, #5
 8003e28:	2028      	movs	r0, #40	; 0x28
 8003e2a:	f001 fdcb 	bl	80059c4 <HAL_NVIC_SetPriority>
      
    /* Enable the External Line Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(EXTI_MCU_LINE_IRQn);    
 8003e2e:	2028      	movs	r0, #40	; 0x28
 8003e30:	f001 fde2 	bl	80059f8 <HAL_NVIC_EnableIRQ>

    /* Configure L6474 - CS pin ---------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 8003e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003e42:	2301      	movs	r3, #1
 8003e44:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 8003e46:	f107 0314 	add.w	r3, r7, #20
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	482d      	ldr	r0, [pc, #180]	; (8003f04 <L6474_Board_GpioInit+0x168>)
 8003e4e:	f001 ffe3 	bl	8005e18 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8003e52:	2201      	movs	r2, #1
 8003e54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e58:	482a      	ldr	r0, [pc, #168]	; (8003f04 <L6474_Board_GpioInit+0x168>)
 8003e5a:	f002 f98d 	bl	8006178 <HAL_GPIO_WritePin>
    
    /* Configure L6474 - STBY/RESET pin -------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_RESET_PIN;
 8003e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e64:	2301      	movs	r3, #1
 8003e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, &GPIO_InitStruct);
 8003e70:	f107 0314 	add.w	r3, r7, #20
 8003e74:	4619      	mov	r1, r3
 8003e76:	4824      	ldr	r0, [pc, #144]	; (8003f08 <L6474_Board_GpioInit+0x16c>)
 8003e78:	f001 ffce 	bl	8005e18 <HAL_GPIO_Init>
    L6474_Board_Reset(0);  
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	f000 f949 	bl	8004114 <L6474_Board_Reset>
  }
  
  switch (deviceId)
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d025      	beq.n	8003ed4 <L6474_Board_GpioInit+0x138>
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	dc32      	bgt.n	8003ef2 <L6474_Board_GpioInit+0x156>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <L6474_Board_GpioInit+0xfa>
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d010      	beq.n	8003eb6 <L6474_Board_GpioInit+0x11a>
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
        break;
  }
}
 8003e94:	e02d      	b.n	8003ef2 <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN;
 8003e96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e9a:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, &GPIO_InitStruct);
 8003ea8:	f107 0314 	add.w	r3, r7, #20
 8003eac:	4619      	mov	r1, r3
 8003eae:	4816      	ldr	r0, [pc, #88]	; (8003f08 <L6474_Board_GpioInit+0x16c>)
 8003eb0:	f001 ffb2 	bl	8005e18 <HAL_GPIO_Init>
      break;
 8003eb4:	e01d      	b.n	8003ef2 <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN;
 8003eb6:	2320      	movs	r3, #32
 8003eb8:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, &GPIO_InitStruct);
 8003ec6:	f107 0314 	add.w	r3, r7, #20
 8003eca:	4619      	mov	r1, r3
 8003ecc:	480d      	ldr	r0, [pc, #52]	; (8003f04 <L6474_Board_GpioInit+0x168>)
 8003ece:	f001 ffa3 	bl	8005e18 <HAL_GPIO_Init>
      break;
 8003ed2:	e00e      	b.n	8003ef2 <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN;
 8003ed4:	2310      	movs	r3, #16
 8003ed6:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
 8003ee4:	f107 0314 	add.w	r3, r7, #20
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4806      	ldr	r0, [pc, #24]	; (8003f04 <L6474_Board_GpioInit+0x168>)
 8003eec:	f001 ff94 	bl	8005e18 <HAL_GPIO_Init>
        break;
 8003ef0:	bf00      	nop
}
 8003ef2:	bf00      	nop
 8003ef4:	3728      	adds	r7, #40	; 0x28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	58024400 	.word	0x58024400
 8003f00:	58021c00 	.word	0x58021c00
 8003f04:	58020400 	.word	0x58020400
 8003f08:	58022000 	.word	0x58022000

08003f0c <L6474_Board_Pwm1SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm1SetFreq(uint16_t newFreq)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	4603      	mov	r3, r0
 8003f14:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8003f16:	f003 facf 	bl	80074b8 <HAL_RCC_GetSysClockFreq>
 8003f1a:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM1_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	029b      	lsls	r3, r3, #10
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f26:	3b01      	subs	r3, #1
 8003f28:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm1, period);
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <L6474_Board_Pwm1SetFreq+0x48>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f32:	4a08      	ldr	r2, [pc, #32]	; (8003f54 <L6474_Board_Pwm1SetFreq+0x48>)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1, period >> 1);
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <L6474_Board_Pwm1SetFreq+0x48>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	0852      	lsrs	r2, r2, #1
 8003f40:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start_IT(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);  
 8003f42:	2100      	movs	r1, #0
 8003f44:	4803      	ldr	r0, [pc, #12]	; (8003f54 <L6474_Board_Pwm1SetFreq+0x48>)
 8003f46:	f006 fe01 	bl	800ab4c <HAL_TIM_PWM_Start_IT>
}
 8003f4a:	bf00      	nop
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20004f28 	.word	0x20004f28

08003f58 <L6474_Board_Pwm2SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm2SetFreq(uint16_t newFreq)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8003f62:	f003 faa9 	bl	80074b8 <HAL_RCC_GetSysClockFreq>
 8003f66:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM2_FREQ_RESCALER  * (uint32_t)newFreq)) - 1;
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	029b      	lsls	r3, r3, #10
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm2, period);
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <L6474_Board_Pwm2SetFreq+0x48>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f7e:	4a08      	ldr	r2, [pc, #32]	; (8003fa0 <L6474_Board_Pwm2SetFreq+0x48>)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2, period >> 1);
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <L6474_Board_Pwm2SetFreq+0x48>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	0852      	lsrs	r2, r2, #1
 8003f8c:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start_IT(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 8003f8e:	2104      	movs	r1, #4
 8003f90:	4803      	ldr	r0, [pc, #12]	; (8003fa0 <L6474_Board_Pwm2SetFreq+0x48>)
 8003f92:	f006 fddb 	bl	800ab4c <HAL_TIM_PWM_Start_IT>
}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20004fc0 	.word	0x20004fc0

08003fa4 <L6474_Board_Pwm3SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm3SetFreq(uint16_t newFreq)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8003fae:	f003 fa83 	bl	80074b8 <HAL_RCC_GetSysClockFreq>
 8003fb2:	60f8      	str	r0, [r7, #12]
  /* Double the frequency as the SW is generated by SW */
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM3_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	02db      	lsls	r3, r3, #11
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm3, period);
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <L6474_Board_Pwm3SetFreq+0x48>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fca:	4a08      	ldr	r2, [pc, #32]	; (8003fec <L6474_Board_Pwm3SetFreq+0x48>)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3, period >> 1);
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <L6474_Board_Pwm3SetFreq+0x48>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	0852      	lsrs	r2, r2, #1
 8003fd8:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start_IT(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);  
 8003fda:	2108      	movs	r1, #8
 8003fdc:	4803      	ldr	r0, [pc, #12]	; (8003fec <L6474_Board_Pwm3SetFreq+0x48>)
 8003fde:	f006 fdb5 	bl	800ab4c <HAL_TIM_PWM_Start_IT>
}
 8003fe2:	bf00      	nop
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	20004f74 	.word	0x20004f74

08003ff0 <L6474_Board_PwmInit>:
 * @note Device 0 uses PWM1 based on timer 1 
 * Device 1 uses PWM 2 based on timer 2
 * Device 2 uses PWM3 based timer 0
 **********************************************************/
void L6474_Board_PwmInit(uint8_t deviceId)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08e      	sub	sp, #56	; 0x38
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	71fb      	strb	r3, [r7, #7]
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;
  uint32_t  channel;

  switch (deviceId)
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d00a      	beq.n	8004016 <L6474_Board_PwmInit+0x26>
 8004000:	2b02      	cmp	r3, #2
 8004002:	d011      	beq.n	8004028 <L6474_Board_PwmInit+0x38>
  {

  case 0:
  default:
      pHTim = &hTimPwm1;
 8004004:	4b21      	ldr	r3, [pc, #132]	; (800408c <L6474_Board_PwmInit+0x9c>)
 8004006:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1;
 8004008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800400e:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1;
 8004010:	2300      	movs	r3, #0
 8004012:	633b      	str	r3, [r7, #48]	; 0x30

      break;
 8004014:	e010      	b.n	8004038 <L6474_Board_PwmInit+0x48>
    case  1:
      pHTim = &hTimPwm2;
 8004016:	4b1e      	ldr	r3, [pc, #120]	; (8004090 <L6474_Board_PwmInit+0xa0>)
 8004018:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2;
 800401a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004020:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2;
 8004022:	2304      	movs	r3, #4
 8004024:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004026:	e007      	b.n	8004038 <L6474_Board_PwmInit+0x48>


    case 2:
      pHTim = &hTimPwm3;
 8004028:	4b1a      	ldr	r3, [pc, #104]	; (8004094 <L6474_Board_PwmInit+0xa4>)
 800402a:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3;
 800402c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800402e:	4a1a      	ldr	r2, [pc, #104]	; (8004098 <L6474_Board_PwmInit+0xa8>)
 8004030:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3;
 8004032:	2308      	movs	r3, #8
 8004034:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004036:	bf00      	nop
  }
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 8004038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800403e:	605a      	str	r2, [r3, #4]
  
  pHTim->Init.Period = 0;
 8004040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004042:	2200      	movs	r2, #0
 8004044:	60da      	str	r2, [r3, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004048:	2200      	movs	r2, #0
 800404a:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(pHTim);
 800404c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800404e:	f006 fc85 	bl	800a95c <HAL_TIM_PWM_Init>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004052:	2360      	movs	r3, #96	; 0x60
 8004054:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800405e:	2300      	movs	r3, #0
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8004062:	f107 0314 	add.w	r3, r7, #20
 8004066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004068:	4619      	mov	r1, r3
 800406a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800406c:	f006 ffe8 	bl	800b040 <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004070:	2300      	movs	r3, #0
 8004072:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8004078:	f107 0308 	add.w	r3, r7, #8
 800407c:	4619      	mov	r1, r3
 800407e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004080:	f007 fcb0 	bl	800b9e4 <HAL_TIMEx_MasterConfigSynchronization>
}
 8004084:	bf00      	nop
 8004086:	3738      	adds	r7, #56	; 0x38
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20004f28 	.word	0x20004f28
 8004090:	20004fc0 	.word	0x20004fc0
 8004094:	20004f74 	.word	0x20004f74
 8004098:	40000800 	.word	0x40000800

0800409c <L6474_Board_PwmStop>:
 * @brief  Stops the PWM uses by the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_PwmStop(uint8_t deviceId)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	71fb      	strb	r3, [r7, #7]
  switch (deviceId)
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d010      	beq.n	80040ce <L6474_Board_PwmStop+0x32>
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	dc13      	bgt.n	80040d8 <L6474_Board_PwmStop+0x3c>
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <L6474_Board_PwmStop+0x1e>
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d005      	beq.n	80040c4 <L6474_Board_PwmStop+0x28>
    case 2:
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
      
      break;
    default:
      break;//ignore error
 80040b8:	e00e      	b.n	80040d8 <L6474_Board_PwmStop+0x3c>
       HAL_TIM_PWM_Stop(&hTimPwm1,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 80040ba:	2100      	movs	r1, #0
 80040bc:	4809      	ldr	r0, [pc, #36]	; (80040e4 <L6474_Board_PwmStop+0x48>)
 80040be:	f006 fcaf 	bl	800aa20 <HAL_TIM_PWM_Stop>
      break;
 80040c2:	e00a      	b.n	80040da <L6474_Board_PwmStop+0x3e>
      HAL_TIM_PWM_Stop(&hTimPwm2,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 80040c4:	2104      	movs	r1, #4
 80040c6:	4808      	ldr	r0, [pc, #32]	; (80040e8 <L6474_Board_PwmStop+0x4c>)
 80040c8:	f006 fcaa 	bl	800aa20 <HAL_TIM_PWM_Stop>
      break;
 80040cc:	e005      	b.n	80040da <L6474_Board_PwmStop+0x3e>
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
 80040ce:	2108      	movs	r1, #8
 80040d0:	4806      	ldr	r0, [pc, #24]	; (80040ec <L6474_Board_PwmStop+0x50>)
 80040d2:	f006 fca5 	bl	800aa20 <HAL_TIM_PWM_Stop>
      break;
 80040d6:	e000      	b.n	80040da <L6474_Board_PwmStop+0x3e>
      break;//ignore error
 80040d8:	bf00      	nop
  }
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20004f28 	.word	0x20004f28
 80040e8:	20004fc0 	.word	0x20004fc0
 80040ec:	20004f74 	.word	0x20004f74

080040f0 <L6474_Board_ReleaseReset>:
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_ReleaseReset(uint8_t deviceId)
{ 
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	4603      	mov	r3, r0
 80040f8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_SET); 
 80040fa:	2201      	movs	r2, #1
 80040fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004100:	4803      	ldr	r0, [pc, #12]	; (8004110 <L6474_Board_ReleaseReset+0x20>)
 8004102:	f002 f839 	bl	8006178 <HAL_GPIO_WritePin>
}
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	58022000 	.word	0x58022000

08004114 <L6474_Board_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_Reset(uint8_t deviceId)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_RESET); 
 800411e:	2200      	movs	r2, #0
 8004120:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004124:	4803      	ldr	r0, [pc, #12]	; (8004134 <L6474_Board_Reset+0x20>)
 8004126:	f002 f827 	bl	8006178 <HAL_GPIO_WritePin>
}
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	58022000 	.word	0x58022000

08004138 <L6474_Board_SetDirectionGpio>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] gpioState state of the direction gpio (0 to reset, 1 to set)
 * @retval None
 **********************************************************/
void L6474_Board_SetDirectionGpio(uint8_t deviceId, uint8_t gpioState)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	4603      	mov	r3, r0
 8004140:	460a      	mov	r2, r1
 8004142:	71fb      	strb	r3, [r7, #7]
 8004144:	4613      	mov	r3, r2
 8004146:	71bb      	strb	r3, [r7, #6]
  switch (deviceId)
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d006      	beq.n	800415c <L6474_Board_SetDirectionGpio+0x24>
 800414e:	2b02      	cmp	r3, #2
 8004150:	dc1a      	bgt.n	8004188 <L6474_Board_SetDirectionGpio+0x50>
 8004152:	2b00      	cmp	r3, #0
 8004154:	d010      	beq.n	8004178 <L6474_Board_SetDirectionGpio+0x40>
 8004156:	2b01      	cmp	r3, #1
 8004158:	d007      	beq.n	800416a <L6474_Board_SetDirectionGpio+0x32>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
      break;
    default:
      ;
  }
}
 800415a:	e015      	b.n	8004188 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN, (GPIO_PinState)gpioState); 
 800415c:	79bb      	ldrb	r3, [r7, #6]
 800415e:	461a      	mov	r2, r3
 8004160:	2110      	movs	r1, #16
 8004162:	480b      	ldr	r0, [pc, #44]	; (8004190 <L6474_Board_SetDirectionGpio+0x58>)
 8004164:	f002 f808 	bl	8006178 <HAL_GPIO_WritePin>
      break;
 8004168:	e00e      	b.n	8004188 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN, (GPIO_PinState)gpioState); 
 800416a:	79bb      	ldrb	r3, [r7, #6]
 800416c:	461a      	mov	r2, r3
 800416e:	2120      	movs	r1, #32
 8004170:	4807      	ldr	r0, [pc, #28]	; (8004190 <L6474_Board_SetDirectionGpio+0x58>)
 8004172:	f002 f801 	bl	8006178 <HAL_GPIO_WritePin>
      break;
 8004176:	e007      	b.n	8004188 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
 8004178:	79bb      	ldrb	r3, [r7, #6]
 800417a:	461a      	mov	r2, r3
 800417c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004180:	4804      	ldr	r0, [pc, #16]	; (8004194 <L6474_Board_SetDirectionGpio+0x5c>)
 8004182:	f001 fff9 	bl	8006178 <HAL_GPIO_WritePin>
      break;
 8004186:	bf00      	nop
}
 8004188:	bf00      	nop
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	58020400 	.word	0x58020400
 8004194:	58022000 	.word	0x58022000

08004198 <L6474_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by L6474
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t L6474_Board_SpiInit(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 800419e:	4b19      	ldr	r3, [pc, #100]	; (8004204 <L6474_Board_SpiInit+0x6c>)
 80041a0:	4a19      	ldr	r2, [pc, #100]	; (8004208 <L6474_Board_SpiInit+0x70>)
 80041a2:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 80041a4:	4b17      	ldr	r3, [pc, #92]	; (8004204 <L6474_Board_SpiInit+0x6c>)
 80041a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041aa:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 80041ac:	4b15      	ldr	r3, [pc, #84]	; (8004204 <L6474_Board_SpiInit+0x6c>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 80041b2:	4b14      	ldr	r3, [pc, #80]	; (8004204 <L6474_Board_SpiInit+0x6c>)
 80041b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041b8:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 80041ba:	4b12      	ldr	r3, [pc, #72]	; (8004204 <L6474_Board_SpiInit+0x6c>)
 80041bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041c0:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 80041c2:	4b10      	ldr	r3, [pc, #64]	; (8004204 <L6474_Board_SpiInit+0x6c>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 80041c8:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <L6474_Board_SpiInit+0x6c>)
 80041ca:	2207      	movs	r2, #7
 80041cc:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 80041ce:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <L6474_Board_SpiInit+0x6c>)
 80041d0:	2207      	movs	r2, #7
 80041d2:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80041d4:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <L6474_Board_SpiInit+0x6c>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 80041da:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <L6474_Board_SpiInit+0x6c>)
 80041dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80041e0:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 80041e2:	4b08      	ldr	r3, [pc, #32]	; (8004204 <L6474_Board_SpiInit+0x6c>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	625a      	str	r2, [r3, #36]	; 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80041e8:	4b06      	ldr	r3, [pc, #24]	; (8004204 <L6474_Board_SpiInit+0x6c>)
 80041ea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80041ee:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 80041f0:	4804      	ldr	r0, [pc, #16]	; (8004204 <L6474_Board_SpiInit+0x6c>)
 80041f2:	f005 fdff 	bl	8009df4 <HAL_SPI_Init>
 80041f6:	4603      	mov	r3, r0
 80041f8:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 80041fa:	79fb      	ldrb	r3, [r7, #7]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	200001ac 	.word	0x200001ac
 8004208:	40003800 	.word	0x40003800

0800420c <L6474_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t L6474_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	4613      	mov	r3, r2
 8004218:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 800421a:	2200      	movs	r2, #0
 800421c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004220:	4816      	ldr	r0, [pc, #88]	; (800427c <L6474_Board_SpiWriteBytes+0x70>)
 8004222:	f001 ffa9 	bl	8006178 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 8004226:	2300      	movs	r3, #0
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	e016      	b.n	800425a <L6474_Board_SpiWriteBytes+0x4e>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 800422c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	2301      	movs	r3, #1
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	68f9      	ldr	r1, [r7, #12]
 8004238:	4811      	ldr	r0, [pc, #68]	; (8004280 <L6474_Board_SpiWriteBytes+0x74>)
 800423a:	f005 fee1 	bl	800a000 <HAL_SPI_TransmitReceive>
 800423e:	4603      	mov	r3, r0
 8004240:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8004242:	7dfb      	ldrb	r3, [r7, #23]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10d      	bne.n	8004264 <L6474_Board_SpiWriteBytes+0x58>
    {
      break;
    }
    pByteToTransmit++;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	3301      	adds	r3, #1
 800424c:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	3301      	adds	r3, #1
 8004252:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	3301      	adds	r3, #1
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	429a      	cmp	r2, r3
 8004260:	d3e4      	bcc.n	800422c <L6474_Board_SpiWriteBytes+0x20>
 8004262:	e000      	b.n	8004266 <L6474_Board_SpiWriteBytes+0x5a>
      break;
 8004264:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8004266:	2201      	movs	r2, #1
 8004268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800426c:	4803      	ldr	r0, [pc, #12]	; (800427c <L6474_Board_SpiWriteBytes+0x70>)
 800426e:	f001 ff83 	bl	8006178 <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 8004272:	7dfb      	ldrb	r3, [r7, #23]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	58020400 	.word	0x58020400
 8004280:	200001ac 	.word	0x200001ac

08004284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004284:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004288:	f7ff fc0a 	bl	8003aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800428c:	480c      	ldr	r0, [pc, #48]	; (80042c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800428e:	490d      	ldr	r1, [pc, #52]	; (80042c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004290:	4a0d      	ldr	r2, [pc, #52]	; (80042c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004294:	e002      	b.n	800429c <LoopCopyDataInit>

08004296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800429a:	3304      	adds	r3, #4

0800429c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800429c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800429e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042a0:	d3f9      	bcc.n	8004296 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042a2:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042a4:	4c0a      	ldr	r4, [pc, #40]	; (80042d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80042a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042a8:	e001      	b.n	80042ae <LoopFillZerobss>

080042aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042ac:	3204      	adds	r2, #4

080042ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042b0:	d3fb      	bcc.n	80042aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042b2:	f00b fa4b 	bl	800f74c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042b6:	f7ff f8d1 	bl	800345c <main>
  bx  lr
 80042ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80042bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042c4:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 80042c8:	0800f91c 	.word	0x0800f91c
  ldr r2, =_sbss
 80042cc:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80042d0:	20005050 	.word	0x20005050

080042d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042d4:	e7fe      	b.n	80042d4 <ADC3_IRQHandler>
	...

080042d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042de:	2003      	movs	r0, #3
 80042e0:	f001 fb65 	bl	80059ae <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042e4:	f003 f8e8 	bl	80074b8 <HAL_RCC_GetSysClockFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b15      	ldr	r3, [pc, #84]	; (8004340 <HAL_Init+0x68>)
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	0a1b      	lsrs	r3, r3, #8
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	4913      	ldr	r1, [pc, #76]	; (8004344 <HAL_Init+0x6c>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	f003 031f 	and.w	r3, r3, #31
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004300:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004302:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <HAL_Init+0x68>)
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	4a0e      	ldr	r2, [pc, #56]	; (8004344 <HAL_Init+0x6c>)
 800430c:	5cd3      	ldrb	r3, [r2, r3]
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
 8004318:	4a0b      	ldr	r2, [pc, #44]	; (8004348 <HAL_Init+0x70>)
 800431a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800431c:	4a0b      	ldr	r2, [pc, #44]	; (800434c <HAL_Init+0x74>)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004322:	2000      	movs	r0, #0
 8004324:	f7ff fb26 	bl	8003974 <HAL_InitTick>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e002      	b.n	8004338 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004332:	f7ff fb01 	bl	8003938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	58024400 	.word	0x58024400
 8004344:	0800f8d4 	.word	0x0800f8d4
 8004348:	20000158 	.word	0x20000158
 800434c:	20000154 	.word	0x20000154

08004350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004354:	4b06      	ldr	r3, [pc, #24]	; (8004370 <HAL_IncTick+0x20>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	4b06      	ldr	r3, [pc, #24]	; (8004374 <HAL_IncTick+0x24>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4413      	add	r3, r2
 8004360:	4a04      	ldr	r2, [pc, #16]	; (8004374 <HAL_IncTick+0x24>)
 8004362:	6013      	str	r3, [r2, #0]
}
 8004364:	bf00      	nop
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	20000160 	.word	0x20000160
 8004374:	2000500c 	.word	0x2000500c

08004378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  return uwTick;
 800437c:	4b03      	ldr	r3, [pc, #12]	; (800438c <HAL_GetTick+0x14>)
 800437e:	681b      	ldr	r3, [r3, #0]
}
 8004380:	4618      	mov	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	2000500c 	.word	0x2000500c

08004390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004398:	f7ff ffee 	bl	8004378 <HAL_GetTick>
 800439c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a8:	d005      	beq.n	80043b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043aa:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <HAL_Delay+0x44>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4413      	add	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80043b6:	bf00      	nop
 80043b8:	f7ff ffde 	bl	8004378 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d8f7      	bhi.n	80043b8 <HAL_Delay+0x28>
  {
  }
}
 80043c8:	bf00      	nop
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000160 	.word	0x20000160

080043d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80043dc:	4b03      	ldr	r3, [pc, #12]	; (80043ec <HAL_GetREVID+0x14>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	0c1b      	lsrs	r3, r3, #16
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	5c001000 	.word	0x5c001000

080043f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	609a      	str	r2, [r3, #8]
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	609a      	str	r2, [r3, #8]
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3360      	adds	r3, #96	; 0x60
 800446a:	461a      	mov	r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	430b      	orrs	r3, r1
 8004486:	431a      	orrs	r2, r3
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800448c:	bf00      	nop
 800448e:	371c      	adds	r7, #28
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 031f 	and.w	r3, r3, #31
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	fa01 f303 	lsl.w	r3, r1, r3
 80044b8:	431a      	orrs	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	611a      	str	r2, [r3, #16]
}
 80044be:	bf00      	nop
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b087      	sub	sp, #28
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3360      	adds	r3, #96	; 0x60
 80044da:	461a      	mov	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	601a      	str	r2, [r3, #0]
  }
}
 80044f4:	bf00      	nop
 80044f6:	371c      	adds	r7, #28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004526:	b480      	push	{r7}
 8004528:	b087      	sub	sp, #28
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3330      	adds	r3, #48	; 0x30
 8004536:	461a      	mov	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	0a1b      	lsrs	r3, r3, #8
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	f003 030c 	and.w	r3, r3, #12
 8004542:	4413      	add	r3, r2
 8004544:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f003 031f 	and.w	r3, r3, #31
 8004550:	211f      	movs	r1, #31
 8004552:	fa01 f303 	lsl.w	r3, r1, r3
 8004556:	43db      	mvns	r3, r3
 8004558:	401a      	ands	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	0e9b      	lsrs	r3, r3, #26
 800455e:	f003 011f 	and.w	r1, r3, #31
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	fa01 f303 	lsl.w	r3, r1, r3
 800456c:	431a      	orrs	r2, r3
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800457e:	b480      	push	{r7}
 8004580:	b087      	sub	sp, #28
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3314      	adds	r3, #20
 800458e:	461a      	mov	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	0e5b      	lsrs	r3, r3, #25
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	4413      	add	r3, r2
 800459c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	0d1b      	lsrs	r3, r3, #20
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	2107      	movs	r1, #7
 80045ac:	fa01 f303 	lsl.w	r3, r1, r3
 80045b0:	43db      	mvns	r3, r3
 80045b2:	401a      	ands	r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	0d1b      	lsrs	r3, r3, #20
 80045b8:	f003 031f 	and.w	r3, r3, #31
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	fa01 f303 	lsl.w	r3, r1, r3
 80045c2:	431a      	orrs	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80045c8:	bf00      	nop
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045ec:	43db      	mvns	r3, r3
 80045ee:	401a      	ands	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f003 0318 	and.w	r3, r3, #24
 80045f6:	4908      	ldr	r1, [pc, #32]	; (8004618 <LL_ADC_SetChannelSingleDiff+0x44>)
 80045f8:	40d9      	lsrs	r1, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	400b      	ands	r3, r1
 80045fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004602:	431a      	orrs	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800460a:	bf00      	nop
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	000fffff 	.word	0x000fffff

0800461c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 031f 	and.w	r3, r3, #31
}
 800462c:	4618      	mov	r0, r3
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004648:	4618      	mov	r0, r3
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	4b04      	ldr	r3, [pc, #16]	; (8004674 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004662:	4013      	ands	r3, r2
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6093      	str	r3, [r2, #8]
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	5fffffc0 	.word	0x5fffffc0

08004678 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800468c:	d101      	bne.n	8004692 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <LL_ADC_EnableInternalRegulator+0x24>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	6fffffc0 	.word	0x6fffffc0

080046c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046dc:	d101      	bne.n	80046e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	4b05      	ldr	r3, [pc, #20]	; (8004714 <LL_ADC_Enable+0x24>)
 80046fe:	4013      	ands	r3, r2
 8004700:	f043 0201 	orr.w	r2, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	7fffffc0 	.word	0x7fffffc0

08004718 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <LL_ADC_IsEnabled+0x18>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <LL_ADC_IsEnabled+0x1a>
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	4b05      	ldr	r3, [pc, #20]	; (8004764 <LL_ADC_REG_StartConversion+0x24>)
 800474e:	4013      	ands	r3, r2
 8004750:	f043 0204 	orr.w	r2, r3, #4
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	7fffffc0 	.word	0x7fffffc0

08004768 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b04      	cmp	r3, #4
 800477a:	d101      	bne.n	8004780 <LL_ADC_REG_IsConversionOngoing+0x18>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d101      	bne.n	80047a6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80047b4:	b590      	push	{r4, r7, lr}
 80047b6:	b089      	sub	sp, #36	; 0x24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e18e      	b.n	8004aec <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d109      	bne.n	80047f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7fb ff61 	bl	80006a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff ff3f 	bl	8004678 <LL_ADC_IsDeepPowerDownEnabled>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d004      	beq.n	800480a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff ff25 	bl	8004654 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff ff5a 	bl	80046c8 <LL_ADC_IsInternalRegulatorEnabled>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d114      	bne.n	8004844 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff ff3e 	bl	80046a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004824:	4b9a      	ldr	r3, [pc, #616]	; (8004a90 <HAL_ADC_Init+0x2dc>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	099b      	lsrs	r3, r3, #6
 800482a:	4a9a      	ldr	r2, [pc, #616]	; (8004a94 <HAL_ADC_Init+0x2e0>)
 800482c:	fba2 2303 	umull	r2, r3, r2, r3
 8004830:	099b      	lsrs	r3, r3, #6
 8004832:	3301      	adds	r3, #1
 8004834:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004836:	e002      	b.n	800483e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	3b01      	subs	r3, #1
 800483c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1f9      	bne.n	8004838 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff ff3d 	bl	80046c8 <LL_ADC_IsInternalRegulatorEnabled>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10d      	bne.n	8004870 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	f043 0210 	orr.w	r2, r3, #16
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004864:	f043 0201 	orr.w	r2, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff ff77 	bl	8004768 <LL_ADC_REG_IsConversionOngoing>
 800487a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004880:	f003 0310 	and.w	r3, r3, #16
 8004884:	2b00      	cmp	r3, #0
 8004886:	f040 8128 	bne.w	8004ada <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b00      	cmp	r3, #0
 800488e:	f040 8124 	bne.w	8004ada <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004896:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800489a:	f043 0202 	orr.w	r2, r3, #2
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff ff36 	bl	8004718 <LL_ADC_IsEnabled>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d136      	bne.n	8004920 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a78      	ldr	r2, [pc, #480]	; (8004a98 <HAL_ADC_Init+0x2e4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d004      	beq.n	80048c6 <HAL_ADC_Init+0x112>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a76      	ldr	r2, [pc, #472]	; (8004a9c <HAL_ADC_Init+0x2e8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d10e      	bne.n	80048e4 <HAL_ADC_Init+0x130>
 80048c6:	4874      	ldr	r0, [pc, #464]	; (8004a98 <HAL_ADC_Init+0x2e4>)
 80048c8:	f7ff ff26 	bl	8004718 <LL_ADC_IsEnabled>
 80048cc:	4604      	mov	r4, r0
 80048ce:	4873      	ldr	r0, [pc, #460]	; (8004a9c <HAL_ADC_Init+0x2e8>)
 80048d0:	f7ff ff22 	bl	8004718 <LL_ADC_IsEnabled>
 80048d4:	4603      	mov	r3, r0
 80048d6:	4323      	orrs	r3, r4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf0c      	ite	eq
 80048dc:	2301      	moveq	r3, #1
 80048de:	2300      	movne	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	e008      	b.n	80048f6 <HAL_ADC_Init+0x142>
 80048e4:	486e      	ldr	r0, [pc, #440]	; (8004aa0 <HAL_ADC_Init+0x2ec>)
 80048e6:	f7ff ff17 	bl	8004718 <LL_ADC_IsEnabled>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	bf0c      	ite	eq
 80048f0:	2301      	moveq	r3, #1
 80048f2:	2300      	movne	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d012      	beq.n	8004920 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a66      	ldr	r2, [pc, #408]	; (8004a98 <HAL_ADC_Init+0x2e4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d004      	beq.n	800490e <HAL_ADC_Init+0x15a>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a64      	ldr	r2, [pc, #400]	; (8004a9c <HAL_ADC_Init+0x2e8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d101      	bne.n	8004912 <HAL_ADC_Init+0x15e>
 800490e:	4a65      	ldr	r2, [pc, #404]	; (8004aa4 <HAL_ADC_Init+0x2f0>)
 8004910:	e000      	b.n	8004914 <HAL_ADC_Init+0x160>
 8004912:	4a65      	ldr	r2, [pc, #404]	; (8004aa8 <HAL_ADC_Init+0x2f4>)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f7ff fd68 	bl	80043f0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004920:	f7ff fd5a 	bl	80043d8 <HAL_GetREVID>
 8004924:	4603      	mov	r3, r0
 8004926:	f241 0203 	movw	r2, #4099	; 0x1003
 800492a:	4293      	cmp	r3, r2
 800492c:	d914      	bls.n	8004958 <HAL_ADC_Init+0x1a4>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b10      	cmp	r3, #16
 8004934:	d110      	bne.n	8004958 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	7d5b      	ldrb	r3, [r3, #21]
 800493a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004940:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004946:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	7f1b      	ldrb	r3, [r3, #28]
 800494c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800494e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004950:	f043 030c 	orr.w	r3, r3, #12
 8004954:	61bb      	str	r3, [r7, #24]
 8004956:	e00d      	b.n	8004974 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	7d5b      	ldrb	r3, [r3, #21]
 800495c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004962:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004968:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	7f1b      	ldrb	r3, [r3, #28]
 800496e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004970:	4313      	orrs	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	7f1b      	ldrb	r3, [r3, #28]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d106      	bne.n	800498a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	3b01      	subs	r3, #1
 8004982:	045b      	lsls	r3, r3, #17
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	4313      	orrs	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	2b00      	cmp	r3, #0
 8004990:	d009      	beq.n	80049a6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	4b3f      	ldr	r3, [pc, #252]	; (8004aac <HAL_ADC_Init+0x2f8>)
 80049ae:	4013      	ands	r3, r2
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6812      	ldr	r2, [r2, #0]
 80049b4:	69b9      	ldr	r1, [r7, #24]
 80049b6:	430b      	orrs	r3, r1
 80049b8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fed2 	bl	8004768 <LL_ADC_REG_IsConversionOngoing>
 80049c4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff fedf 	bl	800478e <LL_ADC_INJ_IsConversionOngoing>
 80049d0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d14a      	bne.n	8004a6e <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d147      	bne.n	8004a6e <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	7d1b      	ldrb	r3, [r3, #20]
 80049e2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	4b2f      	ldr	r3, [pc, #188]	; (8004ab0 <HAL_ADC_Init+0x2fc>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6812      	ldr	r2, [r2, #0]
 80049fa:	69b9      	ldr	r1, [r7, #24]
 80049fc:	430b      	orrs	r3, r1
 80049fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d11b      	bne.n	8004a42 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	4b27      	ldr	r3, [pc, #156]	; (8004ab4 <HAL_ADC_Init+0x300>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a1e:	3a01      	subs	r2, #1
 8004a20:	0411      	lsls	r1, r2, #16
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a26:	4311      	orrs	r1, r2
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a2c:	4311      	orrs	r1, r2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a32:	430a      	orrs	r2, r1
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	611a      	str	r2, [r3, #16]
 8004a40:	e007      	b.n	8004a52 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0201 	bic.w	r2, r2, #1
 8004a50:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fde9 	bl	8005640 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d120      	bne.n	8004ab8 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7c:	f023 010f 	bic.w	r1, r3, #15
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	1e5a      	subs	r2, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
 8004a8e:	e01b      	b.n	8004ac8 <HAL_ADC_Init+0x314>
 8004a90:	20000154 	.word	0x20000154
 8004a94:	053e2d63 	.word	0x053e2d63
 8004a98:	40022000 	.word	0x40022000
 8004a9c:	40022100 	.word	0x40022100
 8004aa0:	58026000 	.word	0x58026000
 8004aa4:	40022300 	.word	0x40022300
 8004aa8:	58026300 	.word	0x58026300
 8004aac:	fff0c003 	.word	0xfff0c003
 8004ab0:	ffffbffc 	.word	0xffffbffc
 8004ab4:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 020f 	bic.w	r2, r2, #15
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004acc:	f023 0303 	bic.w	r3, r3, #3
 8004ad0:	f043 0201 	orr.w	r2, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	655a      	str	r2, [r3, #84]	; 0x54
 8004ad8:	e007      	b.n	8004aea <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ade:	f043 0210 	orr.w	r2, r3, #16
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004aea:	7ffb      	ldrb	r3, [r7, #31]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3724      	adds	r7, #36	; 0x24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd90      	pop	{r4, r7, pc}

08004af4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a5c      	ldr	r2, [pc, #368]	; (8004c74 <HAL_ADC_Start+0x180>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d004      	beq.n	8004b10 <HAL_ADC_Start+0x1c>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a5b      	ldr	r2, [pc, #364]	; (8004c78 <HAL_ADC_Start+0x184>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d101      	bne.n	8004b14 <HAL_ADC_Start+0x20>
 8004b10:	4b5a      	ldr	r3, [pc, #360]	; (8004c7c <HAL_ADC_Start+0x188>)
 8004b12:	e000      	b.n	8004b16 <HAL_ADC_Start+0x22>
 8004b14:	4b5a      	ldr	r3, [pc, #360]	; (8004c80 <HAL_ADC_Start+0x18c>)
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fd80 	bl	800461c <LL_ADC_GetMultimode>
 8004b1c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fe20 	bl	8004768 <LL_ADC_REG_IsConversionOngoing>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f040 809a 	bne.w	8004c64 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <HAL_ADC_Start+0x4a>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e095      	b.n	8004c6a <HAL_ADC_Start+0x176>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fcf0 	bl	800552c <ADC_Enable>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004b50:	7dfb      	ldrb	r3, [r7, #23]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f040 8081 	bne.w	8004c5a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b5c:	4b49      	ldr	r3, [pc, #292]	; (8004c84 <HAL_ADC_Start+0x190>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a42      	ldr	r2, [pc, #264]	; (8004c78 <HAL_ADC_Start+0x184>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d002      	beq.n	8004b78 <HAL_ADC_Start+0x84>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	e000      	b.n	8004b7a <HAL_ADC_Start+0x86>
 8004b78:	4b3e      	ldr	r3, [pc, #248]	; (8004c74 <HAL_ADC_Start+0x180>)
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d002      	beq.n	8004b88 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d105      	bne.n	8004b94 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba0:	d106      	bne.n	8004bb0 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba6:	f023 0206 	bic.w	r2, r3, #6
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	659a      	str	r2, [r3, #88]	; 0x58
 8004bae:	e002      	b.n	8004bb6 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	221c      	movs	r2, #28
 8004bbc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a2b      	ldr	r2, [pc, #172]	; (8004c78 <HAL_ADC_Start+0x184>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d002      	beq.n	8004bd6 <HAL_ADC_Start+0xe2>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	e000      	b.n	8004bd8 <HAL_ADC_Start+0xe4>
 8004bd6:	4b27      	ldr	r3, [pc, #156]	; (8004c74 <HAL_ADC_Start+0x180>)
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d008      	beq.n	8004bf2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d005      	beq.n	8004bf2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	2b05      	cmp	r3, #5
 8004bea:	d002      	beq.n	8004bf2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	2b09      	cmp	r3, #9
 8004bf0:	d114      	bne.n	8004c1c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d007      	beq.n	8004c10 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff fd93 	bl	8004740 <LL_ADC_REG_StartConversion>
 8004c1a:	e025      	b.n	8004c68 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c20:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a12      	ldr	r2, [pc, #72]	; (8004c78 <HAL_ADC_Start+0x184>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d002      	beq.n	8004c38 <HAL_ADC_Start+0x144>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	e000      	b.n	8004c3a <HAL_ADC_Start+0x146>
 8004c38:	4b0e      	ldr	r3, [pc, #56]	; (8004c74 <HAL_ADC_Start+0x180>)
 8004c3a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00f      	beq.n	8004c68 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	655a      	str	r2, [r3, #84]	; 0x54
 8004c58:	e006      	b.n	8004c68 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004c62:	e001      	b.n	8004c68 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004c64:	2302      	movs	r3, #2
 8004c66:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40022000 	.word	0x40022000
 8004c78:	40022100 	.word	0x40022100
 8004c7c:	40022300 	.word	0x40022300
 8004c80:	58026300 	.word	0x58026300
 8004c84:	fffff0fe 	.word	0xfffff0fe

08004c88 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a72      	ldr	r2, [pc, #456]	; (8004e60 <HAL_ADC_PollForConversion+0x1d8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d004      	beq.n	8004ca6 <HAL_ADC_PollForConversion+0x1e>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a70      	ldr	r2, [pc, #448]	; (8004e64 <HAL_ADC_PollForConversion+0x1dc>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d101      	bne.n	8004caa <HAL_ADC_PollForConversion+0x22>
 8004ca6:	4b70      	ldr	r3, [pc, #448]	; (8004e68 <HAL_ADC_PollForConversion+0x1e0>)
 8004ca8:	e000      	b.n	8004cac <HAL_ADC_PollForConversion+0x24>
 8004caa:	4b70      	ldr	r3, [pc, #448]	; (8004e6c <HAL_ADC_PollForConversion+0x1e4>)
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff fcb5 	bl	800461c <LL_ADC_GetMultimode>
 8004cb2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d102      	bne.n	8004cc2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004cbc:	2308      	movs	r3, #8
 8004cbe:	61fb      	str	r3, [r7, #28]
 8004cc0:	e037      	b.n	8004d32 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2b05      	cmp	r3, #5
 8004ccc:	d002      	beq.n	8004cd4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b09      	cmp	r3, #9
 8004cd2:	d111      	bne.n	8004cf8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d007      	beq.n	8004cf2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce6:	f043 0220 	orr.w	r2, r3, #32
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e0b1      	b.n	8004e56 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004cf2:	2304      	movs	r3, #4
 8004cf4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004cf6:	e01c      	b.n	8004d32 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a58      	ldr	r2, [pc, #352]	; (8004e60 <HAL_ADC_PollForConversion+0x1d8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <HAL_ADC_PollForConversion+0x84>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a57      	ldr	r2, [pc, #348]	; (8004e64 <HAL_ADC_PollForConversion+0x1dc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d101      	bne.n	8004d10 <HAL_ADC_PollForConversion+0x88>
 8004d0c:	4b56      	ldr	r3, [pc, #344]	; (8004e68 <HAL_ADC_PollForConversion+0x1e0>)
 8004d0e:	e000      	b.n	8004d12 <HAL_ADC_PollForConversion+0x8a>
 8004d10:	4b56      	ldr	r3, [pc, #344]	; (8004e6c <HAL_ADC_PollForConversion+0x1e4>)
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff fc90 	bl	8004638 <LL_ADC_GetMultiDMATransfer>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d007      	beq.n	8004d2e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d22:	f043 0220 	orr.w	r2, r3, #32
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e093      	b.n	8004e56 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004d2e:	2304      	movs	r3, #4
 8004d30:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004d32:	f7ff fb21 	bl	8004378 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004d38:	e021      	b.n	8004d7e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d40:	d01d      	beq.n	8004d7e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004d42:	f7ff fb19 	bl	8004378 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d302      	bcc.n	8004d58 <HAL_ADC_PollForConversion+0xd0>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d112      	bne.n	8004d7e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	4013      	ands	r3, r2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10b      	bne.n	8004d7e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6a:	f043 0204 	orr.w	r2, r3, #4
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e06b      	b.n	8004e56 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	4013      	ands	r3, r2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0d6      	beq.n	8004d3a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff fbaf 	bl	8004500 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d01c      	beq.n	8004de2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	7d5b      	ldrb	r3, [r3, #21]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d118      	bne.n	8004de2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d111      	bne.n	8004de2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d105      	bne.n	8004de2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dda:	f043 0201 	orr.w	r2, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1f      	ldr	r2, [pc, #124]	; (8004e64 <HAL_ADC_PollForConversion+0x1dc>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d002      	beq.n	8004df2 <HAL_ADC_PollForConversion+0x16a>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	e000      	b.n	8004df4 <HAL_ADC_PollForConversion+0x16c>
 8004df2:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <HAL_ADC_PollForConversion+0x1d8>)
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6812      	ldr	r2, [r2, #0]
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d008      	beq.n	8004e0e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2b05      	cmp	r3, #5
 8004e06:	d002      	beq.n	8004e0e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2b09      	cmp	r3, #9
 8004e0c:	d104      	bne.n	8004e18 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	e00c      	b.n	8004e32 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a11      	ldr	r2, [pc, #68]	; (8004e64 <HAL_ADC_PollForConversion+0x1dc>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d002      	beq.n	8004e28 <HAL_ADC_PollForConversion+0x1a0>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	e000      	b.n	8004e2a <HAL_ADC_PollForConversion+0x1a2>
 8004e28:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <HAL_ADC_PollForConversion+0x1d8>)
 8004e2a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d104      	bne.n	8004e42 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	e008      	b.n	8004e54 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d103      	bne.n	8004e54 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	220c      	movs	r2, #12
 8004e52:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3720      	adds	r7, #32
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40022000 	.word	0x40022000
 8004e64:	40022100 	.word	0x40022100
 8004e68:	40022300 	.word	0x40022300
 8004e6c:	58026300 	.word	0x58026300

08004e70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
	...

08004e8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004e8c:	b590      	push	{r4, r7, lr}
 8004e8e:	b0a1      	sub	sp, #132	; 0x84
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	4a9d      	ldr	r2, [pc, #628]	; (800511c <HAL_ADC_ConfigChannel+0x290>)
 8004ea6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_ADC_ConfigChannel+0x2a>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e321      	b.n	80054fa <HAL_ADC_ConfigChannel+0x66e>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff fc50 	bl	8004768 <LL_ADC_REG_IsConversionOngoing>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f040 8306 	bne.w	80054dc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d108      	bne.n	8004eee <HAL_ADC_ConfigChannel+0x62>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	0e9b      	lsrs	r3, r3, #26
 8004ee2:	f003 031f 	and.w	r3, r3, #31
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	e016      	b.n	8004f1c <HAL_ADC_ConfigChannel+0x90>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ef6:	fa93 f3a3 	rbit	r3, r3
 8004efa:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004efc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004efe:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004f00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004f06:	2320      	movs	r3, #32
 8004f08:	e003      	b.n	8004f12 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004f0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f0c:	fab3 f383 	clz	r3, r3
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	f003 031f 	and.w	r3, r3, #31
 8004f16:	2201      	movs	r2, #1
 8004f18:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6812      	ldr	r2, [r2, #0]
 8004f20:	69d1      	ldr	r1, [r2, #28]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	430b      	orrs	r3, r1
 8004f28:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	6859      	ldr	r1, [r3, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	f7ff faf5 	bl	8004526 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff fc11 	bl	8004768 <LL_ADC_REG_IsConversionOngoing>
 8004f46:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff fc1e 	bl	800478e <LL_ADC_INJ_IsConversionOngoing>
 8004f52:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f040 80b3 	bne.w	80050c2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f040 80af 	bne.w	80050c2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6818      	ldr	r0, [r3, #0]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	6819      	ldr	r1, [r3, #0]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	461a      	mov	r2, r3
 8004f72:	f7ff fb04 	bl	800457e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004f76:	4b6a      	ldr	r3, [pc, #424]	; (8005120 <HAL_ADC_ConfigChannel+0x294>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004f7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f82:	d10b      	bne.n	8004f9c <HAL_ADC_ConfigChannel+0x110>
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	695a      	ldr	r2, [r3, #20]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	089b      	lsrs	r3, r3, #2
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	e01d      	b.n	8004fd8 <HAL_ADC_ConfigChannel+0x14c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10b      	bne.n	8004fc2 <HAL_ADC_ConfigChannel+0x136>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	695a      	ldr	r2, [r3, #20]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	089b      	lsrs	r3, r3, #2
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	e00a      	b.n	8004fd8 <HAL_ADC_ConfigChannel+0x14c>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	695a      	ldr	r2, [r3, #20]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	089b      	lsrs	r3, r3, #2
 8004fce:	f003 0304 	and.w	r3, r3, #4
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d027      	beq.n	8005032 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6818      	ldr	r0, [r3, #0]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	6919      	ldr	r1, [r3, #16]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ff0:	f7ff fa32 	bl	8004458 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6818      	ldr	r0, [r3, #0]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	6919      	ldr	r1, [r3, #16]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	7e5b      	ldrb	r3, [r3, #25]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d102      	bne.n	800500a <HAL_ADC_ConfigChannel+0x17e>
 8005004:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005008:	e000      	b.n	800500c <HAL_ADC_ConfigChannel+0x180>
 800500a:	2300      	movs	r3, #0
 800500c:	461a      	mov	r2, r3
 800500e:	f7ff fa5c 	bl	80044ca <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6919      	ldr	r1, [r3, #16]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	7e1b      	ldrb	r3, [r3, #24]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d102      	bne.n	8005028 <HAL_ADC_ConfigChannel+0x19c>
 8005022:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005026:	e000      	b.n	800502a <HAL_ADC_ConfigChannel+0x19e>
 8005028:	2300      	movs	r3, #0
 800502a:	461a      	mov	r2, r3
 800502c:	f7ff fa34 	bl	8004498 <LL_ADC_SetDataRightShift>
 8005030:	e047      	b.n	80050c2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005038:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	069b      	lsls	r3, r3, #26
 8005042:	429a      	cmp	r2, r3
 8005044:	d107      	bne.n	8005056 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005054:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800505c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	069b      	lsls	r3, r3, #26
 8005066:	429a      	cmp	r2, r3
 8005068:	d107      	bne.n	800507a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005078:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005080:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	069b      	lsls	r3, r3, #26
 800508a:	429a      	cmp	r2, r3
 800508c:	d107      	bne.n	800509e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800509c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	069b      	lsls	r3, r3, #26
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d107      	bne.n	80050c2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80050c0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff fb26 	bl	8004718 <LL_ADC_IsEnabled>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f040 820d 	bne.w	80054ee <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6818      	ldr	r0, [r3, #0]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	6819      	ldr	r1, [r3, #0]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	461a      	mov	r2, r3
 80050e2:	f7ff fa77 	bl	80045d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	4a0c      	ldr	r2, [pc, #48]	; (800511c <HAL_ADC_ConfigChannel+0x290>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	f040 8133 	bne.w	8005358 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d110      	bne.n	8005124 <HAL_ADC_ConfigChannel+0x298>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	0e9b      	lsrs	r3, r3, #26
 8005108:	3301      	adds	r3, #1
 800510a:	f003 031f 	and.w	r3, r3, #31
 800510e:	2b09      	cmp	r3, #9
 8005110:	bf94      	ite	ls
 8005112:	2301      	movls	r3, #1
 8005114:	2300      	movhi	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	e01e      	b.n	8005158 <HAL_ADC_ConfigChannel+0x2cc>
 800511a:	bf00      	nop
 800511c:	47ff0000 	.word	0x47ff0000
 8005120:	5c001000 	.word	0x5c001000
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800512c:	fa93 f3a3 	rbit	r3, r3
 8005130:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005134:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800513c:	2320      	movs	r3, #32
 800513e:	e003      	b.n	8005148 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005142:	fab3 f383 	clz	r3, r3
 8005146:	b2db      	uxtb	r3, r3
 8005148:	3301      	adds	r3, #1
 800514a:	f003 031f 	and.w	r3, r3, #31
 800514e:	2b09      	cmp	r3, #9
 8005150:	bf94      	ite	ls
 8005152:	2301      	movls	r3, #1
 8005154:	2300      	movhi	r3, #0
 8005156:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005158:	2b00      	cmp	r3, #0
 800515a:	d079      	beq.n	8005250 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005164:	2b00      	cmp	r3, #0
 8005166:	d107      	bne.n	8005178 <HAL_ADC_ConfigChannel+0x2ec>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	0e9b      	lsrs	r3, r3, #26
 800516e:	3301      	adds	r3, #1
 8005170:	069b      	lsls	r3, r3, #26
 8005172:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005176:	e015      	b.n	80051a4 <HAL_ADC_ConfigChannel+0x318>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005180:	fa93 f3a3 	rbit	r3, r3
 8005184:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005188:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800518a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8005190:	2320      	movs	r3, #32
 8005192:	e003      	b.n	800519c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005196:	fab3 f383 	clz	r3, r3
 800519a:	b2db      	uxtb	r3, r3
 800519c:	3301      	adds	r3, #1
 800519e:	069b      	lsls	r3, r3, #26
 80051a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d109      	bne.n	80051c4 <HAL_ADC_ConfigChannel+0x338>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	0e9b      	lsrs	r3, r3, #26
 80051b6:	3301      	adds	r3, #1
 80051b8:	f003 031f 	and.w	r3, r3, #31
 80051bc:	2101      	movs	r1, #1
 80051be:	fa01 f303 	lsl.w	r3, r1, r3
 80051c2:	e017      	b.n	80051f4 <HAL_ADC_ConfigChannel+0x368>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051cc:	fa93 f3a3 	rbit	r3, r3
 80051d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80051d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80051d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80051dc:	2320      	movs	r3, #32
 80051de:	e003      	b.n	80051e8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80051e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e2:	fab3 f383 	clz	r3, r3
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	3301      	adds	r3, #1
 80051ea:	f003 031f 	and.w	r3, r3, #31
 80051ee:	2101      	movs	r1, #1
 80051f0:	fa01 f303 	lsl.w	r3, r1, r3
 80051f4:	ea42 0103 	orr.w	r1, r2, r3
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10a      	bne.n	800521a <HAL_ADC_ConfigChannel+0x38e>
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	0e9b      	lsrs	r3, r3, #26
 800520a:	3301      	adds	r3, #1
 800520c:	f003 021f 	and.w	r2, r3, #31
 8005210:	4613      	mov	r3, r2
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	4413      	add	r3, r2
 8005216:	051b      	lsls	r3, r3, #20
 8005218:	e018      	b.n	800524c <HAL_ADC_ConfigChannel+0x3c0>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005222:	fa93 f3a3 	rbit	r3, r3
 8005226:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800522c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8005232:	2320      	movs	r3, #32
 8005234:	e003      	b.n	800523e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8005236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005238:	fab3 f383 	clz	r3, r3
 800523c:	b2db      	uxtb	r3, r3
 800523e:	3301      	adds	r3, #1
 8005240:	f003 021f 	and.w	r2, r3, #31
 8005244:	4613      	mov	r3, r2
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	4413      	add	r3, r2
 800524a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800524c:	430b      	orrs	r3, r1
 800524e:	e07e      	b.n	800534e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005258:	2b00      	cmp	r3, #0
 800525a:	d107      	bne.n	800526c <HAL_ADC_ConfigChannel+0x3e0>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	0e9b      	lsrs	r3, r3, #26
 8005262:	3301      	adds	r3, #1
 8005264:	069b      	lsls	r3, r3, #26
 8005266:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800526a:	e015      	b.n	8005298 <HAL_ADC_ConfigChannel+0x40c>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	fa93 f3a3 	rbit	r3, r3
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005284:	2320      	movs	r3, #32
 8005286:	e003      	b.n	8005290 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528a:	fab3 f383 	clz	r3, r3
 800528e:	b2db      	uxtb	r3, r3
 8005290:	3301      	adds	r3, #1
 8005292:	069b      	lsls	r3, r3, #26
 8005294:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d109      	bne.n	80052b8 <HAL_ADC_ConfigChannel+0x42c>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	0e9b      	lsrs	r3, r3, #26
 80052aa:	3301      	adds	r3, #1
 80052ac:	f003 031f 	and.w	r3, r3, #31
 80052b0:	2101      	movs	r1, #1
 80052b2:	fa01 f303 	lsl.w	r3, r1, r3
 80052b6:	e017      	b.n	80052e8 <HAL_ADC_ConfigChannel+0x45c>
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	fa93 f3a3 	rbit	r3, r3
 80052c4:	61bb      	str	r3, [r7, #24]
  return result;
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80052d0:	2320      	movs	r3, #32
 80052d2:	e003      	b.n	80052dc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	fab3 f383 	clz	r3, r3
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	3301      	adds	r3, #1
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	2101      	movs	r1, #1
 80052e4:	fa01 f303 	lsl.w	r3, r1, r3
 80052e8:	ea42 0103 	orr.w	r1, r2, r3
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10d      	bne.n	8005314 <HAL_ADC_ConfigChannel+0x488>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	0e9b      	lsrs	r3, r3, #26
 80052fe:	3301      	adds	r3, #1
 8005300:	f003 021f 	and.w	r2, r3, #31
 8005304:	4613      	mov	r3, r2
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	4413      	add	r3, r2
 800530a:	3b1e      	subs	r3, #30
 800530c:	051b      	lsls	r3, r3, #20
 800530e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005312:	e01b      	b.n	800534c <HAL_ADC_ConfigChannel+0x4c0>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	fa93 f3a3 	rbit	r3, r3
 8005320:	60fb      	str	r3, [r7, #12]
  return result;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800532c:	2320      	movs	r3, #32
 800532e:	e003      	b.n	8005338 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	fab3 f383 	clz	r3, r3
 8005336:	b2db      	uxtb	r3, r3
 8005338:	3301      	adds	r3, #1
 800533a:	f003 021f 	and.w	r2, r3, #31
 800533e:	4613      	mov	r3, r2
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	4413      	add	r3, r2
 8005344:	3b1e      	subs	r3, #30
 8005346:	051b      	lsls	r3, r3, #20
 8005348:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800534c:	430b      	orrs	r3, r1
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	6892      	ldr	r2, [r2, #8]
 8005352:	4619      	mov	r1, r3
 8005354:	f7ff f913 	bl	800457e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	f280 80c6 	bge.w	80054ee <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a67      	ldr	r2, [pc, #412]	; (8005504 <HAL_ADC_ConfigChannel+0x678>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d004      	beq.n	8005376 <HAL_ADC_ConfigChannel+0x4ea>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a65      	ldr	r2, [pc, #404]	; (8005508 <HAL_ADC_ConfigChannel+0x67c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d101      	bne.n	800537a <HAL_ADC_ConfigChannel+0x4ee>
 8005376:	4b65      	ldr	r3, [pc, #404]	; (800550c <HAL_ADC_ConfigChannel+0x680>)
 8005378:	e000      	b.n	800537c <HAL_ADC_ConfigChannel+0x4f0>
 800537a:	4b65      	ldr	r3, [pc, #404]	; (8005510 <HAL_ADC_ConfigChannel+0x684>)
 800537c:	4618      	mov	r0, r3
 800537e:	f7ff f85d 	bl	800443c <LL_ADC_GetCommonPathInternalCh>
 8005382:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a5e      	ldr	r2, [pc, #376]	; (8005504 <HAL_ADC_ConfigChannel+0x678>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d004      	beq.n	8005398 <HAL_ADC_ConfigChannel+0x50c>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a5d      	ldr	r2, [pc, #372]	; (8005508 <HAL_ADC_ConfigChannel+0x67c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d10e      	bne.n	80053b6 <HAL_ADC_ConfigChannel+0x52a>
 8005398:	485a      	ldr	r0, [pc, #360]	; (8005504 <HAL_ADC_ConfigChannel+0x678>)
 800539a:	f7ff f9bd 	bl	8004718 <LL_ADC_IsEnabled>
 800539e:	4604      	mov	r4, r0
 80053a0:	4859      	ldr	r0, [pc, #356]	; (8005508 <HAL_ADC_ConfigChannel+0x67c>)
 80053a2:	f7ff f9b9 	bl	8004718 <LL_ADC_IsEnabled>
 80053a6:	4603      	mov	r3, r0
 80053a8:	4323      	orrs	r3, r4
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	bf0c      	ite	eq
 80053ae:	2301      	moveq	r3, #1
 80053b0:	2300      	movne	r3, #0
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	e008      	b.n	80053c8 <HAL_ADC_ConfigChannel+0x53c>
 80053b6:	4857      	ldr	r0, [pc, #348]	; (8005514 <HAL_ADC_ConfigChannel+0x688>)
 80053b8:	f7ff f9ae 	bl	8004718 <LL_ADC_IsEnabled>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	bf0c      	ite	eq
 80053c2:	2301      	moveq	r3, #1
 80053c4:	2300      	movne	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d07d      	beq.n	80054c8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a51      	ldr	r2, [pc, #324]	; (8005518 <HAL_ADC_ConfigChannel+0x68c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d130      	bne.n	8005438 <HAL_ADC_ConfigChannel+0x5ac>
 80053d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d12b      	bne.n	8005438 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a4b      	ldr	r2, [pc, #300]	; (8005514 <HAL_ADC_ConfigChannel+0x688>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	f040 8081 	bne.w	80054ee <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a44      	ldr	r2, [pc, #272]	; (8005504 <HAL_ADC_ConfigChannel+0x678>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d004      	beq.n	8005400 <HAL_ADC_ConfigChannel+0x574>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a43      	ldr	r2, [pc, #268]	; (8005508 <HAL_ADC_ConfigChannel+0x67c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d101      	bne.n	8005404 <HAL_ADC_ConfigChannel+0x578>
 8005400:	4a42      	ldr	r2, [pc, #264]	; (800550c <HAL_ADC_ConfigChannel+0x680>)
 8005402:	e000      	b.n	8005406 <HAL_ADC_ConfigChannel+0x57a>
 8005404:	4a42      	ldr	r2, [pc, #264]	; (8005510 <HAL_ADC_ConfigChannel+0x684>)
 8005406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005408:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800540c:	4619      	mov	r1, r3
 800540e:	4610      	mov	r0, r2
 8005410:	f7ff f801 	bl	8004416 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005414:	4b41      	ldr	r3, [pc, #260]	; (800551c <HAL_ADC_ConfigChannel+0x690>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	099b      	lsrs	r3, r3, #6
 800541a:	4a41      	ldr	r2, [pc, #260]	; (8005520 <HAL_ADC_ConfigChannel+0x694>)
 800541c:	fba2 2303 	umull	r2, r3, r2, r3
 8005420:	099b      	lsrs	r3, r3, #6
 8005422:	3301      	adds	r3, #1
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005428:	e002      	b.n	8005430 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	3b01      	subs	r3, #1
 800542e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1f9      	bne.n	800542a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005436:	e05a      	b.n	80054ee <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a39      	ldr	r2, [pc, #228]	; (8005524 <HAL_ADC_ConfigChannel+0x698>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d11e      	bne.n	8005480 <HAL_ADC_ConfigChannel+0x5f4>
 8005442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d119      	bne.n	8005480 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a30      	ldr	r2, [pc, #192]	; (8005514 <HAL_ADC_ConfigChannel+0x688>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d14b      	bne.n	80054ee <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a2a      	ldr	r2, [pc, #168]	; (8005504 <HAL_ADC_ConfigChannel+0x678>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d004      	beq.n	800546a <HAL_ADC_ConfigChannel+0x5de>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a28      	ldr	r2, [pc, #160]	; (8005508 <HAL_ADC_ConfigChannel+0x67c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d101      	bne.n	800546e <HAL_ADC_ConfigChannel+0x5e2>
 800546a:	4a28      	ldr	r2, [pc, #160]	; (800550c <HAL_ADC_ConfigChannel+0x680>)
 800546c:	e000      	b.n	8005470 <HAL_ADC_ConfigChannel+0x5e4>
 800546e:	4a28      	ldr	r2, [pc, #160]	; (8005510 <HAL_ADC_ConfigChannel+0x684>)
 8005470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005476:	4619      	mov	r1, r3
 8005478:	4610      	mov	r0, r2
 800547a:	f7fe ffcc 	bl	8004416 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800547e:	e036      	b.n	80054ee <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a28      	ldr	r2, [pc, #160]	; (8005528 <HAL_ADC_ConfigChannel+0x69c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d131      	bne.n	80054ee <HAL_ADC_ConfigChannel+0x662>
 800548a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d12c      	bne.n	80054ee <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1e      	ldr	r2, [pc, #120]	; (8005514 <HAL_ADC_ConfigChannel+0x688>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d127      	bne.n	80054ee <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a18      	ldr	r2, [pc, #96]	; (8005504 <HAL_ADC_ConfigChannel+0x678>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d004      	beq.n	80054b2 <HAL_ADC_ConfigChannel+0x626>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a16      	ldr	r2, [pc, #88]	; (8005508 <HAL_ADC_ConfigChannel+0x67c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d101      	bne.n	80054b6 <HAL_ADC_ConfigChannel+0x62a>
 80054b2:	4a16      	ldr	r2, [pc, #88]	; (800550c <HAL_ADC_ConfigChannel+0x680>)
 80054b4:	e000      	b.n	80054b8 <HAL_ADC_ConfigChannel+0x62c>
 80054b6:	4a16      	ldr	r2, [pc, #88]	; (8005510 <HAL_ADC_ConfigChannel+0x684>)
 80054b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054be:	4619      	mov	r1, r3
 80054c0:	4610      	mov	r0, r2
 80054c2:	f7fe ffa8 	bl	8004416 <LL_ADC_SetCommonPathInternalCh>
 80054c6:	e012      	b.n	80054ee <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054cc:	f043 0220 	orr.w	r2, r3, #32
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80054da:	e008      	b.n	80054ee <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e0:	f043 0220 	orr.w	r2, r3, #32
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80054f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3784      	adds	r7, #132	; 0x84
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd90      	pop	{r4, r7, pc}
 8005502:	bf00      	nop
 8005504:	40022000 	.word	0x40022000
 8005508:	40022100 	.word	0x40022100
 800550c:	40022300 	.word	0x40022300
 8005510:	58026300 	.word	0x58026300
 8005514:	58026000 	.word	0x58026000
 8005518:	cb840000 	.word	0xcb840000
 800551c:	20000154 	.word	0x20000154
 8005520:	053e2d63 	.word	0x053e2d63
 8005524:	c7520000 	.word	0xc7520000
 8005528:	cfb80000 	.word	0xcfb80000

0800552c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff f8ed 	bl	8004718 <LL_ADC_IsEnabled>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d16e      	bne.n	8005622 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689a      	ldr	r2, [r3, #8]
 800554a:	4b38      	ldr	r3, [pc, #224]	; (800562c <ADC_Enable+0x100>)
 800554c:	4013      	ands	r3, r2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00d      	beq.n	800556e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005556:	f043 0210 	orr.w	r2, r3, #16
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005562:	f043 0201 	orr.w	r2, r3, #1
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e05a      	b.n	8005624 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f7ff f8bc 	bl	80046f0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005578:	f7fe fefe 	bl	8004378 <HAL_GetTick>
 800557c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a2b      	ldr	r2, [pc, #172]	; (8005630 <ADC_Enable+0x104>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d004      	beq.n	8005592 <ADC_Enable+0x66>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a29      	ldr	r2, [pc, #164]	; (8005634 <ADC_Enable+0x108>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d101      	bne.n	8005596 <ADC_Enable+0x6a>
 8005592:	4b29      	ldr	r3, [pc, #164]	; (8005638 <ADC_Enable+0x10c>)
 8005594:	e000      	b.n	8005598 <ADC_Enable+0x6c>
 8005596:	4b29      	ldr	r3, [pc, #164]	; (800563c <ADC_Enable+0x110>)
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff f83f 	bl	800461c <LL_ADC_GetMultimode>
 800559e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a23      	ldr	r2, [pc, #140]	; (8005634 <ADC_Enable+0x108>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d002      	beq.n	80055b0 <ADC_Enable+0x84>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	e000      	b.n	80055b2 <ADC_Enable+0x86>
 80055b0:	4b1f      	ldr	r3, [pc, #124]	; (8005630 <ADC_Enable+0x104>)
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6812      	ldr	r2, [r2, #0]
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d02c      	beq.n	8005614 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d130      	bne.n	8005622 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80055c0:	e028      	b.n	8005614 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7ff f8a6 	bl	8004718 <LL_ADC_IsEnabled>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d104      	bne.n	80055dc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff f88a 	bl	80046f0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80055dc:	f7fe fecc 	bl	8004378 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d914      	bls.n	8005614 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d00d      	beq.n	8005614 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fc:	f043 0210 	orr.w	r2, r3, #16
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005608:	f043 0201 	orr.w	r2, r3, #1
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e007      	b.n	8005624 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b01      	cmp	r3, #1
 8005620:	d1cf      	bne.n	80055c2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	8000003f 	.word	0x8000003f
 8005630:	40022000 	.word	0x40022000
 8005634:	40022100 	.word	0x40022100
 8005638:	40022300 	.word	0x40022300
 800563c:	58026300 	.word	0x58026300

08005640 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a79      	ldr	r2, [pc, #484]	; (8005834 <ADC_ConfigureBoostMode+0x1f4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d004      	beq.n	800565c <ADC_ConfigureBoostMode+0x1c>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a78      	ldr	r2, [pc, #480]	; (8005838 <ADC_ConfigureBoostMode+0x1f8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d109      	bne.n	8005670 <ADC_ConfigureBoostMode+0x30>
 800565c:	4b77      	ldr	r3, [pc, #476]	; (800583c <ADC_ConfigureBoostMode+0x1fc>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005664:	2b00      	cmp	r3, #0
 8005666:	bf14      	ite	ne
 8005668:	2301      	movne	r3, #1
 800566a:	2300      	moveq	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	e008      	b.n	8005682 <ADC_ConfigureBoostMode+0x42>
 8005670:	4b73      	ldr	r3, [pc, #460]	; (8005840 <ADC_ConfigureBoostMode+0x200>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005678:	2b00      	cmp	r3, #0
 800567a:	bf14      	ite	ne
 800567c:	2301      	movne	r3, #1
 800567e:	2300      	moveq	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d01c      	beq.n	80056c0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005686:	f002 f891 	bl	80077ac <HAL_RCC_GetHCLKFreq>
 800568a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005694:	d010      	beq.n	80056b8 <ADC_ConfigureBoostMode+0x78>
 8005696:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800569a:	d871      	bhi.n	8005780 <ADC_ConfigureBoostMode+0x140>
 800569c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a0:	d002      	beq.n	80056a8 <ADC_ConfigureBoostMode+0x68>
 80056a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056a6:	d16b      	bne.n	8005780 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	0c1b      	lsrs	r3, r3, #16
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b4:	60fb      	str	r3, [r7, #12]
        break;
 80056b6:	e066      	b.n	8005786 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	089b      	lsrs	r3, r3, #2
 80056bc:	60fb      	str	r3, [r7, #12]
        break;
 80056be:	e062      	b.n	8005786 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80056c0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80056c4:	f003 f850 	bl	8008768 <HAL_RCCEx_GetPeriphCLKFreq>
 80056c8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80056d2:	d051      	beq.n	8005778 <ADC_ConfigureBoostMode+0x138>
 80056d4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80056d8:	d854      	bhi.n	8005784 <ADC_ConfigureBoostMode+0x144>
 80056da:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80056de:	d047      	beq.n	8005770 <ADC_ConfigureBoostMode+0x130>
 80056e0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80056e4:	d84e      	bhi.n	8005784 <ADC_ConfigureBoostMode+0x144>
 80056e6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80056ea:	d03d      	beq.n	8005768 <ADC_ConfigureBoostMode+0x128>
 80056ec:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80056f0:	d848      	bhi.n	8005784 <ADC_ConfigureBoostMode+0x144>
 80056f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056f6:	d033      	beq.n	8005760 <ADC_ConfigureBoostMode+0x120>
 80056f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056fc:	d842      	bhi.n	8005784 <ADC_ConfigureBoostMode+0x144>
 80056fe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005702:	d029      	beq.n	8005758 <ADC_ConfigureBoostMode+0x118>
 8005704:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005708:	d83c      	bhi.n	8005784 <ADC_ConfigureBoostMode+0x144>
 800570a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800570e:	d01a      	beq.n	8005746 <ADC_ConfigureBoostMode+0x106>
 8005710:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005714:	d836      	bhi.n	8005784 <ADC_ConfigureBoostMode+0x144>
 8005716:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800571a:	d014      	beq.n	8005746 <ADC_ConfigureBoostMode+0x106>
 800571c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005720:	d830      	bhi.n	8005784 <ADC_ConfigureBoostMode+0x144>
 8005722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005726:	d00e      	beq.n	8005746 <ADC_ConfigureBoostMode+0x106>
 8005728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800572c:	d82a      	bhi.n	8005784 <ADC_ConfigureBoostMode+0x144>
 800572e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005732:	d008      	beq.n	8005746 <ADC_ConfigureBoostMode+0x106>
 8005734:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005738:	d824      	bhi.n	8005784 <ADC_ConfigureBoostMode+0x144>
 800573a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800573e:	d002      	beq.n	8005746 <ADC_ConfigureBoostMode+0x106>
 8005740:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005744:	d11e      	bne.n	8005784 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	0c9b      	lsrs	r3, r3, #18
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	fbb2 f3f3 	udiv	r3, r2, r3
 8005754:	60fb      	str	r3, [r7, #12]
        break;
 8005756:	e016      	b.n	8005786 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	091b      	lsrs	r3, r3, #4
 800575c:	60fb      	str	r3, [r7, #12]
        break;
 800575e:	e012      	b.n	8005786 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	095b      	lsrs	r3, r3, #5
 8005764:	60fb      	str	r3, [r7, #12]
        break;
 8005766:	e00e      	b.n	8005786 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	099b      	lsrs	r3, r3, #6
 800576c:	60fb      	str	r3, [r7, #12]
        break;
 800576e:	e00a      	b.n	8005786 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	09db      	lsrs	r3, r3, #7
 8005774:	60fb      	str	r3, [r7, #12]
        break;
 8005776:	e006      	b.n	8005786 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	0a1b      	lsrs	r3, r3, #8
 800577c:	60fb      	str	r3, [r7, #12]
        break;
 800577e:	e002      	b.n	8005786 <ADC_ConfigureBoostMode+0x146>
        break;
 8005780:	bf00      	nop
 8005782:	e000      	b.n	8005786 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8005784:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005786:	f7fe fe27 	bl	80043d8 <HAL_GetREVID>
 800578a:	4603      	mov	r3, r0
 800578c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005790:	4293      	cmp	r3, r2
 8005792:	d815      	bhi.n	80057c0 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4a2b      	ldr	r2, [pc, #172]	; (8005844 <ADC_ConfigureBoostMode+0x204>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d908      	bls.n	80057ae <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057aa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80057ac:	e03e      	b.n	800582c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057bc:	609a      	str	r2, [r3, #8]
}
 80057be:	e035      	b.n	800582c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	085b      	lsrs	r3, r3, #1
 80057c4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4a1f      	ldr	r2, [pc, #124]	; (8005848 <ADC_ConfigureBoostMode+0x208>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d808      	bhi.n	80057e0 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80057dc:	609a      	str	r2, [r3, #8]
}
 80057de:	e025      	b.n	800582c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	4a1a      	ldr	r2, [pc, #104]	; (800584c <ADC_ConfigureBoostMode+0x20c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d80a      	bhi.n	80057fe <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057fa:	609a      	str	r2, [r3, #8]
}
 80057fc:	e016      	b.n	800582c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	4a13      	ldr	r2, [pc, #76]	; (8005850 <ADC_ConfigureBoostMode+0x210>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d80a      	bhi.n	800581c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005818:	609a      	str	r2, [r3, #8]
}
 800581a:	e007      	b.n	800582c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800582a:	609a      	str	r2, [r3, #8]
}
 800582c:	bf00      	nop
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40022000 	.word	0x40022000
 8005838:	40022100 	.word	0x40022100
 800583c:	40022300 	.word	0x40022300
 8005840:	58026300 	.word	0x58026300
 8005844:	01312d00 	.word	0x01312d00
 8005848:	005f5e10 	.word	0x005f5e10
 800584c:	00bebc20 	.word	0x00bebc20
 8005850:	017d7840 	.word	0x017d7840

08005854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f003 0307 	and.w	r3, r3, #7
 8005862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005864:	4b0b      	ldr	r3, [pc, #44]	; (8005894 <__NVIC_SetPriorityGrouping+0x40>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005870:	4013      	ands	r3, r2
 8005872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800587c:	4b06      	ldr	r3, [pc, #24]	; (8005898 <__NVIC_SetPriorityGrouping+0x44>)
 800587e:	4313      	orrs	r3, r2
 8005880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005882:	4a04      	ldr	r2, [pc, #16]	; (8005894 <__NVIC_SetPriorityGrouping+0x40>)
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	60d3      	str	r3, [r2, #12]
}
 8005888:	bf00      	nop
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	e000ed00 	.word	0xe000ed00
 8005898:	05fa0000 	.word	0x05fa0000

0800589c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058a0:	4b04      	ldr	r3, [pc, #16]	; (80058b4 <__NVIC_GetPriorityGrouping+0x18>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	0a1b      	lsrs	r3, r3, #8
 80058a6:	f003 0307 	and.w	r3, r3, #7
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	e000ed00 	.word	0xe000ed00

080058b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	4603      	mov	r3, r0
 80058c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80058c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	db0b      	blt.n	80058e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	f003 021f 	and.w	r2, r3, #31
 80058d0:	4907      	ldr	r1, [pc, #28]	; (80058f0 <__NVIC_EnableIRQ+0x38>)
 80058d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058d6:	095b      	lsrs	r3, r3, #5
 80058d8:	2001      	movs	r0, #1
 80058da:	fa00 f202 	lsl.w	r2, r0, r2
 80058de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	e000e100 	.word	0xe000e100

080058f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	4603      	mov	r3, r0
 80058fc:	6039      	str	r1, [r7, #0]
 80058fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005900:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005904:	2b00      	cmp	r3, #0
 8005906:	db0a      	blt.n	800591e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	b2da      	uxtb	r2, r3
 800590c:	490c      	ldr	r1, [pc, #48]	; (8005940 <__NVIC_SetPriority+0x4c>)
 800590e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005912:	0112      	lsls	r2, r2, #4
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	440b      	add	r3, r1
 8005918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800591c:	e00a      	b.n	8005934 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	b2da      	uxtb	r2, r3
 8005922:	4908      	ldr	r1, [pc, #32]	; (8005944 <__NVIC_SetPriority+0x50>)
 8005924:	88fb      	ldrh	r3, [r7, #6]
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	3b04      	subs	r3, #4
 800592c:	0112      	lsls	r2, r2, #4
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	440b      	add	r3, r1
 8005932:	761a      	strb	r2, [r3, #24]
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	e000e100 	.word	0xe000e100
 8005944:	e000ed00 	.word	0xe000ed00

08005948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005948:	b480      	push	{r7}
 800594a:	b089      	sub	sp, #36	; 0x24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f1c3 0307 	rsb	r3, r3, #7
 8005962:	2b04      	cmp	r3, #4
 8005964:	bf28      	it	cs
 8005966:	2304      	movcs	r3, #4
 8005968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	3304      	adds	r3, #4
 800596e:	2b06      	cmp	r3, #6
 8005970:	d902      	bls.n	8005978 <NVIC_EncodePriority+0x30>
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	3b03      	subs	r3, #3
 8005976:	e000      	b.n	800597a <NVIC_EncodePriority+0x32>
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800597c:	f04f 32ff 	mov.w	r2, #4294967295
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	43da      	mvns	r2, r3
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	401a      	ands	r2, r3
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005990:	f04f 31ff 	mov.w	r1, #4294967295
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	fa01 f303 	lsl.w	r3, r1, r3
 800599a:	43d9      	mvns	r1, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059a0:	4313      	orrs	r3, r2
         );
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3724      	adds	r7, #36	; 0x24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7ff ff4c 	bl	8005854 <__NVIC_SetPriorityGrouping>
}
 80059bc:	bf00      	nop
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80059d2:	f7ff ff63 	bl	800589c <__NVIC_GetPriorityGrouping>
 80059d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	68b9      	ldr	r1, [r7, #8]
 80059dc:	6978      	ldr	r0, [r7, #20]
 80059de:	f7ff ffb3 	bl	8005948 <NVIC_EncodePriority>
 80059e2:	4602      	mov	r2, r0
 80059e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80059e8:	4611      	mov	r1, r2
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff ff82 	bl	80058f4 <__NVIC_SetPriority>
}
 80059f0:	bf00      	nop
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	4603      	mov	r3, r0
 8005a00:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff ff56 	bl	80058b8 <__NVIC_EnableIRQ>
}
 8005a0c:	bf00      	nop
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e054      	b.n	8005ad0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	7f5b      	ldrb	r3, [r3, #29]
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d105      	bne.n	8005a3c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7fa fe9e 	bl	8000778 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	791b      	ldrb	r3, [r3, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10c      	bne.n	8005a64 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a22      	ldr	r2, [pc, #136]	; (8005ad8 <HAL_CRC_Init+0xc4>)
 8005a50:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0218 	bic.w	r2, r2, #24
 8005a60:	609a      	str	r2, [r3, #8]
 8005a62:	e00c      	b.n	8005a7e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6899      	ldr	r1, [r3, #8]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f834 	bl	8005adc <HAL_CRCEx_Polynomial_Set>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e028      	b.n	8005ad0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	795b      	ldrb	r3, [r3, #5]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d105      	bne.n	8005a92 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8e:	611a      	str	r2, [r3, #16]
 8005a90:	e004      	b.n	8005a9c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	6912      	ldr	r2, [r2, #16]
 8005a9a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695a      	ldr	r2, [r3, #20]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	699a      	ldr	r2, [r3, #24]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	04c11db7 	.word	0x04c11db7

08005adc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005aec:	231f      	movs	r3, #31
 8005aee:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005af0:	bf00      	nop
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1e5a      	subs	r2, r3, #1
 8005af6:	613a      	str	r2, [r7, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d009      	beq.n	8005b10 <HAL_CRCEx_Polynomial_Set+0x34>
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f003 031f 	and.w	r3, r3, #31
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	fa22 f303 	lsr.w	r3, r2, r3
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0f0      	beq.n	8005af2 <HAL_CRCEx_Polynomial_Set+0x16>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b18      	cmp	r3, #24
 8005b14:	d846      	bhi.n	8005ba4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005b16:	a201      	add	r2, pc, #4	; (adr r2, 8005b1c <HAL_CRCEx_Polynomial_Set+0x40>)
 8005b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1c:	08005bab 	.word	0x08005bab
 8005b20:	08005ba5 	.word	0x08005ba5
 8005b24:	08005ba5 	.word	0x08005ba5
 8005b28:	08005ba5 	.word	0x08005ba5
 8005b2c:	08005ba5 	.word	0x08005ba5
 8005b30:	08005ba5 	.word	0x08005ba5
 8005b34:	08005ba5 	.word	0x08005ba5
 8005b38:	08005ba5 	.word	0x08005ba5
 8005b3c:	08005b99 	.word	0x08005b99
 8005b40:	08005ba5 	.word	0x08005ba5
 8005b44:	08005ba5 	.word	0x08005ba5
 8005b48:	08005ba5 	.word	0x08005ba5
 8005b4c:	08005ba5 	.word	0x08005ba5
 8005b50:	08005ba5 	.word	0x08005ba5
 8005b54:	08005ba5 	.word	0x08005ba5
 8005b58:	08005ba5 	.word	0x08005ba5
 8005b5c:	08005b8d 	.word	0x08005b8d
 8005b60:	08005ba5 	.word	0x08005ba5
 8005b64:	08005ba5 	.word	0x08005ba5
 8005b68:	08005ba5 	.word	0x08005ba5
 8005b6c:	08005ba5 	.word	0x08005ba5
 8005b70:	08005ba5 	.word	0x08005ba5
 8005b74:	08005ba5 	.word	0x08005ba5
 8005b78:	08005ba5 	.word	0x08005ba5
 8005b7c:	08005b81 	.word	0x08005b81
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b06      	cmp	r3, #6
 8005b84:	d913      	bls.n	8005bae <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005b8a:	e010      	b.n	8005bae <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	2b07      	cmp	r3, #7
 8005b90:	d90f      	bls.n	8005bb2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005b96:	e00c      	b.n	8005bb2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	2b0f      	cmp	r3, #15
 8005b9c:	d90b      	bls.n	8005bb6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005ba2:	e008      	b.n	8005bb6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ba8:	e006      	b.n	8005bb8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005baa:	bf00      	nop
 8005bac:	e004      	b.n	8005bb8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005bae:	bf00      	nop
 8005bb0:	e002      	b.n	8005bb8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005bb2:	bf00      	nop
 8005bb4:	e000      	b.n	8005bb8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005bb6:	bf00      	nop
  }
  if (status == HAL_OK)
 8005bb8:	7dfb      	ldrb	r3, [r7, #23]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10d      	bne.n	8005bda <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f023 0118 	bic.w	r1, r3, #24
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e04f      	b.n	8005c9a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fa fe0e 	bl	8000830 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	4b20      	ldr	r3, [pc, #128]	; (8005ca4 <HAL_DMA2D_Init+0xbc>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6851      	ldr	r1, [r2, #4]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	69d2      	ldr	r2, [r2, #28]
 8005c2e:	4311      	orrs	r1, r2
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6812      	ldr	r2, [r2, #0]
 8005c34:	430b      	orrs	r3, r1
 8005c36:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c3e:	4b1a      	ldr	r3, [pc, #104]	; (8005ca8 <HAL_DMA2D_Init+0xc0>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6891      	ldr	r1, [r2, #8]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6992      	ldr	r2, [r2, #24]
 8005c4a:	4311      	orrs	r1, r2
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	6812      	ldr	r2, [r2, #0]
 8005c50:	430b      	orrs	r3, r1
 8005c52:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c5a:	4b14      	ldr	r3, [pc, #80]	; (8005cac <HAL_DMA2D_Init+0xc4>)
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	68d1      	ldr	r1, [r2, #12]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	6812      	ldr	r2, [r2, #0]
 8005c66:	430b      	orrs	r3, r1
 8005c68:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c70:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	051a      	lsls	r2, r3, #20
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	055b      	lsls	r3, r3, #21
 8005c80:	431a      	orrs	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	fff8ffbf 	.word	0xfff8ffbf
 8005ca8:	fffffef8 	.word	0xfffffef8
 8005cac:	ffff0000 	.word	0xffff0000

08005cb0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d104      	bne.n	8005cd2 <HAL_DMA2D_ConfigLayer+0x22>
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	1a9b      	subs	r3, r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d101      	bne.n	8005ce0 <HAL_DMA2D_ConfigLayer+0x30>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e092      	b.n	8005e06 <HAL_DMA2D_ConfigLayer+0x156>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	1a9b      	subs	r3, r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	3328      	adds	r3, #40	; 0x28
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	4413      	add	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	041b      	lsls	r3, r3, #16
 8005d0c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005d14:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005d20:	4b3c      	ldr	r3, [pc, #240]	; (8005e14 <HAL_DMA2D_ConfigLayer+0x164>)
 8005d22:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2b0a      	cmp	r3, #10
 8005d2a:	d003      	beq.n	8005d34 <HAL_DMA2D_ConfigLayer+0x84>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	2b09      	cmp	r3, #9
 8005d32:	d107      	bne.n	8005d44 <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]
 8005d42:	e005      	b.n	8005d50 <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	061b      	lsls	r3, r3, #24
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d120      	bne.n	8005d98 <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	43db      	mvns	r3, r3
 8005d60:	ea02 0103 	and.w	r1, r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	6812      	ldr	r2, [r2, #0]
 8005d76:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2b0a      	cmp	r3, #10
 8005d7e:	d003      	beq.n	8005d88 <HAL_DMA2D_ConfigLayer+0xd8>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2b09      	cmp	r3, #9
 8005d86:	d135      	bne.n	8005df4 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	68da      	ldr	r2, [r3, #12]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005d94:	629a      	str	r2, [r3, #40]	; 0x28
 8005d96:	e02d      	b.n	8005df4 <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	2b0b      	cmp	r3, #11
 8005d9e:	d109      	bne.n	8005db4 <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	049b      	lsls	r3, r3, #18
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8005db2:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	69da      	ldr	r2, [r3, #28]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	43db      	mvns	r3, r3
 8005dbe:	ea02 0103 	and.w	r1, r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	6812      	ldr	r2, [r2, #0]
 8005dd4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b0a      	cmp	r3, #10
 8005ddc:	d003      	beq.n	8005de6 <HAL_DMA2D_ConfigLayer+0x136>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2b09      	cmp	r3, #9
 8005de4:	d106      	bne.n	8005df4 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005df2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	371c      	adds	r7, #28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	ff33000f 	.word	0xff33000f

08005e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b089      	sub	sp, #36	; 0x24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005e26:	4b89      	ldr	r3, [pc, #548]	; (800604c <HAL_GPIO_Init+0x234>)
 8005e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e2a:	e194      	b.n	8006156 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	2101      	movs	r1, #1
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	fa01 f303 	lsl.w	r3, r1, r3
 8005e38:	4013      	ands	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 8186 	beq.w	8006150 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f003 0303 	and.w	r3, r3, #3
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d005      	beq.n	8005e5c <HAL_GPIO_Init+0x44>
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f003 0303 	and.w	r3, r3, #3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d130      	bne.n	8005ebe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	2203      	movs	r2, #3
 8005e68:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6c:	43db      	mvns	r3, r3
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	4013      	ands	r3, r2
 8005e72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e92:	2201      	movs	r2, #1
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9a:	43db      	mvns	r3, r3
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	091b      	lsrs	r3, r3, #4
 8005ea8:	f003 0201 	and.w	r2, r3, #1
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	d017      	beq.n	8005efa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	005b      	lsls	r3, r3, #1
 8005ed4:	2203      	movs	r2, #3
 8005ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eda:	43db      	mvns	r3, r3
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	fa02 f303 	lsl.w	r3, r2, r3
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d123      	bne.n	8005f4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	08da      	lsrs	r2, r3, #3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	3208      	adds	r2, #8
 8005f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	220f      	movs	r2, #15
 8005f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f22:	43db      	mvns	r3, r3
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	4013      	ands	r3, r2
 8005f28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	691a      	ldr	r2, [r3, #16]
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	08da      	lsrs	r2, r3, #3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3208      	adds	r2, #8
 8005f48:	69b9      	ldr	r1, [r7, #24]
 8005f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	2203      	movs	r2, #3
 8005f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5e:	43db      	mvns	r3, r3
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	4013      	ands	r3, r2
 8005f64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f003 0203 	and.w	r2, r3, #3
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	fa02 f303 	lsl.w	r3, r2, r3
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 80e0 	beq.w	8006150 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f90:	4b2f      	ldr	r3, [pc, #188]	; (8006050 <HAL_GPIO_Init+0x238>)
 8005f92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f96:	4a2e      	ldr	r2, [pc, #184]	; (8006050 <HAL_GPIO_Init+0x238>)
 8005f98:	f043 0302 	orr.w	r3, r3, #2
 8005f9c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005fa0:	4b2b      	ldr	r3, [pc, #172]	; (8006050 <HAL_GPIO_Init+0x238>)
 8005fa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005fae:	4a29      	ldr	r2, [pc, #164]	; (8006054 <HAL_GPIO_Init+0x23c>)
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	089b      	lsrs	r3, r3, #2
 8005fb4:	3302      	adds	r3, #2
 8005fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	220f      	movs	r2, #15
 8005fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a20      	ldr	r2, [pc, #128]	; (8006058 <HAL_GPIO_Init+0x240>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d052      	beq.n	8006080 <HAL_GPIO_Init+0x268>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a1f      	ldr	r2, [pc, #124]	; (800605c <HAL_GPIO_Init+0x244>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d031      	beq.n	8006046 <HAL_GPIO_Init+0x22e>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a1e      	ldr	r2, [pc, #120]	; (8006060 <HAL_GPIO_Init+0x248>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d02b      	beq.n	8006042 <HAL_GPIO_Init+0x22a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a1d      	ldr	r2, [pc, #116]	; (8006064 <HAL_GPIO_Init+0x24c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d025      	beq.n	800603e <HAL_GPIO_Init+0x226>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a1c      	ldr	r2, [pc, #112]	; (8006068 <HAL_GPIO_Init+0x250>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d01f      	beq.n	800603a <HAL_GPIO_Init+0x222>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a1b      	ldr	r2, [pc, #108]	; (800606c <HAL_GPIO_Init+0x254>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d019      	beq.n	8006036 <HAL_GPIO_Init+0x21e>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a1a      	ldr	r2, [pc, #104]	; (8006070 <HAL_GPIO_Init+0x258>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d013      	beq.n	8006032 <HAL_GPIO_Init+0x21a>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a19      	ldr	r2, [pc, #100]	; (8006074 <HAL_GPIO_Init+0x25c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00d      	beq.n	800602e <HAL_GPIO_Init+0x216>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a18      	ldr	r2, [pc, #96]	; (8006078 <HAL_GPIO_Init+0x260>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d007      	beq.n	800602a <HAL_GPIO_Init+0x212>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a17      	ldr	r2, [pc, #92]	; (800607c <HAL_GPIO_Init+0x264>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d101      	bne.n	8006026 <HAL_GPIO_Init+0x20e>
 8006022:	2309      	movs	r3, #9
 8006024:	e02d      	b.n	8006082 <HAL_GPIO_Init+0x26a>
 8006026:	230a      	movs	r3, #10
 8006028:	e02b      	b.n	8006082 <HAL_GPIO_Init+0x26a>
 800602a:	2308      	movs	r3, #8
 800602c:	e029      	b.n	8006082 <HAL_GPIO_Init+0x26a>
 800602e:	2307      	movs	r3, #7
 8006030:	e027      	b.n	8006082 <HAL_GPIO_Init+0x26a>
 8006032:	2306      	movs	r3, #6
 8006034:	e025      	b.n	8006082 <HAL_GPIO_Init+0x26a>
 8006036:	2305      	movs	r3, #5
 8006038:	e023      	b.n	8006082 <HAL_GPIO_Init+0x26a>
 800603a:	2304      	movs	r3, #4
 800603c:	e021      	b.n	8006082 <HAL_GPIO_Init+0x26a>
 800603e:	2303      	movs	r3, #3
 8006040:	e01f      	b.n	8006082 <HAL_GPIO_Init+0x26a>
 8006042:	2302      	movs	r3, #2
 8006044:	e01d      	b.n	8006082 <HAL_GPIO_Init+0x26a>
 8006046:	2301      	movs	r3, #1
 8006048:	e01b      	b.n	8006082 <HAL_GPIO_Init+0x26a>
 800604a:	bf00      	nop
 800604c:	58000080 	.word	0x58000080
 8006050:	58024400 	.word	0x58024400
 8006054:	58000400 	.word	0x58000400
 8006058:	58020000 	.word	0x58020000
 800605c:	58020400 	.word	0x58020400
 8006060:	58020800 	.word	0x58020800
 8006064:	58020c00 	.word	0x58020c00
 8006068:	58021000 	.word	0x58021000
 800606c:	58021400 	.word	0x58021400
 8006070:	58021800 	.word	0x58021800
 8006074:	58021c00 	.word	0x58021c00
 8006078:	58022000 	.word	0x58022000
 800607c:	58022400 	.word	0x58022400
 8006080:	2300      	movs	r3, #0
 8006082:	69fa      	ldr	r2, [r7, #28]
 8006084:	f002 0203 	and.w	r2, r2, #3
 8006088:	0092      	lsls	r2, r2, #2
 800608a:	4093      	lsls	r3, r2
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	4313      	orrs	r3, r2
 8006090:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006092:	4938      	ldr	r1, [pc, #224]	; (8006174 <HAL_GPIO_Init+0x35c>)
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	089b      	lsrs	r3, r3, #2
 8006098:	3302      	adds	r3, #2
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	43db      	mvns	r3, r3
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	4013      	ands	r3, r2
 80060b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80060c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80060ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	43db      	mvns	r3, r3
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	4013      	ands	r3, r2
 80060de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d003      	beq.n	80060f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80060f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	43db      	mvns	r3, r3
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	4013      	ands	r3, r2
 800610a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	43db      	mvns	r3, r3
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	4013      	ands	r3, r2
 8006134:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	3301      	adds	r3, #1
 8006154:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	fa22 f303 	lsr.w	r3, r2, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	f47f ae63 	bne.w	8005e2c <HAL_GPIO_Init+0x14>
  }
}
 8006166:	bf00      	nop
 8006168:	bf00      	nop
 800616a:	3724      	adds	r7, #36	; 0x24
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	58000400 	.word	0x58000400

08006178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	807b      	strh	r3, [r7, #2]
 8006184:	4613      	mov	r3, r2
 8006186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006188:	787b      	ldrb	r3, [r7, #1]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800618e:	887a      	ldrh	r2, [r7, #2]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006194:	e003      	b.n	800619e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006196:	887b      	ldrh	r3, [r7, #2]
 8006198:	041a      	lsls	r2, r3, #16
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	619a      	str	r2, [r3, #24]
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
	...

080061ac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e0bf      	b.n	800633e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7fc ff9e 	bl	8003114 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80061ee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6999      	ldr	r1, [r3, #24]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006204:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6899      	ldr	r1, [r3, #8]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	4b4a      	ldr	r3, [pc, #296]	; (8006348 <HAL_LTDC_Init+0x19c>)
 8006220:	400b      	ands	r3, r1
 8006222:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	041b      	lsls	r3, r3, #16
 800622a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6899      	ldr	r1, [r3, #8]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	699a      	ldr	r2, [r3, #24]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	431a      	orrs	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68d9      	ldr	r1, [r3, #12]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	4b3e      	ldr	r3, [pc, #248]	; (8006348 <HAL_LTDC_Init+0x19c>)
 800624e:	400b      	ands	r3, r1
 8006250:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	041b      	lsls	r3, r3, #16
 8006258:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68d9      	ldr	r1, [r3, #12]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a1a      	ldr	r2, [r3, #32]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	431a      	orrs	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6919      	ldr	r1, [r3, #16]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	4b33      	ldr	r3, [pc, #204]	; (8006348 <HAL_LTDC_Init+0x19c>)
 800627c:	400b      	ands	r3, r1
 800627e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	041b      	lsls	r3, r3, #16
 8006286:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6919      	ldr	r1, [r3, #16]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	431a      	orrs	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6959      	ldr	r1, [r3, #20]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	4b27      	ldr	r3, [pc, #156]	; (8006348 <HAL_LTDC_Init+0x19c>)
 80062aa:	400b      	ands	r3, r1
 80062ac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b2:	041b      	lsls	r3, r3, #16
 80062b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6959      	ldr	r1, [r3, #20]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062d2:	021b      	lsls	r3, r3, #8
 80062d4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80062dc:	041b      	lsls	r3, r3, #16
 80062de:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80062ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0206 	orr.w	r2, r2, #6
 800631a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699a      	ldr	r2, [r3, #24]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0201 	orr.w	r2, r2, #1
 800632a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	f000f800 	.word	0xf000f800

0800634c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006362:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f003 0304 	and.w	r3, r3, #4
 800636a:	2b00      	cmp	r3, #0
 800636c:	d023      	beq.n	80063b6 <HAL_LTDC_IRQHandler+0x6a>
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01e      	beq.n	80063b6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0204 	bic.w	r2, r2, #4
 8006386:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2204      	movs	r2, #4
 800638e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006396:	f043 0201 	orr.w	r2, r3, #1
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2204      	movs	r2, #4
 80063a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f86f 	bl	8006494 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d023      	beq.n	8006408 <HAL_LTDC_IRQHandler+0xbc>
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d01e      	beq.n	8006408 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0202 	bic.w	r2, r2, #2
 80063d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2202      	movs	r2, #2
 80063e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063e8:	f043 0202 	orr.w	r2, r3, #2
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2204      	movs	r2, #4
 80063f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f846 	bl	8006494 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01b      	beq.n	800644a <HAL_LTDC_IRQHandler+0xfe>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d016      	beq.n	800644a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0201 	bic.w	r2, r2, #1
 800642a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2201      	movs	r2, #1
 8006432:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f82f 	bl	80064a8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f003 0308 	and.w	r3, r3, #8
 8006450:	2b00      	cmp	r3, #0
 8006452:	d01b      	beq.n	800648c <HAL_LTDC_IRQHandler+0x140>
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d016      	beq.n	800648c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0208 	bic.w	r2, r2, #8
 800646c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2208      	movs	r2, #8
 8006474:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f818 	bl	80064bc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800648c:	bf00      	nop
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80064d0:	b5b0      	push	{r4, r5, r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d101      	bne.n	80064ea <HAL_LTDC_ConfigLayer+0x1a>
 80064e6:	2302      	movs	r3, #2
 80064e8:	e02c      	b.n	8006544 <HAL_LTDC_ConfigLayer+0x74>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2202      	movs	r2, #2
 80064f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2134      	movs	r1, #52	; 0x34
 8006500:	fb01 f303 	mul.w	r3, r1, r3
 8006504:	4413      	add	r3, r2
 8006506:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	4614      	mov	r4, r2
 800650e:	461d      	mov	r5, r3
 8006510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800651a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800651c:	682b      	ldr	r3, [r5, #0]
 800651e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	68b9      	ldr	r1, [r7, #8]
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 f811 	bl	800654c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2201      	movs	r2, #1
 8006530:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bdb0      	pop	{r4, r5, r7, pc}

0800654c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800654c:	b480      	push	{r7}
 800654e:	b089      	sub	sp, #36	; 0x24
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	0c1b      	lsrs	r3, r3, #16
 8006564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006568:	4413      	add	r3, r2
 800656a:	041b      	lsls	r3, r3, #16
 800656c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	01db      	lsls	r3, r3, #7
 8006578:	4413      	add	r3, r2
 800657a:	3384      	adds	r3, #132	; 0x84
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	6812      	ldr	r2, [r2, #0]
 8006582:	4611      	mov	r1, r2
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	01d2      	lsls	r2, r2, #7
 8006588:	440a      	add	r2, r1
 800658a:	3284      	adds	r2, #132	; 0x84
 800658c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006590:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	0c1b      	lsrs	r3, r3, #16
 800659e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065a2:	4413      	add	r3, r2
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4619      	mov	r1, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	01db      	lsls	r3, r3, #7
 80065b0:	440b      	add	r3, r1
 80065b2:	3384      	adds	r3, #132	; 0x84
 80065b4:	4619      	mov	r1, r3
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	68da      	ldr	r2, [r3, #12]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065ca:	4413      	add	r3, r2
 80065cc:	041b      	lsls	r3, r3, #16
 80065ce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	461a      	mov	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	01db      	lsls	r3, r3, #7
 80065da:	4413      	add	r3, r2
 80065dc:	3384      	adds	r3, #132	; 0x84
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	6812      	ldr	r2, [r2, #0]
 80065e4:	4611      	mov	r1, r2
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	01d2      	lsls	r2, r2, #7
 80065ea:	440a      	add	r2, r1
 80065ec:	3284      	adds	r2, #132	; 0x84
 80065ee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80065f2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006602:	4413      	add	r3, r2
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4619      	mov	r1, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	01db      	lsls	r3, r3, #7
 8006610:	440b      	add	r3, r1
 8006612:	3384      	adds	r3, #132	; 0x84
 8006614:	4619      	mov	r1, r3
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	4313      	orrs	r3, r2
 800661a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	01db      	lsls	r3, r3, #7
 8006626:	4413      	add	r3, r2
 8006628:	3384      	adds	r3, #132	; 0x84
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	6812      	ldr	r2, [r2, #0]
 8006630:	4611      	mov	r1, r2
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	01d2      	lsls	r2, r2, #7
 8006636:	440a      	add	r2, r1
 8006638:	3284      	adds	r2, #132	; 0x84
 800663a:	f023 0307 	bic.w	r3, r3, #7
 800663e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	01db      	lsls	r3, r3, #7
 800664a:	4413      	add	r3, r2
 800664c:	3384      	adds	r3, #132	; 0x84
 800664e:	461a      	mov	r2, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800665c:	021b      	lsls	r3, r3, #8
 800665e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006666:	041b      	lsls	r3, r3, #16
 8006668:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	061b      	lsls	r3, r3, #24
 8006670:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	01db      	lsls	r3, r3, #7
 800667c:	4413      	add	r3, r2
 800667e:	3384      	adds	r3, #132	; 0x84
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	01db      	lsls	r3, r3, #7
 800668c:	4413      	add	r3, r2
 800668e:	3384      	adds	r3, #132	; 0x84
 8006690:	461a      	mov	r2, r3
 8006692:	2300      	movs	r3, #0
 8006694:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800669c:	461a      	mov	r2, r3
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	431a      	orrs	r2, r3
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	431a      	orrs	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4619      	mov	r1, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	01db      	lsls	r3, r3, #7
 80066b0:	440b      	add	r3, r1
 80066b2:	3384      	adds	r3, #132	; 0x84
 80066b4:	4619      	mov	r1, r3
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	01db      	lsls	r3, r3, #7
 80066c6:	4413      	add	r3, r2
 80066c8:	3384      	adds	r3, #132	; 0x84
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	6812      	ldr	r2, [r2, #0]
 80066d0:	4611      	mov	r1, r2
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	01d2      	lsls	r2, r2, #7
 80066d6:	440a      	add	r2, r1
 80066d8:	3284      	adds	r2, #132	; 0x84
 80066da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066de:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	01db      	lsls	r3, r3, #7
 80066ea:	4413      	add	r3, r2
 80066ec:	3384      	adds	r3, #132	; 0x84
 80066ee:	461a      	mov	r2, r3
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	01db      	lsls	r3, r3, #7
 8006700:	4413      	add	r3, r2
 8006702:	3384      	adds	r3, #132	; 0x84
 8006704:	69da      	ldr	r2, [r3, #28]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4619      	mov	r1, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	01db      	lsls	r3, r3, #7
 8006710:	440b      	add	r3, r1
 8006712:	3384      	adds	r3, #132	; 0x84
 8006714:	4619      	mov	r1, r3
 8006716:	4b58      	ldr	r3, [pc, #352]	; (8006878 <LTDC_SetConfig+0x32c>)
 8006718:	4013      	ands	r3, r2
 800671a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	69da      	ldr	r2, [r3, #28]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	68f9      	ldr	r1, [r7, #12]
 8006726:	6809      	ldr	r1, [r1, #0]
 8006728:	4608      	mov	r0, r1
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	01c9      	lsls	r1, r1, #7
 800672e:	4401      	add	r1, r0
 8006730:	3184      	adds	r1, #132	; 0x84
 8006732:	4313      	orrs	r3, r2
 8006734:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	01db      	lsls	r3, r3, #7
 8006740:	4413      	add	r3, r2
 8006742:	3384      	adds	r3, #132	; 0x84
 8006744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	01db      	lsls	r3, r3, #7
 8006750:	4413      	add	r3, r2
 8006752:	3384      	adds	r3, #132	; 0x84
 8006754:	461a      	mov	r2, r3
 8006756:	2300      	movs	r3, #0
 8006758:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	01db      	lsls	r3, r3, #7
 8006764:	4413      	add	r3, r2
 8006766:	3384      	adds	r3, #132	; 0x84
 8006768:	461a      	mov	r2, r3
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d102      	bne.n	800677e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006778:	2304      	movs	r3, #4
 800677a:	61fb      	str	r3, [r7, #28]
 800677c:	e01b      	b.n	80067b6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d102      	bne.n	800678c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006786:	2303      	movs	r3, #3
 8006788:	61fb      	str	r3, [r7, #28]
 800678a:	e014      	b.n	80067b6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	2b04      	cmp	r3, #4
 8006792:	d00b      	beq.n	80067ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006798:	2b02      	cmp	r3, #2
 800679a:	d007      	beq.n	80067ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	d003      	beq.n	80067ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80067a8:	2b07      	cmp	r3, #7
 80067aa:	d102      	bne.n	80067b2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80067ac:	2302      	movs	r3, #2
 80067ae:	61fb      	str	r3, [r7, #28]
 80067b0:	e001      	b.n	80067b6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80067b2:	2301      	movs	r3, #1
 80067b4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	01db      	lsls	r3, r3, #7
 80067c0:	4413      	add	r3, r2
 80067c2:	3384      	adds	r3, #132	; 0x84
 80067c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	6812      	ldr	r2, [r2, #0]
 80067ca:	4611      	mov	r1, r2
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	01d2      	lsls	r2, r2, #7
 80067d0:	440a      	add	r2, r1
 80067d2:	3284      	adds	r2, #132	; 0x84
 80067d4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80067d8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067de:	69fa      	ldr	r2, [r7, #28]
 80067e0:	fb02 f303 	mul.w	r3, r2, r3
 80067e4:	041a      	lsls	r2, r3, #16
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	6859      	ldr	r1, [r3, #4]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	1acb      	subs	r3, r1, r3
 80067f0:	69f9      	ldr	r1, [r7, #28]
 80067f2:	fb01 f303 	mul.w	r3, r1, r3
 80067f6:	3307      	adds	r3, #7
 80067f8:	68f9      	ldr	r1, [r7, #12]
 80067fa:	6809      	ldr	r1, [r1, #0]
 80067fc:	4608      	mov	r0, r1
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	01c9      	lsls	r1, r1, #7
 8006802:	4401      	add	r1, r0
 8006804:	3184      	adds	r1, #132	; 0x84
 8006806:	4313      	orrs	r3, r2
 8006808:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	01db      	lsls	r3, r3, #7
 8006814:	4413      	add	r3, r2
 8006816:	3384      	adds	r3, #132	; 0x84
 8006818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4619      	mov	r1, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	01db      	lsls	r3, r3, #7
 8006824:	440b      	add	r3, r1
 8006826:	3384      	adds	r3, #132	; 0x84
 8006828:	4619      	mov	r1, r3
 800682a:	4b14      	ldr	r3, [pc, #80]	; (800687c <LTDC_SetConfig+0x330>)
 800682c:	4013      	ands	r3, r2
 800682e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	01db      	lsls	r3, r3, #7
 800683a:	4413      	add	r3, r2
 800683c:	3384      	adds	r3, #132	; 0x84
 800683e:	461a      	mov	r2, r3
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	01db      	lsls	r3, r3, #7
 8006850:	4413      	add	r3, r2
 8006852:	3384      	adds	r3, #132	; 0x84
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	6812      	ldr	r2, [r2, #0]
 800685a:	4611      	mov	r1, r2
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	01d2      	lsls	r2, r2, #7
 8006860:	440a      	add	r2, r1
 8006862:	3284      	adds	r2, #132	; 0x84
 8006864:	f043 0301 	orr.w	r3, r3, #1
 8006868:	6013      	str	r3, [r2, #0]
}
 800686a:	bf00      	nop
 800686c:	3724      	adds	r7, #36	; 0x24
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	fffff8f8 	.word	0xfffff8f8
 800687c:	fffff800 	.word	0xfffff800

08006880 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006888:	4b19      	ldr	r3, [pc, #100]	; (80068f0 <HAL_PWREx_ConfigSupply+0x70>)
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b04      	cmp	r3, #4
 8006892:	d00a      	beq.n	80068aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006894:	4b16      	ldr	r3, [pc, #88]	; (80068f0 <HAL_PWREx_ConfigSupply+0x70>)
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d001      	beq.n	80068a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e01f      	b.n	80068e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	e01d      	b.n	80068e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80068aa:	4b11      	ldr	r3, [pc, #68]	; (80068f0 <HAL_PWREx_ConfigSupply+0x70>)
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f023 0207 	bic.w	r2, r3, #7
 80068b2:	490f      	ldr	r1, [pc, #60]	; (80068f0 <HAL_PWREx_ConfigSupply+0x70>)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80068ba:	f7fd fd5d 	bl	8004378 <HAL_GetTick>
 80068be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068c0:	e009      	b.n	80068d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80068c2:	f7fd fd59 	bl	8004378 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068d0:	d901      	bls.n	80068d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e007      	b.n	80068e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068d6:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <HAL_PWREx_ConfigSupply+0x70>)
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068e2:	d1ee      	bne.n	80068c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	58024800 	.word	0x58024800

080068f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b08c      	sub	sp, #48	; 0x30
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d102      	bne.n	8006908 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	f000 bc1c 	b.w	8007140 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 8087 	beq.w	8006a24 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006916:	4b9e      	ldr	r3, [pc, #632]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006920:	4b9b      	ldr	r3, [pc, #620]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006924:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006928:	2b10      	cmp	r3, #16
 800692a:	d007      	beq.n	800693c <HAL_RCC_OscConfig+0x48>
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	2b18      	cmp	r3, #24
 8006930:	d110      	bne.n	8006954 <HAL_RCC_OscConfig+0x60>
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	f003 0303 	and.w	r3, r3, #3
 8006938:	2b02      	cmp	r3, #2
 800693a:	d10b      	bne.n	8006954 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800693c:	4b94      	ldr	r3, [pc, #592]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d06c      	beq.n	8006a22 <HAL_RCC_OscConfig+0x12e>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d168      	bne.n	8006a22 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e3f5      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800695c:	d106      	bne.n	800696c <HAL_RCC_OscConfig+0x78>
 800695e:	4b8c      	ldr	r3, [pc, #560]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a8b      	ldr	r2, [pc, #556]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006968:	6013      	str	r3, [r2, #0]
 800696a:	e02e      	b.n	80069ca <HAL_RCC_OscConfig+0xd6>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10c      	bne.n	800698e <HAL_RCC_OscConfig+0x9a>
 8006974:	4b86      	ldr	r3, [pc, #536]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a85      	ldr	r2, [pc, #532]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 800697a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	4b83      	ldr	r3, [pc, #524]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a82      	ldr	r2, [pc, #520]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	e01d      	b.n	80069ca <HAL_RCC_OscConfig+0xd6>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006996:	d10c      	bne.n	80069b2 <HAL_RCC_OscConfig+0xbe>
 8006998:	4b7d      	ldr	r3, [pc, #500]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a7c      	ldr	r2, [pc, #496]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 800699e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	4b7a      	ldr	r3, [pc, #488]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a79      	ldr	r2, [pc, #484]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 80069aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	e00b      	b.n	80069ca <HAL_RCC_OscConfig+0xd6>
 80069b2:	4b77      	ldr	r3, [pc, #476]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a76      	ldr	r2, [pc, #472]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 80069b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	4b74      	ldr	r3, [pc, #464]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a73      	ldr	r2, [pc, #460]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 80069c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d013      	beq.n	80069fa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d2:	f7fd fcd1 	bl	8004378 <HAL_GetTick>
 80069d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069d8:	e008      	b.n	80069ec <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069da:	f7fd fccd 	bl	8004378 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	2b64      	cmp	r3, #100	; 0x64
 80069e6:	d901      	bls.n	80069ec <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e3a9      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069ec:	4b68      	ldr	r3, [pc, #416]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d0f0      	beq.n	80069da <HAL_RCC_OscConfig+0xe6>
 80069f8:	e014      	b.n	8006a24 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069fa:	f7fd fcbd 	bl	8004378 <HAL_GetTick>
 80069fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a00:	e008      	b.n	8006a14 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a02:	f7fd fcb9 	bl	8004378 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b64      	cmp	r3, #100	; 0x64
 8006a0e:	d901      	bls.n	8006a14 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e395      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a14:	4b5e      	ldr	r3, [pc, #376]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1f0      	bne.n	8006a02 <HAL_RCC_OscConfig+0x10e>
 8006a20:	e000      	b.n	8006a24 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a22:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 80ca 	beq.w	8006bc6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a32:	4b57      	ldr	r3, [pc, #348]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a3a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a3c:	4b54      	ldr	r3, [pc, #336]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a40:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d007      	beq.n	8006a58 <HAL_RCC_OscConfig+0x164>
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	2b18      	cmp	r3, #24
 8006a4c:	d156      	bne.n	8006afc <HAL_RCC_OscConfig+0x208>
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	f003 0303 	and.w	r3, r3, #3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d151      	bne.n	8006afc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a58:	4b4d      	ldr	r3, [pc, #308]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d005      	beq.n	8006a70 <HAL_RCC_OscConfig+0x17c>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d101      	bne.n	8006a70 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e367      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a70:	4b47      	ldr	r3, [pc, #284]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f023 0219 	bic.w	r2, r3, #25
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	4944      	ldr	r1, [pc, #272]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a82:	f7fd fc79 	bl	8004378 <HAL_GetTick>
 8006a86:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a88:	e008      	b.n	8006a9c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a8a:	f7fd fc75 	bl	8004378 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e351      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a9c:	4b3c      	ldr	r3, [pc, #240]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d0f0      	beq.n	8006a8a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aa8:	f7fd fc96 	bl	80043d8 <HAL_GetREVID>
 8006aac:	4603      	mov	r3, r0
 8006aae:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d817      	bhi.n	8006ae6 <HAL_RCC_OscConfig+0x1f2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	2b40      	cmp	r3, #64	; 0x40
 8006abc:	d108      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x1dc>
 8006abe:	4b34      	ldr	r3, [pc, #208]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006ac6:	4a32      	ldr	r2, [pc, #200]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006acc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ace:	e07a      	b.n	8006bc6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ad0:	4b2f      	ldr	r3, [pc, #188]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	031b      	lsls	r3, r3, #12
 8006ade:	492c      	ldr	r1, [pc, #176]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ae4:	e06f      	b.n	8006bc6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ae6:	4b2a      	ldr	r3, [pc, #168]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	061b      	lsls	r3, r3, #24
 8006af4:	4926      	ldr	r1, [pc, #152]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006afa:	e064      	b.n	8006bc6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d047      	beq.n	8006b94 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b04:	4b22      	ldr	r3, [pc, #136]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f023 0219 	bic.w	r2, r3, #25
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	491f      	ldr	r1, [pc, #124]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b16:	f7fd fc2f 	bl	8004378 <HAL_GetTick>
 8006b1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b1c:	e008      	b.n	8006b30 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b1e:	f7fd fc2b 	bl	8004378 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d901      	bls.n	8006b30 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e307      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b30:	4b17      	ldr	r3, [pc, #92]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d0f0      	beq.n	8006b1e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b3c:	f7fd fc4c 	bl	80043d8 <HAL_GetREVID>
 8006b40:	4603      	mov	r3, r0
 8006b42:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d817      	bhi.n	8006b7a <HAL_RCC_OscConfig+0x286>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	2b40      	cmp	r3, #64	; 0x40
 8006b50:	d108      	bne.n	8006b64 <HAL_RCC_OscConfig+0x270>
 8006b52:	4b0f      	ldr	r3, [pc, #60]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006b5a:	4a0d      	ldr	r2, [pc, #52]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b60:	6053      	str	r3, [r2, #4]
 8006b62:	e030      	b.n	8006bc6 <HAL_RCC_OscConfig+0x2d2>
 8006b64:	4b0a      	ldr	r3, [pc, #40]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	031b      	lsls	r3, r3, #12
 8006b72:	4907      	ldr	r1, [pc, #28]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	604b      	str	r3, [r1, #4]
 8006b78:	e025      	b.n	8006bc6 <HAL_RCC_OscConfig+0x2d2>
 8006b7a:	4b05      	ldr	r3, [pc, #20]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	061b      	lsls	r3, r3, #24
 8006b88:	4901      	ldr	r1, [pc, #4]	; (8006b90 <HAL_RCC_OscConfig+0x29c>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	604b      	str	r3, [r1, #4]
 8006b8e:	e01a      	b.n	8006bc6 <HAL_RCC_OscConfig+0x2d2>
 8006b90:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b94:	4b9e      	ldr	r3, [pc, #632]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a9d      	ldr	r2, [pc, #628]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006b9a:	f023 0301 	bic.w	r3, r3, #1
 8006b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba0:	f7fd fbea 	bl	8004378 <HAL_GetTick>
 8006ba4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ba6:	e008      	b.n	8006bba <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ba8:	f7fd fbe6 	bl	8004378 <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e2c2      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006bba:	4b95      	ldr	r3, [pc, #596]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0304 	and.w	r3, r3, #4
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1f0      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0310 	and.w	r3, r3, #16
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 80a9 	beq.w	8006d26 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bd4:	4b8e      	ldr	r3, [pc, #568]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bdc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bde:	4b8c      	ldr	r3, [pc, #560]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	2b08      	cmp	r3, #8
 8006be8:	d007      	beq.n	8006bfa <HAL_RCC_OscConfig+0x306>
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	2b18      	cmp	r3, #24
 8006bee:	d13a      	bne.n	8006c66 <HAL_RCC_OscConfig+0x372>
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f003 0303 	and.w	r3, r3, #3
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d135      	bne.n	8006c66 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bfa:	4b85      	ldr	r3, [pc, #532]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d005      	beq.n	8006c12 <HAL_RCC_OscConfig+0x31e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	2b80      	cmp	r3, #128	; 0x80
 8006c0c:	d001      	beq.n	8006c12 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e296      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c12:	f7fd fbe1 	bl	80043d8 <HAL_GetREVID>
 8006c16:	4603      	mov	r3, r0
 8006c18:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d817      	bhi.n	8006c50 <HAL_RCC_OscConfig+0x35c>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	2b20      	cmp	r3, #32
 8006c26:	d108      	bne.n	8006c3a <HAL_RCC_OscConfig+0x346>
 8006c28:	4b79      	ldr	r3, [pc, #484]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006c30:	4a77      	ldr	r2, [pc, #476]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006c32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c36:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c38:	e075      	b.n	8006d26 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c3a:	4b75      	ldr	r3, [pc, #468]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	069b      	lsls	r3, r3, #26
 8006c48:	4971      	ldr	r1, [pc, #452]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c4e:	e06a      	b.n	8006d26 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c50:	4b6f      	ldr	r3, [pc, #444]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	061b      	lsls	r3, r3, #24
 8006c5e:	496c      	ldr	r1, [pc, #432]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c64:	e05f      	b.n	8006d26 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d042      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c6e:	4b68      	ldr	r3, [pc, #416]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a67      	ldr	r2, [pc, #412]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c7a:	f7fd fb7d 	bl	8004378 <HAL_GetTick>
 8006c7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c80:	e008      	b.n	8006c94 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006c82:	f7fd fb79 	bl	8004378 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d901      	bls.n	8006c94 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e255      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c94:	4b5e      	ldr	r3, [pc, #376]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0f0      	beq.n	8006c82 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ca0:	f7fd fb9a 	bl	80043d8 <HAL_GetREVID>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	f241 0203 	movw	r2, #4099	; 0x1003
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d817      	bhi.n	8006cde <HAL_RCC_OscConfig+0x3ea>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	2b20      	cmp	r3, #32
 8006cb4:	d108      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x3d4>
 8006cb6:	4b56      	ldr	r3, [pc, #344]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006cbe:	4a54      	ldr	r2, [pc, #336]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006cc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cc4:	6053      	str	r3, [r2, #4]
 8006cc6:	e02e      	b.n	8006d26 <HAL_RCC_OscConfig+0x432>
 8006cc8:	4b51      	ldr	r3, [pc, #324]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	069b      	lsls	r3, r3, #26
 8006cd6:	494e      	ldr	r1, [pc, #312]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	604b      	str	r3, [r1, #4]
 8006cdc:	e023      	b.n	8006d26 <HAL_RCC_OscConfig+0x432>
 8006cde:	4b4c      	ldr	r3, [pc, #304]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	061b      	lsls	r3, r3, #24
 8006cec:	4948      	ldr	r1, [pc, #288]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60cb      	str	r3, [r1, #12]
 8006cf2:	e018      	b.n	8006d26 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006cf4:	4b46      	ldr	r3, [pc, #280]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a45      	ldr	r2, [pc, #276]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d00:	f7fd fb3a 	bl	8004378 <HAL_GetTick>
 8006d04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d06:	e008      	b.n	8006d1a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006d08:	f7fd fb36 	bl	8004378 <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e212      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006d1a:	4b3d      	ldr	r3, [pc, #244]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1f0      	bne.n	8006d08 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d036      	beq.n	8006da0 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d019      	beq.n	8006d6e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d3a:	4b35      	ldr	r3, [pc, #212]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d3e:	4a34      	ldr	r2, [pc, #208]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006d40:	f043 0301 	orr.w	r3, r3, #1
 8006d44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d46:	f7fd fb17 	bl	8004378 <HAL_GetTick>
 8006d4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d4c:	e008      	b.n	8006d60 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d4e:	f7fd fb13 	bl	8004378 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e1ef      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d60:	4b2b      	ldr	r3, [pc, #172]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0f0      	beq.n	8006d4e <HAL_RCC_OscConfig+0x45a>
 8006d6c:	e018      	b.n	8006da0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d6e:	4b28      	ldr	r3, [pc, #160]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d72:	4a27      	ldr	r2, [pc, #156]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006d74:	f023 0301 	bic.w	r3, r3, #1
 8006d78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d7a:	f7fd fafd 	bl	8004378 <HAL_GetTick>
 8006d7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d80:	e008      	b.n	8006d94 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d82:	f7fd faf9 	bl	8004378 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d901      	bls.n	8006d94 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e1d5      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d94:	4b1e      	ldr	r3, [pc, #120]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1f0      	bne.n	8006d82 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0320 	and.w	r3, r3, #32
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d039      	beq.n	8006e20 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d019      	beq.n	8006de8 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006db4:	4b16      	ldr	r3, [pc, #88]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a15      	ldr	r2, [pc, #84]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006dba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006dbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006dc0:	f7fd fada 	bl	8004378 <HAL_GetTick>
 8006dc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006dc6:	e008      	b.n	8006dda <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006dc8:	f7fd fad6 	bl	8004378 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e1b2      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006dda:	4b0d      	ldr	r3, [pc, #52]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d0f0      	beq.n	8006dc8 <HAL_RCC_OscConfig+0x4d4>
 8006de6:	e01b      	b.n	8006e20 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006de8:	4b09      	ldr	r3, [pc, #36]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a08      	ldr	r2, [pc, #32]	; (8006e10 <HAL_RCC_OscConfig+0x51c>)
 8006dee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006df2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006df4:	f7fd fac0 	bl	8004378 <HAL_GetTick>
 8006df8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006dfa:	e00b      	b.n	8006e14 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006dfc:	f7fd fabc 	bl	8004378 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d904      	bls.n	8006e14 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e198      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
 8006e0e:	bf00      	nop
 8006e10:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006e14:	4ba3      	ldr	r3, [pc, #652]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1ed      	bne.n	8006dfc <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 8081 	beq.w	8006f30 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e2e:	4b9e      	ldr	r3, [pc, #632]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a9d      	ldr	r2, [pc, #628]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e3a:	f7fd fa9d 	bl	8004378 <HAL_GetTick>
 8006e3e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e40:	e008      	b.n	8006e54 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e42:	f7fd fa99 	bl	8004378 <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	2b64      	cmp	r3, #100	; 0x64
 8006e4e:	d901      	bls.n	8006e54 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e175      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e54:	4b94      	ldr	r3, [pc, #592]	; (80070a8 <HAL_RCC_OscConfig+0x7b4>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d0f0      	beq.n	8006e42 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d106      	bne.n	8006e76 <HAL_RCC_OscConfig+0x582>
 8006e68:	4b8e      	ldr	r3, [pc, #568]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6c:	4a8d      	ldr	r2, [pc, #564]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006e6e:	f043 0301 	orr.w	r3, r3, #1
 8006e72:	6713      	str	r3, [r2, #112]	; 0x70
 8006e74:	e02d      	b.n	8006ed2 <HAL_RCC_OscConfig+0x5de>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10c      	bne.n	8006e98 <HAL_RCC_OscConfig+0x5a4>
 8006e7e:	4b89      	ldr	r3, [pc, #548]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e82:	4a88      	ldr	r2, [pc, #544]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006e84:	f023 0301 	bic.w	r3, r3, #1
 8006e88:	6713      	str	r3, [r2, #112]	; 0x70
 8006e8a:	4b86      	ldr	r3, [pc, #536]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8e:	4a85      	ldr	r2, [pc, #532]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006e90:	f023 0304 	bic.w	r3, r3, #4
 8006e94:	6713      	str	r3, [r2, #112]	; 0x70
 8006e96:	e01c      	b.n	8006ed2 <HAL_RCC_OscConfig+0x5de>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	2b05      	cmp	r3, #5
 8006e9e:	d10c      	bne.n	8006eba <HAL_RCC_OscConfig+0x5c6>
 8006ea0:	4b80      	ldr	r3, [pc, #512]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea4:	4a7f      	ldr	r2, [pc, #508]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006ea6:	f043 0304 	orr.w	r3, r3, #4
 8006eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8006eac:	4b7d      	ldr	r3, [pc, #500]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb0:	4a7c      	ldr	r2, [pc, #496]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006eb2:	f043 0301 	orr.w	r3, r3, #1
 8006eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8006eb8:	e00b      	b.n	8006ed2 <HAL_RCC_OscConfig+0x5de>
 8006eba:	4b7a      	ldr	r3, [pc, #488]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ebe:	4a79      	ldr	r2, [pc, #484]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006ec0:	f023 0301 	bic.w	r3, r3, #1
 8006ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ec6:	4b77      	ldr	r3, [pc, #476]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eca:	4a76      	ldr	r2, [pc, #472]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006ecc:	f023 0304 	bic.w	r3, r3, #4
 8006ed0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d015      	beq.n	8006f06 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eda:	f7fd fa4d 	bl	8004378 <HAL_GetTick>
 8006ede:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ee0:	e00a      	b.n	8006ef8 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ee2:	f7fd fa49 	bl	8004378 <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d901      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e123      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ef8:	4b6a      	ldr	r3, [pc, #424]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0ee      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x5ee>
 8006f04:	e014      	b.n	8006f30 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f06:	f7fd fa37 	bl	8004378 <HAL_GetTick>
 8006f0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f0c:	e00a      	b.n	8006f24 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f0e:	f7fd fa33 	bl	8004378 <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d901      	bls.n	8006f24 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e10d      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006f24:	4b5f      	ldr	r3, [pc, #380]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f28:	f003 0302 	and.w	r3, r3, #2
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1ee      	bne.n	8006f0e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 8102 	beq.w	800713e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006f3a:	4b5a      	ldr	r3, [pc, #360]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f42:	2b18      	cmp	r3, #24
 8006f44:	f000 80bd 	beq.w	80070c2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	f040 8095 	bne.w	800707c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f52:	4b54      	ldr	r3, [pc, #336]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a53      	ldr	r2, [pc, #332]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006f58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f5e:	f7fd fa0b 	bl	8004378 <HAL_GetTick>
 8006f62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f64:	e008      	b.n	8006f78 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f66:	f7fd fa07 	bl	8004378 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d901      	bls.n	8006f78 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e0e3      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f78:	4b4a      	ldr	r3, [pc, #296]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1f0      	bne.n	8006f66 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f84:	4b47      	ldr	r3, [pc, #284]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006f86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f88:	4b48      	ldr	r3, [pc, #288]	; (80070ac <HAL_RCC_OscConfig+0x7b8>)
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006f94:	0112      	lsls	r2, r2, #4
 8006f96:	430a      	orrs	r2, r1
 8006f98:	4942      	ldr	r1, [pc, #264]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	628b      	str	r3, [r1, #40]	; 0x28
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fac:	3b01      	subs	r3, #1
 8006fae:	025b      	lsls	r3, r3, #9
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	041b      	lsls	r3, r3, #16
 8006fbc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006fc0:	431a      	orrs	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	061b      	lsls	r3, r3, #24
 8006fca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006fce:	4935      	ldr	r1, [pc, #212]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006fd4:	4b33      	ldr	r3, [pc, #204]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd8:	4a32      	ldr	r2, [pc, #200]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006fda:	f023 0301 	bic.w	r3, r3, #1
 8006fde:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006fe0:	4b30      	ldr	r3, [pc, #192]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fe4:	4b32      	ldr	r3, [pc, #200]	; (80070b0 <HAL_RCC_OscConfig+0x7bc>)
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006fec:	00d2      	lsls	r2, r2, #3
 8006fee:	492d      	ldr	r1, [pc, #180]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006ff4:	4b2b      	ldr	r3, [pc, #172]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8006ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff8:	f023 020c 	bic.w	r2, r3, #12
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	4928      	ldr	r1, [pc, #160]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8007002:	4313      	orrs	r3, r2
 8007004:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007006:	4b27      	ldr	r3, [pc, #156]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8007008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700a:	f023 0202 	bic.w	r2, r3, #2
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007012:	4924      	ldr	r1, [pc, #144]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8007014:	4313      	orrs	r3, r2
 8007016:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007018:	4b22      	ldr	r3, [pc, #136]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 800701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701c:	4a21      	ldr	r2, [pc, #132]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 800701e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007022:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007024:	4b1f      	ldr	r3, [pc, #124]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8007026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007028:	4a1e      	ldr	r2, [pc, #120]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 800702a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800702e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007030:	4b1c      	ldr	r3, [pc, #112]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8007032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007034:	4a1b      	ldr	r2, [pc, #108]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8007036:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800703a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800703c:	4b19      	ldr	r3, [pc, #100]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007040:	4a18      	ldr	r2, [pc, #96]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8007042:	f043 0301 	orr.w	r3, r3, #1
 8007046:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007048:	4b16      	ldr	r3, [pc, #88]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a15      	ldr	r2, [pc, #84]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 800704e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007054:	f7fd f990 	bl	8004378 <HAL_GetTick>
 8007058:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800705a:	e008      	b.n	800706e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800705c:	f7fd f98c 	bl	8004378 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b02      	cmp	r3, #2
 8007068:	d901      	bls.n	800706e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e068      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800706e:	4b0d      	ldr	r3, [pc, #52]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d0f0      	beq.n	800705c <HAL_RCC_OscConfig+0x768>
 800707a:	e060      	b.n	800713e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800707c:	4b09      	ldr	r3, [pc, #36]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a08      	ldr	r2, [pc, #32]	; (80070a4 <HAL_RCC_OscConfig+0x7b0>)
 8007082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007088:	f7fd f976 	bl	8004378 <HAL_GetTick>
 800708c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800708e:	e011      	b.n	80070b4 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007090:	f7fd f972 	bl	8004378 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b02      	cmp	r3, #2
 800709c:	d90a      	bls.n	80070b4 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e04e      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
 80070a2:	bf00      	nop
 80070a4:	58024400 	.word	0x58024400
 80070a8:	58024800 	.word	0x58024800
 80070ac:	fffffc0c 	.word	0xfffffc0c
 80070b0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070b4:	4b24      	ldr	r3, [pc, #144]	; (8007148 <HAL_RCC_OscConfig+0x854>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1e7      	bne.n	8007090 <HAL_RCC_OscConfig+0x79c>
 80070c0:	e03d      	b.n	800713e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80070c2:	4b21      	ldr	r3, [pc, #132]	; (8007148 <HAL_RCC_OscConfig+0x854>)
 80070c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80070c8:	4b1f      	ldr	r3, [pc, #124]	; (8007148 <HAL_RCC_OscConfig+0x854>)
 80070ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070cc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d031      	beq.n	800713a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f003 0203 	and.w	r2, r3, #3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d12a      	bne.n	800713a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	091b      	lsrs	r3, r3, #4
 80070e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d122      	bne.n	800713a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fe:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007100:	429a      	cmp	r2, r3
 8007102:	d11a      	bne.n	800713a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	0a5b      	lsrs	r3, r3, #9
 8007108:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007110:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007112:	429a      	cmp	r2, r3
 8007114:	d111      	bne.n	800713a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	0c1b      	lsrs	r3, r3, #16
 800711a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007122:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007124:	429a      	cmp	r2, r3
 8007126:	d108      	bne.n	800713a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	0e1b      	lsrs	r3, r3, #24
 800712c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007134:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007136:	429a      	cmp	r2, r3
 8007138:	d001      	beq.n	800713e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3730      	adds	r7, #48	; 0x30
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	58024400 	.word	0x58024400

0800714c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e19c      	b.n	800749a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007160:	4b8a      	ldr	r3, [pc, #552]	; (800738c <HAL_RCC_ClockConfig+0x240>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 030f 	and.w	r3, r3, #15
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d910      	bls.n	8007190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800716e:	4b87      	ldr	r3, [pc, #540]	; (800738c <HAL_RCC_ClockConfig+0x240>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f023 020f 	bic.w	r2, r3, #15
 8007176:	4985      	ldr	r1, [pc, #532]	; (800738c <HAL_RCC_ClockConfig+0x240>)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	4313      	orrs	r3, r2
 800717c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800717e:	4b83      	ldr	r3, [pc, #524]	; (800738c <HAL_RCC_ClockConfig+0x240>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d001      	beq.n	8007190 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e184      	b.n	800749a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d010      	beq.n	80071be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	691a      	ldr	r2, [r3, #16]
 80071a0:	4b7b      	ldr	r3, [pc, #492]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d908      	bls.n	80071be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071ac:	4b78      	ldr	r3, [pc, #480]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	4975      	ldr	r1, [pc, #468]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d010      	beq.n	80071ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	695a      	ldr	r2, [r3, #20]
 80071ce:	4b70      	ldr	r3, [pc, #448]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d908      	bls.n	80071ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80071da:	4b6d      	ldr	r3, [pc, #436]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	496a      	ldr	r1, [pc, #424]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0310 	and.w	r3, r3, #16
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d010      	beq.n	800721a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	699a      	ldr	r2, [r3, #24]
 80071fc:	4b64      	ldr	r3, [pc, #400]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007204:	429a      	cmp	r2, r3
 8007206:	d908      	bls.n	800721a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007208:	4b61      	ldr	r3, [pc, #388]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	495e      	ldr	r1, [pc, #376]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 8007216:	4313      	orrs	r3, r2
 8007218:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b00      	cmp	r3, #0
 8007224:	d010      	beq.n	8007248 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	69da      	ldr	r2, [r3, #28]
 800722a:	4b59      	ldr	r3, [pc, #356]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007232:	429a      	cmp	r2, r3
 8007234:	d908      	bls.n	8007248 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007236:	4b56      	ldr	r3, [pc, #344]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	4953      	ldr	r1, [pc, #332]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 8007244:	4313      	orrs	r3, r2
 8007246:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0302 	and.w	r3, r3, #2
 8007250:	2b00      	cmp	r3, #0
 8007252:	d010      	beq.n	8007276 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68da      	ldr	r2, [r3, #12]
 8007258:	4b4d      	ldr	r3, [pc, #308]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	f003 030f 	and.w	r3, r3, #15
 8007260:	429a      	cmp	r2, r3
 8007262:	d908      	bls.n	8007276 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007264:	4b4a      	ldr	r3, [pc, #296]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	f023 020f 	bic.w	r2, r3, #15
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	4947      	ldr	r1, [pc, #284]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 8007272:	4313      	orrs	r3, r2
 8007274:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d055      	beq.n	800732e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007282:	4b43      	ldr	r3, [pc, #268]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	4940      	ldr	r1, [pc, #256]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 8007290:	4313      	orrs	r3, r2
 8007292:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	2b02      	cmp	r3, #2
 800729a:	d107      	bne.n	80072ac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800729c:	4b3c      	ldr	r3, [pc, #240]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d121      	bne.n	80072ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e0f6      	b.n	800749a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	2b03      	cmp	r3, #3
 80072b2:	d107      	bne.n	80072c4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072b4:	4b36      	ldr	r3, [pc, #216]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d115      	bne.n	80072ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e0ea      	b.n	800749a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d107      	bne.n	80072dc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072cc:	4b30      	ldr	r3, [pc, #192]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d109      	bne.n	80072ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e0de      	b.n	800749a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072dc:	4b2c      	ldr	r3, [pc, #176]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e0d6      	b.n	800749a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80072ec:	4b28      	ldr	r3, [pc, #160]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	f023 0207 	bic.w	r2, r3, #7
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	4925      	ldr	r1, [pc, #148]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072fe:	f7fd f83b 	bl	8004378 <HAL_GetTick>
 8007302:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007304:	e00a      	b.n	800731c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007306:	f7fd f837 	bl	8004378 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	f241 3288 	movw	r2, #5000	; 0x1388
 8007314:	4293      	cmp	r3, r2
 8007316:	d901      	bls.n	800731c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e0be      	b.n	800749a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800731c:	4b1c      	ldr	r3, [pc, #112]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	00db      	lsls	r3, r3, #3
 800732a:	429a      	cmp	r2, r3
 800732c:	d1eb      	bne.n	8007306 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d010      	beq.n	800735c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	4b14      	ldr	r3, [pc, #80]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	f003 030f 	and.w	r3, r3, #15
 8007346:	429a      	cmp	r2, r3
 8007348:	d208      	bcs.n	800735c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800734a:	4b11      	ldr	r3, [pc, #68]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	f023 020f 	bic.w	r2, r3, #15
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	490e      	ldr	r1, [pc, #56]	; (8007390 <HAL_RCC_ClockConfig+0x244>)
 8007358:	4313      	orrs	r3, r2
 800735a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800735c:	4b0b      	ldr	r3, [pc, #44]	; (800738c <HAL_RCC_ClockConfig+0x240>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 030f 	and.w	r3, r3, #15
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	429a      	cmp	r2, r3
 8007368:	d214      	bcs.n	8007394 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800736a:	4b08      	ldr	r3, [pc, #32]	; (800738c <HAL_RCC_ClockConfig+0x240>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f023 020f 	bic.w	r2, r3, #15
 8007372:	4906      	ldr	r1, [pc, #24]	; (800738c <HAL_RCC_ClockConfig+0x240>)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	4313      	orrs	r3, r2
 8007378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800737a:	4b04      	ldr	r3, [pc, #16]	; (800738c <HAL_RCC_ClockConfig+0x240>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 030f 	and.w	r3, r3, #15
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	429a      	cmp	r2, r3
 8007386:	d005      	beq.n	8007394 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e086      	b.n	800749a <HAL_RCC_ClockConfig+0x34e>
 800738c:	52002000 	.word	0x52002000
 8007390:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0304 	and.w	r3, r3, #4
 800739c:	2b00      	cmp	r3, #0
 800739e:	d010      	beq.n	80073c2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	691a      	ldr	r2, [r3, #16]
 80073a4:	4b3f      	ldr	r3, [pc, #252]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d208      	bcs.n	80073c2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073b0:	4b3c      	ldr	r3, [pc, #240]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	4939      	ldr	r1, [pc, #228]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0308 	and.w	r3, r3, #8
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d010      	beq.n	80073f0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	695a      	ldr	r2, [r3, #20]
 80073d2:	4b34      	ldr	r3, [pc, #208]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073da:	429a      	cmp	r2, r3
 80073dc:	d208      	bcs.n	80073f0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073de:	4b31      	ldr	r3, [pc, #196]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	492e      	ldr	r1, [pc, #184]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0310 	and.w	r3, r3, #16
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d010      	beq.n	800741e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	699a      	ldr	r2, [r3, #24]
 8007400:	4b28      	ldr	r3, [pc, #160]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 8007402:	69db      	ldr	r3, [r3, #28]
 8007404:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007408:	429a      	cmp	r2, r3
 800740a:	d208      	bcs.n	800741e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800740c:	4b25      	ldr	r3, [pc, #148]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	4922      	ldr	r1, [pc, #136]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 800741a:	4313      	orrs	r3, r2
 800741c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0320 	and.w	r3, r3, #32
 8007426:	2b00      	cmp	r3, #0
 8007428:	d010      	beq.n	800744c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	69da      	ldr	r2, [r3, #28]
 800742e:	4b1d      	ldr	r3, [pc, #116]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007436:	429a      	cmp	r2, r3
 8007438:	d208      	bcs.n	800744c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800743a:	4b1a      	ldr	r3, [pc, #104]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	4917      	ldr	r1, [pc, #92]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 8007448:	4313      	orrs	r3, r2
 800744a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800744c:	f000 f834 	bl	80074b8 <HAL_RCC_GetSysClockFreq>
 8007450:	4602      	mov	r2, r0
 8007452:	4b14      	ldr	r3, [pc, #80]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	0a1b      	lsrs	r3, r3, #8
 8007458:	f003 030f 	and.w	r3, r3, #15
 800745c:	4912      	ldr	r1, [pc, #72]	; (80074a8 <HAL_RCC_ClockConfig+0x35c>)
 800745e:	5ccb      	ldrb	r3, [r1, r3]
 8007460:	f003 031f 	and.w	r3, r3, #31
 8007464:	fa22 f303 	lsr.w	r3, r2, r3
 8007468:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800746a:	4b0e      	ldr	r3, [pc, #56]	; (80074a4 <HAL_RCC_ClockConfig+0x358>)
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	f003 030f 	and.w	r3, r3, #15
 8007472:	4a0d      	ldr	r2, [pc, #52]	; (80074a8 <HAL_RCC_ClockConfig+0x35c>)
 8007474:	5cd3      	ldrb	r3, [r2, r3]
 8007476:	f003 031f 	and.w	r3, r3, #31
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	fa22 f303 	lsr.w	r3, r2, r3
 8007480:	4a0a      	ldr	r2, [pc, #40]	; (80074ac <HAL_RCC_ClockConfig+0x360>)
 8007482:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007484:	4a0a      	ldr	r2, [pc, #40]	; (80074b0 <HAL_RCC_ClockConfig+0x364>)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800748a:	4b0a      	ldr	r3, [pc, #40]	; (80074b4 <HAL_RCC_ClockConfig+0x368>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4618      	mov	r0, r3
 8007490:	f7fc fa70 	bl	8003974 <HAL_InitTick>
 8007494:	4603      	mov	r3, r0
 8007496:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007498:	7bfb      	ldrb	r3, [r7, #15]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	58024400 	.word	0x58024400
 80074a8:	0800f8d4 	.word	0x0800f8d4
 80074ac:	20000158 	.word	0x20000158
 80074b0:	20000154 	.word	0x20000154
 80074b4:	2000015c 	.word	0x2000015c

080074b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b089      	sub	sp, #36	; 0x24
 80074bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074be:	4bb3      	ldr	r3, [pc, #716]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074c6:	2b18      	cmp	r3, #24
 80074c8:	f200 8155 	bhi.w	8007776 <HAL_RCC_GetSysClockFreq+0x2be>
 80074cc:	a201      	add	r2, pc, #4	; (adr r2, 80074d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80074ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d2:	bf00      	nop
 80074d4:	08007539 	.word	0x08007539
 80074d8:	08007777 	.word	0x08007777
 80074dc:	08007777 	.word	0x08007777
 80074e0:	08007777 	.word	0x08007777
 80074e4:	08007777 	.word	0x08007777
 80074e8:	08007777 	.word	0x08007777
 80074ec:	08007777 	.word	0x08007777
 80074f0:	08007777 	.word	0x08007777
 80074f4:	0800755f 	.word	0x0800755f
 80074f8:	08007777 	.word	0x08007777
 80074fc:	08007777 	.word	0x08007777
 8007500:	08007777 	.word	0x08007777
 8007504:	08007777 	.word	0x08007777
 8007508:	08007777 	.word	0x08007777
 800750c:	08007777 	.word	0x08007777
 8007510:	08007777 	.word	0x08007777
 8007514:	08007565 	.word	0x08007565
 8007518:	08007777 	.word	0x08007777
 800751c:	08007777 	.word	0x08007777
 8007520:	08007777 	.word	0x08007777
 8007524:	08007777 	.word	0x08007777
 8007528:	08007777 	.word	0x08007777
 800752c:	08007777 	.word	0x08007777
 8007530:	08007777 	.word	0x08007777
 8007534:	0800756b 	.word	0x0800756b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007538:	4b94      	ldr	r3, [pc, #592]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0320 	and.w	r3, r3, #32
 8007540:	2b00      	cmp	r3, #0
 8007542:	d009      	beq.n	8007558 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007544:	4b91      	ldr	r3, [pc, #580]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	08db      	lsrs	r3, r3, #3
 800754a:	f003 0303 	and.w	r3, r3, #3
 800754e:	4a90      	ldr	r2, [pc, #576]	; (8007790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007550:	fa22 f303 	lsr.w	r3, r2, r3
 8007554:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007556:	e111      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007558:	4b8d      	ldr	r3, [pc, #564]	; (8007790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800755a:	61bb      	str	r3, [r7, #24]
    break;
 800755c:	e10e      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800755e:	4b8d      	ldr	r3, [pc, #564]	; (8007794 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007560:	61bb      	str	r3, [r7, #24]
    break;
 8007562:	e10b      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007564:	4b8c      	ldr	r3, [pc, #560]	; (8007798 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007566:	61bb      	str	r3, [r7, #24]
    break;
 8007568:	e108      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800756a:	4b88      	ldr	r3, [pc, #544]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800756c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756e:	f003 0303 	and.w	r3, r3, #3
 8007572:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007574:	4b85      	ldr	r3, [pc, #532]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007578:	091b      	lsrs	r3, r3, #4
 800757a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800757e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007580:	4b82      	ldr	r3, [pc, #520]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800758a:	4b80      	ldr	r3, [pc, #512]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800758c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758e:	08db      	lsrs	r3, r3, #3
 8007590:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	fb02 f303 	mul.w	r3, r2, r3
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 80e1 	beq.w	8007770 <HAL_RCC_GetSysClockFreq+0x2b8>
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	f000 8083 	beq.w	80076bc <HAL_RCC_GetSysClockFreq+0x204>
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	f200 80a1 	bhi.w	8007700 <HAL_RCC_GetSysClockFreq+0x248>
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <HAL_RCC_GetSysClockFreq+0x114>
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d056      	beq.n	8007678 <HAL_RCC_GetSysClockFreq+0x1c0>
 80075ca:	e099      	b.n	8007700 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075cc:	4b6f      	ldr	r3, [pc, #444]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0320 	and.w	r3, r3, #32
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d02d      	beq.n	8007634 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075d8:	4b6c      	ldr	r3, [pc, #432]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	08db      	lsrs	r3, r3, #3
 80075de:	f003 0303 	and.w	r3, r3, #3
 80075e2:	4a6b      	ldr	r2, [pc, #428]	; (8007790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075e4:	fa22 f303 	lsr.w	r3, r2, r3
 80075e8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	ee07 3a90 	vmov	s15, r3
 80075f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	ee07 3a90 	vmov	s15, r3
 80075fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007602:	4b62      	ldr	r3, [pc, #392]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007612:	ed97 6a02 	vldr	s12, [r7, #8]
 8007616:	eddf 5a61 	vldr	s11, [pc, #388]	; 800779c <HAL_RCC_GetSysClockFreq+0x2e4>
 800761a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800761e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800762a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800762e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007632:	e087      	b.n	8007744 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80077a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007646:	4b51      	ldr	r3, [pc, #324]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764e:	ee07 3a90 	vmov	s15, r3
 8007652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007656:	ed97 6a02 	vldr	s12, [r7, #8]
 800765a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800779c <HAL_RCC_GetSysClockFreq+0x2e4>
 800765e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800766a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800766e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007676:	e065      	b.n	8007744 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007682:	eddf 6a48 	vldr	s13, [pc, #288]	; 80077a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800768a:	4b40      	ldr	r3, [pc, #256]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800768c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007692:	ee07 3a90 	vmov	s15, r3
 8007696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800769a:	ed97 6a02 	vldr	s12, [r7, #8]
 800769e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800779c <HAL_RCC_GetSysClockFreq+0x2e4>
 80076a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076ba:	e043      	b.n	8007744 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80077a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80076ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ce:	4b2f      	ldr	r3, [pc, #188]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d6:	ee07 3a90 	vmov	s15, r3
 80076da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076de:	ed97 6a02 	vldr	s12, [r7, #8]
 80076e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800779c <HAL_RCC_GetSysClockFreq+0x2e4>
 80076e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076fe:	e021      	b.n	8007744 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	ee07 3a90 	vmov	s15, r3
 8007706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800770a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80077a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800770e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007712:	4b1e      	ldr	r3, [pc, #120]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800771a:	ee07 3a90 	vmov	s15, r3
 800771e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007722:	ed97 6a02 	vldr	s12, [r7, #8]
 8007726:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800779c <HAL_RCC_GetSysClockFreq+0x2e4>
 800772a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800772e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800773a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007742:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007744:	4b11      	ldr	r3, [pc, #68]	; (800778c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007748:	0a5b      	lsrs	r3, r3, #9
 800774a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800774e:	3301      	adds	r3, #1
 8007750:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	ee07 3a90 	vmov	s15, r3
 8007758:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800775c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007768:	ee17 3a90 	vmov	r3, s15
 800776c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800776e:	e005      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	61bb      	str	r3, [r7, #24]
    break;
 8007774:	e002      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007776:	4b07      	ldr	r3, [pc, #28]	; (8007794 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007778:	61bb      	str	r3, [r7, #24]
    break;
 800777a:	bf00      	nop
  }

  return sysclockfreq;
 800777c:	69bb      	ldr	r3, [r7, #24]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3724      	adds	r7, #36	; 0x24
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	58024400 	.word	0x58024400
 8007790:	03d09000 	.word	0x03d09000
 8007794:	003d0900 	.word	0x003d0900
 8007798:	007a1200 	.word	0x007a1200
 800779c:	46000000 	.word	0x46000000
 80077a0:	4c742400 	.word	0x4c742400
 80077a4:	4a742400 	.word	0x4a742400
 80077a8:	4af42400 	.word	0x4af42400

080077ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80077b2:	f7ff fe81 	bl	80074b8 <HAL_RCC_GetSysClockFreq>
 80077b6:	4602      	mov	r2, r0
 80077b8:	4b10      	ldr	r3, [pc, #64]	; (80077fc <HAL_RCC_GetHCLKFreq+0x50>)
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	0a1b      	lsrs	r3, r3, #8
 80077be:	f003 030f 	and.w	r3, r3, #15
 80077c2:	490f      	ldr	r1, [pc, #60]	; (8007800 <HAL_RCC_GetHCLKFreq+0x54>)
 80077c4:	5ccb      	ldrb	r3, [r1, r3]
 80077c6:	f003 031f 	and.w	r3, r3, #31
 80077ca:	fa22 f303 	lsr.w	r3, r2, r3
 80077ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077d0:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <HAL_RCC_GetHCLKFreq+0x50>)
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	f003 030f 	and.w	r3, r3, #15
 80077d8:	4a09      	ldr	r2, [pc, #36]	; (8007800 <HAL_RCC_GetHCLKFreq+0x54>)
 80077da:	5cd3      	ldrb	r3, [r2, r3]
 80077dc:	f003 031f 	and.w	r3, r3, #31
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	fa22 f303 	lsr.w	r3, r2, r3
 80077e6:	4a07      	ldr	r2, [pc, #28]	; (8007804 <HAL_RCC_GetHCLKFreq+0x58>)
 80077e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80077ea:	4a07      	ldr	r2, [pc, #28]	; (8007808 <HAL_RCC_GetHCLKFreq+0x5c>)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80077f0:	4b04      	ldr	r3, [pc, #16]	; (8007804 <HAL_RCC_GetHCLKFreq+0x58>)
 80077f2:	681b      	ldr	r3, [r3, #0]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	58024400 	.word	0x58024400
 8007800:	0800f8d4 	.word	0x0800f8d4
 8007804:	20000158 	.word	0x20000158
 8007808:	20000154 	.word	0x20000154

0800780c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007810:	f7ff ffcc 	bl	80077ac <HAL_RCC_GetHCLKFreq>
 8007814:	4602      	mov	r2, r0
 8007816:	4b06      	ldr	r3, [pc, #24]	; (8007830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	091b      	lsrs	r3, r3, #4
 800781c:	f003 0307 	and.w	r3, r3, #7
 8007820:	4904      	ldr	r1, [pc, #16]	; (8007834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007822:	5ccb      	ldrb	r3, [r1, r3]
 8007824:	f003 031f 	and.w	r3, r3, #31
 8007828:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800782c:	4618      	mov	r0, r3
 800782e:	bd80      	pop	{r7, pc}
 8007830:	58024400 	.word	0x58024400
 8007834:	0800f8d4 	.word	0x0800f8d4

08007838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800783c:	f7ff ffb6 	bl	80077ac <HAL_RCC_GetHCLKFreq>
 8007840:	4602      	mov	r2, r0
 8007842:	4b06      	ldr	r3, [pc, #24]	; (800785c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	0a1b      	lsrs	r3, r3, #8
 8007848:	f003 0307 	and.w	r3, r3, #7
 800784c:	4904      	ldr	r1, [pc, #16]	; (8007860 <HAL_RCC_GetPCLK2Freq+0x28>)
 800784e:	5ccb      	ldrb	r3, [r1, r3]
 8007850:	f003 031f 	and.w	r3, r3, #31
 8007854:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007858:	4618      	mov	r0, r3
 800785a:	bd80      	pop	{r7, pc}
 800785c:	58024400 	.word	0x58024400
 8007860:	0800f8d4 	.word	0x0800f8d4

08007864 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	223f      	movs	r2, #63	; 0x3f
 8007872:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007874:	4b1a      	ldr	r3, [pc, #104]	; (80078e0 <HAL_RCC_GetClockConfig+0x7c>)
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	f003 0207 	and.w	r2, r3, #7
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007880:	4b17      	ldr	r3, [pc, #92]	; (80078e0 <HAL_RCC_GetClockConfig+0x7c>)
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800788c:	4b14      	ldr	r3, [pc, #80]	; (80078e0 <HAL_RCC_GetClockConfig+0x7c>)
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	f003 020f 	and.w	r2, r3, #15
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007898:	4b11      	ldr	r3, [pc, #68]	; (80078e0 <HAL_RCC_GetClockConfig+0x7c>)
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80078a4:	4b0e      	ldr	r3, [pc, #56]	; (80078e0 <HAL_RCC_GetClockConfig+0x7c>)
 80078a6:	69db      	ldr	r3, [r3, #28]
 80078a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80078b0:	4b0b      	ldr	r3, [pc, #44]	; (80078e0 <HAL_RCC_GetClockConfig+0x7c>)
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80078bc:	4b08      	ldr	r3, [pc, #32]	; (80078e0 <HAL_RCC_GetClockConfig+0x7c>)
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80078c8:	4b06      	ldr	r3, [pc, #24]	; (80078e4 <HAL_RCC_GetClockConfig+0x80>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 020f 	and.w	r2, r3, #15
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	601a      	str	r2, [r3, #0]
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	58024400 	.word	0x58024400
 80078e4:	52002000 	.word	0x52002000

080078e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80078f0:	2300      	movs	r3, #0
 80078f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80078f4:	2300      	movs	r3, #0
 80078f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d03f      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007908:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800790c:	d02a      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800790e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007912:	d824      	bhi.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007914:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007918:	d018      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800791a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800791e:	d81e      	bhi.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007920:	2b00      	cmp	r3, #0
 8007922:	d003      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007924:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007928:	d007      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800792a:	e018      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800792c:	4bab      	ldr	r3, [pc, #684]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	4aaa      	ldr	r2, [pc, #680]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007936:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007938:	e015      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3304      	adds	r3, #4
 800793e:	2102      	movs	r1, #2
 8007940:	4618      	mov	r0, r3
 8007942:	f001 fff3 	bl	800992c <RCCEx_PLL2_Config>
 8007946:	4603      	mov	r3, r0
 8007948:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800794a:	e00c      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3324      	adds	r3, #36	; 0x24
 8007950:	2102      	movs	r1, #2
 8007952:	4618      	mov	r0, r3
 8007954:	f002 f89c 	bl	8009a90 <RCCEx_PLL3_Config>
 8007958:	4603      	mov	r3, r0
 800795a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800795c:	e003      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	75fb      	strb	r3, [r7, #23]
      break;
 8007962:	e000      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007966:	7dfb      	ldrb	r3, [r7, #23]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d109      	bne.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800796c:	4b9b      	ldr	r3, [pc, #620]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800796e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007970:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007978:	4998      	ldr	r1, [pc, #608]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800797a:	4313      	orrs	r3, r2
 800797c:	650b      	str	r3, [r1, #80]	; 0x50
 800797e:	e001      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007980:	7dfb      	ldrb	r3, [r7, #23]
 8007982:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800798c:	2b00      	cmp	r3, #0
 800798e:	d03d      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007994:	2b04      	cmp	r3, #4
 8007996:	d826      	bhi.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007998:	a201      	add	r2, pc, #4	; (adr r2, 80079a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800799a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799e:	bf00      	nop
 80079a0:	080079b5 	.word	0x080079b5
 80079a4:	080079c3 	.word	0x080079c3
 80079a8:	080079d5 	.word	0x080079d5
 80079ac:	080079ed 	.word	0x080079ed
 80079b0:	080079ed 	.word	0x080079ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b4:	4b89      	ldr	r3, [pc, #548]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b8:	4a88      	ldr	r2, [pc, #544]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079c0:	e015      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	3304      	adds	r3, #4
 80079c6:	2100      	movs	r1, #0
 80079c8:	4618      	mov	r0, r3
 80079ca:	f001 ffaf 	bl	800992c <RCCEx_PLL2_Config>
 80079ce:	4603      	mov	r3, r0
 80079d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079d2:	e00c      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3324      	adds	r3, #36	; 0x24
 80079d8:	2100      	movs	r1, #0
 80079da:	4618      	mov	r0, r3
 80079dc:	f002 f858 	bl	8009a90 <RCCEx_PLL3_Config>
 80079e0:	4603      	mov	r3, r0
 80079e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079e4:	e003      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	75fb      	strb	r3, [r7, #23]
      break;
 80079ea:	e000      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80079ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079ee:	7dfb      	ldrb	r3, [r7, #23]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d109      	bne.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079f4:	4b79      	ldr	r3, [pc, #484]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f8:	f023 0207 	bic.w	r2, r3, #7
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a00:	4976      	ldr	r1, [pc, #472]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	650b      	str	r3, [r1, #80]	; 0x50
 8007a06:	e001      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d042      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a20:	d02b      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a26:	d825      	bhi.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007a28:	2bc0      	cmp	r3, #192	; 0xc0
 8007a2a:	d028      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007a2c:	2bc0      	cmp	r3, #192	; 0xc0
 8007a2e:	d821      	bhi.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007a30:	2b80      	cmp	r3, #128	; 0x80
 8007a32:	d016      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007a34:	2b80      	cmp	r3, #128	; 0x80
 8007a36:	d81d      	bhi.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007a3c:	2b40      	cmp	r3, #64	; 0x40
 8007a3e:	d007      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007a40:	e018      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a42:	4b66      	ldr	r3, [pc, #408]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a46:	4a65      	ldr	r2, [pc, #404]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007a4e:	e017      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	3304      	adds	r3, #4
 8007a54:	2100      	movs	r1, #0
 8007a56:	4618      	mov	r0, r3
 8007a58:	f001 ff68 	bl	800992c <RCCEx_PLL2_Config>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007a60:	e00e      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	3324      	adds	r3, #36	; 0x24
 8007a66:	2100      	movs	r1, #0
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f002 f811 	bl	8009a90 <RCCEx_PLL3_Config>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007a72:	e005      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	75fb      	strb	r3, [r7, #23]
      break;
 8007a78:	e002      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007a7a:	bf00      	nop
 8007a7c:	e000      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d109      	bne.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007a86:	4b55      	ldr	r3, [pc, #340]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a8a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a92:	4952      	ldr	r1, [pc, #328]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	650b      	str	r3, [r1, #80]	; 0x50
 8007a98:	e001      	b.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9a:	7dfb      	ldrb	r3, [r7, #23]
 8007a9c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d049      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ab0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ab4:	d030      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007ab6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007aba:	d82a      	bhi.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007abc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ac0:	d02c      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007ac2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ac6:	d824      	bhi.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007ac8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007acc:	d018      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ad2:	d81e      	bhi.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d003      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007ad8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007adc:	d007      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007ade:	e018      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ae0:	4b3e      	ldr	r3, [pc, #248]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	4a3d      	ldr	r2, [pc, #244]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007aec:	e017      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3304      	adds	r3, #4
 8007af2:	2100      	movs	r1, #0
 8007af4:	4618      	mov	r0, r3
 8007af6:	f001 ff19 	bl	800992c <RCCEx_PLL2_Config>
 8007afa:	4603      	mov	r3, r0
 8007afc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007afe:	e00e      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3324      	adds	r3, #36	; 0x24
 8007b04:	2100      	movs	r1, #0
 8007b06:	4618      	mov	r0, r3
 8007b08:	f001 ffc2 	bl	8009a90 <RCCEx_PLL3_Config>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b10:	e005      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	75fb      	strb	r3, [r7, #23]
      break;
 8007b16:	e002      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007b18:	bf00      	nop
 8007b1a:	e000      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007b1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10a      	bne.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007b24:	4b2d      	ldr	r3, [pc, #180]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b28:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007b32:	492a      	ldr	r1, [pc, #168]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b34:	4313      	orrs	r3, r2
 8007b36:	658b      	str	r3, [r1, #88]	; 0x58
 8007b38:	e001      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b3a:	7dfb      	ldrb	r3, [r7, #23]
 8007b3c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d04c      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b54:	d030      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007b56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b5a:	d82a      	bhi.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007b5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b60:	d02c      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007b62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b66:	d824      	bhi.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007b68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b6c:	d018      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007b6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b72:	d81e      	bhi.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d003      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b7c:	d007      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007b7e:	e018      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b80:	4b16      	ldr	r3, [pc, #88]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b84:	4a15      	ldr	r2, [pc, #84]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b8c:	e017      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	3304      	adds	r3, #4
 8007b92:	2100      	movs	r1, #0
 8007b94:	4618      	mov	r0, r3
 8007b96:	f001 fec9 	bl	800992c <RCCEx_PLL2_Config>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007b9e:	e00e      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	3324      	adds	r3, #36	; 0x24
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f001 ff72 	bl	8009a90 <RCCEx_PLL3_Config>
 8007bac:	4603      	mov	r3, r0
 8007bae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bb0:	e005      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb6:	e002      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007bb8:	bf00      	nop
 8007bba:	e000      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007bbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10d      	bne.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007bc4:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007bd2:	4902      	ldr	r1, [pc, #8]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	658b      	str	r3, [r1, #88]	; 0x58
 8007bd8:	e004      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007bda:	bf00      	nop
 8007bdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be0:	7dfb      	ldrb	r3, [r7, #23]
 8007be2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d032      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bf4:	2b30      	cmp	r3, #48	; 0x30
 8007bf6:	d01c      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007bf8:	2b30      	cmp	r3, #48	; 0x30
 8007bfa:	d817      	bhi.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007bfc:	2b20      	cmp	r3, #32
 8007bfe:	d00c      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007c00:	2b20      	cmp	r3, #32
 8007c02:	d813      	bhi.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d016      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007c08:	2b10      	cmp	r3, #16
 8007c0a:	d10f      	bne.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c0c:	4baf      	ldr	r3, [pc, #700]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c10:	4aae      	ldr	r2, [pc, #696]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007c18:	e00e      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	2102      	movs	r1, #2
 8007c20:	4618      	mov	r0, r3
 8007c22:	f001 fe83 	bl	800992c <RCCEx_PLL2_Config>
 8007c26:	4603      	mov	r3, r0
 8007c28:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007c2a:	e005      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c30:	e002      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007c32:	bf00      	nop
 8007c34:	e000      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d109      	bne.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007c3e:	4ba3      	ldr	r3, [pc, #652]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c4a:	49a0      	ldr	r1, [pc, #640]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007c50:	e001      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c52:	7dfb      	ldrb	r3, [r7, #23]
 8007c54:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d047      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c6a:	d030      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c70:	d82a      	bhi.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007c72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c76:	d02c      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007c78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c7c:	d824      	bhi.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c82:	d018      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c88:	d81e      	bhi.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c92:	d007      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007c94:	e018      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c96:	4b8d      	ldr	r3, [pc, #564]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9a:	4a8c      	ldr	r2, [pc, #560]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ca2:	e017      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4618      	mov	r0, r3
 8007cac:	f001 fe3e 	bl	800992c <RCCEx_PLL2_Config>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007cb4:	e00e      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	3324      	adds	r3, #36	; 0x24
 8007cba:	2100      	movs	r1, #0
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f001 fee7 	bl	8009a90 <RCCEx_PLL3_Config>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007cc6:	e005      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	75fb      	strb	r3, [r7, #23]
      break;
 8007ccc:	e002      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007cce:	bf00      	nop
 8007cd0:	e000      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007cd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d109      	bne.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007cda:	4b7c      	ldr	r3, [pc, #496]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cde:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ce6:	4979      	ldr	r1, [pc, #484]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	650b      	str	r3, [r1, #80]	; 0x50
 8007cec:	e001      	b.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
 8007cf0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d049      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d06:	d02e      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d0c:	d828      	bhi.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007d0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d12:	d02a      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007d14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d18:	d822      	bhi.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007d1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d1e:	d026      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007d20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d24:	d81c      	bhi.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007d26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d2a:	d010      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d30:	d816      	bhi.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d01d      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d3a:	d111      	bne.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	2101      	movs	r1, #1
 8007d42:	4618      	mov	r0, r3
 8007d44:	f001 fdf2 	bl	800992c <RCCEx_PLL2_Config>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007d4c:	e012      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	3324      	adds	r3, #36	; 0x24
 8007d52:	2101      	movs	r1, #1
 8007d54:	4618      	mov	r0, r3
 8007d56:	f001 fe9b 	bl	8009a90 <RCCEx_PLL3_Config>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007d5e:	e009      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	75fb      	strb	r3, [r7, #23]
      break;
 8007d64:	e006      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007d66:	bf00      	nop
 8007d68:	e004      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007d6a:	bf00      	nop
 8007d6c:	e002      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007d6e:	bf00      	nop
 8007d70:	e000      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d109      	bne.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007d7a:	4b54      	ldr	r3, [pc, #336]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d7e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d86:	4951      	ldr	r1, [pc, #324]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	650b      	str	r3, [r1, #80]	; 0x50
 8007d8c:	e001      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d8e:	7dfb      	ldrb	r3, [r7, #23]
 8007d90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d04b      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007da8:	d02e      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007dae:	d828      	bhi.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007db4:	d02a      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dba:	d822      	bhi.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007dbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007dc0:	d026      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007dc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007dc6:	d81c      	bhi.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dcc:	d010      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dd2:	d816      	bhi.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d01d      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ddc:	d111      	bne.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	3304      	adds	r3, #4
 8007de2:	2101      	movs	r1, #1
 8007de4:	4618      	mov	r0, r3
 8007de6:	f001 fda1 	bl	800992c <RCCEx_PLL2_Config>
 8007dea:	4603      	mov	r3, r0
 8007dec:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007dee:	e012      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3324      	adds	r3, #36	; 0x24
 8007df4:	2101      	movs	r1, #1
 8007df6:	4618      	mov	r0, r3
 8007df8:	f001 fe4a 	bl	8009a90 <RCCEx_PLL3_Config>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007e00:	e009      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	75fb      	strb	r3, [r7, #23]
      break;
 8007e06:	e006      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007e08:	bf00      	nop
 8007e0a:	e004      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007e0c:	bf00      	nop
 8007e0e:	e002      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007e10:	bf00      	nop
 8007e12:	e000      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10a      	bne.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007e1c:	4b2b      	ldr	r3, [pc, #172]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e20:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e2a:	4928      	ldr	r1, [pc, #160]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	658b      	str	r3, [r1, #88]	; 0x58
 8007e30:	e001      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
 8007e34:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d02f      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e4a:	d00e      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e50:	d814      	bhi.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d015      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007e56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e5a:	d10f      	bne.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e5c:	4b1b      	ldr	r3, [pc, #108]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e60:	4a1a      	ldr	r2, [pc, #104]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007e68:	e00c      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	2101      	movs	r1, #1
 8007e70:	4618      	mov	r0, r3
 8007e72:	f001 fd5b 	bl	800992c <RCCEx_PLL2_Config>
 8007e76:	4603      	mov	r3, r0
 8007e78:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007e7a:	e003      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e80:	e000      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007e82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e84:	7dfb      	ldrb	r3, [r7, #23]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d109      	bne.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e8a:	4b10      	ldr	r3, [pc, #64]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e96:	490d      	ldr	r1, [pc, #52]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	650b      	str	r3, [r1, #80]	; 0x50
 8007e9c:	e001      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ea0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d033      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d81c      	bhi.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007eb6:	a201      	add	r2, pc, #4	; (adr r2, 8007ebc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ebc:	08007ef7 	.word	0x08007ef7
 8007ec0:	08007ed1 	.word	0x08007ed1
 8007ec4:	08007edf 	.word	0x08007edf
 8007ec8:	08007ef7 	.word	0x08007ef7
 8007ecc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ed0:	4bb8      	ldr	r3, [pc, #736]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed4:	4ab7      	ldr	r2, [pc, #732]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007eda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007edc:	e00c      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	2102      	movs	r1, #2
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f001 fd21 	bl	800992c <RCCEx_PLL2_Config>
 8007eea:	4603      	mov	r3, r0
 8007eec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007eee:	e003      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ef4:	e000      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007ef6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ef8:	7dfb      	ldrb	r3, [r7, #23]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d109      	bne.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007efe:	4bad      	ldr	r3, [pc, #692]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f02:	f023 0203 	bic.w	r2, r3, #3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f0a:	49aa      	ldr	r1, [pc, #680]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007f10:	e001      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f12:	7dfb      	ldrb	r3, [r7, #23]
 8007f14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 8086 	beq.w	8008030 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f24:	4ba4      	ldr	r3, [pc, #656]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4aa3      	ldr	r2, [pc, #652]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f30:	f7fc fa22 	bl	8004378 <HAL_GetTick>
 8007f34:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f36:	e009      	b.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f38:	f7fc fa1e 	bl	8004378 <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	2b64      	cmp	r3, #100	; 0x64
 8007f44:	d902      	bls.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	75fb      	strb	r3, [r7, #23]
        break;
 8007f4a:	e005      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f4c:	4b9a      	ldr	r3, [pc, #616]	; (80081b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d0ef      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d166      	bne.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007f5e:	4b95      	ldr	r3, [pc, #596]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f68:	4053      	eors	r3, r2
 8007f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d013      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f72:	4b90      	ldr	r3, [pc, #576]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f7a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f7c:	4b8d      	ldr	r3, [pc, #564]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f80:	4a8c      	ldr	r2, [pc, #560]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f86:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f88:	4b8a      	ldr	r3, [pc, #552]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8c:	4a89      	ldr	r2, [pc, #548]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f92:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007f94:	4a87      	ldr	r2, [pc, #540]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fa4:	d115      	bne.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fa6:	f7fc f9e7 	bl	8004378 <HAL_GetTick>
 8007faa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fac:	e00b      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fae:	f7fc f9e3 	bl	8004378 <HAL_GetTick>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d902      	bls.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	75fb      	strb	r3, [r7, #23]
            break;
 8007fc4:	e005      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fc6:	4b7b      	ldr	r3, [pc, #492]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fca:	f003 0302 	and.w	r3, r3, #2
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0ed      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007fd2:	7dfb      	ldrb	r3, [r7, #23]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d126      	bne.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fe6:	d10d      	bne.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007fe8:	4b72      	ldr	r3, [pc, #456]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ff6:	0919      	lsrs	r1, r3, #4
 8007ff8:	4b70      	ldr	r3, [pc, #448]	; (80081bc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007ffa:	400b      	ands	r3, r1
 8007ffc:	496d      	ldr	r1, [pc, #436]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	610b      	str	r3, [r1, #16]
 8008002:	e005      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008004:	4b6b      	ldr	r3, [pc, #428]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	4a6a      	ldr	r2, [pc, #424]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800800a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800800e:	6113      	str	r3, [r2, #16]
 8008010:	4b68      	ldr	r3, [pc, #416]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008012:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800801a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800801e:	4965      	ldr	r1, [pc, #404]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008020:	4313      	orrs	r3, r2
 8008022:	670b      	str	r3, [r1, #112]	; 0x70
 8008024:	e004      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	75bb      	strb	r3, [r7, #22]
 800802a:	e001      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800802c:	7dfb      	ldrb	r3, [r7, #23]
 800802e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b00      	cmp	r3, #0
 800803a:	d07e      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008040:	2b28      	cmp	r3, #40	; 0x28
 8008042:	d867      	bhi.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008044:	a201      	add	r2, pc, #4	; (adr r2, 800804c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804a:	bf00      	nop
 800804c:	0800811b 	.word	0x0800811b
 8008050:	08008115 	.word	0x08008115
 8008054:	08008115 	.word	0x08008115
 8008058:	08008115 	.word	0x08008115
 800805c:	08008115 	.word	0x08008115
 8008060:	08008115 	.word	0x08008115
 8008064:	08008115 	.word	0x08008115
 8008068:	08008115 	.word	0x08008115
 800806c:	080080f1 	.word	0x080080f1
 8008070:	08008115 	.word	0x08008115
 8008074:	08008115 	.word	0x08008115
 8008078:	08008115 	.word	0x08008115
 800807c:	08008115 	.word	0x08008115
 8008080:	08008115 	.word	0x08008115
 8008084:	08008115 	.word	0x08008115
 8008088:	08008115 	.word	0x08008115
 800808c:	08008103 	.word	0x08008103
 8008090:	08008115 	.word	0x08008115
 8008094:	08008115 	.word	0x08008115
 8008098:	08008115 	.word	0x08008115
 800809c:	08008115 	.word	0x08008115
 80080a0:	08008115 	.word	0x08008115
 80080a4:	08008115 	.word	0x08008115
 80080a8:	08008115 	.word	0x08008115
 80080ac:	0800811b 	.word	0x0800811b
 80080b0:	08008115 	.word	0x08008115
 80080b4:	08008115 	.word	0x08008115
 80080b8:	08008115 	.word	0x08008115
 80080bc:	08008115 	.word	0x08008115
 80080c0:	08008115 	.word	0x08008115
 80080c4:	08008115 	.word	0x08008115
 80080c8:	08008115 	.word	0x08008115
 80080cc:	0800811b 	.word	0x0800811b
 80080d0:	08008115 	.word	0x08008115
 80080d4:	08008115 	.word	0x08008115
 80080d8:	08008115 	.word	0x08008115
 80080dc:	08008115 	.word	0x08008115
 80080e0:	08008115 	.word	0x08008115
 80080e4:	08008115 	.word	0x08008115
 80080e8:	08008115 	.word	0x08008115
 80080ec:	0800811b 	.word	0x0800811b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3304      	adds	r3, #4
 80080f4:	2101      	movs	r1, #1
 80080f6:	4618      	mov	r0, r3
 80080f8:	f001 fc18 	bl	800992c <RCCEx_PLL2_Config>
 80080fc:	4603      	mov	r3, r0
 80080fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008100:	e00c      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	3324      	adds	r3, #36	; 0x24
 8008106:	2101      	movs	r1, #1
 8008108:	4618      	mov	r0, r3
 800810a:	f001 fcc1 	bl	8009a90 <RCCEx_PLL3_Config>
 800810e:	4603      	mov	r3, r0
 8008110:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008112:	e003      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	75fb      	strb	r3, [r7, #23]
      break;
 8008118:	e000      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800811a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800811c:	7dfb      	ldrb	r3, [r7, #23]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d109      	bne.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008122:	4b24      	ldr	r3, [pc, #144]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008126:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800812e:	4921      	ldr	r1, [pc, #132]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008130:	4313      	orrs	r3, r2
 8008132:	654b      	str	r3, [r1, #84]	; 0x54
 8008134:	e001      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008136:	7dfb      	ldrb	r3, [r7, #23]
 8008138:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d03e      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800814a:	2b05      	cmp	r3, #5
 800814c:	d820      	bhi.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800814e:	a201      	add	r2, pc, #4	; (adr r2, 8008154 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008154:	08008197 	.word	0x08008197
 8008158:	0800816d 	.word	0x0800816d
 800815c:	0800817f 	.word	0x0800817f
 8008160:	08008197 	.word	0x08008197
 8008164:	08008197 	.word	0x08008197
 8008168:	08008197 	.word	0x08008197
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3304      	adds	r3, #4
 8008170:	2101      	movs	r1, #1
 8008172:	4618      	mov	r0, r3
 8008174:	f001 fbda 	bl	800992c <RCCEx_PLL2_Config>
 8008178:	4603      	mov	r3, r0
 800817a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800817c:	e00c      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	3324      	adds	r3, #36	; 0x24
 8008182:	2101      	movs	r1, #1
 8008184:	4618      	mov	r0, r3
 8008186:	f001 fc83 	bl	8009a90 <RCCEx_PLL3_Config>
 800818a:	4603      	mov	r3, r0
 800818c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800818e:	e003      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	75fb      	strb	r3, [r7, #23]
      break;
 8008194:	e000      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008196:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008198:	7dfb      	ldrb	r3, [r7, #23]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d110      	bne.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800819e:	4b05      	ldr	r3, [pc, #20]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a2:	f023 0207 	bic.w	r2, r3, #7
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081aa:	4902      	ldr	r1, [pc, #8]	; (80081b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	654b      	str	r3, [r1, #84]	; 0x54
 80081b0:	e008      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80081b2:	bf00      	nop
 80081b4:	58024400 	.word	0x58024400
 80081b8:	58024800 	.word	0x58024800
 80081bc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
 80081c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0304 	and.w	r3, r3, #4
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d039      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081d6:	2b05      	cmp	r3, #5
 80081d8:	d820      	bhi.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x934>
 80081da:	a201      	add	r2, pc, #4	; (adr r2, 80081e0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80081dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e0:	08008223 	.word	0x08008223
 80081e4:	080081f9 	.word	0x080081f9
 80081e8:	0800820b 	.word	0x0800820b
 80081ec:	08008223 	.word	0x08008223
 80081f0:	08008223 	.word	0x08008223
 80081f4:	08008223 	.word	0x08008223
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	3304      	adds	r3, #4
 80081fc:	2101      	movs	r1, #1
 80081fe:	4618      	mov	r0, r3
 8008200:	f001 fb94 	bl	800992c <RCCEx_PLL2_Config>
 8008204:	4603      	mov	r3, r0
 8008206:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008208:	e00c      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	3324      	adds	r3, #36	; 0x24
 800820e:	2101      	movs	r1, #1
 8008210:	4618      	mov	r0, r3
 8008212:	f001 fc3d 	bl	8009a90 <RCCEx_PLL3_Config>
 8008216:	4603      	mov	r3, r0
 8008218:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800821a:	e003      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	75fb      	strb	r3, [r7, #23]
      break;
 8008220:	e000      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008222:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008224:	7dfb      	ldrb	r3, [r7, #23]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10a      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800822a:	4bb7      	ldr	r3, [pc, #732]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800822c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800822e:	f023 0207 	bic.w	r2, r3, #7
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008238:	49b3      	ldr	r1, [pc, #716]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800823a:	4313      	orrs	r3, r2
 800823c:	658b      	str	r3, [r1, #88]	; 0x58
 800823e:	e001      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008240:	7dfb      	ldrb	r3, [r7, #23]
 8008242:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0320 	and.w	r3, r3, #32
 800824c:	2b00      	cmp	r3, #0
 800824e:	d04b      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008256:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800825a:	d02e      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800825c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008260:	d828      	bhi.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008266:	d02a      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800826c:	d822      	bhi.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800826e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008272:	d026      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008274:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008278:	d81c      	bhi.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800827a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800827e:	d010      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008284:	d816      	bhi.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008286:	2b00      	cmp	r3, #0
 8008288:	d01d      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800828a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800828e:	d111      	bne.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	3304      	adds	r3, #4
 8008294:	2100      	movs	r1, #0
 8008296:	4618      	mov	r0, r3
 8008298:	f001 fb48 	bl	800992c <RCCEx_PLL2_Config>
 800829c:	4603      	mov	r3, r0
 800829e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80082a0:	e012      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3324      	adds	r3, #36	; 0x24
 80082a6:	2102      	movs	r1, #2
 80082a8:	4618      	mov	r0, r3
 80082aa:	f001 fbf1 	bl	8009a90 <RCCEx_PLL3_Config>
 80082ae:	4603      	mov	r3, r0
 80082b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80082b2:	e009      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	75fb      	strb	r3, [r7, #23]
      break;
 80082b8:	e006      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80082ba:	bf00      	nop
 80082bc:	e004      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80082be:	bf00      	nop
 80082c0:	e002      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80082c2:	bf00      	nop
 80082c4:	e000      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80082c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082c8:	7dfb      	ldrb	r3, [r7, #23]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10a      	bne.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082ce:	4b8e      	ldr	r3, [pc, #568]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80082d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082dc:	498a      	ldr	r1, [pc, #552]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	654b      	str	r3, [r1, #84]	; 0x54
 80082e2:	e001      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e4:	7dfb      	ldrb	r3, [r7, #23]
 80082e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d04b      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80082fe:	d02e      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008300:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008304:	d828      	bhi.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800830a:	d02a      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800830c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008310:	d822      	bhi.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008312:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008316:	d026      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008318:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800831c:	d81c      	bhi.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800831e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008322:	d010      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008328:	d816      	bhi.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800832a:	2b00      	cmp	r3, #0
 800832c:	d01d      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800832e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008332:	d111      	bne.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	3304      	adds	r3, #4
 8008338:	2100      	movs	r1, #0
 800833a:	4618      	mov	r0, r3
 800833c:	f001 faf6 	bl	800992c <RCCEx_PLL2_Config>
 8008340:	4603      	mov	r3, r0
 8008342:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008344:	e012      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	3324      	adds	r3, #36	; 0x24
 800834a:	2102      	movs	r1, #2
 800834c:	4618      	mov	r0, r3
 800834e:	f001 fb9f 	bl	8009a90 <RCCEx_PLL3_Config>
 8008352:	4603      	mov	r3, r0
 8008354:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008356:	e009      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	75fb      	strb	r3, [r7, #23]
      break;
 800835c:	e006      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800835e:	bf00      	nop
 8008360:	e004      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008362:	bf00      	nop
 8008364:	e002      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008366:	bf00      	nop
 8008368:	e000      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800836a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800836c:	7dfb      	ldrb	r3, [r7, #23]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10a      	bne.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008372:	4b65      	ldr	r3, [pc, #404]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008376:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008380:	4961      	ldr	r1, [pc, #388]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008382:	4313      	orrs	r3, r2
 8008384:	658b      	str	r3, [r1, #88]	; 0x58
 8008386:	e001      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008388:	7dfb      	ldrb	r3, [r7, #23]
 800838a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008394:	2b00      	cmp	r3, #0
 8008396:	d04b      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800839e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80083a2:	d02e      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80083a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80083a8:	d828      	bhi.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80083aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083ae:	d02a      	beq.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80083b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083b4:	d822      	bhi.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80083b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80083ba:	d026      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80083bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80083c0:	d81c      	bhi.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80083c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083c6:	d010      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80083c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083cc:	d816      	bhi.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d01d      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80083d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083d6:	d111      	bne.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	3304      	adds	r3, #4
 80083dc:	2100      	movs	r1, #0
 80083de:	4618      	mov	r0, r3
 80083e0:	f001 faa4 	bl	800992c <RCCEx_PLL2_Config>
 80083e4:	4603      	mov	r3, r0
 80083e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80083e8:	e012      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	3324      	adds	r3, #36	; 0x24
 80083ee:	2102      	movs	r1, #2
 80083f0:	4618      	mov	r0, r3
 80083f2:	f001 fb4d 	bl	8009a90 <RCCEx_PLL3_Config>
 80083f6:	4603      	mov	r3, r0
 80083f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80083fa:	e009      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008400:	e006      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008402:	bf00      	nop
 8008404:	e004      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008406:	bf00      	nop
 8008408:	e002      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800840a:	bf00      	nop
 800840c:	e000      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800840e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008410:	7dfb      	ldrb	r3, [r7, #23]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10a      	bne.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008416:	4b3c      	ldr	r3, [pc, #240]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800841a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008424:	4938      	ldr	r1, [pc, #224]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008426:	4313      	orrs	r3, r2
 8008428:	658b      	str	r3, [r1, #88]	; 0x58
 800842a:	e001      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800842c:	7dfb      	ldrb	r3, [r7, #23]
 800842e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0308 	and.w	r3, r3, #8
 8008438:	2b00      	cmp	r3, #0
 800843a:	d01a      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008446:	d10a      	bne.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	3324      	adds	r3, #36	; 0x24
 800844c:	2102      	movs	r1, #2
 800844e:	4618      	mov	r0, r3
 8008450:	f001 fb1e 	bl	8009a90 <RCCEx_PLL3_Config>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800845e:	4b2a      	ldr	r3, [pc, #168]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008462:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800846c:	4926      	ldr	r1, [pc, #152]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800846e:	4313      	orrs	r3, r2
 8008470:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0310 	and.w	r3, r3, #16
 800847a:	2b00      	cmp	r3, #0
 800847c:	d01a      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008488:	d10a      	bne.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3324      	adds	r3, #36	; 0x24
 800848e:	2102      	movs	r1, #2
 8008490:	4618      	mov	r0, r3
 8008492:	f001 fafd 	bl	8009a90 <RCCEx_PLL3_Config>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80084a0:	4b19      	ldr	r3, [pc, #100]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80084a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084ae:	4916      	ldr	r1, [pc, #88]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80084b0:	4313      	orrs	r3, r2
 80084b2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d036      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80084c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084ca:	d01f      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80084cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084d0:	d817      	bhi.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d003      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80084d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084da:	d009      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80084dc:	e011      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	3304      	adds	r3, #4
 80084e2:	2100      	movs	r1, #0
 80084e4:	4618      	mov	r0, r3
 80084e6:	f001 fa21 	bl	800992c <RCCEx_PLL2_Config>
 80084ea:	4603      	mov	r3, r0
 80084ec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80084ee:	e00e      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	3324      	adds	r3, #36	; 0x24
 80084f4:	2102      	movs	r1, #2
 80084f6:	4618      	mov	r0, r3
 80084f8:	f001 faca 	bl	8009a90 <RCCEx_PLL3_Config>
 80084fc:	4603      	mov	r3, r0
 80084fe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008500:	e005      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	75fb      	strb	r3, [r7, #23]
      break;
 8008506:	e002      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008508:	58024400 	.word	0x58024400
      break;
 800850c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800850e:	7dfb      	ldrb	r3, [r7, #23]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10a      	bne.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008514:	4b93      	ldr	r3, [pc, #588]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008518:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008522:	4990      	ldr	r1, [pc, #576]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008524:	4313      	orrs	r3, r2
 8008526:	658b      	str	r3, [r1, #88]	; 0x58
 8008528:	e001      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800852a:	7dfb      	ldrb	r3, [r7, #23]
 800852c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d033      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008540:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008544:	d01c      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008546:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800854a:	d816      	bhi.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800854c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008550:	d003      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008556:	d007      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008558:	e00f      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800855a:	4b82      	ldr	r3, [pc, #520]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800855c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855e:	4a81      	ldr	r2, [pc, #516]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008564:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008566:	e00c      	b.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3324      	adds	r3, #36	; 0x24
 800856c:	2101      	movs	r1, #1
 800856e:	4618      	mov	r0, r3
 8008570:	f001 fa8e 	bl	8009a90 <RCCEx_PLL3_Config>
 8008574:	4603      	mov	r3, r0
 8008576:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008578:	e003      	b.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	75fb      	strb	r3, [r7, #23]
      break;
 800857e:	e000      	b.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008580:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008582:	7dfb      	ldrb	r3, [r7, #23]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10a      	bne.n	800859e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008588:	4b76      	ldr	r3, [pc, #472]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800858a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800858c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008596:	4973      	ldr	r1, [pc, #460]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008598:	4313      	orrs	r3, r2
 800859a:	654b      	str	r3, [r1, #84]	; 0x54
 800859c:	e001      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800859e:	7dfb      	ldrb	r3, [r7, #23]
 80085a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d029      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d003      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80085b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085ba:	d007      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80085bc:	e00f      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085be:	4b69      	ldr	r3, [pc, #420]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c2:	4a68      	ldr	r2, [pc, #416]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80085ca:	e00b      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3304      	adds	r3, #4
 80085d0:	2102      	movs	r1, #2
 80085d2:	4618      	mov	r0, r3
 80085d4:	f001 f9aa 	bl	800992c <RCCEx_PLL2_Config>
 80085d8:	4603      	mov	r3, r0
 80085da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80085dc:	e002      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	75fb      	strb	r3, [r7, #23]
      break;
 80085e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085e4:	7dfb      	ldrb	r3, [r7, #23]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d109      	bne.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80085ea:	4b5e      	ldr	r3, [pc, #376]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085f6:	495b      	ldr	r1, [pc, #364]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80085fc:	e001      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
 8008600:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00a      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	3324      	adds	r3, #36	; 0x24
 8008612:	2102      	movs	r1, #2
 8008614:	4618      	mov	r0, r3
 8008616:	f001 fa3b 	bl	8009a90 <RCCEx_PLL3_Config>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d001      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d030      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008638:	d017      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800863a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800863e:	d811      	bhi.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008644:	d013      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800864a:	d80b      	bhi.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800864c:	2b00      	cmp	r3, #0
 800864e:	d010      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008654:	d106      	bne.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008656:	4b43      	ldr	r3, [pc, #268]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865a:	4a42      	ldr	r2, [pc, #264]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800865c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008660:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008662:	e007      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	75fb      	strb	r3, [r7, #23]
      break;
 8008668:	e004      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800866a:	bf00      	nop
 800866c:	e002      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800866e:	bf00      	nop
 8008670:	e000      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008674:	7dfb      	ldrb	r3, [r7, #23]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d109      	bne.n	800868e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800867a:	4b3a      	ldr	r3, [pc, #232]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800867c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800867e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008686:	4937      	ldr	r1, [pc, #220]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008688:	4313      	orrs	r3, r2
 800868a:	654b      	str	r3, [r1, #84]	; 0x54
 800868c:	e001      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868e:	7dfb      	ldrb	r3, [r7, #23]
 8008690:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d008      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800869e:	4b31      	ldr	r3, [pc, #196]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086aa:	492e      	ldr	r1, [pc, #184]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086ac:	4313      	orrs	r3, r2
 80086ae:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d009      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80086bc:	4b29      	ldr	r3, [pc, #164]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80086ca:	4926      	ldr	r1, [pc, #152]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086cc:	4313      	orrs	r3, r2
 80086ce:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d008      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80086dc:	4b21      	ldr	r3, [pc, #132]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086e8:	491e      	ldr	r1, [pc, #120]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00d      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80086fa:	4b1a      	ldr	r3, [pc, #104]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	4a19      	ldr	r2, [pc, #100]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008700:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008704:	6113      	str	r3, [r2, #16]
 8008706:	4b17      	ldr	r3, [pc, #92]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008708:	691a      	ldr	r2, [r3, #16]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008710:	4914      	ldr	r1, [pc, #80]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008712:	4313      	orrs	r3, r2
 8008714:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	da08      	bge.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800871e:	4b11      	ldr	r3, [pc, #68]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008722:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800872a:	490e      	ldr	r1, [pc, #56]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800872c:	4313      	orrs	r3, r2
 800872e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d009      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800873c:	4b09      	ldr	r3, [pc, #36]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800873e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008740:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800874a:	4906      	ldr	r1, [pc, #24]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800874c:	4313      	orrs	r3, r2
 800874e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008750:	7dbb      	ldrb	r3, [r7, #22]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d101      	bne.n	800875a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	e000      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
}
 800875c:	4618      	mov	r0, r3
 800875e:	3718      	adds	r7, #24
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	58024400 	.word	0x58024400

08008768 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b090      	sub	sp, #64	; 0x40
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008776:	f040 8095 	bne.w	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800877a:	4bae      	ldr	r3, [pc, #696]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800877c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800877e:	f003 0307 	and.w	r3, r3, #7
 8008782:	633b      	str	r3, [r7, #48]	; 0x30
 8008784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008786:	2b04      	cmp	r3, #4
 8008788:	f200 8088 	bhi.w	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800878c:	a201      	add	r2, pc, #4	; (adr r2, 8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800878e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008792:	bf00      	nop
 8008794:	080087a9 	.word	0x080087a9
 8008798:	080087d1 	.word	0x080087d1
 800879c:	080087f9 	.word	0x080087f9
 80087a0:	08008895 	.word	0x08008895
 80087a4:	08008821 	.word	0x08008821

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087a8:	4ba2      	ldr	r3, [pc, #648]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087b4:	d108      	bne.n	80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087ba:	4618      	mov	r0, r3
 80087bc:	f000 ff64 	bl	8009688 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80087c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80087c4:	f000 bc95 	b.w	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80087c8:	2300      	movs	r3, #0
 80087ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087cc:	f000 bc91 	b.w	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087d0:	4b98      	ldr	r3, [pc, #608]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087dc:	d108      	bne.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087de:	f107 0318 	add.w	r3, r7, #24
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 fca8 	bl	8009138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80087ec:	f000 bc81 	b.w	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80087f0:	2300      	movs	r3, #0
 80087f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087f4:	f000 bc7d 	b.w	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087f8:	4b8e      	ldr	r3, [pc, #568]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008804:	d108      	bne.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008806:	f107 030c 	add.w	r3, r7, #12
 800880a:	4618      	mov	r0, r3
 800880c:	f000 fde8 	bl	80093e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008814:	f000 bc6d 	b.w	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008818:	2300      	movs	r3, #0
 800881a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800881c:	f000 bc69 	b.w	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008820:	4b84      	ldr	r3, [pc, #528]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008824:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008828:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800882a:	4b82      	ldr	r3, [pc, #520]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0304 	and.w	r3, r3, #4
 8008832:	2b04      	cmp	r3, #4
 8008834:	d10c      	bne.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008838:	2b00      	cmp	r3, #0
 800883a:	d109      	bne.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800883c:	4b7d      	ldr	r3, [pc, #500]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	08db      	lsrs	r3, r3, #3
 8008842:	f003 0303 	and.w	r3, r3, #3
 8008846:	4a7c      	ldr	r2, [pc, #496]	; (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008848:	fa22 f303 	lsr.w	r3, r2, r3
 800884c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800884e:	e01f      	b.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008850:	4b78      	ldr	r3, [pc, #480]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800885c:	d106      	bne.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800885e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008860:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008864:	d102      	bne.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008866:	4b75      	ldr	r3, [pc, #468]	; (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800886a:	e011      	b.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800886c:	4b71      	ldr	r3, [pc, #452]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008874:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008878:	d106      	bne.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800887a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008880:	d102      	bne.n	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008882:	4b6f      	ldr	r3, [pc, #444]	; (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008886:	e003      	b.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008888:	2300      	movs	r3, #0
 800888a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800888c:	f000 bc31 	b.w	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008890:	f000 bc2f 	b.w	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008894:	4b6b      	ldr	r3, [pc, #428]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008896:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008898:	f000 bc2b 	b.w	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800889c:	2300      	movs	r3, #0
 800889e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088a0:	f000 bc27 	b.w	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088aa:	f040 8095 	bne.w	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80088ae:	4b61      	ldr	r3, [pc, #388]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80088b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80088b6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80088b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088be:	d04d      	beq.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088c6:	f200 8084 	bhi.w	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80088ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088cc:	2bc0      	cmp	r3, #192	; 0xc0
 80088ce:	d07d      	beq.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80088d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d2:	2bc0      	cmp	r3, #192	; 0xc0
 80088d4:	d87d      	bhi.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	2b80      	cmp	r3, #128	; 0x80
 80088da:	d02d      	beq.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80088dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088de:	2b80      	cmp	r3, #128	; 0x80
 80088e0:	d877      	bhi.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80088e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d003      	beq.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80088e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ea:	2b40      	cmp	r3, #64	; 0x40
 80088ec:	d012      	beq.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80088ee:	e070      	b.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088f0:	4b50      	ldr	r3, [pc, #320]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088fc:	d107      	bne.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008902:	4618      	mov	r0, r3
 8008904:	f000 fec0 	bl	8009688 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800890c:	e3f1      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800890e:	2300      	movs	r3, #0
 8008910:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008912:	e3ee      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008914:	4b47      	ldr	r3, [pc, #284]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800891c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008920:	d107      	bne.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008922:	f107 0318 	add.w	r3, r7, #24
 8008926:	4618      	mov	r0, r3
 8008928:	f000 fc06 	bl	8009138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008930:	e3df      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008932:	2300      	movs	r3, #0
 8008934:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008936:	e3dc      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008938:	4b3e      	ldr	r3, [pc, #248]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008944:	d107      	bne.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008946:	f107 030c 	add.w	r3, r7, #12
 800894a:	4618      	mov	r0, r3
 800894c:	f000 fd48 	bl	80093e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008954:	e3cd      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008956:	2300      	movs	r3, #0
 8008958:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800895a:	e3ca      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800895c:	4b35      	ldr	r3, [pc, #212]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800895e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008960:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008964:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008966:	4b33      	ldr	r3, [pc, #204]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 0304 	and.w	r3, r3, #4
 800896e:	2b04      	cmp	r3, #4
 8008970:	d10c      	bne.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008974:	2b00      	cmp	r3, #0
 8008976:	d109      	bne.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008978:	4b2e      	ldr	r3, [pc, #184]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	08db      	lsrs	r3, r3, #3
 800897e:	f003 0303 	and.w	r3, r3, #3
 8008982:	4a2d      	ldr	r2, [pc, #180]	; (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008984:	fa22 f303 	lsr.w	r3, r2, r3
 8008988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800898a:	e01e      	b.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800898c:	4b29      	ldr	r3, [pc, #164]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008998:	d106      	bne.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800899a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800899c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089a0:	d102      	bne.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80089a2:	4b26      	ldr	r3, [pc, #152]	; (8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80089a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089a6:	e010      	b.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089a8:	4b22      	ldr	r3, [pc, #136]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089b4:	d106      	bne.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80089b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089bc:	d102      	bne.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80089be:	4b20      	ldr	r3, [pc, #128]	; (8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80089c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089c2:	e002      	b.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80089c8:	e393      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80089ca:	e392      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80089cc:	4b1d      	ldr	r3, [pc, #116]	; (8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80089ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089d0:	e38f      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80089d2:	2300      	movs	r3, #0
 80089d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089d6:	e38c      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089de:	f040 80a7 	bne.w	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80089e2:	4b14      	ldr	r3, [pc, #80]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80089e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089e6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80089ea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80089ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089f2:	d05f      	beq.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80089f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089fa:	f200 8096 	bhi.w	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80089fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a04:	f000 808e 	beq.w	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8008a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a0e:	f200 808c 	bhi.w	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a18:	d03a      	beq.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a20:	f200 8083 	bhi.w	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00e      	beq.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a30:	d01c      	beq.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8008a32:	e07a      	b.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008a34:	58024400 	.word	0x58024400
 8008a38:	03d09000 	.word	0x03d09000
 8008a3c:	003d0900 	.word	0x003d0900
 8008a40:	007a1200 	.word	0x007a1200
 8008a44:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a48:	4baa      	ldr	r3, [pc, #680]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a54:	d107      	bne.n	8008a66 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 fe14 	bl	8009688 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a64:	e345      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008a66:	2300      	movs	r3, #0
 8008a68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a6a:	e342      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a6c:	4ba1      	ldr	r3, [pc, #644]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a78:	d107      	bne.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a7a:	f107 0318 	add.w	r3, r7, #24
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 fb5a 	bl	8009138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a88:	e333      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a8e:	e330      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a90:	4b98      	ldr	r3, [pc, #608]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a9c:	d107      	bne.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a9e:	f107 030c 	add.w	r3, r7, #12
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f000 fc9c 	bl	80093e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008aac:	e321      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ab2:	e31e      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ab4:	4b8f      	ldr	r3, [pc, #572]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ab8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008abc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008abe:	4b8d      	ldr	r3, [pc, #564]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0304 	and.w	r3, r3, #4
 8008ac6:	2b04      	cmp	r3, #4
 8008ac8:	d10c      	bne.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8008aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d109      	bne.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ad0:	4b88      	ldr	r3, [pc, #544]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	08db      	lsrs	r3, r3, #3
 8008ad6:	f003 0303 	and.w	r3, r3, #3
 8008ada:	4a87      	ldr	r2, [pc, #540]	; (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008adc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ae2:	e01e      	b.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ae4:	4b83      	ldr	r3, [pc, #524]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008af0:	d106      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8008af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008af8:	d102      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008afa:	4b80      	ldr	r3, [pc, #512]	; (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008afe:	e010      	b.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b00:	4b7c      	ldr	r3, [pc, #496]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b0c:	d106      	bne.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8008b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b14:	d102      	bne.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008b16:	4b7a      	ldr	r3, [pc, #488]	; (8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008b18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b1a:	e002      	b.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008b20:	e2e7      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b22:	e2e6      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008b24:	4b77      	ldr	r3, [pc, #476]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008b26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b28:	e2e3      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b2e:	e2e0      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b36:	f040 809c 	bne.w	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008b3a:	4b6e      	ldr	r3, [pc, #440]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b3e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008b42:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b4a:	d054      	beq.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b52:	f200 808b 	bhi.w	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b5c:	f000 8083 	beq.w	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b66:	f200 8081 	bhi.w	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b70:	d02f      	beq.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b78:	d878      	bhi.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d004      	beq.n	8008b8a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b86:	d012      	beq.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008b88:	e070      	b.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b8a:	4b5a      	ldr	r3, [pc, #360]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b96:	d107      	bne.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 fd73 	bl	8009688 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ba6:	e2a4      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bac:	e2a1      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bae:	4b51      	ldr	r3, [pc, #324]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bba:	d107      	bne.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bbc:	f107 0318 	add.w	r3, r7, #24
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 fab9 	bl	8009138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008bca:	e292      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bd0:	e28f      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bd2:	4b48      	ldr	r3, [pc, #288]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bde:	d107      	bne.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008be0:	f107 030c 	add.w	r3, r7, #12
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 fbfb 	bl	80093e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008bee:	e280      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bf4:	e27d      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008bf6:	4b3f      	ldr	r3, [pc, #252]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bfe:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c00:	4b3c      	ldr	r3, [pc, #240]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0304 	and.w	r3, r3, #4
 8008c08:	2b04      	cmp	r3, #4
 8008c0a:	d10c      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d109      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c12:	4b38      	ldr	r3, [pc, #224]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	08db      	lsrs	r3, r3, #3
 8008c18:	f003 0303 	and.w	r3, r3, #3
 8008c1c:	4a36      	ldr	r2, [pc, #216]	; (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c24:	e01e      	b.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c26:	4b33      	ldr	r3, [pc, #204]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c32:	d106      	bne.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8008c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c3a:	d102      	bne.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008c3c:	4b2f      	ldr	r3, [pc, #188]	; (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c40:	e010      	b.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c42:	4b2c      	ldr	r3, [pc, #176]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c4e:	d106      	bne.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c56:	d102      	bne.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008c58:	4b29      	ldr	r3, [pc, #164]	; (8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c5c:	e002      	b.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008c62:	e246      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008c64:	e245      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008c66:	4b27      	ldr	r3, [pc, #156]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008c68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c6a:	e242      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c70:	e23f      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c78:	f040 80a8 	bne.w	8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008c7c:	4b1d      	ldr	r3, [pc, #116]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c80:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008c84:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c8c:	d060      	beq.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c94:	f200 8097 	bhi.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c9e:	f000 808f 	beq.w	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ca8:	f200 808d 	bhi.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cb2:	d03b      	beq.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cba:	f200 8084 	bhi.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d004      	beq.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cca:	d01d      	beq.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008ccc:	e07b      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cce:	4b09      	ldr	r3, [pc, #36]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cda:	d107      	bne.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f000 fcd1 	bl	8009688 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008cea:	e202      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008cec:	2300      	movs	r3, #0
 8008cee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cf0:	e1ff      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008cf2:	bf00      	nop
 8008cf4:	58024400 	.word	0x58024400
 8008cf8:	03d09000 	.word	0x03d09000
 8008cfc:	003d0900 	.word	0x003d0900
 8008d00:	007a1200 	.word	0x007a1200
 8008d04:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d08:	4ba3      	ldr	r3, [pc, #652]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d14:	d107      	bne.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d16:	f107 0318 	add.w	r3, r7, #24
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 fa0c 	bl	8009138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d24:	e1e5      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008d26:	2300      	movs	r3, #0
 8008d28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d2a:	e1e2      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d2c:	4b9a      	ldr	r3, [pc, #616]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d38:	d107      	bne.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d3a:	f107 030c 	add.w	r3, r7, #12
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 fb4e 	bl	80093e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d48:	e1d3      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d4e:	e1d0      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d50:	4b91      	ldr	r3, [pc, #580]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d58:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d5a:	4b8f      	ldr	r3, [pc, #572]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 0304 	and.w	r3, r3, #4
 8008d62:	2b04      	cmp	r3, #4
 8008d64:	d10c      	bne.n	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8008d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d109      	bne.n	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d6c:	4b8a      	ldr	r3, [pc, #552]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	08db      	lsrs	r3, r3, #3
 8008d72:	f003 0303 	and.w	r3, r3, #3
 8008d76:	4a89      	ldr	r2, [pc, #548]	; (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008d78:	fa22 f303 	lsr.w	r3, r2, r3
 8008d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d7e:	e01e      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d80:	4b85      	ldr	r3, [pc, #532]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d8c:	d106      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8008d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d94:	d102      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008d96:	4b82      	ldr	r3, [pc, #520]	; (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008d98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d9a:	e010      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d9c:	4b7e      	ldr	r3, [pc, #504]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008da4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008da8:	d106      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008db0:	d102      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008db2:	4b7c      	ldr	r3, [pc, #496]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008db4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008db6:	e002      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008dbc:	e199      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008dbe:	e198      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008dc0:	4b79      	ldr	r3, [pc, #484]	; (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dc4:	e195      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dca:	e192      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008dd2:	d173      	bne.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008dd4:	4b70      	ldr	r3, [pc, #448]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008ddc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008de4:	d02f      	beq.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8008de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dec:	d863      	bhi.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d004      	beq.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8008df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dfa:	d012      	beq.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8008dfc:	e05b      	b.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008dfe:	4b66      	ldr	r3, [pc, #408]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e0a:	d107      	bne.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e0c:	f107 0318 	add.w	r3, r7, #24
 8008e10:	4618      	mov	r0, r3
 8008e12:	f000 f991 	bl	8009138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e1a:	e16a      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e20:	e167      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e22:	4b5d      	ldr	r3, [pc, #372]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e2e:	d107      	bne.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e30:	f107 030c 	add.w	r3, r7, #12
 8008e34:	4618      	mov	r0, r3
 8008e36:	f000 fad3 	bl	80093e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e3e:	e158      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008e40:	2300      	movs	r3, #0
 8008e42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e44:	e155      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e46:	4b54      	ldr	r3, [pc, #336]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e4e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e50:	4b51      	ldr	r3, [pc, #324]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 0304 	and.w	r3, r3, #4
 8008e58:	2b04      	cmp	r3, #4
 8008e5a:	d10c      	bne.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8008e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d109      	bne.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e62:	4b4d      	ldr	r3, [pc, #308]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	08db      	lsrs	r3, r3, #3
 8008e68:	f003 0303 	and.w	r3, r3, #3
 8008e6c:	4a4b      	ldr	r2, [pc, #300]	; (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e74:	e01e      	b.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e76:	4b48      	ldr	r3, [pc, #288]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e82:	d106      	bne.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8008e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e8a:	d102      	bne.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008e8c:	4b44      	ldr	r3, [pc, #272]	; (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e90:	e010      	b.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e92:	4b41      	ldr	r3, [pc, #260]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e9e:	d106      	bne.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ea6:	d102      	bne.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008ea8:	4b3e      	ldr	r3, [pc, #248]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eac:	e002      	b.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008eb2:	e11e      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008eb4:	e11d      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eba:	e11a      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ec2:	d133      	bne.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008ec4:	4b34      	ldr	r3, [pc, #208]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ecc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d004      	beq.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8008ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eda:	d012      	beq.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008edc:	e023      	b.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ede:	4b2e      	ldr	r3, [pc, #184]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ee6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008eea:	d107      	bne.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 fbc9 	bl	8009688 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008efa:	e0fa      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008efc:	2300      	movs	r3, #0
 8008efe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f00:	e0f7      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f02:	4b25      	ldr	r3, [pc, #148]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f0e:	d107      	bne.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f10:	f107 0318 	add.w	r3, r7, #24
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 f90f 	bl	8009138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008f1a:	6a3b      	ldr	r3, [r7, #32]
 8008f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f1e:	e0e8      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008f20:	2300      	movs	r3, #0
 8008f22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f24:	e0e5      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008f26:	2300      	movs	r3, #0
 8008f28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f2a:	e0e2      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f32:	f040 808f 	bne.w	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008f36:	4b18      	ldr	r3, [pc, #96]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f3a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008f3e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f46:	d075      	beq.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8008f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f4e:	d87e      	bhi.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f56:	d060      	beq.n	800901a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8008f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f5e:	d876      	bhi.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f66:	d045      	beq.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8008f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f6e:	d86e      	bhi.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f76:	d02b      	beq.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8008f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f7e:	d866      	bhi.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d004      	beq.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8008f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f8c:	d00e      	beq.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008f8e:	e05e      	b.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008f90:	f000 f8bc 	bl	800910c <HAL_RCCEx_GetD3PCLK1Freq>
 8008f94:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008f96:	e0ac      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008f98:	58024400 	.word	0x58024400
 8008f9c:	03d09000 	.word	0x03d09000
 8008fa0:	003d0900 	.word	0x003d0900
 8008fa4:	007a1200 	.word	0x007a1200
 8008fa8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fac:	4b53      	ldr	r3, [pc, #332]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fb8:	d107      	bne.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fba:	f107 0318 	add.w	r3, r7, #24
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 f8ba 	bl	8009138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008fc8:	e093      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fce:	e090      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fd0:	4b4a      	ldr	r3, [pc, #296]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fdc:	d107      	bne.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fde:	f107 030c 	add.w	r3, r7, #12
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f000 f9fc 	bl	80093e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008fec:	e081      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ff2:	e07e      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ff4:	4b41      	ldr	r3, [pc, #260]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 0304 	and.w	r3, r3, #4
 8008ffc:	2b04      	cmp	r3, #4
 8008ffe:	d109      	bne.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009000:	4b3e      	ldr	r3, [pc, #248]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	08db      	lsrs	r3, r3, #3
 8009006:	f003 0303 	and.w	r3, r3, #3
 800900a:	4a3d      	ldr	r2, [pc, #244]	; (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800900c:	fa22 f303 	lsr.w	r3, r2, r3
 8009010:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009012:	e06e      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009014:	2300      	movs	r3, #0
 8009016:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009018:	e06b      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800901a:	4b38      	ldr	r3, [pc, #224]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009026:	d102      	bne.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8009028:	4b36      	ldr	r3, [pc, #216]	; (8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800902a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800902c:	e061      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800902e:	2300      	movs	r3, #0
 8009030:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009032:	e05e      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009034:	4b31      	ldr	r3, [pc, #196]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800903c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009040:	d102      	bne.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8009042:	4b31      	ldr	r3, [pc, #196]	; (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009044:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009046:	e054      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009048:	2300      	movs	r3, #0
 800904a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800904c:	e051      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800904e:	2300      	movs	r3, #0
 8009050:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009052:	e04e      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800905a:	d148      	bne.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800905c:	4b27      	ldr	r3, [pc, #156]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800905e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009060:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009064:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800906c:	d02a      	beq.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800906e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009074:	d838      	bhi.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009078:	2b00      	cmp	r3, #0
 800907a:	d004      	beq.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009082:	d00d      	beq.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009084:	e030      	b.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009086:	4b1d      	ldr	r3, [pc, #116]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800908e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009092:	d102      	bne.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8009094:	4b1c      	ldr	r3, [pc, #112]	; (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009096:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009098:	e02b      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800909e:	e028      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090a0:	4b16      	ldr	r3, [pc, #88]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090ac:	d107      	bne.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 fae8 	bl	8009688 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80090bc:	e019      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090be:	2300      	movs	r3, #0
 80090c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090c2:	e016      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090c4:	4b0d      	ldr	r3, [pc, #52]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090d0:	d107      	bne.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090d2:	f107 0318 	add.w	r3, r7, #24
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 f82e 	bl	8009138 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80090e0:	e007      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090e6:	e004      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80090e8:	2300      	movs	r3, #0
 80090ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090ec:	e001      	b.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80090ee:	2300      	movs	r3, #0
 80090f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80090f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3740      	adds	r7, #64	; 0x40
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	58024400 	.word	0x58024400
 8009100:	03d09000 	.word	0x03d09000
 8009104:	003d0900 	.word	0x003d0900
 8009108:	007a1200 	.word	0x007a1200

0800910c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009110:	f7fe fb4c 	bl	80077ac <HAL_RCC_GetHCLKFreq>
 8009114:	4602      	mov	r2, r0
 8009116:	4b06      	ldr	r3, [pc, #24]	; (8009130 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009118:	6a1b      	ldr	r3, [r3, #32]
 800911a:	091b      	lsrs	r3, r3, #4
 800911c:	f003 0307 	and.w	r3, r3, #7
 8009120:	4904      	ldr	r1, [pc, #16]	; (8009134 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009122:	5ccb      	ldrb	r3, [r1, r3]
 8009124:	f003 031f 	and.w	r3, r3, #31
 8009128:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800912c:	4618      	mov	r0, r3
 800912e:	bd80      	pop	{r7, pc}
 8009130:	58024400 	.word	0x58024400
 8009134:	0800f8d4 	.word	0x0800f8d4

08009138 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009138:	b480      	push	{r7}
 800913a:	b089      	sub	sp, #36	; 0x24
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009140:	4ba1      	ldr	r3, [pc, #644]	; (80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009144:	f003 0303 	and.w	r3, r3, #3
 8009148:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800914a:	4b9f      	ldr	r3, [pc, #636]	; (80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800914c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914e:	0b1b      	lsrs	r3, r3, #12
 8009150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009154:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009156:	4b9c      	ldr	r3, [pc, #624]	; (80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915a:	091b      	lsrs	r3, r3, #4
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009162:	4b99      	ldr	r3, [pc, #612]	; (80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009166:	08db      	lsrs	r3, r3, #3
 8009168:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	fb02 f303 	mul.w	r3, r2, r3
 8009172:	ee07 3a90 	vmov	s15, r3
 8009176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800917a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 8111 	beq.w	80093a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	2b02      	cmp	r3, #2
 800918a:	f000 8083 	beq.w	8009294 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	2b02      	cmp	r3, #2
 8009192:	f200 80a1 	bhi.w	80092d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d003      	beq.n	80091a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d056      	beq.n	8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80091a2:	e099      	b.n	80092d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091a4:	4b88      	ldr	r3, [pc, #544]	; (80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 0320 	and.w	r3, r3, #32
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d02d      	beq.n	800920c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80091b0:	4b85      	ldr	r3, [pc, #532]	; (80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	08db      	lsrs	r3, r3, #3
 80091b6:	f003 0303 	and.w	r3, r3, #3
 80091ba:	4a84      	ldr	r2, [pc, #528]	; (80093cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80091bc:	fa22 f303 	lsr.w	r3, r2, r3
 80091c0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	ee07 3a90 	vmov	s15, r3
 80091c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	ee07 3a90 	vmov	s15, r3
 80091d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091da:	4b7b      	ldr	r3, [pc, #492]	; (80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e2:	ee07 3a90 	vmov	s15, r3
 80091e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80093d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009206:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800920a:	e087      	b.n	800931c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	ee07 3a90 	vmov	s15, r3
 8009212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009216:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800921a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800921e:	4b6a      	ldr	r3, [pc, #424]	; (80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800922e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009232:	eddf 5a67 	vldr	s11, [pc, #412]	; 80093d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800923a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800923e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800924a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800924e:	e065      	b.n	800931c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	ee07 3a90 	vmov	s15, r3
 8009256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800925a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80093d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800925e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009262:	4b59      	ldr	r3, [pc, #356]	; (80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800926a:	ee07 3a90 	vmov	s15, r3
 800926e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009272:	ed97 6a03 	vldr	s12, [r7, #12]
 8009276:	eddf 5a56 	vldr	s11, [pc, #344]	; 80093d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800927a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800927e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800928a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800928e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009292:	e043      	b.n	800931c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	ee07 3a90 	vmov	s15, r3
 800929a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800929e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80093dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80092a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092a6:	4b48      	ldr	r3, [pc, #288]	; (80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ae:	ee07 3a90 	vmov	s15, r3
 80092b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80092ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80093d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092d6:	e021      	b.n	800931c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	ee07 3a90 	vmov	s15, r3
 80092de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80093d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80092e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ea:	4b37      	ldr	r3, [pc, #220]	; (80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092f2:	ee07 3a90 	vmov	s15, r3
 80092f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80092fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80093d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800930a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800930e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009316:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800931a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800931c:	4b2a      	ldr	r3, [pc, #168]	; (80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800931e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009320:	0a5b      	lsrs	r3, r3, #9
 8009322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009326:	ee07 3a90 	vmov	s15, r3
 800932a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800932e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009332:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009336:	edd7 6a07 	vldr	s13, [r7, #28]
 800933a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800933e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009342:	ee17 2a90 	vmov	r2, s15
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800934a:	4b1f      	ldr	r3, [pc, #124]	; (80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800934c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934e:	0c1b      	lsrs	r3, r3, #16
 8009350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009354:	ee07 3a90 	vmov	s15, r3
 8009358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800935c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009360:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009364:	edd7 6a07 	vldr	s13, [r7, #28]
 8009368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800936c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009370:	ee17 2a90 	vmov	r2, s15
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009378:	4b13      	ldr	r3, [pc, #76]	; (80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800937a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937c:	0e1b      	lsrs	r3, r3, #24
 800937e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009382:	ee07 3a90 	vmov	s15, r3
 8009386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800938e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009392:	edd7 6a07 	vldr	s13, [r7, #28]
 8009396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800939a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800939e:	ee17 2a90 	vmov	r2, s15
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80093a6:	e008      	b.n	80093ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	609a      	str	r2, [r3, #8]
}
 80093ba:	bf00      	nop
 80093bc:	3724      	adds	r7, #36	; 0x24
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	58024400 	.word	0x58024400
 80093cc:	03d09000 	.word	0x03d09000
 80093d0:	46000000 	.word	0x46000000
 80093d4:	4c742400 	.word	0x4c742400
 80093d8:	4a742400 	.word	0x4a742400
 80093dc:	4af42400 	.word	0x4af42400

080093e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b089      	sub	sp, #36	; 0x24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093e8:	4ba1      	ldr	r3, [pc, #644]	; (8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ec:	f003 0303 	and.w	r3, r3, #3
 80093f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80093f2:	4b9f      	ldr	r3, [pc, #636]	; (8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f6:	0d1b      	lsrs	r3, r3, #20
 80093f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80093fe:	4b9c      	ldr	r3, [pc, #624]	; (8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009402:	0a1b      	lsrs	r3, r3, #8
 8009404:	f003 0301 	and.w	r3, r3, #1
 8009408:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800940a:	4b99      	ldr	r3, [pc, #612]	; (8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800940c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800940e:	08db      	lsrs	r3, r3, #3
 8009410:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	fb02 f303 	mul.w	r3, r2, r3
 800941a:	ee07 3a90 	vmov	s15, r3
 800941e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009422:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	2b00      	cmp	r3, #0
 800942a:	f000 8111 	beq.w	8009650 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	2b02      	cmp	r3, #2
 8009432:	f000 8083 	beq.w	800953c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	2b02      	cmp	r3, #2
 800943a:	f200 80a1 	bhi.w	8009580 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d003      	beq.n	800944c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d056      	beq.n	80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800944a:	e099      	b.n	8009580 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800944c:	4b88      	ldr	r3, [pc, #544]	; (8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f003 0320 	and.w	r3, r3, #32
 8009454:	2b00      	cmp	r3, #0
 8009456:	d02d      	beq.n	80094b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009458:	4b85      	ldr	r3, [pc, #532]	; (8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	08db      	lsrs	r3, r3, #3
 800945e:	f003 0303 	and.w	r3, r3, #3
 8009462:	4a84      	ldr	r2, [pc, #528]	; (8009674 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009464:	fa22 f303 	lsr.w	r3, r2, r3
 8009468:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	ee07 3a90 	vmov	s15, r3
 8009470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	ee07 3a90 	vmov	s15, r3
 800947a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009482:	4b7b      	ldr	r3, [pc, #492]	; (8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800948a:	ee07 3a90 	vmov	s15, r3
 800948e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009492:	ed97 6a03 	vldr	s12, [r7, #12]
 8009496:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009678 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800949a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800949e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80094b2:	e087      	b.n	80095c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	ee07 3a90 	vmov	s15, r3
 80094ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800967c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80094c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094c6:	4b6a      	ldr	r3, [pc, #424]	; (8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80094da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009678 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094f6:	e065      	b.n	80095c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	ee07 3a90 	vmov	s15, r3
 80094fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009502:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009680 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800950a:	4b59      	ldr	r3, [pc, #356]	; (8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800950c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009512:	ee07 3a90 	vmov	s15, r3
 8009516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800951a:	ed97 6a03 	vldr	s12, [r7, #12]
 800951e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009678 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800952a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800952e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009536:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800953a:	e043      	b.n	80095c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	ee07 3a90 	vmov	s15, r3
 8009542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009546:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009684 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800954a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800954e:	4b48      	ldr	r3, [pc, #288]	; (8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009556:	ee07 3a90 	vmov	s15, r3
 800955a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800955e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009562:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009678 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800956a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800956e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800957a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800957e:	e021      	b.n	80095c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	ee07 3a90 	vmov	s15, r3
 8009586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009680 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800958e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009592:	4b37      	ldr	r3, [pc, #220]	; (8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800959a:	ee07 3a90 	vmov	s15, r3
 800959e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80095a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009678 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80095c4:	4b2a      	ldr	r3, [pc, #168]	; (8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c8:	0a5b      	lsrs	r3, r3, #9
 80095ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ce:	ee07 3a90 	vmov	s15, r3
 80095d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095de:	edd7 6a07 	vldr	s13, [r7, #28]
 80095e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095ea:	ee17 2a90 	vmov	r2, s15
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80095f2:	4b1f      	ldr	r3, [pc, #124]	; (8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f6:	0c1b      	lsrs	r3, r3, #16
 80095f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095fc:	ee07 3a90 	vmov	s15, r3
 8009600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009604:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009608:	ee37 7a87 	vadd.f32	s14, s15, s14
 800960c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009618:	ee17 2a90 	vmov	r2, s15
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009620:	4b13      	ldr	r3, [pc, #76]	; (8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009624:	0e1b      	lsrs	r3, r3, #24
 8009626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800962a:	ee07 3a90 	vmov	s15, r3
 800962e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009632:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009636:	ee37 7a87 	vadd.f32	s14, s15, s14
 800963a:	edd7 6a07 	vldr	s13, [r7, #28]
 800963e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009646:	ee17 2a90 	vmov	r2, s15
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800964e:	e008      	b.n	8009662 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	609a      	str	r2, [r3, #8]
}
 8009662:	bf00      	nop
 8009664:	3724      	adds	r7, #36	; 0x24
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	58024400 	.word	0x58024400
 8009674:	03d09000 	.word	0x03d09000
 8009678:	46000000 	.word	0x46000000
 800967c:	4c742400 	.word	0x4c742400
 8009680:	4a742400 	.word	0x4a742400
 8009684:	4af42400 	.word	0x4af42400

08009688 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009688:	b480      	push	{r7}
 800968a:	b089      	sub	sp, #36	; 0x24
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009690:	4ba0      	ldr	r3, [pc, #640]	; (8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009694:	f003 0303 	and.w	r3, r3, #3
 8009698:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800969a:	4b9e      	ldr	r3, [pc, #632]	; (8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800969c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969e:	091b      	lsrs	r3, r3, #4
 80096a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096a4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80096a6:	4b9b      	ldr	r3, [pc, #620]	; (8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096aa:	f003 0301 	and.w	r3, r3, #1
 80096ae:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80096b0:	4b98      	ldr	r3, [pc, #608]	; (8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b4:	08db      	lsrs	r3, r3, #3
 80096b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	fb02 f303 	mul.w	r3, r2, r3
 80096c0:	ee07 3a90 	vmov	s15, r3
 80096c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096c8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f000 8111 	beq.w	80098f6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	f000 8083 	beq.w	80097e2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	2b02      	cmp	r3, #2
 80096e0:	f200 80a1 	bhi.w	8009826 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d056      	beq.n	800979e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80096f0:	e099      	b.n	8009826 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096f2:	4b88      	ldr	r3, [pc, #544]	; (8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 0320 	and.w	r3, r3, #32
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d02d      	beq.n	800975a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096fe:	4b85      	ldr	r3, [pc, #532]	; (8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	08db      	lsrs	r3, r3, #3
 8009704:	f003 0303 	and.w	r3, r3, #3
 8009708:	4a83      	ldr	r2, [pc, #524]	; (8009918 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800970a:	fa22 f303 	lsr.w	r3, r2, r3
 800970e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	ee07 3a90 	vmov	s15, r3
 8009716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	ee07 3a90 	vmov	s15, r3
 8009720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009724:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009728:	4b7a      	ldr	r3, [pc, #488]	; (8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800972a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800972c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009730:	ee07 3a90 	vmov	s15, r3
 8009734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009738:	ed97 6a03 	vldr	s12, [r7, #12]
 800973c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800991c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009740:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009744:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009748:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800974c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009754:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009758:	e087      	b.n	800986a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	ee07 3a90 	vmov	s15, r3
 8009760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009764:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009920 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800976c:	4b69      	ldr	r3, [pc, #420]	; (8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800976e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009774:	ee07 3a90 	vmov	s15, r3
 8009778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800977c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009780:	eddf 5a66 	vldr	s11, [pc, #408]	; 800991c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009784:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009788:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800978c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009790:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009798:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800979c:	e065      	b.n	800986a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	ee07 3a90 	vmov	s15, r3
 80097a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097a8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009924 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80097ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097b0:	4b58      	ldr	r3, [pc, #352]	; (8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097b8:	ee07 3a90 	vmov	s15, r3
 80097bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80097c4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800991c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097e0:	e043      	b.n	800986a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	ee07 3a90 	vmov	s15, r3
 80097e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009928 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80097f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097f4:	4b47      	ldr	r3, [pc, #284]	; (8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097fc:	ee07 3a90 	vmov	s15, r3
 8009800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009804:	ed97 6a03 	vldr	s12, [r7, #12]
 8009808:	eddf 5a44 	vldr	s11, [pc, #272]	; 800991c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800980c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009810:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009814:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009818:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800981c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009820:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009824:	e021      	b.n	800986a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	ee07 3a90 	vmov	s15, r3
 800982c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009830:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009920 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009834:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009838:	4b36      	ldr	r3, [pc, #216]	; (8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800983a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800983c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009840:	ee07 3a90 	vmov	s15, r3
 8009844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009848:	ed97 6a03 	vldr	s12, [r7, #12]
 800984c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800991c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009850:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009854:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009858:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800985c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009864:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009868:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800986a:	4b2a      	ldr	r3, [pc, #168]	; (8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800986c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986e:	0a5b      	lsrs	r3, r3, #9
 8009870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009874:	ee07 3a90 	vmov	s15, r3
 8009878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800987c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009880:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009884:	edd7 6a07 	vldr	s13, [r7, #28]
 8009888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800988c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009890:	ee17 2a90 	vmov	r2, s15
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009898:	4b1e      	ldr	r3, [pc, #120]	; (8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800989a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989c:	0c1b      	lsrs	r3, r3, #16
 800989e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a2:	ee07 3a90 	vmov	s15, r3
 80098a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80098b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098be:	ee17 2a90 	vmov	r2, s15
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80098c6:	4b13      	ldr	r3, [pc, #76]	; (8009914 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ca:	0e1b      	lsrs	r3, r3, #24
 80098cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098d0:	ee07 3a90 	vmov	s15, r3
 80098d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80098e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098ec:	ee17 2a90 	vmov	r2, s15
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80098f4:	e008      	b.n	8009908 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	609a      	str	r2, [r3, #8]
}
 8009908:	bf00      	nop
 800990a:	3724      	adds	r7, #36	; 0x24
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr
 8009914:	58024400 	.word	0x58024400
 8009918:	03d09000 	.word	0x03d09000
 800991c:	46000000 	.word	0x46000000
 8009920:	4c742400 	.word	0x4c742400
 8009924:	4a742400 	.word	0x4a742400
 8009928:	4af42400 	.word	0x4af42400

0800992c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800993a:	4b53      	ldr	r3, [pc, #332]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 800993c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800993e:	f003 0303 	and.w	r3, r3, #3
 8009942:	2b03      	cmp	r3, #3
 8009944:	d101      	bne.n	800994a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	e099      	b.n	8009a7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800994a:	4b4f      	ldr	r3, [pc, #316]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a4e      	ldr	r2, [pc, #312]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 8009950:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009956:	f7fa fd0f 	bl	8004378 <HAL_GetTick>
 800995a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800995c:	e008      	b.n	8009970 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800995e:	f7fa fd0b 	bl	8004378 <HAL_GetTick>
 8009962:	4602      	mov	r2, r0
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	2b02      	cmp	r3, #2
 800996a:	d901      	bls.n	8009970 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800996c:	2303      	movs	r3, #3
 800996e:	e086      	b.n	8009a7e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009970:	4b45      	ldr	r3, [pc, #276]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1f0      	bne.n	800995e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800997c:	4b42      	ldr	r3, [pc, #264]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 800997e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009980:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	031b      	lsls	r3, r3, #12
 800998a:	493f      	ldr	r1, [pc, #252]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 800998c:	4313      	orrs	r3, r2
 800998e:	628b      	str	r3, [r1, #40]	; 0x28
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	3b01      	subs	r3, #1
 8009996:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	3b01      	subs	r3, #1
 80099a0:	025b      	lsls	r3, r3, #9
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	431a      	orrs	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	3b01      	subs	r3, #1
 80099ac:	041b      	lsls	r3, r3, #16
 80099ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80099b2:	431a      	orrs	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	3b01      	subs	r3, #1
 80099ba:	061b      	lsls	r3, r3, #24
 80099bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80099c0:	4931      	ldr	r1, [pc, #196]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80099c6:	4b30      	ldr	r3, [pc, #192]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 80099c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	492d      	ldr	r1, [pc, #180]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 80099d4:	4313      	orrs	r3, r2
 80099d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80099d8:	4b2b      	ldr	r3, [pc, #172]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 80099da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099dc:	f023 0220 	bic.w	r2, r3, #32
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	699b      	ldr	r3, [r3, #24]
 80099e4:	4928      	ldr	r1, [pc, #160]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 80099e6:	4313      	orrs	r3, r2
 80099e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80099ea:	4b27      	ldr	r3, [pc, #156]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 80099ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ee:	4a26      	ldr	r2, [pc, #152]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 80099f0:	f023 0310 	bic.w	r3, r3, #16
 80099f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80099f6:	4b24      	ldr	r3, [pc, #144]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 80099f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099fa:	4b24      	ldr	r3, [pc, #144]	; (8009a8c <RCCEx_PLL2_Config+0x160>)
 80099fc:	4013      	ands	r3, r2
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	69d2      	ldr	r2, [r2, #28]
 8009a02:	00d2      	lsls	r2, r2, #3
 8009a04:	4920      	ldr	r1, [pc, #128]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009a0a:	4b1f      	ldr	r3, [pc, #124]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 8009a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0e:	4a1e      	ldr	r2, [pc, #120]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 8009a10:	f043 0310 	orr.w	r3, r3, #16
 8009a14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d106      	bne.n	8009a2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009a1c:	4b1a      	ldr	r3, [pc, #104]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 8009a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a20:	4a19      	ldr	r2, [pc, #100]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 8009a22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a28:	e00f      	b.n	8009a4a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d106      	bne.n	8009a3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009a30:	4b15      	ldr	r3, [pc, #84]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 8009a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a34:	4a14      	ldr	r2, [pc, #80]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 8009a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a3c:	e005      	b.n	8009a4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009a3e:	4b12      	ldr	r3, [pc, #72]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 8009a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a42:	4a11      	ldr	r2, [pc, #68]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 8009a44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009a4a:	4b0f      	ldr	r3, [pc, #60]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a0e      	ldr	r2, [pc, #56]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 8009a50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009a54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a56:	f7fa fc8f 	bl	8004378 <HAL_GetTick>
 8009a5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a5c:	e008      	b.n	8009a70 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009a5e:	f7fa fc8b 	bl	8004378 <HAL_GetTick>
 8009a62:	4602      	mov	r2, r0
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d901      	bls.n	8009a70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	e006      	b.n	8009a7e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a70:	4b05      	ldr	r3, [pc, #20]	; (8009a88 <RCCEx_PLL2_Config+0x15c>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d0f0      	beq.n	8009a5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	58024400 	.word	0x58024400
 8009a8c:	ffff0007 	.word	0xffff0007

08009a90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a9e:	4b53      	ldr	r3, [pc, #332]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa2:	f003 0303 	and.w	r3, r3, #3
 8009aa6:	2b03      	cmp	r3, #3
 8009aa8:	d101      	bne.n	8009aae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e099      	b.n	8009be2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009aae:	4b4f      	ldr	r3, [pc, #316]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a4e      	ldr	r2, [pc, #312]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ab8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aba:	f7fa fc5d 	bl	8004378 <HAL_GetTick>
 8009abe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ac0:	e008      	b.n	8009ad4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009ac2:	f7fa fc59 	bl	8004378 <HAL_GetTick>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d901      	bls.n	8009ad4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e086      	b.n	8009be2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ad4:	4b45      	ldr	r3, [pc, #276]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1f0      	bne.n	8009ac2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009ae0:	4b42      	ldr	r3, [pc, #264]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	051b      	lsls	r3, r3, #20
 8009aee:	493f      	ldr	r1, [pc, #252]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009af0:	4313      	orrs	r3, r2
 8009af2:	628b      	str	r3, [r1, #40]	; 0x28
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	3b01      	subs	r3, #1
 8009afa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	3b01      	subs	r3, #1
 8009b04:	025b      	lsls	r3, r3, #9
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	431a      	orrs	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	041b      	lsls	r3, r3, #16
 8009b12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009b16:	431a      	orrs	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	061b      	lsls	r3, r3, #24
 8009b20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009b24:	4931      	ldr	r1, [pc, #196]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009b26:	4313      	orrs	r3, r2
 8009b28:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009b2a:	4b30      	ldr	r3, [pc, #192]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	695b      	ldr	r3, [r3, #20]
 8009b36:	492d      	ldr	r1, [pc, #180]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009b3c:	4b2b      	ldr	r3, [pc, #172]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b40:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	4928      	ldr	r1, [pc, #160]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009b4e:	4b27      	ldr	r3, [pc, #156]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b52:	4a26      	ldr	r2, [pc, #152]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009b5a:	4b24      	ldr	r3, [pc, #144]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b5e:	4b24      	ldr	r3, [pc, #144]	; (8009bf0 <RCCEx_PLL3_Config+0x160>)
 8009b60:	4013      	ands	r3, r2
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	69d2      	ldr	r2, [r2, #28]
 8009b66:	00d2      	lsls	r2, r2, #3
 8009b68:	4920      	ldr	r1, [pc, #128]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009b6e:	4b1f      	ldr	r3, [pc, #124]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b72:	4a1e      	ldr	r2, [pc, #120]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d106      	bne.n	8009b8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009b80:	4b1a      	ldr	r3, [pc, #104]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b84:	4a19      	ldr	r2, [pc, #100]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009b86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009b8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b8c:	e00f      	b.n	8009bae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d106      	bne.n	8009ba2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009b94:	4b15      	ldr	r3, [pc, #84]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b98:	4a14      	ldr	r2, [pc, #80]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009b9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009b9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ba0:	e005      	b.n	8009bae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009ba2:	4b12      	ldr	r3, [pc, #72]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba6:	4a11      	ldr	r2, [pc, #68]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009ba8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009bac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009bae:	4b0f      	ldr	r3, [pc, #60]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a0e      	ldr	r2, [pc, #56]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bba:	f7fa fbdd 	bl	8004378 <HAL_GetTick>
 8009bbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bc0:	e008      	b.n	8009bd4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009bc2:	f7fa fbd9 	bl	8004378 <HAL_GetTick>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d901      	bls.n	8009bd4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	e006      	b.n	8009be2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bd4:	4b05      	ldr	r3, [pc, #20]	; (8009bec <RCCEx_PLL3_Config+0x15c>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d0f0      	beq.n	8009bc2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	58024400 	.word	0x58024400
 8009bf0:	ffff0007 	.word	0xffff0007

08009bf4 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d101      	bne.n	8009c06 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e0a8      	b.n	8009d58 <HAL_SMBUS_Init+0x164>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d106      	bne.n	8009c1c <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7f7 f816 	bl	8000c48 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2202      	movs	r2, #2
 8009c20:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f022 0201 	bic.w	r2, r2, #1
 8009c30:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	685a      	ldr	r2, [r3, #4]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009c3e:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	695a      	ldr	r2, [r3, #20]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c4e:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	695a      	ldr	r2, [r3, #20]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009c5e:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009c68:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	689a      	ldr	r2, [r3, #8]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c78:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d012      	beq.n	8009ca8 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d107      	bne.n	8009c9a <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	68da      	ldr	r2, [r3, #12]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c96:	609a      	str	r2, [r3, #8]
 8009c98:	e006      	b.n	8009ca8 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	68da      	ldr	r2, [r3, #12]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009ca6:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d104      	bne.n	8009cba <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	6859      	ldr	r1, [r3, #4]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	4b26      	ldr	r3, [pc, #152]	; (8009d60 <HAL_SMBUS_Init+0x16c>)
 8009cc6:	430b      	orrs	r3, r1
 8009cc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	695a      	ldr	r2, [r3, #20]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	699b      	ldr	r3, [r3, #24]
 8009cd2:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	69db      	ldr	r3, [r3, #28]
 8009cda:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	430a      	orrs	r2, r1
 8009ce2:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6a1a      	ldr	r2, [r3, #32]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cec:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8009cf2:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf8:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8009d04:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8009d06:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d10:	d110      	bne.n	8009d34 <HAL_SMBUS_Init+0x140>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d004      	beq.n	8009d24 <HAL_SMBUS_Init+0x130>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8009d1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d22:	d107      	bne.n	8009d34 <HAL_SMBUS_Init+0x140>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009d32:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f042 0201 	orr.w	r2, r2, #1
 8009d42:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3708      	adds	r7, #8
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	02008000 	.word	0x02008000

08009d64 <HAL_SMBUS_ConfigDigitalFilter>:
  *                the configuration information for the specified SMBUS.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_ConfigDigitalFilter(SMBUS_HandleTypeDef *hsmbus, uint32_t DigitalFilter)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_DIGITAL_FILTER(DigitalFilter));

  if (hsmbus->State == HAL_SMBUS_STATE_READY)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d137      	bne.n	8009de6 <HAL_SMBUS_ConfigDigitalFilter+0x82>
  {
    /* Process Locked */
    __HAL_LOCK(hsmbus);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d101      	bne.n	8009d84 <HAL_SMBUS_ConfigDigitalFilter+0x20>
 8009d80:	2302      	movs	r3, #2
 8009d82:	e031      	b.n	8009de8 <HAL_SMBUS_ConfigDigitalFilter+0x84>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2202      	movs	r2, #2
 8009d90:	649a      	str	r2, [r3, #72]	; 0x48

    /* Disable the selected SMBUS peripheral */
    __HAL_SMBUS_DISABLE(hsmbus);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f022 0201 	bic.w	r2, r2, #1
 8009da0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hsmbus->Instance->CR1;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	60fb      	str	r3, [r7, #12]

    /* Reset I2C DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009db0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << I2C_CR1_DNF_Pos;
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	021b      	lsls	r3, r3, #8
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hsmbus->Instance->CR1 = tmpreg;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	601a      	str	r2, [r3, #0]

    __HAL_SMBUS_ENABLE(hsmbus);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f042 0201 	orr.w	r2, r2, #1
 8009dd2:	601a      	str	r2, [r3, #0]

    hsmbus->State = HAL_SMBUS_STATE_READY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	649a      	str	r2, [r3, #72]	; 0x48

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    return HAL_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	e000      	b.n	8009de8 <HAL_SMBUS_ConfigDigitalFilter+0x84>
  }
  else
  {
    return HAL_BUSY;
 8009de6:	2302      	movs	r3, #2
  }
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e0f1      	b.n	8009fea <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a78      	ldr	r2, [pc, #480]	; (8009ff4 <HAL_SPI_Init+0x200>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d00f      	beq.n	8009e36 <HAL_SPI_Init+0x42>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a77      	ldr	r2, [pc, #476]	; (8009ff8 <HAL_SPI_Init+0x204>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d00a      	beq.n	8009e36 <HAL_SPI_Init+0x42>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a75      	ldr	r2, [pc, #468]	; (8009ffc <HAL_SPI_Init+0x208>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d005      	beq.n	8009e36 <HAL_SPI_Init+0x42>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	2b0f      	cmp	r3, #15
 8009e30:	d901      	bls.n	8009e36 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	e0d9      	b.n	8009fea <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fc9c 	bl	800a774 <SPI_GetPacketSize>
 8009e3c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a6c      	ldr	r2, [pc, #432]	; (8009ff4 <HAL_SPI_Init+0x200>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d00c      	beq.n	8009e62 <HAL_SPI_Init+0x6e>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a6a      	ldr	r2, [pc, #424]	; (8009ff8 <HAL_SPI_Init+0x204>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d007      	beq.n	8009e62 <HAL_SPI_Init+0x6e>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a69      	ldr	r2, [pc, #420]	; (8009ffc <HAL_SPI_Init+0x208>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d002      	beq.n	8009e62 <HAL_SPI_Init+0x6e>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2b08      	cmp	r3, #8
 8009e60:	d811      	bhi.n	8009e86 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e66:	4a63      	ldr	r2, [pc, #396]	; (8009ff4 <HAL_SPI_Init+0x200>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d009      	beq.n	8009e80 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a61      	ldr	r2, [pc, #388]	; (8009ff8 <HAL_SPI_Init+0x204>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d004      	beq.n	8009e80 <HAL_SPI_Init+0x8c>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a60      	ldr	r2, [pc, #384]	; (8009ffc <HAL_SPI_Init+0x208>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d104      	bne.n	8009e8a <HAL_SPI_Init+0x96>
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2b10      	cmp	r3, #16
 8009e84:	d901      	bls.n	8009e8a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	e0af      	b.n	8009fea <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d106      	bne.n	8009ea4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7f9 fce4 	bl	800386c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f022 0201 	bic.w	r2, r2, #1
 8009eba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009ec6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ed0:	d119      	bne.n	8009f06 <HAL_SPI_Init+0x112>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009eda:	d103      	bne.n	8009ee4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d008      	beq.n	8009ef6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10c      	bne.n	8009f06 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ef4:	d107      	bne.n	8009f06 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009f04:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	69da      	ldr	r2, [r3, #28]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f0e:	431a      	orrs	r2, r3
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	431a      	orrs	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f18:	ea42 0103 	orr.w	r1, r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	68da      	ldr	r2, [r3, #12]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	430a      	orrs	r2, r1
 8009f26:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f30:	431a      	orrs	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f36:	431a      	orrs	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	699b      	ldr	r3, [r3, #24]
 8009f3c:	431a      	orrs	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	431a      	orrs	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	431a      	orrs	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a1b      	ldr	r3, [r3, #32]
 8009f4e:	431a      	orrs	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	431a      	orrs	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f5a:	431a      	orrs	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	431a      	orrs	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f66:	ea42 0103 	orr.w	r1, r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	430a      	orrs	r2, r1
 8009f74:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d113      	bne.n	8009fa6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f90:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009fa4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f022 0201 	bic.w	r2, r2, #1
 8009fb4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00a      	beq.n	8009fd8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	430a      	orrs	r2, r1
 8009fd6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	40013000 	.word	0x40013000
 8009ff8:	40003800 	.word	0x40003800
 8009ffc:	40003c00 	.word	0x40003c00

0800a000 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b08e      	sub	sp, #56	; 0x38
 800a004:	af02      	add	r7, sp, #8
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
 800a00c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a00e:	2300      	movs	r3, #0
 800a010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	3320      	adds	r3, #32
 800a01a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	3330      	adds	r3, #48	; 0x30
 800a022:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d101      	bne.n	800a032 <HAL_SPI_TransmitReceive+0x32>
 800a02e:	2302      	movs	r3, #2
 800a030:	e2ce      	b.n	800a5d0 <HAL_SPI_TransmitReceive+0x5d0>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a03a:	f7fa f99d 	bl	8004378 <HAL_GetTick>
 800a03e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800a040:	887b      	ldrh	r3, [r7, #2]
 800a042:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800a044:	887b      	ldrh	r3, [r7, #2]
 800a046:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a04e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a056:	7efb      	ldrb	r3, [r7, #27]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d014      	beq.n	800a086 <HAL_SPI_TransmitReceive+0x86>
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a062:	d106      	bne.n	800a072 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d102      	bne.n	800a072 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800a06c:	7efb      	ldrb	r3, [r7, #27]
 800a06e:	2b04      	cmp	r3, #4
 800a070:	d009      	beq.n	800a086 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800a072:	2302      	movs	r3, #2
 800a074:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a080:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a084:	e2a4      	b.n	800a5d0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d005      	beq.n	800a098 <HAL_SPI_TransmitReceive+0x98>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d002      	beq.n	800a098 <HAL_SPI_TransmitReceive+0x98>
 800a092:	887b      	ldrh	r3, [r7, #2]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d109      	bne.n	800a0ac <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a0a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a0aa:	e291      	b.n	800a5d0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b04      	cmp	r3, #4
 800a0b6:	d003      	beq.n	800a0c0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2205      	movs	r2, #5
 800a0bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	887a      	ldrh	r2, [r7, #2]
 800a0d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	887a      	ldrh	r2, [r7, #2]
 800a0da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	68ba      	ldr	r2, [r7, #8]
 800a0e2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	887a      	ldrh	r2, [r7, #2]
 800a0e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	887a      	ldrh	r2, [r7, #2]
 800a0f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	685a      	ldr	r2, [r3, #4]
 800a106:	4b9f      	ldr	r3, [pc, #636]	; (800a384 <HAL_SPI_TransmitReceive+0x384>)
 800a108:	4013      	ands	r3, r2
 800a10a:	8879      	ldrh	r1, [r7, #2]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	6812      	ldr	r2, [r2, #0]
 800a110:	430b      	orrs	r3, r1
 800a112:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f042 0201 	orr.w	r2, r2, #1
 800a122:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a12c:	d107      	bne.n	800a13e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a13c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	2b0f      	cmp	r3, #15
 800a144:	d970      	bls.n	800a228 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a146:	e068      	b.n	800a21a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	f003 0302 	and.w	r3, r3, #2
 800a152:	2b02      	cmp	r3, #2
 800a154:	d11a      	bne.n	800a18c <HAL_SPI_TransmitReceive+0x18c>
 800a156:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d017      	beq.n	800a18c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	6812      	ldr	r2, [r2, #0]
 800a166:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a16c:	1d1a      	adds	r2, r3, #4
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a178:	b29b      	uxth	r3, r3
 800a17a:	3b01      	subs	r3, #1
 800a17c:	b29a      	uxth	r2, r3
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a18a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	695a      	ldr	r2, [r3, #20]
 800a192:	f248 0308 	movw	r3, #32776	; 0x8008
 800a196:	4013      	ands	r3, r2
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d01a      	beq.n	800a1d2 <HAL_SPI_TransmitReceive+0x1d2>
 800a19c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d017      	beq.n	800a1d2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a1ac:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1b2:	1d1a      	adds	r2, r3, #4
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a1d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1d2:	f7fa f8d1 	bl	8004378 <HAL_GetTick>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	1ad3      	subs	r3, r2, r3
 800a1dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d803      	bhi.n	800a1ea <HAL_SPI_TransmitReceive+0x1ea>
 800a1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e8:	d102      	bne.n	800a1f0 <HAL_SPI_TransmitReceive+0x1f0>
 800a1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d114      	bne.n	800a21a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f000 f9f1 	bl	800a5d8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a204:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2201      	movs	r2, #1
 800a212:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800a216:	2303      	movs	r3, #3
 800a218:	e1da      	b.n	800a5d0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a21a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d193      	bne.n	800a148 <HAL_SPI_TransmitReceive+0x148>
 800a220:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a222:	2b00      	cmp	r3, #0
 800a224:	d190      	bne.n	800a148 <HAL_SPI_TransmitReceive+0x148>
 800a226:	e1ac      	b.n	800a582 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	2b07      	cmp	r3, #7
 800a22e:	f240 81a0 	bls.w	800a572 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a232:	e0a9      	b.n	800a388 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	695b      	ldr	r3, [r3, #20]
 800a23a:	f003 0302 	and.w	r3, r3, #2
 800a23e:	2b02      	cmp	r3, #2
 800a240:	d139      	bne.n	800a2b6 <HAL_SPI_TransmitReceive+0x2b6>
 800a242:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a244:	2b00      	cmp	r3, #0
 800a246:	d036      	beq.n	800a2b6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a248:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d91c      	bls.n	800a288 <HAL_SPI_TransmitReceive+0x288>
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a252:	2b00      	cmp	r3, #0
 800a254:	d018      	beq.n	800a288 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	6812      	ldr	r2, [r2, #0]
 800a260:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a266:	1d1a      	adds	r2, r3, #4
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a272:	b29b      	uxth	r3, r3
 800a274:	3b02      	subs	r3, #2
 800a276:	b29a      	uxth	r2, r3
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a284:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a286:	e016      	b.n	800a2b6 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a28c:	881a      	ldrh	r2, [r3, #0]
 800a28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a290:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a296:	1c9a      	adds	r2, r3, #2
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	695b      	ldr	r3, [r3, #20]
 800a2bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d03a      	beq.n	800a33a <HAL_SPI_TransmitReceive+0x33a>
 800a2c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d037      	beq.n	800a33a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	695b      	ldr	r3, [r3, #20]
 800a2d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d018      	beq.n	800a30a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a2e2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2e8:	1d1a      	adds	r2, r3, #4
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	3b02      	subs	r3, #2
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a306:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a308:	e017      	b.n	800a33a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a30e:	6a3a      	ldr	r2, [r7, #32]
 800a310:	8812      	ldrh	r2, [r2, #0]
 800a312:	b292      	uxth	r2, r2
 800a314:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a31a:	1c9a      	adds	r2, r3, #2
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a326:	b29b      	uxth	r3, r3
 800a328:	3b01      	subs	r3, #1
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a338:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a33a:	f7fa f81d 	bl	8004378 <HAL_GetTick>
 800a33e:	4602      	mov	r2, r0
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	1ad3      	subs	r3, r2, r3
 800a344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a346:	429a      	cmp	r2, r3
 800a348:	d803      	bhi.n	800a352 <HAL_SPI_TransmitReceive+0x352>
 800a34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a350:	d102      	bne.n	800a358 <HAL_SPI_TransmitReceive+0x358>
 800a352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a354:	2b00      	cmp	r3, #0
 800a356:	d117      	bne.n	800a388 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f000 f93d 	bl	800a5d8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2200      	movs	r2, #0
 800a362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a36c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800a37e:	2303      	movs	r3, #3
 800a380:	e126      	b.n	800a5d0 <HAL_SPI_TransmitReceive+0x5d0>
 800a382:	bf00      	nop
 800a384:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a388:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f47f af52 	bne.w	800a234 <HAL_SPI_TransmitReceive+0x234>
 800a390:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a392:	2b00      	cmp	r3, #0
 800a394:	f47f af4e 	bne.w	800a234 <HAL_SPI_TransmitReceive+0x234>
 800a398:	e0f3      	b.n	800a582 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	695b      	ldr	r3, [r3, #20]
 800a3a0:	f003 0302 	and.w	r3, r3, #2
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d15a      	bne.n	800a45e <HAL_SPI_TransmitReceive+0x45e>
 800a3a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d057      	beq.n	800a45e <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a3ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d91c      	bls.n	800a3ee <HAL_SPI_TransmitReceive+0x3ee>
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3b8:	2b40      	cmp	r3, #64	; 0x40
 800a3ba:	d918      	bls.n	800a3ee <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	6812      	ldr	r2, [r2, #0]
 800a3c6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3cc:	1d1a      	adds	r2, r3, #4
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	3b04      	subs	r3, #4
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a3ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a3ec:	e037      	b.n	800a45e <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a3ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d91b      	bls.n	800a42c <HAL_SPI_TransmitReceive+0x42c>
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d017      	beq.n	800a42c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a400:	881a      	ldrh	r2, [r3, #0]
 800a402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a404:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a40a:	1c9a      	adds	r2, r3, #2
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a416:	b29b      	uxth	r3, r3
 800a418:	3b02      	subs	r3, #2
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a428:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a42a:	e018      	b.n	800a45e <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	3320      	adds	r3, #32
 800a436:	7812      	ldrb	r2, [r2, #0]
 800a438:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a43e:	1c5a      	adds	r2, r3, #1
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	3b01      	subs	r3, #1
 800a44e:	b29a      	uxth	r2, r3
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a45c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d05e      	beq.n	800a52a <HAL_SPI_TransmitReceive+0x52a>
 800a46c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d05b      	beq.n	800a52a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	695b      	ldr	r3, [r3, #20]
 800a478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d018      	beq.n	800a4b2 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a488:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a48a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a490:	1d1a      	adds	r2, r3, #4
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	3b04      	subs	r3, #4
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a4ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a4b0:	e03b      	b.n	800a52a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	695b      	ldr	r3, [r3, #20]
 800a4b8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800a4bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4c0:	d918      	bls.n	800a4f4 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4c6:	6a3a      	ldr	r2, [r7, #32]
 800a4c8:	8812      	ldrh	r2, [r2, #0]
 800a4ca:	b292      	uxth	r2, r2
 800a4cc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4d2:	1c9a      	adds	r2, r3, #2
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	3b02      	subs	r3, #2
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a4f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a4f2:	e01a      	b.n	800a52a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a500:	7812      	ldrb	r2, [r2, #0]
 800a502:	b2d2      	uxtb	r2, r2
 800a504:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a50a:	1c5a      	adds	r2, r3, #1
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a516:	b29b      	uxth	r3, r3
 800a518:	3b01      	subs	r3, #1
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a528:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a52a:	f7f9 ff25 	bl	8004378 <HAL_GetTick>
 800a52e:	4602      	mov	r2, r0
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	1ad3      	subs	r3, r2, r3
 800a534:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a536:	429a      	cmp	r2, r3
 800a538:	d803      	bhi.n	800a542 <HAL_SPI_TransmitReceive+0x542>
 800a53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a540:	d102      	bne.n	800a548 <HAL_SPI_TransmitReceive+0x548>
 800a542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a544:	2b00      	cmp	r3, #0
 800a546:	d114      	bne.n	800a572 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f000 f845 	bl	800a5d8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2200      	movs	r2, #0
 800a552:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a55c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2201      	movs	r2, #1
 800a56a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800a56e:	2303      	movs	r3, #3
 800a570:	e02e      	b.n	800a5d0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a572:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a574:	2b00      	cmp	r3, #0
 800a576:	f47f af10 	bne.w	800a39a <HAL_SPI_TransmitReceive+0x39a>
 800a57a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f47f af0c 	bne.w	800a39a <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	2200      	movs	r2, #0
 800a58a:	2108      	movs	r1, #8
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f000 f8c3 	bl	800a718 <SPI_WaitOnFlagUntilTimeout>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d007      	beq.n	800a5a8 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a59e:	f043 0220 	orr.w	r2, r3, #32
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	f000 f815 	bl	800a5d8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d001      	beq.n	800a5cc <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e001      	b.n	800a5d0 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800a5cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3730      	adds	r7, #48	; 0x30
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	695b      	ldr	r3, [r3, #20]
 800a5e6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	699a      	ldr	r2, [r3, #24]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f042 0208 	orr.w	r2, r2, #8
 800a5f6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	699a      	ldr	r2, [r3, #24]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f042 0210 	orr.w	r2, r2, #16
 800a606:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f022 0201 	bic.w	r2, r2, #1
 800a616:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	6919      	ldr	r1, [r3, #16]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	4b3c      	ldr	r3, [pc, #240]	; (800a714 <SPI_CloseTransfer+0x13c>)
 800a624:	400b      	ands	r3, r1
 800a626:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	689a      	ldr	r2, [r3, #8]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a636:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b04      	cmp	r3, #4
 800a642:	d014      	beq.n	800a66e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f003 0320 	and.w	r3, r3, #32
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00f      	beq.n	800a66e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a654:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	699a      	ldr	r2, [r3, #24]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f042 0220 	orr.w	r2, r2, #32
 800a66c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a674:	b2db      	uxtb	r3, r3
 800a676:	2b03      	cmp	r3, #3
 800a678:	d014      	beq.n	800a6a4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00f      	beq.n	800a6a4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a68a:	f043 0204 	orr.w	r2, r3, #4
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	699a      	ldr	r2, [r3, #24]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6a2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00f      	beq.n	800a6ce <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6b4:	f043 0201 	orr.w	r2, r3, #1
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	699a      	ldr	r2, [r3, #24]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6cc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d00f      	beq.n	800a6f8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6de:	f043 0208 	orr.w	r2, r3, #8
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	699a      	ldr	r2, [r3, #24]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a6f6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a708:	bf00      	nop
 800a70a:	3714      	adds	r7, #20
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr
 800a714:	fffffc90 	.word	0xfffffc90

0800a718 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	603b      	str	r3, [r7, #0]
 800a724:	4613      	mov	r3, r2
 800a726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a728:	e010      	b.n	800a74c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a72a:	f7f9 fe25 	bl	8004378 <HAL_GetTick>
 800a72e:	4602      	mov	r2, r0
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	1ad3      	subs	r3, r2, r3
 800a734:	69ba      	ldr	r2, [r7, #24]
 800a736:	429a      	cmp	r2, r3
 800a738:	d803      	bhi.n	800a742 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a740:	d102      	bne.n	800a748 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d101      	bne.n	800a74c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a748:	2303      	movs	r3, #3
 800a74a:	e00f      	b.n	800a76c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	695a      	ldr	r2, [r3, #20]
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	4013      	ands	r3, r2
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	429a      	cmp	r2, r3
 800a75a:	bf0c      	ite	eq
 800a75c:	2301      	moveq	r3, #1
 800a75e:	2300      	movne	r3, #0
 800a760:	b2db      	uxtb	r3, r3
 800a762:	461a      	mov	r2, r3
 800a764:	79fb      	ldrb	r3, [r7, #7]
 800a766:	429a      	cmp	r2, r3
 800a768:	d0df      	beq.n	800a72a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a780:	095b      	lsrs	r3, r3, #5
 800a782:	3301      	adds	r3, #1
 800a784:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	3301      	adds	r3, #1
 800a78c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	3307      	adds	r3, #7
 800a792:	08db      	lsrs	r3, r3, #3
 800a794:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	fb02 f303 	mul.w	r3, r2, r3
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3714      	adds	r7, #20
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b082      	sub	sp, #8
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d101      	bne.n	800a7bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e049      	b.n	800a850 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d106      	bne.n	800a7d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 f841 	bl	800a858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2202      	movs	r2, #2
 800a7da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	3304      	adds	r3, #4
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	4610      	mov	r0, r2
 800a7ea:	f000 fd65 	bl	800b2b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2201      	movs	r2, #1
 800a80a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2201      	movs	r2, #1
 800a812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2201      	movs	r2, #1
 800a81a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2201      	movs	r2, #1
 800a822:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2201      	movs	r2, #1
 800a82a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2201      	movs	r2, #1
 800a832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2201      	movs	r2, #1
 800a83a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2201      	movs	r2, #1
 800a842:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a860:	bf00      	nop
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr

0800a86c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d001      	beq.n	800a884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	e054      	b.n	800a92e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2202      	movs	r2, #2
 800a888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68da      	ldr	r2, [r3, #12]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f042 0201 	orr.w	r2, r2, #1
 800a89a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a26      	ldr	r2, [pc, #152]	; (800a93c <HAL_TIM_Base_Start_IT+0xd0>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d022      	beq.n	800a8ec <HAL_TIM_Base_Start_IT+0x80>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ae:	d01d      	beq.n	800a8ec <HAL_TIM_Base_Start_IT+0x80>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a22      	ldr	r2, [pc, #136]	; (800a940 <HAL_TIM_Base_Start_IT+0xd4>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d018      	beq.n	800a8ec <HAL_TIM_Base_Start_IT+0x80>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a21      	ldr	r2, [pc, #132]	; (800a944 <HAL_TIM_Base_Start_IT+0xd8>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d013      	beq.n	800a8ec <HAL_TIM_Base_Start_IT+0x80>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a1f      	ldr	r2, [pc, #124]	; (800a948 <HAL_TIM_Base_Start_IT+0xdc>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d00e      	beq.n	800a8ec <HAL_TIM_Base_Start_IT+0x80>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a1e      	ldr	r2, [pc, #120]	; (800a94c <HAL_TIM_Base_Start_IT+0xe0>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d009      	beq.n	800a8ec <HAL_TIM_Base_Start_IT+0x80>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a1c      	ldr	r2, [pc, #112]	; (800a950 <HAL_TIM_Base_Start_IT+0xe4>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d004      	beq.n	800a8ec <HAL_TIM_Base_Start_IT+0x80>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a1b      	ldr	r2, [pc, #108]	; (800a954 <HAL_TIM_Base_Start_IT+0xe8>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d115      	bne.n	800a918 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	689a      	ldr	r2, [r3, #8]
 800a8f2:	4b19      	ldr	r3, [pc, #100]	; (800a958 <HAL_TIM_Base_Start_IT+0xec>)
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2b06      	cmp	r3, #6
 800a8fc:	d015      	beq.n	800a92a <HAL_TIM_Base_Start_IT+0xbe>
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a904:	d011      	beq.n	800a92a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f042 0201 	orr.w	r2, r2, #1
 800a914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a916:	e008      	b.n	800a92a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f042 0201 	orr.w	r2, r2, #1
 800a926:	601a      	str	r2, [r3, #0]
 800a928:	e000      	b.n	800a92c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a92a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3714      	adds	r7, #20
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	40010000 	.word	0x40010000
 800a940:	40000400 	.word	0x40000400
 800a944:	40000800 	.word	0x40000800
 800a948:	40000c00 	.word	0x40000c00
 800a94c:	40010400 	.word	0x40010400
 800a950:	40001800 	.word	0x40001800
 800a954:	40014000 	.word	0x40014000
 800a958:	00010007 	.word	0x00010007

0800a95c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d101      	bne.n	800a96e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e049      	b.n	800aa02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b00      	cmp	r3, #0
 800a978:	d106      	bne.n	800a988 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f841 	bl	800aa0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2202      	movs	r2, #2
 800a98c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	3304      	adds	r3, #4
 800a998:	4619      	mov	r1, r3
 800a99a:	4610      	mov	r0, r2
 800a99c:	f000 fc8c 	bl	800b2b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa00:	2300      	movs	r3, #0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3708      	adds	r7, #8
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aa0a:	b480      	push	{r7}
 800aa0c:	b083      	sub	sp, #12
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800aa12:	bf00      	nop
 800aa14:	370c      	adds	r7, #12
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
	...

0800aa20 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	6839      	ldr	r1, [r7, #0]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 ffb0 	bl	800b998 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a3e      	ldr	r2, [pc, #248]	; (800ab38 <HAL_TIM_PWM_Stop+0x118>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d013      	beq.n	800aa6a <HAL_TIM_PWM_Stop+0x4a>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a3d      	ldr	r2, [pc, #244]	; (800ab3c <HAL_TIM_PWM_Stop+0x11c>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d00e      	beq.n	800aa6a <HAL_TIM_PWM_Stop+0x4a>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a3b      	ldr	r2, [pc, #236]	; (800ab40 <HAL_TIM_PWM_Stop+0x120>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d009      	beq.n	800aa6a <HAL_TIM_PWM_Stop+0x4a>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a3a      	ldr	r2, [pc, #232]	; (800ab44 <HAL_TIM_PWM_Stop+0x124>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d004      	beq.n	800aa6a <HAL_TIM_PWM_Stop+0x4a>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a38      	ldr	r2, [pc, #224]	; (800ab48 <HAL_TIM_PWM_Stop+0x128>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d101      	bne.n	800aa6e <HAL_TIM_PWM_Stop+0x4e>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e000      	b.n	800aa70 <HAL_TIM_PWM_Stop+0x50>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d017      	beq.n	800aaa4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	6a1a      	ldr	r2, [r3, #32]
 800aa7a:	f241 1311 	movw	r3, #4369	; 0x1111
 800aa7e:	4013      	ands	r3, r2
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10f      	bne.n	800aaa4 <HAL_TIM_PWM_Stop+0x84>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	6a1a      	ldr	r2, [r3, #32]
 800aa8a:	f240 4344 	movw	r3, #1092	; 0x444
 800aa8e:	4013      	ands	r3, r2
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d107      	bne.n	800aaa4 <HAL_TIM_PWM_Stop+0x84>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aaa2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	6a1a      	ldr	r2, [r3, #32]
 800aaaa:	f241 1311 	movw	r3, #4369	; 0x1111
 800aaae:	4013      	ands	r3, r2
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10f      	bne.n	800aad4 <HAL_TIM_PWM_Stop+0xb4>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	6a1a      	ldr	r2, [r3, #32]
 800aaba:	f240 4344 	movw	r3, #1092	; 0x444
 800aabe:	4013      	ands	r3, r2
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d107      	bne.n	800aad4 <HAL_TIM_PWM_Stop+0xb4>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f022 0201 	bic.w	r2, r2, #1
 800aad2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d104      	bne.n	800aae4 <HAL_TIM_PWM_Stop+0xc4>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aae2:	e023      	b.n	800ab2c <HAL_TIM_PWM_Stop+0x10c>
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	2b04      	cmp	r3, #4
 800aae8:	d104      	bne.n	800aaf4 <HAL_TIM_PWM_Stop+0xd4>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aaf2:	e01b      	b.n	800ab2c <HAL_TIM_PWM_Stop+0x10c>
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	2b08      	cmp	r3, #8
 800aaf8:	d104      	bne.n	800ab04 <HAL_TIM_PWM_Stop+0xe4>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab02:	e013      	b.n	800ab2c <HAL_TIM_PWM_Stop+0x10c>
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	2b0c      	cmp	r3, #12
 800ab08:	d104      	bne.n	800ab14 <HAL_TIM_PWM_Stop+0xf4>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab12:	e00b      	b.n	800ab2c <HAL_TIM_PWM_Stop+0x10c>
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	2b10      	cmp	r3, #16
 800ab18:	d104      	bne.n	800ab24 <HAL_TIM_PWM_Stop+0x104>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab22:	e003      	b.n	800ab2c <HAL_TIM_PWM_Stop+0x10c>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3708      	adds	r7, #8
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	40010000 	.word	0x40010000
 800ab3c:	40010400 	.word	0x40010400
 800ab40:	40014000 	.word	0x40014000
 800ab44:	40014400 	.word	0x40014400
 800ab48:	40014800 	.word	0x40014800

0800ab4c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab56:	2300      	movs	r3, #0
 800ab58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d109      	bne.n	800ab74 <HAL_TIM_PWM_Start_IT+0x28>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	bf14      	ite	ne
 800ab6c:	2301      	movne	r3, #1
 800ab6e:	2300      	moveq	r3, #0
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	e03c      	b.n	800abee <HAL_TIM_PWM_Start_IT+0xa2>
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	2b04      	cmp	r3, #4
 800ab78:	d109      	bne.n	800ab8e <HAL_TIM_PWM_Start_IT+0x42>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	bf14      	ite	ne
 800ab86:	2301      	movne	r3, #1
 800ab88:	2300      	moveq	r3, #0
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	e02f      	b.n	800abee <HAL_TIM_PWM_Start_IT+0xa2>
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	2b08      	cmp	r3, #8
 800ab92:	d109      	bne.n	800aba8 <HAL_TIM_PWM_Start_IT+0x5c>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	bf14      	ite	ne
 800aba0:	2301      	movne	r3, #1
 800aba2:	2300      	moveq	r3, #0
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	e022      	b.n	800abee <HAL_TIM_PWM_Start_IT+0xa2>
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	2b0c      	cmp	r3, #12
 800abac:	d109      	bne.n	800abc2 <HAL_TIM_PWM_Start_IT+0x76>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	bf14      	ite	ne
 800abba:	2301      	movne	r3, #1
 800abbc:	2300      	moveq	r3, #0
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	e015      	b.n	800abee <HAL_TIM_PWM_Start_IT+0xa2>
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	2b10      	cmp	r3, #16
 800abc6:	d109      	bne.n	800abdc <HAL_TIM_PWM_Start_IT+0x90>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	bf14      	ite	ne
 800abd4:	2301      	movne	r3, #1
 800abd6:	2300      	moveq	r3, #0
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	e008      	b.n	800abee <HAL_TIM_PWM_Start_IT+0xa2>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	bf14      	ite	ne
 800abe8:	2301      	movne	r3, #1
 800abea:	2300      	moveq	r3, #0
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d001      	beq.n	800abf6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	e0ec      	b.n	800add0 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d104      	bne.n	800ac06 <HAL_TIM_PWM_Start_IT+0xba>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2202      	movs	r2, #2
 800ac00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac04:	e023      	b.n	800ac4e <HAL_TIM_PWM_Start_IT+0x102>
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	2b04      	cmp	r3, #4
 800ac0a:	d104      	bne.n	800ac16 <HAL_TIM_PWM_Start_IT+0xca>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2202      	movs	r2, #2
 800ac10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac14:	e01b      	b.n	800ac4e <HAL_TIM_PWM_Start_IT+0x102>
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	2b08      	cmp	r3, #8
 800ac1a:	d104      	bne.n	800ac26 <HAL_TIM_PWM_Start_IT+0xda>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2202      	movs	r2, #2
 800ac20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac24:	e013      	b.n	800ac4e <HAL_TIM_PWM_Start_IT+0x102>
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2b0c      	cmp	r3, #12
 800ac2a:	d104      	bne.n	800ac36 <HAL_TIM_PWM_Start_IT+0xea>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2202      	movs	r2, #2
 800ac30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac34:	e00b      	b.n	800ac4e <HAL_TIM_PWM_Start_IT+0x102>
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	2b10      	cmp	r3, #16
 800ac3a:	d104      	bne.n	800ac46 <HAL_TIM_PWM_Start_IT+0xfa>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2202      	movs	r2, #2
 800ac40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac44:	e003      	b.n	800ac4e <HAL_TIM_PWM_Start_IT+0x102>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2202      	movs	r2, #2
 800ac4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	2b0c      	cmp	r3, #12
 800ac52:	d841      	bhi.n	800acd8 <HAL_TIM_PWM_Start_IT+0x18c>
 800ac54:	a201      	add	r2, pc, #4	; (adr r2, 800ac5c <HAL_TIM_PWM_Start_IT+0x110>)
 800ac56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5a:	bf00      	nop
 800ac5c:	0800ac91 	.word	0x0800ac91
 800ac60:	0800acd9 	.word	0x0800acd9
 800ac64:	0800acd9 	.word	0x0800acd9
 800ac68:	0800acd9 	.word	0x0800acd9
 800ac6c:	0800aca3 	.word	0x0800aca3
 800ac70:	0800acd9 	.word	0x0800acd9
 800ac74:	0800acd9 	.word	0x0800acd9
 800ac78:	0800acd9 	.word	0x0800acd9
 800ac7c:	0800acb5 	.word	0x0800acb5
 800ac80:	0800acd9 	.word	0x0800acd9
 800ac84:	0800acd9 	.word	0x0800acd9
 800ac88:	0800acd9 	.word	0x0800acd9
 800ac8c:	0800acc7 	.word	0x0800acc7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	68da      	ldr	r2, [r3, #12]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f042 0202 	orr.w	r2, r2, #2
 800ac9e:	60da      	str	r2, [r3, #12]
      break;
 800aca0:	e01d      	b.n	800acde <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68da      	ldr	r2, [r3, #12]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f042 0204 	orr.w	r2, r2, #4
 800acb0:	60da      	str	r2, [r3, #12]
      break;
 800acb2:	e014      	b.n	800acde <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	68da      	ldr	r2, [r3, #12]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f042 0208 	orr.w	r2, r2, #8
 800acc2:	60da      	str	r2, [r3, #12]
      break;
 800acc4:	e00b      	b.n	800acde <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68da      	ldr	r2, [r3, #12]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f042 0210 	orr.w	r2, r2, #16
 800acd4:	60da      	str	r2, [r3, #12]
      break;
 800acd6:	e002      	b.n	800acde <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	73fb      	strb	r3, [r7, #15]
      break;
 800acdc:	bf00      	nop
  }

  if (status == HAL_OK)
 800acde:	7bfb      	ldrb	r3, [r7, #15]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d174      	bne.n	800adce <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	2201      	movs	r2, #1
 800acea:	6839      	ldr	r1, [r7, #0]
 800acec:	4618      	mov	r0, r3
 800acee:	f000 fe53 	bl	800b998 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a38      	ldr	r2, [pc, #224]	; (800add8 <HAL_TIM_PWM_Start_IT+0x28c>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d013      	beq.n	800ad24 <HAL_TIM_PWM_Start_IT+0x1d8>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a36      	ldr	r2, [pc, #216]	; (800addc <HAL_TIM_PWM_Start_IT+0x290>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d00e      	beq.n	800ad24 <HAL_TIM_PWM_Start_IT+0x1d8>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a35      	ldr	r2, [pc, #212]	; (800ade0 <HAL_TIM_PWM_Start_IT+0x294>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d009      	beq.n	800ad24 <HAL_TIM_PWM_Start_IT+0x1d8>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a33      	ldr	r2, [pc, #204]	; (800ade4 <HAL_TIM_PWM_Start_IT+0x298>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d004      	beq.n	800ad24 <HAL_TIM_PWM_Start_IT+0x1d8>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a32      	ldr	r2, [pc, #200]	; (800ade8 <HAL_TIM_PWM_Start_IT+0x29c>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d101      	bne.n	800ad28 <HAL_TIM_PWM_Start_IT+0x1dc>
 800ad24:	2301      	movs	r3, #1
 800ad26:	e000      	b.n	800ad2a <HAL_TIM_PWM_Start_IT+0x1de>
 800ad28:	2300      	movs	r3, #0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d007      	beq.n	800ad3e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a25      	ldr	r2, [pc, #148]	; (800add8 <HAL_TIM_PWM_Start_IT+0x28c>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d022      	beq.n	800ad8e <HAL_TIM_PWM_Start_IT+0x242>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad50:	d01d      	beq.n	800ad8e <HAL_TIM_PWM_Start_IT+0x242>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a25      	ldr	r2, [pc, #148]	; (800adec <HAL_TIM_PWM_Start_IT+0x2a0>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d018      	beq.n	800ad8e <HAL_TIM_PWM_Start_IT+0x242>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a23      	ldr	r2, [pc, #140]	; (800adf0 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d013      	beq.n	800ad8e <HAL_TIM_PWM_Start_IT+0x242>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a22      	ldr	r2, [pc, #136]	; (800adf4 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d00e      	beq.n	800ad8e <HAL_TIM_PWM_Start_IT+0x242>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a19      	ldr	r2, [pc, #100]	; (800addc <HAL_TIM_PWM_Start_IT+0x290>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d009      	beq.n	800ad8e <HAL_TIM_PWM_Start_IT+0x242>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a1e      	ldr	r2, [pc, #120]	; (800adf8 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d004      	beq.n	800ad8e <HAL_TIM_PWM_Start_IT+0x242>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a15      	ldr	r2, [pc, #84]	; (800ade0 <HAL_TIM_PWM_Start_IT+0x294>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d115      	bne.n	800adba <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	689a      	ldr	r2, [r3, #8]
 800ad94:	4b19      	ldr	r3, [pc, #100]	; (800adfc <HAL_TIM_PWM_Start_IT+0x2b0>)
 800ad96:	4013      	ands	r3, r2
 800ad98:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	2b06      	cmp	r3, #6
 800ad9e:	d015      	beq.n	800adcc <HAL_TIM_PWM_Start_IT+0x280>
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ada6:	d011      	beq.n	800adcc <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f042 0201 	orr.w	r2, r2, #1
 800adb6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adb8:	e008      	b.n	800adcc <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f042 0201 	orr.w	r2, r2, #1
 800adc8:	601a      	str	r2, [r3, #0]
 800adca:	e000      	b.n	800adce <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adcc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800adce:	7bfb      	ldrb	r3, [r7, #15]
}
 800add0:	4618      	mov	r0, r3
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	40010000 	.word	0x40010000
 800addc:	40010400 	.word	0x40010400
 800ade0:	40014000 	.word	0x40014000
 800ade4:	40014400 	.word	0x40014400
 800ade8:	40014800 	.word	0x40014800
 800adec:	40000400 	.word	0x40000400
 800adf0:	40000800 	.word	0x40000800
 800adf4:	40000c00 	.word	0x40000c00
 800adf8:	40001800 	.word	0x40001800
 800adfc:	00010007 	.word	0x00010007

0800ae00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	691b      	ldr	r3, [r3, #16]
 800ae0e:	f003 0302 	and.w	r3, r3, #2
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d122      	bne.n	800ae5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	68db      	ldr	r3, [r3, #12]
 800ae1c:	f003 0302 	and.w	r3, r3, #2
 800ae20:	2b02      	cmp	r3, #2
 800ae22:	d11b      	bne.n	800ae5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f06f 0202 	mvn.w	r2, #2
 800ae2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2201      	movs	r2, #1
 800ae32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	699b      	ldr	r3, [r3, #24]
 800ae3a:	f003 0303 	and.w	r3, r3, #3
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d003      	beq.n	800ae4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 fa1a 	bl	800b27c <HAL_TIM_IC_CaptureCallback>
 800ae48:	e005      	b.n	800ae56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 fa0c 	bl	800b268 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 fa1d 	bl	800b290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	691b      	ldr	r3, [r3, #16]
 800ae62:	f003 0304 	and.w	r3, r3, #4
 800ae66:	2b04      	cmp	r3, #4
 800ae68:	d122      	bne.n	800aeb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	f003 0304 	and.w	r3, r3, #4
 800ae74:	2b04      	cmp	r3, #4
 800ae76:	d11b      	bne.n	800aeb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f06f 0204 	mvn.w	r2, #4
 800ae80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2202      	movs	r2, #2
 800ae86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	699b      	ldr	r3, [r3, #24]
 800ae8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d003      	beq.n	800ae9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 f9f0 	bl	800b27c <HAL_TIM_IC_CaptureCallback>
 800ae9c:	e005      	b.n	800aeaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 f9e2 	bl	800b268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f9f3 	bl	800b290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	f003 0308 	and.w	r3, r3, #8
 800aeba:	2b08      	cmp	r3, #8
 800aebc:	d122      	bne.n	800af04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	f003 0308 	and.w	r3, r3, #8
 800aec8:	2b08      	cmp	r3, #8
 800aeca:	d11b      	bne.n	800af04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f06f 0208 	mvn.w	r2, #8
 800aed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2204      	movs	r2, #4
 800aeda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	69db      	ldr	r3, [r3, #28]
 800aee2:	f003 0303 	and.w	r3, r3, #3
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d003      	beq.n	800aef2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 f9c6 	bl	800b27c <HAL_TIM_IC_CaptureCallback>
 800aef0:	e005      	b.n	800aefe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 f9b8 	bl	800b268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 f9c9 	bl	800b290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	f003 0310 	and.w	r3, r3, #16
 800af0e:	2b10      	cmp	r3, #16
 800af10:	d122      	bne.n	800af58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	f003 0310 	and.w	r3, r3, #16
 800af1c:	2b10      	cmp	r3, #16
 800af1e:	d11b      	bne.n	800af58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f06f 0210 	mvn.w	r2, #16
 800af28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2208      	movs	r2, #8
 800af2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	69db      	ldr	r3, [r3, #28]
 800af36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d003      	beq.n	800af46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f99c 	bl	800b27c <HAL_TIM_IC_CaptureCallback>
 800af44:	e005      	b.n	800af52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f98e 	bl	800b268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 f99f 	bl	800b290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	f003 0301 	and.w	r3, r3, #1
 800af62:	2b01      	cmp	r3, #1
 800af64:	d10e      	bne.n	800af84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	f003 0301 	and.w	r3, r3, #1
 800af70:	2b01      	cmp	r3, #1
 800af72:	d107      	bne.n	800af84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f06f 0201 	mvn.w	r2, #1
 800af7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7f8 fb38 	bl	80035f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af8e:	2b80      	cmp	r3, #128	; 0x80
 800af90:	d10e      	bne.n	800afb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af9c:	2b80      	cmp	r3, #128	; 0x80
 800af9e:	d107      	bne.n	800afb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800afa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 fdb2 	bl	800bb14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afbe:	d10e      	bne.n	800afde <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afca:	2b80      	cmp	r3, #128	; 0x80
 800afcc:	d107      	bne.n	800afde <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800afd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f000 fda5 	bl	800bb28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afe8:	2b40      	cmp	r3, #64	; 0x40
 800afea:	d10e      	bne.n	800b00a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aff6:	2b40      	cmp	r3, #64	; 0x40
 800aff8:	d107      	bne.n	800b00a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 f94d 	bl	800b2a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	691b      	ldr	r3, [r3, #16]
 800b010:	f003 0320 	and.w	r3, r3, #32
 800b014:	2b20      	cmp	r3, #32
 800b016:	d10e      	bne.n	800b036 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	f003 0320 	and.w	r3, r3, #32
 800b022:	2b20      	cmp	r3, #32
 800b024:	d107      	bne.n	800b036 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f06f 0220 	mvn.w	r2, #32
 800b02e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 fd65 	bl	800bb00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b036:	bf00      	nop
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
	...

0800b040 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b056:	2b01      	cmp	r3, #1
 800b058:	d101      	bne.n	800b05e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b05a:	2302      	movs	r3, #2
 800b05c:	e0ff      	b.n	800b25e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2201      	movs	r2, #1
 800b062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2b14      	cmp	r3, #20
 800b06a:	f200 80f0 	bhi.w	800b24e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b06e:	a201      	add	r2, pc, #4	; (adr r2, 800b074 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b074:	0800b0c9 	.word	0x0800b0c9
 800b078:	0800b24f 	.word	0x0800b24f
 800b07c:	0800b24f 	.word	0x0800b24f
 800b080:	0800b24f 	.word	0x0800b24f
 800b084:	0800b109 	.word	0x0800b109
 800b088:	0800b24f 	.word	0x0800b24f
 800b08c:	0800b24f 	.word	0x0800b24f
 800b090:	0800b24f 	.word	0x0800b24f
 800b094:	0800b14b 	.word	0x0800b14b
 800b098:	0800b24f 	.word	0x0800b24f
 800b09c:	0800b24f 	.word	0x0800b24f
 800b0a0:	0800b24f 	.word	0x0800b24f
 800b0a4:	0800b18b 	.word	0x0800b18b
 800b0a8:	0800b24f 	.word	0x0800b24f
 800b0ac:	0800b24f 	.word	0x0800b24f
 800b0b0:	0800b24f 	.word	0x0800b24f
 800b0b4:	0800b1cd 	.word	0x0800b1cd
 800b0b8:	0800b24f 	.word	0x0800b24f
 800b0bc:	0800b24f 	.word	0x0800b24f
 800b0c0:	0800b24f 	.word	0x0800b24f
 800b0c4:	0800b20d 	.word	0x0800b20d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68b9      	ldr	r1, [r7, #8]
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f000 f98c 	bl	800b3ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	699a      	ldr	r2, [r3, #24]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f042 0208 	orr.w	r2, r2, #8
 800b0e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	699a      	ldr	r2, [r3, #24]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f022 0204 	bic.w	r2, r2, #4
 800b0f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	6999      	ldr	r1, [r3, #24]
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	691a      	ldr	r2, [r3, #16]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	430a      	orrs	r2, r1
 800b104:	619a      	str	r2, [r3, #24]
      break;
 800b106:	e0a5      	b.n	800b254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	68b9      	ldr	r1, [r7, #8]
 800b10e:	4618      	mov	r0, r3
 800b110:	f000 f9fc 	bl	800b50c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	699a      	ldr	r2, [r3, #24]
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	699a      	ldr	r2, [r3, #24]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	6999      	ldr	r1, [r3, #24]
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	021a      	lsls	r2, r3, #8
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	430a      	orrs	r2, r1
 800b146:	619a      	str	r2, [r3, #24]
      break;
 800b148:	e084      	b.n	800b254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	68b9      	ldr	r1, [r7, #8]
 800b150:	4618      	mov	r0, r3
 800b152:	f000 fa65 	bl	800b620 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	69da      	ldr	r2, [r3, #28]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f042 0208 	orr.w	r2, r2, #8
 800b164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	69da      	ldr	r2, [r3, #28]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f022 0204 	bic.w	r2, r2, #4
 800b174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	69d9      	ldr	r1, [r3, #28]
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	691a      	ldr	r2, [r3, #16]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	430a      	orrs	r2, r1
 800b186:	61da      	str	r2, [r3, #28]
      break;
 800b188:	e064      	b.n	800b254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	68b9      	ldr	r1, [r7, #8]
 800b190:	4618      	mov	r0, r3
 800b192:	f000 facd 	bl	800b730 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	69da      	ldr	r2, [r3, #28]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	69da      	ldr	r2, [r3, #28]
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	69d9      	ldr	r1, [r3, #28]
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	691b      	ldr	r3, [r3, #16]
 800b1c0:	021a      	lsls	r2, r3, #8
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	430a      	orrs	r2, r1
 800b1c8:	61da      	str	r2, [r3, #28]
      break;
 800b1ca:	e043      	b.n	800b254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	68b9      	ldr	r1, [r7, #8]
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f000 fb16 	bl	800b804 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f042 0208 	orr.w	r2, r2, #8
 800b1e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f022 0204 	bic.w	r2, r2, #4
 800b1f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	691a      	ldr	r2, [r3, #16]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	430a      	orrs	r2, r1
 800b208:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b20a:	e023      	b.n	800b254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	68b9      	ldr	r1, [r7, #8]
 800b212:	4618      	mov	r0, r3
 800b214:	f000 fb5a 	bl	800b8cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b226:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b236:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	021a      	lsls	r2, r3, #8
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	430a      	orrs	r2, r1
 800b24a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b24c:	e002      	b.n	800b254 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b24e:	2301      	movs	r3, #1
 800b250:	75fb      	strb	r3, [r7, #23]
      break;
 800b252:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2200      	movs	r2, #0
 800b258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b25c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3718      	adds	r7, #24
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop

0800b268 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b270:	bf00      	nop
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b284:	bf00      	nop
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b298:	bf00      	nop
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b2ac:	bf00      	nop
 800b2ae:	370c      	adds	r7, #12
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a40      	ldr	r2, [pc, #256]	; (800b3cc <TIM_Base_SetConfig+0x114>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d013      	beq.n	800b2f8 <TIM_Base_SetConfig+0x40>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2d6:	d00f      	beq.n	800b2f8 <TIM_Base_SetConfig+0x40>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a3d      	ldr	r2, [pc, #244]	; (800b3d0 <TIM_Base_SetConfig+0x118>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d00b      	beq.n	800b2f8 <TIM_Base_SetConfig+0x40>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a3c      	ldr	r2, [pc, #240]	; (800b3d4 <TIM_Base_SetConfig+0x11c>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d007      	beq.n	800b2f8 <TIM_Base_SetConfig+0x40>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a3b      	ldr	r2, [pc, #236]	; (800b3d8 <TIM_Base_SetConfig+0x120>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d003      	beq.n	800b2f8 <TIM_Base_SetConfig+0x40>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a3a      	ldr	r2, [pc, #232]	; (800b3dc <TIM_Base_SetConfig+0x124>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d108      	bne.n	800b30a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	4313      	orrs	r3, r2
 800b308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a2f      	ldr	r2, [pc, #188]	; (800b3cc <TIM_Base_SetConfig+0x114>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d01f      	beq.n	800b352 <TIM_Base_SetConfig+0x9a>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b318:	d01b      	beq.n	800b352 <TIM_Base_SetConfig+0x9a>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a2c      	ldr	r2, [pc, #176]	; (800b3d0 <TIM_Base_SetConfig+0x118>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d017      	beq.n	800b352 <TIM_Base_SetConfig+0x9a>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a2b      	ldr	r2, [pc, #172]	; (800b3d4 <TIM_Base_SetConfig+0x11c>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d013      	beq.n	800b352 <TIM_Base_SetConfig+0x9a>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4a2a      	ldr	r2, [pc, #168]	; (800b3d8 <TIM_Base_SetConfig+0x120>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d00f      	beq.n	800b352 <TIM_Base_SetConfig+0x9a>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4a29      	ldr	r2, [pc, #164]	; (800b3dc <TIM_Base_SetConfig+0x124>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d00b      	beq.n	800b352 <TIM_Base_SetConfig+0x9a>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a28      	ldr	r2, [pc, #160]	; (800b3e0 <TIM_Base_SetConfig+0x128>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d007      	beq.n	800b352 <TIM_Base_SetConfig+0x9a>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a27      	ldr	r2, [pc, #156]	; (800b3e4 <TIM_Base_SetConfig+0x12c>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d003      	beq.n	800b352 <TIM_Base_SetConfig+0x9a>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a26      	ldr	r2, [pc, #152]	; (800b3e8 <TIM_Base_SetConfig+0x130>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d108      	bne.n	800b364 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	4313      	orrs	r3, r2
 800b362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	695b      	ldr	r3, [r3, #20]
 800b36e:	4313      	orrs	r3, r2
 800b370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	68fa      	ldr	r2, [r7, #12]
 800b376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	689a      	ldr	r2, [r3, #8]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4a10      	ldr	r2, [pc, #64]	; (800b3cc <TIM_Base_SetConfig+0x114>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d00f      	beq.n	800b3b0 <TIM_Base_SetConfig+0xf8>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	4a12      	ldr	r2, [pc, #72]	; (800b3dc <TIM_Base_SetConfig+0x124>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d00b      	beq.n	800b3b0 <TIM_Base_SetConfig+0xf8>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a11      	ldr	r2, [pc, #68]	; (800b3e0 <TIM_Base_SetConfig+0x128>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d007      	beq.n	800b3b0 <TIM_Base_SetConfig+0xf8>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4a10      	ldr	r2, [pc, #64]	; (800b3e4 <TIM_Base_SetConfig+0x12c>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d003      	beq.n	800b3b0 <TIM_Base_SetConfig+0xf8>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a0f      	ldr	r2, [pc, #60]	; (800b3e8 <TIM_Base_SetConfig+0x130>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d103      	bne.n	800b3b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	691a      	ldr	r2, [r3, #16]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	615a      	str	r2, [r3, #20]
}
 800b3be:	bf00      	nop
 800b3c0:	3714      	adds	r7, #20
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	40010000 	.word	0x40010000
 800b3d0:	40000400 	.word	0x40000400
 800b3d4:	40000800 	.word	0x40000800
 800b3d8:	40000c00 	.word	0x40000c00
 800b3dc:	40010400 	.word	0x40010400
 800b3e0:	40014000 	.word	0x40014000
 800b3e4:	40014400 	.word	0x40014400
 800b3e8:	40014800 	.word	0x40014800

0800b3ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b087      	sub	sp, #28
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a1b      	ldr	r3, [r3, #32]
 800b3fa:	f023 0201 	bic.w	r2, r3, #1
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6a1b      	ldr	r3, [r3, #32]
 800b406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	699b      	ldr	r3, [r3, #24]
 800b412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	4b37      	ldr	r3, [pc, #220]	; (800b4f4 <TIM_OC1_SetConfig+0x108>)
 800b418:	4013      	ands	r3, r2
 800b41a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f023 0303 	bic.w	r3, r3, #3
 800b422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	f023 0302 	bic.w	r3, r3, #2
 800b434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	697a      	ldr	r2, [r7, #20]
 800b43c:	4313      	orrs	r3, r2
 800b43e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4a2d      	ldr	r2, [pc, #180]	; (800b4f8 <TIM_OC1_SetConfig+0x10c>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d00f      	beq.n	800b468 <TIM_OC1_SetConfig+0x7c>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4a2c      	ldr	r2, [pc, #176]	; (800b4fc <TIM_OC1_SetConfig+0x110>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d00b      	beq.n	800b468 <TIM_OC1_SetConfig+0x7c>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4a2b      	ldr	r2, [pc, #172]	; (800b500 <TIM_OC1_SetConfig+0x114>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d007      	beq.n	800b468 <TIM_OC1_SetConfig+0x7c>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	4a2a      	ldr	r2, [pc, #168]	; (800b504 <TIM_OC1_SetConfig+0x118>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d003      	beq.n	800b468 <TIM_OC1_SetConfig+0x7c>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	4a29      	ldr	r2, [pc, #164]	; (800b508 <TIM_OC1_SetConfig+0x11c>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d10c      	bne.n	800b482 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	f023 0308 	bic.w	r3, r3, #8
 800b46e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	697a      	ldr	r2, [r7, #20]
 800b476:	4313      	orrs	r3, r2
 800b478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	f023 0304 	bic.w	r3, r3, #4
 800b480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4a1c      	ldr	r2, [pc, #112]	; (800b4f8 <TIM_OC1_SetConfig+0x10c>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d00f      	beq.n	800b4aa <TIM_OC1_SetConfig+0xbe>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4a1b      	ldr	r2, [pc, #108]	; (800b4fc <TIM_OC1_SetConfig+0x110>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d00b      	beq.n	800b4aa <TIM_OC1_SetConfig+0xbe>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4a1a      	ldr	r2, [pc, #104]	; (800b500 <TIM_OC1_SetConfig+0x114>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d007      	beq.n	800b4aa <TIM_OC1_SetConfig+0xbe>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4a19      	ldr	r2, [pc, #100]	; (800b504 <TIM_OC1_SetConfig+0x118>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d003      	beq.n	800b4aa <TIM_OC1_SetConfig+0xbe>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	4a18      	ldr	r2, [pc, #96]	; (800b508 <TIM_OC1_SetConfig+0x11c>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d111      	bne.n	800b4ce <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	695b      	ldr	r3, [r3, #20]
 800b4be:	693a      	ldr	r2, [r7, #16]
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	699b      	ldr	r3, [r3, #24]
 800b4c8:	693a      	ldr	r2, [r7, #16]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	693a      	ldr	r2, [r7, #16]
 800b4d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	68fa      	ldr	r2, [r7, #12]
 800b4d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	685a      	ldr	r2, [r3, #4]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	697a      	ldr	r2, [r7, #20]
 800b4e6:	621a      	str	r2, [r3, #32]
}
 800b4e8:	bf00      	nop
 800b4ea:	371c      	adds	r7, #28
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	fffeff8f 	.word	0xfffeff8f
 800b4f8:	40010000 	.word	0x40010000
 800b4fc:	40010400 	.word	0x40010400
 800b500:	40014000 	.word	0x40014000
 800b504:	40014400 	.word	0x40014400
 800b508:	40014800 	.word	0x40014800

0800b50c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b087      	sub	sp, #28
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a1b      	ldr	r3, [r3, #32]
 800b51a:	f023 0210 	bic.w	r2, r3, #16
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	699b      	ldr	r3, [r3, #24]
 800b532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b534:	68fa      	ldr	r2, [r7, #12]
 800b536:	4b34      	ldr	r3, [pc, #208]	; (800b608 <TIM_OC2_SetConfig+0xfc>)
 800b538:	4013      	ands	r3, r2
 800b53a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	021b      	lsls	r3, r3, #8
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	f023 0320 	bic.w	r3, r3, #32
 800b556:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	011b      	lsls	r3, r3, #4
 800b55e:	697a      	ldr	r2, [r7, #20]
 800b560:	4313      	orrs	r3, r2
 800b562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	4a29      	ldr	r2, [pc, #164]	; (800b60c <TIM_OC2_SetConfig+0x100>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d003      	beq.n	800b574 <TIM_OC2_SetConfig+0x68>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4a28      	ldr	r2, [pc, #160]	; (800b610 <TIM_OC2_SetConfig+0x104>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d10d      	bne.n	800b590 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b57a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	011b      	lsls	r3, r3, #4
 800b582:	697a      	ldr	r2, [r7, #20]
 800b584:	4313      	orrs	r3, r2
 800b586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b58e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4a1e      	ldr	r2, [pc, #120]	; (800b60c <TIM_OC2_SetConfig+0x100>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d00f      	beq.n	800b5b8 <TIM_OC2_SetConfig+0xac>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	4a1d      	ldr	r2, [pc, #116]	; (800b610 <TIM_OC2_SetConfig+0x104>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d00b      	beq.n	800b5b8 <TIM_OC2_SetConfig+0xac>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	4a1c      	ldr	r2, [pc, #112]	; (800b614 <TIM_OC2_SetConfig+0x108>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d007      	beq.n	800b5b8 <TIM_OC2_SetConfig+0xac>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	4a1b      	ldr	r2, [pc, #108]	; (800b618 <TIM_OC2_SetConfig+0x10c>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d003      	beq.n	800b5b8 <TIM_OC2_SetConfig+0xac>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4a1a      	ldr	r2, [pc, #104]	; (800b61c <TIM_OC2_SetConfig+0x110>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d113      	bne.n	800b5e0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b5be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	695b      	ldr	r3, [r3, #20]
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	693a      	ldr	r2, [r7, #16]
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	699b      	ldr	r3, [r3, #24]
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	693a      	ldr	r2, [r7, #16]
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	693a      	ldr	r2, [r7, #16]
 800b5e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	685a      	ldr	r2, [r3, #4]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	697a      	ldr	r2, [r7, #20]
 800b5f8:	621a      	str	r2, [r3, #32]
}
 800b5fa:	bf00      	nop
 800b5fc:	371c      	adds	r7, #28
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	feff8fff 	.word	0xfeff8fff
 800b60c:	40010000 	.word	0x40010000
 800b610:	40010400 	.word	0x40010400
 800b614:	40014000 	.word	0x40014000
 800b618:	40014400 	.word	0x40014400
 800b61c:	40014800 	.word	0x40014800

0800b620 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b620:	b480      	push	{r7}
 800b622:	b087      	sub	sp, #28
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6a1b      	ldr	r3, [r3, #32]
 800b62e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6a1b      	ldr	r3, [r3, #32]
 800b63a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	69db      	ldr	r3, [r3, #28]
 800b646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	4b33      	ldr	r3, [pc, #204]	; (800b718 <TIM_OC3_SetConfig+0xf8>)
 800b64c:	4013      	ands	r3, r2
 800b64e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f023 0303 	bic.w	r3, r3, #3
 800b656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	4313      	orrs	r3, r2
 800b660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	021b      	lsls	r3, r3, #8
 800b670:	697a      	ldr	r2, [r7, #20]
 800b672:	4313      	orrs	r3, r2
 800b674:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4a28      	ldr	r2, [pc, #160]	; (800b71c <TIM_OC3_SetConfig+0xfc>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d003      	beq.n	800b686 <TIM_OC3_SetConfig+0x66>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4a27      	ldr	r2, [pc, #156]	; (800b720 <TIM_OC3_SetConfig+0x100>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d10d      	bne.n	800b6a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b68c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	021b      	lsls	r3, r3, #8
 800b694:	697a      	ldr	r2, [r7, #20]
 800b696:	4313      	orrs	r3, r2
 800b698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b6a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4a1d      	ldr	r2, [pc, #116]	; (800b71c <TIM_OC3_SetConfig+0xfc>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d00f      	beq.n	800b6ca <TIM_OC3_SetConfig+0xaa>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4a1c      	ldr	r2, [pc, #112]	; (800b720 <TIM_OC3_SetConfig+0x100>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d00b      	beq.n	800b6ca <TIM_OC3_SetConfig+0xaa>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4a1b      	ldr	r2, [pc, #108]	; (800b724 <TIM_OC3_SetConfig+0x104>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d007      	beq.n	800b6ca <TIM_OC3_SetConfig+0xaa>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a1a      	ldr	r2, [pc, #104]	; (800b728 <TIM_OC3_SetConfig+0x108>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d003      	beq.n	800b6ca <TIM_OC3_SetConfig+0xaa>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a19      	ldr	r2, [pc, #100]	; (800b72c <TIM_OC3_SetConfig+0x10c>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d113      	bne.n	800b6f2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	695b      	ldr	r3, [r3, #20]
 800b6de:	011b      	lsls	r3, r3, #4
 800b6e0:	693a      	ldr	r2, [r7, #16]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	699b      	ldr	r3, [r3, #24]
 800b6ea:	011b      	lsls	r3, r3, #4
 800b6ec:	693a      	ldr	r2, [r7, #16]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	693a      	ldr	r2, [r7, #16]
 800b6f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	685a      	ldr	r2, [r3, #4]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	697a      	ldr	r2, [r7, #20]
 800b70a:	621a      	str	r2, [r3, #32]
}
 800b70c:	bf00      	nop
 800b70e:	371c      	adds	r7, #28
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr
 800b718:	fffeff8f 	.word	0xfffeff8f
 800b71c:	40010000 	.word	0x40010000
 800b720:	40010400 	.word	0x40010400
 800b724:	40014000 	.word	0x40014000
 800b728:	40014400 	.word	0x40014400
 800b72c:	40014800 	.word	0x40014800

0800b730 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b730:	b480      	push	{r7}
 800b732:	b087      	sub	sp, #28
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a1b      	ldr	r3, [r3, #32]
 800b73e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6a1b      	ldr	r3, [r3, #32]
 800b74a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	69db      	ldr	r3, [r3, #28]
 800b756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	4b24      	ldr	r3, [pc, #144]	; (800b7ec <TIM_OC4_SetConfig+0xbc>)
 800b75c:	4013      	ands	r3, r2
 800b75e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	021b      	lsls	r3, r3, #8
 800b76e:	68fa      	ldr	r2, [r7, #12]
 800b770:	4313      	orrs	r3, r2
 800b772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b77a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	031b      	lsls	r3, r3, #12
 800b782:	693a      	ldr	r2, [r7, #16]
 800b784:	4313      	orrs	r3, r2
 800b786:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4a19      	ldr	r2, [pc, #100]	; (800b7f0 <TIM_OC4_SetConfig+0xc0>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d00f      	beq.n	800b7b0 <TIM_OC4_SetConfig+0x80>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4a18      	ldr	r2, [pc, #96]	; (800b7f4 <TIM_OC4_SetConfig+0xc4>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d00b      	beq.n	800b7b0 <TIM_OC4_SetConfig+0x80>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4a17      	ldr	r2, [pc, #92]	; (800b7f8 <TIM_OC4_SetConfig+0xc8>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d007      	beq.n	800b7b0 <TIM_OC4_SetConfig+0x80>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a16      	ldr	r2, [pc, #88]	; (800b7fc <TIM_OC4_SetConfig+0xcc>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d003      	beq.n	800b7b0 <TIM_OC4_SetConfig+0x80>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a15      	ldr	r2, [pc, #84]	; (800b800 <TIM_OC4_SetConfig+0xd0>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d109      	bne.n	800b7c4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	695b      	ldr	r3, [r3, #20]
 800b7bc:	019b      	lsls	r3, r3, #6
 800b7be:	697a      	ldr	r2, [r7, #20]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	685a      	ldr	r2, [r3, #4]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	693a      	ldr	r2, [r7, #16]
 800b7dc:	621a      	str	r2, [r3, #32]
}
 800b7de:	bf00      	nop
 800b7e0:	371c      	adds	r7, #28
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr
 800b7ea:	bf00      	nop
 800b7ec:	feff8fff 	.word	0xfeff8fff
 800b7f0:	40010000 	.word	0x40010000
 800b7f4:	40010400 	.word	0x40010400
 800b7f8:	40014000 	.word	0x40014000
 800b7fc:	40014400 	.word	0x40014400
 800b800:	40014800 	.word	0x40014800

0800b804 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b804:	b480      	push	{r7}
 800b806:	b087      	sub	sp, #28
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6a1b      	ldr	r3, [r3, #32]
 800b812:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b82a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	4b21      	ldr	r3, [pc, #132]	; (800b8b4 <TIM_OC5_SetConfig+0xb0>)
 800b830:	4013      	ands	r3, r2
 800b832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b844:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	041b      	lsls	r3, r3, #16
 800b84c:	693a      	ldr	r2, [r7, #16]
 800b84e:	4313      	orrs	r3, r2
 800b850:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4a18      	ldr	r2, [pc, #96]	; (800b8b8 <TIM_OC5_SetConfig+0xb4>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d00f      	beq.n	800b87a <TIM_OC5_SetConfig+0x76>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4a17      	ldr	r2, [pc, #92]	; (800b8bc <TIM_OC5_SetConfig+0xb8>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d00b      	beq.n	800b87a <TIM_OC5_SetConfig+0x76>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a16      	ldr	r2, [pc, #88]	; (800b8c0 <TIM_OC5_SetConfig+0xbc>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d007      	beq.n	800b87a <TIM_OC5_SetConfig+0x76>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	4a15      	ldr	r2, [pc, #84]	; (800b8c4 <TIM_OC5_SetConfig+0xc0>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d003      	beq.n	800b87a <TIM_OC5_SetConfig+0x76>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4a14      	ldr	r2, [pc, #80]	; (800b8c8 <TIM_OC5_SetConfig+0xc4>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d109      	bne.n	800b88e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b880:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	695b      	ldr	r3, [r3, #20]
 800b886:	021b      	lsls	r3, r3, #8
 800b888:	697a      	ldr	r2, [r7, #20]
 800b88a:	4313      	orrs	r3, r2
 800b88c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	697a      	ldr	r2, [r7, #20]
 800b892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	685a      	ldr	r2, [r3, #4]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	693a      	ldr	r2, [r7, #16]
 800b8a6:	621a      	str	r2, [r3, #32]
}
 800b8a8:	bf00      	nop
 800b8aa:	371c      	adds	r7, #28
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr
 800b8b4:	fffeff8f 	.word	0xfffeff8f
 800b8b8:	40010000 	.word	0x40010000
 800b8bc:	40010400 	.word	0x40010400
 800b8c0:	40014000 	.word	0x40014000
 800b8c4:	40014400 	.word	0x40014400
 800b8c8:	40014800 	.word	0x40014800

0800b8cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b087      	sub	sp, #28
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6a1b      	ldr	r3, [r3, #32]
 800b8da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6a1b      	ldr	r3, [r3, #32]
 800b8e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	4b22      	ldr	r3, [pc, #136]	; (800b980 <TIM_OC6_SetConfig+0xb4>)
 800b8f8:	4013      	ands	r3, r2
 800b8fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	021b      	lsls	r3, r3, #8
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	4313      	orrs	r3, r2
 800b906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b90e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	051b      	lsls	r3, r3, #20
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	4313      	orrs	r3, r2
 800b91a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	4a19      	ldr	r2, [pc, #100]	; (800b984 <TIM_OC6_SetConfig+0xb8>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d00f      	beq.n	800b944 <TIM_OC6_SetConfig+0x78>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4a18      	ldr	r2, [pc, #96]	; (800b988 <TIM_OC6_SetConfig+0xbc>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d00b      	beq.n	800b944 <TIM_OC6_SetConfig+0x78>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	4a17      	ldr	r2, [pc, #92]	; (800b98c <TIM_OC6_SetConfig+0xc0>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d007      	beq.n	800b944 <TIM_OC6_SetConfig+0x78>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4a16      	ldr	r2, [pc, #88]	; (800b990 <TIM_OC6_SetConfig+0xc4>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d003      	beq.n	800b944 <TIM_OC6_SetConfig+0x78>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4a15      	ldr	r2, [pc, #84]	; (800b994 <TIM_OC6_SetConfig+0xc8>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d109      	bne.n	800b958 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b94a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	695b      	ldr	r3, [r3, #20]
 800b950:	029b      	lsls	r3, r3, #10
 800b952:	697a      	ldr	r2, [r7, #20]
 800b954:	4313      	orrs	r3, r2
 800b956:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	697a      	ldr	r2, [r7, #20]
 800b95c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	685a      	ldr	r2, [r3, #4]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	693a      	ldr	r2, [r7, #16]
 800b970:	621a      	str	r2, [r3, #32]
}
 800b972:	bf00      	nop
 800b974:	371c      	adds	r7, #28
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	feff8fff 	.word	0xfeff8fff
 800b984:	40010000 	.word	0x40010000
 800b988:	40010400 	.word	0x40010400
 800b98c:	40014000 	.word	0x40014000
 800b990:	40014400 	.word	0x40014400
 800b994:	40014800 	.word	0x40014800

0800b998 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b998:	b480      	push	{r7}
 800b99a:	b087      	sub	sp, #28
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	f003 031f 	and.w	r3, r3, #31
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b9b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	6a1a      	ldr	r2, [r3, #32]
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	43db      	mvns	r3, r3
 800b9ba:	401a      	ands	r2, r3
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6a1a      	ldr	r2, [r3, #32]
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	f003 031f 	and.w	r3, r3, #31
 800b9ca:	6879      	ldr	r1, [r7, #4]
 800b9cc:	fa01 f303 	lsl.w	r3, r1, r3
 800b9d0:	431a      	orrs	r2, r3
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	621a      	str	r2, [r3, #32]
}
 800b9d6:	bf00      	nop
 800b9d8:	371c      	adds	r7, #28
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr
	...

0800b9e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d101      	bne.n	800b9fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9f8:	2302      	movs	r3, #2
 800b9fa:	e06d      	b.n	800bad8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2202      	movs	r2, #2
 800ba08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a30      	ldr	r2, [pc, #192]	; (800bae4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d004      	beq.n	800ba30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a2f      	ldr	r2, [pc, #188]	; (800bae8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d108      	bne.n	800ba42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ba36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	68fa      	ldr	r2, [r7, #12]
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	68fa      	ldr	r2, [r7, #12]
 800ba50:	4313      	orrs	r3, r2
 800ba52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a20      	ldr	r2, [pc, #128]	; (800bae4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d022      	beq.n	800baac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba6e:	d01d      	beq.n	800baac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a1d      	ldr	r2, [pc, #116]	; (800baec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d018      	beq.n	800baac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4a1c      	ldr	r2, [pc, #112]	; (800baf0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d013      	beq.n	800baac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a1a      	ldr	r2, [pc, #104]	; (800baf4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d00e      	beq.n	800baac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4a15      	ldr	r2, [pc, #84]	; (800bae8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d009      	beq.n	800baac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a16      	ldr	r2, [pc, #88]	; (800baf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d004      	beq.n	800baac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4a15      	ldr	r2, [pc, #84]	; (800bafc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d10c      	bne.n	800bac6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bab2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	68ba      	ldr	r2, [r7, #8]
 800baba:	4313      	orrs	r3, r2
 800babc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2201      	movs	r2, #1
 800baca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3714      	adds	r7, #20
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr
 800bae4:	40010000 	.word	0x40010000
 800bae8:	40010400 	.word	0x40010400
 800baec:	40000400 	.word	0x40000400
 800baf0:	40000800 	.word	0x40000800
 800baf4:	40000c00 	.word	0x40000c00
 800baf8:	40001800 	.word	0x40001800
 800bafc:	40014000 	.word	0x40014000

0800bb00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb08:	bf00      	nop
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb1c:	bf00      	nop
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bb30:	bf00      	nop
 800bb32:	370c      	adds	r7, #12
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d101      	bne.n	800bb4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e042      	b.n	800bbd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d106      	bne.n	800bb66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f7f8 f871 	bl	8003c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2224      	movs	r2, #36	; 0x24
 800bb6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f022 0201 	bic.w	r2, r2, #1
 800bb7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 f82c 	bl	800bbdc <UART_SetConfig>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d101      	bne.n	800bb8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e022      	b.n	800bbd4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d002      	beq.n	800bb9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fd80 	bl	800c69c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	685a      	ldr	r2, [r3, #4]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bbaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	689a      	ldr	r2, [r3, #8]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bbba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f042 0201 	orr.w	r2, r2, #1
 800bbca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 fe07 	bl	800c7e0 <UART_CheckIdleState>
 800bbd2:	4603      	mov	r3, r0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bbdc:	b5b0      	push	{r4, r5, r7, lr}
 800bbde:	b08e      	sub	sp, #56	; 0x38
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	689a      	ldr	r2, [r3, #8]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	691b      	ldr	r3, [r3, #16]
 800bbf2:	431a      	orrs	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	695b      	ldr	r3, [r3, #20]
 800bbf8:	431a      	orrs	r2, r3
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	69db      	ldr	r3, [r3, #28]
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	4bbf      	ldr	r3, [pc, #764]	; (800bf08 <UART_SetConfig+0x32c>)
 800bc0a:	4013      	ands	r3, r2
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	6812      	ldr	r2, [r2, #0]
 800bc10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bc12:	430b      	orrs	r3, r1
 800bc14:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	68da      	ldr	r2, [r3, #12]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	430a      	orrs	r2, r1
 800bc2a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	699b      	ldr	r3, [r3, #24]
 800bc30:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4ab5      	ldr	r2, [pc, #724]	; (800bf0c <UART_SetConfig+0x330>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d004      	beq.n	800bc46 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6a1b      	ldr	r3, [r3, #32]
 800bc40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc42:	4313      	orrs	r3, r2
 800bc44:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	689a      	ldr	r2, [r3, #8]
 800bc4c:	4bb0      	ldr	r3, [pc, #704]	; (800bf10 <UART_SetConfig+0x334>)
 800bc4e:	4013      	ands	r3, r2
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	6812      	ldr	r2, [r2, #0]
 800bc54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bc56:	430b      	orrs	r3, r1
 800bc58:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc60:	f023 010f 	bic.w	r1, r3, #15
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	430a      	orrs	r2, r1
 800bc6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4aa7      	ldr	r2, [pc, #668]	; (800bf14 <UART_SetConfig+0x338>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d176      	bne.n	800bd68 <UART_SetConfig+0x18c>
 800bc7a:	4ba7      	ldr	r3, [pc, #668]	; (800bf18 <UART_SetConfig+0x33c>)
 800bc7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bc82:	2b28      	cmp	r3, #40	; 0x28
 800bc84:	d86c      	bhi.n	800bd60 <UART_SetConfig+0x184>
 800bc86:	a201      	add	r2, pc, #4	; (adr r2, 800bc8c <UART_SetConfig+0xb0>)
 800bc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc8c:	0800bd31 	.word	0x0800bd31
 800bc90:	0800bd61 	.word	0x0800bd61
 800bc94:	0800bd61 	.word	0x0800bd61
 800bc98:	0800bd61 	.word	0x0800bd61
 800bc9c:	0800bd61 	.word	0x0800bd61
 800bca0:	0800bd61 	.word	0x0800bd61
 800bca4:	0800bd61 	.word	0x0800bd61
 800bca8:	0800bd61 	.word	0x0800bd61
 800bcac:	0800bd39 	.word	0x0800bd39
 800bcb0:	0800bd61 	.word	0x0800bd61
 800bcb4:	0800bd61 	.word	0x0800bd61
 800bcb8:	0800bd61 	.word	0x0800bd61
 800bcbc:	0800bd61 	.word	0x0800bd61
 800bcc0:	0800bd61 	.word	0x0800bd61
 800bcc4:	0800bd61 	.word	0x0800bd61
 800bcc8:	0800bd61 	.word	0x0800bd61
 800bccc:	0800bd41 	.word	0x0800bd41
 800bcd0:	0800bd61 	.word	0x0800bd61
 800bcd4:	0800bd61 	.word	0x0800bd61
 800bcd8:	0800bd61 	.word	0x0800bd61
 800bcdc:	0800bd61 	.word	0x0800bd61
 800bce0:	0800bd61 	.word	0x0800bd61
 800bce4:	0800bd61 	.word	0x0800bd61
 800bce8:	0800bd61 	.word	0x0800bd61
 800bcec:	0800bd49 	.word	0x0800bd49
 800bcf0:	0800bd61 	.word	0x0800bd61
 800bcf4:	0800bd61 	.word	0x0800bd61
 800bcf8:	0800bd61 	.word	0x0800bd61
 800bcfc:	0800bd61 	.word	0x0800bd61
 800bd00:	0800bd61 	.word	0x0800bd61
 800bd04:	0800bd61 	.word	0x0800bd61
 800bd08:	0800bd61 	.word	0x0800bd61
 800bd0c:	0800bd51 	.word	0x0800bd51
 800bd10:	0800bd61 	.word	0x0800bd61
 800bd14:	0800bd61 	.word	0x0800bd61
 800bd18:	0800bd61 	.word	0x0800bd61
 800bd1c:	0800bd61 	.word	0x0800bd61
 800bd20:	0800bd61 	.word	0x0800bd61
 800bd24:	0800bd61 	.word	0x0800bd61
 800bd28:	0800bd61 	.word	0x0800bd61
 800bd2c:	0800bd59 	.word	0x0800bd59
 800bd30:	2301      	movs	r3, #1
 800bd32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd36:	e222      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bd38:	2304      	movs	r3, #4
 800bd3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd3e:	e21e      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bd40:	2308      	movs	r3, #8
 800bd42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd46:	e21a      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bd48:	2310      	movs	r3, #16
 800bd4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd4e:	e216      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bd50:	2320      	movs	r3, #32
 800bd52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd56:	e212      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bd58:	2340      	movs	r3, #64	; 0x40
 800bd5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd5e:	e20e      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bd60:	2380      	movs	r3, #128	; 0x80
 800bd62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd66:	e20a      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a6b      	ldr	r2, [pc, #428]	; (800bf1c <UART_SetConfig+0x340>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d130      	bne.n	800bdd4 <UART_SetConfig+0x1f8>
 800bd72:	4b69      	ldr	r3, [pc, #420]	; (800bf18 <UART_SetConfig+0x33c>)
 800bd74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd76:	f003 0307 	and.w	r3, r3, #7
 800bd7a:	2b05      	cmp	r3, #5
 800bd7c:	d826      	bhi.n	800bdcc <UART_SetConfig+0x1f0>
 800bd7e:	a201      	add	r2, pc, #4	; (adr r2, 800bd84 <UART_SetConfig+0x1a8>)
 800bd80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd84:	0800bd9d 	.word	0x0800bd9d
 800bd88:	0800bda5 	.word	0x0800bda5
 800bd8c:	0800bdad 	.word	0x0800bdad
 800bd90:	0800bdb5 	.word	0x0800bdb5
 800bd94:	0800bdbd 	.word	0x0800bdbd
 800bd98:	0800bdc5 	.word	0x0800bdc5
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bda2:	e1ec      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bda4:	2304      	movs	r3, #4
 800bda6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdaa:	e1e8      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bdac:	2308      	movs	r3, #8
 800bdae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdb2:	e1e4      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bdb4:	2310      	movs	r3, #16
 800bdb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdba:	e1e0      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bdbc:	2320      	movs	r3, #32
 800bdbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdc2:	e1dc      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bdc4:	2340      	movs	r3, #64	; 0x40
 800bdc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdca:	e1d8      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bdcc:	2380      	movs	r3, #128	; 0x80
 800bdce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdd2:	e1d4      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a51      	ldr	r2, [pc, #324]	; (800bf20 <UART_SetConfig+0x344>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d130      	bne.n	800be40 <UART_SetConfig+0x264>
 800bdde:	4b4e      	ldr	r3, [pc, #312]	; (800bf18 <UART_SetConfig+0x33c>)
 800bde0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bde2:	f003 0307 	and.w	r3, r3, #7
 800bde6:	2b05      	cmp	r3, #5
 800bde8:	d826      	bhi.n	800be38 <UART_SetConfig+0x25c>
 800bdea:	a201      	add	r2, pc, #4	; (adr r2, 800bdf0 <UART_SetConfig+0x214>)
 800bdec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf0:	0800be09 	.word	0x0800be09
 800bdf4:	0800be11 	.word	0x0800be11
 800bdf8:	0800be19 	.word	0x0800be19
 800bdfc:	0800be21 	.word	0x0800be21
 800be00:	0800be29 	.word	0x0800be29
 800be04:	0800be31 	.word	0x0800be31
 800be08:	2300      	movs	r3, #0
 800be0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be0e:	e1b6      	b.n	800c17e <UART_SetConfig+0x5a2>
 800be10:	2304      	movs	r3, #4
 800be12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be16:	e1b2      	b.n	800c17e <UART_SetConfig+0x5a2>
 800be18:	2308      	movs	r3, #8
 800be1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be1e:	e1ae      	b.n	800c17e <UART_SetConfig+0x5a2>
 800be20:	2310      	movs	r3, #16
 800be22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be26:	e1aa      	b.n	800c17e <UART_SetConfig+0x5a2>
 800be28:	2320      	movs	r3, #32
 800be2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be2e:	e1a6      	b.n	800c17e <UART_SetConfig+0x5a2>
 800be30:	2340      	movs	r3, #64	; 0x40
 800be32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be36:	e1a2      	b.n	800c17e <UART_SetConfig+0x5a2>
 800be38:	2380      	movs	r3, #128	; 0x80
 800be3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be3e:	e19e      	b.n	800c17e <UART_SetConfig+0x5a2>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4a37      	ldr	r2, [pc, #220]	; (800bf24 <UART_SetConfig+0x348>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d130      	bne.n	800beac <UART_SetConfig+0x2d0>
 800be4a:	4b33      	ldr	r3, [pc, #204]	; (800bf18 <UART_SetConfig+0x33c>)
 800be4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be4e:	f003 0307 	and.w	r3, r3, #7
 800be52:	2b05      	cmp	r3, #5
 800be54:	d826      	bhi.n	800bea4 <UART_SetConfig+0x2c8>
 800be56:	a201      	add	r2, pc, #4	; (adr r2, 800be5c <UART_SetConfig+0x280>)
 800be58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5c:	0800be75 	.word	0x0800be75
 800be60:	0800be7d 	.word	0x0800be7d
 800be64:	0800be85 	.word	0x0800be85
 800be68:	0800be8d 	.word	0x0800be8d
 800be6c:	0800be95 	.word	0x0800be95
 800be70:	0800be9d 	.word	0x0800be9d
 800be74:	2300      	movs	r3, #0
 800be76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be7a:	e180      	b.n	800c17e <UART_SetConfig+0x5a2>
 800be7c:	2304      	movs	r3, #4
 800be7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be82:	e17c      	b.n	800c17e <UART_SetConfig+0x5a2>
 800be84:	2308      	movs	r3, #8
 800be86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be8a:	e178      	b.n	800c17e <UART_SetConfig+0x5a2>
 800be8c:	2310      	movs	r3, #16
 800be8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be92:	e174      	b.n	800c17e <UART_SetConfig+0x5a2>
 800be94:	2320      	movs	r3, #32
 800be96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be9a:	e170      	b.n	800c17e <UART_SetConfig+0x5a2>
 800be9c:	2340      	movs	r3, #64	; 0x40
 800be9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bea2:	e16c      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bea4:	2380      	movs	r3, #128	; 0x80
 800bea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beaa:	e168      	b.n	800c17e <UART_SetConfig+0x5a2>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a1d      	ldr	r2, [pc, #116]	; (800bf28 <UART_SetConfig+0x34c>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d142      	bne.n	800bf3c <UART_SetConfig+0x360>
 800beb6:	4b18      	ldr	r3, [pc, #96]	; (800bf18 <UART_SetConfig+0x33c>)
 800beb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beba:	f003 0307 	and.w	r3, r3, #7
 800bebe:	2b05      	cmp	r3, #5
 800bec0:	d838      	bhi.n	800bf34 <UART_SetConfig+0x358>
 800bec2:	a201      	add	r2, pc, #4	; (adr r2, 800bec8 <UART_SetConfig+0x2ec>)
 800bec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec8:	0800bee1 	.word	0x0800bee1
 800becc:	0800bee9 	.word	0x0800bee9
 800bed0:	0800bef1 	.word	0x0800bef1
 800bed4:	0800bef9 	.word	0x0800bef9
 800bed8:	0800bf01 	.word	0x0800bf01
 800bedc:	0800bf2d 	.word	0x0800bf2d
 800bee0:	2300      	movs	r3, #0
 800bee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bee6:	e14a      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bee8:	2304      	movs	r3, #4
 800beea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beee:	e146      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bef0:	2308      	movs	r3, #8
 800bef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bef6:	e142      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bef8:	2310      	movs	r3, #16
 800befa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800befe:	e13e      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bf00:	2320      	movs	r3, #32
 800bf02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf06:	e13a      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bf08:	cfff69f3 	.word	0xcfff69f3
 800bf0c:	58000c00 	.word	0x58000c00
 800bf10:	11fff4ff 	.word	0x11fff4ff
 800bf14:	40011000 	.word	0x40011000
 800bf18:	58024400 	.word	0x58024400
 800bf1c:	40004400 	.word	0x40004400
 800bf20:	40004800 	.word	0x40004800
 800bf24:	40004c00 	.word	0x40004c00
 800bf28:	40005000 	.word	0x40005000
 800bf2c:	2340      	movs	r3, #64	; 0x40
 800bf2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf32:	e124      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bf34:	2380      	movs	r3, #128	; 0x80
 800bf36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf3a:	e120      	b.n	800c17e <UART_SetConfig+0x5a2>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4acc      	ldr	r2, [pc, #816]	; (800c274 <UART_SetConfig+0x698>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d176      	bne.n	800c034 <UART_SetConfig+0x458>
 800bf46:	4bcc      	ldr	r3, [pc, #816]	; (800c278 <UART_SetConfig+0x69c>)
 800bf48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bf4e:	2b28      	cmp	r3, #40	; 0x28
 800bf50:	d86c      	bhi.n	800c02c <UART_SetConfig+0x450>
 800bf52:	a201      	add	r2, pc, #4	; (adr r2, 800bf58 <UART_SetConfig+0x37c>)
 800bf54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf58:	0800bffd 	.word	0x0800bffd
 800bf5c:	0800c02d 	.word	0x0800c02d
 800bf60:	0800c02d 	.word	0x0800c02d
 800bf64:	0800c02d 	.word	0x0800c02d
 800bf68:	0800c02d 	.word	0x0800c02d
 800bf6c:	0800c02d 	.word	0x0800c02d
 800bf70:	0800c02d 	.word	0x0800c02d
 800bf74:	0800c02d 	.word	0x0800c02d
 800bf78:	0800c005 	.word	0x0800c005
 800bf7c:	0800c02d 	.word	0x0800c02d
 800bf80:	0800c02d 	.word	0x0800c02d
 800bf84:	0800c02d 	.word	0x0800c02d
 800bf88:	0800c02d 	.word	0x0800c02d
 800bf8c:	0800c02d 	.word	0x0800c02d
 800bf90:	0800c02d 	.word	0x0800c02d
 800bf94:	0800c02d 	.word	0x0800c02d
 800bf98:	0800c00d 	.word	0x0800c00d
 800bf9c:	0800c02d 	.word	0x0800c02d
 800bfa0:	0800c02d 	.word	0x0800c02d
 800bfa4:	0800c02d 	.word	0x0800c02d
 800bfa8:	0800c02d 	.word	0x0800c02d
 800bfac:	0800c02d 	.word	0x0800c02d
 800bfb0:	0800c02d 	.word	0x0800c02d
 800bfb4:	0800c02d 	.word	0x0800c02d
 800bfb8:	0800c015 	.word	0x0800c015
 800bfbc:	0800c02d 	.word	0x0800c02d
 800bfc0:	0800c02d 	.word	0x0800c02d
 800bfc4:	0800c02d 	.word	0x0800c02d
 800bfc8:	0800c02d 	.word	0x0800c02d
 800bfcc:	0800c02d 	.word	0x0800c02d
 800bfd0:	0800c02d 	.word	0x0800c02d
 800bfd4:	0800c02d 	.word	0x0800c02d
 800bfd8:	0800c01d 	.word	0x0800c01d
 800bfdc:	0800c02d 	.word	0x0800c02d
 800bfe0:	0800c02d 	.word	0x0800c02d
 800bfe4:	0800c02d 	.word	0x0800c02d
 800bfe8:	0800c02d 	.word	0x0800c02d
 800bfec:	0800c02d 	.word	0x0800c02d
 800bff0:	0800c02d 	.word	0x0800c02d
 800bff4:	0800c02d 	.word	0x0800c02d
 800bff8:	0800c025 	.word	0x0800c025
 800bffc:	2301      	movs	r3, #1
 800bffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c002:	e0bc      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c004:	2304      	movs	r3, #4
 800c006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c00a:	e0b8      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c00c:	2308      	movs	r3, #8
 800c00e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c012:	e0b4      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c014:	2310      	movs	r3, #16
 800c016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c01a:	e0b0      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c01c:	2320      	movs	r3, #32
 800c01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c022:	e0ac      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c024:	2340      	movs	r3, #64	; 0x40
 800c026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c02a:	e0a8      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c02c:	2380      	movs	r3, #128	; 0x80
 800c02e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c032:	e0a4      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4a90      	ldr	r2, [pc, #576]	; (800c27c <UART_SetConfig+0x6a0>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d130      	bne.n	800c0a0 <UART_SetConfig+0x4c4>
 800c03e:	4b8e      	ldr	r3, [pc, #568]	; (800c278 <UART_SetConfig+0x69c>)
 800c040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c042:	f003 0307 	and.w	r3, r3, #7
 800c046:	2b05      	cmp	r3, #5
 800c048:	d826      	bhi.n	800c098 <UART_SetConfig+0x4bc>
 800c04a:	a201      	add	r2, pc, #4	; (adr r2, 800c050 <UART_SetConfig+0x474>)
 800c04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c050:	0800c069 	.word	0x0800c069
 800c054:	0800c071 	.word	0x0800c071
 800c058:	0800c079 	.word	0x0800c079
 800c05c:	0800c081 	.word	0x0800c081
 800c060:	0800c089 	.word	0x0800c089
 800c064:	0800c091 	.word	0x0800c091
 800c068:	2300      	movs	r3, #0
 800c06a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c06e:	e086      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c070:	2304      	movs	r3, #4
 800c072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c076:	e082      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c078:	2308      	movs	r3, #8
 800c07a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c07e:	e07e      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c080:	2310      	movs	r3, #16
 800c082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c086:	e07a      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c088:	2320      	movs	r3, #32
 800c08a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c08e:	e076      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c090:	2340      	movs	r3, #64	; 0x40
 800c092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c096:	e072      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c098:	2380      	movs	r3, #128	; 0x80
 800c09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c09e:	e06e      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4a76      	ldr	r2, [pc, #472]	; (800c280 <UART_SetConfig+0x6a4>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d130      	bne.n	800c10c <UART_SetConfig+0x530>
 800c0aa:	4b73      	ldr	r3, [pc, #460]	; (800c278 <UART_SetConfig+0x69c>)
 800c0ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ae:	f003 0307 	and.w	r3, r3, #7
 800c0b2:	2b05      	cmp	r3, #5
 800c0b4:	d826      	bhi.n	800c104 <UART_SetConfig+0x528>
 800c0b6:	a201      	add	r2, pc, #4	; (adr r2, 800c0bc <UART_SetConfig+0x4e0>)
 800c0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0bc:	0800c0d5 	.word	0x0800c0d5
 800c0c0:	0800c0dd 	.word	0x0800c0dd
 800c0c4:	0800c0e5 	.word	0x0800c0e5
 800c0c8:	0800c0ed 	.word	0x0800c0ed
 800c0cc:	0800c0f5 	.word	0x0800c0f5
 800c0d0:	0800c0fd 	.word	0x0800c0fd
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0da:	e050      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c0dc:	2304      	movs	r3, #4
 800c0de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0e2:	e04c      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c0e4:	2308      	movs	r3, #8
 800c0e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0ea:	e048      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c0ec:	2310      	movs	r3, #16
 800c0ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0f2:	e044      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c0f4:	2320      	movs	r3, #32
 800c0f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c0fa:	e040      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c0fc:	2340      	movs	r3, #64	; 0x40
 800c0fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c102:	e03c      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c104:	2380      	movs	r3, #128	; 0x80
 800c106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c10a:	e038      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4a5c      	ldr	r2, [pc, #368]	; (800c284 <UART_SetConfig+0x6a8>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d130      	bne.n	800c178 <UART_SetConfig+0x59c>
 800c116:	4b58      	ldr	r3, [pc, #352]	; (800c278 <UART_SetConfig+0x69c>)
 800c118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c11a:	f003 0307 	and.w	r3, r3, #7
 800c11e:	2b05      	cmp	r3, #5
 800c120:	d826      	bhi.n	800c170 <UART_SetConfig+0x594>
 800c122:	a201      	add	r2, pc, #4	; (adr r2, 800c128 <UART_SetConfig+0x54c>)
 800c124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c128:	0800c141 	.word	0x0800c141
 800c12c:	0800c149 	.word	0x0800c149
 800c130:	0800c151 	.word	0x0800c151
 800c134:	0800c159 	.word	0x0800c159
 800c138:	0800c161 	.word	0x0800c161
 800c13c:	0800c169 	.word	0x0800c169
 800c140:	2302      	movs	r3, #2
 800c142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c146:	e01a      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c148:	2304      	movs	r3, #4
 800c14a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c14e:	e016      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c150:	2308      	movs	r3, #8
 800c152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c156:	e012      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c158:	2310      	movs	r3, #16
 800c15a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c15e:	e00e      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c160:	2320      	movs	r3, #32
 800c162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c166:	e00a      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c168:	2340      	movs	r3, #64	; 0x40
 800c16a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c16e:	e006      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c170:	2380      	movs	r3, #128	; 0x80
 800c172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c176:	e002      	b.n	800c17e <UART_SetConfig+0x5a2>
 800c178:	2380      	movs	r3, #128	; 0x80
 800c17a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a40      	ldr	r2, [pc, #256]	; (800c284 <UART_SetConfig+0x6a8>)
 800c184:	4293      	cmp	r3, r2
 800c186:	f040 80ef 	bne.w	800c368 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c18a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c18e:	2b20      	cmp	r3, #32
 800c190:	dc46      	bgt.n	800c220 <UART_SetConfig+0x644>
 800c192:	2b02      	cmp	r3, #2
 800c194:	f2c0 8081 	blt.w	800c29a <UART_SetConfig+0x6be>
 800c198:	3b02      	subs	r3, #2
 800c19a:	2b1e      	cmp	r3, #30
 800c19c:	d87d      	bhi.n	800c29a <UART_SetConfig+0x6be>
 800c19e:	a201      	add	r2, pc, #4	; (adr r2, 800c1a4 <UART_SetConfig+0x5c8>)
 800c1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a4:	0800c227 	.word	0x0800c227
 800c1a8:	0800c29b 	.word	0x0800c29b
 800c1ac:	0800c22f 	.word	0x0800c22f
 800c1b0:	0800c29b 	.word	0x0800c29b
 800c1b4:	0800c29b 	.word	0x0800c29b
 800c1b8:	0800c29b 	.word	0x0800c29b
 800c1bc:	0800c23f 	.word	0x0800c23f
 800c1c0:	0800c29b 	.word	0x0800c29b
 800c1c4:	0800c29b 	.word	0x0800c29b
 800c1c8:	0800c29b 	.word	0x0800c29b
 800c1cc:	0800c29b 	.word	0x0800c29b
 800c1d0:	0800c29b 	.word	0x0800c29b
 800c1d4:	0800c29b 	.word	0x0800c29b
 800c1d8:	0800c29b 	.word	0x0800c29b
 800c1dc:	0800c24f 	.word	0x0800c24f
 800c1e0:	0800c29b 	.word	0x0800c29b
 800c1e4:	0800c29b 	.word	0x0800c29b
 800c1e8:	0800c29b 	.word	0x0800c29b
 800c1ec:	0800c29b 	.word	0x0800c29b
 800c1f0:	0800c29b 	.word	0x0800c29b
 800c1f4:	0800c29b 	.word	0x0800c29b
 800c1f8:	0800c29b 	.word	0x0800c29b
 800c1fc:	0800c29b 	.word	0x0800c29b
 800c200:	0800c29b 	.word	0x0800c29b
 800c204:	0800c29b 	.word	0x0800c29b
 800c208:	0800c29b 	.word	0x0800c29b
 800c20c:	0800c29b 	.word	0x0800c29b
 800c210:	0800c29b 	.word	0x0800c29b
 800c214:	0800c29b 	.word	0x0800c29b
 800c218:	0800c29b 	.word	0x0800c29b
 800c21c:	0800c28d 	.word	0x0800c28d
 800c220:	2b40      	cmp	r3, #64	; 0x40
 800c222:	d036      	beq.n	800c292 <UART_SetConfig+0x6b6>
 800c224:	e039      	b.n	800c29a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c226:	f7fc ff71 	bl	800910c <HAL_RCCEx_GetD3PCLK1Freq>
 800c22a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c22c:	e03b      	b.n	800c2a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c22e:	f107 0314 	add.w	r3, r7, #20
 800c232:	4618      	mov	r0, r3
 800c234:	f7fc ff80 	bl	8009138 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c23c:	e033      	b.n	800c2a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c23e:	f107 0308 	add.w	r3, r7, #8
 800c242:	4618      	mov	r0, r3
 800c244:	f7fd f8cc 	bl	80093e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c24c:	e02b      	b.n	800c2a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c24e:	4b0a      	ldr	r3, [pc, #40]	; (800c278 <UART_SetConfig+0x69c>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f003 0320 	and.w	r3, r3, #32
 800c256:	2b00      	cmp	r3, #0
 800c258:	d009      	beq.n	800c26e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c25a:	4b07      	ldr	r3, [pc, #28]	; (800c278 <UART_SetConfig+0x69c>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	08db      	lsrs	r3, r3, #3
 800c260:	f003 0303 	and.w	r3, r3, #3
 800c264:	4a08      	ldr	r2, [pc, #32]	; (800c288 <UART_SetConfig+0x6ac>)
 800c266:	fa22 f303 	lsr.w	r3, r2, r3
 800c26a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c26c:	e01b      	b.n	800c2a6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800c26e:	4b06      	ldr	r3, [pc, #24]	; (800c288 <UART_SetConfig+0x6ac>)
 800c270:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c272:	e018      	b.n	800c2a6 <UART_SetConfig+0x6ca>
 800c274:	40011400 	.word	0x40011400
 800c278:	58024400 	.word	0x58024400
 800c27c:	40007800 	.word	0x40007800
 800c280:	40007c00 	.word	0x40007c00
 800c284:	58000c00 	.word	0x58000c00
 800c288:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c28c:	4bc4      	ldr	r3, [pc, #784]	; (800c5a0 <UART_SetConfig+0x9c4>)
 800c28e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c290:	e009      	b.n	800c2a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c296:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c298:	e005      	b.n	800c2a6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800c29a:	2300      	movs	r3, #0
 800c29c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c2a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	f000 81da 	beq.w	800c662 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b2:	4abc      	ldr	r2, [pc, #752]	; (800c5a4 <UART_SetConfig+0x9c8>)
 800c2b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2c0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	685a      	ldr	r2, [r3, #4]
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	005b      	lsls	r3, r3, #1
 800c2ca:	4413      	add	r3, r2
 800c2cc:	6a3a      	ldr	r2, [r7, #32]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d305      	bcc.n	800c2de <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c2d8:	6a3a      	ldr	r2, [r7, #32]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d903      	bls.n	800c2e6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c2e4:	e1bd      	b.n	800c662 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f04f 0100 	mov.w	r1, #0
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f2:	4aac      	ldr	r2, [pc, #688]	; (800c5a4 <UART_SetConfig+0x9c8>)
 800c2f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2f8:	b29a      	uxth	r2, r3
 800c2fa:	f04f 0300 	mov.w	r3, #0
 800c2fe:	f7f3 ffef 	bl	80002e0 <__aeabi_uldivmod>
 800c302:	4602      	mov	r2, r0
 800c304:	460b      	mov	r3, r1
 800c306:	4610      	mov	r0, r2
 800c308:	4619      	mov	r1, r3
 800c30a:	f04f 0200 	mov.w	r2, #0
 800c30e:	f04f 0300 	mov.w	r3, #0
 800c312:	020b      	lsls	r3, r1, #8
 800c314:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c318:	0202      	lsls	r2, r0, #8
 800c31a:	6879      	ldr	r1, [r7, #4]
 800c31c:	6849      	ldr	r1, [r1, #4]
 800c31e:	0849      	lsrs	r1, r1, #1
 800c320:	4608      	mov	r0, r1
 800c322:	f04f 0100 	mov.w	r1, #0
 800c326:	1814      	adds	r4, r2, r0
 800c328:	eb43 0501 	adc.w	r5, r3, r1
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	461a      	mov	r2, r3
 800c332:	f04f 0300 	mov.w	r3, #0
 800c336:	4620      	mov	r0, r4
 800c338:	4629      	mov	r1, r5
 800c33a:	f7f3 ffd1 	bl	80002e0 <__aeabi_uldivmod>
 800c33e:	4602      	mov	r2, r0
 800c340:	460b      	mov	r3, r1
 800c342:	4613      	mov	r3, r2
 800c344:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c34c:	d308      	bcc.n	800c360 <UART_SetConfig+0x784>
 800c34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c350:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c354:	d204      	bcs.n	800c360 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c35c:	60da      	str	r2, [r3, #12]
 800c35e:	e180      	b.n	800c662 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800c360:	2301      	movs	r3, #1
 800c362:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c366:	e17c      	b.n	800c662 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	69db      	ldr	r3, [r3, #28]
 800c36c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c370:	f040 80be 	bne.w	800c4f0 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800c374:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c378:	2b20      	cmp	r3, #32
 800c37a:	dc49      	bgt.n	800c410 <UART_SetConfig+0x834>
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	db7c      	blt.n	800c47a <UART_SetConfig+0x89e>
 800c380:	2b20      	cmp	r3, #32
 800c382:	d87a      	bhi.n	800c47a <UART_SetConfig+0x89e>
 800c384:	a201      	add	r2, pc, #4	; (adr r2, 800c38c <UART_SetConfig+0x7b0>)
 800c386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c38a:	bf00      	nop
 800c38c:	0800c417 	.word	0x0800c417
 800c390:	0800c41f 	.word	0x0800c41f
 800c394:	0800c47b 	.word	0x0800c47b
 800c398:	0800c47b 	.word	0x0800c47b
 800c39c:	0800c427 	.word	0x0800c427
 800c3a0:	0800c47b 	.word	0x0800c47b
 800c3a4:	0800c47b 	.word	0x0800c47b
 800c3a8:	0800c47b 	.word	0x0800c47b
 800c3ac:	0800c437 	.word	0x0800c437
 800c3b0:	0800c47b 	.word	0x0800c47b
 800c3b4:	0800c47b 	.word	0x0800c47b
 800c3b8:	0800c47b 	.word	0x0800c47b
 800c3bc:	0800c47b 	.word	0x0800c47b
 800c3c0:	0800c47b 	.word	0x0800c47b
 800c3c4:	0800c47b 	.word	0x0800c47b
 800c3c8:	0800c47b 	.word	0x0800c47b
 800c3cc:	0800c447 	.word	0x0800c447
 800c3d0:	0800c47b 	.word	0x0800c47b
 800c3d4:	0800c47b 	.word	0x0800c47b
 800c3d8:	0800c47b 	.word	0x0800c47b
 800c3dc:	0800c47b 	.word	0x0800c47b
 800c3e0:	0800c47b 	.word	0x0800c47b
 800c3e4:	0800c47b 	.word	0x0800c47b
 800c3e8:	0800c47b 	.word	0x0800c47b
 800c3ec:	0800c47b 	.word	0x0800c47b
 800c3f0:	0800c47b 	.word	0x0800c47b
 800c3f4:	0800c47b 	.word	0x0800c47b
 800c3f8:	0800c47b 	.word	0x0800c47b
 800c3fc:	0800c47b 	.word	0x0800c47b
 800c400:	0800c47b 	.word	0x0800c47b
 800c404:	0800c47b 	.word	0x0800c47b
 800c408:	0800c47b 	.word	0x0800c47b
 800c40c:	0800c46d 	.word	0x0800c46d
 800c410:	2b40      	cmp	r3, #64	; 0x40
 800c412:	d02e      	beq.n	800c472 <UART_SetConfig+0x896>
 800c414:	e031      	b.n	800c47a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c416:	f7fb f9f9 	bl	800780c <HAL_RCC_GetPCLK1Freq>
 800c41a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c41c:	e033      	b.n	800c486 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c41e:	f7fb fa0b 	bl	8007838 <HAL_RCC_GetPCLK2Freq>
 800c422:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c424:	e02f      	b.n	800c486 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c426:	f107 0314 	add.w	r3, r7, #20
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7fc fe84 	bl	8009138 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c430:	69bb      	ldr	r3, [r7, #24]
 800c432:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c434:	e027      	b.n	800c486 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c436:	f107 0308 	add.w	r3, r7, #8
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fc ffd0 	bl	80093e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c444:	e01f      	b.n	800c486 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c446:	4b58      	ldr	r3, [pc, #352]	; (800c5a8 <UART_SetConfig+0x9cc>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f003 0320 	and.w	r3, r3, #32
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d009      	beq.n	800c466 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c452:	4b55      	ldr	r3, [pc, #340]	; (800c5a8 <UART_SetConfig+0x9cc>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	08db      	lsrs	r3, r3, #3
 800c458:	f003 0303 	and.w	r3, r3, #3
 800c45c:	4a53      	ldr	r2, [pc, #332]	; (800c5ac <UART_SetConfig+0x9d0>)
 800c45e:	fa22 f303 	lsr.w	r3, r2, r3
 800c462:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c464:	e00f      	b.n	800c486 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800c466:	4b51      	ldr	r3, [pc, #324]	; (800c5ac <UART_SetConfig+0x9d0>)
 800c468:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c46a:	e00c      	b.n	800c486 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c46c:	4b4c      	ldr	r3, [pc, #304]	; (800c5a0 <UART_SetConfig+0x9c4>)
 800c46e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c470:	e009      	b.n	800c486 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c476:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c478:	e005      	b.n	800c486 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800c47a:	2300      	movs	r3, #0
 800c47c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c47e:	2301      	movs	r3, #1
 800c480:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c484:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f000 80ea 	beq.w	800c662 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c492:	4a44      	ldr	r2, [pc, #272]	; (800c5a4 <UART_SetConfig+0x9c8>)
 800c494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c498:	461a      	mov	r2, r3
 800c49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4a0:	005a      	lsls	r2, r3, #1
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	085b      	lsrs	r3, r3, #1
 800c4a8:	441a      	add	r2, r3
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b6:	2b0f      	cmp	r3, #15
 800c4b8:	d916      	bls.n	800c4e8 <UART_SetConfig+0x90c>
 800c4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4c0:	d212      	bcs.n	800c4e8 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c4:	b29b      	uxth	r3, r3
 800c4c6:	f023 030f 	bic.w	r3, r3, #15
 800c4ca:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ce:	085b      	lsrs	r3, r3, #1
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	f003 0307 	and.w	r3, r3, #7
 800c4d6:	b29a      	uxth	r2, r3
 800c4d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c4e4:	60da      	str	r2, [r3, #12]
 800c4e6:	e0bc      	b.n	800c662 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c4ee:	e0b8      	b.n	800c662 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c4f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c4f4:	2b20      	cmp	r3, #32
 800c4f6:	dc4b      	bgt.n	800c590 <UART_SetConfig+0x9b4>
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f2c0 8087 	blt.w	800c60c <UART_SetConfig+0xa30>
 800c4fe:	2b20      	cmp	r3, #32
 800c500:	f200 8084 	bhi.w	800c60c <UART_SetConfig+0xa30>
 800c504:	a201      	add	r2, pc, #4	; (adr r2, 800c50c <UART_SetConfig+0x930>)
 800c506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c50a:	bf00      	nop
 800c50c:	0800c597 	.word	0x0800c597
 800c510:	0800c5b1 	.word	0x0800c5b1
 800c514:	0800c60d 	.word	0x0800c60d
 800c518:	0800c60d 	.word	0x0800c60d
 800c51c:	0800c5b9 	.word	0x0800c5b9
 800c520:	0800c60d 	.word	0x0800c60d
 800c524:	0800c60d 	.word	0x0800c60d
 800c528:	0800c60d 	.word	0x0800c60d
 800c52c:	0800c5c9 	.word	0x0800c5c9
 800c530:	0800c60d 	.word	0x0800c60d
 800c534:	0800c60d 	.word	0x0800c60d
 800c538:	0800c60d 	.word	0x0800c60d
 800c53c:	0800c60d 	.word	0x0800c60d
 800c540:	0800c60d 	.word	0x0800c60d
 800c544:	0800c60d 	.word	0x0800c60d
 800c548:	0800c60d 	.word	0x0800c60d
 800c54c:	0800c5d9 	.word	0x0800c5d9
 800c550:	0800c60d 	.word	0x0800c60d
 800c554:	0800c60d 	.word	0x0800c60d
 800c558:	0800c60d 	.word	0x0800c60d
 800c55c:	0800c60d 	.word	0x0800c60d
 800c560:	0800c60d 	.word	0x0800c60d
 800c564:	0800c60d 	.word	0x0800c60d
 800c568:	0800c60d 	.word	0x0800c60d
 800c56c:	0800c60d 	.word	0x0800c60d
 800c570:	0800c60d 	.word	0x0800c60d
 800c574:	0800c60d 	.word	0x0800c60d
 800c578:	0800c60d 	.word	0x0800c60d
 800c57c:	0800c60d 	.word	0x0800c60d
 800c580:	0800c60d 	.word	0x0800c60d
 800c584:	0800c60d 	.word	0x0800c60d
 800c588:	0800c60d 	.word	0x0800c60d
 800c58c:	0800c5ff 	.word	0x0800c5ff
 800c590:	2b40      	cmp	r3, #64	; 0x40
 800c592:	d037      	beq.n	800c604 <UART_SetConfig+0xa28>
 800c594:	e03a      	b.n	800c60c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c596:	f7fb f939 	bl	800780c <HAL_RCC_GetPCLK1Freq>
 800c59a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c59c:	e03c      	b.n	800c618 <UART_SetConfig+0xa3c>
 800c59e:	bf00      	nop
 800c5a0:	003d0900 	.word	0x003d0900
 800c5a4:	0800f8e4 	.word	0x0800f8e4
 800c5a8:	58024400 	.word	0x58024400
 800c5ac:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c5b0:	f7fb f942 	bl	8007838 <HAL_RCC_GetPCLK2Freq>
 800c5b4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c5b6:	e02f      	b.n	800c618 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5b8:	f107 0314 	add.w	r3, r7, #20
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7fc fdbb 	bl	8009138 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c5c6:	e027      	b.n	800c618 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5c8:	f107 0308 	add.w	r3, r7, #8
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7fc ff07 	bl	80093e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c5d6:	e01f      	b.n	800c618 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5d8:	4b2c      	ldr	r3, [pc, #176]	; (800c68c <UART_SetConfig+0xab0>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f003 0320 	and.w	r3, r3, #32
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d009      	beq.n	800c5f8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c5e4:	4b29      	ldr	r3, [pc, #164]	; (800c68c <UART_SetConfig+0xab0>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	08db      	lsrs	r3, r3, #3
 800c5ea:	f003 0303 	and.w	r3, r3, #3
 800c5ee:	4a28      	ldr	r2, [pc, #160]	; (800c690 <UART_SetConfig+0xab4>)
 800c5f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c5f6:	e00f      	b.n	800c618 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c5f8:	4b25      	ldr	r3, [pc, #148]	; (800c690 <UART_SetConfig+0xab4>)
 800c5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c5fc:	e00c      	b.n	800c618 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c5fe:	4b25      	ldr	r3, [pc, #148]	; (800c694 <UART_SetConfig+0xab8>)
 800c600:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c602:	e009      	b.n	800c618 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c604:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c608:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c60a:	e005      	b.n	800c618 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c60c:	2300      	movs	r3, #0
 800c60e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c616:	bf00      	nop
    }

    if (pclk != 0U)
 800c618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d021      	beq.n	800c662 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c622:	4a1d      	ldr	r2, [pc, #116]	; (800c698 <UART_SetConfig+0xabc>)
 800c624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c628:	461a      	mov	r2, r3
 800c62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62c:	fbb3 f2f2 	udiv	r2, r3, r2
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	685b      	ldr	r3, [r3, #4]
 800c634:	085b      	lsrs	r3, r3, #1
 800c636:	441a      	add	r2, r3
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c640:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c644:	2b0f      	cmp	r3, #15
 800c646:	d909      	bls.n	800c65c <UART_SetConfig+0xa80>
 800c648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c64e:	d205      	bcs.n	800c65c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c652:	b29a      	uxth	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	60da      	str	r2, [r3, #12]
 800c65a:	e002      	b.n	800c662 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c65c:	2301      	movs	r3, #1
 800c65e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2201      	movs	r2, #1
 800c666:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2201      	movs	r2, #1
 800c66e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2200      	movs	r2, #0
 800c676:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c67e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c682:	4618      	mov	r0, r3
 800c684:	3738      	adds	r7, #56	; 0x38
 800c686:	46bd      	mov	sp, r7
 800c688:	bdb0      	pop	{r4, r5, r7, pc}
 800c68a:	bf00      	nop
 800c68c:	58024400 	.word	0x58024400
 800c690:	03d09000 	.word	0x03d09000
 800c694:	003d0900 	.word	0x003d0900
 800c698:	0800f8e4 	.word	0x0800f8e4

0800c69c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6a8:	f003 0301 	and.w	r3, r3, #1
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d00a      	beq.n	800c6c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	430a      	orrs	r2, r1
 800c6c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ca:	f003 0302 	and.w	r3, r3, #2
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d00a      	beq.n	800c6e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	430a      	orrs	r2, r1
 800c6e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ec:	f003 0304 	and.w	r3, r3, #4
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00a      	beq.n	800c70a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	430a      	orrs	r2, r1
 800c708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c70e:	f003 0308 	and.w	r3, r3, #8
 800c712:	2b00      	cmp	r3, #0
 800c714:	d00a      	beq.n	800c72c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	430a      	orrs	r2, r1
 800c72a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c730:	f003 0310 	and.w	r3, r3, #16
 800c734:	2b00      	cmp	r3, #0
 800c736:	d00a      	beq.n	800c74e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	430a      	orrs	r2, r1
 800c74c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c752:	f003 0320 	and.w	r3, r3, #32
 800c756:	2b00      	cmp	r3, #0
 800c758:	d00a      	beq.n	800c770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	430a      	orrs	r2, r1
 800c76e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d01a      	beq.n	800c7b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	430a      	orrs	r2, r1
 800c790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c79a:	d10a      	bne.n	800c7b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	430a      	orrs	r2, r1
 800c7b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00a      	beq.n	800c7d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	430a      	orrs	r2, r1
 800c7d2:	605a      	str	r2, [r3, #4]
  }
}
 800c7d4:	bf00      	nop
 800c7d6:	370c      	adds	r7, #12
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b086      	sub	sp, #24
 800c7e4:	af02      	add	r7, sp, #8
 800c7e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c7f0:	f7f7 fdc2 	bl	8004378 <HAL_GetTick>
 800c7f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f003 0308 	and.w	r3, r3, #8
 800c800:	2b08      	cmp	r3, #8
 800c802:	d10e      	bne.n	800c822 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c808:	9300      	str	r3, [sp, #0]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2200      	movs	r2, #0
 800c80e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 f82f 	bl	800c876 <UART_WaitOnFlagUntilTimeout>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d001      	beq.n	800c822 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c81e:	2303      	movs	r3, #3
 800c820:	e025      	b.n	800c86e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f003 0304 	and.w	r3, r3, #4
 800c82c:	2b04      	cmp	r3, #4
 800c82e:	d10e      	bne.n	800c84e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c830:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2200      	movs	r2, #0
 800c83a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 f819 	bl	800c876 <UART_WaitOnFlagUntilTimeout>
 800c844:	4603      	mov	r3, r0
 800c846:	2b00      	cmp	r3, #0
 800c848:	d001      	beq.n	800c84e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c84a:	2303      	movs	r3, #3
 800c84c:	e00f      	b.n	800c86e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2220      	movs	r2, #32
 800c852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2220      	movs	r2, #32
 800c85a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2200      	movs	r2, #0
 800c862:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c86c:	2300      	movs	r3, #0
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b09c      	sub	sp, #112	; 0x70
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	60f8      	str	r0, [r7, #12]
 800c87e:	60b9      	str	r1, [r7, #8]
 800c880:	603b      	str	r3, [r7, #0]
 800c882:	4613      	mov	r3, r2
 800c884:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c886:	e0a9      	b.n	800c9dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c88e:	f000 80a5 	beq.w	800c9dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c892:	f7f7 fd71 	bl	8004378 <HAL_GetTick>
 800c896:	4602      	mov	r2, r0
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	1ad3      	subs	r3, r2, r3
 800c89c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d302      	bcc.n	800c8a8 <UART_WaitOnFlagUntilTimeout+0x32>
 800c8a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d140      	bne.n	800c92a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8b0:	e853 3f00 	ldrex	r3, [r3]
 800c8b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c8b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c8bc:	667b      	str	r3, [r7, #100]	; 0x64
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c8c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c8cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c8ce:	e841 2300 	strex	r3, r2, [r1]
 800c8d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c8d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d1e6      	bne.n	800c8a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	3308      	adds	r3, #8
 800c8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8e4:	e853 3f00 	ldrex	r3, [r3]
 800c8e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ec:	f023 0301 	bic.w	r3, r3, #1
 800c8f0:	663b      	str	r3, [r7, #96]	; 0x60
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	3308      	adds	r3, #8
 800c8f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c8fa:	64ba      	str	r2, [r7, #72]	; 0x48
 800c8fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c902:	e841 2300 	strex	r3, r2, [r1]
 800c906:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d1e5      	bne.n	800c8da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	2220      	movs	r2, #32
 800c912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2220      	movs	r2, #32
 800c91a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2200      	movs	r2, #0
 800c922:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c926:	2303      	movs	r3, #3
 800c928:	e069      	b.n	800c9fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f003 0304 	and.w	r3, r3, #4
 800c934:	2b00      	cmp	r3, #0
 800c936:	d051      	beq.n	800c9dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	69db      	ldr	r3, [r3, #28]
 800c93e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c946:	d149      	bne.n	800c9dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c950:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95a:	e853 3f00 	ldrex	r3, [r3]
 800c95e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c962:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c966:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	461a      	mov	r2, r3
 800c96e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c970:	637b      	str	r3, [r7, #52]	; 0x34
 800c972:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c974:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c978:	e841 2300 	strex	r3, r2, [r1]
 800c97c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c980:	2b00      	cmp	r3, #0
 800c982:	d1e6      	bne.n	800c952 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	3308      	adds	r3, #8
 800c98a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	e853 3f00 	ldrex	r3, [r3]
 800c992:	613b      	str	r3, [r7, #16]
   return(result);
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	f023 0301 	bic.w	r3, r3, #1
 800c99a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	3308      	adds	r3, #8
 800c9a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c9a4:	623a      	str	r2, [r7, #32]
 800c9a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a8:	69f9      	ldr	r1, [r7, #28]
 800c9aa:	6a3a      	ldr	r2, [r7, #32]
 800c9ac:	e841 2300 	strex	r3, r2, [r1]
 800c9b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c9b2:	69bb      	ldr	r3, [r7, #24]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d1e5      	bne.n	800c984 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2220      	movs	r2, #32
 800c9bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2220      	movs	r2, #32
 800c9c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2220      	movs	r2, #32
 800c9cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c9d8:	2303      	movs	r3, #3
 800c9da:	e010      	b.n	800c9fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	69da      	ldr	r2, [r3, #28]
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	4013      	ands	r3, r2
 800c9e6:	68ba      	ldr	r2, [r7, #8]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	bf0c      	ite	eq
 800c9ec:	2301      	moveq	r3, #1
 800c9ee:	2300      	movne	r3, #0
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	79fb      	ldrb	r3, [r7, #7]
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	f43f af46 	beq.w	800c888 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3770      	adds	r7, #112	; 0x70
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ca06:	b480      	push	{r7}
 800ca08:	b085      	sub	sp, #20
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d101      	bne.n	800ca1c <HAL_UARTEx_DisableFifoMode+0x16>
 800ca18:	2302      	movs	r3, #2
 800ca1a:	e027      	b.n	800ca6c <HAL_UARTEx_DisableFifoMode+0x66>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2224      	movs	r2, #36	; 0x24
 800ca28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	681a      	ldr	r2, [r3, #0]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f022 0201 	bic.w	r2, r2, #1
 800ca42:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ca4a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	68fa      	ldr	r2, [r7, #12]
 800ca58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2220      	movs	r2, #32
 800ca5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ca6a:	2300      	movs	r3, #0
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3714      	adds	r7, #20
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr

0800ca78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d101      	bne.n	800ca90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ca8c:	2302      	movs	r3, #2
 800ca8e:	e02d      	b.n	800caec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2201      	movs	r2, #1
 800ca94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2224      	movs	r2, #36	; 0x24
 800ca9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f022 0201 	bic.w	r2, r2, #1
 800cab6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	689b      	ldr	r3, [r3, #8]
 800cabe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	683a      	ldr	r2, [r7, #0]
 800cac8:	430a      	orrs	r2, r1
 800caca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f000 f84f 	bl	800cb70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	68fa      	ldr	r2, [r7, #12]
 800cad8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2220      	movs	r2, #32
 800cade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2200      	movs	r2, #0
 800cae6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800caea:	2300      	movs	r3, #0
}
 800caec:	4618      	mov	r0, r3
 800caee:	3710      	adds	r7, #16
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d101      	bne.n	800cb0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cb08:	2302      	movs	r3, #2
 800cb0a:	e02d      	b.n	800cb68 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2224      	movs	r2, #36	; 0x24
 800cb18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f022 0201 	bic.w	r2, r2, #1
 800cb32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	689b      	ldr	r3, [r3, #8]
 800cb3a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	683a      	ldr	r2, [r7, #0]
 800cb44:	430a      	orrs	r2, r1
 800cb46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 f811 	bl	800cb70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	68fa      	ldr	r2, [r7, #12]
 800cb54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2220      	movs	r2, #32
 800cb5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2200      	movs	r2, #0
 800cb62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b085      	sub	sp, #20
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d108      	bne.n	800cb92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2201      	movs	r2, #1
 800cb84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cb90:	e031      	b.n	800cbf6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cb92:	2310      	movs	r3, #16
 800cb94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cb96:	2310      	movs	r3, #16
 800cb98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	689b      	ldr	r3, [r3, #8]
 800cba0:	0e5b      	lsrs	r3, r3, #25
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	f003 0307 	and.w	r3, r3, #7
 800cba8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	689b      	ldr	r3, [r3, #8]
 800cbb0:	0f5b      	lsrs	r3, r3, #29
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	f003 0307 	and.w	r3, r3, #7
 800cbb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cbba:	7bbb      	ldrb	r3, [r7, #14]
 800cbbc:	7b3a      	ldrb	r2, [r7, #12]
 800cbbe:	4911      	ldr	r1, [pc, #68]	; (800cc04 <UARTEx_SetNbDataToProcess+0x94>)
 800cbc0:	5c8a      	ldrb	r2, [r1, r2]
 800cbc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cbc6:	7b3a      	ldrb	r2, [r7, #12]
 800cbc8:	490f      	ldr	r1, [pc, #60]	; (800cc08 <UARTEx_SetNbDataToProcess+0x98>)
 800cbca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cbcc:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cbd8:	7bfb      	ldrb	r3, [r7, #15]
 800cbda:	7b7a      	ldrb	r2, [r7, #13]
 800cbdc:	4909      	ldr	r1, [pc, #36]	; (800cc04 <UARTEx_SetNbDataToProcess+0x94>)
 800cbde:	5c8a      	ldrb	r2, [r1, r2]
 800cbe0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cbe4:	7b7a      	ldrb	r2, [r7, #13]
 800cbe6:	4908      	ldr	r1, [pc, #32]	; (800cc08 <UARTEx_SetNbDataToProcess+0x98>)
 800cbe8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cbea:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbee:	b29a      	uxth	r2, r3
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cbf6:	bf00      	nop
 800cbf8:	3714      	adds	r7, #20
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	0800f8fc 	.word	0x0800f8fc
 800cc08:	0800f904 	.word	0x0800f904

0800cc0c <__NVIC_SetPriority>:
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	4603      	mov	r3, r0
 800cc14:	6039      	str	r1, [r7, #0]
 800cc16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cc18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	db0a      	blt.n	800cc36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	b2da      	uxtb	r2, r3
 800cc24:	490c      	ldr	r1, [pc, #48]	; (800cc58 <__NVIC_SetPriority+0x4c>)
 800cc26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc2a:	0112      	lsls	r2, r2, #4
 800cc2c:	b2d2      	uxtb	r2, r2
 800cc2e:	440b      	add	r3, r1
 800cc30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cc34:	e00a      	b.n	800cc4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	b2da      	uxtb	r2, r3
 800cc3a:	4908      	ldr	r1, [pc, #32]	; (800cc5c <__NVIC_SetPriority+0x50>)
 800cc3c:	88fb      	ldrh	r3, [r7, #6]
 800cc3e:	f003 030f 	and.w	r3, r3, #15
 800cc42:	3b04      	subs	r3, #4
 800cc44:	0112      	lsls	r2, r2, #4
 800cc46:	b2d2      	uxtb	r2, r2
 800cc48:	440b      	add	r3, r1
 800cc4a:	761a      	strb	r2, [r3, #24]
}
 800cc4c:	bf00      	nop
 800cc4e:	370c      	adds	r7, #12
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr
 800cc58:	e000e100 	.word	0xe000e100
 800cc5c:	e000ed00 	.word	0xe000ed00

0800cc60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cc60:	b580      	push	{r7, lr}
 800cc62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cc64:	4b05      	ldr	r3, [pc, #20]	; (800cc7c <SysTick_Handler+0x1c>)
 800cc66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cc68:	f001 fcfe 	bl	800e668 <xTaskGetSchedulerState>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d001      	beq.n	800cc76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cc72:	f002 fae9 	bl	800f248 <xPortSysTickHandler>
  }
}
 800cc76:	bf00      	nop
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	e000e010 	.word	0xe000e010

0800cc80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cc80:	b580      	push	{r7, lr}
 800cc82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cc84:	2100      	movs	r1, #0
 800cc86:	f06f 0004 	mvn.w	r0, #4
 800cc8a:	f7ff ffbf 	bl	800cc0c <__NVIC_SetPriority>
#endif
}
 800cc8e:	bf00      	nop
 800cc90:	bd80      	pop	{r7, pc}
	...

0800cc94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc9a:	f3ef 8305 	mrs	r3, IPSR
 800cc9e:	603b      	str	r3, [r7, #0]
  return(result);
 800cca0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d003      	beq.n	800ccae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cca6:	f06f 0305 	mvn.w	r3, #5
 800ccaa:	607b      	str	r3, [r7, #4]
 800ccac:	e00c      	b.n	800ccc8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ccae:	4b0a      	ldr	r3, [pc, #40]	; (800ccd8 <osKernelInitialize+0x44>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d105      	bne.n	800ccc2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ccb6:	4b08      	ldr	r3, [pc, #32]	; (800ccd8 <osKernelInitialize+0x44>)
 800ccb8:	2201      	movs	r2, #1
 800ccba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	607b      	str	r3, [r7, #4]
 800ccc0:	e002      	b.n	800ccc8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ccc2:	f04f 33ff 	mov.w	r3, #4294967295
 800ccc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ccc8:	687b      	ldr	r3, [r7, #4]
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	370c      	adds	r7, #12
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr
 800ccd6:	bf00      	nop
 800ccd8:	20000234 	.word	0x20000234

0800ccdc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cce2:	f3ef 8305 	mrs	r3, IPSR
 800cce6:	603b      	str	r3, [r7, #0]
  return(result);
 800cce8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d003      	beq.n	800ccf6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ccee:	f06f 0305 	mvn.w	r3, #5
 800ccf2:	607b      	str	r3, [r7, #4]
 800ccf4:	e010      	b.n	800cd18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ccf6:	4b0b      	ldr	r3, [pc, #44]	; (800cd24 <osKernelStart+0x48>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d109      	bne.n	800cd12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ccfe:	f7ff ffbf 	bl	800cc80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cd02:	4b08      	ldr	r3, [pc, #32]	; (800cd24 <osKernelStart+0x48>)
 800cd04:	2202      	movs	r2, #2
 800cd06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cd08:	f001 f866 	bl	800ddd8 <vTaskStartScheduler>
      stat = osOK;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	607b      	str	r3, [r7, #4]
 800cd10:	e002      	b.n	800cd18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cd12:	f04f 33ff 	mov.w	r3, #4294967295
 800cd16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cd18:	687b      	ldr	r3, [r7, #4]
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3708      	adds	r7, #8
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	20000234 	.word	0x20000234

0800cd28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b08e      	sub	sp, #56	; 0x38
 800cd2c:	af04      	add	r7, sp, #16
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cd34:	2300      	movs	r3, #0
 800cd36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd38:	f3ef 8305 	mrs	r3, IPSR
 800cd3c:	617b      	str	r3, [r7, #20]
  return(result);
 800cd3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d17e      	bne.n	800ce42 <osThreadNew+0x11a>
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d07b      	beq.n	800ce42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cd4a:	2380      	movs	r3, #128	; 0x80
 800cd4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cd4e:	2318      	movs	r3, #24
 800cd50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cd52:	2300      	movs	r3, #0
 800cd54:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cd56:	f04f 33ff 	mov.w	r3, #4294967295
 800cd5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d045      	beq.n	800cdee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d002      	beq.n	800cd70 <osThreadNew+0x48>
        name = attr->name;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	699b      	ldr	r3, [r3, #24]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d002      	beq.n	800cd7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	699b      	ldr	r3, [r3, #24]
 800cd7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cd7e:	69fb      	ldr	r3, [r7, #28]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d008      	beq.n	800cd96 <osThreadNew+0x6e>
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	2b38      	cmp	r3, #56	; 0x38
 800cd88:	d805      	bhi.n	800cd96 <osThreadNew+0x6e>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	f003 0301 	and.w	r3, r3, #1
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d001      	beq.n	800cd9a <osThreadNew+0x72>
        return (NULL);
 800cd96:	2300      	movs	r3, #0
 800cd98:	e054      	b.n	800ce44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	695b      	ldr	r3, [r3, #20]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d003      	beq.n	800cdaa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	695b      	ldr	r3, [r3, #20]
 800cda6:	089b      	lsrs	r3, r3, #2
 800cda8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	689b      	ldr	r3, [r3, #8]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d00e      	beq.n	800cdd0 <osThreadNew+0xa8>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	2b5b      	cmp	r3, #91	; 0x5b
 800cdb8:	d90a      	bls.n	800cdd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d006      	beq.n	800cdd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	695b      	ldr	r3, [r3, #20]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d002      	beq.n	800cdd0 <osThreadNew+0xa8>
        mem = 1;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	61bb      	str	r3, [r7, #24]
 800cdce:	e010      	b.n	800cdf2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d10c      	bne.n	800cdf2 <osThreadNew+0xca>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d108      	bne.n	800cdf2 <osThreadNew+0xca>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	691b      	ldr	r3, [r3, #16]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d104      	bne.n	800cdf2 <osThreadNew+0xca>
          mem = 0;
 800cde8:	2300      	movs	r3, #0
 800cdea:	61bb      	str	r3, [r7, #24]
 800cdec:	e001      	b.n	800cdf2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d110      	bne.n	800ce1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce00:	9202      	str	r2, [sp, #8]
 800ce02:	9301      	str	r3, [sp, #4]
 800ce04:	69fb      	ldr	r3, [r7, #28]
 800ce06:	9300      	str	r3, [sp, #0]
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	6a3a      	ldr	r2, [r7, #32]
 800ce0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce0e:	68f8      	ldr	r0, [r7, #12]
 800ce10:	f000 fe0c 	bl	800da2c <xTaskCreateStatic>
 800ce14:	4603      	mov	r3, r0
 800ce16:	613b      	str	r3, [r7, #16]
 800ce18:	e013      	b.n	800ce42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ce1a:	69bb      	ldr	r3, [r7, #24]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d110      	bne.n	800ce42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ce20:	6a3b      	ldr	r3, [r7, #32]
 800ce22:	b29a      	uxth	r2, r3
 800ce24:	f107 0310 	add.w	r3, r7, #16
 800ce28:	9301      	str	r3, [sp, #4]
 800ce2a:	69fb      	ldr	r3, [r7, #28]
 800ce2c:	9300      	str	r3, [sp, #0]
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce32:	68f8      	ldr	r0, [r7, #12]
 800ce34:	f000 fe57 	bl	800dae6 <xTaskCreate>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d001      	beq.n	800ce42 <osThreadNew+0x11a>
            hTask = NULL;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ce42:	693b      	ldr	r3, [r7, #16]
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3728      	adds	r7, #40	; 0x28
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce54:	f3ef 8305 	mrs	r3, IPSR
 800ce58:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d003      	beq.n	800ce68 <osDelay+0x1c>
    stat = osErrorISR;
 800ce60:	f06f 0305 	mvn.w	r3, #5
 800ce64:	60fb      	str	r3, [r7, #12]
 800ce66:	e007      	b.n	800ce78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d002      	beq.n	800ce78 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 ff7c 	bl	800dd70 <vTaskDelay>
    }
  }

  return (stat);
 800ce78:	68fb      	ldr	r3, [r7, #12]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3710      	adds	r7, #16
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
	...

0800ce84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ce84:	b480      	push	{r7}
 800ce86:	b085      	sub	sp, #20
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	60f8      	str	r0, [r7, #12]
 800ce8c:	60b9      	str	r1, [r7, #8]
 800ce8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	4a07      	ldr	r2, [pc, #28]	; (800ceb0 <vApplicationGetIdleTaskMemory+0x2c>)
 800ce94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	4a06      	ldr	r2, [pc, #24]	; (800ceb4 <vApplicationGetIdleTaskMemory+0x30>)
 800ce9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2280      	movs	r2, #128	; 0x80
 800cea0:	601a      	str	r2, [r3, #0]
}
 800cea2:	bf00      	nop
 800cea4:	3714      	adds	r7, #20
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	20000238 	.word	0x20000238
 800ceb4:	20000294 	.word	0x20000294

0800ceb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ceb8:	b480      	push	{r7}
 800ceba:	b085      	sub	sp, #20
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	4a07      	ldr	r2, [pc, #28]	; (800cee4 <vApplicationGetTimerTaskMemory+0x2c>)
 800cec8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	4a06      	ldr	r2, [pc, #24]	; (800cee8 <vApplicationGetTimerTaskMemory+0x30>)
 800cece:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ced6:	601a      	str	r2, [r3, #0]
}
 800ced8:	bf00      	nop
 800ceda:	3714      	adds	r7, #20
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr
 800cee4:	20000494 	.word	0x20000494
 800cee8:	200004f0 	.word	0x200004f0

0800ceec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f103 0208 	add.w	r2, r3, #8
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f04f 32ff 	mov.w	r2, #4294967295
 800cf04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f103 0208 	add.w	r2, r3, #8
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f103 0208 	add.w	r2, r3, #8
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cf20:	bf00      	nop
 800cf22:	370c      	adds	r7, #12
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr

0800cf2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b083      	sub	sp, #12
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cf3a:	bf00      	nop
 800cf3c:	370c      	adds	r7, #12
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr

0800cf46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf46:	b480      	push	{r7}
 800cf48:	b085      	sub	sp, #20
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
 800cf4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	68fa      	ldr	r2, [r7, #12]
 800cf5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	689a      	ldr	r2, [r3, #8]
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	689b      	ldr	r3, [r3, #8]
 800cf68:	683a      	ldr	r2, [r7, #0]
 800cf6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	683a      	ldr	r2, [r7, #0]
 800cf70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	1c5a      	adds	r2, r3, #1
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	601a      	str	r2, [r3, #0]
}
 800cf82:	bf00      	nop
 800cf84:	3714      	adds	r7, #20
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr

0800cf8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf8e:	b480      	push	{r7}
 800cf90:	b085      	sub	sp, #20
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	6078      	str	r0, [r7, #4]
 800cf96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa4:	d103      	bne.n	800cfae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	691b      	ldr	r3, [r3, #16]
 800cfaa:	60fb      	str	r3, [r7, #12]
 800cfac:	e00c      	b.n	800cfc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	3308      	adds	r3, #8
 800cfb2:	60fb      	str	r3, [r7, #12]
 800cfb4:	e002      	b.n	800cfbc <vListInsert+0x2e>
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	60fb      	str	r3, [r7, #12]
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	68ba      	ldr	r2, [r7, #8]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d2f6      	bcs.n	800cfb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	685a      	ldr	r2, [r3, #4]
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	683a      	ldr	r2, [r7, #0]
 800cfd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	68fa      	ldr	r2, [r7, #12]
 800cfdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	683a      	ldr	r2, [r7, #0]
 800cfe2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	687a      	ldr	r2, [r7, #4]
 800cfe8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	1c5a      	adds	r2, r3, #1
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	601a      	str	r2, [r3, #0]
}
 800cff4:	bf00      	nop
 800cff6:	3714      	adds	r7, #20
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr

0800d000 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d000:	b480      	push	{r7}
 800d002:	b085      	sub	sp, #20
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	691b      	ldr	r3, [r3, #16]
 800d00c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	6892      	ldr	r2, [r2, #8]
 800d016:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	6852      	ldr	r2, [r2, #4]
 800d020:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d103      	bne.n	800d034 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	689a      	ldr	r2, [r3, #8]
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	1e5a      	subs	r2, r3, #1
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3714      	adds	r7, #20
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d10a      	bne.n	800d07e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06c:	f383 8811 	msr	BASEPRI, r3
 800d070:	f3bf 8f6f 	isb	sy
 800d074:	f3bf 8f4f 	dsb	sy
 800d078:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d07a:	bf00      	nop
 800d07c:	e7fe      	b.n	800d07c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d07e:	f002 f851 	bl	800f124 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d08a:	68f9      	ldr	r1, [r7, #12]
 800d08c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d08e:	fb01 f303 	mul.w	r3, r1, r3
 800d092:	441a      	add	r2, r3
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2200      	movs	r2, #0
 800d09c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681a      	ldr	r2, [r3, #0]
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0ae:	3b01      	subs	r3, #1
 800d0b0:	68f9      	ldr	r1, [r7, #12]
 800d0b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d0b4:	fb01 f303 	mul.w	r3, r1, r3
 800d0b8:	441a      	add	r2, r3
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	22ff      	movs	r2, #255	; 0xff
 800d0c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	22ff      	movs	r2, #255	; 0xff
 800d0ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d114      	bne.n	800d0fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	691b      	ldr	r3, [r3, #16]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d01a      	beq.n	800d112 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	3310      	adds	r3, #16
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f001 f903 	bl	800e2ec <xTaskRemoveFromEventList>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d012      	beq.n	800d112 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d0ec:	4b0c      	ldr	r3, [pc, #48]	; (800d120 <xQueueGenericReset+0xcc>)
 800d0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0f2:	601a      	str	r2, [r3, #0]
 800d0f4:	f3bf 8f4f 	dsb	sy
 800d0f8:	f3bf 8f6f 	isb	sy
 800d0fc:	e009      	b.n	800d112 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	3310      	adds	r3, #16
 800d102:	4618      	mov	r0, r3
 800d104:	f7ff fef2 	bl	800ceec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	3324      	adds	r3, #36	; 0x24
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7ff feed 	bl	800ceec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d112:	f002 f837 	bl	800f184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d116:	2301      	movs	r3, #1
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3710      	adds	r7, #16
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}
 800d120:	e000ed04 	.word	0xe000ed04

0800d124 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d124:	b580      	push	{r7, lr}
 800d126:	b08e      	sub	sp, #56	; 0x38
 800d128:	af02      	add	r7, sp, #8
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	607a      	str	r2, [r7, #4]
 800d130:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d10a      	bne.n	800d14e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13c:	f383 8811 	msr	BASEPRI, r3
 800d140:	f3bf 8f6f 	isb	sy
 800d144:	f3bf 8f4f 	dsb	sy
 800d148:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d14a:	bf00      	nop
 800d14c:	e7fe      	b.n	800d14c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d10a      	bne.n	800d16a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d158:	f383 8811 	msr	BASEPRI, r3
 800d15c:	f3bf 8f6f 	isb	sy
 800d160:	f3bf 8f4f 	dsb	sy
 800d164:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d166:	bf00      	nop
 800d168:	e7fe      	b.n	800d168 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d002      	beq.n	800d176 <xQueueGenericCreateStatic+0x52>
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d001      	beq.n	800d17a <xQueueGenericCreateStatic+0x56>
 800d176:	2301      	movs	r3, #1
 800d178:	e000      	b.n	800d17c <xQueueGenericCreateStatic+0x58>
 800d17a:	2300      	movs	r3, #0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d10a      	bne.n	800d196 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d184:	f383 8811 	msr	BASEPRI, r3
 800d188:	f3bf 8f6f 	isb	sy
 800d18c:	f3bf 8f4f 	dsb	sy
 800d190:	623b      	str	r3, [r7, #32]
}
 800d192:	bf00      	nop
 800d194:	e7fe      	b.n	800d194 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d102      	bne.n	800d1a2 <xQueueGenericCreateStatic+0x7e>
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d101      	bne.n	800d1a6 <xQueueGenericCreateStatic+0x82>
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	e000      	b.n	800d1a8 <xQueueGenericCreateStatic+0x84>
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d10a      	bne.n	800d1c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b0:	f383 8811 	msr	BASEPRI, r3
 800d1b4:	f3bf 8f6f 	isb	sy
 800d1b8:	f3bf 8f4f 	dsb	sy
 800d1bc:	61fb      	str	r3, [r7, #28]
}
 800d1be:	bf00      	nop
 800d1c0:	e7fe      	b.n	800d1c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d1c2:	2350      	movs	r3, #80	; 0x50
 800d1c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	2b50      	cmp	r3, #80	; 0x50
 800d1ca:	d00a      	beq.n	800d1e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d0:	f383 8811 	msr	BASEPRI, r3
 800d1d4:	f3bf 8f6f 	isb	sy
 800d1d8:	f3bf 8f4f 	dsb	sy
 800d1dc:	61bb      	str	r3, [r7, #24]
}
 800d1de:	bf00      	nop
 800d1e0:	e7fe      	b.n	800d1e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d1e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d00d      	beq.n	800d20a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d1f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fc:	9300      	str	r3, [sp, #0]
 800d1fe:	4613      	mov	r3, r2
 800d200:	687a      	ldr	r2, [r7, #4]
 800d202:	68b9      	ldr	r1, [r7, #8]
 800d204:	68f8      	ldr	r0, [r7, #12]
 800d206:	f000 f805 	bl	800d214 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3730      	adds	r7, #48	; 0x30
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
 800d220:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d103      	bne.n	800d230 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d228:	69bb      	ldr	r3, [r7, #24]
 800d22a:	69ba      	ldr	r2, [r7, #24]
 800d22c:	601a      	str	r2, [r3, #0]
 800d22e:	e002      	b.n	800d236 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d230:	69bb      	ldr	r3, [r7, #24]
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d236:	69bb      	ldr	r3, [r7, #24]
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d23c:	69bb      	ldr	r3, [r7, #24]
 800d23e:	68ba      	ldr	r2, [r7, #8]
 800d240:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d242:	2101      	movs	r1, #1
 800d244:	69b8      	ldr	r0, [r7, #24]
 800d246:	f7ff ff05 	bl	800d054 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d24a:	69bb      	ldr	r3, [r7, #24]
 800d24c:	78fa      	ldrb	r2, [r7, #3]
 800d24e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d252:	bf00      	nop
 800d254:	3710      	adds	r7, #16
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
	...

0800d25c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b08e      	sub	sp, #56	; 0x38
 800d260:	af00      	add	r7, sp, #0
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	60b9      	str	r1, [r7, #8]
 800d266:	607a      	str	r2, [r7, #4]
 800d268:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d26a:	2300      	movs	r3, #0
 800d26c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d274:	2b00      	cmp	r3, #0
 800d276:	d10a      	bne.n	800d28e <xQueueGenericSend+0x32>
	__asm volatile
 800d278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27c:	f383 8811 	msr	BASEPRI, r3
 800d280:	f3bf 8f6f 	isb	sy
 800d284:	f3bf 8f4f 	dsb	sy
 800d288:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d28a:	bf00      	nop
 800d28c:	e7fe      	b.n	800d28c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d103      	bne.n	800d29c <xQueueGenericSend+0x40>
 800d294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d101      	bne.n	800d2a0 <xQueueGenericSend+0x44>
 800d29c:	2301      	movs	r3, #1
 800d29e:	e000      	b.n	800d2a2 <xQueueGenericSend+0x46>
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d10a      	bne.n	800d2bc <xQueueGenericSend+0x60>
	__asm volatile
 800d2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2aa:	f383 8811 	msr	BASEPRI, r3
 800d2ae:	f3bf 8f6f 	isb	sy
 800d2b2:	f3bf 8f4f 	dsb	sy
 800d2b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d2b8:	bf00      	nop
 800d2ba:	e7fe      	b.n	800d2ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	2b02      	cmp	r3, #2
 800d2c0:	d103      	bne.n	800d2ca <xQueueGenericSend+0x6e>
 800d2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d101      	bne.n	800d2ce <xQueueGenericSend+0x72>
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	e000      	b.n	800d2d0 <xQueueGenericSend+0x74>
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d10a      	bne.n	800d2ea <xQueueGenericSend+0x8e>
	__asm volatile
 800d2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d8:	f383 8811 	msr	BASEPRI, r3
 800d2dc:	f3bf 8f6f 	isb	sy
 800d2e0:	f3bf 8f4f 	dsb	sy
 800d2e4:	623b      	str	r3, [r7, #32]
}
 800d2e6:	bf00      	nop
 800d2e8:	e7fe      	b.n	800d2e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2ea:	f001 f9bd 	bl	800e668 <xTaskGetSchedulerState>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d102      	bne.n	800d2fa <xQueueGenericSend+0x9e>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d101      	bne.n	800d2fe <xQueueGenericSend+0xa2>
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	e000      	b.n	800d300 <xQueueGenericSend+0xa4>
 800d2fe:	2300      	movs	r3, #0
 800d300:	2b00      	cmp	r3, #0
 800d302:	d10a      	bne.n	800d31a <xQueueGenericSend+0xbe>
	__asm volatile
 800d304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d308:	f383 8811 	msr	BASEPRI, r3
 800d30c:	f3bf 8f6f 	isb	sy
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	61fb      	str	r3, [r7, #28]
}
 800d316:	bf00      	nop
 800d318:	e7fe      	b.n	800d318 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d31a:	f001 ff03 	bl	800f124 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d326:	429a      	cmp	r2, r3
 800d328:	d302      	bcc.n	800d330 <xQueueGenericSend+0xd4>
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	2b02      	cmp	r3, #2
 800d32e:	d129      	bne.n	800d384 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d330:	683a      	ldr	r2, [r7, #0]
 800d332:	68b9      	ldr	r1, [r7, #8]
 800d334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d336:	f000 fa0b 	bl	800d750 <prvCopyDataToQueue>
 800d33a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d340:	2b00      	cmp	r3, #0
 800d342:	d010      	beq.n	800d366 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d346:	3324      	adds	r3, #36	; 0x24
 800d348:	4618      	mov	r0, r3
 800d34a:	f000 ffcf 	bl	800e2ec <xTaskRemoveFromEventList>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d013      	beq.n	800d37c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d354:	4b3f      	ldr	r3, [pc, #252]	; (800d454 <xQueueGenericSend+0x1f8>)
 800d356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d35a:	601a      	str	r2, [r3, #0]
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	e00a      	b.n	800d37c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d007      	beq.n	800d37c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d36c:	4b39      	ldr	r3, [pc, #228]	; (800d454 <xQueueGenericSend+0x1f8>)
 800d36e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d372:	601a      	str	r2, [r3, #0]
 800d374:	f3bf 8f4f 	dsb	sy
 800d378:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d37c:	f001 ff02 	bl	800f184 <vPortExitCritical>
				return pdPASS;
 800d380:	2301      	movs	r3, #1
 800d382:	e063      	b.n	800d44c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d103      	bne.n	800d392 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d38a:	f001 fefb 	bl	800f184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d38e:	2300      	movs	r3, #0
 800d390:	e05c      	b.n	800d44c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d394:	2b00      	cmp	r3, #0
 800d396:	d106      	bne.n	800d3a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d398:	f107 0314 	add.w	r3, r7, #20
 800d39c:	4618      	mov	r0, r3
 800d39e:	f001 f809 	bl	800e3b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3a6:	f001 feed 	bl	800f184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3aa:	f000 fd7b 	bl	800dea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3ae:	f001 feb9 	bl	800f124 <vPortEnterCritical>
 800d3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3b8:	b25b      	sxtb	r3, r3
 800d3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3be:	d103      	bne.n	800d3c8 <xQueueGenericSend+0x16c>
 800d3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3ce:	b25b      	sxtb	r3, r3
 800d3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d4:	d103      	bne.n	800d3de <xQueueGenericSend+0x182>
 800d3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d8:	2200      	movs	r2, #0
 800d3da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3de:	f001 fed1 	bl	800f184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3e2:	1d3a      	adds	r2, r7, #4
 800d3e4:	f107 0314 	add.w	r3, r7, #20
 800d3e8:	4611      	mov	r1, r2
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f000 fff8 	bl	800e3e0 <xTaskCheckForTimeOut>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d124      	bne.n	800d440 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d3f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3f8:	f000 faa2 	bl	800d940 <prvIsQueueFull>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d018      	beq.n	800d434 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d404:	3310      	adds	r3, #16
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	4611      	mov	r1, r2
 800d40a:	4618      	mov	r0, r3
 800d40c:	f000 ff1e 	bl	800e24c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d412:	f000 fa2d 	bl	800d870 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d416:	f000 fd53 	bl	800dec0 <xTaskResumeAll>
 800d41a:	4603      	mov	r3, r0
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	f47f af7c 	bne.w	800d31a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d422:	4b0c      	ldr	r3, [pc, #48]	; (800d454 <xQueueGenericSend+0x1f8>)
 800d424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d428:	601a      	str	r2, [r3, #0]
 800d42a:	f3bf 8f4f 	dsb	sy
 800d42e:	f3bf 8f6f 	isb	sy
 800d432:	e772      	b.n	800d31a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d436:	f000 fa1b 	bl	800d870 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d43a:	f000 fd41 	bl	800dec0 <xTaskResumeAll>
 800d43e:	e76c      	b.n	800d31a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d442:	f000 fa15 	bl	800d870 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d446:	f000 fd3b 	bl	800dec0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d44a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3738      	adds	r7, #56	; 0x38
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}
 800d454:	e000ed04 	.word	0xe000ed04

0800d458 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b090      	sub	sp, #64	; 0x40
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	60f8      	str	r0, [r7, #12]
 800d460:	60b9      	str	r1, [r7, #8]
 800d462:	607a      	str	r2, [r7, #4]
 800d464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d10a      	bne.n	800d486 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d474:	f383 8811 	msr	BASEPRI, r3
 800d478:	f3bf 8f6f 	isb	sy
 800d47c:	f3bf 8f4f 	dsb	sy
 800d480:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d482:	bf00      	nop
 800d484:	e7fe      	b.n	800d484 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d103      	bne.n	800d494 <xQueueGenericSendFromISR+0x3c>
 800d48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d490:	2b00      	cmp	r3, #0
 800d492:	d101      	bne.n	800d498 <xQueueGenericSendFromISR+0x40>
 800d494:	2301      	movs	r3, #1
 800d496:	e000      	b.n	800d49a <xQueueGenericSendFromISR+0x42>
 800d498:	2300      	movs	r3, #0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d10a      	bne.n	800d4b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a2:	f383 8811 	msr	BASEPRI, r3
 800d4a6:	f3bf 8f6f 	isb	sy
 800d4aa:	f3bf 8f4f 	dsb	sy
 800d4ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d4b0:	bf00      	nop
 800d4b2:	e7fe      	b.n	800d4b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	2b02      	cmp	r3, #2
 800d4b8:	d103      	bne.n	800d4c2 <xQueueGenericSendFromISR+0x6a>
 800d4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	d101      	bne.n	800d4c6 <xQueueGenericSendFromISR+0x6e>
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	e000      	b.n	800d4c8 <xQueueGenericSendFromISR+0x70>
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d10a      	bne.n	800d4e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d0:	f383 8811 	msr	BASEPRI, r3
 800d4d4:	f3bf 8f6f 	isb	sy
 800d4d8:	f3bf 8f4f 	dsb	sy
 800d4dc:	623b      	str	r3, [r7, #32]
}
 800d4de:	bf00      	nop
 800d4e0:	e7fe      	b.n	800d4e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4e2:	f001 ff01 	bl	800f2e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d4e6:	f3ef 8211 	mrs	r2, BASEPRI
 800d4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ee:	f383 8811 	msr	BASEPRI, r3
 800d4f2:	f3bf 8f6f 	isb	sy
 800d4f6:	f3bf 8f4f 	dsb	sy
 800d4fa:	61fa      	str	r2, [r7, #28]
 800d4fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d4fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d500:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d302      	bcc.n	800d514 <xQueueGenericSendFromISR+0xbc>
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	2b02      	cmp	r3, #2
 800d512:	d12f      	bne.n	800d574 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d516:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d51a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d522:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d524:	683a      	ldr	r2, [r7, #0]
 800d526:	68b9      	ldr	r1, [r7, #8]
 800d528:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d52a:	f000 f911 	bl	800d750 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d52e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d536:	d112      	bne.n	800d55e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d016      	beq.n	800d56e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d542:	3324      	adds	r3, #36	; 0x24
 800d544:	4618      	mov	r0, r3
 800d546:	f000 fed1 	bl	800e2ec <xTaskRemoveFromEventList>
 800d54a:	4603      	mov	r3, r0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d00e      	beq.n	800d56e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d00b      	beq.n	800d56e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2201      	movs	r2, #1
 800d55a:	601a      	str	r2, [r3, #0]
 800d55c:	e007      	b.n	800d56e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d55e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d562:	3301      	adds	r3, #1
 800d564:	b2db      	uxtb	r3, r3
 800d566:	b25a      	sxtb	r2, r3
 800d568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d56e:	2301      	movs	r3, #1
 800d570:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d572:	e001      	b.n	800d578 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d574:	2300      	movs	r3, #0
 800d576:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d57a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d582:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d586:	4618      	mov	r0, r3
 800d588:	3740      	adds	r7, #64	; 0x40
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
	...

0800d590 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b08c      	sub	sp, #48	; 0x30
 800d594:	af00      	add	r7, sp, #0
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d59c:	2300      	movs	r3, #0
 800d59e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d10a      	bne.n	800d5c0 <xQueueReceive+0x30>
	__asm volatile
 800d5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ae:	f383 8811 	msr	BASEPRI, r3
 800d5b2:	f3bf 8f6f 	isb	sy
 800d5b6:	f3bf 8f4f 	dsb	sy
 800d5ba:	623b      	str	r3, [r7, #32]
}
 800d5bc:	bf00      	nop
 800d5be:	e7fe      	b.n	800d5be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d103      	bne.n	800d5ce <xQueueReceive+0x3e>
 800d5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d101      	bne.n	800d5d2 <xQueueReceive+0x42>
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	e000      	b.n	800d5d4 <xQueueReceive+0x44>
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d10a      	bne.n	800d5ee <xQueueReceive+0x5e>
	__asm volatile
 800d5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5dc:	f383 8811 	msr	BASEPRI, r3
 800d5e0:	f3bf 8f6f 	isb	sy
 800d5e4:	f3bf 8f4f 	dsb	sy
 800d5e8:	61fb      	str	r3, [r7, #28]
}
 800d5ea:	bf00      	nop
 800d5ec:	e7fe      	b.n	800d5ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d5ee:	f001 f83b 	bl	800e668 <xTaskGetSchedulerState>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d102      	bne.n	800d5fe <xQueueReceive+0x6e>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d101      	bne.n	800d602 <xQueueReceive+0x72>
 800d5fe:	2301      	movs	r3, #1
 800d600:	e000      	b.n	800d604 <xQueueReceive+0x74>
 800d602:	2300      	movs	r3, #0
 800d604:	2b00      	cmp	r3, #0
 800d606:	d10a      	bne.n	800d61e <xQueueReceive+0x8e>
	__asm volatile
 800d608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60c:	f383 8811 	msr	BASEPRI, r3
 800d610:	f3bf 8f6f 	isb	sy
 800d614:	f3bf 8f4f 	dsb	sy
 800d618:	61bb      	str	r3, [r7, #24]
}
 800d61a:	bf00      	nop
 800d61c:	e7fe      	b.n	800d61c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d61e:	f001 fd81 	bl	800f124 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d626:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d01f      	beq.n	800d66e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d62e:	68b9      	ldr	r1, [r7, #8]
 800d630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d632:	f000 f8f7 	bl	800d824 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d638:	1e5a      	subs	r2, r3, #1
 800d63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d640:	691b      	ldr	r3, [r3, #16]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d00f      	beq.n	800d666 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d648:	3310      	adds	r3, #16
 800d64a:	4618      	mov	r0, r3
 800d64c:	f000 fe4e 	bl	800e2ec <xTaskRemoveFromEventList>
 800d650:	4603      	mov	r3, r0
 800d652:	2b00      	cmp	r3, #0
 800d654:	d007      	beq.n	800d666 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d656:	4b3d      	ldr	r3, [pc, #244]	; (800d74c <xQueueReceive+0x1bc>)
 800d658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d65c:	601a      	str	r2, [r3, #0]
 800d65e:	f3bf 8f4f 	dsb	sy
 800d662:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d666:	f001 fd8d 	bl	800f184 <vPortExitCritical>
				return pdPASS;
 800d66a:	2301      	movs	r3, #1
 800d66c:	e069      	b.n	800d742 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d103      	bne.n	800d67c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d674:	f001 fd86 	bl	800f184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d678:	2300      	movs	r3, #0
 800d67a:	e062      	b.n	800d742 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d106      	bne.n	800d690 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d682:	f107 0310 	add.w	r3, r7, #16
 800d686:	4618      	mov	r0, r3
 800d688:	f000 fe94 	bl	800e3b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d68c:	2301      	movs	r3, #1
 800d68e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d690:	f001 fd78 	bl	800f184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d694:	f000 fc06 	bl	800dea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d698:	f001 fd44 	bl	800f124 <vPortEnterCritical>
 800d69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6a2:	b25b      	sxtb	r3, r3
 800d6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6a8:	d103      	bne.n	800d6b2 <xQueueReceive+0x122>
 800d6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6b8:	b25b      	sxtb	r3, r3
 800d6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6be:	d103      	bne.n	800d6c8 <xQueueReceive+0x138>
 800d6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6c8:	f001 fd5c 	bl	800f184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d6cc:	1d3a      	adds	r2, r7, #4
 800d6ce:	f107 0310 	add.w	r3, r7, #16
 800d6d2:	4611      	mov	r1, r2
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f000 fe83 	bl	800e3e0 <xTaskCheckForTimeOut>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d123      	bne.n	800d728 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6e2:	f000 f917 	bl	800d914 <prvIsQueueEmpty>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d017      	beq.n	800d71c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ee:	3324      	adds	r3, #36	; 0x24
 800d6f0:	687a      	ldr	r2, [r7, #4]
 800d6f2:	4611      	mov	r1, r2
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f000 fda9 	bl	800e24c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d6fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6fc:	f000 f8b8 	bl	800d870 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d700:	f000 fbde 	bl	800dec0 <xTaskResumeAll>
 800d704:	4603      	mov	r3, r0
 800d706:	2b00      	cmp	r3, #0
 800d708:	d189      	bne.n	800d61e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d70a:	4b10      	ldr	r3, [pc, #64]	; (800d74c <xQueueReceive+0x1bc>)
 800d70c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d710:	601a      	str	r2, [r3, #0]
 800d712:	f3bf 8f4f 	dsb	sy
 800d716:	f3bf 8f6f 	isb	sy
 800d71a:	e780      	b.n	800d61e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d71c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d71e:	f000 f8a7 	bl	800d870 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d722:	f000 fbcd 	bl	800dec0 <xTaskResumeAll>
 800d726:	e77a      	b.n	800d61e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d72a:	f000 f8a1 	bl	800d870 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d72e:	f000 fbc7 	bl	800dec0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d734:	f000 f8ee 	bl	800d914 <prvIsQueueEmpty>
 800d738:	4603      	mov	r3, r0
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	f43f af6f 	beq.w	800d61e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d740:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d742:	4618      	mov	r0, r3
 800d744:	3730      	adds	r7, #48	; 0x30
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	e000ed04 	.word	0xe000ed04

0800d750 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b086      	sub	sp, #24
 800d754:	af00      	add	r7, sp, #0
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	60b9      	str	r1, [r7, #8]
 800d75a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d75c:	2300      	movs	r3, #0
 800d75e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d764:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d10d      	bne.n	800d78a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d14d      	bne.n	800d812 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	689b      	ldr	r3, [r3, #8]
 800d77a:	4618      	mov	r0, r3
 800d77c:	f000 ff92 	bl	800e6a4 <xTaskPriorityDisinherit>
 800d780:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	2200      	movs	r2, #0
 800d786:	609a      	str	r2, [r3, #8]
 800d788:	e043      	b.n	800d812 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d119      	bne.n	800d7c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	6858      	ldr	r0, [r3, #4]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d798:	461a      	mov	r2, r3
 800d79a:	68b9      	ldr	r1, [r7, #8]
 800d79c:	f001 fffa 	bl	800f794 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	685a      	ldr	r2, [r3, #4]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7a8:	441a      	add	r2, r3
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	685a      	ldr	r2, [r3, #4]
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	689b      	ldr	r3, [r3, #8]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d32b      	bcc.n	800d812 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681a      	ldr	r2, [r3, #0]
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	605a      	str	r2, [r3, #4]
 800d7c2:	e026      	b.n	800d812 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	68d8      	ldr	r0, [r3, #12]
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	68b9      	ldr	r1, [r7, #8]
 800d7d0:	f001 ffe0 	bl	800f794 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	68da      	ldr	r2, [r3, #12]
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7dc:	425b      	negs	r3, r3
 800d7de:	441a      	add	r2, r3
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	68da      	ldr	r2, [r3, #12]
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d207      	bcs.n	800d800 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	689a      	ldr	r2, [r3, #8]
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7f8:	425b      	negs	r3, r3
 800d7fa:	441a      	add	r2, r3
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2b02      	cmp	r3, #2
 800d804:	d105      	bne.n	800d812 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d002      	beq.n	800d812 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	3b01      	subs	r3, #1
 800d810:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	1c5a      	adds	r2, r3, #1
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d81a:	697b      	ldr	r3, [r7, #20]
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3718      	adds	r7, #24
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d832:	2b00      	cmp	r3, #0
 800d834:	d018      	beq.n	800d868 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	68da      	ldr	r2, [r3, #12]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d83e:	441a      	add	r2, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	68da      	ldr	r2, [r3, #12]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	689b      	ldr	r3, [r3, #8]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d303      	bcc.n	800d858 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681a      	ldr	r2, [r3, #0]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	68d9      	ldr	r1, [r3, #12]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d860:	461a      	mov	r2, r3
 800d862:	6838      	ldr	r0, [r7, #0]
 800d864:	f001 ff96 	bl	800f794 <memcpy>
	}
}
 800d868:	bf00      	nop
 800d86a:	3708      	adds	r7, #8
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}

0800d870 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d878:	f001 fc54 	bl	800f124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d882:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d884:	e011      	b.n	800d8aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d012      	beq.n	800d8b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	3324      	adds	r3, #36	; 0x24
 800d892:	4618      	mov	r0, r3
 800d894:	f000 fd2a 	bl	800e2ec <xTaskRemoveFromEventList>
 800d898:	4603      	mov	r3, r0
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d001      	beq.n	800d8a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d89e:	f000 fe01 	bl	800e4a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d8a2:	7bfb      	ldrb	r3, [r7, #15]
 800d8a4:	3b01      	subs	r3, #1
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d8aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	dce9      	bgt.n	800d886 <prvUnlockQueue+0x16>
 800d8b2:	e000      	b.n	800d8b6 <prvUnlockQueue+0x46>
					break;
 800d8b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	22ff      	movs	r2, #255	; 0xff
 800d8ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d8be:	f001 fc61 	bl	800f184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d8c2:	f001 fc2f 	bl	800f124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d8ce:	e011      	b.n	800d8f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	691b      	ldr	r3, [r3, #16]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d012      	beq.n	800d8fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	3310      	adds	r3, #16
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f000 fd05 	bl	800e2ec <xTaskRemoveFromEventList>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d001      	beq.n	800d8ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d8e8:	f000 fddc 	bl	800e4a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d8ec:	7bbb      	ldrb	r3, [r7, #14]
 800d8ee:	3b01      	subs	r3, #1
 800d8f0:	b2db      	uxtb	r3, r3
 800d8f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d8f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	dce9      	bgt.n	800d8d0 <prvUnlockQueue+0x60>
 800d8fc:	e000      	b.n	800d900 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d8fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	22ff      	movs	r2, #255	; 0xff
 800d904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d908:	f001 fc3c 	bl	800f184 <vPortExitCritical>
}
 800d90c:	bf00      	nop
 800d90e:	3710      	adds	r7, #16
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b084      	sub	sp, #16
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d91c:	f001 fc02 	bl	800f124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d924:	2b00      	cmp	r3, #0
 800d926:	d102      	bne.n	800d92e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d928:	2301      	movs	r3, #1
 800d92a:	60fb      	str	r3, [r7, #12]
 800d92c:	e001      	b.n	800d932 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d92e:	2300      	movs	r3, #0
 800d930:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d932:	f001 fc27 	bl	800f184 <vPortExitCritical>

	return xReturn;
 800d936:	68fb      	ldr	r3, [r7, #12]
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3710      	adds	r7, #16
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b084      	sub	sp, #16
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d948:	f001 fbec 	bl	800f124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d954:	429a      	cmp	r2, r3
 800d956:	d102      	bne.n	800d95e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d958:	2301      	movs	r3, #1
 800d95a:	60fb      	str	r3, [r7, #12]
 800d95c:	e001      	b.n	800d962 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d95e:	2300      	movs	r3, #0
 800d960:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d962:	f001 fc0f 	bl	800f184 <vPortExitCritical>

	return xReturn;
 800d966:	68fb      	ldr	r3, [r7, #12]
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3710      	adds	r7, #16
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}

0800d970 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d970:	b480      	push	{r7}
 800d972:	b085      	sub	sp, #20
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d97a:	2300      	movs	r3, #0
 800d97c:	60fb      	str	r3, [r7, #12]
 800d97e:	e014      	b.n	800d9aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d980:	4a0f      	ldr	r2, [pc, #60]	; (800d9c0 <vQueueAddToRegistry+0x50>)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d10b      	bne.n	800d9a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d98c:	490c      	ldr	r1, [pc, #48]	; (800d9c0 <vQueueAddToRegistry+0x50>)
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	683a      	ldr	r2, [r7, #0]
 800d992:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d996:	4a0a      	ldr	r2, [pc, #40]	; (800d9c0 <vQueueAddToRegistry+0x50>)
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	00db      	lsls	r3, r3, #3
 800d99c:	4413      	add	r3, r2
 800d99e:	687a      	ldr	r2, [r7, #4]
 800d9a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d9a2:	e006      	b.n	800d9b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	60fb      	str	r3, [r7, #12]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2b07      	cmp	r3, #7
 800d9ae:	d9e7      	bls.n	800d980 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d9b0:	bf00      	nop
 800d9b2:	bf00      	nop
 800d9b4:	3714      	adds	r7, #20
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr
 800d9be:	bf00      	nop
 800d9c0:	20005010 	.word	0x20005010

0800d9c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b086      	sub	sp, #24
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d9d4:	f001 fba6 	bl	800f124 <vPortEnterCritical>
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9de:	b25b      	sxtb	r3, r3
 800d9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9e4:	d103      	bne.n	800d9ee <vQueueWaitForMessageRestricted+0x2a>
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9f4:	b25b      	sxtb	r3, r3
 800d9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9fa:	d103      	bne.n	800da04 <vQueueWaitForMessageRestricted+0x40>
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	2200      	movs	r2, #0
 800da00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da04:	f001 fbbe 	bl	800f184 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d106      	bne.n	800da1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	3324      	adds	r3, #36	; 0x24
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	68b9      	ldr	r1, [r7, #8]
 800da18:	4618      	mov	r0, r3
 800da1a:	f000 fc3b 	bl	800e294 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800da1e:	6978      	ldr	r0, [r7, #20]
 800da20:	f7ff ff26 	bl	800d870 <prvUnlockQueue>
	}
 800da24:	bf00      	nop
 800da26:	3718      	adds	r7, #24
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b08e      	sub	sp, #56	; 0x38
 800da30:	af04      	add	r7, sp, #16
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	607a      	str	r2, [r7, #4]
 800da38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800da3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d10a      	bne.n	800da56 <xTaskCreateStatic+0x2a>
	__asm volatile
 800da40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da44:	f383 8811 	msr	BASEPRI, r3
 800da48:	f3bf 8f6f 	isb	sy
 800da4c:	f3bf 8f4f 	dsb	sy
 800da50:	623b      	str	r3, [r7, #32]
}
 800da52:	bf00      	nop
 800da54:	e7fe      	b.n	800da54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800da56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d10a      	bne.n	800da72 <xTaskCreateStatic+0x46>
	__asm volatile
 800da5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da60:	f383 8811 	msr	BASEPRI, r3
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	61fb      	str	r3, [r7, #28]
}
 800da6e:	bf00      	nop
 800da70:	e7fe      	b.n	800da70 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800da72:	235c      	movs	r3, #92	; 0x5c
 800da74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	2b5c      	cmp	r3, #92	; 0x5c
 800da7a:	d00a      	beq.n	800da92 <xTaskCreateStatic+0x66>
	__asm volatile
 800da7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da80:	f383 8811 	msr	BASEPRI, r3
 800da84:	f3bf 8f6f 	isb	sy
 800da88:	f3bf 8f4f 	dsb	sy
 800da8c:	61bb      	str	r3, [r7, #24]
}
 800da8e:	bf00      	nop
 800da90:	e7fe      	b.n	800da90 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800da92:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800da94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da96:	2b00      	cmp	r3, #0
 800da98:	d01e      	beq.n	800dad8 <xTaskCreateStatic+0xac>
 800da9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d01b      	beq.n	800dad8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800daa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800daa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800daa8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800daaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daac:	2202      	movs	r2, #2
 800daae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dab2:	2300      	movs	r3, #0
 800dab4:	9303      	str	r3, [sp, #12]
 800dab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab8:	9302      	str	r3, [sp, #8]
 800daba:	f107 0314 	add.w	r3, r7, #20
 800dabe:	9301      	str	r3, [sp, #4]
 800dac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac2:	9300      	str	r3, [sp, #0]
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	687a      	ldr	r2, [r7, #4]
 800dac8:	68b9      	ldr	r1, [r7, #8]
 800daca:	68f8      	ldr	r0, [r7, #12]
 800dacc:	f000 f850 	bl	800db70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dad0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dad2:	f000 f8dd 	bl	800dc90 <prvAddNewTaskToReadyList>
 800dad6:	e001      	b.n	800dadc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800dad8:	2300      	movs	r3, #0
 800dada:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dadc:	697b      	ldr	r3, [r7, #20]
	}
 800dade:	4618      	mov	r0, r3
 800dae0:	3728      	adds	r7, #40	; 0x28
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b08c      	sub	sp, #48	; 0x30
 800daea:	af04      	add	r7, sp, #16
 800daec:	60f8      	str	r0, [r7, #12]
 800daee:	60b9      	str	r1, [r7, #8]
 800daf0:	603b      	str	r3, [r7, #0]
 800daf2:	4613      	mov	r3, r2
 800daf4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800daf6:	88fb      	ldrh	r3, [r7, #6]
 800daf8:	009b      	lsls	r3, r3, #2
 800dafa:	4618      	mov	r0, r3
 800dafc:	f001 fc34 	bl	800f368 <pvPortMalloc>
 800db00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d00e      	beq.n	800db26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800db08:	205c      	movs	r0, #92	; 0x5c
 800db0a:	f001 fc2d 	bl	800f368 <pvPortMalloc>
 800db0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800db10:	69fb      	ldr	r3, [r7, #28]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d003      	beq.n	800db1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	697a      	ldr	r2, [r7, #20]
 800db1a:	631a      	str	r2, [r3, #48]	; 0x30
 800db1c:	e005      	b.n	800db2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800db1e:	6978      	ldr	r0, [r7, #20]
 800db20:	f001 fcee 	bl	800f500 <vPortFree>
 800db24:	e001      	b.n	800db2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800db26:	2300      	movs	r3, #0
 800db28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800db2a:	69fb      	ldr	r3, [r7, #28]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d017      	beq.n	800db60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800db30:	69fb      	ldr	r3, [r7, #28]
 800db32:	2200      	movs	r2, #0
 800db34:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800db38:	88fa      	ldrh	r2, [r7, #6]
 800db3a:	2300      	movs	r3, #0
 800db3c:	9303      	str	r3, [sp, #12]
 800db3e:	69fb      	ldr	r3, [r7, #28]
 800db40:	9302      	str	r3, [sp, #8]
 800db42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db44:	9301      	str	r3, [sp, #4]
 800db46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	68b9      	ldr	r1, [r7, #8]
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f000 f80e 	bl	800db70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db54:	69f8      	ldr	r0, [r7, #28]
 800db56:	f000 f89b 	bl	800dc90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800db5a:	2301      	movs	r3, #1
 800db5c:	61bb      	str	r3, [r7, #24]
 800db5e:	e002      	b.n	800db66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800db60:	f04f 33ff 	mov.w	r3, #4294967295
 800db64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800db66:	69bb      	ldr	r3, [r7, #24]
	}
 800db68:	4618      	mov	r0, r3
 800db6a:	3720      	adds	r7, #32
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b088      	sub	sp, #32
 800db74:	af00      	add	r7, sp, #0
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	60b9      	str	r1, [r7, #8]
 800db7a:	607a      	str	r2, [r7, #4]
 800db7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800db7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	461a      	mov	r2, r3
 800db88:	21a5      	movs	r1, #165	; 0xa5
 800db8a:	f001 fe11 	bl	800f7b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800db8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db92:	6879      	ldr	r1, [r7, #4]
 800db94:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800db98:	440b      	add	r3, r1
 800db9a:	009b      	lsls	r3, r3, #2
 800db9c:	4413      	add	r3, r2
 800db9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dba0:	69bb      	ldr	r3, [r7, #24]
 800dba2:	f023 0307 	bic.w	r3, r3, #7
 800dba6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dba8:	69bb      	ldr	r3, [r7, #24]
 800dbaa:	f003 0307 	and.w	r3, r3, #7
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d00a      	beq.n	800dbc8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800dbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb6:	f383 8811 	msr	BASEPRI, r3
 800dbba:	f3bf 8f6f 	isb	sy
 800dbbe:	f3bf 8f4f 	dsb	sy
 800dbc2:	617b      	str	r3, [r7, #20]
}
 800dbc4:	bf00      	nop
 800dbc6:	e7fe      	b.n	800dbc6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d01f      	beq.n	800dc0e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dbce:	2300      	movs	r3, #0
 800dbd0:	61fb      	str	r3, [r7, #28]
 800dbd2:	e012      	b.n	800dbfa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dbd4:	68ba      	ldr	r2, [r7, #8]
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	4413      	add	r3, r2
 800dbda:	7819      	ldrb	r1, [r3, #0]
 800dbdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbde:	69fb      	ldr	r3, [r7, #28]
 800dbe0:	4413      	add	r3, r2
 800dbe2:	3334      	adds	r3, #52	; 0x34
 800dbe4:	460a      	mov	r2, r1
 800dbe6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dbe8:	68ba      	ldr	r2, [r7, #8]
 800dbea:	69fb      	ldr	r3, [r7, #28]
 800dbec:	4413      	add	r3, r2
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d006      	beq.n	800dc02 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	61fb      	str	r3, [r7, #28]
 800dbfa:	69fb      	ldr	r3, [r7, #28]
 800dbfc:	2b0f      	cmp	r3, #15
 800dbfe:	d9e9      	bls.n	800dbd4 <prvInitialiseNewTask+0x64>
 800dc00:	e000      	b.n	800dc04 <prvInitialiseNewTask+0x94>
			{
				break;
 800dc02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc06:	2200      	movs	r2, #0
 800dc08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dc0c:	e003      	b.n	800dc16 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc10:	2200      	movs	r2, #0
 800dc12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc18:	2b37      	cmp	r3, #55	; 0x37
 800dc1a:	d901      	bls.n	800dc20 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dc1c:	2337      	movs	r3, #55	; 0x37
 800dc1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2e:	2200      	movs	r2, #0
 800dc30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc34:	3304      	adds	r3, #4
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7ff f978 	bl	800cf2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3e:	3318      	adds	r3, #24
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7ff f973 	bl	800cf2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5e:	2200      	movs	r2, #0
 800dc60:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc64:	2200      	movs	r2, #0
 800dc66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dc6a:	683a      	ldr	r2, [r7, #0]
 800dc6c:	68f9      	ldr	r1, [r7, #12]
 800dc6e:	69b8      	ldr	r0, [r7, #24]
 800dc70:	f001 f928 	bl	800eec4 <pxPortInitialiseStack>
 800dc74:	4602      	mov	r2, r0
 800dc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dc7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d002      	beq.n	800dc86 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc86:	bf00      	nop
 800dc88:	3720      	adds	r7, #32
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
	...

0800dc90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dc98:	f001 fa44 	bl	800f124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dc9c:	4b2d      	ldr	r3, [pc, #180]	; (800dd54 <prvAddNewTaskToReadyList+0xc4>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	3301      	adds	r3, #1
 800dca2:	4a2c      	ldr	r2, [pc, #176]	; (800dd54 <prvAddNewTaskToReadyList+0xc4>)
 800dca4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dca6:	4b2c      	ldr	r3, [pc, #176]	; (800dd58 <prvAddNewTaskToReadyList+0xc8>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d109      	bne.n	800dcc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dcae:	4a2a      	ldr	r2, [pc, #168]	; (800dd58 <prvAddNewTaskToReadyList+0xc8>)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dcb4:	4b27      	ldr	r3, [pc, #156]	; (800dd54 <prvAddNewTaskToReadyList+0xc4>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d110      	bne.n	800dcde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dcbc:	f000 fc16 	bl	800e4ec <prvInitialiseTaskLists>
 800dcc0:	e00d      	b.n	800dcde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dcc2:	4b26      	ldr	r3, [pc, #152]	; (800dd5c <prvAddNewTaskToReadyList+0xcc>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d109      	bne.n	800dcde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dcca:	4b23      	ldr	r3, [pc, #140]	; (800dd58 <prvAddNewTaskToReadyList+0xc8>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d802      	bhi.n	800dcde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dcd8:	4a1f      	ldr	r2, [pc, #124]	; (800dd58 <prvAddNewTaskToReadyList+0xc8>)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dcde:	4b20      	ldr	r3, [pc, #128]	; (800dd60 <prvAddNewTaskToReadyList+0xd0>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	3301      	adds	r3, #1
 800dce4:	4a1e      	ldr	r2, [pc, #120]	; (800dd60 <prvAddNewTaskToReadyList+0xd0>)
 800dce6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dce8:	4b1d      	ldr	r3, [pc, #116]	; (800dd60 <prvAddNewTaskToReadyList+0xd0>)
 800dcea:	681a      	ldr	r2, [r3, #0]
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcf4:	4b1b      	ldr	r3, [pc, #108]	; (800dd64 <prvAddNewTaskToReadyList+0xd4>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d903      	bls.n	800dd04 <prvAddNewTaskToReadyList+0x74>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd00:	4a18      	ldr	r2, [pc, #96]	; (800dd64 <prvAddNewTaskToReadyList+0xd4>)
 800dd02:	6013      	str	r3, [r2, #0]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd08:	4613      	mov	r3, r2
 800dd0a:	009b      	lsls	r3, r3, #2
 800dd0c:	4413      	add	r3, r2
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	4a15      	ldr	r2, [pc, #84]	; (800dd68 <prvAddNewTaskToReadyList+0xd8>)
 800dd12:	441a      	add	r2, r3
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	3304      	adds	r3, #4
 800dd18:	4619      	mov	r1, r3
 800dd1a:	4610      	mov	r0, r2
 800dd1c:	f7ff f913 	bl	800cf46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dd20:	f001 fa30 	bl	800f184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dd24:	4b0d      	ldr	r3, [pc, #52]	; (800dd5c <prvAddNewTaskToReadyList+0xcc>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d00e      	beq.n	800dd4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dd2c:	4b0a      	ldr	r3, [pc, #40]	; (800dd58 <prvAddNewTaskToReadyList+0xc8>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d207      	bcs.n	800dd4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dd3a:	4b0c      	ldr	r3, [pc, #48]	; (800dd6c <prvAddNewTaskToReadyList+0xdc>)
 800dd3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd40:	601a      	str	r2, [r3, #0]
 800dd42:	f3bf 8f4f 	dsb	sy
 800dd46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd4a:	bf00      	nop
 800dd4c:	3708      	adds	r7, #8
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}
 800dd52:	bf00      	nop
 800dd54:	20000dc4 	.word	0x20000dc4
 800dd58:	200008f0 	.word	0x200008f0
 800dd5c:	20000dd0 	.word	0x20000dd0
 800dd60:	20000de0 	.word	0x20000de0
 800dd64:	20000dcc 	.word	0x20000dcc
 800dd68:	200008f4 	.word	0x200008f4
 800dd6c:	e000ed04 	.word	0xe000ed04

0800dd70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d017      	beq.n	800ddb2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dd82:	4b13      	ldr	r3, [pc, #76]	; (800ddd0 <vTaskDelay+0x60>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d00a      	beq.n	800dda0 <vTaskDelay+0x30>
	__asm volatile
 800dd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd8e:	f383 8811 	msr	BASEPRI, r3
 800dd92:	f3bf 8f6f 	isb	sy
 800dd96:	f3bf 8f4f 	dsb	sy
 800dd9a:	60bb      	str	r3, [r7, #8]
}
 800dd9c:	bf00      	nop
 800dd9e:	e7fe      	b.n	800dd9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dda0:	f000 f880 	bl	800dea4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dda4:	2100      	movs	r1, #0
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f000 fcea 	bl	800e780 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ddac:	f000 f888 	bl	800dec0 <xTaskResumeAll>
 800ddb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d107      	bne.n	800ddc8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ddb8:	4b06      	ldr	r3, [pc, #24]	; (800ddd4 <vTaskDelay+0x64>)
 800ddba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddbe:	601a      	str	r2, [r3, #0]
 800ddc0:	f3bf 8f4f 	dsb	sy
 800ddc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ddc8:	bf00      	nop
 800ddca:	3710      	adds	r7, #16
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}
 800ddd0:	20000dec 	.word	0x20000dec
 800ddd4:	e000ed04 	.word	0xe000ed04

0800ddd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b08a      	sub	sp, #40	; 0x28
 800dddc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ddde:	2300      	movs	r3, #0
 800dde0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dde2:	2300      	movs	r3, #0
 800dde4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dde6:	463a      	mov	r2, r7
 800dde8:	1d39      	adds	r1, r7, #4
 800ddea:	f107 0308 	add.w	r3, r7, #8
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7ff f848 	bl	800ce84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ddf4:	6839      	ldr	r1, [r7, #0]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	68ba      	ldr	r2, [r7, #8]
 800ddfa:	9202      	str	r2, [sp, #8]
 800ddfc:	9301      	str	r3, [sp, #4]
 800ddfe:	2300      	movs	r3, #0
 800de00:	9300      	str	r3, [sp, #0]
 800de02:	2300      	movs	r3, #0
 800de04:	460a      	mov	r2, r1
 800de06:	4921      	ldr	r1, [pc, #132]	; (800de8c <vTaskStartScheduler+0xb4>)
 800de08:	4821      	ldr	r0, [pc, #132]	; (800de90 <vTaskStartScheduler+0xb8>)
 800de0a:	f7ff fe0f 	bl	800da2c <xTaskCreateStatic>
 800de0e:	4603      	mov	r3, r0
 800de10:	4a20      	ldr	r2, [pc, #128]	; (800de94 <vTaskStartScheduler+0xbc>)
 800de12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800de14:	4b1f      	ldr	r3, [pc, #124]	; (800de94 <vTaskStartScheduler+0xbc>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d002      	beq.n	800de22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800de1c:	2301      	movs	r3, #1
 800de1e:	617b      	str	r3, [r7, #20]
 800de20:	e001      	b.n	800de26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800de22:	2300      	movs	r3, #0
 800de24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	2b01      	cmp	r3, #1
 800de2a:	d102      	bne.n	800de32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800de2c:	f000 fcfc 	bl	800e828 <xTimerCreateTimerTask>
 800de30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	2b01      	cmp	r3, #1
 800de36:	d116      	bne.n	800de66 <vTaskStartScheduler+0x8e>
	__asm volatile
 800de38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de3c:	f383 8811 	msr	BASEPRI, r3
 800de40:	f3bf 8f6f 	isb	sy
 800de44:	f3bf 8f4f 	dsb	sy
 800de48:	613b      	str	r3, [r7, #16]
}
 800de4a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800de4c:	4b12      	ldr	r3, [pc, #72]	; (800de98 <vTaskStartScheduler+0xc0>)
 800de4e:	f04f 32ff 	mov.w	r2, #4294967295
 800de52:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800de54:	4b11      	ldr	r3, [pc, #68]	; (800de9c <vTaskStartScheduler+0xc4>)
 800de56:	2201      	movs	r2, #1
 800de58:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800de5a:	4b11      	ldr	r3, [pc, #68]	; (800dea0 <vTaskStartScheduler+0xc8>)
 800de5c:	2200      	movs	r2, #0
 800de5e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800de60:	f001 f8be 	bl	800efe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800de64:	e00e      	b.n	800de84 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de6c:	d10a      	bne.n	800de84 <vTaskStartScheduler+0xac>
	__asm volatile
 800de6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de72:	f383 8811 	msr	BASEPRI, r3
 800de76:	f3bf 8f6f 	isb	sy
 800de7a:	f3bf 8f4f 	dsb	sy
 800de7e:	60fb      	str	r3, [r7, #12]
}
 800de80:	bf00      	nop
 800de82:	e7fe      	b.n	800de82 <vTaskStartScheduler+0xaa>
}
 800de84:	bf00      	nop
 800de86:	3718      	adds	r7, #24
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	0800f808 	.word	0x0800f808
 800de90:	0800e4bd 	.word	0x0800e4bd
 800de94:	20000de8 	.word	0x20000de8
 800de98:	20000de4 	.word	0x20000de4
 800de9c:	20000dd0 	.word	0x20000dd0
 800dea0:	20000dc8 	.word	0x20000dc8

0800dea4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dea4:	b480      	push	{r7}
 800dea6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dea8:	4b04      	ldr	r3, [pc, #16]	; (800debc <vTaskSuspendAll+0x18>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	3301      	adds	r3, #1
 800deae:	4a03      	ldr	r2, [pc, #12]	; (800debc <vTaskSuspendAll+0x18>)
 800deb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800deb2:	bf00      	nop
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr
 800debc:	20000dec 	.word	0x20000dec

0800dec0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b084      	sub	sp, #16
 800dec4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dec6:	2300      	movs	r3, #0
 800dec8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800deca:	2300      	movs	r3, #0
 800decc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dece:	4b42      	ldr	r3, [pc, #264]	; (800dfd8 <xTaskResumeAll+0x118>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d10a      	bne.n	800deec <xTaskResumeAll+0x2c>
	__asm volatile
 800ded6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deda:	f383 8811 	msr	BASEPRI, r3
 800dede:	f3bf 8f6f 	isb	sy
 800dee2:	f3bf 8f4f 	dsb	sy
 800dee6:	603b      	str	r3, [r7, #0]
}
 800dee8:	bf00      	nop
 800deea:	e7fe      	b.n	800deea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800deec:	f001 f91a 	bl	800f124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800def0:	4b39      	ldr	r3, [pc, #228]	; (800dfd8 <xTaskResumeAll+0x118>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	3b01      	subs	r3, #1
 800def6:	4a38      	ldr	r2, [pc, #224]	; (800dfd8 <xTaskResumeAll+0x118>)
 800def8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800defa:	4b37      	ldr	r3, [pc, #220]	; (800dfd8 <xTaskResumeAll+0x118>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d162      	bne.n	800dfc8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800df02:	4b36      	ldr	r3, [pc, #216]	; (800dfdc <xTaskResumeAll+0x11c>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d05e      	beq.n	800dfc8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df0a:	e02f      	b.n	800df6c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df0c:	4b34      	ldr	r3, [pc, #208]	; (800dfe0 <xTaskResumeAll+0x120>)
 800df0e:	68db      	ldr	r3, [r3, #12]
 800df10:	68db      	ldr	r3, [r3, #12]
 800df12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	3318      	adds	r3, #24
 800df18:	4618      	mov	r0, r3
 800df1a:	f7ff f871 	bl	800d000 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	3304      	adds	r3, #4
 800df22:	4618      	mov	r0, r3
 800df24:	f7ff f86c 	bl	800d000 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df2c:	4b2d      	ldr	r3, [pc, #180]	; (800dfe4 <xTaskResumeAll+0x124>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	429a      	cmp	r2, r3
 800df32:	d903      	bls.n	800df3c <xTaskResumeAll+0x7c>
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df38:	4a2a      	ldr	r2, [pc, #168]	; (800dfe4 <xTaskResumeAll+0x124>)
 800df3a:	6013      	str	r3, [r2, #0]
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df40:	4613      	mov	r3, r2
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	4413      	add	r3, r2
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	4a27      	ldr	r2, [pc, #156]	; (800dfe8 <xTaskResumeAll+0x128>)
 800df4a:	441a      	add	r2, r3
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	3304      	adds	r3, #4
 800df50:	4619      	mov	r1, r3
 800df52:	4610      	mov	r0, r2
 800df54:	f7fe fff7 	bl	800cf46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df5c:	4b23      	ldr	r3, [pc, #140]	; (800dfec <xTaskResumeAll+0x12c>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df62:	429a      	cmp	r2, r3
 800df64:	d302      	bcc.n	800df6c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800df66:	4b22      	ldr	r3, [pc, #136]	; (800dff0 <xTaskResumeAll+0x130>)
 800df68:	2201      	movs	r2, #1
 800df6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df6c:	4b1c      	ldr	r3, [pc, #112]	; (800dfe0 <xTaskResumeAll+0x120>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d1cb      	bne.n	800df0c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d001      	beq.n	800df7e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800df7a:	f000 fb55 	bl	800e628 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800df7e:	4b1d      	ldr	r3, [pc, #116]	; (800dff4 <xTaskResumeAll+0x134>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d010      	beq.n	800dfac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800df8a:	f000 f847 	bl	800e01c <xTaskIncrementTick>
 800df8e:	4603      	mov	r3, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d002      	beq.n	800df9a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800df94:	4b16      	ldr	r3, [pc, #88]	; (800dff0 <xTaskResumeAll+0x130>)
 800df96:	2201      	movs	r2, #1
 800df98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	3b01      	subs	r3, #1
 800df9e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d1f1      	bne.n	800df8a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dfa6:	4b13      	ldr	r3, [pc, #76]	; (800dff4 <xTaskResumeAll+0x134>)
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dfac:	4b10      	ldr	r3, [pc, #64]	; (800dff0 <xTaskResumeAll+0x130>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d009      	beq.n	800dfc8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dfb8:	4b0f      	ldr	r3, [pc, #60]	; (800dff8 <xTaskResumeAll+0x138>)
 800dfba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfbe:	601a      	str	r2, [r3, #0]
 800dfc0:	f3bf 8f4f 	dsb	sy
 800dfc4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dfc8:	f001 f8dc 	bl	800f184 <vPortExitCritical>

	return xAlreadyYielded;
 800dfcc:	68bb      	ldr	r3, [r7, #8]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3710      	adds	r7, #16
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	20000dec 	.word	0x20000dec
 800dfdc:	20000dc4 	.word	0x20000dc4
 800dfe0:	20000d84 	.word	0x20000d84
 800dfe4:	20000dcc 	.word	0x20000dcc
 800dfe8:	200008f4 	.word	0x200008f4
 800dfec:	200008f0 	.word	0x200008f0
 800dff0:	20000dd8 	.word	0x20000dd8
 800dff4:	20000dd4 	.word	0x20000dd4
 800dff8:	e000ed04 	.word	0xe000ed04

0800dffc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dffc:	b480      	push	{r7}
 800dffe:	b083      	sub	sp, #12
 800e000:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e002:	4b05      	ldr	r3, [pc, #20]	; (800e018 <xTaskGetTickCount+0x1c>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e008:	687b      	ldr	r3, [r7, #4]
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	370c      	adds	r7, #12
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr
 800e016:	bf00      	nop
 800e018:	20000dc8 	.word	0x20000dc8

0800e01c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b086      	sub	sp, #24
 800e020:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e022:	2300      	movs	r3, #0
 800e024:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e026:	4b4f      	ldr	r3, [pc, #316]	; (800e164 <xTaskIncrementTick+0x148>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	f040 808f 	bne.w	800e14e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e030:	4b4d      	ldr	r3, [pc, #308]	; (800e168 <xTaskIncrementTick+0x14c>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	3301      	adds	r3, #1
 800e036:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e038:	4a4b      	ldr	r2, [pc, #300]	; (800e168 <xTaskIncrementTick+0x14c>)
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d120      	bne.n	800e086 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e044:	4b49      	ldr	r3, [pc, #292]	; (800e16c <xTaskIncrementTick+0x150>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d00a      	beq.n	800e064 <xTaskIncrementTick+0x48>
	__asm volatile
 800e04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e052:	f383 8811 	msr	BASEPRI, r3
 800e056:	f3bf 8f6f 	isb	sy
 800e05a:	f3bf 8f4f 	dsb	sy
 800e05e:	603b      	str	r3, [r7, #0]
}
 800e060:	bf00      	nop
 800e062:	e7fe      	b.n	800e062 <xTaskIncrementTick+0x46>
 800e064:	4b41      	ldr	r3, [pc, #260]	; (800e16c <xTaskIncrementTick+0x150>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	60fb      	str	r3, [r7, #12]
 800e06a:	4b41      	ldr	r3, [pc, #260]	; (800e170 <xTaskIncrementTick+0x154>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	4a3f      	ldr	r2, [pc, #252]	; (800e16c <xTaskIncrementTick+0x150>)
 800e070:	6013      	str	r3, [r2, #0]
 800e072:	4a3f      	ldr	r2, [pc, #252]	; (800e170 <xTaskIncrementTick+0x154>)
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	6013      	str	r3, [r2, #0]
 800e078:	4b3e      	ldr	r3, [pc, #248]	; (800e174 <xTaskIncrementTick+0x158>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	3301      	adds	r3, #1
 800e07e:	4a3d      	ldr	r2, [pc, #244]	; (800e174 <xTaskIncrementTick+0x158>)
 800e080:	6013      	str	r3, [r2, #0]
 800e082:	f000 fad1 	bl	800e628 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e086:	4b3c      	ldr	r3, [pc, #240]	; (800e178 <xTaskIncrementTick+0x15c>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	693a      	ldr	r2, [r7, #16]
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d349      	bcc.n	800e124 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e090:	4b36      	ldr	r3, [pc, #216]	; (800e16c <xTaskIncrementTick+0x150>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d104      	bne.n	800e0a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e09a:	4b37      	ldr	r3, [pc, #220]	; (800e178 <xTaskIncrementTick+0x15c>)
 800e09c:	f04f 32ff 	mov.w	r2, #4294967295
 800e0a0:	601a      	str	r2, [r3, #0]
					break;
 800e0a2:	e03f      	b.n	800e124 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0a4:	4b31      	ldr	r3, [pc, #196]	; (800e16c <xTaskIncrementTick+0x150>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	68db      	ldr	r3, [r3, #12]
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e0b4:	693a      	ldr	r2, [r7, #16]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d203      	bcs.n	800e0c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e0bc:	4a2e      	ldr	r2, [pc, #184]	; (800e178 <xTaskIncrementTick+0x15c>)
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e0c2:	e02f      	b.n	800e124 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	3304      	adds	r3, #4
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7fe ff99 	bl	800d000 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d004      	beq.n	800e0e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	3318      	adds	r3, #24
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7fe ff90 	bl	800d000 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0e4:	4b25      	ldr	r3, [pc, #148]	; (800e17c <xTaskIncrementTick+0x160>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d903      	bls.n	800e0f4 <xTaskIncrementTick+0xd8>
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0f0:	4a22      	ldr	r2, [pc, #136]	; (800e17c <xTaskIncrementTick+0x160>)
 800e0f2:	6013      	str	r3, [r2, #0]
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0f8:	4613      	mov	r3, r2
 800e0fa:	009b      	lsls	r3, r3, #2
 800e0fc:	4413      	add	r3, r2
 800e0fe:	009b      	lsls	r3, r3, #2
 800e100:	4a1f      	ldr	r2, [pc, #124]	; (800e180 <xTaskIncrementTick+0x164>)
 800e102:	441a      	add	r2, r3
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	3304      	adds	r3, #4
 800e108:	4619      	mov	r1, r3
 800e10a:	4610      	mov	r0, r2
 800e10c:	f7fe ff1b 	bl	800cf46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e114:	4b1b      	ldr	r3, [pc, #108]	; (800e184 <xTaskIncrementTick+0x168>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d3b8      	bcc.n	800e090 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e11e:	2301      	movs	r3, #1
 800e120:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e122:	e7b5      	b.n	800e090 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e124:	4b17      	ldr	r3, [pc, #92]	; (800e184 <xTaskIncrementTick+0x168>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e12a:	4915      	ldr	r1, [pc, #84]	; (800e180 <xTaskIncrementTick+0x164>)
 800e12c:	4613      	mov	r3, r2
 800e12e:	009b      	lsls	r3, r3, #2
 800e130:	4413      	add	r3, r2
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	440b      	add	r3, r1
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d901      	bls.n	800e140 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e13c:	2301      	movs	r3, #1
 800e13e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e140:	4b11      	ldr	r3, [pc, #68]	; (800e188 <xTaskIncrementTick+0x16c>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d007      	beq.n	800e158 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e148:	2301      	movs	r3, #1
 800e14a:	617b      	str	r3, [r7, #20]
 800e14c:	e004      	b.n	800e158 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e14e:	4b0f      	ldr	r3, [pc, #60]	; (800e18c <xTaskIncrementTick+0x170>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	3301      	adds	r3, #1
 800e154:	4a0d      	ldr	r2, [pc, #52]	; (800e18c <xTaskIncrementTick+0x170>)
 800e156:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e158:	697b      	ldr	r3, [r7, #20]
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3718      	adds	r7, #24
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	20000dec 	.word	0x20000dec
 800e168:	20000dc8 	.word	0x20000dc8
 800e16c:	20000d7c 	.word	0x20000d7c
 800e170:	20000d80 	.word	0x20000d80
 800e174:	20000ddc 	.word	0x20000ddc
 800e178:	20000de4 	.word	0x20000de4
 800e17c:	20000dcc 	.word	0x20000dcc
 800e180:	200008f4 	.word	0x200008f4
 800e184:	200008f0 	.word	0x200008f0
 800e188:	20000dd8 	.word	0x20000dd8
 800e18c:	20000dd4 	.word	0x20000dd4

0800e190 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e190:	b480      	push	{r7}
 800e192:	b085      	sub	sp, #20
 800e194:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e196:	4b28      	ldr	r3, [pc, #160]	; (800e238 <vTaskSwitchContext+0xa8>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d003      	beq.n	800e1a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e19e:	4b27      	ldr	r3, [pc, #156]	; (800e23c <vTaskSwitchContext+0xac>)
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e1a4:	e041      	b.n	800e22a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e1a6:	4b25      	ldr	r3, [pc, #148]	; (800e23c <vTaskSwitchContext+0xac>)
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1ac:	4b24      	ldr	r3, [pc, #144]	; (800e240 <vTaskSwitchContext+0xb0>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	60fb      	str	r3, [r7, #12]
 800e1b2:	e010      	b.n	800e1d6 <vTaskSwitchContext+0x46>
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d10a      	bne.n	800e1d0 <vTaskSwitchContext+0x40>
	__asm volatile
 800e1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1be:	f383 8811 	msr	BASEPRI, r3
 800e1c2:	f3bf 8f6f 	isb	sy
 800e1c6:	f3bf 8f4f 	dsb	sy
 800e1ca:	607b      	str	r3, [r7, #4]
}
 800e1cc:	bf00      	nop
 800e1ce:	e7fe      	b.n	800e1ce <vTaskSwitchContext+0x3e>
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	3b01      	subs	r3, #1
 800e1d4:	60fb      	str	r3, [r7, #12]
 800e1d6:	491b      	ldr	r1, [pc, #108]	; (800e244 <vTaskSwitchContext+0xb4>)
 800e1d8:	68fa      	ldr	r2, [r7, #12]
 800e1da:	4613      	mov	r3, r2
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	4413      	add	r3, r2
 800e1e0:	009b      	lsls	r3, r3, #2
 800e1e2:	440b      	add	r3, r1
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d0e4      	beq.n	800e1b4 <vTaskSwitchContext+0x24>
 800e1ea:	68fa      	ldr	r2, [r7, #12]
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	009b      	lsls	r3, r3, #2
 800e1f0:	4413      	add	r3, r2
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	4a13      	ldr	r2, [pc, #76]	; (800e244 <vTaskSwitchContext+0xb4>)
 800e1f6:	4413      	add	r3, r2
 800e1f8:	60bb      	str	r3, [r7, #8]
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	685a      	ldr	r2, [r3, #4]
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	605a      	str	r2, [r3, #4]
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	685a      	ldr	r2, [r3, #4]
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	3308      	adds	r3, #8
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d104      	bne.n	800e21a <vTaskSwitchContext+0x8a>
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	685a      	ldr	r2, [r3, #4]
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	605a      	str	r2, [r3, #4]
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	685b      	ldr	r3, [r3, #4]
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	4a09      	ldr	r2, [pc, #36]	; (800e248 <vTaskSwitchContext+0xb8>)
 800e222:	6013      	str	r3, [r2, #0]
 800e224:	4a06      	ldr	r2, [pc, #24]	; (800e240 <vTaskSwitchContext+0xb0>)
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	6013      	str	r3, [r2, #0]
}
 800e22a:	bf00      	nop
 800e22c:	3714      	adds	r7, #20
 800e22e:	46bd      	mov	sp, r7
 800e230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e234:	4770      	bx	lr
 800e236:	bf00      	nop
 800e238:	20000dec 	.word	0x20000dec
 800e23c:	20000dd8 	.word	0x20000dd8
 800e240:	20000dcc 	.word	0x20000dcc
 800e244:	200008f4 	.word	0x200008f4
 800e248:	200008f0 	.word	0x200008f0

0800e24c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d10a      	bne.n	800e272 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e260:	f383 8811 	msr	BASEPRI, r3
 800e264:	f3bf 8f6f 	isb	sy
 800e268:	f3bf 8f4f 	dsb	sy
 800e26c:	60fb      	str	r3, [r7, #12]
}
 800e26e:	bf00      	nop
 800e270:	e7fe      	b.n	800e270 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e272:	4b07      	ldr	r3, [pc, #28]	; (800e290 <vTaskPlaceOnEventList+0x44>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	3318      	adds	r3, #24
 800e278:	4619      	mov	r1, r3
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f7fe fe87 	bl	800cf8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e280:	2101      	movs	r1, #1
 800e282:	6838      	ldr	r0, [r7, #0]
 800e284:	f000 fa7c 	bl	800e780 <prvAddCurrentTaskToDelayedList>
}
 800e288:	bf00      	nop
 800e28a:	3710      	adds	r7, #16
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}
 800e290:	200008f0 	.word	0x200008f0

0800e294 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e294:	b580      	push	{r7, lr}
 800e296:	b086      	sub	sp, #24
 800e298:	af00      	add	r7, sp, #0
 800e29a:	60f8      	str	r0, [r7, #12]
 800e29c:	60b9      	str	r1, [r7, #8]
 800e29e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d10a      	bne.n	800e2bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2aa:	f383 8811 	msr	BASEPRI, r3
 800e2ae:	f3bf 8f6f 	isb	sy
 800e2b2:	f3bf 8f4f 	dsb	sy
 800e2b6:	617b      	str	r3, [r7, #20]
}
 800e2b8:	bf00      	nop
 800e2ba:	e7fe      	b.n	800e2ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2bc:	4b0a      	ldr	r3, [pc, #40]	; (800e2e8 <vTaskPlaceOnEventListRestricted+0x54>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	3318      	adds	r3, #24
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	68f8      	ldr	r0, [r7, #12]
 800e2c6:	f7fe fe3e 	bl	800cf46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d002      	beq.n	800e2d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e2d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e2d6:	6879      	ldr	r1, [r7, #4]
 800e2d8:	68b8      	ldr	r0, [r7, #8]
 800e2da:	f000 fa51 	bl	800e780 <prvAddCurrentTaskToDelayedList>
	}
 800e2de:	bf00      	nop
 800e2e0:	3718      	adds	r7, #24
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	200008f0 	.word	0x200008f0

0800e2ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b086      	sub	sp, #24
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	68db      	ldr	r3, [r3, #12]
 800e2fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d10a      	bne.n	800e318 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e306:	f383 8811 	msr	BASEPRI, r3
 800e30a:	f3bf 8f6f 	isb	sy
 800e30e:	f3bf 8f4f 	dsb	sy
 800e312:	60fb      	str	r3, [r7, #12]
}
 800e314:	bf00      	nop
 800e316:	e7fe      	b.n	800e316 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	3318      	adds	r3, #24
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7fe fe6f 	bl	800d000 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e322:	4b1e      	ldr	r3, [pc, #120]	; (800e39c <xTaskRemoveFromEventList+0xb0>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d11d      	bne.n	800e366 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	3304      	adds	r3, #4
 800e32e:	4618      	mov	r0, r3
 800e330:	f7fe fe66 	bl	800d000 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e338:	4b19      	ldr	r3, [pc, #100]	; (800e3a0 <xTaskRemoveFromEventList+0xb4>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d903      	bls.n	800e348 <xTaskRemoveFromEventList+0x5c>
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e344:	4a16      	ldr	r2, [pc, #88]	; (800e3a0 <xTaskRemoveFromEventList+0xb4>)
 800e346:	6013      	str	r3, [r2, #0]
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e34c:	4613      	mov	r3, r2
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	4413      	add	r3, r2
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	4a13      	ldr	r2, [pc, #76]	; (800e3a4 <xTaskRemoveFromEventList+0xb8>)
 800e356:	441a      	add	r2, r3
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	3304      	adds	r3, #4
 800e35c:	4619      	mov	r1, r3
 800e35e:	4610      	mov	r0, r2
 800e360:	f7fe fdf1 	bl	800cf46 <vListInsertEnd>
 800e364:	e005      	b.n	800e372 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	3318      	adds	r3, #24
 800e36a:	4619      	mov	r1, r3
 800e36c:	480e      	ldr	r0, [pc, #56]	; (800e3a8 <xTaskRemoveFromEventList+0xbc>)
 800e36e:	f7fe fdea 	bl	800cf46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e376:	4b0d      	ldr	r3, [pc, #52]	; (800e3ac <xTaskRemoveFromEventList+0xc0>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d905      	bls.n	800e38c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e380:	2301      	movs	r3, #1
 800e382:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e384:	4b0a      	ldr	r3, [pc, #40]	; (800e3b0 <xTaskRemoveFromEventList+0xc4>)
 800e386:	2201      	movs	r2, #1
 800e388:	601a      	str	r2, [r3, #0]
 800e38a:	e001      	b.n	800e390 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e38c:	2300      	movs	r3, #0
 800e38e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e390:	697b      	ldr	r3, [r7, #20]
}
 800e392:	4618      	mov	r0, r3
 800e394:	3718      	adds	r7, #24
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}
 800e39a:	bf00      	nop
 800e39c:	20000dec 	.word	0x20000dec
 800e3a0:	20000dcc 	.word	0x20000dcc
 800e3a4:	200008f4 	.word	0x200008f4
 800e3a8:	20000d84 	.word	0x20000d84
 800e3ac:	200008f0 	.word	0x200008f0
 800e3b0:	20000dd8 	.word	0x20000dd8

0800e3b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e3bc:	4b06      	ldr	r3, [pc, #24]	; (800e3d8 <vTaskInternalSetTimeOutState+0x24>)
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e3c4:	4b05      	ldr	r3, [pc, #20]	; (800e3dc <vTaskInternalSetTimeOutState+0x28>)
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	605a      	str	r2, [r3, #4]
}
 800e3cc:	bf00      	nop
 800e3ce:	370c      	adds	r7, #12
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr
 800e3d8:	20000ddc 	.word	0x20000ddc
 800e3dc:	20000dc8 	.word	0x20000dc8

0800e3e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b088      	sub	sp, #32
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d10a      	bne.n	800e406 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f4:	f383 8811 	msr	BASEPRI, r3
 800e3f8:	f3bf 8f6f 	isb	sy
 800e3fc:	f3bf 8f4f 	dsb	sy
 800e400:	613b      	str	r3, [r7, #16]
}
 800e402:	bf00      	nop
 800e404:	e7fe      	b.n	800e404 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d10a      	bne.n	800e422 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e410:	f383 8811 	msr	BASEPRI, r3
 800e414:	f3bf 8f6f 	isb	sy
 800e418:	f3bf 8f4f 	dsb	sy
 800e41c:	60fb      	str	r3, [r7, #12]
}
 800e41e:	bf00      	nop
 800e420:	e7fe      	b.n	800e420 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e422:	f000 fe7f 	bl	800f124 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e426:	4b1d      	ldr	r3, [pc, #116]	; (800e49c <xTaskCheckForTimeOut+0xbc>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	69ba      	ldr	r2, [r7, #24]
 800e432:	1ad3      	subs	r3, r2, r3
 800e434:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e43e:	d102      	bne.n	800e446 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e440:	2300      	movs	r3, #0
 800e442:	61fb      	str	r3, [r7, #28]
 800e444:	e023      	b.n	800e48e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	4b15      	ldr	r3, [pc, #84]	; (800e4a0 <xTaskCheckForTimeOut+0xc0>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	429a      	cmp	r2, r3
 800e450:	d007      	beq.n	800e462 <xTaskCheckForTimeOut+0x82>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	685b      	ldr	r3, [r3, #4]
 800e456:	69ba      	ldr	r2, [r7, #24]
 800e458:	429a      	cmp	r2, r3
 800e45a:	d302      	bcc.n	800e462 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e45c:	2301      	movs	r3, #1
 800e45e:	61fb      	str	r3, [r7, #28]
 800e460:	e015      	b.n	800e48e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	697a      	ldr	r2, [r7, #20]
 800e468:	429a      	cmp	r2, r3
 800e46a:	d20b      	bcs.n	800e484 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	1ad2      	subs	r2, r2, r3
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f7ff ff9b 	bl	800e3b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e47e:	2300      	movs	r3, #0
 800e480:	61fb      	str	r3, [r7, #28]
 800e482:	e004      	b.n	800e48e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	2200      	movs	r2, #0
 800e488:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e48a:	2301      	movs	r3, #1
 800e48c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e48e:	f000 fe79 	bl	800f184 <vPortExitCritical>

	return xReturn;
 800e492:	69fb      	ldr	r3, [r7, #28]
}
 800e494:	4618      	mov	r0, r3
 800e496:	3720      	adds	r7, #32
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}
 800e49c:	20000dc8 	.word	0x20000dc8
 800e4a0:	20000ddc 	.word	0x20000ddc

0800e4a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e4a8:	4b03      	ldr	r3, [pc, #12]	; (800e4b8 <vTaskMissedYield+0x14>)
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	601a      	str	r2, [r3, #0]
}
 800e4ae:	bf00      	nop
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b6:	4770      	bx	lr
 800e4b8:	20000dd8 	.word	0x20000dd8

0800e4bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e4c4:	f000 f852 	bl	800e56c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e4c8:	4b06      	ldr	r3, [pc, #24]	; (800e4e4 <prvIdleTask+0x28>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	d9f9      	bls.n	800e4c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e4d0:	4b05      	ldr	r3, [pc, #20]	; (800e4e8 <prvIdleTask+0x2c>)
 800e4d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4d6:	601a      	str	r2, [r3, #0]
 800e4d8:	f3bf 8f4f 	dsb	sy
 800e4dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e4e0:	e7f0      	b.n	800e4c4 <prvIdleTask+0x8>
 800e4e2:	bf00      	nop
 800e4e4:	200008f4 	.word	0x200008f4
 800e4e8:	e000ed04 	.word	0xe000ed04

0800e4ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	607b      	str	r3, [r7, #4]
 800e4f6:	e00c      	b.n	800e512 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e4f8:	687a      	ldr	r2, [r7, #4]
 800e4fa:	4613      	mov	r3, r2
 800e4fc:	009b      	lsls	r3, r3, #2
 800e4fe:	4413      	add	r3, r2
 800e500:	009b      	lsls	r3, r3, #2
 800e502:	4a12      	ldr	r2, [pc, #72]	; (800e54c <prvInitialiseTaskLists+0x60>)
 800e504:	4413      	add	r3, r2
 800e506:	4618      	mov	r0, r3
 800e508:	f7fe fcf0 	bl	800ceec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	3301      	adds	r3, #1
 800e510:	607b      	str	r3, [r7, #4]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2b37      	cmp	r3, #55	; 0x37
 800e516:	d9ef      	bls.n	800e4f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e518:	480d      	ldr	r0, [pc, #52]	; (800e550 <prvInitialiseTaskLists+0x64>)
 800e51a:	f7fe fce7 	bl	800ceec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e51e:	480d      	ldr	r0, [pc, #52]	; (800e554 <prvInitialiseTaskLists+0x68>)
 800e520:	f7fe fce4 	bl	800ceec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e524:	480c      	ldr	r0, [pc, #48]	; (800e558 <prvInitialiseTaskLists+0x6c>)
 800e526:	f7fe fce1 	bl	800ceec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e52a:	480c      	ldr	r0, [pc, #48]	; (800e55c <prvInitialiseTaskLists+0x70>)
 800e52c:	f7fe fcde 	bl	800ceec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e530:	480b      	ldr	r0, [pc, #44]	; (800e560 <prvInitialiseTaskLists+0x74>)
 800e532:	f7fe fcdb 	bl	800ceec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e536:	4b0b      	ldr	r3, [pc, #44]	; (800e564 <prvInitialiseTaskLists+0x78>)
 800e538:	4a05      	ldr	r2, [pc, #20]	; (800e550 <prvInitialiseTaskLists+0x64>)
 800e53a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e53c:	4b0a      	ldr	r3, [pc, #40]	; (800e568 <prvInitialiseTaskLists+0x7c>)
 800e53e:	4a05      	ldr	r2, [pc, #20]	; (800e554 <prvInitialiseTaskLists+0x68>)
 800e540:	601a      	str	r2, [r3, #0]
}
 800e542:	bf00      	nop
 800e544:	3708      	adds	r7, #8
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	200008f4 	.word	0x200008f4
 800e550:	20000d54 	.word	0x20000d54
 800e554:	20000d68 	.word	0x20000d68
 800e558:	20000d84 	.word	0x20000d84
 800e55c:	20000d98 	.word	0x20000d98
 800e560:	20000db0 	.word	0x20000db0
 800e564:	20000d7c 	.word	0x20000d7c
 800e568:	20000d80 	.word	0x20000d80

0800e56c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b082      	sub	sp, #8
 800e570:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e572:	e019      	b.n	800e5a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e574:	f000 fdd6 	bl	800f124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e578:	4b10      	ldr	r3, [pc, #64]	; (800e5bc <prvCheckTasksWaitingTermination+0x50>)
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	68db      	ldr	r3, [r3, #12]
 800e57e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	3304      	adds	r3, #4
 800e584:	4618      	mov	r0, r3
 800e586:	f7fe fd3b 	bl	800d000 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e58a:	4b0d      	ldr	r3, [pc, #52]	; (800e5c0 <prvCheckTasksWaitingTermination+0x54>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	3b01      	subs	r3, #1
 800e590:	4a0b      	ldr	r2, [pc, #44]	; (800e5c0 <prvCheckTasksWaitingTermination+0x54>)
 800e592:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e594:	4b0b      	ldr	r3, [pc, #44]	; (800e5c4 <prvCheckTasksWaitingTermination+0x58>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	3b01      	subs	r3, #1
 800e59a:	4a0a      	ldr	r2, [pc, #40]	; (800e5c4 <prvCheckTasksWaitingTermination+0x58>)
 800e59c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e59e:	f000 fdf1 	bl	800f184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f000 f810 	bl	800e5c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e5a8:	4b06      	ldr	r3, [pc, #24]	; (800e5c4 <prvCheckTasksWaitingTermination+0x58>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d1e1      	bne.n	800e574 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e5b0:	bf00      	nop
 800e5b2:	bf00      	nop
 800e5b4:	3708      	adds	r7, #8
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	20000d98 	.word	0x20000d98
 800e5c0:	20000dc4 	.word	0x20000dc4
 800e5c4:	20000dac 	.word	0x20000dac

0800e5c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b084      	sub	sp, #16
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d108      	bne.n	800e5ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f000 ff8e 	bl	800f500 <vPortFree>
				vPortFree( pxTCB );
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 ff8b 	bl	800f500 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e5ea:	e018      	b.n	800e61e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	d103      	bne.n	800e5fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f000 ff82 	bl	800f500 <vPortFree>
	}
 800e5fc:	e00f      	b.n	800e61e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e604:	2b02      	cmp	r3, #2
 800e606:	d00a      	beq.n	800e61e <prvDeleteTCB+0x56>
	__asm volatile
 800e608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e60c:	f383 8811 	msr	BASEPRI, r3
 800e610:	f3bf 8f6f 	isb	sy
 800e614:	f3bf 8f4f 	dsb	sy
 800e618:	60fb      	str	r3, [r7, #12]
}
 800e61a:	bf00      	nop
 800e61c:	e7fe      	b.n	800e61c <prvDeleteTCB+0x54>
	}
 800e61e:	bf00      	nop
 800e620:	3710      	adds	r7, #16
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
	...

0800e628 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e628:	b480      	push	{r7}
 800e62a:	b083      	sub	sp, #12
 800e62c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e62e:	4b0c      	ldr	r3, [pc, #48]	; (800e660 <prvResetNextTaskUnblockTime+0x38>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d104      	bne.n	800e642 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e638:	4b0a      	ldr	r3, [pc, #40]	; (800e664 <prvResetNextTaskUnblockTime+0x3c>)
 800e63a:	f04f 32ff 	mov.w	r2, #4294967295
 800e63e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e640:	e008      	b.n	800e654 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e642:	4b07      	ldr	r3, [pc, #28]	; (800e660 <prvResetNextTaskUnblockTime+0x38>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	68db      	ldr	r3, [r3, #12]
 800e648:	68db      	ldr	r3, [r3, #12]
 800e64a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	685b      	ldr	r3, [r3, #4]
 800e650:	4a04      	ldr	r2, [pc, #16]	; (800e664 <prvResetNextTaskUnblockTime+0x3c>)
 800e652:	6013      	str	r3, [r2, #0]
}
 800e654:	bf00      	nop
 800e656:	370c      	adds	r7, #12
 800e658:	46bd      	mov	sp, r7
 800e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65e:	4770      	bx	lr
 800e660:	20000d7c 	.word	0x20000d7c
 800e664:	20000de4 	.word	0x20000de4

0800e668 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e668:	b480      	push	{r7}
 800e66a:	b083      	sub	sp, #12
 800e66c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e66e:	4b0b      	ldr	r3, [pc, #44]	; (800e69c <xTaskGetSchedulerState+0x34>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d102      	bne.n	800e67c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e676:	2301      	movs	r3, #1
 800e678:	607b      	str	r3, [r7, #4]
 800e67a:	e008      	b.n	800e68e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e67c:	4b08      	ldr	r3, [pc, #32]	; (800e6a0 <xTaskGetSchedulerState+0x38>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d102      	bne.n	800e68a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e684:	2302      	movs	r3, #2
 800e686:	607b      	str	r3, [r7, #4]
 800e688:	e001      	b.n	800e68e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e68a:	2300      	movs	r3, #0
 800e68c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e68e:	687b      	ldr	r3, [r7, #4]
	}
 800e690:	4618      	mov	r0, r3
 800e692:	370c      	adds	r7, #12
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr
 800e69c:	20000dd0 	.word	0x20000dd0
 800e6a0:	20000dec 	.word	0x20000dec

0800e6a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b086      	sub	sp, #24
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d056      	beq.n	800e768 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e6ba:	4b2e      	ldr	r3, [pc, #184]	; (800e774 <xTaskPriorityDisinherit+0xd0>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	693a      	ldr	r2, [r7, #16]
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d00a      	beq.n	800e6da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c8:	f383 8811 	msr	BASEPRI, r3
 800e6cc:	f3bf 8f6f 	isb	sy
 800e6d0:	f3bf 8f4f 	dsb	sy
 800e6d4:	60fb      	str	r3, [r7, #12]
}
 800e6d6:	bf00      	nop
 800e6d8:	e7fe      	b.n	800e6d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d10a      	bne.n	800e6f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e6:	f383 8811 	msr	BASEPRI, r3
 800e6ea:	f3bf 8f6f 	isb	sy
 800e6ee:	f3bf 8f4f 	dsb	sy
 800e6f2:	60bb      	str	r3, [r7, #8]
}
 800e6f4:	bf00      	nop
 800e6f6:	e7fe      	b.n	800e6f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6fc:	1e5a      	subs	r2, r3, #1
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d02c      	beq.n	800e768 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e712:	2b00      	cmp	r3, #0
 800e714:	d128      	bne.n	800e768 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	3304      	adds	r3, #4
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7fe fc70 	bl	800d000 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e72c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e738:	4b0f      	ldr	r3, [pc, #60]	; (800e778 <xTaskPriorityDisinherit+0xd4>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d903      	bls.n	800e748 <xTaskPriorityDisinherit+0xa4>
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e744:	4a0c      	ldr	r2, [pc, #48]	; (800e778 <xTaskPriorityDisinherit+0xd4>)
 800e746:	6013      	str	r3, [r2, #0]
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e74c:	4613      	mov	r3, r2
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	4413      	add	r3, r2
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	4a09      	ldr	r2, [pc, #36]	; (800e77c <xTaskPriorityDisinherit+0xd8>)
 800e756:	441a      	add	r2, r3
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	3304      	adds	r3, #4
 800e75c:	4619      	mov	r1, r3
 800e75e:	4610      	mov	r0, r2
 800e760:	f7fe fbf1 	bl	800cf46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e764:	2301      	movs	r3, #1
 800e766:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e768:	697b      	ldr	r3, [r7, #20]
	}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3718      	adds	r7, #24
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
 800e772:	bf00      	nop
 800e774:	200008f0 	.word	0x200008f0
 800e778:	20000dcc 	.word	0x20000dcc
 800e77c:	200008f4 	.word	0x200008f4

0800e780 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e78a:	4b21      	ldr	r3, [pc, #132]	; (800e810 <prvAddCurrentTaskToDelayedList+0x90>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e790:	4b20      	ldr	r3, [pc, #128]	; (800e814 <prvAddCurrentTaskToDelayedList+0x94>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	3304      	adds	r3, #4
 800e796:	4618      	mov	r0, r3
 800e798:	f7fe fc32 	bl	800d000 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7a2:	d10a      	bne.n	800e7ba <prvAddCurrentTaskToDelayedList+0x3a>
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d007      	beq.n	800e7ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e7aa:	4b1a      	ldr	r3, [pc, #104]	; (800e814 <prvAddCurrentTaskToDelayedList+0x94>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	3304      	adds	r3, #4
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	4819      	ldr	r0, [pc, #100]	; (800e818 <prvAddCurrentTaskToDelayedList+0x98>)
 800e7b4:	f7fe fbc7 	bl	800cf46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e7b8:	e026      	b.n	800e808 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e7ba:	68fa      	ldr	r2, [r7, #12]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	4413      	add	r3, r2
 800e7c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e7c2:	4b14      	ldr	r3, [pc, #80]	; (800e814 <prvAddCurrentTaskToDelayedList+0x94>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	68ba      	ldr	r2, [r7, #8]
 800e7c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e7ca:	68ba      	ldr	r2, [r7, #8]
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d209      	bcs.n	800e7e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e7d2:	4b12      	ldr	r3, [pc, #72]	; (800e81c <prvAddCurrentTaskToDelayedList+0x9c>)
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	4b0f      	ldr	r3, [pc, #60]	; (800e814 <prvAddCurrentTaskToDelayedList+0x94>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	3304      	adds	r3, #4
 800e7dc:	4619      	mov	r1, r3
 800e7de:	4610      	mov	r0, r2
 800e7e0:	f7fe fbd5 	bl	800cf8e <vListInsert>
}
 800e7e4:	e010      	b.n	800e808 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e7e6:	4b0e      	ldr	r3, [pc, #56]	; (800e820 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e7e8:	681a      	ldr	r2, [r3, #0]
 800e7ea:	4b0a      	ldr	r3, [pc, #40]	; (800e814 <prvAddCurrentTaskToDelayedList+0x94>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	3304      	adds	r3, #4
 800e7f0:	4619      	mov	r1, r3
 800e7f2:	4610      	mov	r0, r2
 800e7f4:	f7fe fbcb 	bl	800cf8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e7f8:	4b0a      	ldr	r3, [pc, #40]	; (800e824 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	68ba      	ldr	r2, [r7, #8]
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d202      	bcs.n	800e808 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e802:	4a08      	ldr	r2, [pc, #32]	; (800e824 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	6013      	str	r3, [r2, #0]
}
 800e808:	bf00      	nop
 800e80a:	3710      	adds	r7, #16
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}
 800e810:	20000dc8 	.word	0x20000dc8
 800e814:	200008f0 	.word	0x200008f0
 800e818:	20000db0 	.word	0x20000db0
 800e81c:	20000d80 	.word	0x20000d80
 800e820:	20000d7c 	.word	0x20000d7c
 800e824:	20000de4 	.word	0x20000de4

0800e828 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b08a      	sub	sp, #40	; 0x28
 800e82c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e82e:	2300      	movs	r3, #0
 800e830:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e832:	f000 fb07 	bl	800ee44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e836:	4b1c      	ldr	r3, [pc, #112]	; (800e8a8 <xTimerCreateTimerTask+0x80>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d021      	beq.n	800e882 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e83e:	2300      	movs	r3, #0
 800e840:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e842:	2300      	movs	r3, #0
 800e844:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e846:	1d3a      	adds	r2, r7, #4
 800e848:	f107 0108 	add.w	r1, r7, #8
 800e84c:	f107 030c 	add.w	r3, r7, #12
 800e850:	4618      	mov	r0, r3
 800e852:	f7fe fb31 	bl	800ceb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e856:	6879      	ldr	r1, [r7, #4]
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	9202      	str	r2, [sp, #8]
 800e85e:	9301      	str	r3, [sp, #4]
 800e860:	2302      	movs	r3, #2
 800e862:	9300      	str	r3, [sp, #0]
 800e864:	2300      	movs	r3, #0
 800e866:	460a      	mov	r2, r1
 800e868:	4910      	ldr	r1, [pc, #64]	; (800e8ac <xTimerCreateTimerTask+0x84>)
 800e86a:	4811      	ldr	r0, [pc, #68]	; (800e8b0 <xTimerCreateTimerTask+0x88>)
 800e86c:	f7ff f8de 	bl	800da2c <xTaskCreateStatic>
 800e870:	4603      	mov	r3, r0
 800e872:	4a10      	ldr	r2, [pc, #64]	; (800e8b4 <xTimerCreateTimerTask+0x8c>)
 800e874:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e876:	4b0f      	ldr	r3, [pc, #60]	; (800e8b4 <xTimerCreateTimerTask+0x8c>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d001      	beq.n	800e882 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e87e:	2301      	movs	r3, #1
 800e880:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d10a      	bne.n	800e89e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88c:	f383 8811 	msr	BASEPRI, r3
 800e890:	f3bf 8f6f 	isb	sy
 800e894:	f3bf 8f4f 	dsb	sy
 800e898:	613b      	str	r3, [r7, #16]
}
 800e89a:	bf00      	nop
 800e89c:	e7fe      	b.n	800e89c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e89e:	697b      	ldr	r3, [r7, #20]
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3718      	adds	r7, #24
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	20000e20 	.word	0x20000e20
 800e8ac:	0800f810 	.word	0x0800f810
 800e8b0:	0800e9ed 	.word	0x0800e9ed
 800e8b4:	20000e24 	.word	0x20000e24

0800e8b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b08a      	sub	sp, #40	; 0x28
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	60f8      	str	r0, [r7, #12]
 800e8c0:	60b9      	str	r1, [r7, #8]
 800e8c2:	607a      	str	r2, [r7, #4]
 800e8c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d10a      	bne.n	800e8e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d4:	f383 8811 	msr	BASEPRI, r3
 800e8d8:	f3bf 8f6f 	isb	sy
 800e8dc:	f3bf 8f4f 	dsb	sy
 800e8e0:	623b      	str	r3, [r7, #32]
}
 800e8e2:	bf00      	nop
 800e8e4:	e7fe      	b.n	800e8e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e8e6:	4b1a      	ldr	r3, [pc, #104]	; (800e950 <xTimerGenericCommand+0x98>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d02a      	beq.n	800e944 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	2b05      	cmp	r3, #5
 800e8fe:	dc18      	bgt.n	800e932 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e900:	f7ff feb2 	bl	800e668 <xTaskGetSchedulerState>
 800e904:	4603      	mov	r3, r0
 800e906:	2b02      	cmp	r3, #2
 800e908:	d109      	bne.n	800e91e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e90a:	4b11      	ldr	r3, [pc, #68]	; (800e950 <xTimerGenericCommand+0x98>)
 800e90c:	6818      	ldr	r0, [r3, #0]
 800e90e:	f107 0110 	add.w	r1, r7, #16
 800e912:	2300      	movs	r3, #0
 800e914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e916:	f7fe fca1 	bl	800d25c <xQueueGenericSend>
 800e91a:	6278      	str	r0, [r7, #36]	; 0x24
 800e91c:	e012      	b.n	800e944 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e91e:	4b0c      	ldr	r3, [pc, #48]	; (800e950 <xTimerGenericCommand+0x98>)
 800e920:	6818      	ldr	r0, [r3, #0]
 800e922:	f107 0110 	add.w	r1, r7, #16
 800e926:	2300      	movs	r3, #0
 800e928:	2200      	movs	r2, #0
 800e92a:	f7fe fc97 	bl	800d25c <xQueueGenericSend>
 800e92e:	6278      	str	r0, [r7, #36]	; 0x24
 800e930:	e008      	b.n	800e944 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e932:	4b07      	ldr	r3, [pc, #28]	; (800e950 <xTimerGenericCommand+0x98>)
 800e934:	6818      	ldr	r0, [r3, #0]
 800e936:	f107 0110 	add.w	r1, r7, #16
 800e93a:	2300      	movs	r3, #0
 800e93c:	683a      	ldr	r2, [r7, #0]
 800e93e:	f7fe fd8b 	bl	800d458 <xQueueGenericSendFromISR>
 800e942:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e946:	4618      	mov	r0, r3
 800e948:	3728      	adds	r7, #40	; 0x28
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	20000e20 	.word	0x20000e20

0800e954 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b088      	sub	sp, #32
 800e958:	af02      	add	r7, sp, #8
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e95e:	4b22      	ldr	r3, [pc, #136]	; (800e9e8 <prvProcessExpiredTimer+0x94>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	68db      	ldr	r3, [r3, #12]
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	3304      	adds	r3, #4
 800e96c:	4618      	mov	r0, r3
 800e96e:	f7fe fb47 	bl	800d000 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e978:	f003 0304 	and.w	r3, r3, #4
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d022      	beq.n	800e9c6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	699a      	ldr	r2, [r3, #24]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	18d1      	adds	r1, r2, r3
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	683a      	ldr	r2, [r7, #0]
 800e98c:	6978      	ldr	r0, [r7, #20]
 800e98e:	f000 f8d1 	bl	800eb34 <prvInsertTimerInActiveList>
 800e992:	4603      	mov	r3, r0
 800e994:	2b00      	cmp	r3, #0
 800e996:	d01f      	beq.n	800e9d8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e998:	2300      	movs	r3, #0
 800e99a:	9300      	str	r3, [sp, #0]
 800e99c:	2300      	movs	r3, #0
 800e99e:	687a      	ldr	r2, [r7, #4]
 800e9a0:	2100      	movs	r1, #0
 800e9a2:	6978      	ldr	r0, [r7, #20]
 800e9a4:	f7ff ff88 	bl	800e8b8 <xTimerGenericCommand>
 800e9a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d113      	bne.n	800e9d8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b4:	f383 8811 	msr	BASEPRI, r3
 800e9b8:	f3bf 8f6f 	isb	sy
 800e9bc:	f3bf 8f4f 	dsb	sy
 800e9c0:	60fb      	str	r3, [r7, #12]
}
 800e9c2:	bf00      	nop
 800e9c4:	e7fe      	b.n	800e9c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9cc:	f023 0301 	bic.w	r3, r3, #1
 800e9d0:	b2da      	uxtb	r2, r3
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	6a1b      	ldr	r3, [r3, #32]
 800e9dc:	6978      	ldr	r0, [r7, #20]
 800e9de:	4798      	blx	r3
}
 800e9e0:	bf00      	nop
 800e9e2:	3718      	adds	r7, #24
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	20000e18 	.word	0x20000e18

0800e9ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b084      	sub	sp, #16
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e9f4:	f107 0308 	add.w	r3, r7, #8
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f000 f857 	bl	800eaac <prvGetNextExpireTime>
 800e9fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	4619      	mov	r1, r3
 800ea04:	68f8      	ldr	r0, [r7, #12]
 800ea06:	f000 f803 	bl	800ea10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ea0a:	f000 f8d5 	bl	800ebb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ea0e:	e7f1      	b.n	800e9f4 <prvTimerTask+0x8>

0800ea10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b084      	sub	sp, #16
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ea1a:	f7ff fa43 	bl	800dea4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ea1e:	f107 0308 	add.w	r3, r7, #8
 800ea22:	4618      	mov	r0, r3
 800ea24:	f000 f866 	bl	800eaf4 <prvSampleTimeNow>
 800ea28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d130      	bne.n	800ea92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d10a      	bne.n	800ea4c <prvProcessTimerOrBlockTask+0x3c>
 800ea36:	687a      	ldr	r2, [r7, #4]
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d806      	bhi.n	800ea4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ea3e:	f7ff fa3f 	bl	800dec0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ea42:	68f9      	ldr	r1, [r7, #12]
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f7ff ff85 	bl	800e954 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ea4a:	e024      	b.n	800ea96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d008      	beq.n	800ea64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ea52:	4b13      	ldr	r3, [pc, #76]	; (800eaa0 <prvProcessTimerOrBlockTask+0x90>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d101      	bne.n	800ea60 <prvProcessTimerOrBlockTask+0x50>
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	e000      	b.n	800ea62 <prvProcessTimerOrBlockTask+0x52>
 800ea60:	2300      	movs	r3, #0
 800ea62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ea64:	4b0f      	ldr	r3, [pc, #60]	; (800eaa4 <prvProcessTimerOrBlockTask+0x94>)
 800ea66:	6818      	ldr	r0, [r3, #0]
 800ea68:	687a      	ldr	r2, [r7, #4]
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	1ad3      	subs	r3, r2, r3
 800ea6e:	683a      	ldr	r2, [r7, #0]
 800ea70:	4619      	mov	r1, r3
 800ea72:	f7fe ffa7 	bl	800d9c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ea76:	f7ff fa23 	bl	800dec0 <xTaskResumeAll>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d10a      	bne.n	800ea96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ea80:	4b09      	ldr	r3, [pc, #36]	; (800eaa8 <prvProcessTimerOrBlockTask+0x98>)
 800ea82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea86:	601a      	str	r2, [r3, #0]
 800ea88:	f3bf 8f4f 	dsb	sy
 800ea8c:	f3bf 8f6f 	isb	sy
}
 800ea90:	e001      	b.n	800ea96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ea92:	f7ff fa15 	bl	800dec0 <xTaskResumeAll>
}
 800ea96:	bf00      	nop
 800ea98:	3710      	adds	r7, #16
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	20000e1c 	.word	0x20000e1c
 800eaa4:	20000e20 	.word	0x20000e20
 800eaa8:	e000ed04 	.word	0xe000ed04

0800eaac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eaac:	b480      	push	{r7}
 800eaae:	b085      	sub	sp, #20
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eab4:	4b0e      	ldr	r3, [pc, #56]	; (800eaf0 <prvGetNextExpireTime+0x44>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d101      	bne.n	800eac2 <prvGetNextExpireTime+0x16>
 800eabe:	2201      	movs	r2, #1
 800eac0:	e000      	b.n	800eac4 <prvGetNextExpireTime+0x18>
 800eac2:	2200      	movs	r2, #0
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d105      	bne.n	800eadc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ead0:	4b07      	ldr	r3, [pc, #28]	; (800eaf0 <prvGetNextExpireTime+0x44>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	68db      	ldr	r3, [r3, #12]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	60fb      	str	r3, [r7, #12]
 800eada:	e001      	b.n	800eae0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800eadc:	2300      	movs	r3, #0
 800eade:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eae0:	68fb      	ldr	r3, [r7, #12]
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3714      	adds	r7, #20
 800eae6:	46bd      	mov	sp, r7
 800eae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaec:	4770      	bx	lr
 800eaee:	bf00      	nop
 800eaf0:	20000e18 	.word	0x20000e18

0800eaf4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b084      	sub	sp, #16
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800eafc:	f7ff fa7e 	bl	800dffc <xTaskGetTickCount>
 800eb00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800eb02:	4b0b      	ldr	r3, [pc, #44]	; (800eb30 <prvSampleTimeNow+0x3c>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	68fa      	ldr	r2, [r7, #12]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d205      	bcs.n	800eb18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800eb0c:	f000 f936 	bl	800ed7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2201      	movs	r2, #1
 800eb14:	601a      	str	r2, [r3, #0]
 800eb16:	e002      	b.n	800eb1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800eb1e:	4a04      	ldr	r2, [pc, #16]	; (800eb30 <prvSampleTimeNow+0x3c>)
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800eb24:	68fb      	ldr	r3, [r7, #12]
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3710      	adds	r7, #16
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	20000e28 	.word	0x20000e28

0800eb34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b086      	sub	sp, #24
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	60b9      	str	r1, [r7, #8]
 800eb3e:	607a      	str	r2, [r7, #4]
 800eb40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800eb42:	2300      	movs	r3, #0
 800eb44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	68ba      	ldr	r2, [r7, #8]
 800eb4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	68fa      	ldr	r2, [r7, #12]
 800eb50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800eb52:	68ba      	ldr	r2, [r7, #8]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d812      	bhi.n	800eb80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb5a:	687a      	ldr	r2, [r7, #4]
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	1ad2      	subs	r2, r2, r3
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	699b      	ldr	r3, [r3, #24]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d302      	bcc.n	800eb6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800eb68:	2301      	movs	r3, #1
 800eb6a:	617b      	str	r3, [r7, #20]
 800eb6c:	e01b      	b.n	800eba6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800eb6e:	4b10      	ldr	r3, [pc, #64]	; (800ebb0 <prvInsertTimerInActiveList+0x7c>)
 800eb70:	681a      	ldr	r2, [r3, #0]
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	3304      	adds	r3, #4
 800eb76:	4619      	mov	r1, r3
 800eb78:	4610      	mov	r0, r2
 800eb7a:	f7fe fa08 	bl	800cf8e <vListInsert>
 800eb7e:	e012      	b.n	800eba6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eb80:	687a      	ldr	r2, [r7, #4]
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d206      	bcs.n	800eb96 <prvInsertTimerInActiveList+0x62>
 800eb88:	68ba      	ldr	r2, [r7, #8]
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d302      	bcc.n	800eb96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800eb90:	2301      	movs	r3, #1
 800eb92:	617b      	str	r3, [r7, #20]
 800eb94:	e007      	b.n	800eba6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eb96:	4b07      	ldr	r3, [pc, #28]	; (800ebb4 <prvInsertTimerInActiveList+0x80>)
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	3304      	adds	r3, #4
 800eb9e:	4619      	mov	r1, r3
 800eba0:	4610      	mov	r0, r2
 800eba2:	f7fe f9f4 	bl	800cf8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800eba6:	697b      	ldr	r3, [r7, #20]
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3718      	adds	r7, #24
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	20000e1c 	.word	0x20000e1c
 800ebb4:	20000e18 	.word	0x20000e18

0800ebb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b08e      	sub	sp, #56	; 0x38
 800ebbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ebbe:	e0ca      	b.n	800ed56 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	da18      	bge.n	800ebf8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ebc6:	1d3b      	adds	r3, r7, #4
 800ebc8:	3304      	adds	r3, #4
 800ebca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ebcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d10a      	bne.n	800ebe8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ebd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd6:	f383 8811 	msr	BASEPRI, r3
 800ebda:	f3bf 8f6f 	isb	sy
 800ebde:	f3bf 8f4f 	dsb	sy
 800ebe2:	61fb      	str	r3, [r7, #28]
}
 800ebe4:	bf00      	nop
 800ebe6:	e7fe      	b.n	800ebe6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ebe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebee:	6850      	ldr	r0, [r2, #4]
 800ebf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebf2:	6892      	ldr	r2, [r2, #8]
 800ebf4:	4611      	mov	r1, r2
 800ebf6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	f2c0 80aa 	blt.w	800ed54 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ec04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec06:	695b      	ldr	r3, [r3, #20]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d004      	beq.n	800ec16 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ec0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0e:	3304      	adds	r3, #4
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7fe f9f5 	bl	800d000 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec16:	463b      	mov	r3, r7
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f7ff ff6b 	bl	800eaf4 <prvSampleTimeNow>
 800ec1e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2b09      	cmp	r3, #9
 800ec24:	f200 8097 	bhi.w	800ed56 <prvProcessReceivedCommands+0x19e>
 800ec28:	a201      	add	r2, pc, #4	; (adr r2, 800ec30 <prvProcessReceivedCommands+0x78>)
 800ec2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec2e:	bf00      	nop
 800ec30:	0800ec59 	.word	0x0800ec59
 800ec34:	0800ec59 	.word	0x0800ec59
 800ec38:	0800ec59 	.word	0x0800ec59
 800ec3c:	0800eccd 	.word	0x0800eccd
 800ec40:	0800ece1 	.word	0x0800ece1
 800ec44:	0800ed2b 	.word	0x0800ed2b
 800ec48:	0800ec59 	.word	0x0800ec59
 800ec4c:	0800ec59 	.word	0x0800ec59
 800ec50:	0800eccd 	.word	0x0800eccd
 800ec54:	0800ece1 	.word	0x0800ece1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ec58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec5e:	f043 0301 	orr.w	r3, r3, #1
 800ec62:	b2da      	uxtb	r2, r3
 800ec64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ec6a:	68ba      	ldr	r2, [r7, #8]
 800ec6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6e:	699b      	ldr	r3, [r3, #24]
 800ec70:	18d1      	adds	r1, r2, r3
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec78:	f7ff ff5c 	bl	800eb34 <prvInsertTimerInActiveList>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d069      	beq.n	800ed56 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ec82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec84:	6a1b      	ldr	r3, [r3, #32]
 800ec86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ec8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec90:	f003 0304 	and.w	r3, r3, #4
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d05e      	beq.n	800ed56 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ec98:	68ba      	ldr	r2, [r7, #8]
 800ec9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec9c:	699b      	ldr	r3, [r3, #24]
 800ec9e:	441a      	add	r2, r3
 800eca0:	2300      	movs	r3, #0
 800eca2:	9300      	str	r3, [sp, #0]
 800eca4:	2300      	movs	r3, #0
 800eca6:	2100      	movs	r1, #0
 800eca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecaa:	f7ff fe05 	bl	800e8b8 <xTimerGenericCommand>
 800ecae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ecb0:	6a3b      	ldr	r3, [r7, #32]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d14f      	bne.n	800ed56 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ecb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecba:	f383 8811 	msr	BASEPRI, r3
 800ecbe:	f3bf 8f6f 	isb	sy
 800ecc2:	f3bf 8f4f 	dsb	sy
 800ecc6:	61bb      	str	r3, [r7, #24]
}
 800ecc8:	bf00      	nop
 800ecca:	e7fe      	b.n	800ecca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ecd2:	f023 0301 	bic.w	r3, r3, #1
 800ecd6:	b2da      	uxtb	r2, r3
 800ecd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ecde:	e03a      	b.n	800ed56 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ece0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ece6:	f043 0301 	orr.w	r3, r3, #1
 800ecea:	b2da      	uxtb	r2, r3
 800ecec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ecf2:	68ba      	ldr	r2, [r7, #8]
 800ecf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ecf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecfa:	699b      	ldr	r3, [r3, #24]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d10a      	bne.n	800ed16 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ed00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed04:	f383 8811 	msr	BASEPRI, r3
 800ed08:	f3bf 8f6f 	isb	sy
 800ed0c:	f3bf 8f4f 	dsb	sy
 800ed10:	617b      	str	r3, [r7, #20]
}
 800ed12:	bf00      	nop
 800ed14:	e7fe      	b.n	800ed14 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ed16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed18:	699a      	ldr	r2, [r3, #24]
 800ed1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1c:	18d1      	adds	r1, r2, r3
 800ed1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed24:	f7ff ff06 	bl	800eb34 <prvInsertTimerInActiveList>
					break;
 800ed28:	e015      	b.n	800ed56 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ed2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed30:	f003 0302 	and.w	r3, r3, #2
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d103      	bne.n	800ed40 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ed38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed3a:	f000 fbe1 	bl	800f500 <vPortFree>
 800ed3e:	e00a      	b.n	800ed56 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed46:	f023 0301 	bic.w	r3, r3, #1
 800ed4a:	b2da      	uxtb	r2, r3
 800ed4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ed52:	e000      	b.n	800ed56 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ed54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ed56:	4b08      	ldr	r3, [pc, #32]	; (800ed78 <prvProcessReceivedCommands+0x1c0>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	1d39      	adds	r1, r7, #4
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7fe fc16 	bl	800d590 <xQueueReceive>
 800ed64:	4603      	mov	r3, r0
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	f47f af2a 	bne.w	800ebc0 <prvProcessReceivedCommands+0x8>
	}
}
 800ed6c:	bf00      	nop
 800ed6e:	bf00      	nop
 800ed70:	3730      	adds	r7, #48	; 0x30
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	20000e20 	.word	0x20000e20

0800ed7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b088      	sub	sp, #32
 800ed80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ed82:	e048      	b.n	800ee16 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ed84:	4b2d      	ldr	r3, [pc, #180]	; (800ee3c <prvSwitchTimerLists+0xc0>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	68db      	ldr	r3, [r3, #12]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed8e:	4b2b      	ldr	r3, [pc, #172]	; (800ee3c <prvSwitchTimerLists+0xc0>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	68db      	ldr	r3, [r3, #12]
 800ed94:	68db      	ldr	r3, [r3, #12]
 800ed96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	3304      	adds	r3, #4
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7fe f92f 	bl	800d000 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	6a1b      	ldr	r3, [r3, #32]
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edb0:	f003 0304 	and.w	r3, r3, #4
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d02e      	beq.n	800ee16 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	699b      	ldr	r3, [r3, #24]
 800edbc:	693a      	ldr	r2, [r7, #16]
 800edbe:	4413      	add	r3, r2
 800edc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800edc2:	68ba      	ldr	r2, [r7, #8]
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d90e      	bls.n	800ede8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	68ba      	ldr	r2, [r7, #8]
 800edce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	68fa      	ldr	r2, [r7, #12]
 800edd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800edd6:	4b19      	ldr	r3, [pc, #100]	; (800ee3c <prvSwitchTimerLists+0xc0>)
 800edd8:	681a      	ldr	r2, [r3, #0]
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	3304      	adds	r3, #4
 800edde:	4619      	mov	r1, r3
 800ede0:	4610      	mov	r0, r2
 800ede2:	f7fe f8d4 	bl	800cf8e <vListInsert>
 800ede6:	e016      	b.n	800ee16 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ede8:	2300      	movs	r3, #0
 800edea:	9300      	str	r3, [sp, #0]
 800edec:	2300      	movs	r3, #0
 800edee:	693a      	ldr	r2, [r7, #16]
 800edf0:	2100      	movs	r1, #0
 800edf2:	68f8      	ldr	r0, [r7, #12]
 800edf4:	f7ff fd60 	bl	800e8b8 <xTimerGenericCommand>
 800edf8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d10a      	bne.n	800ee16 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ee00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee04:	f383 8811 	msr	BASEPRI, r3
 800ee08:	f3bf 8f6f 	isb	sy
 800ee0c:	f3bf 8f4f 	dsb	sy
 800ee10:	603b      	str	r3, [r7, #0]
}
 800ee12:	bf00      	nop
 800ee14:	e7fe      	b.n	800ee14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ee16:	4b09      	ldr	r3, [pc, #36]	; (800ee3c <prvSwitchTimerLists+0xc0>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d1b1      	bne.n	800ed84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ee20:	4b06      	ldr	r3, [pc, #24]	; (800ee3c <prvSwitchTimerLists+0xc0>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ee26:	4b06      	ldr	r3, [pc, #24]	; (800ee40 <prvSwitchTimerLists+0xc4>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	4a04      	ldr	r2, [pc, #16]	; (800ee3c <prvSwitchTimerLists+0xc0>)
 800ee2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ee2e:	4a04      	ldr	r2, [pc, #16]	; (800ee40 <prvSwitchTimerLists+0xc4>)
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	6013      	str	r3, [r2, #0]
}
 800ee34:	bf00      	nop
 800ee36:	3718      	adds	r7, #24
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}
 800ee3c:	20000e18 	.word	0x20000e18
 800ee40:	20000e1c 	.word	0x20000e1c

0800ee44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ee4a:	f000 f96b 	bl	800f124 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ee4e:	4b15      	ldr	r3, [pc, #84]	; (800eea4 <prvCheckForValidListAndQueue+0x60>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d120      	bne.n	800ee98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ee56:	4814      	ldr	r0, [pc, #80]	; (800eea8 <prvCheckForValidListAndQueue+0x64>)
 800ee58:	f7fe f848 	bl	800ceec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ee5c:	4813      	ldr	r0, [pc, #76]	; (800eeac <prvCheckForValidListAndQueue+0x68>)
 800ee5e:	f7fe f845 	bl	800ceec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ee62:	4b13      	ldr	r3, [pc, #76]	; (800eeb0 <prvCheckForValidListAndQueue+0x6c>)
 800ee64:	4a10      	ldr	r2, [pc, #64]	; (800eea8 <prvCheckForValidListAndQueue+0x64>)
 800ee66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ee68:	4b12      	ldr	r3, [pc, #72]	; (800eeb4 <prvCheckForValidListAndQueue+0x70>)
 800ee6a:	4a10      	ldr	r2, [pc, #64]	; (800eeac <prvCheckForValidListAndQueue+0x68>)
 800ee6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ee6e:	2300      	movs	r3, #0
 800ee70:	9300      	str	r3, [sp, #0]
 800ee72:	4b11      	ldr	r3, [pc, #68]	; (800eeb8 <prvCheckForValidListAndQueue+0x74>)
 800ee74:	4a11      	ldr	r2, [pc, #68]	; (800eebc <prvCheckForValidListAndQueue+0x78>)
 800ee76:	2110      	movs	r1, #16
 800ee78:	200a      	movs	r0, #10
 800ee7a:	f7fe f953 	bl	800d124 <xQueueGenericCreateStatic>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	4a08      	ldr	r2, [pc, #32]	; (800eea4 <prvCheckForValidListAndQueue+0x60>)
 800ee82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ee84:	4b07      	ldr	r3, [pc, #28]	; (800eea4 <prvCheckForValidListAndQueue+0x60>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d005      	beq.n	800ee98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ee8c:	4b05      	ldr	r3, [pc, #20]	; (800eea4 <prvCheckForValidListAndQueue+0x60>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	490b      	ldr	r1, [pc, #44]	; (800eec0 <prvCheckForValidListAndQueue+0x7c>)
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7fe fd6c 	bl	800d970 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ee98:	f000 f974 	bl	800f184 <vPortExitCritical>
}
 800ee9c:	bf00      	nop
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	20000e20 	.word	0x20000e20
 800eea8:	20000df0 	.word	0x20000df0
 800eeac:	20000e04 	.word	0x20000e04
 800eeb0:	20000e18 	.word	0x20000e18
 800eeb4:	20000e1c 	.word	0x20000e1c
 800eeb8:	20000ecc 	.word	0x20000ecc
 800eebc:	20000e2c 	.word	0x20000e2c
 800eec0:	0800f818 	.word	0x0800f818

0800eec4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eec4:	b480      	push	{r7}
 800eec6:	b085      	sub	sp, #20
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	3b04      	subs	r3, #4
 800eed4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eedc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	3b04      	subs	r3, #4
 800eee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	f023 0201 	bic.w	r2, r3, #1
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	3b04      	subs	r3, #4
 800eef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eef4:	4a0c      	ldr	r2, [pc, #48]	; (800ef28 <pxPortInitialiseStack+0x64>)
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	3b14      	subs	r3, #20
 800eefe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ef00:	687a      	ldr	r2, [r7, #4]
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	3b04      	subs	r3, #4
 800ef0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	f06f 0202 	mvn.w	r2, #2
 800ef12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	3b20      	subs	r3, #32
 800ef18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3714      	adds	r7, #20
 800ef20:	46bd      	mov	sp, r7
 800ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef26:	4770      	bx	lr
 800ef28:	0800ef2d 	.word	0x0800ef2d

0800ef2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b085      	sub	sp, #20
 800ef30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ef32:	2300      	movs	r3, #0
 800ef34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ef36:	4b12      	ldr	r3, [pc, #72]	; (800ef80 <prvTaskExitError+0x54>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef3e:	d00a      	beq.n	800ef56 <prvTaskExitError+0x2a>
	__asm volatile
 800ef40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef44:	f383 8811 	msr	BASEPRI, r3
 800ef48:	f3bf 8f6f 	isb	sy
 800ef4c:	f3bf 8f4f 	dsb	sy
 800ef50:	60fb      	str	r3, [r7, #12]
}
 800ef52:	bf00      	nop
 800ef54:	e7fe      	b.n	800ef54 <prvTaskExitError+0x28>
	__asm volatile
 800ef56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef5a:	f383 8811 	msr	BASEPRI, r3
 800ef5e:	f3bf 8f6f 	isb	sy
 800ef62:	f3bf 8f4f 	dsb	sy
 800ef66:	60bb      	str	r3, [r7, #8]
}
 800ef68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ef6a:	bf00      	nop
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d0fc      	beq.n	800ef6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ef72:	bf00      	nop
 800ef74:	bf00      	nop
 800ef76:	3714      	adds	r7, #20
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7e:	4770      	bx	lr
 800ef80:	20000164 	.word	0x20000164
	...

0800ef90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ef90:	4b07      	ldr	r3, [pc, #28]	; (800efb0 <pxCurrentTCBConst2>)
 800ef92:	6819      	ldr	r1, [r3, #0]
 800ef94:	6808      	ldr	r0, [r1, #0]
 800ef96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef9a:	f380 8809 	msr	PSP, r0
 800ef9e:	f3bf 8f6f 	isb	sy
 800efa2:	f04f 0000 	mov.w	r0, #0
 800efa6:	f380 8811 	msr	BASEPRI, r0
 800efaa:	4770      	bx	lr
 800efac:	f3af 8000 	nop.w

0800efb0 <pxCurrentTCBConst2>:
 800efb0:	200008f0 	.word	0x200008f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800efb4:	bf00      	nop
 800efb6:	bf00      	nop

0800efb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800efb8:	4808      	ldr	r0, [pc, #32]	; (800efdc <prvPortStartFirstTask+0x24>)
 800efba:	6800      	ldr	r0, [r0, #0]
 800efbc:	6800      	ldr	r0, [r0, #0]
 800efbe:	f380 8808 	msr	MSP, r0
 800efc2:	f04f 0000 	mov.w	r0, #0
 800efc6:	f380 8814 	msr	CONTROL, r0
 800efca:	b662      	cpsie	i
 800efcc:	b661      	cpsie	f
 800efce:	f3bf 8f4f 	dsb	sy
 800efd2:	f3bf 8f6f 	isb	sy
 800efd6:	df00      	svc	0
 800efd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800efda:	bf00      	nop
 800efdc:	e000ed08 	.word	0xe000ed08

0800efe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b086      	sub	sp, #24
 800efe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800efe6:	4b46      	ldr	r3, [pc, #280]	; (800f100 <xPortStartScheduler+0x120>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	4a46      	ldr	r2, [pc, #280]	; (800f104 <xPortStartScheduler+0x124>)
 800efec:	4293      	cmp	r3, r2
 800efee:	d10a      	bne.n	800f006 <xPortStartScheduler+0x26>
	__asm volatile
 800eff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff4:	f383 8811 	msr	BASEPRI, r3
 800eff8:	f3bf 8f6f 	isb	sy
 800effc:	f3bf 8f4f 	dsb	sy
 800f000:	613b      	str	r3, [r7, #16]
}
 800f002:	bf00      	nop
 800f004:	e7fe      	b.n	800f004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f006:	4b3e      	ldr	r3, [pc, #248]	; (800f100 <xPortStartScheduler+0x120>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	4a3f      	ldr	r2, [pc, #252]	; (800f108 <xPortStartScheduler+0x128>)
 800f00c:	4293      	cmp	r3, r2
 800f00e:	d10a      	bne.n	800f026 <xPortStartScheduler+0x46>
	__asm volatile
 800f010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f014:	f383 8811 	msr	BASEPRI, r3
 800f018:	f3bf 8f6f 	isb	sy
 800f01c:	f3bf 8f4f 	dsb	sy
 800f020:	60fb      	str	r3, [r7, #12]
}
 800f022:	bf00      	nop
 800f024:	e7fe      	b.n	800f024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f026:	4b39      	ldr	r3, [pc, #228]	; (800f10c <xPortStartScheduler+0x12c>)
 800f028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	781b      	ldrb	r3, [r3, #0]
 800f02e:	b2db      	uxtb	r3, r3
 800f030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	22ff      	movs	r2, #255	; 0xff
 800f036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	781b      	ldrb	r3, [r3, #0]
 800f03c:	b2db      	uxtb	r3, r3
 800f03e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f040:	78fb      	ldrb	r3, [r7, #3]
 800f042:	b2db      	uxtb	r3, r3
 800f044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f048:	b2da      	uxtb	r2, r3
 800f04a:	4b31      	ldr	r3, [pc, #196]	; (800f110 <xPortStartScheduler+0x130>)
 800f04c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f04e:	4b31      	ldr	r3, [pc, #196]	; (800f114 <xPortStartScheduler+0x134>)
 800f050:	2207      	movs	r2, #7
 800f052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f054:	e009      	b.n	800f06a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f056:	4b2f      	ldr	r3, [pc, #188]	; (800f114 <xPortStartScheduler+0x134>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	3b01      	subs	r3, #1
 800f05c:	4a2d      	ldr	r2, [pc, #180]	; (800f114 <xPortStartScheduler+0x134>)
 800f05e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f060:	78fb      	ldrb	r3, [r7, #3]
 800f062:	b2db      	uxtb	r3, r3
 800f064:	005b      	lsls	r3, r3, #1
 800f066:	b2db      	uxtb	r3, r3
 800f068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f06a:	78fb      	ldrb	r3, [r7, #3]
 800f06c:	b2db      	uxtb	r3, r3
 800f06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f072:	2b80      	cmp	r3, #128	; 0x80
 800f074:	d0ef      	beq.n	800f056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f076:	4b27      	ldr	r3, [pc, #156]	; (800f114 <xPortStartScheduler+0x134>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f1c3 0307 	rsb	r3, r3, #7
 800f07e:	2b04      	cmp	r3, #4
 800f080:	d00a      	beq.n	800f098 <xPortStartScheduler+0xb8>
	__asm volatile
 800f082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f086:	f383 8811 	msr	BASEPRI, r3
 800f08a:	f3bf 8f6f 	isb	sy
 800f08e:	f3bf 8f4f 	dsb	sy
 800f092:	60bb      	str	r3, [r7, #8]
}
 800f094:	bf00      	nop
 800f096:	e7fe      	b.n	800f096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f098:	4b1e      	ldr	r3, [pc, #120]	; (800f114 <xPortStartScheduler+0x134>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	021b      	lsls	r3, r3, #8
 800f09e:	4a1d      	ldr	r2, [pc, #116]	; (800f114 <xPortStartScheduler+0x134>)
 800f0a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f0a2:	4b1c      	ldr	r3, [pc, #112]	; (800f114 <xPortStartScheduler+0x134>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f0aa:	4a1a      	ldr	r2, [pc, #104]	; (800f114 <xPortStartScheduler+0x134>)
 800f0ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	b2da      	uxtb	r2, r3
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f0b6:	4b18      	ldr	r3, [pc, #96]	; (800f118 <xPortStartScheduler+0x138>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	4a17      	ldr	r2, [pc, #92]	; (800f118 <xPortStartScheduler+0x138>)
 800f0bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f0c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f0c2:	4b15      	ldr	r3, [pc, #84]	; (800f118 <xPortStartScheduler+0x138>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	4a14      	ldr	r2, [pc, #80]	; (800f118 <xPortStartScheduler+0x138>)
 800f0c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f0cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f0ce:	f000 f8dd 	bl	800f28c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f0d2:	4b12      	ldr	r3, [pc, #72]	; (800f11c <xPortStartScheduler+0x13c>)
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f0d8:	f000 f8fc 	bl	800f2d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f0dc:	4b10      	ldr	r3, [pc, #64]	; (800f120 <xPortStartScheduler+0x140>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	4a0f      	ldr	r2, [pc, #60]	; (800f120 <xPortStartScheduler+0x140>)
 800f0e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f0e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f0e8:	f7ff ff66 	bl	800efb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f0ec:	f7ff f850 	bl	800e190 <vTaskSwitchContext>
	prvTaskExitError();
 800f0f0:	f7ff ff1c 	bl	800ef2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f0f4:	2300      	movs	r3, #0
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3718      	adds	r7, #24
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
 800f0fe:	bf00      	nop
 800f100:	e000ed00 	.word	0xe000ed00
 800f104:	410fc271 	.word	0x410fc271
 800f108:	410fc270 	.word	0x410fc270
 800f10c:	e000e400 	.word	0xe000e400
 800f110:	20000f1c 	.word	0x20000f1c
 800f114:	20000f20 	.word	0x20000f20
 800f118:	e000ed20 	.word	0xe000ed20
 800f11c:	20000164 	.word	0x20000164
 800f120:	e000ef34 	.word	0xe000ef34

0800f124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f124:	b480      	push	{r7}
 800f126:	b083      	sub	sp, #12
 800f128:	af00      	add	r7, sp, #0
	__asm volatile
 800f12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f12e:	f383 8811 	msr	BASEPRI, r3
 800f132:	f3bf 8f6f 	isb	sy
 800f136:	f3bf 8f4f 	dsb	sy
 800f13a:	607b      	str	r3, [r7, #4]
}
 800f13c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f13e:	4b0f      	ldr	r3, [pc, #60]	; (800f17c <vPortEnterCritical+0x58>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	3301      	adds	r3, #1
 800f144:	4a0d      	ldr	r2, [pc, #52]	; (800f17c <vPortEnterCritical+0x58>)
 800f146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f148:	4b0c      	ldr	r3, [pc, #48]	; (800f17c <vPortEnterCritical+0x58>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	2b01      	cmp	r3, #1
 800f14e:	d10f      	bne.n	800f170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f150:	4b0b      	ldr	r3, [pc, #44]	; (800f180 <vPortEnterCritical+0x5c>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	b2db      	uxtb	r3, r3
 800f156:	2b00      	cmp	r3, #0
 800f158:	d00a      	beq.n	800f170 <vPortEnterCritical+0x4c>
	__asm volatile
 800f15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f15e:	f383 8811 	msr	BASEPRI, r3
 800f162:	f3bf 8f6f 	isb	sy
 800f166:	f3bf 8f4f 	dsb	sy
 800f16a:	603b      	str	r3, [r7, #0]
}
 800f16c:	bf00      	nop
 800f16e:	e7fe      	b.n	800f16e <vPortEnterCritical+0x4a>
	}
}
 800f170:	bf00      	nop
 800f172:	370c      	adds	r7, #12
 800f174:	46bd      	mov	sp, r7
 800f176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17a:	4770      	bx	lr
 800f17c:	20000164 	.word	0x20000164
 800f180:	e000ed04 	.word	0xe000ed04

0800f184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f184:	b480      	push	{r7}
 800f186:	b083      	sub	sp, #12
 800f188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f18a:	4b12      	ldr	r3, [pc, #72]	; (800f1d4 <vPortExitCritical+0x50>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d10a      	bne.n	800f1a8 <vPortExitCritical+0x24>
	__asm volatile
 800f192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f196:	f383 8811 	msr	BASEPRI, r3
 800f19a:	f3bf 8f6f 	isb	sy
 800f19e:	f3bf 8f4f 	dsb	sy
 800f1a2:	607b      	str	r3, [r7, #4]
}
 800f1a4:	bf00      	nop
 800f1a6:	e7fe      	b.n	800f1a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f1a8:	4b0a      	ldr	r3, [pc, #40]	; (800f1d4 <vPortExitCritical+0x50>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	3b01      	subs	r3, #1
 800f1ae:	4a09      	ldr	r2, [pc, #36]	; (800f1d4 <vPortExitCritical+0x50>)
 800f1b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f1b2:	4b08      	ldr	r3, [pc, #32]	; (800f1d4 <vPortExitCritical+0x50>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d105      	bne.n	800f1c6 <vPortExitCritical+0x42>
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	f383 8811 	msr	BASEPRI, r3
}
 800f1c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f1c6:	bf00      	nop
 800f1c8:	370c      	adds	r7, #12
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr
 800f1d2:	bf00      	nop
 800f1d4:	20000164 	.word	0x20000164
	...

0800f1e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f1e0:	f3ef 8009 	mrs	r0, PSP
 800f1e4:	f3bf 8f6f 	isb	sy
 800f1e8:	4b15      	ldr	r3, [pc, #84]	; (800f240 <pxCurrentTCBConst>)
 800f1ea:	681a      	ldr	r2, [r3, #0]
 800f1ec:	f01e 0f10 	tst.w	lr, #16
 800f1f0:	bf08      	it	eq
 800f1f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f1f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1fa:	6010      	str	r0, [r2, #0]
 800f1fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f200:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f204:	f380 8811 	msr	BASEPRI, r0
 800f208:	f3bf 8f4f 	dsb	sy
 800f20c:	f3bf 8f6f 	isb	sy
 800f210:	f7fe ffbe 	bl	800e190 <vTaskSwitchContext>
 800f214:	f04f 0000 	mov.w	r0, #0
 800f218:	f380 8811 	msr	BASEPRI, r0
 800f21c:	bc09      	pop	{r0, r3}
 800f21e:	6819      	ldr	r1, [r3, #0]
 800f220:	6808      	ldr	r0, [r1, #0]
 800f222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f226:	f01e 0f10 	tst.w	lr, #16
 800f22a:	bf08      	it	eq
 800f22c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f230:	f380 8809 	msr	PSP, r0
 800f234:	f3bf 8f6f 	isb	sy
 800f238:	4770      	bx	lr
 800f23a:	bf00      	nop
 800f23c:	f3af 8000 	nop.w

0800f240 <pxCurrentTCBConst>:
 800f240:	200008f0 	.word	0x200008f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f244:	bf00      	nop
 800f246:	bf00      	nop

0800f248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b082      	sub	sp, #8
 800f24c:	af00      	add	r7, sp, #0
	__asm volatile
 800f24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f252:	f383 8811 	msr	BASEPRI, r3
 800f256:	f3bf 8f6f 	isb	sy
 800f25a:	f3bf 8f4f 	dsb	sy
 800f25e:	607b      	str	r3, [r7, #4]
}
 800f260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f262:	f7fe fedb 	bl	800e01c <xTaskIncrementTick>
 800f266:	4603      	mov	r3, r0
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d003      	beq.n	800f274 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f26c:	4b06      	ldr	r3, [pc, #24]	; (800f288 <xPortSysTickHandler+0x40>)
 800f26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f272:	601a      	str	r2, [r3, #0]
 800f274:	2300      	movs	r3, #0
 800f276:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	f383 8811 	msr	BASEPRI, r3
}
 800f27e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f280:	bf00      	nop
 800f282:	3708      	adds	r7, #8
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}
 800f288:	e000ed04 	.word	0xe000ed04

0800f28c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f28c:	b480      	push	{r7}
 800f28e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f290:	4b0b      	ldr	r3, [pc, #44]	; (800f2c0 <vPortSetupTimerInterrupt+0x34>)
 800f292:	2200      	movs	r2, #0
 800f294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f296:	4b0b      	ldr	r3, [pc, #44]	; (800f2c4 <vPortSetupTimerInterrupt+0x38>)
 800f298:	2200      	movs	r2, #0
 800f29a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f29c:	4b0a      	ldr	r3, [pc, #40]	; (800f2c8 <vPortSetupTimerInterrupt+0x3c>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	4a0a      	ldr	r2, [pc, #40]	; (800f2cc <vPortSetupTimerInterrupt+0x40>)
 800f2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800f2a6:	099b      	lsrs	r3, r3, #6
 800f2a8:	4a09      	ldr	r2, [pc, #36]	; (800f2d0 <vPortSetupTimerInterrupt+0x44>)
 800f2aa:	3b01      	subs	r3, #1
 800f2ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f2ae:	4b04      	ldr	r3, [pc, #16]	; (800f2c0 <vPortSetupTimerInterrupt+0x34>)
 800f2b0:	2207      	movs	r2, #7
 800f2b2:	601a      	str	r2, [r3, #0]
}
 800f2b4:	bf00      	nop
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2bc:	4770      	bx	lr
 800f2be:	bf00      	nop
 800f2c0:	e000e010 	.word	0xe000e010
 800f2c4:	e000e018 	.word	0xe000e018
 800f2c8:	20000154 	.word	0x20000154
 800f2cc:	10624dd3 	.word	0x10624dd3
 800f2d0:	e000e014 	.word	0xe000e014

0800f2d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f2d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f2e4 <vPortEnableVFP+0x10>
 800f2d8:	6801      	ldr	r1, [r0, #0]
 800f2da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f2de:	6001      	str	r1, [r0, #0]
 800f2e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f2e2:	bf00      	nop
 800f2e4:	e000ed88 	.word	0xe000ed88

0800f2e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b085      	sub	sp, #20
 800f2ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f2ee:	f3ef 8305 	mrs	r3, IPSR
 800f2f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	2b0f      	cmp	r3, #15
 800f2f8:	d914      	bls.n	800f324 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f2fa:	4a17      	ldr	r2, [pc, #92]	; (800f358 <vPortValidateInterruptPriority+0x70>)
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	4413      	add	r3, r2
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f304:	4b15      	ldr	r3, [pc, #84]	; (800f35c <vPortValidateInterruptPriority+0x74>)
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	7afa      	ldrb	r2, [r7, #11]
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d20a      	bcs.n	800f324 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f312:	f383 8811 	msr	BASEPRI, r3
 800f316:	f3bf 8f6f 	isb	sy
 800f31a:	f3bf 8f4f 	dsb	sy
 800f31e:	607b      	str	r3, [r7, #4]
}
 800f320:	bf00      	nop
 800f322:	e7fe      	b.n	800f322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f324:	4b0e      	ldr	r3, [pc, #56]	; (800f360 <vPortValidateInterruptPriority+0x78>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f32c:	4b0d      	ldr	r3, [pc, #52]	; (800f364 <vPortValidateInterruptPriority+0x7c>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	429a      	cmp	r2, r3
 800f332:	d90a      	bls.n	800f34a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f338:	f383 8811 	msr	BASEPRI, r3
 800f33c:	f3bf 8f6f 	isb	sy
 800f340:	f3bf 8f4f 	dsb	sy
 800f344:	603b      	str	r3, [r7, #0]
}
 800f346:	bf00      	nop
 800f348:	e7fe      	b.n	800f348 <vPortValidateInterruptPriority+0x60>
	}
 800f34a:	bf00      	nop
 800f34c:	3714      	adds	r7, #20
 800f34e:	46bd      	mov	sp, r7
 800f350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f354:	4770      	bx	lr
 800f356:	bf00      	nop
 800f358:	e000e3f0 	.word	0xe000e3f0
 800f35c:	20000f1c 	.word	0x20000f1c
 800f360:	e000ed0c 	.word	0xe000ed0c
 800f364:	20000f20 	.word	0x20000f20

0800f368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b08a      	sub	sp, #40	; 0x28
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f370:	2300      	movs	r3, #0
 800f372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f374:	f7fe fd96 	bl	800dea4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f378:	4b5b      	ldr	r3, [pc, #364]	; (800f4e8 <pvPortMalloc+0x180>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d101      	bne.n	800f384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f380:	f000 f920 	bl	800f5c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f384:	4b59      	ldr	r3, [pc, #356]	; (800f4ec <pvPortMalloc+0x184>)
 800f386:	681a      	ldr	r2, [r3, #0]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	4013      	ands	r3, r2
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	f040 8093 	bne.w	800f4b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d01d      	beq.n	800f3d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f398:	2208      	movs	r2, #8
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	4413      	add	r3, r2
 800f39e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f003 0307 	and.w	r3, r3, #7
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d014      	beq.n	800f3d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f023 0307 	bic.w	r3, r3, #7
 800f3b0:	3308      	adds	r3, #8
 800f3b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f003 0307 	and.w	r3, r3, #7
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d00a      	beq.n	800f3d4 <pvPortMalloc+0x6c>
	__asm volatile
 800f3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c2:	f383 8811 	msr	BASEPRI, r3
 800f3c6:	f3bf 8f6f 	isb	sy
 800f3ca:	f3bf 8f4f 	dsb	sy
 800f3ce:	617b      	str	r3, [r7, #20]
}
 800f3d0:	bf00      	nop
 800f3d2:	e7fe      	b.n	800f3d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d06e      	beq.n	800f4b8 <pvPortMalloc+0x150>
 800f3da:	4b45      	ldr	r3, [pc, #276]	; (800f4f0 <pvPortMalloc+0x188>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	687a      	ldr	r2, [r7, #4]
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d869      	bhi.n	800f4b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f3e4:	4b43      	ldr	r3, [pc, #268]	; (800f4f4 <pvPortMalloc+0x18c>)
 800f3e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f3e8:	4b42      	ldr	r3, [pc, #264]	; (800f4f4 <pvPortMalloc+0x18c>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f3ee:	e004      	b.n	800f3fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	687a      	ldr	r2, [r7, #4]
 800f400:	429a      	cmp	r2, r3
 800f402:	d903      	bls.n	800f40c <pvPortMalloc+0xa4>
 800f404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d1f1      	bne.n	800f3f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f40c:	4b36      	ldr	r3, [pc, #216]	; (800f4e8 <pvPortMalloc+0x180>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f412:	429a      	cmp	r2, r3
 800f414:	d050      	beq.n	800f4b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f416:	6a3b      	ldr	r3, [r7, #32]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2208      	movs	r2, #8
 800f41c:	4413      	add	r3, r2
 800f41e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f422:	681a      	ldr	r2, [r3, #0]
 800f424:	6a3b      	ldr	r3, [r7, #32]
 800f426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42a:	685a      	ldr	r2, [r3, #4]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	1ad2      	subs	r2, r2, r3
 800f430:	2308      	movs	r3, #8
 800f432:	005b      	lsls	r3, r3, #1
 800f434:	429a      	cmp	r2, r3
 800f436:	d91f      	bls.n	800f478 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	4413      	add	r3, r2
 800f43e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f440:	69bb      	ldr	r3, [r7, #24]
 800f442:	f003 0307 	and.w	r3, r3, #7
 800f446:	2b00      	cmp	r3, #0
 800f448:	d00a      	beq.n	800f460 <pvPortMalloc+0xf8>
	__asm volatile
 800f44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f44e:	f383 8811 	msr	BASEPRI, r3
 800f452:	f3bf 8f6f 	isb	sy
 800f456:	f3bf 8f4f 	dsb	sy
 800f45a:	613b      	str	r3, [r7, #16]
}
 800f45c:	bf00      	nop
 800f45e:	e7fe      	b.n	800f45e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f462:	685a      	ldr	r2, [r3, #4]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	1ad2      	subs	r2, r2, r3
 800f468:	69bb      	ldr	r3, [r7, #24]
 800f46a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46e:	687a      	ldr	r2, [r7, #4]
 800f470:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f472:	69b8      	ldr	r0, [r7, #24]
 800f474:	f000 f908 	bl	800f688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f478:	4b1d      	ldr	r3, [pc, #116]	; (800f4f0 <pvPortMalloc+0x188>)
 800f47a:	681a      	ldr	r2, [r3, #0]
 800f47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f47e:	685b      	ldr	r3, [r3, #4]
 800f480:	1ad3      	subs	r3, r2, r3
 800f482:	4a1b      	ldr	r2, [pc, #108]	; (800f4f0 <pvPortMalloc+0x188>)
 800f484:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f486:	4b1a      	ldr	r3, [pc, #104]	; (800f4f0 <pvPortMalloc+0x188>)
 800f488:	681a      	ldr	r2, [r3, #0]
 800f48a:	4b1b      	ldr	r3, [pc, #108]	; (800f4f8 <pvPortMalloc+0x190>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	429a      	cmp	r2, r3
 800f490:	d203      	bcs.n	800f49a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f492:	4b17      	ldr	r3, [pc, #92]	; (800f4f0 <pvPortMalloc+0x188>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	4a18      	ldr	r2, [pc, #96]	; (800f4f8 <pvPortMalloc+0x190>)
 800f498:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f49c:	685a      	ldr	r2, [r3, #4]
 800f49e:	4b13      	ldr	r3, [pc, #76]	; (800f4ec <pvPortMalloc+0x184>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	431a      	orrs	r2, r3
 800f4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f4ae:	4b13      	ldr	r3, [pc, #76]	; (800f4fc <pvPortMalloc+0x194>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	3301      	adds	r3, #1
 800f4b4:	4a11      	ldr	r2, [pc, #68]	; (800f4fc <pvPortMalloc+0x194>)
 800f4b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f4b8:	f7fe fd02 	bl	800dec0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4bc:	69fb      	ldr	r3, [r7, #28]
 800f4be:	f003 0307 	and.w	r3, r3, #7
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d00a      	beq.n	800f4dc <pvPortMalloc+0x174>
	__asm volatile
 800f4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ca:	f383 8811 	msr	BASEPRI, r3
 800f4ce:	f3bf 8f6f 	isb	sy
 800f4d2:	f3bf 8f4f 	dsb	sy
 800f4d6:	60fb      	str	r3, [r7, #12]
}
 800f4d8:	bf00      	nop
 800f4da:	e7fe      	b.n	800f4da <pvPortMalloc+0x172>
	return pvReturn;
 800f4dc:	69fb      	ldr	r3, [r7, #28]
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	3728      	adds	r7, #40	; 0x28
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}
 800f4e6:	bf00      	nop
 800f4e8:	20004b2c 	.word	0x20004b2c
 800f4ec:	20004b40 	.word	0x20004b40
 800f4f0:	20004b30 	.word	0x20004b30
 800f4f4:	20004b24 	.word	0x20004b24
 800f4f8:	20004b34 	.word	0x20004b34
 800f4fc:	20004b38 	.word	0x20004b38

0800f500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b086      	sub	sp, #24
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d04d      	beq.n	800f5ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f512:	2308      	movs	r3, #8
 800f514:	425b      	negs	r3, r3
 800f516:	697a      	ldr	r2, [r7, #20]
 800f518:	4413      	add	r3, r2
 800f51a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	685a      	ldr	r2, [r3, #4]
 800f524:	4b24      	ldr	r3, [pc, #144]	; (800f5b8 <vPortFree+0xb8>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	4013      	ands	r3, r2
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d10a      	bne.n	800f544 <vPortFree+0x44>
	__asm volatile
 800f52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f532:	f383 8811 	msr	BASEPRI, r3
 800f536:	f3bf 8f6f 	isb	sy
 800f53a:	f3bf 8f4f 	dsb	sy
 800f53e:	60fb      	str	r3, [r7, #12]
}
 800f540:	bf00      	nop
 800f542:	e7fe      	b.n	800f542 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d00a      	beq.n	800f562 <vPortFree+0x62>
	__asm volatile
 800f54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f550:	f383 8811 	msr	BASEPRI, r3
 800f554:	f3bf 8f6f 	isb	sy
 800f558:	f3bf 8f4f 	dsb	sy
 800f55c:	60bb      	str	r3, [r7, #8]
}
 800f55e:	bf00      	nop
 800f560:	e7fe      	b.n	800f560 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	685a      	ldr	r2, [r3, #4]
 800f566:	4b14      	ldr	r3, [pc, #80]	; (800f5b8 <vPortFree+0xb8>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	4013      	ands	r3, r2
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d01e      	beq.n	800f5ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d11a      	bne.n	800f5ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	685a      	ldr	r2, [r3, #4]
 800f57c:	4b0e      	ldr	r3, [pc, #56]	; (800f5b8 <vPortFree+0xb8>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	43db      	mvns	r3, r3
 800f582:	401a      	ands	r2, r3
 800f584:	693b      	ldr	r3, [r7, #16]
 800f586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f588:	f7fe fc8c 	bl	800dea4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f58c:	693b      	ldr	r3, [r7, #16]
 800f58e:	685a      	ldr	r2, [r3, #4]
 800f590:	4b0a      	ldr	r3, [pc, #40]	; (800f5bc <vPortFree+0xbc>)
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	4413      	add	r3, r2
 800f596:	4a09      	ldr	r2, [pc, #36]	; (800f5bc <vPortFree+0xbc>)
 800f598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f59a:	6938      	ldr	r0, [r7, #16]
 800f59c:	f000 f874 	bl	800f688 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f5a0:	4b07      	ldr	r3, [pc, #28]	; (800f5c0 <vPortFree+0xc0>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	3301      	adds	r3, #1
 800f5a6:	4a06      	ldr	r2, [pc, #24]	; (800f5c0 <vPortFree+0xc0>)
 800f5a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f5aa:	f7fe fc89 	bl	800dec0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f5ae:	bf00      	nop
 800f5b0:	3718      	adds	r7, #24
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
 800f5b6:	bf00      	nop
 800f5b8:	20004b40 	.word	0x20004b40
 800f5bc:	20004b30 	.word	0x20004b30
 800f5c0:	20004b3c 	.word	0x20004b3c

0800f5c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b085      	sub	sp, #20
 800f5c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f5ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f5ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f5d0:	4b27      	ldr	r3, [pc, #156]	; (800f670 <prvHeapInit+0xac>)
 800f5d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f003 0307 	and.w	r3, r3, #7
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d00c      	beq.n	800f5f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	3307      	adds	r3, #7
 800f5e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f023 0307 	bic.w	r3, r3, #7
 800f5ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f5ec:	68ba      	ldr	r2, [r7, #8]
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	1ad3      	subs	r3, r2, r3
 800f5f2:	4a1f      	ldr	r2, [pc, #124]	; (800f670 <prvHeapInit+0xac>)
 800f5f4:	4413      	add	r3, r2
 800f5f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f5fc:	4a1d      	ldr	r2, [pc, #116]	; (800f674 <prvHeapInit+0xb0>)
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f602:	4b1c      	ldr	r3, [pc, #112]	; (800f674 <prvHeapInit+0xb0>)
 800f604:	2200      	movs	r2, #0
 800f606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	68ba      	ldr	r2, [r7, #8]
 800f60c:	4413      	add	r3, r2
 800f60e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f610:	2208      	movs	r2, #8
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	1a9b      	subs	r3, r3, r2
 800f616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f023 0307 	bic.w	r3, r3, #7
 800f61e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	4a15      	ldr	r2, [pc, #84]	; (800f678 <prvHeapInit+0xb4>)
 800f624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f626:	4b14      	ldr	r3, [pc, #80]	; (800f678 <prvHeapInit+0xb4>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	2200      	movs	r2, #0
 800f62c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f62e:	4b12      	ldr	r3, [pc, #72]	; (800f678 <prvHeapInit+0xb4>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	2200      	movs	r2, #0
 800f634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	68fa      	ldr	r2, [r7, #12]
 800f63e:	1ad2      	subs	r2, r2, r3
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f644:	4b0c      	ldr	r3, [pc, #48]	; (800f678 <prvHeapInit+0xb4>)
 800f646:	681a      	ldr	r2, [r3, #0]
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	685b      	ldr	r3, [r3, #4]
 800f650:	4a0a      	ldr	r2, [pc, #40]	; (800f67c <prvHeapInit+0xb8>)
 800f652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	685b      	ldr	r3, [r3, #4]
 800f658:	4a09      	ldr	r2, [pc, #36]	; (800f680 <prvHeapInit+0xbc>)
 800f65a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f65c:	4b09      	ldr	r3, [pc, #36]	; (800f684 <prvHeapInit+0xc0>)
 800f65e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f662:	601a      	str	r2, [r3, #0]
}
 800f664:	bf00      	nop
 800f666:	3714      	adds	r7, #20
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr
 800f670:	20000f24 	.word	0x20000f24
 800f674:	20004b24 	.word	0x20004b24
 800f678:	20004b2c 	.word	0x20004b2c
 800f67c:	20004b34 	.word	0x20004b34
 800f680:	20004b30 	.word	0x20004b30
 800f684:	20004b40 	.word	0x20004b40

0800f688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f688:	b480      	push	{r7}
 800f68a:	b085      	sub	sp, #20
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f690:	4b28      	ldr	r3, [pc, #160]	; (800f734 <prvInsertBlockIntoFreeList+0xac>)
 800f692:	60fb      	str	r3, [r7, #12]
 800f694:	e002      	b.n	800f69c <prvInsertBlockIntoFreeList+0x14>
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	60fb      	str	r3, [r7, #12]
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	687a      	ldr	r2, [r7, #4]
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d8f7      	bhi.n	800f696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	685b      	ldr	r3, [r3, #4]
 800f6ae:	68ba      	ldr	r2, [r7, #8]
 800f6b0:	4413      	add	r3, r2
 800f6b2:	687a      	ldr	r2, [r7, #4]
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d108      	bne.n	800f6ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	685a      	ldr	r2, [r3, #4]
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	441a      	add	r2, r3
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	685b      	ldr	r3, [r3, #4]
 800f6d2:	68ba      	ldr	r2, [r7, #8]
 800f6d4:	441a      	add	r2, r3
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d118      	bne.n	800f710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	681a      	ldr	r2, [r3, #0]
 800f6e2:	4b15      	ldr	r3, [pc, #84]	; (800f738 <prvInsertBlockIntoFreeList+0xb0>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	d00d      	beq.n	800f706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	685a      	ldr	r2, [r3, #4]
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	441a      	add	r2, r3
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	681a      	ldr	r2, [r3, #0]
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	601a      	str	r2, [r3, #0]
 800f704:	e008      	b.n	800f718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f706:	4b0c      	ldr	r3, [pc, #48]	; (800f738 <prvInsertBlockIntoFreeList+0xb0>)
 800f708:	681a      	ldr	r2, [r3, #0]
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	601a      	str	r2, [r3, #0]
 800f70e:	e003      	b.n	800f718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	681a      	ldr	r2, [r3, #0]
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f718:	68fa      	ldr	r2, [r7, #12]
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d002      	beq.n	800f726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	687a      	ldr	r2, [r7, #4]
 800f724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f726:	bf00      	nop
 800f728:	3714      	adds	r7, #20
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr
 800f732:	bf00      	nop
 800f734:	20004b24 	.word	0x20004b24
 800f738:	20004b2c 	.word	0x20004b2c

0800f73c <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
 void MX_TouchGFX_Init(void)
{
 800f73c:	b480      	push	{r7}
 800f73e:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
	  void touchgfx_init(void);
}
 800f740:	bf00      	nop
 800f742:	46bd      	mov	sp, r7
 800f744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f748:	4770      	bx	lr
	...

0800f74c <__libc_init_array>:
 800f74c:	b570      	push	{r4, r5, r6, lr}
 800f74e:	4d0d      	ldr	r5, [pc, #52]	; (800f784 <__libc_init_array+0x38>)
 800f750:	4c0d      	ldr	r4, [pc, #52]	; (800f788 <__libc_init_array+0x3c>)
 800f752:	1b64      	subs	r4, r4, r5
 800f754:	10a4      	asrs	r4, r4, #2
 800f756:	2600      	movs	r6, #0
 800f758:	42a6      	cmp	r6, r4
 800f75a:	d109      	bne.n	800f770 <__libc_init_array+0x24>
 800f75c:	4d0b      	ldr	r5, [pc, #44]	; (800f78c <__libc_init_array+0x40>)
 800f75e:	4c0c      	ldr	r4, [pc, #48]	; (800f790 <__libc_init_array+0x44>)
 800f760:	f000 f82e 	bl	800f7c0 <_init>
 800f764:	1b64      	subs	r4, r4, r5
 800f766:	10a4      	asrs	r4, r4, #2
 800f768:	2600      	movs	r6, #0
 800f76a:	42a6      	cmp	r6, r4
 800f76c:	d105      	bne.n	800f77a <__libc_init_array+0x2e>
 800f76e:	bd70      	pop	{r4, r5, r6, pc}
 800f770:	f855 3b04 	ldr.w	r3, [r5], #4
 800f774:	4798      	blx	r3
 800f776:	3601      	adds	r6, #1
 800f778:	e7ee      	b.n	800f758 <__libc_init_array+0xc>
 800f77a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f77e:	4798      	blx	r3
 800f780:	3601      	adds	r6, #1
 800f782:	e7f2      	b.n	800f76a <__libc_init_array+0x1e>
 800f784:	0800f914 	.word	0x0800f914
 800f788:	0800f914 	.word	0x0800f914
 800f78c:	0800f914 	.word	0x0800f914
 800f790:	0800f918 	.word	0x0800f918

0800f794 <memcpy>:
 800f794:	440a      	add	r2, r1
 800f796:	4291      	cmp	r1, r2
 800f798:	f100 33ff 	add.w	r3, r0, #4294967295
 800f79c:	d100      	bne.n	800f7a0 <memcpy+0xc>
 800f79e:	4770      	bx	lr
 800f7a0:	b510      	push	{r4, lr}
 800f7a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7aa:	4291      	cmp	r1, r2
 800f7ac:	d1f9      	bne.n	800f7a2 <memcpy+0xe>
 800f7ae:	bd10      	pop	{r4, pc}

0800f7b0 <memset>:
 800f7b0:	4402      	add	r2, r0
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d100      	bne.n	800f7ba <memset+0xa>
 800f7b8:	4770      	bx	lr
 800f7ba:	f803 1b01 	strb.w	r1, [r3], #1
 800f7be:	e7f9      	b.n	800f7b4 <memset+0x4>

0800f7c0 <_init>:
 800f7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7c2:	bf00      	nop
 800f7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7c6:	bc08      	pop	{r3}
 800f7c8:	469e      	mov	lr, r3
 800f7ca:	4770      	bx	lr

0800f7cc <_fini>:
 800f7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ce:	bf00      	nop
 800f7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7d2:	bc08      	pop	{r3}
 800f7d4:	469e      	mov	lr, r3
 800f7d6:	4770      	bx	lr
