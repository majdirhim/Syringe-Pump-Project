
openh7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ece4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800ef84  0800ef84  0001ef84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f0fc  0800f0fc  0001f0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f104  0800f104  0001f104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f108  0800f108  0001f108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d0  20000000  0800f10c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004d80  200001d0  0800f2dc  000201d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004f50  0800f2dc  00024f50  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003ea21  00000000  00000000  000201fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005e3c  00000000  00000000  0005ec1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000021b0  00000000  00000000  00064a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002010  00000000  00000000  00066c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d520  00000000  00000000  00068c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002728e  00000000  00000000  000a6140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00189cd6  00000000  00000000  000cd3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002570a4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000092bc  00000000  00000000  002570f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001d0 	.word	0x200001d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ef6c 	.word	0x0800ef6c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001d4 	.word	0x200001d4
 80002dc:	0800ef6c 	.word	0x0800ef6c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
 800068c:	615a      	str	r2, [r3, #20]
 800068e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000690:	4b29      	ldr	r3, [pc, #164]	; (8000738 <MX_ADC3_Init+0xc0>)
 8000692:	4a2a      	ldr	r2, [pc, #168]	; (800073c <MX_ADC3_Init+0xc4>)
 8000694:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000696:	4b28      	ldr	r3, [pc, #160]	; (8000738 <MX_ADC3_Init+0xc0>)
 8000698:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800069c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800069e:	4b26      	ldr	r3, [pc, #152]	; (8000738 <MX_ADC3_Init+0xc0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <MX_ADC3_Init+0xc0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006aa:	4b23      	ldr	r3, [pc, #140]	; (8000738 <MX_ADC3_Init+0xc0>)
 80006ac:	2204      	movs	r2, #4
 80006ae:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <MX_ADC3_Init+0xc0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <MX_ADC3_Init+0xc0>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <MX_ADC3_Init+0xc0>)
 80006be:	2201      	movs	r2, #1
 80006c0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006c2:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <MX_ADC3_Init+0xc0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <MX_ADC3_Init+0xc0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_ADC3_Init+0xc0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006d4:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_ADC3_Init+0xc0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_ADC3_Init+0xc0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_ADC3_Init+0xc0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_ADC3_Init+0xc0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006ee:	4812      	ldr	r0, [pc, #72]	; (8000738 <MX_ADC3_Init+0xc0>)
 80006f0:	f003 fdf2 	bl	80042d8 <HAL_ADC_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80006fa:	f002 fcf3 	bl	80030e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <MX_ADC3_Init+0xc8>)
 8000700:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000702:	2306      	movs	r3, #6
 8000704:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000706:	2306      	movs	r3, #6
 8000708:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800070a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800070e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000710:	2304      	movs	r3, #4
 8000712:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000718:	2300      	movs	r3, #0
 800071a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	4619      	mov	r1, r3
 8000720:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_ADC3_Init+0xc0>)
 8000722:	f004 f945 	bl	80049b0 <HAL_ADC_ConfigChannel>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 800072c:	f002 fcda 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20004bb8 	.word	0x20004bb8
 800073c:	58026000 	.word	0x58026000
 8000740:	cb840000 	.word	0xcb840000

08000744 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b0b2      	sub	sp, #200	; 0xc8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	22bc      	movs	r2, #188	; 0xbc
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f00d ffe1 	bl	800e71c <memset>
  if(adcHandle->Instance==ADC3)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <HAL_ADC_MspInit+0x88>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d12f      	bne.n	80007c4 <HAL_ADC_MspInit+0x80>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000764:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000768:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800076a:	2301      	movs	r3, #1
 800076c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 800076e:	2312      	movs	r3, #18
 8000770:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000772:	2302      	movs	r3, #2
 8000774:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000776:	2302      	movs	r3, #2
 8000778:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800077e:	23c0      	movs	r3, #192	; 0xc0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000782:	2320      	movs	r3, #32
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000786:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800078c:	2300      	movs	r3, #0
 800078e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	4618      	mov	r0, r3
 8000798:	f006 f8cc 	bl	8006934 <HAL_RCCEx_PeriphCLKConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <HAL_ADC_MspInit+0x62>
    {
      Error_Handler();
 80007a2:	f002 fc9f 	bl	80030e4 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <HAL_ADC_MspInit+0x8c>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ac:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <HAL_ADC_MspInit+0x8c>)
 80007ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_ADC_MspInit+0x8c>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80007c4:	bf00      	nop
 80007c6:	37c8      	adds	r7, #200	; 0xc8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58026000 	.word	0x58026000
 80007d0:	58024400 	.word	0x58024400

080007d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007d8:	4a14      	ldr	r2, [pc, #80]	; (800082c <MX_FREERTOS_Init+0x58>)
 80007da:	2100      	movs	r1, #0
 80007dc:	4814      	ldr	r0, [pc, #80]	; (8000830 <MX_FREERTOS_Init+0x5c>)
 80007de:	f00b fa5f 	bl	800bca0 <osThreadNew>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4a13      	ldr	r2, [pc, #76]	; (8000834 <MX_FREERTOS_Init+0x60>)
 80007e6:	6013      	str	r3, [r2, #0]

  /* creation of Stepper */
  StepperHandle = osThreadNew(Stepper_motor, NULL, &Stepper_attributes);
 80007e8:	4a13      	ldr	r2, [pc, #76]	; (8000838 <MX_FREERTOS_Init+0x64>)
 80007ea:	2100      	movs	r1, #0
 80007ec:	4813      	ldr	r0, [pc, #76]	; (800083c <MX_FREERTOS_Init+0x68>)
 80007ee:	f00b fa57 	bl	800bca0 <osThreadNew>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4a12      	ldr	r2, [pc, #72]	; (8000840 <MX_FREERTOS_Init+0x6c>)
 80007f6:	6013      	str	r3, [r2, #0]

  /* creation of Connectivity */
  ConnectivityHandle = osThreadNew(Cloud_Connectivity, NULL, &Connectivity_attributes);
 80007f8:	4a12      	ldr	r2, [pc, #72]	; (8000844 <MX_FREERTOS_Init+0x70>)
 80007fa:	2100      	movs	r1, #0
 80007fc:	4812      	ldr	r0, [pc, #72]	; (8000848 <MX_FREERTOS_Init+0x74>)
 80007fe:	f00b fa4f 	bl	800bca0 <osThreadNew>
 8000802:	4603      	mov	r3, r0
 8000804:	4a11      	ldr	r2, [pc, #68]	; (800084c <MX_FREERTOS_Init+0x78>)
 8000806:	6013      	str	r3, [r2, #0]

  /* creation of Sensors */
  SensorsHandle = osThreadNew(Sensors_measurements, NULL, &Sensors_attributes);
 8000808:	4a11      	ldr	r2, [pc, #68]	; (8000850 <MX_FREERTOS_Init+0x7c>)
 800080a:	2100      	movs	r1, #0
 800080c:	4811      	ldr	r0, [pc, #68]	; (8000854 <MX_FREERTOS_Init+0x80>)
 800080e:	f00b fa47 	bl	800bca0 <osThreadNew>
 8000812:	4603      	mov	r3, r0
 8000814:	4a10      	ldr	r2, [pc, #64]	; (8000858 <MX_FREERTOS_Init+0x84>)
 8000816:	6013      	str	r3, [r2, #0]

  /* creation of IHM */
  IHMHandle = osThreadNew(Interface, NULL, &IHM_attributes);
 8000818:	4a10      	ldr	r2, [pc, #64]	; (800085c <MX_FREERTOS_Init+0x88>)
 800081a:	2100      	movs	r1, #0
 800081c:	4810      	ldr	r0, [pc, #64]	; (8000860 <MX_FREERTOS_Init+0x8c>)
 800081e:	f00b fa3f 	bl	800bca0 <osThreadNew>
 8000822:	4603      	mov	r3, r0
 8000824:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <MX_FREERTOS_Init+0x90>)
 8000826:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	0800efdc 	.word	0x0800efdc
 8000830:	08000869 	.word	0x08000869
 8000834:	20004c24 	.word	0x20004c24
 8000838:	0800f000 	.word	0x0800f000
 800083c:	08000879 	.word	0x08000879
 8000840:	20004c20 	.word	0x20004c20
 8000844:	0800f024 	.word	0x0800f024
 8000848:	080008bf 	.word	0x080008bf
 800084c:	20004c30 	.word	0x20004c30
 8000850:	0800f048 	.word	0x0800f048
 8000854:	080008d1 	.word	0x080008d1
 8000858:	20004c28 	.word	0x20004c28
 800085c:	0800f06c 	.word	0x0800f06c
 8000860:	08000939 	.word	0x08000939
 8000864:	20004c1c 	.word	0x20004c1c

08000868 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000870:	2001      	movs	r0, #1
 8000872:	f00b faa7 	bl	800bdc4 <osDelay>
 8000876:	e7fb      	b.n	8000870 <StartDefaultTask+0x8>

08000878 <Stepper_motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Stepper_motor */
void Stepper_motor(void *argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Stepper_motor */
  /* Infinite loop */
  for(;;)
  {
	L6474_ApplySpeed(0,100);// MAX 10000 pps , Min 2 pps
 8000880:	2164      	movs	r1, #100	; 0x64
 8000882:	2000      	movs	r0, #0
 8000884:	f001 fb1c 	bl	8001ec0 <L6474_ApplySpeed>
	L6474_Move(0, BACKWARD, 16000);
 8000888:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800088c:	2100      	movs	r1, #0
 800088e:	2000      	movs	r0, #0
 8000890:	f000 ff0c 	bl	80016ac <L6474_Move>
	L6474_WaitWhileActive(0);
 8000894:	2000      	movs	r0, #0
 8000896:	f001 fb01 	bl	8001e9c <L6474_WaitWhileActive>
	osDelay(1000);
 800089a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800089e:	f00b fa91 	bl	800bdc4 <osDelay>
	L6474_Move(0, FORWARD, 16000);
 80008a2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80008a6:	2101      	movs	r1, #1
 80008a8:	2000      	movs	r0, #0
 80008aa:	f000 feff 	bl	80016ac <L6474_Move>
	L6474_WaitWhileActive(0);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f001 faf4 	bl	8001e9c <L6474_WaitWhileActive>
	osDelay(1000);
 80008b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b8:	f00b fa84 	bl	800bdc4 <osDelay>
  {
 80008bc:	e7e0      	b.n	8000880 <Stepper_motor+0x8>

080008be <Cloud_Connectivity>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Cloud_Connectivity */
void Cloud_Connectivity(void *argument)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Cloud_Connectivity */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008c6:	2001      	movs	r0, #1
 80008c8:	f00b fa7c 	bl	800bdc4 <osDelay>
 80008cc:	e7fb      	b.n	80008c6 <Cloud_Connectivity+0x8>
	...

080008d0 <Sensors_measurements>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensors_measurements */
void Sensors_measurements(void *argument)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	uint16_t readValue;

  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_PollForConversion(&hadc3, 10000);
 80008d8:	f242 7110 	movw	r1, #10000	; 0x2710
 80008dc:	4814      	ldr	r0, [pc, #80]	; (8000930 <Sensors_measurements+0x60>)
 80008de:	f003 ff65 	bl	80047ac <HAL_ADC_PollForConversion>
	  readValue = HAL_ADC_GetValue(&hadc3);
 80008e2:	4813      	ldr	r0, [pc, #76]	; (8000930 <Sensors_measurements+0x60>)
 80008e4:	f004 f856 	bl	8004994 <HAL_ADC_GetValue>
 80008e8:	4603      	mov	r3, r0
 80008ea:	81fb      	strh	r3, [r7, #14]
	  tCelsius = 357.558 - 0.187364 * readValue;
 80008ec:	89fb      	ldrh	r3, [r7, #14]
 80008ee:	ee07 3a90 	vmov	s15, r3
 80008f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008f6:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000920 <Sensors_measurements+0x50>
 80008fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008fe:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000928 <Sensors_measurements+0x58>
 8000902:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000906:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800090a:	ee17 2a90 	vmov	r2, s15
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <Sensors_measurements+0x64>)
 8000910:	601a      	str	r2, [r3, #0]
	  osDelay(1000);
 8000912:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000916:	f00b fa55 	bl	800bdc4 <osDelay>
	  HAL_ADC_PollForConversion(&hadc3, 10000);
 800091a:	e7dd      	b.n	80008d8 <Sensors_measurements+0x8>
 800091c:	f3af 8000 	nop.w
 8000920:	26394fad 	.word	0x26394fad
 8000924:	3fc7fb8b 	.word	0x3fc7fb8b
 8000928:	916872b0 	.word	0x916872b0
 800092c:	407658ed 	.word	0x407658ed
 8000930:	20004bb8 	.word	0x20004bb8
 8000934:	20004c2c 	.word	0x20004c2c

08000938 <Interface>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Interface */
void Interface(void *argument)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Interface */
  /* Infinite loop */
  for(;;)
  {
	Send("temp" , tCelsius );
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <Interface+0x20>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	b21b      	sxth	r3, r3
 8000946:	4619      	mov	r1, r3
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <Interface+0x24>)
 800094a:	f002 fb91 	bl	8003070 <Send>
    osDelay(100);
 800094e:	2064      	movs	r0, #100	; 0x64
 8000950:	f00b fa38 	bl	800bdc4 <osDelay>
	Send("temp" , tCelsius );
 8000954:	e7f4      	b.n	8000940 <Interface+0x8>
 8000956:	bf00      	nop
 8000958:	20004c2c 	.word	0x20004c2c
 800095c:	0800efb4 	.word	0x0800efb4

08000960 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PA15 (JTDI)   ------> S_TIM2_CH1
*/
void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	; 0x38
 8000964:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000976:	4b95      	ldr	r3, [pc, #596]	; (8000bcc <MX_GPIO_Init+0x26c>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	4a93      	ldr	r2, [pc, #588]	; (8000bcc <MX_GPIO_Init+0x26c>)
 800097e:	f043 0310 	orr.w	r3, r3, #16
 8000982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000986:	4b91      	ldr	r3, [pc, #580]	; (8000bcc <MX_GPIO_Init+0x26c>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	f003 0310 	and.w	r3, r3, #16
 8000990:	623b      	str	r3, [r7, #32]
 8000992:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000994:	4b8d      	ldr	r3, [pc, #564]	; (8000bcc <MX_GPIO_Init+0x26c>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099a:	4a8c      	ldr	r2, [pc, #560]	; (8000bcc <MX_GPIO_Init+0x26c>)
 800099c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a4:	4b89      	ldr	r3, [pc, #548]	; (8000bcc <MX_GPIO_Init+0x26c>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ae:	61fb      	str	r3, [r7, #28]
 80009b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009b2:	4b86      	ldr	r3, [pc, #536]	; (8000bcc <MX_GPIO_Init+0x26c>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b8:	4a84      	ldr	r2, [pc, #528]	; (8000bcc <MX_GPIO_Init+0x26c>)
 80009ba:	f043 0320 	orr.w	r3, r3, #32
 80009be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c2:	4b82      	ldr	r3, [pc, #520]	; (8000bcc <MX_GPIO_Init+0x26c>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	f003 0320 	and.w	r3, r3, #32
 80009cc:	61bb      	str	r3, [r7, #24]
 80009ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d0:	4b7e      	ldr	r3, [pc, #504]	; (8000bcc <MX_GPIO_Init+0x26c>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d6:	4a7d      	ldr	r2, [pc, #500]	; (8000bcc <MX_GPIO_Init+0x26c>)
 80009d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e0:	4b7a      	ldr	r3, [pc, #488]	; (8000bcc <MX_GPIO_Init+0x26c>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	4b77      	ldr	r3, [pc, #476]	; (8000bcc <MX_GPIO_Init+0x26c>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	4a75      	ldr	r2, [pc, #468]	; (8000bcc <MX_GPIO_Init+0x26c>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fe:	4b73      	ldr	r3, [pc, #460]	; (8000bcc <MX_GPIO_Init+0x26c>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0c:	4b6f      	ldr	r3, [pc, #444]	; (8000bcc <MX_GPIO_Init+0x26c>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a12:	4a6e      	ldr	r2, [pc, #440]	; (8000bcc <MX_GPIO_Init+0x26c>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1c:	4b6b      	ldr	r3, [pc, #428]	; (8000bcc <MX_GPIO_Init+0x26c>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b68      	ldr	r3, [pc, #416]	; (8000bcc <MX_GPIO_Init+0x26c>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a30:	4a66      	ldr	r2, [pc, #408]	; (8000bcc <MX_GPIO_Init+0x26c>)
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3a:	4b64      	ldr	r3, [pc, #400]	; (8000bcc <MX_GPIO_Init+0x26c>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a48:	4b60      	ldr	r3, [pc, #384]	; (8000bcc <MX_GPIO_Init+0x26c>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4e:	4a5f      	ldr	r2, [pc, #380]	; (8000bcc <MX_GPIO_Init+0x26c>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a58:	4b5c      	ldr	r3, [pc, #368]	; (8000bcc <MX_GPIO_Init+0x26c>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a6c:	4858      	ldr	r0, [pc, #352]	; (8000bd0 <MX_GPIO_Init+0x270>)
 8000a6e:	f004 ff13 	bl	8005898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2110      	movs	r1, #16
 8000a76:	4857      	ldr	r0, [pc, #348]	; (8000bd4 <MX_GPIO_Init+0x274>)
 8000a78:	f004 ff0e 	bl	8005898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	21c0      	movs	r1, #192	; 0xc0
 8000a80:	4855      	ldr	r0, [pc, #340]	; (8000bd8 <MX_GPIO_Init+0x278>)
 8000a82:	f004 ff09 	bl	8005898 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000a86:	2370      	movs	r3, #112	; 0x70
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a96:	230e      	movs	r3, #14
 8000a98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	484e      	ldr	r0, [pc, #312]	; (8000bdc <MX_GPIO_Init+0x27c>)
 8000aa2:	f004 fd49 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abc:	4619      	mov	r1, r3
 8000abe:	4844      	ldr	r0, [pc, #272]	; (8000bd0 <MX_GPIO_Init+0x270>)
 8000ac0:	f004 fd3a 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI9 PI10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ac4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ad6:	230e      	movs	r3, #14
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	483b      	ldr	r0, [pc, #236]	; (8000bd0 <MX_GPIO_Init+0x270>)
 8000ae2:	f004 fd29 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ae6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000af8:	2309      	movs	r3, #9
 8000afa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	4833      	ldr	r0, [pc, #204]	; (8000bd0 <MX_GPIO_Init+0x270>)
 8000b04:	f004 fd18 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b1a:	230e      	movs	r3, #14
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	482e      	ldr	r0, [pc, #184]	; (8000be0 <MX_GPIO_Init+0x280>)
 8000b26:	f004 fd07 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000b2a:	2306      	movs	r3, #6
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b3a:	230e      	movs	r3, #14
 8000b3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b42:	4619      	mov	r1, r3
 8000b44:	4827      	ldr	r0, [pc, #156]	; (8000be4 <MX_GPIO_Init+0x284>)
 8000b46:	f004 fcf7 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b5a:	230e      	movs	r3, #14
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	4619      	mov	r1, r3
 8000b64:	481b      	ldr	r0, [pc, #108]	; (8000bd4 <MX_GPIO_Init+0x274>)
 8000b66:	f004 fce7 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000b6a:	2310      	movs	r3, #16
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4814      	ldr	r0, [pc, #80]	; (8000bd4 <MX_GPIO_Init+0x274>)
 8000b82:	f004 fcd9 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4810      	ldr	r0, [pc, #64]	; (8000be4 <MX_GPIO_Init+0x284>)
 8000ba4:	f004 fcc8 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000ba8:	23c0      	movs	r3, #192	; 0xc0
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <MX_GPIO_Init+0x278>)
 8000bc0:	f004 fcba 	bl	8005538 <HAL_GPIO_Init>

}
 8000bc4:	bf00      	nop
 8000bc6:	3738      	adds	r7, #56	; 0x38
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	58024400 	.word	0x58024400
 8000bd0:	58022000 	.word	0x58022000
 8000bd4:	58021c00 	.word	0x58021c00
 8000bd8:	58020400 	.word	0x58020400
 8000bdc:	58021000 	.word	0x58021000
 8000be0:	58021400 	.word	0x58021400
 8000be4:	58020000 	.word	0x58020000

08000be8 <L6474_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void L6474_AttachErrorHandler(void (*callback)(uint16_t))
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <L6474_AttachErrorHandler+0x1c>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20004cac 	.word	0x20004cac

08000c08 <L6474_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void L6474_AttachFlagInterrupt(void (*callback)(void))
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <L6474_AttachFlagInterrupt+0x1c>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6013      	str	r3, [r2, #0]
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20004cb0 	.word	0x20004cb0

08000c28 <L6474_CmdDisable>:
 * @brief  Issue the Disable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdDisable(uint8_t deviceId)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_DISABLE);
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	21a8      	movs	r1, #168	; 0xa8
 8000c36:	4618      	mov	r0, r3
 8000c38:	f001 fa8c 	bl	8002154 <L6474_SendCommand>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <L6474_CmdEnable>:
 * @brief  Issues the Enable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdEnable(uint8_t deviceId)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_ENABLE);
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	21b8      	movs	r1, #184	; 0xb8
 8000c52:	4618      	mov	r0, r3
 8000c54:	f001 fa7e 	bl	8002154 <L6474_SendCommand>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <L6474_CmdGetParam>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Register adress (L6474_ABS_POS, L6474_MARK,...)
 * @retval Register value
 **********************************************************/
uint32_t L6474_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint32_t spiRxData;
  uint8_t maxArgumentNbBytes = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8000c70:	4b70      	ldr	r3, [pc, #448]	; (8000e34 <L6474_CmdGetParam+0x1d4>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 8000c80:	2300      	movs	r3, #0
 8000c82:	74bb      	strb	r3, [r7, #18]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8000c84:	4b6c      	ldr	r3, [pc, #432]	; (8000e38 <L6474_CmdGetParam+0x1d8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8000c8a:	7cbb      	ldrb	r3, [r7, #18]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <L6474_CmdGetParam+0x34>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      //L6474_Board_EnableIrq();
      //__enable_irq();
      itDisable = FALSE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	74bb      	strb	r3, [r7, #18]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	e02b      	b.n	8000cf2 <L6474_CmdGetParam+0x92>
    {
      spiTxBursts[0][i] = L6474_NOP;
 8000c9a:	4a68      	ldr	r2, [pc, #416]	; (8000e3c <L6474_CmdGetParam+0x1dc>)
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 8000ca4:	4a65      	ldr	r2, [pc, #404]	; (8000e3c <L6474_CmdGetParam+0x1dc>)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	4413      	add	r3, r2
 8000caa:	3303      	adds	r3, #3
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 8000cb0:	4a62      	ldr	r2, [pc, #392]	; (8000e3c <L6474_CmdGetParam+0x1dc>)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	3306      	adds	r3, #6
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 8000cbc:	4a5f      	ldr	r2, [pc, #380]	; (8000e3c <L6474_CmdGetParam+0x1dc>)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	3309      	adds	r3, #9
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
      spiRxBursts[1][i] = 0;
 8000cc8:	4a5d      	ldr	r2, [pc, #372]	; (8000e40 <L6474_CmdGetParam+0x1e0>)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	4413      	add	r3, r2
 8000cce:	3303      	adds	r3, #3
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
      spiRxBursts[2][i] = 0;
 8000cd4:	4a5a      	ldr	r2, [pc, #360]	; (8000e40 <L6474_CmdGetParam+0x1e0>)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	4413      	add	r3, r2
 8000cda:	3306      	adds	r3, #6
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
      spiRxBursts[3][i] = 0;    
 8000ce0:	4a57      	ldr	r2, [pc, #348]	; (8000e40 <L6474_CmdGetParam+0x1e0>)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	3309      	adds	r3, #9
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	4b50      	ldr	r3, [pc, #320]	; (8000e34 <L6474_CmdGetParam+0x1d4>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d3cc      	bcc.n	8000c9a <L6474_CmdGetParam+0x3a>
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	2b18      	cmp	r3, #24
 8000d06:	d84d      	bhi.n	8000da4 <L6474_CmdGetParam+0x144>
 8000d08:	a201      	add	r2, pc, #4	; (adr r2, 8000d10 <L6474_CmdGetParam+0xb0>)
 8000d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0e:	bf00      	nop
 8000d10:	08000d75 	.word	0x08000d75
 8000d14:	08000d8b 	.word	0x08000d8b
 8000d18:	08000d75 	.word	0x08000d75
 8000d1c:	08000da5 	.word	0x08000da5
 8000d20:	08000da5 	.word	0x08000da5
 8000d24:	08000da5 	.word	0x08000da5
 8000d28:	08000da5 	.word	0x08000da5
 8000d2c:	08000da5 	.word	0x08000da5
 8000d30:	08000da5 	.word	0x08000da5
 8000d34:	08000da5 	.word	0x08000da5
 8000d38:	08000da5 	.word	0x08000da5
 8000d3c:	08000da5 	.word	0x08000da5
 8000d40:	08000da5 	.word	0x08000da5
 8000d44:	08000da5 	.word	0x08000da5
 8000d48:	08000da5 	.word	0x08000da5
 8000d4c:	08000da5 	.word	0x08000da5
 8000d50:	08000da5 	.word	0x08000da5
 8000d54:	08000da5 	.word	0x08000da5
 8000d58:	08000da5 	.word	0x08000da5
 8000d5c:	08000da5 	.word	0x08000da5
 8000d60:	08000da5 	.word	0x08000da5
 8000d64:	08000da5 	.word	0x08000da5
 8000d68:	08000da5 	.word	0x08000da5
 8000d6c:	08000d8b 	.word	0x08000d8b
 8000d70:	08000d8b 	.word	0x08000d8b
    }
    switch (param)
    {
      case L6474_ABS_POS: ;
      case L6474_MARK:
        spiTxBursts[0][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	7c7b      	ldrb	r3, [r7, #17]
 8000d7a:	f042 0220 	orr.w	r2, r2, #32
 8000d7e:	b2d1      	uxtb	r1, r2
 8000d80:	4a2e      	ldr	r2, [pc, #184]	; (8000e3c <L6474_CmdGetParam+0x1dc>)
 8000d82:	54d1      	strb	r1, [r2, r3]
        maxArgumentNbBytes = 3;
 8000d84:	2303      	movs	r3, #3
 8000d86:	74fb      	strb	r3, [r7, #19]
        break;
 8000d88:	e018      	b.n	8000dbc <L6474_CmdGetParam+0x15c>
      case L6474_EL_POS: ;
      case L6474_CONFIG: ;
      case L6474_STATUS:
        spiTxBursts[1][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	7c7b      	ldrb	r3, [r7, #17]
 8000d90:	f042 0220 	orr.w	r2, r2, #32
 8000d94:	b2d1      	uxtb	r1, r2
 8000d96:	4a29      	ldr	r2, [pc, #164]	; (8000e3c <L6474_CmdGetParam+0x1dc>)
 8000d98:	4413      	add	r3, r2
 8000d9a:	460a      	mov	r2, r1
 8000d9c:	70da      	strb	r2, [r3, #3]
        maxArgumentNbBytes = 2;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	74fb      	strb	r3, [r7, #19]
        break;
 8000da2:	e00b      	b.n	8000dbc <L6474_CmdGetParam+0x15c>
      default:
        spiTxBursts[2][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	7c7b      	ldrb	r3, [r7, #17]
 8000daa:	f042 0220 	orr.w	r2, r2, #32
 8000dae:	b2d1      	uxtb	r1, r2
 8000db0:	4a22      	ldr	r2, [pc, #136]	; (8000e3c <L6474_CmdGetParam+0x1dc>)
 8000db2:	4413      	add	r3, r2
 8000db4:	460a      	mov	r2, r1
 8000db6:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	74fb      	strb	r3, [r7, #19]
    }
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8000dbc:	f002 fd6d 	bl	800389a <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8000dc4:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <L6474_CmdGetParam+0x1d8>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f47f af5a 	bne.w	8000c84 <L6474_CmdGetParam+0x24>
    
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8000dd0:	7cfb      	ldrb	r3, [r7, #19]
 8000dd2:	f1c3 0303 	rsb	r3, r3, #3
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	e011      	b.n	8000dfe <L6474_CmdGetParam+0x19e>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4413      	add	r3, r2
 8000de2:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <L6474_CmdGetParam+0x1dc>)
 8000de4:	1898      	adds	r0, r3, r2
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	4613      	mov	r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	4413      	add	r3, r2
 8000dee:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <L6474_CmdGetParam+0x1e0>)
 8000df0:	4413      	add	r3, r2
 8000df2:	4619      	mov	r1, r3
 8000df4:	f002 f850 	bl	8002e98 <L6474_WriteBytes>
       i++)
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	2b03      	cmp	r3, #3
 8000e02:	d9ea      	bls.n	8000dda <L6474_CmdGetParam+0x17a>
                          &spiRxBursts[i][0]);
  }
  
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8000e04:	7c7b      	ldrb	r3, [r7, #17]
 8000e06:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <L6474_CmdGetParam+0x1e0>)
 8000e08:	4413      	add	r3, r2
 8000e0a:	78db      	ldrb	r3, [r3, #3]
 8000e0c:	041b      	lsls	r3, r3, #16
              (spiRxBursts[2][spiIndex] << 8) |
 8000e0e:	7c7a      	ldrb	r2, [r7, #17]
 8000e10:	490b      	ldr	r1, [pc, #44]	; (8000e40 <L6474_CmdGetParam+0x1e0>)
 8000e12:	440a      	add	r2, r1
 8000e14:	7992      	ldrb	r2, [r2, #6]
 8000e16:	0212      	lsls	r2, r2, #8
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8000e18:	4313      	orrs	r3, r2
              (spiRxBursts[3][spiIndex]);
 8000e1a:	7c7a      	ldrb	r2, [r7, #17]
 8000e1c:	4908      	ldr	r1, [pc, #32]	; (8000e40 <L6474_CmdGetParam+0x1e0>)
 8000e1e:	440a      	add	r2, r1
 8000e20:	7a52      	ldrb	r2, [r2, #9]
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8000e22:	4313      	orrs	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8000e26:	f002 fd41 	bl	80038ac <L6474_Board_EnableIrq>
    
  return (spiRxData);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200001ec 	.word	0x200001ec
 8000e38:	20000208 	.word	0x20000208
 8000e3c:	200001f0 	.word	0x200001f0
 8000e40:	200001fc 	.word	0x200001fc

08000e44 <L6474_CmdGetStatus>:
 * @note Once the GetStatus command is performed, the flags of the status register
 * are reset. This is not the case when the status register is read with the
 * GetParam command (via the functions L6474ReadStatusRegister or L6474CmdGetParam).
 **********************************************************/
uint16_t L6474_CmdGetStatus(uint8_t deviceId)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint16_t status;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8000e4e:	4b3c      	ldr	r3, [pc, #240]	; (8000f40 <L6474_CmdGetStatus+0xfc>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 8000e5e:	2300      	movs	r3, #0
 8000e60:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8000e62:	4b38      	ldr	r3, [pc, #224]	; (8000f44 <L6474_CmdGetStatus+0x100>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8000e68:	7afb      	ldrb	r3, [r7, #11]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <L6474_CmdGetStatus+0x32>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8000e6e:	f002 fd1d 	bl	80038ac <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	72fb      	strb	r3, [r7, #11]
    }

    for (i = 0; i < numberOfDevices; i++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	e01f      	b.n	8000ebc <L6474_CmdGetStatus+0x78>
    {
       spiTxBursts[0][i] = L6474_NOP;
 8000e7c:	4a32      	ldr	r2, [pc, #200]	; (8000f48 <L6474_CmdGetStatus+0x104>)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	4413      	add	r3, r2
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
       spiTxBursts[1][i] = L6474_NOP;
 8000e86:	4a30      	ldr	r2, [pc, #192]	; (8000f48 <L6474_CmdGetStatus+0x104>)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	3303      	adds	r3, #3
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
       spiTxBursts[2][i] = L6474_NOP;
 8000e92:	4a2d      	ldr	r2, [pc, #180]	; (8000f48 <L6474_CmdGetStatus+0x104>)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	3306      	adds	r3, #6
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
       spiRxBursts[1][i] = 0;
 8000e9e:	4a2b      	ldr	r2, [pc, #172]	; (8000f4c <L6474_CmdGetStatus+0x108>)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	3303      	adds	r3, #3
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
       spiRxBursts[2][i] = 0;
 8000eaa:	4a28      	ldr	r2, [pc, #160]	; (8000f4c <L6474_CmdGetStatus+0x108>)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4413      	add	r3, r2
 8000eb0:	3306      	adds	r3, #6
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <L6474_CmdGetStatus+0xfc>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d3d8      	bcc.n	8000e7c <L6474_CmdGetStatus+0x38>
    }
    spiTxBursts[0][spiIndex] = L6474_GET_STATUS;
 8000eca:	7abb      	ldrb	r3, [r7, #10]
 8000ecc:	4a1e      	ldr	r2, [pc, #120]	; (8000f48 <L6474_CmdGetStatus+0x104>)
 8000ece:	21d0      	movs	r1, #208	; 0xd0
 8000ed0:	54d1      	strb	r1, [r2, r3]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8000ed2:	f002 fce2 	bl	800389a <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <L6474_CmdGetStatus+0x100>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1be      	bne.n	8000e62 <L6474_CmdGetStatus+0x1e>

  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	e011      	b.n	8000f0e <L6474_CmdGetStatus+0xca>
  {
     L6474_WriteBytes(&spiTxBursts[i][0], &spiRxBursts[i][0]);
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	4613      	mov	r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a15      	ldr	r2, [pc, #84]	; (8000f48 <L6474_CmdGetStatus+0x104>)
 8000ef4:	1898      	adds	r0, r3, r2
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	4a13      	ldr	r2, [pc, #76]	; (8000f4c <L6474_CmdGetStatus+0x108>)
 8000f00:	4413      	add	r3, r2
 8000f02:	4619      	mov	r1, r3
 8000f04:	f001 ffc8 	bl	8002e98 <L6474_WriteBytes>
  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d9ea      	bls.n	8000eea <L6474_CmdGetStatus+0xa6>
  }
  status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8000f14:	7abb      	ldrb	r3, [r7, #10]
 8000f16:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <L6474_CmdGetStatus+0x108>)
 8000f18:	4413      	add	r3, r2
 8000f1a:	78db      	ldrb	r3, [r3, #3]
 8000f1c:	021b      	lsls	r3, r3, #8
 8000f1e:	b21a      	sxth	r2, r3
 8000f20:	7abb      	ldrb	r3, [r7, #10]
 8000f22:	490a      	ldr	r1, [pc, #40]	; (8000f4c <L6474_CmdGetStatus+0x108>)
 8000f24:	440b      	add	r3, r1
 8000f26:	799b      	ldrb	r3, [r3, #6]
 8000f28:	b21b      	sxth	r3, r3
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	813b      	strh	r3, [r7, #8]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8000f30:	f002 fcbc 	bl	80038ac <L6474_Board_EnableIrq>
  
  return (status);
 8000f34:	893b      	ldrh	r3, [r7, #8]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200001ec 	.word	0x200001ec
 8000f44:	20000208 	.word	0x20000208
 8000f48:	200001f0 	.word	0x200001f0
 8000f4c:	200001fc 	.word	0x200001fc

08000f50 <L6474_CmdNop>:
 * @brief  Issues the Nop command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdNop(uint8_t deviceId)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_NOP);
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 f8f8 	bl	8002154 <L6474_SendCommand>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <L6474_CmdSetParam>:
 * @retval None
 **********************************************************/
void L6474_CmdSetParam(uint8_t deviceId,
                       uint32_t param,
                       uint32_t value)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	73fb      	strb	r3, [r7, #15]
  uint32_t i;
  uint8_t maxArgumentNbBytes = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8000f7e:	4b69      	ldr	r3, [pc, #420]	; (8001124 <L6474_CmdSetParam+0x1b8>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 8000f8e:	2300      	movs	r3, #0
 8000f90:	74bb      	strb	r3, [r7, #18]
  do
  {
    spiPreemtionByIsr = FALSE;
 8000f92:	4b65      	ldr	r3, [pc, #404]	; (8001128 <L6474_CmdSetParam+0x1bc>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8000f98:	7cbb      	ldrb	r3, [r7, #18]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <L6474_CmdSetParam+0x3a>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8000f9e:	f002 fc85 	bl	80038ac <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	74bb      	strb	r3, [r7, #18]
    }
    for (i = 0; i < numberOfDevices; i++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	e019      	b.n	8000fe0 <L6474_CmdSetParam+0x74>
    {
      spiTxBursts[0][i] = L6474_NOP;
 8000fac:	4a5f      	ldr	r2, [pc, #380]	; (800112c <L6474_CmdSetParam+0x1c0>)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 8000fb6:	4a5d      	ldr	r2, [pc, #372]	; (800112c <L6474_CmdSetParam+0x1c0>)
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	4413      	add	r3, r2
 8000fbc:	3303      	adds	r3, #3
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 8000fc2:	4a5a      	ldr	r2, [pc, #360]	; (800112c <L6474_CmdSetParam+0x1c0>)
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	3306      	adds	r3, #6
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 8000fce:	4a57      	ldr	r2, [pc, #348]	; (800112c <L6474_CmdSetParam+0x1c0>)
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	3309      	adds	r3, #9
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	4b50      	ldr	r3, [pc, #320]	; (8001124 <L6474_CmdSetParam+0x1b8>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d3de      	bcc.n	8000fac <L6474_CmdSetParam+0x40>
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	2b17      	cmp	r3, #23
 8000ff4:	d85c      	bhi.n	80010b0 <L6474_CmdSetParam+0x144>
 8000ff6:	a201      	add	r2, pc, #4	; (adr r2, 8000ffc <L6474_CmdSetParam+0x90>)
 8000ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffc:	0800105d 	.word	0x0800105d
 8001000:	0800108d 	.word	0x0800108d
 8001004:	0800105d 	.word	0x0800105d
 8001008:	080010b1 	.word	0x080010b1
 800100c:	080010b1 	.word	0x080010b1
 8001010:	080010b1 	.word	0x080010b1
 8001014:	080010b1 	.word	0x080010b1
 8001018:	080010b1 	.word	0x080010b1
 800101c:	080010b1 	.word	0x080010b1
 8001020:	080010b1 	.word	0x080010b1
 8001024:	080010b1 	.word	0x080010b1
 8001028:	080010b1 	.word	0x080010b1
 800102c:	080010b1 	.word	0x080010b1
 8001030:	080010b1 	.word	0x080010b1
 8001034:	080010b1 	.word	0x080010b1
 8001038:	080010b1 	.word	0x080010b1
 800103c:	080010b1 	.word	0x080010b1
 8001040:	080010b1 	.word	0x080010b1
 8001044:	080010b1 	.word	0x080010b1
 8001048:	080010b1 	.word	0x080010b1
 800104c:	080010b1 	.word	0x080010b1
 8001050:	080010b1 	.word	0x080010b1
 8001054:	080010b1 	.word	0x080010b1
 8001058:	0800108d 	.word	0x0800108d
    }
    switch (param)
  {
    case L6474_ABS_POS: ;
    case L6474_MARK:
        spiTxBursts[0][spiIndex] = param;
 800105c:	7c7b      	ldrb	r3, [r7, #17]
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	b2d1      	uxtb	r1, r2
 8001062:	4a32      	ldr	r2, [pc, #200]	; (800112c <L6474_CmdSetParam+0x1c0>)
 8001064:	54d1      	strb	r1, [r2, r3]
        spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	0c1a      	lsrs	r2, r3, #16
 800106a:	7c7b      	ldrb	r3, [r7, #17]
 800106c:	b2d1      	uxtb	r1, r2
 800106e:	4a2f      	ldr	r2, [pc, #188]	; (800112c <L6474_CmdSetParam+0x1c0>)
 8001070:	4413      	add	r3, r2
 8001072:	460a      	mov	r2, r1
 8001074:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	0a1a      	lsrs	r2, r3, #8
 800107a:	7c7b      	ldrb	r3, [r7, #17]
 800107c:	b2d1      	uxtb	r1, r2
 800107e:	4a2b      	ldr	r2, [pc, #172]	; (800112c <L6474_CmdSetParam+0x1c0>)
 8001080:	4413      	add	r3, r2
 8001082:	460a      	mov	r2, r1
 8001084:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 3;
 8001086:	2303      	movs	r3, #3
 8001088:	74fb      	strb	r3, [r7, #19]
        break;
 800108a:	e01a      	b.n	80010c2 <L6474_CmdSetParam+0x156>
    case L6474_EL_POS: ;
    case L6474_CONFIG:
        spiTxBursts[1][spiIndex] = param;
 800108c:	7c7b      	ldrb	r3, [r7, #17]
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	b2d1      	uxtb	r1, r2
 8001092:	4a26      	ldr	r2, [pc, #152]	; (800112c <L6474_CmdSetParam+0x1c0>)
 8001094:	4413      	add	r3, r2
 8001096:	460a      	mov	r2, r1
 8001098:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	0a1a      	lsrs	r2, r3, #8
 800109e:	7c7b      	ldrb	r3, [r7, #17]
 80010a0:	b2d1      	uxtb	r1, r2
 80010a2:	4a22      	ldr	r2, [pc, #136]	; (800112c <L6474_CmdSetParam+0x1c0>)
 80010a4:	4413      	add	r3, r2
 80010a6:	460a      	mov	r2, r1
 80010a8:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 2;
 80010aa:	2302      	movs	r3, #2
 80010ac:	74fb      	strb	r3, [r7, #19]
        break;
 80010ae:	e008      	b.n	80010c2 <L6474_CmdSetParam+0x156>
    default:
        spiTxBursts[2][spiIndex] = param;
 80010b0:	7c7b      	ldrb	r3, [r7, #17]
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	b2d1      	uxtb	r1, r2
 80010b6:	4a1d      	ldr	r2, [pc, #116]	; (800112c <L6474_CmdSetParam+0x1c0>)
 80010b8:	4413      	add	r3, r2
 80010ba:	460a      	mov	r2, r1
 80010bc:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 80010be:	2301      	movs	r3, #1
 80010c0:	74fb      	strb	r3, [r7, #19]
    }
    spiTxBursts[3][spiIndex] = (uint8_t)(value);
 80010c2:	7c7b      	ldrb	r3, [r7, #17]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	b2d1      	uxtb	r1, r2
 80010c8:	4a18      	ldr	r2, [pc, #96]	; (800112c <L6474_CmdSetParam+0x1c0>)
 80010ca:	4413      	add	r3, r2
 80010cc:	460a      	mov	r2, r1
 80010ce:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80010d0:	f002 fbe3 	bl	800389a <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80010d4:	2301      	movs	r3, #1
 80010d6:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <L6474_CmdSetParam+0x1bc>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f47f af57 	bne.w	8000f92 <L6474_CmdSetParam+0x26>
 
  /* SPI transfer */
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80010e4:	7cfb      	ldrb	r3, [r7, #19]
 80010e6:	f1c3 0303 	rsb	r3, r3, #3
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	e011      	b.n	8001112 <L6474_CmdSetParam+0x1a6>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],&spiRxBursts[i][0]);
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4613      	mov	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	4a0d      	ldr	r2, [pc, #52]	; (800112c <L6474_CmdSetParam+0x1c0>)
 80010f8:	1898      	adds	r0, r3, r2
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4613      	mov	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <L6474_CmdSetParam+0x1c4>)
 8001104:	4413      	add	r3, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f001 fec6 	bl	8002e98 <L6474_WriteBytes>
       i++)
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3301      	adds	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2b03      	cmp	r3, #3
 8001116:	d9ea      	bls.n	80010ee <L6474_CmdSetParam+0x182>
  }
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001118:	f002 fbc8 	bl	80038ac <L6474_Board_EnableIrq>
}
 800111c:	bf00      	nop
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200001ec 	.word	0x200001ec
 8001128:	20000208 	.word	0x20000208
 800112c:	200001f0 	.word	0x200001f0
 8001130:	200001fc 	.word	0x200001fc

08001134 <L6474_Init>:
 * @brief Starts a new L6474 instance 
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void L6474_Init(void* pInit)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs */
  L6474_Board_GpioInit(l6474DriverInstance);
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <L6474_Init+0x94>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f002 fbbc 	bl	80038c0 <L6474_Board_GpioInit>
  
  if(L6474_Board_SpiInit() != 0)
 8001148:	f002 fdb8 	bl	8003cbc <L6474_Board_SpiInit>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <L6474_Init+0x26>
  {
    /* Initialization Error */
    L6474_ErrorHandler(L6474_ERROR_0);
 8001152:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001156:	f000 ffd1 	bl	80020fc <L6474_ErrorHandler>
  } 

  /* Initialise the PWMs used for the Step clocks ----------------------------*/
  L6474_Board_PwmInit(l6474DriverInstance);
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <L6474_Init+0x94>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	4618      	mov	r0, r3
 8001162:	f002 fcd7 	bl	8003b14 <L6474_Board_PwmInit>
 
  /* Standby-reset deactivation */
  L6474_Board_ReleaseReset(l6474DriverInstance);
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <L6474_Init+0x94>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f002 fd51 	bl	8003c14 <L6474_Board_ReleaseReset>
  
  /* Let a delay after reset */
  L6474_Board_Delay(1); 
 8001172:	2001      	movs	r0, #1
 8001174:	f002 fb86 	bl	8003884 <L6474_Board_Delay>
  
  /* Set all registers and context variables to the predefined values from l6474_target_config.h */
  if (pInit == 0)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d106      	bne.n	800118c <L6474_Init+0x58>
  {
    L6474_SetDeviceParamsToPredefinedValues(l6474DriverInstance);
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <L6474_Init+0x94>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	4618      	mov	r0, r3
 8001186:	f001 f8db 	bl	8002340 <L6474_SetDeviceParamsToPredefinedValues>
 800118a:	e006      	b.n	800119a <L6474_Init+0x66>
  }
  else
  {
    L6474_SetDeviceParamsToGivenValues(l6474DriverInstance, pInit);
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <L6474_Init+0x94>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	4618      	mov	r0, r3
 8001196:	f001 f82f 	bl	80021f8 <L6474_SetDeviceParamsToGivenValues>
  }
  /* Disable L6474 powerstage */
  L6474_CmdDisable(l6474DriverInstance);
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <L6474_Init+0x94>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fd41 	bl	8000c28 <L6474_CmdDisable>

  /* Get Status to clear flags after start up */
  L6474_CmdGetStatus(l6474DriverInstance);
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <L6474_Init+0x94>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fe49 	bl	8000e44 <L6474_CmdGetStatus>

  l6474DriverInstance++;
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <L6474_Init+0x94>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	3301      	adds	r3, #1
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <L6474_Init+0x94>)
 80011bc:	801a      	strh	r2, [r3, #0]
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000020a 	.word	0x2000020a

080011cc <L6474_GetAcceleration>:
 * @brief Returns the acceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Acceleration in pps^2
 **********************************************************/
uint16_t L6474_GetAcceleration(uint8_t deviceId)
{                                                  
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].acceleration);
 80011d6:	79fa      	ldrb	r2, [r7, #7]
 80011d8:	4907      	ldr	r1, [pc, #28]	; (80011f8 <L6474_GetAcceleration+0x2c>)
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	440b      	add	r3, r1
 80011e4:	3318      	adds	r3, #24
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	b29b      	uxth	r3, r3
}            
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20004c34 	.word	0x20004c34

080011fc <L6474_GetCurrentSpeed>:
 * @brief Returns the current speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Speed in pps
 **********************************************************/
uint16_t L6474_GetCurrentSpeed(uint8_t deviceId)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].speed;
 8001206:	79fa      	ldrb	r2, [r7, #7]
 8001208:	4907      	ldr	r1, [pc, #28]	; (8001228 <L6474_GetCurrentSpeed+0x2c>)
 800120a:	4613      	mov	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	440b      	add	r3, r1
 8001214:	3320      	adds	r3, #32
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	b29b      	uxth	r3, r3
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20004c34 	.word	0x20004c34

0800122c <L6474_GetDeceleration>:
 * @brief Returns the deceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Deceleration in pps^2
 **********************************************************/
uint16_t L6474_GetDeceleration(uint8_t deviceId)
{                                                  
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].deceleration);
 8001236:	79fa      	ldrb	r2, [r7, #7]
 8001238:	4907      	ldr	r1, [pc, #28]	; (8001258 <L6474_GetDeceleration+0x2c>)
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	440b      	add	r3, r1
 8001244:	331a      	adds	r3, #26
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	b29b      	uxth	r3, r3
}          
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20004c34 	.word	0x20004c34

0800125c <L6474_GetDeviceState>:
 * @brief Returns the device state
 * @param[in] deviceId (from 0 to 2)
 * @retval State (ACCELERATING, DECELERATING, STEADY or INACTIVE)
 **********************************************************/
motorState_t L6474_GetDeviceState(uint8_t deviceId)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].motionState;
 8001266:	79fa      	ldrb	r2, [r7, #7]
 8001268:	4907      	ldr	r1, [pc, #28]	; (8001288 <L6474_GetDeviceState+0x2c>)
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	440b      	add	r3, r1
 8001274:	3324      	adds	r3, #36	; 0x24
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b2db      	uxtb	r3, r3
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20004c34 	.word	0x20004c34

0800128c <L6474_GetDirection>:
 * @brief Get the motor current direction
 * @param[in] deviceId Unused parameter
 * @retval direction
 **********************************************************/
motorDir_t L6474_GetDirection(uint8_t deviceId)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].direction;
 8001296:	79fa      	ldrb	r2, [r7, #7]
 8001298:	4907      	ldr	r1, [pc, #28]	; (80012b8 <L6474_GetDirection+0x2c>)
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	440b      	add	r3, r1
 80012a4:	3323      	adds	r3, #35	; 0x23
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b2db      	uxtb	r3, r3
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20004c34 	.word	0x20004c34

080012bc <L6474_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval L6474_FW_VERSION
 **********************************************************/
uint32_t L6474_GetFwVersion(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return (L6474_FW_VERSION);
 80012c0:	f44f 3385 	mov.w	r3, #68096	; 0x10a00
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <L6474_GetMotorHandle>:
/******************************************************//**
 * @brief  Return motor handle (pointer to the L6474 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* L6474_GetMotorHandle(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return (&l6474Drv);
 80012d4:	4b02      	ldr	r3, [pc, #8]	; (80012e0 <L6474_GetMotorHandle+0x10>)
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	20000000 	.word	0x20000000

080012e4 <L6474_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t L6474_GetMark(uint8_t deviceId)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2103      	movs	r1, #3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fcb4 	bl	8000c60 <L6474_CmdGetParam>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 fede 	bl	80020bc <L6474_ConvertPosition>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <L6474_GetMaxSpeed>:
 * @brief  Returns the max speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval maxSpeed in pps
 **********************************************************/
uint16_t L6474_GetMaxSpeed(uint8_t deviceId)
{                                                  
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].maxSpeed);
 8001316:	79fa      	ldrb	r2, [r7, #7]
 8001318:	4907      	ldr	r1, [pc, #28]	; (8001338 <L6474_GetMaxSpeed+0x2c>)
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	440b      	add	r3, r1
 8001324:	331c      	adds	r3, #28
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	b29b      	uxth	r3, r3
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20004c34 	.word	0x20004c34

0800133c <L6474_GetMinSpeed>:
 * @brief  Returns the min speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval minSpeed in pps
 **********************************************************/
uint16_t L6474_GetMinSpeed(uint8_t deviceId)
{                                                  
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].minSpeed);
 8001346:	79fa      	ldrb	r2, [r7, #7]
 8001348:	4907      	ldr	r1, [pc, #28]	; (8001368 <L6474_GetMinSpeed+0x2c>)
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	440b      	add	r3, r1
 8001354:	331e      	adds	r3, #30
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	b29b      	uxth	r3, r3
}                                                     
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20004c34 	.word	0x20004c34

0800136c <L6474_GetNbDevices>:
/******************************************************//**
 * @brief  Returns the number of devices
 * @retval number of devices
 **********************************************************/
uint8_t L6474_GetNbDevices(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return (numberOfDevices);
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <L6474_GetNbDevices+0x14>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	200001ec 	.word	0x200001ec

08001384 <L6474_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t L6474_GetPosition(uint8_t deviceId)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	2101      	movs	r1, #1
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fc64 	bl	8000c60 <L6474_CmdGetParam>
 8001398:	4603      	mov	r3, r0
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fe8e 	bl	80020bc <L6474_ConvertPosition>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <L6474_GetStepMode>:
 * @brief Get the motor step mode
 * @param[in] deviceId Unused parameter
 * @retval step mode
 **********************************************************/
motorStepMode_t L6474_GetStepMode(uint8_t deviceId)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  motorStepMode_t stepMode;
  uint8_t stepSelValue;
  
  /* Get STEP_SEL field of step mode register  */
  stepSelValue = (uint8_t)((0x07 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE))|0x08) ;
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	2116      	movs	r1, #22
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fc50 	bl	8000c60 <L6474_CmdGetParam>
 80013c0:	4603      	mov	r3, r0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	f043 0308 	orr.w	r3, r3, #8
 80013ce:	73bb      	strb	r3, [r7, #14]
  
   switch (stepSelValue)
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	3b08      	subs	r3, #8
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	d81c      	bhi.n	8001412 <L6474_GetStepMode+0x66>
 80013d8:	a201      	add	r2, pc, #4	; (adr r2, 80013e0 <L6474_GetStepMode+0x34>)
 80013da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013de:	bf00      	nop
 80013e0:	080013f5 	.word	0x080013f5
 80013e4:	080013fb 	.word	0x080013fb
 80013e8:	08001401 	.word	0x08001401
 80013ec:	08001407 	.word	0x08001407
 80013f0:	0800140d 	.word	0x0800140d
  {
    case L6474_STEP_SEL_1:
      stepMode = STEP_MODE_FULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	73fb      	strb	r3, [r7, #15]
      break;
 80013f8:	e00e      	b.n	8001418 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_2:
      stepMode = STEP_MODE_HALF;
 80013fa:	2301      	movs	r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
      break;    
 80013fe:	e00b      	b.n	8001418 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_4:
      stepMode = STEP_MODE_1_4;
 8001400:	2302      	movs	r3, #2
 8001402:	73fb      	strb	r3, [r7, #15]
      break;        
 8001404:	e008      	b.n	8001418 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_8:
      stepMode = STEP_MODE_1_8;
 8001406:	2303      	movs	r3, #3
 8001408:	73fb      	strb	r3, [r7, #15]
      break;       
 800140a:	e005      	b.n	8001418 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_16:
      stepMode = STEP_MODE_1_16;
 800140c:	2304      	movs	r3, #4
 800140e:	73fb      	strb	r3, [r7, #15]
      break;
 8001410:	e002      	b.n	8001418 <L6474_GetStepMode+0x6c>
    default:
      stepMode = STEP_MODE_UNKNOW;
 8001412:	23fe      	movs	r3, #254	; 0xfe
 8001414:	73fb      	strb	r3, [r7, #15]
      break;       
 8001416:	bf00      	nop
  }
  
  return stepMode;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop

08001424 <L6474_GetStopMode>:
 * @brief Get the selected stop mode
 * @param[in] deviceId Unused parameter
 * @retval the selected stop mode
 **********************************************************/
motorStopMode_t L6474_GetStopMode(uint8_t deviceId)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].stopMode;
 800142e:	79fa      	ldrb	r2, [r7, #7]
 8001430:	4907      	ldr	r1, [pc, #28]	; (8001450 <L6474_GetStopMode+0x2c>)
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	440b      	add	r3, r1
 800143c:	3325      	adds	r3, #37	; 0x25
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b2db      	uxtb	r3, r3
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20004c34 	.word	0x20004c34

08001454 <L6474_GoHome>:
 * @brief  Requests the motor to move to the home position (ABS_POSITION = 0)
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoHome(uint8_t deviceId)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  L6474_GoTo(deviceId, 0);
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f81e 	bl	80014a4 <L6474_GoTo>
} 
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <L6474_GoMark>:
 * @brief  Requests the motor to move to the mark position 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoMark(uint8_t deviceId)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  uint32_t mark;

  mark = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2103      	movs	r1, #3
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fbee 	bl	8000c60 <L6474_CmdGetParam>
 8001484:	4603      	mov	r3, r0
 8001486:	4618      	mov	r0, r3
 8001488:	f000 fe18 	bl	80020bc <L6474_ConvertPosition>
 800148c:	4603      	mov	r3, r0
 800148e:	60fb      	str	r3, [r7, #12]
  L6474_GoTo(deviceId,mark);  
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	4611      	mov	r1, r2
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f804 	bl	80014a4 <L6474_GoTo>
}
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <L6474_GoTo>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] targetPosition absolute position in steps
 * @retval None
 **********************************************************/
void L6474_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  motorDir_t direction;
  int32_t steps;
  
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 80014b0:	79fa      	ldrb	r2, [r7, #7]
 80014b2:	493a      	ldr	r1, [pc, #232]	; (800159c <L6474_GoTo+0xf8>)
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	440b      	add	r3, r1
 80014be:	3324      	adds	r3, #36	; 0x24
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b08      	cmp	r3, #8
 80014c6:	d003      	beq.n	80014d0 <L6474_GoTo+0x2c>
  {
    L6474_HardStop(deviceId);
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f868 	bl	80015a0 <L6474_HardStop>
  }

  /* Get current position */
  devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	2101      	movs	r1, #1
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fbc3 	bl	8000c60 <L6474_CmdGetParam>
 80014da:	4603      	mov	r3, r0
 80014dc:	79fc      	ldrb	r4, [r7, #7]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 fdec 	bl	80020bc <L6474_ConvertPosition>
 80014e4:	4602      	mov	r2, r0
 80014e6:	492d      	ldr	r1, [pc, #180]	; (800159c <L6474_GoTo+0xf8>)
 80014e8:	4623      	mov	r3, r4
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4423      	add	r3, r4
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	440b      	add	r3, r1
 80014f2:	3304      	adds	r3, #4
 80014f4:	601a      	str	r2, [r3, #0]
  
  /* Compute the number of steps to perform */
  steps = targetPosition - devicePrm[deviceId].currentPosition;
 80014f6:	79fa      	ldrb	r2, [r7, #7]
 80014f8:	4928      	ldr	r1, [pc, #160]	; (800159c <L6474_GoTo+0xf8>)
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	440b      	add	r3, r1
 8001504:	3304      	adds	r3, #4
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	60bb      	str	r3, [r7, #8]
  
  if (steps >= 0) 
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	db0c      	blt.n	800152e <L6474_GoTo+0x8a>
  {
    devicePrm[deviceId].stepsToTake = steps;
 8001514:	79fa      	ldrb	r2, [r7, #7]
 8001516:	68b9      	ldr	r1, [r7, #8]
 8001518:	4820      	ldr	r0, [pc, #128]	; (800159c <L6474_GoTo+0xf8>)
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4403      	add	r3, r0
 8001524:	3314      	adds	r3, #20
 8001526:	6019      	str	r1, [r3, #0]
    direction = FORWARD;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	e00d      	b.n	800154a <L6474_GoTo+0xa6>
    
  } 
  else 
  {
    devicePrm[deviceId].stepsToTake = -steps;
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	425b      	negs	r3, r3
 8001532:	79fa      	ldrb	r2, [r7, #7]
 8001534:	4618      	mov	r0, r3
 8001536:	4919      	ldr	r1, [pc, #100]	; (800159c <L6474_GoTo+0xf8>)
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	440b      	add	r3, r1
 8001542:	3314      	adds	r3, #20
 8001544:	6018      	str	r0, [r3, #0]
    direction = BACKWARD;
 8001546:	2300      	movs	r3, #0
 8001548:	73fb      	strb	r3, [r7, #15]
  }
  
  if (steps != 0) 
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d021      	beq.n	8001594 <L6474_GoTo+0xf0>
  {
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 8001550:	79fa      	ldrb	r2, [r7, #7]
 8001552:	4912      	ldr	r1, [pc, #72]	; (800159c <L6474_GoTo+0xf8>)
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	440b      	add	r3, r1
 800155e:	3322      	adds	r3, #34	; 0x22
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
        
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 8001564:	7bfa      	ldrb	r2, [r7, #15]
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	4611      	mov	r1, r2
 800156a:	4618      	mov	r0, r3
 800156c:	f000 fb48 	bl	8001c00 <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, devicePrm[deviceId].stepsToTake);
 8001570:	79fa      	ldrb	r2, [r7, #7]
 8001572:	490a      	ldr	r1, [pc, #40]	; (800159c <L6474_GoTo+0xf8>)
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	440b      	add	r3, r1
 800157e:	3314      	adds	r3, #20
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f000 fcda 	bl	8001f40 <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	4618      	mov	r0, r3
 8001590:	f001 f8ea 	bl	8002768 <L6474_StartMovement>
  }  
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	bd90      	pop	{r4, r7, pc}
 800159c:	20004c34 	.word	0x20004c34

080015a0 <L6474_HardStop>:
 * @brief  Immediatly stops the motor 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HardStop(uint8_t deviceId) 
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if (devicePrm[deviceId].stopMode == HOLD_MODE)
 80015aa:	79fa      	ldrb	r2, [r7, #7]
 80015ac:	4920      	ldr	r1, [pc, #128]	; (8001630 <L6474_HardStop+0x90>)
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	440b      	add	r3, r1
 80015b8:	3325      	adds	r3, #37	; 0x25
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d12d      	bne.n	800161e <L6474_HardStop+0x7e>
  {
    /* Disable corresponding PWM */
    L6474_Board_PwmStop(deviceId);
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f002 fafb 	bl	8003bc0 <L6474_Board_PwmStop>

    /* Set inactive state */
    devicePrm[deviceId].motionState = INACTIVE;
 80015ca:	79fa      	ldrb	r2, [r7, #7]
 80015cc:	4918      	ldr	r1, [pc, #96]	; (8001630 <L6474_HardStop+0x90>)
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	440b      	add	r3, r1
 80015d8:	3324      	adds	r3, #36	; 0x24
 80015da:	2208      	movs	r2, #8
 80015dc:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].commandExecuted = NO_CMD;
 80015de:	79fa      	ldrb	r2, [r7, #7]
 80015e0:	4913      	ldr	r1, [pc, #76]	; (8001630 <L6474_HardStop+0x90>)
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	440b      	add	r3, r1
 80015ec:	3322      	adds	r3, #34	; 0x22
 80015ee:	2203      	movs	r2, #3
 80015f0:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 80015f2:	79fa      	ldrb	r2, [r7, #7]
 80015f4:	490e      	ldr	r1, [pc, #56]	; (8001630 <L6474_HardStop+0x90>)
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	440b      	add	r3, r1
 8001600:	3314      	adds	r3, #20
 8001602:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001606:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].speed = 0;
 8001608:	79fa      	ldrb	r2, [r7, #7]
 800160a:	4909      	ldr	r1, [pc, #36]	; (8001630 <L6474_HardStop+0x90>)
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	440b      	add	r3, r1
 8001616:	3320      	adds	r3, #32
 8001618:	2200      	movs	r2, #0
 800161a:	801a      	strh	r2, [r3, #0]
  else
  {
    //same handling for HIZ_MODE and STANDBY_MODE
    L6474_HizStop(deviceId);
  }
}
 800161c:	e003      	b.n	8001626 <L6474_HardStop+0x86>
    L6474_HizStop(deviceId);
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f000 f807 	bl	8001634 <L6474_HizStop>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20004c34 	.word	0x20004c34

08001634 <L6474_HizStop>:
 * @brief  Immediatly stops the motor and disable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HizStop(uint8_t deviceId) 
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  /* Disable corresponding PWM */
  L6474_Board_PwmStop(deviceId);
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	4618      	mov	r0, r3
 8001642:	f002 fabd 	bl	8003bc0 <L6474_Board_PwmStop>

  /* Disable power stage */
  L6474_CmdDisable(deviceId);
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff faed 	bl	8000c28 <L6474_CmdDisable>

  /* Set inactive state */
  devicePrm[deviceId].motionState = INACTIVE;
 800164e:	79fa      	ldrb	r2, [r7, #7]
 8001650:	4915      	ldr	r1, [pc, #84]	; (80016a8 <L6474_HizStop+0x74>)
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	440b      	add	r3, r1
 800165c:	3324      	adds	r3, #36	; 0x24
 800165e:	2208      	movs	r2, #8
 8001660:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8001662:	79fa      	ldrb	r2, [r7, #7]
 8001664:	4910      	ldr	r1, [pc, #64]	; (80016a8 <L6474_HizStop+0x74>)
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	440b      	add	r3, r1
 8001670:	3322      	adds	r3, #34	; 0x22
 8001672:	2203      	movs	r2, #3
 8001674:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8001676:	79fa      	ldrb	r2, [r7, #7]
 8001678:	490b      	ldr	r1, [pc, #44]	; (80016a8 <L6474_HizStop+0x74>)
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	440b      	add	r3, r1
 8001684:	3314      	adds	r3, #20
 8001686:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800168a:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 800168c:	79fa      	ldrb	r2, [r7, #7]
 800168e:	4906      	ldr	r1, [pc, #24]	; (80016a8 <L6474_HizStop+0x74>)
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	3320      	adds	r3, #32
 800169c:	2200      	movs	r2, #0
 800169e:	801a      	strh	r2, [r3, #0]
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20004c34 	.word	0x20004c34

080016ac <L6474_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void L6474_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	603a      	str	r2, [r7, #0]
 80016b6:	71fb      	strb	r3, [r7, #7]
 80016b8:	460b      	mov	r3, r1
 80016ba:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 80016bc:	79fa      	ldrb	r2, [r7, #7]
 80016be:	4926      	ldr	r1, [pc, #152]	; (8001758 <L6474_Move+0xac>)
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	3324      	adds	r3, #36	; 0x24
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d003      	beq.n	80016dc <L6474_Move+0x30>
  {
    L6474_HardStop(deviceId);
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ff62 	bl	80015a0 <L6474_HardStop>
  }
  
  if (stepCount != 0) 
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d035      	beq.n	800174e <L6474_Move+0xa2>
  {
    devicePrm[deviceId].stepsToTake = stepCount;
 80016e2:	79fa      	ldrb	r2, [r7, #7]
 80016e4:	491c      	ldr	r1, [pc, #112]	; (8001758 <L6474_Move+0xac>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	3314      	adds	r3, #20
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	601a      	str	r2, [r3, #0]
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 80016f6:	79fa      	ldrb	r2, [r7, #7]
 80016f8:	4917      	ldr	r1, [pc, #92]	; (8001758 <L6474_Move+0xac>)
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	3322      	adds	r3, #34	; 0x22
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
    
    devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2101      	movs	r1, #1
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff faa6 	bl	8000c60 <L6474_CmdGetParam>
 8001714:	4603      	mov	r3, r0
 8001716:	79fc      	ldrb	r4, [r7, #7]
 8001718:	4618      	mov	r0, r3
 800171a:	f000 fccf 	bl	80020bc <L6474_ConvertPosition>
 800171e:	4602      	mov	r2, r0
 8001720:	490d      	ldr	r1, [pc, #52]	; (8001758 <L6474_Move+0xac>)
 8001722:	4623      	mov	r3, r4
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4423      	add	r3, r4
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	440b      	add	r3, r1
 800172c:	3304      	adds	r3, #4
 800172e:	601a      	str	r2, [r3, #0]
    
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 8001730:	79ba      	ldrb	r2, [r7, #6]
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f000 fa62 	bl	8001c00 <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, stepCount);
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	6839      	ldr	r1, [r7, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f000 fbfd 	bl	8001f40 <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	4618      	mov	r0, r3
 800174a:	f001 f80d 	bl	8002768 <L6474_StartMovement>
  }  
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bd90      	pop	{r4, r7, pc}
 8001756:	bf00      	nop
 8001758:	20004c34 	.word	0x20004c34

0800175c <L6474_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the l6474 Driver Instance
 **********************************************************/
uint16_t L6474_ReadId(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return(l6474DriverInstance);
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <L6474_ReadId+0x14>)
 8001762:	881b      	ldrh	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	2000020a 	.word	0x2000020a

08001774 <L6474_ReadStatusRegister>:
 * @retval Status register valued
 * @note The status register flags are not cleared 
 * at the difference with L6474CmdGetStatus()
 **********************************************************/
uint16_t L6474_ReadStatusRegister(uint8_t deviceId)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  return (L6474_CmdGetParam(deviceId,L6474_STATUS));
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	2119      	movs	r1, #25
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fa6c 	bl	8000c60 <L6474_CmdGetParam>
 8001788:	4603      	mov	r3, r0
 800178a:	b29b      	uxth	r3, r3
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <L6474_ReleaseReset>:
/******************************************************//**
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @retval None
 **********************************************************/
void L6474_ReleaseReset(uint8_t deviceId)
{ 
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  L6474_Board_ReleaseReset(deviceId); 
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f002 fa37 	bl	8003c14 <L6474_Board_ReleaseReset>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <L6474_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Reset(uint8_t deviceId)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	71fb      	strb	r3, [r7, #7]
  L6474_Board_Reset(deviceId); 
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f002 fa3c 	bl	8003c38 <L6474_Board_Reset>
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <L6474_ResetAllDevices>:
/******************************************************//**
 * @brief Resets all L6474 devices
 * @retval None
 **********************************************************/
void L6474_ResetAllDevices(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 	uint8_t loop;
 	
 	for (loop = 0; loop < numberOfDevices; loop++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	71fb      	strb	r3, [r7, #7]
 80017d2:	e014      	b.n	80017fe <L6474_ResetAllDevices+0x36>
 	{
   	/* Stop movement and disable power stage*/
  	L6474_HizStop(loop);
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff2c 	bl	8001634 <L6474_HizStop>
    L6474_Reset(loop);
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ffe5 	bl	80017ae <L6474_Reset>
    L6474_Board_Delay(1); // Reset pin must be forced low for at least 10us
 80017e4:	2001      	movs	r0, #1
 80017e6:	f002 f84d 	bl	8003884 <L6474_Board_Delay>
    L6474_Board_ReleaseReset(loop);
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f002 fa11 	bl	8003c14 <L6474_Board_ReleaseReset>
    L6474_Board_Delay(1); 
 80017f2:	2001      	movs	r0, #1
 80017f4:	f002 f846 	bl	8003884 <L6474_Board_Delay>
 	for (loop = 0; loop < numberOfDevices; loop++)
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	3301      	adds	r3, #1
 80017fc:	71fb      	strb	r3, [r7, #7]
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <L6474_ResetAllDevices+0x4c>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	79fa      	ldrb	r2, [r7, #7]
 8001806:	429a      	cmp	r2, r3
 8001808:	d3e4      	bcc.n	80017d4 <L6474_ResetAllDevices+0xc>
  }
}
 800180a:	bf00      	nop
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200001ec 	.word	0x200001ec

08001818 <L6474_Run>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] direction FORWARD or BACKWARD
 * @retval None
 **********************************************************/
void L6474_Run(uint8_t deviceId, motorDir_t direction)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	460a      	mov	r2, r1
 8001822:	71fb      	strb	r3, [r7, #7]
 8001824:	4613      	mov	r3, r2
 8001826:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001828:	79fa      	ldrb	r2, [r7, #7]
 800182a:	4913      	ldr	r1, [pc, #76]	; (8001878 <L6474_Run+0x60>)
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	440b      	add	r3, r1
 8001836:	3324      	adds	r3, #36	; 0x24
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b08      	cmp	r3, #8
 800183e:	d003      	beq.n	8001848 <L6474_Run+0x30>
  {
    L6474_HardStop(deviceId);
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff feac 	bl	80015a0 <L6474_HardStop>
  }
  
	/* Direction setup */
	L6474_SetDirection(deviceId,direction);
 8001848:	79ba      	ldrb	r2, [r7, #6]
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f000 f9d6 	bl	8001c00 <L6474_SetDirection>

	devicePrm[deviceId].commandExecuted = RUN_CMD;
 8001854:	79fa      	ldrb	r2, [r7, #7]
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <L6474_Run+0x60>)
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	3322      	adds	r3, #34	; 0x22
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]

	/* Motor activation */
	L6474_StartMovement(deviceId); 
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	4618      	mov	r0, r3
 800186c:	f000 ff7c 	bl	8002768 <L6474_StartMovement>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20004c34 	.word	0x20004c34

0800187c <L6474_SelectStepMode>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] stepMod from full step to 1/16 microstep as specified in enum motorStepMode_t
 * @retval None
 **********************************************************/
bool L6474_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMod)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	460a      	mov	r2, r1
 8001886:	71fb      	strb	r3, [r7, #7]
 8001888:	4613      	mov	r3, r2
 800188a:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  L6474_STEP_SEL_t l6474StepMod;
  
  switch (stepMod)
 800188c:	79bb      	ldrb	r3, [r7, #6]
 800188e:	2b03      	cmp	r3, #3
 8001890:	d816      	bhi.n	80018c0 <L6474_SelectStepMode+0x44>
 8001892:	a201      	add	r2, pc, #4	; (adr r2, 8001898 <L6474_SelectStepMode+0x1c>)
 8001894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001898:	080018a9 	.word	0x080018a9
 800189c:	080018af 	.word	0x080018af
 80018a0:	080018b5 	.word	0x080018b5
 80018a4:	080018bb 	.word	0x080018bb
  {
    case STEP_MODE_FULL:
      l6474StepMod = L6474_STEP_SEL_1;
 80018a8:	2308      	movs	r3, #8
 80018aa:	73fb      	strb	r3, [r7, #15]
      break;
 80018ac:	e00b      	b.n	80018c6 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_HALF:
      l6474StepMod = L6474_STEP_SEL_1_2;
 80018ae:	2309      	movs	r3, #9
 80018b0:	73fb      	strb	r3, [r7, #15]
      break;    
 80018b2:	e008      	b.n	80018c6 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_4:
      l6474StepMod = L6474_STEP_SEL_1_4;
 80018b4:	230a      	movs	r3, #10
 80018b6:	73fb      	strb	r3, [r7, #15]
      break;        
 80018b8:	e005      	b.n	80018c6 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_8:
      l6474StepMod = L6474_STEP_SEL_1_8;
 80018ba:	230b      	movs	r3, #11
 80018bc:	73fb      	strb	r3, [r7, #15]
      break;       
 80018be:	e002      	b.n	80018c6 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_16:
    default:
      l6474StepMod = L6474_STEP_SEL_1_16;
 80018c0:	230c      	movs	r3, #12
 80018c2:	73fb      	strb	r3, [r7, #15]
      break;       
 80018c4:	bf00      	nop
  }

  /* Deactivate motor*/
  L6474_HizStop(deviceId);
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff feb3 	bl	8001634 <L6474_HizStop>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE)) ;
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2116      	movs	r1, #22
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f9c4 	bl	8000c60 <L6474_CmdGetParam>
 80018d8:	4603      	mov	r3, r0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f023 0307 	bic.w	r3, r3, #7
 80018e0:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  L6474_CmdSetParam(deviceId, L6474_STEP_MODE, stepModeRegister | (uint8_t)l6474StepMod);
 80018e2:	7bba      	ldrb	r2, [r7, #14]
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	2116      	movs	r1, #22
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fb3b 	bl	8000f6c <L6474_CmdSetParam>

  /* Reset abs pos register */
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, 0);
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2200      	movs	r2, #0
 80018fa:	2101      	movs	r1, #1
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fb35 	bl	8000f6c <L6474_CmdSetParam>
  
  return (1);
 8001902:	2301      	movs	r3, #1
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <L6474_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	460a      	mov	r2, r1
 8001916:	71fb      	strb	r3, [r7, #7]
 8001918:	4613      	mov	r3, r2
 800191a:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]
  if ((newAcc != 0)&&
 8001920:	88bb      	ldrh	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d023      	beq.n	800196e <L6474_SetAcceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001926:	79fa      	ldrb	r2, [r7, #7]
 8001928:	4914      	ldr	r1, [pc, #80]	; (800197c <L6474_SetAcceleration+0x70>)
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	440b      	add	r3, r1
 8001934:	3324      	adds	r3, #36	; 0x24
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b2db      	uxtb	r3, r3
  if ((newAcc != 0)&&
 800193a:	2b08      	cmp	r3, #8
 800193c:	d00b      	beq.n	8001956 <L6474_SetAcceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 800193e:	79fa      	ldrb	r2, [r7, #7]
 8001940:	490e      	ldr	r1, [pc, #56]	; (800197c <L6474_SetAcceleration+0x70>)
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	440b      	add	r3, r1
 800194c:	3322      	adds	r3, #34	; 0x22
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10b      	bne.n	800196e <L6474_SetAcceleration+0x62>
  {
    devicePrm[deviceId].acceleration = newAcc;
 8001956:	79fa      	ldrb	r2, [r7, #7]
 8001958:	4908      	ldr	r1, [pc, #32]	; (800197c <L6474_SetAcceleration+0x70>)
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	440b      	add	r3, r1
 8001964:	3318      	adds	r3, #24
 8001966:	88ba      	ldrh	r2, [r7, #4]
 8001968:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 800196a:	2301      	movs	r3, #1
 800196c:	73fb      	strb	r3, [r7, #15]
  }    
  return cmdExecuted;
 800196e:	7bfb      	ldrb	r3, [r7, #15]
}            
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	20004c34 	.word	0x20004c34

08001980 <L6474_SetAnalogValue>:
 * L6474_TVAL, L6474_TON_MIN, L6474_TOFF_MIN, L6474_OCD_TH)
 * @param[in] value Analog value to convert and set into the register
 * @retval TRUE if param and param is valid, FALSE otherwise
 *********************************************************/
bool L6474_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	ed87 0a01 	vstr	s0, [r7, #4]
 800198e:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8001990:	2301      	movs	r3, #1
 8001992:	74fb      	strb	r3, [r7, #19]
  if ((value < 0)&&(param != L6474_ABS_POS)&&(param != L6474_MARK)) 
 8001994:	edd7 7a01 	vldr	s15, [r7, #4]
 8001998:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800199c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a0:	d508      	bpl.n	80019b4 <L6474_SetAnalogValue+0x34>
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d005      	beq.n	80019b4 <L6474_SetAnalogValue+0x34>
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d002      	beq.n	80019b4 <L6474_SetAnalogValue+0x34>
  {
    result = FALSE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	74fb      	strb	r3, [r7, #19]
 80019b2:	e0d9      	b.n	8001b68 <L6474_SetAnalogValue+0x1e8>
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	2b12      	cmp	r3, #18
 80019ba:	f200 80ca 	bhi.w	8001b52 <L6474_SetAnalogValue+0x1d2>
 80019be:	a201      	add	r2, pc, #4	; (adr r2, 80019c4 <L6474_SetAnalogValue+0x44>)
 80019c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c4:	08001a77 	.word	0x08001a77
 80019c8:	08001a11 	.word	0x08001a11
 80019cc:	08001a77 	.word	0x08001a77
 80019d0:	08001b53 	.word	0x08001b53
 80019d4:	08001b53 	.word	0x08001b53
 80019d8:	08001b53 	.word	0x08001b53
 80019dc:	08001b53 	.word	0x08001b53
 80019e0:	08001b53 	.word	0x08001b53
 80019e4:	08001ae1 	.word	0x08001ae1
 80019e8:	08001b53 	.word	0x08001b53
 80019ec:	08001b53 	.word	0x08001b53
 80019f0:	08001b53 	.word	0x08001b53
 80019f4:	08001b53 	.word	0x08001b53
 80019f8:	08001b53 	.word	0x08001b53
 80019fc:	08001b2d 	.word	0x08001b2d
 8001a00:	08001b2d 	.word	0x08001b2d
 8001a04:	08001b53 	.word	0x08001b53
 8001a08:	08001b53 	.word	0x08001b53
 8001a0c:	08001b07 	.word	0x08001b07
  else
  {
    switch (param)
    {
      case L6474_EL_POS:
        if  ((value !=0)&&
 8001a10:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a14:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1c:	d021      	beq.n	8001a62 <L6474_SetAnalogValue+0xe2>
 8001a1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a22:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001b74 <L6474_SetAnalogValue+0x1f4>
 8001a26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2e:	dc15      	bgt.n	8001a5c <L6474_SetAnalogValue+0xdc>
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
             (value < (1<<(7-(L6474_STEP_MODE_STEP_SEL & L6474_CmdGetParam(0,L6474_STEP_MODE)))))))
 8001a30:	2116      	movs	r1, #22
 8001a32:	2000      	movs	r0, #0
 8001a34:	f7ff f914 	bl	8000c60 <L6474_CmdGetParam>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	2201      	movs	r2, #1
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	ee07 3a90 	vmov	s15, r3
 8001a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
 8001a4e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5a:	d502      	bpl.n	8001a62 <L6474_SetAnalogValue+0xe2>
        {
          result = FALSE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
        }
        break;
 8001a60:	e079      	b.n	8001b56 <L6474_SetAnalogValue+0x1d6>
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
 8001a62:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a6a:	ee17 3a90 	vmov	r3, s15
 8001a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a72:	617b      	str	r3, [r7, #20]
        break;
 8001a74:	e06f      	b.n	8001b56 <L6474_SetAnalogValue+0x1d6>
      case L6474_ABS_POS:
      case L6474_MARK:
        if ((value >= L6474_MIN_POSITION) &&
 8001a76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a7a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001b78 <L6474_SetAnalogValue+0x1f8>
 8001a7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a86:	db27      	blt.n	8001ad8 <L6474_SetAnalogValue+0x158>
 8001a88:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a8c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001b7c <L6474_SetAnalogValue+0x1fc>
 8001a90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a98:	d81e      	bhi.n	8001ad8 <L6474_SetAnalogValue+0x158>
            (value <= L6474_MAX_POSITION))
        {
          if (value >= 0)
 8001a9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa6:	db09      	blt.n	8001abc <L6474_SetAnalogValue+0x13c>
          {
            registerValue = ((uint32_t) value)& L6474_ABS_POS_VALUE_MASK;
 8001aa8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ab0:	ee17 3a90 	vmov	r3, s15
 8001ab4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001ab8:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001aba:	e010      	b.n	8001ade <L6474_SetAnalogValue+0x15e>
          }
          else
          {
            registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-value))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001abc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ac0:	eef1 7a67 	vneg.f32	s15, s15
 8001ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac8:	ee17 3a90 	vmov	r3, s15
 8001acc:	43db      	mvns	r3, r3
 8001ace:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001ad6:	e002      	b.n	8001ade <L6474_SetAnalogValue+0x15e>
          }
        }
        else 
        {
          result = FALSE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	74fb      	strb	r3, [r7, #19]
        }
        break;
 8001adc:	e03b      	b.n	8001b56 <L6474_SetAnalogValue+0x1d6>
 8001ade:	e03a      	b.n	8001b56 <L6474_SetAnalogValue+0x1d6>
      case L6474_TVAL:
        if (value > L6474_TVAL_MAX_VALUE)
 8001ae0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ae4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001b80 <L6474_SetAnalogValue+0x200>
 8001ae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af0:	dd02      	ble.n	8001af8 <L6474_SetAnalogValue+0x178>
        {
          result = FALSE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tval_Current_to_Par(value);
        }
        break;
 8001af6:	e02e      	b.n	8001b56 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tval_Current_to_Par(value);
 8001af8:	ed97 0a01 	vldr	s0, [r7, #4]
 8001afc:	f001 f98a 	bl	8002e14 <L6474_Tval_Current_to_Par>
 8001b00:	4603      	mov	r3, r0
 8001b02:	617b      	str	r3, [r7, #20]
        break;
 8001b04:	e027      	b.n	8001b56 <L6474_SetAnalogValue+0x1d6>
      case L6474_OCD_TH:
        if (value > L6474_OCD_TH_MAX_VALUE)
 8001b06:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b0a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001b84 <L6474_SetAnalogValue+0x204>
 8001b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b16:	dd02      	ble.n	8001b1e <L6474_SetAnalogValue+0x19e>
        {
          result = FALSE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	74fb      	strb	r3, [r7, #19]
        }
        else 
        {
          registerValue = L6474_Ocd_Th_to_Par(value);
        }
        break;
 8001b1c:	e01b      	b.n	8001b56 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Ocd_Th_to_Par(value);
 8001b1e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b22:	f001 f953 	bl	8002dcc <L6474_Ocd_Th_to_Par>
 8001b26:	4603      	mov	r3, r0
 8001b28:	617b      	str	r3, [r7, #20]
        break;
 8001b2a:	e014      	b.n	8001b56 <L6474_SetAnalogValue+0x1d6>
      case L6474_TON_MIN:
      case L6474_TOFF_MIN:
        if (value > L6474_TOFF_TON_MIN_MAX_VALUE)
 8001b2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b30:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001b88 <L6474_SetAnalogValue+0x208>
 8001b34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3c:	dd02      	ble.n	8001b44 <L6474_SetAnalogValue+0x1c4>
        {
          result = FALSE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tmin_Time_to_Par(value);
        }
        break;    
 8001b42:	e008      	b.n	8001b56 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tmin_Time_to_Par(value);
 8001b44:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b48:	f001 f988 	bl	8002e5c <L6474_Tmin_Time_to_Par>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	617b      	str	r3, [r7, #20]
        break;    
 8001b50:	e001      	b.n	8001b56 <L6474_SetAnalogValue+0x1d6>
      default:
        result = FALSE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	74fb      	strb	r3, [r7, #19]
    }
    if (result != FALSE)
 8001b56:	7cfb      	ldrb	r3, [r7, #19]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <L6474_SetAnalogValue+0x1e8>
    {
      L6474_CmdSetParam(deviceId, param, registerValue);
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fa02 	bl	8000f6c <L6474_CmdSetParam>
    }
  }
  return result;
 8001b68:	7cfb      	ldrb	r3, [r7, #19]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	43ff8000 	.word	0x43ff8000
 8001b78:	ca000000 	.word	0xca000000
 8001b7c:	49fffff8 	.word	0x49fffff8
 8001b80:	457a0000 	.word	0x457a0000
 8001b84:	45bb8000 	.word	0x45bb8000
 8001b88:	42800000 	.word	0x42800000

08001b8c <L6474_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	460a      	mov	r2, r1
 8001b96:	71fb      	strb	r3, [r7, #7]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	73fb      	strb	r3, [r7, #15]
  if ((newDec != 0)&& 
 8001ba0:	88bb      	ldrh	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d023      	beq.n	8001bee <L6474_SetDeceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001ba6:	79fa      	ldrb	r2, [r7, #7]
 8001ba8:	4914      	ldr	r1, [pc, #80]	; (8001bfc <L6474_SetDeceleration+0x70>)
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	440b      	add	r3, r1
 8001bb4:	3324      	adds	r3, #36	; 0x24
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	b2db      	uxtb	r3, r3
  if ((newDec != 0)&& 
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d00b      	beq.n	8001bd6 <L6474_SetDeceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001bbe:	79fa      	ldrb	r2, [r7, #7]
 8001bc0:	490e      	ldr	r1, [pc, #56]	; (8001bfc <L6474_SetDeceleration+0x70>)
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	3322      	adds	r3, #34	; 0x22
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10b      	bne.n	8001bee <L6474_SetDeceleration+0x62>
  {
    devicePrm[deviceId].deceleration = newDec;
 8001bd6:	79fa      	ldrb	r2, [r7, #7]
 8001bd8:	4908      	ldr	r1, [pc, #32]	; (8001bfc <L6474_SetDeceleration+0x70>)
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	440b      	add	r3, r1
 8001be4:	331a      	adds	r3, #26
 8001be6:	88ba      	ldrh	r2, [r7, #4]
 8001be8:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001bea:	2301      	movs	r3, #1
 8001bec:	73fb      	strb	r3, [r7, #15]
  }      
  return cmdExecuted;
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
}        
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	20004c34 	.word	0x20004c34

08001c00 <L6474_SetDirection>:
 * @note The direction change is only applied if the device 
 * is in INACTIVE state
 * @retval None
 **********************************************************/
void L6474_SetDirection(uint8_t deviceId, motorDir_t dir)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	460a      	mov	r2, r1
 8001c0a:	71fb      	strb	r3, [r7, #7]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	71bb      	strb	r3, [r7, #6]
  if (devicePrm[deviceId].motionState == INACTIVE)
 8001c10:	79fa      	ldrb	r2, [r7, #7]
 8001c12:	490f      	ldr	r1, [pc, #60]	; (8001c50 <L6474_SetDirection+0x50>)
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	440b      	add	r3, r1
 8001c1e:	3324      	adds	r3, #36	; 0x24
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d10f      	bne.n	8001c48 <L6474_SetDirection+0x48>
  {
    devicePrm[deviceId].direction = dir;
 8001c28:	79fa      	ldrb	r2, [r7, #7]
 8001c2a:	4909      	ldr	r1, [pc, #36]	; (8001c50 <L6474_SetDirection+0x50>)
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	440b      	add	r3, r1
 8001c36:	3323      	adds	r3, #35	; 0x23
 8001c38:	79ba      	ldrb	r2, [r7, #6]
 8001c3a:	701a      	strb	r2, [r3, #0]
    L6474_Board_SetDirectionGpio(deviceId, dir);
 8001c3c:	79ba      	ldrb	r2, [r7, #6]
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	4611      	mov	r1, r2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f002 f80a 	bl	8003c5c <L6474_Board_SetDirectionGpio>
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20004c34 	.word	0x20004c34

08001c54 <L6474_SetHome>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new home position
 * @retval None
 **********************************************************/
void L6474_SetHome(uint8_t deviceId, int32_t homePos)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
  int32_t absHomePos = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS)) - homePos;
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	2101      	movs	r1, #1
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fffb 	bl	8000c60 <L6474_CmdGetParam>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 fa25 	bl	80020bc <L6474_ConvertPosition>
 8001c72:	4602      	mov	r2, r0
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	60bb      	str	r3, [r7, #8]
  uint32_t registerValue;
  
  if (absHomePos >= 0)
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	db04      	blt.n	8001c8a <L6474_SetHome+0x36>
  {
    registerValue = ((uint32_t) absHomePos)& L6474_ABS_POS_VALUE_MASK;
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	e005      	b.n	8001c96 <L6474_SetHome+0x42>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-absHomePos))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001c92:	3301      	adds	r3, #1
 8001c94:	60fb      	str	r3, [r7, #12]
  }
 
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, registerValue);
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff f965 	bl	8000f6c <L6474_CmdSetParam>
}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <L6474_SetMark>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new Mark position
 * @retval None
 **********************************************************/
void L6474_SetMark(uint8_t deviceId, int32_t markPos)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	6039      	str	r1, [r7, #0]
 8001cb4:	71fb      	strb	r3, [r7, #7]
  uint32_t registerValue;
  if (markPos >= 0)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	db04      	blt.n	8001cc6 <L6474_SetMark+0x1c>
  {
    registerValue = ((uint32_t) markPos)& L6474_ABS_POS_VALUE_MASK;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	e005      	b.n	8001cd2 <L6474_SetMark+0x28>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-markPos))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001cce:	3301      	adds	r3, #1
 8001cd0:	60fb      	str	r3, [r7, #12]
  }
  
  L6474_CmdSetParam(deviceId,L6474_MARK, registerValue);
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	2103      	movs	r1, #3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff f947 	bl	8000f6c <L6474_CmdSetParam>
}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <L6474_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
 8001cfc:	88bb      	ldrh	r3, [r7, #4]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d935      	bls.n	8001d6e <L6474_SetMaxSpeed+0x86>
 8001d02:	88bb      	ldrh	r3, [r7, #4]
 8001d04:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d830      	bhi.n	8001d6e <L6474_SetMaxSpeed+0x86>
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001d0c:	79fa      	ldrb	r2, [r7, #7]
 8001d0e:	491b      	ldr	r1, [pc, #108]	; (8001d7c <L6474_SetMaxSpeed+0x94>)
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	440b      	add	r3, r1
 8001d1a:	331e      	adds	r3, #30
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
 8001d20:	88ba      	ldrh	r2, [r7, #4]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d323      	bcc.n	8001d6e <L6474_SetMaxSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001d26:	79fa      	ldrb	r2, [r7, #7]
 8001d28:	4914      	ldr	r1, [pc, #80]	; (8001d7c <L6474_SetMaxSpeed+0x94>)
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	440b      	add	r3, r1
 8001d34:	3324      	adds	r3, #36	; 0x24
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b2db      	uxtb	r3, r3
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d00b      	beq.n	8001d56 <L6474_SetMaxSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001d3e:	79fa      	ldrb	r2, [r7, #7]
 8001d40:	490e      	ldr	r1, [pc, #56]	; (8001d7c <L6474_SetMaxSpeed+0x94>)
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3322      	adds	r3, #34	; 0x22
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10b      	bne.n	8001d6e <L6474_SetMaxSpeed+0x86>
  {
    devicePrm[deviceId].maxSpeed = newMaxSpeed;
 8001d56:	79fa      	ldrb	r2, [r7, #7]
 8001d58:	4908      	ldr	r1, [pc, #32]	; (8001d7c <L6474_SetMaxSpeed+0x94>)
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	440b      	add	r3, r1
 8001d64:	331c      	adds	r3, #28
 8001d66:	88ba      	ldrh	r2, [r7, #4]
 8001d68:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	20004c34 	.word	0x20004c34

08001d80 <L6474_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	460a      	mov	r2, r1
 8001d8a:	71fb      	strb	r3, [r7, #7]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	73fb      	strb	r3, [r7, #15]
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
 8001d94:	88bb      	ldrh	r3, [r7, #4]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d935      	bls.n	8001e06 <L6474_SetMinSpeed+0x86>
 8001d9a:	88bb      	ldrh	r3, [r7, #4]
 8001d9c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d830      	bhi.n	8001e06 <L6474_SetMinSpeed+0x86>
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8001da4:	79fa      	ldrb	r2, [r7, #7]
 8001da6:	491b      	ldr	r1, [pc, #108]	; (8001e14 <L6474_SetMinSpeed+0x94>)
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	440b      	add	r3, r1
 8001db2:	331c      	adds	r3, #28
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
 8001db8:	88ba      	ldrh	r2, [r7, #4]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d823      	bhi.n	8001e06 <L6474_SetMinSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001dbe:	79fa      	ldrb	r2, [r7, #7]
 8001dc0:	4914      	ldr	r1, [pc, #80]	; (8001e14 <L6474_SetMinSpeed+0x94>)
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	440b      	add	r3, r1
 8001dcc:	3324      	adds	r3, #36	; 0x24
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b2db      	uxtb	r3, r3
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d00b      	beq.n	8001dee <L6474_SetMinSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001dd6:	79fa      	ldrb	r2, [r7, #7]
 8001dd8:	490e      	ldr	r1, [pc, #56]	; (8001e14 <L6474_SetMinSpeed+0x94>)
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	440b      	add	r3, r1
 8001de4:	3322      	adds	r3, #34	; 0x22
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10b      	bne.n	8001e06 <L6474_SetMinSpeed+0x86>
  {
    devicePrm[deviceId].minSpeed = newMinSpeed;
 8001dee:	79fa      	ldrb	r2, [r7, #7]
 8001df0:	4908      	ldr	r1, [pc, #32]	; (8001e14 <L6474_SetMinSpeed+0x94>)
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	440b      	add	r3, r1
 8001dfc:	331e      	adds	r3, #30
 8001dfe:	88ba      	ldrh	r2, [r7, #4]
 8001e00:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001e02:	2301      	movs	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
  }  
  return cmdExecuted;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
}                 
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	20004c34 	.word	0x20004c34

08001e18 <L6474_SetStopMode>:
 * @param[in] deviceId Unused parameter
 * @param[in] stopMode HOLD_MODE to let power bridge enabled
 * @retval None
 **********************************************************/
void L6474_SetStopMode(uint8_t deviceId, motorStopMode_t stopMode)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	460a      	mov	r2, r1
 8001e22:	71fb      	strb	r3, [r7, #7]
 8001e24:	4613      	mov	r3, r2
 8001e26:	71bb      	strb	r3, [r7, #6]
  devicePrm[deviceId].stopMode = stopMode;
 8001e28:	79fa      	ldrb	r2, [r7, #7]
 8001e2a:	4907      	ldr	r1, [pc, #28]	; (8001e48 <L6474_SetStopMode+0x30>)
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	440b      	add	r3, r1
 8001e36:	3325      	adds	r3, #37	; 0x25
 8001e38:	79ba      	ldrb	r2, [r7, #6]
 8001e3a:	701a      	strb	r2, [r3, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	20004c34 	.word	0x20004c34

08001e4c <L6474_SoftStop>:
 * @param[in] deviceId (from 0 to 2)
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is in INACTIVE state.
 **********************************************************/
bool L6474_SoftStop(uint8_t deviceId)
{	
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
  bool cmdExecuted = FALSE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
  if (devicePrm[deviceId].motionState != INACTIVE)
 8001e5a:	79fa      	ldrb	r2, [r7, #7]
 8001e5c:	490e      	ldr	r1, [pc, #56]	; (8001e98 <L6474_SoftStop+0x4c>)
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	440b      	add	r3, r1
 8001e68:	3324      	adds	r3, #36	; 0x24
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d00b      	beq.n	8001e8a <L6474_SoftStop+0x3e>
  {
    devicePrm[deviceId].commandExecuted = SOFT_STOP_CMD;
 8001e72:	79fa      	ldrb	r2, [r7, #7]
 8001e74:	4908      	ldr	r1, [pc, #32]	; (8001e98 <L6474_SoftStop+0x4c>)
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	440b      	add	r3, r1
 8001e80:	3322      	adds	r3, #34	; 0x22
 8001e82:	2202      	movs	r2, #2
 8001e84:	701a      	strb	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001e86:	2301      	movs	r3, #1
 8001e88:	73fb      	strb	r3, [r7, #15]
  }
  return (cmdExecuted);
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	20004c34 	.word	0x20004c34

08001e9c <L6474_WaitWhileActive>:
 * @brief  Locks until the device state becomes Inactive
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_WaitWhileActive(uint8_t deviceId)
 {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (L6474_GetDeviceState(deviceId) != INACTIVE);
 8001ea6:	bf00      	nop
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff f9d6 	bl	800125c <L6474_GetDeviceState>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d1f8      	bne.n	8001ea8 <L6474_WaitWhileActive+0xc>
}
 8001eb6:	bf00      	nop
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <L6474_ApplySpeed>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] newSpeed in pps
 * @retval None
 **********************************************************/
void L6474_ApplySpeed(uint8_t deviceId, uint16_t newSpeed)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	460a      	mov	r2, r1
 8001eca:	71fb      	strb	r3, [r7, #7]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	80bb      	strh	r3, [r7, #4]
  if (newSpeed < L6474_MIN_PWM_FREQ)
 8001ed0:	88bb      	ldrh	r3, [r7, #4]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d801      	bhi.n	8001eda <L6474_ApplySpeed+0x1a>
  {
    newSpeed = L6474_MIN_PWM_FREQ;  
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	80bb      	strh	r3, [r7, #4]
  }
  if (newSpeed > L6474_MAX_PWM_FREQ)
 8001eda:	88bb      	ldrh	r3, [r7, #4]
 8001edc:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d902      	bls.n	8001eea <L6474_ApplySpeed+0x2a>
  {
    newSpeed = L6474_MAX_PWM_FREQ;
 8001ee4:	f242 7310 	movw	r3, #10000	; 0x2710
 8001ee8:	80bb      	strh	r3, [r7, #4]
  }
  
  devicePrm[deviceId].speed = newSpeed;
 8001eea:	79fa      	ldrb	r2, [r7, #7]
 8001eec:	4913      	ldr	r1, [pc, #76]	; (8001f3c <L6474_ApplySpeed+0x7c>)
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	440b      	add	r3, r1
 8001ef8:	3320      	adds	r3, #32
 8001efa:	88ba      	ldrh	r2, [r7, #4]
 8001efc:	801a      	strh	r2, [r3, #0]

  switch (deviceId)
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d010      	beq.n	8001f26 <L6474_ApplySpeed+0x66>
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	dc13      	bgt.n	8001f30 <L6474_ApplySpeed+0x70>
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <L6474_ApplySpeed+0x52>
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d005      	beq.n	8001f1c <L6474_ApplySpeed+0x5c>
      break;
    case 2:
      L6474_Board_Pwm3SetFreq(newSpeed);
      break;
    default:
      break; //ignore error
 8001f10:	e00e      	b.n	8001f30 <L6474_ApplySpeed+0x70>
      L6474_Board_Pwm1SetFreq(newSpeed);
 8001f12:	88bb      	ldrh	r3, [r7, #4]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f001 fd8b 	bl	8003a30 <L6474_Board_Pwm1SetFreq>
      break;
 8001f1a:	e00a      	b.n	8001f32 <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm2SetFreq(newSpeed);
 8001f1c:	88bb      	ldrh	r3, [r7, #4]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f001 fdac 	bl	8003a7c <L6474_Board_Pwm2SetFreq>
      break;
 8001f24:	e005      	b.n	8001f32 <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm3SetFreq(newSpeed);
 8001f26:	88bb      	ldrh	r3, [r7, #4]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f001 fdcd 	bl	8003ac8 <L6474_Board_Pwm3SetFreq>
      break;
 8001f2e:	e000      	b.n	8001f32 <L6474_ApplySpeed+0x72>
      break; //ignore error
 8001f30:	bf00      	nop
  }
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20004c34 	.word	0x20004c34

08001f40 <L6474_ComputeSpeedProfile>:
 * speed.
 * Else, a triangular move is performed (no steady phase: the maximum speed is never
 * reached.
 **********************************************************/
void L6474_ComputeSpeedProfile(uint8_t deviceId, uint32_t nbSteps)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	; 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  uint32_t reqAccSteps; 
	uint32_t reqDecSteps;
   
  /* compute the number of steps to get the targeted speed */
  uint16_t minSpeed = devicePrm[deviceId].minSpeed;
 8001f4c:	79fa      	ldrb	r2, [r7, #7]
 8001f4e:	495a      	ldr	r1, [pc, #360]	; (80020b8 <L6474_ComputeSpeedProfile+0x178>)
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	440b      	add	r3, r1
 8001f5a:	331e      	adds	r3, #30
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	837b      	strh	r3, [r7, #26]
  reqAccSteps = (devicePrm[deviceId].maxSpeed - minSpeed);
 8001f60:	79fa      	ldrb	r2, [r7, #7]
 8001f62:	4955      	ldr	r1, [pc, #340]	; (80020b8 <L6474_ComputeSpeedProfile+0x178>)
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	440b      	add	r3, r1
 8001f6e:	331c      	adds	r3, #28
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	8b7b      	ldrh	r3, [r7, #26]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	61fb      	str	r3, [r7, #28]
  reqAccSteps *= (devicePrm[deviceId].maxSpeed + minSpeed);
 8001f7c:	79fa      	ldrb	r2, [r7, #7]
 8001f7e:	494e      	ldr	r1, [pc, #312]	; (80020b8 <L6474_ComputeSpeedProfile+0x178>)
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	440b      	add	r3, r1
 8001f8a:	331c      	adds	r3, #28
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	8b7b      	ldrh	r3, [r7, #26]
 8001f94:	4413      	add	r3, r2
 8001f96:	461a      	mov	r2, r3
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	61fb      	str	r3, [r7, #28]
  reqDecSteps = reqAccSteps;
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	617b      	str	r3, [r7, #20]
  reqAccSteps /= (uint32_t)devicePrm[deviceId].acceleration;
 8001fa4:	79fa      	ldrb	r2, [r7, #7]
 8001fa6:	4944      	ldr	r1, [pc, #272]	; (80020b8 <L6474_ComputeSpeedProfile+0x178>)
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3318      	adds	r3, #24
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fc0:	61fb      	str	r3, [r7, #28]
  reqAccSteps /= 2;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	085b      	lsrs	r3, r3, #1
 8001fc6:	61fb      	str	r3, [r7, #28]

  /* compute the number of steps to stop */
  reqDecSteps /= (uint32_t)devicePrm[deviceId].deceleration;
 8001fc8:	79fa      	ldrb	r2, [r7, #7]
 8001fca:	493b      	ldr	r1, [pc, #236]	; (80020b8 <L6474_ComputeSpeedProfile+0x178>)
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	440b      	add	r3, r1
 8001fd6:	331a      	adds	r3, #26
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	461a      	mov	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fe4:	617b      	str	r3, [r7, #20]
  reqDecSteps /= 2;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	085b      	lsrs	r3, r3, #1
 8001fea:	617b      	str	r3, [r7, #20]

	if(( reqAccSteps + reqDecSteps ) > nbSteps)
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d242      	bcs.n	800207e <L6474_ComputeSpeedProfile+0x13e>
	{	
    /* Triangular move  */
    /* reqDecSteps = (Pos * Dec) /(Dec+Acc) */
    uint32_t dec = devicePrm[deviceId].deceleration;
 8001ff8:	79fa      	ldrb	r2, [r7, #7]
 8001ffa:	492f      	ldr	r1, [pc, #188]	; (80020b8 <L6474_ComputeSpeedProfile+0x178>)
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	440b      	add	r3, r1
 8002006:	331a      	adds	r3, #26
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	b29b      	uxth	r3, r3
 800200c:	613b      	str	r3, [r7, #16]
    uint32_t acc = devicePrm[deviceId].acceleration;
 800200e:	79fa      	ldrb	r2, [r7, #7]
 8002010:	4929      	ldr	r1, [pc, #164]	; (80020b8 <L6474_ComputeSpeedProfile+0x178>)
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	440b      	add	r3, r1
 800201c:	3318      	adds	r3, #24
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	b29b      	uxth	r3, r3
 8002022:	60fb      	str	r3, [r7, #12]
    
    reqDecSteps =  ((uint32_t) dec * nbSteps) / (acc + dec);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	fb02 f203 	mul.w	r2, r2, r3
 800202c:	68f9      	ldr	r1, [r7, #12]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	440b      	add	r3, r1
 8002032:	fbb2 f3f3 	udiv	r3, r2, r3
 8002036:	617b      	str	r3, [r7, #20]
    if (reqDecSteps > 1)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d908      	bls.n	8002050 <L6474_ComputeSpeedProfile+0x110>
    {
      reqAccSteps = reqDecSteps - 1;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	3b01      	subs	r3, #1
 8002042:	61fb      	str	r3, [r7, #28]
      if(reqAccSteps == 0)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d104      	bne.n	8002054 <L6474_ComputeSpeedProfile+0x114>
      {
        reqAccSteps = 1;
 800204a:	2301      	movs	r3, #1
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	e001      	b.n	8002054 <L6474_ComputeSpeedProfile+0x114>
      }      
    }
    else
    {
      reqAccSteps = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
    }
    devicePrm[deviceId].endAccPos = reqAccSteps;
 8002054:	79fa      	ldrb	r2, [r7, #7]
 8002056:	4918      	ldr	r1, [pc, #96]	; (80020b8 <L6474_ComputeSpeedProfile+0x178>)
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	440b      	add	r3, r1
 8002062:	3308      	adds	r3, #8
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = reqDecSteps;
 8002068:	79fa      	ldrb	r2, [r7, #7]
 800206a:	4913      	ldr	r1, [pc, #76]	; (80020b8 <L6474_ComputeSpeedProfile+0x178>)
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	440b      	add	r3, r1
 8002076:	3310      	adds	r3, #16
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	601a      	str	r2, [r3, #0]
    /* steady phase from  endAccPos to startDecPos */
    /* decelerating from startDecPos to stepsToTake*/
    devicePrm[deviceId].endAccPos = reqAccSteps;
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
	}
}
 800207c:	e016      	b.n	80020ac <L6474_ComputeSpeedProfile+0x16c>
    devicePrm[deviceId].endAccPos = reqAccSteps;
 800207e:	79fa      	ldrb	r2, [r7, #7]
 8002080:	490d      	ldr	r1, [pc, #52]	; (80020b8 <L6474_ComputeSpeedProfile+0x178>)
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	440b      	add	r3, r1
 800208c:	3308      	adds	r3, #8
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	79fa      	ldrb	r2, [r7, #7]
 800209a:	1e59      	subs	r1, r3, #1
 800209c:	4806      	ldr	r0, [pc, #24]	; (80020b8 <L6474_ComputeSpeedProfile+0x178>)
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4403      	add	r3, r0
 80020a8:	3310      	adds	r3, #16
 80020aa:	6019      	str	r1, [r3, #0]
}
 80020ac:	bf00      	nop
 80020ae:	3724      	adds	r7, #36	; 0x24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	20004c34 	.word	0x20004c34

080020bc <L6474_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t L6474_ConvertPosition(uint32_t abs_position_reg)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  int32_t operation_result;

  if (abs_position_reg & L6474_ABS_POS_SIGN_BIT_MASK) 
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00d      	beq.n	80020ea <L6474_ConvertPosition+0x2e>
  {
    /* Negative register value */
    abs_position_reg = ~abs_position_reg;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	607b      	str	r3, [r7, #4]
    abs_position_reg += 1;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3301      	adds	r3, #1
 80020d8:	607b      	str	r3, [r7, #4]

    operation_result = (int32_t) (abs_position_reg & L6474_ABS_POS_VALUE_MASK);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80020e0:	60fb      	str	r3, [r7, #12]
    operation_result = -operation_result;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	425b      	negs	r3, r3
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	e001      	b.n	80020ee <L6474_ConvertPosition+0x32>
  } 
  else 
  {
    operation_result = (int32_t) abs_position_reg;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	60fb      	str	r3, [r7, #12]
  }
  return operation_result;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <L6474_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void L6474_ErrorHandler(uint16_t error)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <L6474_ErrorHandler+0x28>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <L6474_ErrorHandler+0x1e>
  {
    (void) errorHandlerCallback(error);
 800210e:	4b05      	ldr	r3, [pc, #20]	; (8002124 <L6474_ErrorHandler+0x28>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	88fa      	ldrh	r2, [r7, #6]
 8002114:	4610      	mov	r0, r2
 8002116:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 8002118:	e000      	b.n	800211c <L6474_ErrorHandler+0x20>
    while(1)
 800211a:	e7fe      	b.n	800211a <L6474_ErrorHandler+0x1e>
}
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20004cac 	.word	0x20004cac

08002128 <L6474_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void L6474_FlagInterruptHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <L6474_FlagInterruptHandler+0x24>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <L6474_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <L6474_FlagInterruptHandler+0x28>)
 8002136:	2201      	movs	r2, #1
 8002138:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 800213a:	4b04      	ldr	r3, [pc, #16]	; (800214c <L6474_FlagInterruptHandler+0x24>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <L6474_FlagInterruptHandler+0x28>)
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
  }
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20004cb0 	.word	0x20004cb0
 8002150:	20000209 	.word	0x20000209

08002154 <L6474_SendCommand>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Command to send 
 * @retval None
 **********************************************************/
void L6474_SendCommand(uint8_t deviceId, uint8_t param)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	460a      	mov	r2, r1
 800215e:	71fb      	strb	r3, [r7, #7]
 8002160:	4613      	mov	r3, r2
 8002162:	71bb      	strb	r3, [r7, #6]
  uint32_t i;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8002164:	4b1f      	ldr	r3, [pc, #124]	; (80021e4 <L6474_SendCommand+0x90>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 8002174:	2300      	movs	r3, #0
 8002176:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8002178:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <L6474_SendCommand+0x94>)
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 800217e:	7afb      	ldrb	r3, [r7, #11]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <L6474_SendCommand+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8002184:	f001 fb92 	bl	80038ac <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8002188:	2300      	movs	r3, #0
 800218a:	72fb      	strb	r3, [r7, #11]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	e008      	b.n	80021a4 <L6474_SendCommand+0x50>
    {
      spiTxBursts[3][i] = L6474_NOP;     
 8002192:	4a16      	ldr	r2, [pc, #88]	; (80021ec <L6474_SendCommand+0x98>)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	3309      	adds	r3, #9
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3301      	adds	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <L6474_SendCommand+0x90>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d3ef      	bcc.n	8002192 <L6474_SendCommand+0x3e>
    }
    spiTxBursts[3][spiIndex] = param;
 80021b2:	7abb      	ldrb	r3, [r7, #10]
 80021b4:	4a0d      	ldr	r2, [pc, #52]	; (80021ec <L6474_SendCommand+0x98>)
 80021b6:	4413      	add	r3, r2
 80021b8:	79ba      	ldrb	r2, [r7, #6]
 80021ba:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80021bc:	f001 fb6d 	bl	800389a <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80021c0:	2301      	movs	r3, #1
 80021c2:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <L6474_SendCommand+0x94>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1d4      	bne.n	8002178 <L6474_SendCommand+0x24>

  L6474_WriteBytes(&spiTxBursts[3][0], &spiRxBursts[3][0]); 
 80021ce:	4908      	ldr	r1, [pc, #32]	; (80021f0 <L6474_SendCommand+0x9c>)
 80021d0:	4808      	ldr	r0, [pc, #32]	; (80021f4 <L6474_SendCommand+0xa0>)
 80021d2:	f000 fe61 	bl	8002e98 <L6474_WriteBytes>
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 80021d6:	f001 fb69 	bl	80038ac <L6474_Board_EnableIrq>
}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200001ec 	.word	0x200001ec
 80021e8:	20000208 	.word	0x20000208
 80021ec:	200001f0 	.word	0x200001f0
 80021f0:	20000205 	.word	0x20000205
 80021f4:	200001f9 	.word	0x200001f9

080021f8 <L6474_SetDeviceParamsToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	6039      	str	r1, [r7, #0]
 8002202:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = pInitPrm->acceleration_step_s2;
 8002204:	79fa      	ldrb	r2, [r7, #7]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	8818      	ldrh	r0, [r3, #0]
 800220a:	494c      	ldr	r1, [pc, #304]	; (800233c <L6474_SetDeviceParamsToGivenValues+0x144>)
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	440b      	add	r3, r1
 8002216:	3318      	adds	r3, #24
 8002218:	4602      	mov	r2, r0
 800221a:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = pInitPrm->deceleration_step_s2;
 800221c:	79fa      	ldrb	r2, [r7, #7]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	8858      	ldrh	r0, [r3, #2]
 8002222:	4946      	ldr	r1, [pc, #280]	; (800233c <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	440b      	add	r3, r1
 800222e:	331a      	adds	r3, #26
 8002230:	4602      	mov	r2, r0
 8002232:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = pInitPrm->maximum_speed_step_s;
 8002234:	79fa      	ldrb	r2, [r7, #7]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	8898      	ldrh	r0, [r3, #4]
 800223a:	4940      	ldr	r1, [pc, #256]	; (800233c <L6474_SetDeviceParamsToGivenValues+0x144>)
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	331c      	adds	r3, #28
 8002248:	4602      	mov	r2, r0
 800224a:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = pInitPrm->minimum_speed_step_s;
 800224c:	79fa      	ldrb	r2, [r7, #7]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	88d8      	ldrh	r0, [r3, #6]
 8002252:	493a      	ldr	r1, [pc, #232]	; (800233c <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	440b      	add	r3, r1
 800225e:	331e      	adds	r3, #30
 8002260:	4602      	mov	r2, r0
 8002262:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 8002264:	79fa      	ldrb	r2, [r7, #7]
 8002266:	4935      	ldr	r1, [pc, #212]	; (800233c <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	440b      	add	r3, r1
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 8002276:	79fa      	ldrb	r2, [r7, #7]
 8002278:	4930      	ldr	r1, [pc, #192]	; (800233c <L6474_SetDeviceParamsToGivenValues+0x144>)
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	440b      	add	r3, r1
 8002284:	3304      	adds	r3, #4
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 800228a:	79fa      	ldrb	r2, [r7, #7]
 800228c:	492b      	ldr	r1, [pc, #172]	; (800233c <L6474_SetDeviceParamsToGivenValues+0x144>)
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	440b      	add	r3, r1
 8002298:	3308      	adds	r3, #8
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 800229e:	79fa      	ldrb	r2, [r7, #7]
 80022a0:	4926      	ldr	r1, [pc, #152]	; (800233c <L6474_SetDeviceParamsToGivenValues+0x144>)
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	440b      	add	r3, r1
 80022ac:	330c      	adds	r3, #12
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 80022b2:	79fa      	ldrb	r2, [r7, #7]
 80022b4:	4921      	ldr	r1, [pc, #132]	; (800233c <L6474_SetDeviceParamsToGivenValues+0x144>)
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	440b      	add	r3, r1
 80022c0:	3310      	adds	r3, #16
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 80022c6:	79fa      	ldrb	r2, [r7, #7]
 80022c8:	491c      	ldr	r1, [pc, #112]	; (800233c <L6474_SetDeviceParamsToGivenValues+0x144>)
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	440b      	add	r3, r1
 80022d4:	3314      	adds	r3, #20
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 80022da:	79fa      	ldrb	r2, [r7, #7]
 80022dc:	4917      	ldr	r1, [pc, #92]	; (800233c <L6474_SetDeviceParamsToGivenValues+0x144>)
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	440b      	add	r3, r1
 80022e8:	3320      	adds	r3, #32
 80022ea:	2200      	movs	r2, #0
 80022ec:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 80022ee:	79fa      	ldrb	r2, [r7, #7]
 80022f0:	4912      	ldr	r1, [pc, #72]	; (800233c <L6474_SetDeviceParamsToGivenValues+0x144>)
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	440b      	add	r3, r1
 80022fc:	3322      	adds	r3, #34	; 0x22
 80022fe:	2203      	movs	r2, #3
 8002300:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 8002302:	79fa      	ldrb	r2, [r7, #7]
 8002304:	490d      	ldr	r1, [pc, #52]	; (800233c <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	440b      	add	r3, r1
 8002310:	3323      	adds	r3, #35	; 0x23
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;  
 8002316:	79fa      	ldrb	r2, [r7, #7]
 8002318:	4908      	ldr	r1, [pc, #32]	; (800233c <L6474_SetDeviceParamsToGivenValues+0x144>)
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	440b      	add	r3, r1
 8002324:	3324      	adds	r3, #36	; 0x24
 8002326:	2208      	movs	r2, #8
 8002328:	701a      	strb	r2, [r3, #0]
 
  L6474_SetRegisterToGivenValues(deviceId, pInitPrm);
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	6839      	ldr	r1, [r7, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f8a2 	bl	8002478 <L6474_SetRegisterToGivenValues>
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20004c34 	.word	0x20004c34

08002340 <L6474_SetDeviceParamsToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToPredefinedValues(uint8_t deviceId)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = L6474_CONF_PARAM_ACC_DEVICE_0;
 800234a:	79fa      	ldrb	r2, [r7, #7]
 800234c:	4949      	ldr	r1, [pc, #292]	; (8002474 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	440b      	add	r3, r1
 8002358:	3318      	adds	r3, #24
 800235a:	22a0      	movs	r2, #160	; 0xa0
 800235c:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = L6474_CONF_PARAM_DEC_DEVICE_0;
 800235e:	79fa      	ldrb	r2, [r7, #7]
 8002360:	4944      	ldr	r1, [pc, #272]	; (8002474 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	440b      	add	r3, r1
 800236c:	331a      	adds	r3, #26
 800236e:	22a0      	movs	r2, #160	; 0xa0
 8002370:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = L6474_CONF_PARAM_MAX_SPEED_DEVICE_0;
 8002372:	79fa      	ldrb	r2, [r7, #7]
 8002374:	493f      	ldr	r1, [pc, #252]	; (8002474 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	440b      	add	r3, r1
 8002380:	331c      	adds	r3, #28
 8002382:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002386:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = L6474_CONF_PARAM_MIN_SPEED_DEVICE_0;
 8002388:	79fa      	ldrb	r2, [r7, #7]
 800238a:	493a      	ldr	r1, [pc, #232]	; (8002474 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	440b      	add	r3, r1
 8002396:	331e      	adds	r3, #30
 8002398:	f44f 7248 	mov.w	r2, #800	; 0x320
 800239c:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 800239e:	79fa      	ldrb	r2, [r7, #7]
 80023a0:	4934      	ldr	r1, [pc, #208]	; (8002474 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	440b      	add	r3, r1
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 80023b0:	79fa      	ldrb	r2, [r7, #7]
 80023b2:	4930      	ldr	r1, [pc, #192]	; (8002474 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	440b      	add	r3, r1
 80023be:	3304      	adds	r3, #4
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 80023c4:	79fa      	ldrb	r2, [r7, #7]
 80023c6:	492b      	ldr	r1, [pc, #172]	; (8002474 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	440b      	add	r3, r1
 80023d2:	3308      	adds	r3, #8
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 80023d8:	79fa      	ldrb	r2, [r7, #7]
 80023da:	4926      	ldr	r1, [pc, #152]	; (8002474 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	440b      	add	r3, r1
 80023e6:	330c      	adds	r3, #12
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 80023ec:	79fa      	ldrb	r2, [r7, #7]
 80023ee:	4921      	ldr	r1, [pc, #132]	; (8002474 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	440b      	add	r3, r1
 80023fa:	3310      	adds	r3, #16
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 8002400:	79fa      	ldrb	r2, [r7, #7]
 8002402:	491c      	ldr	r1, [pc, #112]	; (8002474 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	440b      	add	r3, r1
 800240e:	3314      	adds	r3, #20
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8002414:	79fa      	ldrb	r2, [r7, #7]
 8002416:	4917      	ldr	r1, [pc, #92]	; (8002474 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	440b      	add	r3, r1
 8002422:	3320      	adds	r3, #32
 8002424:	2200      	movs	r2, #0
 8002426:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8002428:	79fa      	ldrb	r2, [r7, #7]
 800242a:	4912      	ldr	r1, [pc, #72]	; (8002474 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	440b      	add	r3, r1
 8002436:	3322      	adds	r3, #34	; 0x22
 8002438:	2203      	movs	r2, #3
 800243a:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 800243c:	79fa      	ldrb	r2, [r7, #7]
 800243e:	490d      	ldr	r1, [pc, #52]	; (8002474 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	440b      	add	r3, r1
 800244a:	3323      	adds	r3, #35	; 0x23
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;
 8002450:	79fa      	ldrb	r2, [r7, #7]
 8002452:	4908      	ldr	r1, [pc, #32]	; (8002474 <L6474_SetDeviceParamsToPredefinedValues+0x134>)
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	440b      	add	r3, r1
 800245e:	3324      	adds	r3, #36	; 0x24
 8002460:	2208      	movs	r2, #8
 8002462:	701a      	strb	r2, [r3, #0]
  
  L6474_SetRegisterToPredefinedValues(deviceId);
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f882 	bl	8002570 <L6474_SetRegisterToPredefinedValues>

}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20004c34 	.word	0x20004c34

08002478 <L6474_SetRegisterToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetRegisterToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	6039      	str	r1, [r7, #0]
 8002482:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	2200      	movs	r2, #0
 8002488:	2101      	movs	r1, #1
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe fd6e 	bl	8000f6c <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	2200      	movs	r2, #0
 8002494:	2102      	movs	r1, #2
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fd68 	bl	8000f6c <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	2200      	movs	r2, #0
 80024a0:	2103      	movs	r1, #3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe fd62 	bl	8000f6c <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  L6474_SetAnalogValue(deviceId,
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	eeb0 0a67 	vmov.f32	s0, s15
 80024b4:	2109      	movs	r1, #9
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fa62 	bl	8001980 <L6474_SetAnalogValue>
                       L6474_TVAL,
                       pInitPrm->torque_regulation_current_mA);
  L6474_CmdSetParam(deviceId,
                    L6474_T_FAST,
                    (uint8_t) pInitPrm->maximum_fast_decay_time |
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	7d5a      	ldrb	r2, [r3, #21]
                    (uint8_t) pInitPrm->fall_time);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	7d1b      	ldrb	r3, [r3, #20]
  L6474_CmdSetParam(deviceId,
 80024c4:	4313      	orrs	r3, r2
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	210e      	movs	r1, #14
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fd4c 	bl	8000f6c <L6474_CmdSetParam>
  L6474_SetAnalogValue(deviceId,
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	eeb0 0a67 	vmov.f32	s0, s15
 80024e0:	210f      	movs	r1, #15
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fa4c 	bl	8001980 <L6474_SetAnalogValue>
                       L6474_TON_MIN,
                       pInitPrm->minimum_ON_time_us);
  L6474_SetAnalogValue(deviceId,
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	edd3 7a07 	vldr	s15, [r3, #28]
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	eeb0 0a67 	vmov.f32	s0, s15
 80024f4:	2110      	movs	r1, #16
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fa42 	bl	8001980 <L6474_SetAnalogValue>
                       L6474_TOFF_MIN,
                       pInitPrm->minimum_OFF_time_us);
  L6474_SetAnalogValue(deviceId,
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	eeb0 0a67 	vmov.f32	s0, s15
 8002508:	2113      	movs	r1, #19
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fa38 	bl	8001980 <L6474_SetAnalogValue>
                       L6474_OCD_TH,
                       pInitPrm->overcurrent_threshold);
  L6474_CmdSetParam(deviceId,
                  L6474_STEP_MODE,
                  (uint8_t) pInitPrm->step_selection |
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	7c9a      	ldrb	r2, [r3, #18]
                  (uint8_t) pInitPrm->sync_selection);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	7cdb      	ldrb	r3, [r3, #19]
  L6474_CmdSetParam(deviceId,
 8002518:	4313      	orrs	r3, r2
 800251a:	b2db      	uxtb	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	2116      	movs	r1, #22
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe fd22 	bl	8000f6c <L6474_CmdSetParam>
  L6474_CmdSetParam(deviceId,
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	2117      	movs	r1, #23
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fd1b 	bl	8000f6c <L6474_CmdSetParam>
                    L6474_ALARM_EN,
                    pInitPrm->alarm);
  L6474_CmdSetParam(deviceId,
                    L6474_CONFIG,
                    (uint16_t) pInitPrm->clock |
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
                    (uint16_t) pInitPrm->torque_regulation_method |
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	7c5b      	ldrb	r3, [r3, #17]
 8002540:	4313      	orrs	r3, r2
 8002542:	b2da      	uxtb	r2, r3
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	7c1b      	ldrb	r3, [r3, #16]
                    (uint16_t) pInitPrm->torque_regulation_method |
 8002548:	4313      	orrs	r3, r2
 800254a:	b2db      	uxtb	r3, r3
 800254c:	461a      	mov	r2, r3
                    (uint16_t) pInitPrm->slew_rate |
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8002552:	4313      	orrs	r3, r2
                    (uint16_t) pInitPrm->target_swicthing_period);
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	8c12      	ldrh	r2, [r2, #32]
                    (uint16_t) pInitPrm->slew_rate |
 8002558:	4313      	orrs	r3, r2
  L6474_CmdSetParam(deviceId,
 800255a:	461a      	mov	r2, r3
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	2118      	movs	r1, #24
 8002560:	4618      	mov	r0, r3
 8002562:	f7fe fd03 	bl	8000f6c <L6474_CmdSetParam>
  
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <L6474_SetRegisterToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetRegisterToPredefinedValues(uint8_t deviceId)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	2200      	movs	r2, #0
 800257e:	2101      	movs	r1, #1
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fcf3 	bl	8000f6c <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	2200      	movs	r2, #0
 800258a:	2102      	movs	r1, #2
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe fced 	bl	8000f6c <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	2200      	movs	r2, #0
 8002596:	2103      	movs	r1, #3
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe fce7 	bl	8000f6c <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  switch (deviceId)
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	f000 8094 	beq.w	80026ce <L6474_SetRegisterToPredefinedValues+0x15e>
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	f300 80d7 	bgt.w	800275a <L6474_SetRegisterToPredefinedValues+0x1ea>
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <L6474_SetRegisterToPredefinedValues+0x46>
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d046      	beq.n	8002642 <L6474_SetRegisterToPredefinedValues+0xd2>
#endif         
      break;
#endif      
    default: ;
  }
}
 80025b4:	e0d1      	b.n	800275a <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_0));
 80025b6:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8002764 <L6474_SetRegisterToPredefinedValues+0x1f4>
 80025ba:	f000 fc2b 	bl	8002e14 <L6474_Tval_Current_to_Par>
 80025be:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80025c0:	461a      	mov	r2, r3
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	2109      	movs	r1, #9
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fcd0 	bl	8000f6c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	2235      	movs	r2, #53	; 0x35
 80025d0:	210e      	movs	r1, #14
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fcca 	bl	8000f6c <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_0)
 80025d8:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80025dc:	f000 fc3e 	bl	8002e5c <L6474_Tmin_Time_to_Par>
 80025e0:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80025e2:	461a      	mov	r2, r3
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	210f      	movs	r1, #15
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fcbf 	bl	8000f6c <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_0));
 80025ee:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 80025f2:	f000 fc33 	bl	8002e5c <L6474_Tmin_Time_to_Par>
 80025f6:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80025f8:	461a      	mov	r2, r3
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	2110      	movs	r1, #16
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fcb4 	bl	8000f6c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	2201      	movs	r2, #1
 8002608:	2113      	movs	r1, #19
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fcae 	bl	8000f6c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	228c      	movs	r2, #140	; 0x8c
 8002614:	2116      	movs	r1, #22
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fca8 	bl	8000f6c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	22cf      	movs	r2, #207	; 0xcf
 8002620:	2117      	movs	r1, #23
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe fca2 	bl	8000f6c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 800262e:	2118      	movs	r1, #24
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe fc9b 	bl	8000f6c <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_0);
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fbec 	bl	8001e18 <L6474_SetStopMode>
      break;
 8002640:	e08b      	b.n	800275a <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_1));
 8002642:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8002764 <L6474_SetRegisterToPredefinedValues+0x1f4>
 8002646:	f000 fbe5 	bl	8002e14 <L6474_Tval_Current_to_Par>
 800264a:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800264c:	461a      	mov	r2, r3
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	2109      	movs	r1, #9
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fc8a 	bl	8000f6c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	2235      	movs	r2, #53	; 0x35
 800265c:	210e      	movs	r1, #14
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fc84 	bl	8000f6c <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_1));
 8002664:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002668:	f000 fbf8 	bl	8002e5c <L6474_Tmin_Time_to_Par>
 800266c:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800266e:	461a      	mov	r2, r3
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	210f      	movs	r1, #15
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fc79 	bl	8000f6c <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_1));
 800267a:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 800267e:	f000 fbed 	bl	8002e5c <L6474_Tmin_Time_to_Par>
 8002682:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002684:	461a      	mov	r2, r3
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	2110      	movs	r1, #16
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fc6e 	bl	8000f6c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	2201      	movs	r2, #1
 8002694:	2113      	movs	r1, #19
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fc68 	bl	8000f6c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	228c      	movs	r2, #140	; 0x8c
 80026a0:	2116      	movs	r1, #22
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fc62 	bl	8000f6c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	22cf      	movs	r2, #207	; 0xcf
 80026ac:	2117      	movs	r1, #23
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fc5c 	bl	8000f6c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 80026ba:	2118      	movs	r1, #24
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe fc55 	bl	8000f6c <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_1);
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fba6 	bl	8001e18 <L6474_SetStopMode>
      break;
 80026cc:	e045      	b.n	800275a <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_2));
 80026ce:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8002764 <L6474_SetRegisterToPredefinedValues+0x1f4>
 80026d2:	f000 fb9f 	bl	8002e14 <L6474_Tval_Current_to_Par>
 80026d6:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80026d8:	461a      	mov	r2, r3
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	2109      	movs	r1, #9
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe fc44 	bl	8000f6c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	2235      	movs	r2, #53	; 0x35
 80026e8:	210e      	movs	r1, #14
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe fc3e 	bl	8000f6c <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_2));
 80026f0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80026f4:	f000 fbb2 	bl	8002e5c <L6474_Tmin_Time_to_Par>
 80026f8:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80026fa:	461a      	mov	r2, r3
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	210f      	movs	r1, #15
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe fc33 	bl	8000f6c <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_2));
 8002706:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 800270a:	f000 fba7 	bl	8002e5c <L6474_Tmin_Time_to_Par>
 800270e:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002710:	461a      	mov	r2, r3
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	2110      	movs	r1, #16
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fc28 	bl	8000f6c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	2201      	movs	r2, #1
 8002720:	2113      	movs	r1, #19
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fc22 	bl	8000f6c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	228c      	movs	r2, #140	; 0x8c
 800272c:	2116      	movs	r1, #22
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fc1c 	bl	8000f6c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	22cf      	movs	r2, #207	; 0xcf
 8002738:	2117      	movs	r1, #23
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe fc16 	bl	8000f6c <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002746:	2118      	movs	r1, #24
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe fc0f 	bl	8000f6c <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_2);
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	2100      	movs	r1, #0
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fb60 	bl	8001e18 <L6474_SetStopMode>
      break;
 8002758:	bf00      	nop
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	437a0000 	.word	0x437a0000

08002768 <L6474_StartMovement>:
 * and enable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_StartMovement(uint8_t deviceId)  
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
  /* Enable L6474 powerstage */
  L6474_CmdEnable(deviceId);
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe fa65 	bl	8000c44 <L6474_CmdEnable>
  if (devicePrm[deviceId].endAccPos != 0)
 800277a:	79fa      	ldrb	r2, [r7, #7]
 800277c:	4922      	ldr	r1, [pc, #136]	; (8002808 <L6474_StartMovement+0xa0>)
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	440b      	add	r3, r1
 8002788:	3308      	adds	r3, #8
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <L6474_StartMovement+0x3e>
  {
    devicePrm[deviceId].motionState = ACCELERATING;
 8002790:	79fa      	ldrb	r2, [r7, #7]
 8002792:	491d      	ldr	r1, [pc, #116]	; (8002808 <L6474_StartMovement+0xa0>)
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	440b      	add	r3, r1
 800279e:	3324      	adds	r3, #36	; 0x24
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	e009      	b.n	80027ba <L6474_StartMovement+0x52>
  }
  else
  {
    devicePrm[deviceId].motionState = DECELERATING;    
 80027a6:	79fa      	ldrb	r2, [r7, #7]
 80027a8:	4917      	ldr	r1, [pc, #92]	; (8002808 <L6474_StartMovement+0xa0>)
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	440b      	add	r3, r1
 80027b4:	3324      	adds	r3, #36	; 0x24
 80027b6:	2202      	movs	r2, #2
 80027b8:	701a      	strb	r2, [r3, #0]
  }
  devicePrm[deviceId].accu = 0;
 80027ba:	79fa      	ldrb	r2, [r7, #7]
 80027bc:	4912      	ldr	r1, [pc, #72]	; (8002808 <L6474_StartMovement+0xa0>)
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	440b      	add	r3, r1
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 80027cc:	79fa      	ldrb	r2, [r7, #7]
 80027ce:	490e      	ldr	r1, [pc, #56]	; (8002808 <L6474_StartMovement+0xa0>)
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	440b      	add	r3, r1
 80027da:	330c      	adds	r3, #12
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
  L6474_ApplySpeed(deviceId, devicePrm[deviceId].minSpeed);
 80027e0:	79fa      	ldrb	r2, [r7, #7]
 80027e2:	4909      	ldr	r1, [pc, #36]	; (8002808 <L6474_StartMovement+0xa0>)
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	440b      	add	r3, r1
 80027ee:	331e      	adds	r3, #30
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fb61 	bl	8001ec0 <L6474_ApplySpeed>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20004c34 	.word	0x20004c34

0800280c <L6474_StepClockHandler>:
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void L6474_StepClockHandler(uint8_t deviceId)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08c      	sub	sp, #48	; 0x30
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
  /* Set isr flag */
  isrFlag = TRUE;
 8002816:	4b96      	ldr	r3, [pc, #600]	; (8002a70 <L6474_StepClockHandler+0x264>)
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]
  
  /* Incrementation of the relative position */
  devicePrm[deviceId].relativePos++;
 800281c:	79fa      	ldrb	r2, [r7, #7]
 800281e:	4995      	ldr	r1, [pc, #596]	; (8002a74 <L6474_StepClockHandler+0x268>)
 8002820:	4613      	mov	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	440b      	add	r3, r1
 800282a:	330c      	adds	r3, #12
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	1c59      	adds	r1, r3, #1
 8002830:	4890      	ldr	r0, [pc, #576]	; (8002a74 <L6474_StepClockHandler+0x268>)
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4403      	add	r3, r0
 800283c:	330c      	adds	r3, #12
 800283e:	6019      	str	r1, [r3, #0]

  switch (devicePrm[deviceId].motionState) 
 8002840:	79fa      	ldrb	r2, [r7, #7]
 8002842:	498c      	ldr	r1, [pc, #560]	; (8002a74 <L6474_StepClockHandler+0x268>)
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	3324      	adds	r3, #36	; 0x24
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b03      	cmp	r3, #3
 8002856:	f000 810f 	beq.w	8002a78 <L6474_StepClockHandler+0x26c>
 800285a:	2b03      	cmp	r3, #3
 800285c:	f300 82a4 	bgt.w	8002da8 <L6474_StepClockHandler+0x59c>
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <L6474_StepClockHandler+0x60>
 8002864:	2b02      	cmp	r3, #2
 8002866:	f000 819b 	beq.w	8002ba0 <L6474_StepClockHandler+0x394>
      }
      break;
    }
    default: 
    {
      break;
 800286a:	e29d      	b.n	8002da8 <L6474_StepClockHandler+0x59c>
        uint32_t relPos = devicePrm[deviceId].relativePos;
 800286c:	79fa      	ldrb	r2, [r7, #7]
 800286e:	4981      	ldr	r1, [pc, #516]	; (8002a74 <L6474_StepClockHandler+0x268>)
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	440b      	add	r3, r1
 800287a:	330c      	adds	r3, #12
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	617b      	str	r3, [r7, #20]
        uint32_t endAccPos = devicePrm[deviceId].endAccPos;
 8002880:	79fa      	ldrb	r2, [r7, #7]
 8002882:	497c      	ldr	r1, [pc, #496]	; (8002a74 <L6474_StepClockHandler+0x268>)
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	440b      	add	r3, r1
 800288e:	3308      	adds	r3, #8
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	613b      	str	r3, [r7, #16]
        uint16_t speed = devicePrm[deviceId].speed;
 8002894:	79fa      	ldrb	r2, [r7, #7]
 8002896:	4977      	ldr	r1, [pc, #476]	; (8002a74 <L6474_StepClockHandler+0x268>)
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	440b      	add	r3, r1
 80028a2:	3320      	adds	r3, #32
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
        uint32_t acc = ((uint32_t)devicePrm[deviceId].acceleration << 16);
 80028a8:	79fa      	ldrb	r2, [r7, #7]
 80028aa:	4972      	ldr	r1, [pc, #456]	; (8002a74 <L6474_StepClockHandler+0x268>)
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	440b      	add	r3, r1
 80028b6:	3318      	adds	r3, #24
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	041b      	lsls	r3, r3, #16
 80028be:	60fb      	str	r3, [r7, #12]
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 80028c0:	79fa      	ldrb	r2, [r7, #7]
 80028c2:	496c      	ldr	r1, [pc, #432]	; (8002a74 <L6474_StepClockHandler+0x268>)
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	440b      	add	r3, r1
 80028ce:	3322      	adds	r3, #34	; 0x22
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d017      	beq.n	8002908 <L6474_StepClockHandler+0xfc>
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 80028d8:	79fa      	ldrb	r2, [r7, #7]
 80028da:	4966      	ldr	r1, [pc, #408]	; (8002a74 <L6474_StepClockHandler+0x268>)
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	440b      	add	r3, r1
 80028e6:	3322      	adds	r3, #34	; 0x22
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	b2db      	uxtb	r3, r3
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01f      	beq.n	8002930 <L6474_StepClockHandler+0x124>
             (relPos == devicePrm[deviceId].startDecPos)))
 80028f0:	79fa      	ldrb	r2, [r7, #7]
 80028f2:	4960      	ldr	r1, [pc, #384]	; (8002a74 <L6474_StepClockHandler+0x268>)
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	440b      	add	r3, r1
 80028fe:	3310      	adds	r3, #16
 8002900:	681b      	ldr	r3, [r3, #0]
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	429a      	cmp	r2, r3
 8002906:	d113      	bne.n	8002930 <L6474_StepClockHandler+0x124>
          devicePrm[deviceId].motionState = DECELERATING;
 8002908:	79fa      	ldrb	r2, [r7, #7]
 800290a:	495a      	ldr	r1, [pc, #360]	; (8002a74 <L6474_StepClockHandler+0x268>)
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	440b      	add	r3, r1
 8002916:	3324      	adds	r3, #36	; 0x24
 8002918:	2202      	movs	r2, #2
 800291a:	701a      	strb	r2, [r3, #0]
          devicePrm[deviceId].accu = 0;
 800291c:	79fa      	ldrb	r2, [r7, #7]
 800291e:	4955      	ldr	r1, [pc, #340]	; (8002a74 <L6474_StepClockHandler+0x268>)
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	440b      	add	r3, r1
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	e09e      	b.n	8002a6e <L6474_StepClockHandler+0x262>
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002930:	79fa      	ldrb	r2, [r7, #7]
 8002932:	4950      	ldr	r1, [pc, #320]	; (8002a74 <L6474_StepClockHandler+0x268>)
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	440b      	add	r3, r1
 800293e:	331c      	adds	r3, #28
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002946:	429a      	cmp	r2, r3
 8002948:	d20f      	bcs.n	800296a <L6474_StepClockHandler+0x15e>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 800294a:	79fa      	ldrb	r2, [r7, #7]
 800294c:	4949      	ldr	r1, [pc, #292]	; (8002a74 <L6474_StepClockHandler+0x268>)
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	440b      	add	r3, r1
 8002958:	3322      	adds	r3, #34	; 0x22
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	b2db      	uxtb	r3, r3
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00e      	beq.n	8002980 <L6474_StepClockHandler+0x174>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	429a      	cmp	r2, r3
 8002968:	d10a      	bne.n	8002980 <L6474_StepClockHandler+0x174>
          devicePrm[deviceId].motionState = STEADY;
 800296a:	79fa      	ldrb	r2, [r7, #7]
 800296c:	4941      	ldr	r1, [pc, #260]	; (8002a74 <L6474_StepClockHandler+0x268>)
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	440b      	add	r3, r1
 8002978:	3324      	adds	r3, #36	; 0x24
 800297a:	2203      	movs	r2, #3
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	e076      	b.n	8002a6e <L6474_StepClockHandler+0x262>
          bool speedUpdated = FALSE;
 8002980:	2300      	movs	r3, #0
 8002982:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          if (speed == 0) speed =1;
 8002986:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <L6474_StepClockHandler+0x184>
 800298c:	2301      	movs	r3, #1
 800298e:	85fb      	strh	r3, [r7, #46]	; 0x2e
          devicePrm[deviceId].accu += acc / speed;
 8002990:	79fa      	ldrb	r2, [r7, #7]
 8002992:	4938      	ldr	r1, [pc, #224]	; (8002a74 <L6474_StepClockHandler+0x268>)
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	440b      	add	r3, r1
 800299e:	6819      	ldr	r1, [r3, #0]
 80029a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	79fa      	ldrb	r2, [r7, #7]
 80029aa:	4419      	add	r1, r3
 80029ac:	4831      	ldr	r0, [pc, #196]	; (8002a74 <L6474_StepClockHandler+0x268>)
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4403      	add	r3, r0
 80029b8:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 80029ba:	e017      	b.n	80029ec <L6474_StepClockHandler+0x1e0>
            devicePrm[deviceId].accu -= (0X10000L);
 80029bc:	79fa      	ldrb	r2, [r7, #7]
 80029be:	492d      	ldr	r1, [pc, #180]	; (8002a74 <L6474_StepClockHandler+0x268>)
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	440b      	add	r3, r1
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	79fa      	ldrb	r2, [r7, #7]
 80029ce:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 80029d2:	4828      	ldr	r0, [pc, #160]	; (8002a74 <L6474_StepClockHandler+0x268>)
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4403      	add	r3, r0
 80029de:	6019      	str	r1, [r3, #0]
            speed +=1;
 80029e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029e2:	3301      	adds	r3, #1
 80029e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
            speedUpdated = TRUE;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          while (devicePrm[deviceId].accu >= (0X10000L))
 80029ec:	79fa      	ldrb	r2, [r7, #7]
 80029ee:	4921      	ldr	r1, [pc, #132]	; (8002a74 <L6474_StepClockHandler+0x268>)
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	440b      	add	r3, r1
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a00:	d2dc      	bcs.n	80029bc <L6474_StepClockHandler+0x1b0>
          if (speedUpdated)
 8002a02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 81d0 	beq.w	8002dac <L6474_StepClockHandler+0x5a0>
            if (speed > devicePrm[deviceId].maxSpeed)
 8002a0c:	79fa      	ldrb	r2, [r7, #7]
 8002a0e:	4919      	ldr	r1, [pc, #100]	; (8002a74 <L6474_StepClockHandler+0x268>)
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	440b      	add	r3, r1
 8002a1a:	331c      	adds	r3, #28
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d909      	bls.n	8002a3a <L6474_StepClockHandler+0x22e>
              speed = devicePrm[deviceId].maxSpeed;
 8002a26:	79fa      	ldrb	r2, [r7, #7]
 8002a28:	4912      	ldr	r1, [pc, #72]	; (8002a74 <L6474_StepClockHandler+0x268>)
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	440b      	add	r3, r1
 8002a34:	331c      	adds	r3, #28
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	85fb      	strh	r3, [r7, #46]	; 0x2e
            devicePrm[deviceId].speed = speed;
 8002a3a:	79fa      	ldrb	r2, [r7, #7]
 8002a3c:	490d      	ldr	r1, [pc, #52]	; (8002a74 <L6474_StepClockHandler+0x268>)
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	440b      	add	r3, r1
 8002a48:	3320      	adds	r3, #32
 8002a4a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002a4c:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 8002a4e:	79fa      	ldrb	r2, [r7, #7]
 8002a50:	4908      	ldr	r1, [pc, #32]	; (8002a74 <L6474_StepClockHandler+0x268>)
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3320      	adds	r3, #32
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fa2a 	bl	8001ec0 <L6474_ApplySpeed>
        break;
 8002a6c:	e19e      	b.n	8002dac <L6474_StepClockHandler+0x5a0>
 8002a6e:	e19d      	b.n	8002dac <L6474_StepClockHandler+0x5a0>
 8002a70:	20000209 	.word	0x20000209
 8002a74:	20004c34 	.word	0x20004c34
      uint16_t maxSpeed = devicePrm[deviceId].maxSpeed;
 8002a78:	79fa      	ldrb	r2, [r7, #7]
 8002a7a:	499c      	ldr	r1, [pc, #624]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	440b      	add	r3, r1
 8002a86:	331c      	adds	r3, #28
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	84fb      	strh	r3, [r7, #38]	; 0x26
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8002a8c:	79fa      	ldrb	r2, [r7, #7]
 8002a8e:	4997      	ldr	r1, [pc, #604]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	330c      	adds	r3, #12
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	623b      	str	r3, [r7, #32]
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002aa0:	79fa      	ldrb	r2, [r7, #7]
 8002aa2:	4992      	ldr	r1, [pc, #584]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	440b      	add	r3, r1
 8002aae:	3322      	adds	r3, #34	; 0x22
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d030      	beq.n	8002b1a <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002ab8:	79fa      	ldrb	r2, [r7, #7]
 8002aba:	498c      	ldr	r1, [pc, #560]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	440b      	add	r3, r1
 8002ac6:	3322      	adds	r3, #34	; 0x22
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	b2db      	uxtb	r3, r3
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00b      	beq.n	8002ae8 <L6474_StepClockHandler+0x2dc>
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 8002ad0:	79fa      	ldrb	r2, [r7, #7]
 8002ad2:	4986      	ldr	r1, [pc, #536]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	440b      	add	r3, r1
 8002ade:	3310      	adds	r3, #16
 8002ae0:	681b      	ldr	r3, [r3, #0]
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002ae2:	6a3a      	ldr	r2, [r7, #32]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d218      	bcs.n	8002b1a <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002ae8:	79fa      	ldrb	r2, [r7, #7]
 8002aea:	4980      	ldr	r1, [pc, #512]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	440b      	add	r3, r1
 8002af6:	3322      	adds	r3, #34	; 0x22
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	b2db      	uxtb	r3, r3
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d120      	bne.n	8002b42 <L6474_StepClockHandler+0x336>
            (devicePrm[deviceId].speed > maxSpeed)))
 8002b00:	79fa      	ldrb	r2, [r7, #7]
 8002b02:	497a      	ldr	r1, [pc, #488]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	440b      	add	r3, r1
 8002b0e:	3320      	adds	r3, #32
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002b14:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d213      	bcs.n	8002b42 <L6474_StepClockHandler+0x336>
        devicePrm[deviceId].motionState = DECELERATING;
 8002b1a:	79fa      	ldrb	r2, [r7, #7]
 8002b1c:	4973      	ldr	r1, [pc, #460]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	440b      	add	r3, r1
 8002b28:	3324      	adds	r3, #36	; 0x24
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 8002b2e:	79fa      	ldrb	r2, [r7, #7]
 8002b30:	496e      	ldr	r1, [pc, #440]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	440b      	add	r3, r1
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
      break;
 8002b40:	e136      	b.n	8002db0 <L6474_StepClockHandler+0x5a4>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002b42:	79fa      	ldrb	r2, [r7, #7]
 8002b44:	4969      	ldr	r1, [pc, #420]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	440b      	add	r3, r1
 8002b50:	3322      	adds	r3, #34	; 0x22
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 812a 	bne.w	8002db0 <L6474_StepClockHandler+0x5a4>
               (devicePrm[deviceId].speed < maxSpeed))
 8002b5c:	79fa      	ldrb	r2, [r7, #7]
 8002b5e:	4963      	ldr	r1, [pc, #396]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	3320      	adds	r3, #32
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002b70:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002b72:	429a      	cmp	r2, r3
 8002b74:	f240 811c 	bls.w	8002db0 <L6474_StepClockHandler+0x5a4>
        devicePrm[deviceId].motionState = ACCELERATING;
 8002b78:	79fa      	ldrb	r2, [r7, #7]
 8002b7a:	495c      	ldr	r1, [pc, #368]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	440b      	add	r3, r1
 8002b86:	3324      	adds	r3, #36	; 0x24
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 8002b8c:	79fa      	ldrb	r2, [r7, #7]
 8002b8e:	4957      	ldr	r1, [pc, #348]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	440b      	add	r3, r1
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
      break;
 8002b9e:	e107      	b.n	8002db0 <L6474_StepClockHandler+0x5a4>
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8002ba0:	79fa      	ldrb	r2, [r7, #7]
 8002ba2:	4952      	ldr	r1, [pc, #328]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	440b      	add	r3, r1
 8002bae:	330c      	adds	r3, #12
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	61fb      	str	r3, [r7, #28]
      uint16_t speed = devicePrm[deviceId].speed;
 8002bb4:	79fa      	ldrb	r2, [r7, #7]
 8002bb6:	494d      	ldr	r1, [pc, #308]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	3320      	adds	r3, #32
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	857b      	strh	r3, [r7, #42]	; 0x2a
      uint32_t deceleration = ((uint32_t)devicePrm[deviceId].deceleration << 16);
 8002bc8:	79fa      	ldrb	r2, [r7, #7]
 8002bca:	4948      	ldr	r1, [pc, #288]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	440b      	add	r3, r1
 8002bd6:	331a      	adds	r3, #26
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	041b      	lsls	r3, r3, #16
 8002bde:	61bb      	str	r3, [r7, #24]
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 8002be0:	79fa      	ldrb	r2, [r7, #7]
 8002be2:	4942      	ldr	r1, [pc, #264]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	440b      	add	r3, r1
 8002bee:	3322      	adds	r3, #34	; 0x22
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d10c      	bne.n	8002c12 <L6474_StepClockHandler+0x406>
 8002bf8:	79fa      	ldrb	r2, [r7, #7]
 8002bfa:	493c      	ldr	r1, [pc, #240]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	440b      	add	r3, r1
 8002c06:	331e      	adds	r3, #30
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d917      	bls.n	8002c42 <L6474_StepClockHandler+0x436>
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002c12:	79fa      	ldrb	r2, [r7, #7]
 8002c14:	4935      	ldr	r1, [pc, #212]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	440b      	add	r3, r1
 8002c20:	3322      	adds	r3, #34	; 0x22
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	b2db      	uxtb	r3, r3
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d010      	beq.n	8002c4c <L6474_StepClockHandler+0x440>
           (relativePos >= devicePrm[deviceId].stepsToTake)))
 8002c2a:	79fa      	ldrb	r2, [r7, #7]
 8002c2c:	492f      	ldr	r1, [pc, #188]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	440b      	add	r3, r1
 8002c38:	3314      	adds	r3, #20
 8002c3a:	681b      	ldr	r3, [r3, #0]
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002c3c:	69fa      	ldr	r2, [r7, #28]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d304      	bcc.n	8002c4c <L6474_StepClockHandler+0x440>
        L6474_HardStop(deviceId);
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe fcab 	bl	80015a0 <L6474_HardStop>
 8002c4a:	e0ac      	b.n	8002da6 <L6474_StepClockHandler+0x59a>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002c4c:	79fa      	ldrb	r2, [r7, #7]
 8002c4e:	4927      	ldr	r1, [pc, #156]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	440b      	add	r3, r1
 8002c5a:	3322      	adds	r3, #34	; 0x22
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d117      	bne.n	8002c94 <L6474_StepClockHandler+0x488>
               (speed <= devicePrm[deviceId].maxSpeed))
 8002c64:	79fa      	ldrb	r2, [r7, #7]
 8002c66:	4921      	ldr	r1, [pc, #132]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	440b      	add	r3, r1
 8002c72:	331c      	adds	r3, #28
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002c78:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d80a      	bhi.n	8002c94 <L6474_StepClockHandler+0x488>
        devicePrm[deviceId].motionState = STEADY;
 8002c7e:	79fa      	ldrb	r2, [r7, #7]
 8002c80:	491a      	ldr	r1, [pc, #104]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3324      	adds	r3, #36	; 0x24
 8002c8e:	2203      	movs	r2, #3
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	e088      	b.n	8002da6 <L6474_StepClockHandler+0x59a>
        if (speed > devicePrm[deviceId].minSpeed)
 8002c94:	79fa      	ldrb	r2, [r7, #7]
 8002c96:	4915      	ldr	r1, [pc, #84]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	440b      	add	r3, r1
 8002ca2:	331e      	adds	r3, #30
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002caa:	429a      	cmp	r2, r3
 8002cac:	f240 8082 	bls.w	8002db4 <L6474_StepClockHandler+0x5a8>
          bool speedUpdated = FALSE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          if (speed == 0) speed =1;
 8002cb6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <L6474_StepClockHandler+0x4b4>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	857b      	strh	r3, [r7, #42]	; 0x2a
          devicePrm[deviceId].accu += deceleration / speed;
 8002cc0:	79fa      	ldrb	r2, [r7, #7]
 8002cc2:	490a      	ldr	r1, [pc, #40]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	440b      	add	r3, r1
 8002cce:	6819      	ldr	r1, [r3, #0]
 8002cd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd8:	79fa      	ldrb	r2, [r7, #7]
 8002cda:	4419      	add	r1, r3
 8002cdc:	4803      	ldr	r0, [pc, #12]	; (8002cec <L6474_StepClockHandler+0x4e0>)
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4403      	add	r3, r0
 8002ce8:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002cea:	e01c      	b.n	8002d26 <L6474_StepClockHandler+0x51a>
 8002cec:	20004c34 	.word	0x20004c34
            devicePrm[deviceId].accu -= (0X10000L);
 8002cf0:	79fa      	ldrb	r2, [r7, #7]
 8002cf2:	4934      	ldr	r1, [pc, #208]	; (8002dc4 <L6474_StepClockHandler+0x5b8>)
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	440b      	add	r3, r1
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	79fa      	ldrb	r2, [r7, #7]
 8002d02:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 8002d06:	482f      	ldr	r0, [pc, #188]	; (8002dc4 <L6474_StepClockHandler+0x5b8>)
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4403      	add	r3, r0
 8002d12:	6019      	str	r1, [r3, #0]
            if (speed > 1)
 8002d14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d902      	bls.n	8002d20 <L6474_StepClockHandler+0x514>
              speed -=1;
 8002d1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	857b      	strh	r3, [r7, #42]	; 0x2a
            speedUpdated = TRUE;
 8002d20:	2301      	movs	r3, #1
 8002d22:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002d26:	79fa      	ldrb	r2, [r7, #7]
 8002d28:	4926      	ldr	r1, [pc, #152]	; (8002dc4 <L6474_StepClockHandler+0x5b8>)
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	440b      	add	r3, r1
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d3a:	d2d9      	bcs.n	8002cf0 <L6474_StepClockHandler+0x4e4>
          if (speedUpdated)
 8002d3c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d037      	beq.n	8002db4 <L6474_StepClockHandler+0x5a8>
            if (speed < devicePrm[deviceId].minSpeed)
 8002d44:	79fa      	ldrb	r2, [r7, #7]
 8002d46:	491f      	ldr	r1, [pc, #124]	; (8002dc4 <L6474_StepClockHandler+0x5b8>)
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	440b      	add	r3, r1
 8002d52:	331e      	adds	r3, #30
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d209      	bcs.n	8002d72 <L6474_StepClockHandler+0x566>
              speed = devicePrm[deviceId].minSpeed;
 8002d5e:	79fa      	ldrb	r2, [r7, #7]
 8002d60:	4918      	ldr	r1, [pc, #96]	; (8002dc4 <L6474_StepClockHandler+0x5b8>)
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	440b      	add	r3, r1
 8002d6c:	331e      	adds	r3, #30
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	857b      	strh	r3, [r7, #42]	; 0x2a
            devicePrm[deviceId].speed = speed;
 8002d72:	79fa      	ldrb	r2, [r7, #7]
 8002d74:	4913      	ldr	r1, [pc, #76]	; (8002dc4 <L6474_StepClockHandler+0x5b8>)
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	440b      	add	r3, r1
 8002d80:	3320      	adds	r3, #32
 8002d82:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002d84:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 8002d86:	79fa      	ldrb	r2, [r7, #7]
 8002d88:	490e      	ldr	r1, [pc, #56]	; (8002dc4 <L6474_StepClockHandler+0x5b8>)
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	440b      	add	r3, r1
 8002d94:	3320      	adds	r3, #32
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff f88e 	bl	8001ec0 <L6474_ApplySpeed>
      break;
 8002da4:	e006      	b.n	8002db4 <L6474_StepClockHandler+0x5a8>
 8002da6:	e005      	b.n	8002db4 <L6474_StepClockHandler+0x5a8>
      break;
 8002da8:	bf00      	nop
 8002daa:	e004      	b.n	8002db6 <L6474_StepClockHandler+0x5aa>
        break;
 8002dac:	bf00      	nop
 8002dae:	e002      	b.n	8002db6 <L6474_StepClockHandler+0x5aa>
      break;
 8002db0:	bf00      	nop
 8002db2:	e000      	b.n	8002db6 <L6474_StepClockHandler+0x5aa>
      break;
 8002db4:	bf00      	nop
    }
  }  
  /* Set isr flag */
  isrFlag = FALSE;
 8002db6:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <L6474_StepClockHandler+0x5bc>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
}
 8002dbc:	bf00      	nop
 8002dbe:	3730      	adds	r7, #48	; 0x30
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20004c34 	.word	0x20004c34
 8002dc8:	20000209 	.word	0x20000209

08002dcc <L6474_Ocd_Th_to_Par>:
 * @brief Converts mA in compatible values for OCD_TH register
 * @param[in] Tval
 * @retval OCD_TH values
 **********************************************************/
inline uint8_t L6474_Ocd_Th_to_Par(float Tval)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 375)*0.002666f)+0.5f));
 8002dd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dda:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002e0c <L6474_Ocd_Th_to_Par+0x40>
 8002dde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002de2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002e10 <L6474_Ocd_Th_to_Par+0x44>
 8002de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002df6:	edc7 7a00 	vstr	s15, [r7]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	b2db      	uxtb	r3, r3
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	43bb8000 	.word	0x43bb8000
 8002e10:	3b2eb80f 	.word	0x3b2eb80f

08002e14 <L6474_Tval_Current_to_Par>:
 * @brief Converts mA in compatible values for TVAL register 
 * @param[in] Tval
 * @retval TVAL values
 **********************************************************/
inline uint8_t L6474_Tval_Current_to_Par(float Tval)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 31.25f)*0.032f)+0.5f));
 8002e1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e22:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002e54 <L6474_Tval_Current_to_Par+0x40>
 8002e26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e2a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002e58 <L6474_Tval_Current_to_Par+0x44>
 8002e2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e3e:	edc7 7a00 	vstr	s15, [r7]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	b2db      	uxtb	r3, r3
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	41fa0000 	.word	0x41fa0000
 8002e58:	3d03126f 	.word	0x3d03126f

08002e5c <L6474_Tmin_Time_to_Par>:
 * for TON_MIN register
 * @param[in] Tmin
 * @retval TON_MIN values
 **********************************************************/
inline uint8_t L6474_Tmin_Time_to_Par(float Tmin)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tmin - 0.5f)*2.0f)+0.5f));
 8002e66:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e6a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e82:	edc7 7a00 	vstr	s15, [r7]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	b2db      	uxtb	r3, r3
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <L6474_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 **********************************************************/
void L6474_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  if (L6474_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <L6474_WriteBytes+0x40>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6839      	ldr	r1, [r7, #0]
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 ff3f 	bl	8003d30 <L6474_Board_SpiWriteBytes>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <L6474_WriteBytes+0x28>
  {
    L6474_ErrorHandler(L6474_ERROR_1);
 8002eb8:	f248 0001 	movw	r0, #32769	; 0x8001
 8002ebc:	f7ff f91e 	bl	80020fc <L6474_ErrorHandler>
  }
  
  if (isrFlag)
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <L6474_WriteBytes+0x44>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <L6474_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 8002eca:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <L6474_WriteBytes+0x48>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	701a      	strb	r2, [r3, #0]
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	200001ec 	.word	0x200001ec
 8002edc:	20000209 	.word	0x20000209
 8002ee0:	20000208 	.word	0x20000208

08002ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee6:	b089      	sub	sp, #36	; 0x24
 8002ee8:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002eea:	f000 ff87 	bl	8003dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002eee:	f000 f82f 	bl	8002f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ef2:	f7fd fd35 	bl	8000960 <MX_GPIO_Init>
  MX_SPI2_Init();
 8002ef6:	f000 f9c9 	bl	800328c <MX_SPI2_Init>
  MX_ADC3_Init();
 8002efa:	f7fd fbbd 	bl	8000678 <MX_ADC3_Init>
  MX_UART5_Init();
 8002efe:	f000 fbe9 	bl	80036d4 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  L6474_SetRegisterToGivenValues(0,gL6474InitParams);
 8002f02:	4e10      	ldr	r6, [pc, #64]	; (8002f44 <main+0x60>)
 8002f04:	466d      	mov	r5, sp
 8002f06:	f106 040c 	add.w	r4, r6, #12
 8002f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f12:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002f16:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f7ff faac 	bl	8002478 <L6474_SetRegisterToGivenValues>
  BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6474,1);
 8002f20:	2101      	movs	r1, #1
 8002f22:	f641 104a 	movw	r0, #6474	; 0x194a
 8002f26:	f000 f937 	bl	8003198 <BSP_MotorControl_Init>
  BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 8002f2a:	4807      	ldr	r0, [pc, #28]	; (8002f48 <main+0x64>)
 8002f2c:	f000 f8f8 	bl	8003120 <BSP_MotorControl_AttachFlagInterrupt>
  HAL_ADC_Start(&hadc3); // internal_temp measurement
 8002f30:	4806      	ldr	r0, [pc, #24]	; (8002f4c <main+0x68>)
 8002f32:	f001 fb71 	bl	8004618 <HAL_ADC_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002f36:	f008 fe69 	bl	800bc0c <osKernelInitialize>
  MX_FREERTOS_Init();
 8002f3a:	f7fd fc4b 	bl	80007d4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002f3e:	f008 fe89 	bl	800bc54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f42:	e7fe      	b.n	8002f42 <main+0x5e>
 8002f44:	2000012c 	.word	0x2000012c
 8002f48:	08003059 	.word	0x08003059
 8002f4c:	20004bb8 	.word	0x20004bb8

08002f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b09c      	sub	sp, #112	; 0x70
 8002f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f5a:	224c      	movs	r2, #76	; 0x4c
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f00b fbdc 	bl	800e71c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f64:	1d3b      	adds	r3, r7, #4
 8002f66:	2220      	movs	r2, #32
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f00b fbd6 	bl	800e71c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002f70:	2002      	movs	r0, #2
 8002f72:	f002 fcab 	bl	80058cc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f76:	2300      	movs	r3, #0
 8002f78:	603b      	str	r3, [r7, #0]
 8002f7a:	4b34      	ldr	r3, [pc, #208]	; (800304c <SystemClock_Config+0xfc>)
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	4a33      	ldr	r2, [pc, #204]	; (800304c <SystemClock_Config+0xfc>)
 8002f80:	f023 0301 	bic.w	r3, r3, #1
 8002f84:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002f86:	4b31      	ldr	r3, [pc, #196]	; (800304c <SystemClock_Config+0xfc>)
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	4b2f      	ldr	r3, [pc, #188]	; (8003050 <SystemClock_Config+0x100>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	4a2e      	ldr	r2, [pc, #184]	; (8003050 <SystemClock_Config+0x100>)
 8002f96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f9a:	6193      	str	r3, [r2, #24]
 8002f9c:	4b2c      	ldr	r3, [pc, #176]	; (8003050 <SystemClock_Config+0x100>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002fa8:	bf00      	nop
 8002faa:	4b29      	ldr	r3, [pc, #164]	; (8003050 <SystemClock_Config+0x100>)
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb6:	d1f8      	bne.n	8002faa <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002fb8:	4b26      	ldr	r3, [pc, #152]	; (8003054 <SystemClock_Config+0x104>)
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	f023 0303 	bic.w	r3, r3, #3
 8002fc0:	4a24      	ldr	r2, [pc, #144]	; (8003054 <SystemClock_Config+0x104>)
 8002fc2:	f043 0302 	orr.w	r3, r3, #2
 8002fc6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002fde:	2364      	movs	r3, #100	; 0x64
 8002fe0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002fea:	2302      	movs	r3, #2
 8002fec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002fee:	230c      	movs	r3, #12
 8002ff0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ffe:	4618      	mov	r0, r3
 8003000:	f002 fc9e 	bl	8005940 <HAL_RCC_OscConfig>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800300a:	f000 f86b 	bl	80030e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800300e:	233f      	movs	r3, #63	; 0x3f
 8003010:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003012:	2303      	movs	r3, #3
 8003014:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800301a:	2308      	movs	r3, #8
 800301c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800301e:	2340      	movs	r3, #64	; 0x40
 8003020:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003022:	2340      	movs	r3, #64	; 0x40
 8003024:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800302a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800302c:	2340      	movs	r3, #64	; 0x40
 800302e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003030:	1d3b      	adds	r3, r7, #4
 8003032:	2102      	movs	r1, #2
 8003034:	4618      	mov	r0, r3
 8003036:	f003 f8af 	bl	8006198 <HAL_RCC_ClockConfig>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8003040:	f000 f850 	bl	80030e4 <Error_Handler>
  }
}
 8003044:	bf00      	nop
 8003046:	3770      	adds	r7, #112	; 0x70
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	58000400 	.word	0x58000400
 8003050:	58024800 	.word	0x58024800
 8003054:	58024400 	.word	0x58024400

08003058 <MyFlagInterruptHandler>:

/* USER CODE BEGIN 4 */
void MyFlagInterruptHandler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
  /* Get the value of the status register via the L6474 command GET_STATUS */
  uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(0);
 800305e:	2000      	movs	r0, #0
 8003060:	f000 f8ee 	bl	8003240 <BSP_MotorControl_CmdGetStatus>
 8003064:	4603      	mov	r3, r0
 8003066:	80fb      	strh	r3, [r7, #6]
  {
    //overcurrent detection
    // Action to be customized
  }

}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <Send>:
void Send(char *obj , int16_t value){
 8003070:	b580      	push	{r7, lr}
 8003072:	b08c      	sub	sp, #48	; 0x30
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	807b      	strh	r3, [r7, #2]
	char buff [30] ;
	int len = sprintf(buff,"%s=%d" ,obj , value);
 800307c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003080:	f107 000c 	add.w	r0, r7, #12
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	490b      	ldr	r1, [pc, #44]	; (80030b4 <Send+0x44>)
 8003088:	f00b fb50 	bl	800e72c <siprintf>
 800308c:	62f8      	str	r0, [r7, #44]	; 0x2c
	HAL_UART_Transmit(&huart5, (uint8_t*)&buff, len, 100);
 800308e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003090:	b29a      	uxth	r2, r3
 8003092:	f107 010c 	add.w	r1, r7, #12
 8003096:	2364      	movs	r3, #100	; 0x64
 8003098:	4807      	ldr	r0, [pc, #28]	; (80030b8 <Send+0x48>)
 800309a:	f007 fcc5 	bl	800aa28 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, END_CMD, 3, 100);
 800309e:	2364      	movs	r3, #100	; 0x64
 80030a0:	2203      	movs	r2, #3
 80030a2:	4906      	ldr	r1, [pc, #24]	; (80030bc <Send+0x4c>)
 80030a4:	4804      	ldr	r0, [pc, #16]	; (80030b8 <Send+0x48>)
 80030a6:	f007 fcbf 	bl	800aa28 <HAL_UART_Transmit>
}
 80030aa:	bf00      	nop
 80030ac:	3730      	adds	r7, #48	; 0x30
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	0800efbc 	.word	0x0800efbc
 80030b8:	20004d88 	.word	0x20004d88
 80030bc:	20000128 	.word	0x20000128

080030c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a04      	ldr	r2, [pc, #16]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d101      	bne.n	80030d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80030d2:	f000 fecf 	bl	8003e74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40000400 	.word	0x40000400

080030e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030e8:	b672      	cpsid	i
}
 80030ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030ec:	e7fe      	b.n	80030ec <Error_Handler+0x8>

080030ee <Powerstep01_GetMotorHandle>:
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
 80030ee:	b480      	push	{r7}
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	2300      	movs	r3, #0
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <L6206_GetMotorHandle>:
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 80030fe:	b480      	push	{r7}
 8003100:	af00      	add	r7, sp, #0
 8003102:	2300      	movs	r3, #0
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800310e:	b480      	push	{r7}
 8003110:	af00      	add	r7, sp, #0
 8003112:	2300      	movs	r3, #0
 8003114:	4618      	mov	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
	...

08003120 <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <BSP_MotorControl_AttachFlagInterrupt+0x26>
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 800313a:	4b07      	ldr	r3, [pc, #28]	; (8003158 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4798      	blx	r3
 8003144:	e004      	b.n	8003150 <BSP_MotorControl_AttachFlagInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 8003146:	f640 0002 	movw	r0, #2050	; 0x802
 800314a:	f000 f807 	bl	800315c <BSP_MotorControl_ErrorHandler>
  }  
}
 800314e:	bf00      	nop
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	2000020c 	.word	0x2000020c

0800315c <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003166:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <BSP_MotorControl_ErrorHandler+0x38>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00d      	beq.n	800318a <BSP_MotorControl_ErrorHandler+0x2e>
 800316e:	4b09      	ldr	r3, [pc, #36]	; (8003194 <BSP_MotorControl_ErrorHandler+0x38>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <BSP_MotorControl_ErrorHandler+0x38>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003182:	88fa      	ldrh	r2, [r7, #6]
 8003184:	4610      	mov	r0, r2
 8003186:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 8003188:	e000      	b.n	800318c <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 800318a:	e7fe      	b.n	800318a <BSP_MotorControl_ErrorHandler+0x2e>
}
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	2000020c 	.word	0x2000020c

08003198 <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] nbDevices Number of motor devices to use (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, uint8_t nbDevices)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	460a      	mov	r2, r1
 80031a2:	80fb      	strh	r3, [r7, #6]
 80031a4:	4613      	mov	r3, r2
 80031a6:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 80031a8:	4a23      	ldr	r2, [pc, #140]	; (8003238 <BSP_MotorControl_Init+0xa0>)
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	8013      	strh	r3, [r2, #0]
  
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 80031ae:	88fb      	ldrh	r3, [r7, #6]
 80031b0:	f641 124a 	movw	r2, #6474	; 0x194a
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d105      	bne.n	80031c4 <BSP_MotorControl_Init+0x2c>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 80031b8:	f7fe f88a 	bl	80012d0 <L6474_GetMotorHandle>
 80031bc:	4603      	mov	r3, r0
 80031be:	4a1f      	ldr	r2, [pc, #124]	; (800323c <BSP_MotorControl_Init+0xa4>)
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e020      	b.n	8003206 <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d105      	bne.n	80031d6 <BSP_MotorControl_Init+0x3e>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 80031ca:	f7ff ff90 	bl	80030ee <Powerstep01_GetMotorHandle>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4a1a      	ldr	r2, [pc, #104]	; (800323c <BSP_MotorControl_Init+0xa4>)
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	e017      	b.n	8003206 <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 80031d6:	88fb      	ldrh	r3, [r7, #6]
 80031d8:	f641 023e 	movw	r2, #6206	; 0x183e
 80031dc:	4293      	cmp	r3, r2
 80031de:	d105      	bne.n	80031ec <BSP_MotorControl_Init+0x54>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 80031e0:	f7ff ff8d 	bl	80030fe <L6206_GetMotorHandle>
 80031e4:	4603      	mov	r3, r0
 80031e6:	4a15      	ldr	r2, [pc, #84]	; (800323c <BSP_MotorControl_Init+0xa4>)
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e00c      	b.n	8003206 <BSP_MotorControl_Init+0x6e>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	f5b3 5fc2 	cmp.w	r3, #6208	; 0x1840
 80031f2:	d105      	bne.n	8003200 <BSP_MotorControl_Init+0x68>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 80031f4:	f7ff ff8b 	bl	800310e <L6208_GetMotorHandle>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4a10      	ldr	r2, [pc, #64]	; (800323c <BSP_MotorControl_Init+0xa4>)
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e002      	b.n	8003206 <BSP_MotorControl_Init+0x6e>
  }
  else
  {
    motorDrvHandle = 0;
 8003200:	4b0e      	ldr	r3, [pc, #56]	; (800323c <BSP_MotorControl_Init+0xa4>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
  }

  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 8003206:	4b0d      	ldr	r3, [pc, #52]	; (800323c <BSP_MotorControl_Init+0xa4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00b      	beq.n	8003226 <BSP_MotorControl_Init+0x8e>
 800320e:	4b0b      	ldr	r3, [pc, #44]	; (800323c <BSP_MotorControl_Init+0xa4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d006      	beq.n	8003226 <BSP_MotorControl_Init+0x8e>
  {
    motorDrvHandle->Init(nbDevices);
 8003218:	4b08      	ldr	r3, [pc, #32]	; (800323c <BSP_MotorControl_Init+0xa4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	797a      	ldrb	r2, [r7, #5]
 8003220:	4610      	mov	r0, r2
 8003222:	4798      	blx	r3
 8003224:	e004      	b.n	8003230 <BSP_MotorControl_Init+0x98>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(4);
 8003226:	f640 0004 	movw	r0, #2052	; 0x804
 800322a:	f7ff ff97 	bl	800315c <BSP_MotorControl_ErrorHandler>
  }  
}
 800322e:	bf00      	nop
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20000210 	.word	0x20000210
 800323c:	2000020c 	.word	0x2000020c

08003240 <BSP_MotorControl_CmdGetStatus>:
 * the flags of the status register are reset. 
 * This is not the case when the status register is read with the
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 800324e:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00f      	beq.n	8003276 <BSP_MotorControl_CmdGetStatus+0x36>
 8003256:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <BSP_MotorControl_CmdGetStatus+0x36>
  {
    status = motorDrvHandle->CmdGetStatus(deviceId);
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326a:	79fa      	ldrb	r2, [r7, #7]
 800326c:	4610      	mov	r0, r2
 800326e:	4798      	blx	r3
 8003270:	4603      	mov	r3, r0
 8003272:	81fb      	strh	r3, [r7, #14]
 8003274:	e003      	b.n	800327e <BSP_MotorControl_CmdGetStatus+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 8003276:	f640 0022 	movw	r0, #2082	; 0x822
 800327a:	f7ff ff6f 	bl	800315c <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 800327e:	89fb      	ldrh	r3, [r7, #14]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	2000020c 	.word	0x2000020c

0800328c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003290:	4b27      	ldr	r3, [pc, #156]	; (8003330 <MX_SPI2_Init+0xa4>)
 8003292:	4a28      	ldr	r2, [pc, #160]	; (8003334 <MX_SPI2_Init+0xa8>)
 8003294:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003296:	4b26      	ldr	r3, [pc, #152]	; (8003330 <MX_SPI2_Init+0xa4>)
 8003298:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800329c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800329e:	4b24      	ldr	r3, [pc, #144]	; (8003330 <MX_SPI2_Init+0xa4>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_32BIT;
 80032a4:	4b22      	ldr	r3, [pc, #136]	; (8003330 <MX_SPI2_Init+0xa4>)
 80032a6:	221f      	movs	r2, #31
 80032a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032aa:	4b21      	ldr	r3, [pc, #132]	; (8003330 <MX_SPI2_Init+0xa4>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032b0:	4b1f      	ldr	r3, [pc, #124]	; (8003330 <MX_SPI2_Init+0xa4>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80032b6:	4b1e      	ldr	r3, [pc, #120]	; (8003330 <MX_SPI2_Init+0xa4>)
 80032b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80032bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80032be:	4b1c      	ldr	r3, [pc, #112]	; (8003330 <MX_SPI2_Init+0xa4>)
 80032c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032c6:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <MX_SPI2_Init+0xa4>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80032cc:	4b18      	ldr	r3, [pc, #96]	; (8003330 <MX_SPI2_Init+0xa4>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032d2:	4b17      	ldr	r3, [pc, #92]	; (8003330 <MX_SPI2_Init+0xa4>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80032d8:	4b15      	ldr	r3, [pc, #84]	; (8003330 <MX_SPI2_Init+0xa4>)
 80032da:	2200      	movs	r2, #0
 80032dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80032de:	4b14      	ldr	r3, [pc, #80]	; (8003330 <MX_SPI2_Init+0xa4>)
 80032e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032e4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80032e6:	4b12      	ldr	r3, [pc, #72]	; (8003330 <MX_SPI2_Init+0xa4>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80032ec:	4b10      	ldr	r3, [pc, #64]	; (8003330 <MX_SPI2_Init+0xa4>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80032f2:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <MX_SPI2_Init+0xa4>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80032f8:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <MX_SPI2_Init+0xa4>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <MX_SPI2_Init+0xa4>)
 8003300:	2200      	movs	r2, #0
 8003302:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003304:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <MX_SPI2_Init+0xa4>)
 8003306:	2200      	movs	r2, #0
 8003308:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800330a:	4b09      	ldr	r3, [pc, #36]	; (8003330 <MX_SPI2_Init+0xa4>)
 800330c:	2200      	movs	r2, #0
 800330e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003310:	4b07      	ldr	r3, [pc, #28]	; (8003330 <MX_SPI2_Init+0xa4>)
 8003312:	2200      	movs	r2, #0
 8003314:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <MX_SPI2_Init+0xa4>)
 8003318:	2200      	movs	r2, #0
 800331a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800331c:	4804      	ldr	r0, [pc, #16]	; (8003330 <MX_SPI2_Init+0xa4>)
 800331e:	f005 fc8f 	bl	8008c40 <HAL_SPI_Init>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8003328:	f7ff fedc 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800332c:	bf00      	nop
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20004cb4 	.word	0x20004cb4
 8003334:	40003800 	.word	0x40003800

08003338 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b0b8      	sub	sp, #224	; 0xe0
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003340:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	60da      	str	r2, [r3, #12]
 800334e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003350:	f107 0310 	add.w	r3, r7, #16
 8003354:	22bc      	movs	r2, #188	; 0xbc
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f00b f9df 	bl	800e71c <memset>
  if(spiHandle->Instance==SPI2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a25      	ldr	r2, [pc, #148]	; (80033f8 <HAL_SPI_MspInit+0xc0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d142      	bne.n	80033ee <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800336c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800336e:	2300      	movs	r3, #0
 8003370:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003372:	f107 0310 	add.w	r3, r7, #16
 8003376:	4618      	mov	r0, r3
 8003378:	f003 fadc 	bl	8006934 <HAL_RCCEx_PeriphCLKConfig>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8003382:	f7ff feaf 	bl	80030e4 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003386:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <HAL_SPI_MspInit+0xc4>)
 8003388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800338c:	4a1b      	ldr	r2, [pc, #108]	; (80033fc <HAL_SPI_MspInit+0xc4>)
 800338e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003392:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003396:	4b19      	ldr	r3, [pc, #100]	; (80033fc <HAL_SPI_MspInit+0xc4>)
 8003398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800339c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a4:	4b15      	ldr	r3, [pc, #84]	; (80033fc <HAL_SPI_MspInit+0xc4>)
 80033a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033aa:	4a14      	ldr	r2, [pc, #80]	; (80033fc <HAL_SPI_MspInit+0xc4>)
 80033ac:	f043 0302 	orr.w	r3, r3, #2
 80033b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033b4:	4b11      	ldr	r3, [pc, #68]	; (80033fc <HAL_SPI_MspInit+0xc4>)
 80033b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80033c2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80033c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ca:	2302      	movs	r3, #2
 80033cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d6:	2300      	movs	r3, #0
 80033d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033dc:	2305      	movs	r3, #5
 80033de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80033e6:	4619      	mov	r1, r3
 80033e8:	4805      	ldr	r0, [pc, #20]	; (8003400 <HAL_SPI_MspInit+0xc8>)
 80033ea:	f002 f8a5 	bl	8005538 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80033ee:	bf00      	nop
 80033f0:	37e0      	adds	r7, #224	; 0xe0
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40003800 	.word	0x40003800
 80033fc:	58024400 	.word	0x58024400
 8003400:	58020400 	.word	0x58020400

08003404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800340a:	4b0c      	ldr	r3, [pc, #48]	; (800343c <HAL_MspInit+0x38>)
 800340c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003410:	4a0a      	ldr	r2, [pc, #40]	; (800343c <HAL_MspInit+0x38>)
 8003412:	f043 0302 	orr.w	r3, r3, #2
 8003416:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800341a:	4b08      	ldr	r3, [pc, #32]	; (800343c <HAL_MspInit+0x38>)
 800341c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	607b      	str	r3, [r7, #4]
 8003426:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003428:	2200      	movs	r2, #0
 800342a:	210f      	movs	r1, #15
 800342c:	f06f 0001 	mvn.w	r0, #1
 8003430:	f002 f85a 	bl	80054e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003434:	bf00      	nop
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	58024400 	.word	0x58024400

08003440 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b090      	sub	sp, #64	; 0x40
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b0f      	cmp	r3, #15
 800344c:	d827      	bhi.n	800349e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0U);
 800344e:	2200      	movs	r2, #0
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	201d      	movs	r0, #29
 8003454:	f002 f848 	bl	80054e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003458:	201d      	movs	r0, #29
 800345a:	f002 f85f 	bl	800551c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800345e:	4a29      	ldr	r2, [pc, #164]	; (8003504 <HAL_InitTick+0xc4>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8003464:	4b28      	ldr	r3, [pc, #160]	; (8003508 <HAL_InitTick+0xc8>)
 8003466:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800346a:	4a27      	ldr	r2, [pc, #156]	; (8003508 <HAL_InitTick+0xc8>)
 800346c:	f043 0302 	orr.w	r3, r3, #2
 8003470:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003474:	4b24      	ldr	r3, [pc, #144]	; (8003508 <HAL_InitTick+0xc8>)
 8003476:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003482:	f107 0210 	add.w	r2, r7, #16
 8003486:	f107 0314 	add.w	r3, r7, #20
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f003 fa0f 	bl	80068b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	2b00      	cmp	r3, #0
 800349a:	d106      	bne.n	80034aa <HAL_InitTick+0x6a>
 800349c:	e001      	b.n	80034a2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e02b      	b.n	80034fa <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80034a2:	f003 f9d9 	bl	8006858 <HAL_RCC_GetPCLK1Freq>
 80034a6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80034a8:	e004      	b.n	80034b4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80034aa:	f003 f9d5 	bl	8006858 <HAL_RCC_GetPCLK1Freq>
 80034ae:	4603      	mov	r3, r0
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80034b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b6:	4a15      	ldr	r2, [pc, #84]	; (800350c <HAL_InitTick+0xcc>)
 80034b8:	fba2 2303 	umull	r2, r3, r2, r3
 80034bc:	0c9b      	lsrs	r3, r3, #18
 80034be:	3b01      	subs	r3, #1
 80034c0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80034c2:	4b13      	ldr	r3, [pc, #76]	; (8003510 <HAL_InitTick+0xd0>)
 80034c4:	4a13      	ldr	r2, [pc, #76]	; (8003514 <HAL_InitTick+0xd4>)
 80034c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <HAL_InitTick+0xd0>)
 80034ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034ce:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80034d0:	4a0f      	ldr	r2, [pc, #60]	; (8003510 <HAL_InitTick+0xd0>)
 80034d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d4:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80034d6:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <HAL_InitTick+0xd0>)
 80034d8:	2200      	movs	r2, #0
 80034da:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <HAL_InitTick+0xd0>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80034e2:	480b      	ldr	r0, [pc, #44]	; (8003510 <HAL_InitTick+0xd0>)
 80034e4:	f006 f887 	bl	80095f6 <HAL_TIM_Base_Init>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d104      	bne.n	80034f8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80034ee:	4808      	ldr	r0, [pc, #32]	; (8003510 <HAL_InitTick+0xd0>)
 80034f0:	f006 f8e2 	bl	80096b8 <HAL_TIM_Base_Start_IT>
 80034f4:	4603      	mov	r3, r0
 80034f6:	e000      	b.n	80034fa <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3740      	adds	r7, #64	; 0x40
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000160 	.word	0x20000160
 8003508:	58024400 	.word	0x58024400
 800350c:	431bde83 	.word	0x431bde83
 8003510:	20004d3c 	.word	0x20004d3c
 8003514:	40000400 	.word	0x40000400

08003518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800351c:	e7fe      	b.n	800351c <NMI_Handler+0x4>

0800351e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800351e:	b480      	push	{r7}
 8003520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003522:	e7fe      	b.n	8003522 <HardFault_Handler+0x4>

08003524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003528:	e7fe      	b.n	8003528 <MemManage_Handler+0x4>

0800352a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800352a:	b480      	push	{r7}
 800352c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800352e:	e7fe      	b.n	800352e <BusFault_Handler+0x4>

08003530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003534:	e7fe      	b.n	8003534 <UsageFault_Handler+0x4>

08003536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003536:	b480      	push	{r7}
 8003538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003548:	4802      	ldr	r0, [pc, #8]	; (8003554 <TIM3_IRQHandler+0x10>)
 800354a:	f006 fb7f 	bl	8009c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20004d3c 	.word	0x20004d3c

08003558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003560:	4a14      	ldr	r2, [pc, #80]	; (80035b4 <_sbrk+0x5c>)
 8003562:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <_sbrk+0x60>)
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800356c:	4b13      	ldr	r3, [pc, #76]	; (80035bc <_sbrk+0x64>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003574:	4b11      	ldr	r3, [pc, #68]	; (80035bc <_sbrk+0x64>)
 8003576:	4a12      	ldr	r2, [pc, #72]	; (80035c0 <_sbrk+0x68>)
 8003578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800357a:	4b10      	ldr	r3, [pc, #64]	; (80035bc <_sbrk+0x64>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	429a      	cmp	r2, r3
 8003586:	d207      	bcs.n	8003598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003588:	f00b f890 	bl	800e6ac <__errno>
 800358c:	4603      	mov	r3, r0
 800358e:	220c      	movs	r2, #12
 8003590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003592:	f04f 33ff 	mov.w	r3, #4294967295
 8003596:	e009      	b.n	80035ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003598:	4b08      	ldr	r3, [pc, #32]	; (80035bc <_sbrk+0x64>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800359e:	4b07      	ldr	r3, [pc, #28]	; (80035bc <_sbrk+0x64>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4413      	add	r3, r2
 80035a6:	4a05      	ldr	r2, [pc, #20]	; (80035bc <_sbrk+0x64>)
 80035a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035aa:	68fb      	ldr	r3, [r7, #12]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20020000 	.word	0x20020000
 80035b8:	00000400 	.word	0x00000400
 80035bc:	20000214 	.word	0x20000214
 80035c0:	20004f50 	.word	0x20004f50

080035c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80035c8:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <SystemInit+0xe4>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	4a36      	ldr	r2, [pc, #216]	; (80036a8 <SystemInit+0xe4>)
 80035d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80035d8:	4b34      	ldr	r3, [pc, #208]	; (80036ac <SystemInit+0xe8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	2b06      	cmp	r3, #6
 80035e2:	d807      	bhi.n	80035f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80035e4:	4b31      	ldr	r3, [pc, #196]	; (80036ac <SystemInit+0xe8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f023 030f 	bic.w	r3, r3, #15
 80035ec:	4a2f      	ldr	r2, [pc, #188]	; (80036ac <SystemInit+0xe8>)
 80035ee:	f043 0307 	orr.w	r3, r3, #7
 80035f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80035f4:	4b2e      	ldr	r3, [pc, #184]	; (80036b0 <SystemInit+0xec>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a2d      	ldr	r2, [pc, #180]	; (80036b0 <SystemInit+0xec>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003600:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <SystemInit+0xec>)
 8003602:	2200      	movs	r2, #0
 8003604:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003606:	4b2a      	ldr	r3, [pc, #168]	; (80036b0 <SystemInit+0xec>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	4929      	ldr	r1, [pc, #164]	; (80036b0 <SystemInit+0xec>)
 800360c:	4b29      	ldr	r3, [pc, #164]	; (80036b4 <SystemInit+0xf0>)
 800360e:	4013      	ands	r3, r2
 8003610:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003612:	4b26      	ldr	r3, [pc, #152]	; (80036ac <SystemInit+0xe8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800361e:	4b23      	ldr	r3, [pc, #140]	; (80036ac <SystemInit+0xe8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 030f 	bic.w	r3, r3, #15
 8003626:	4a21      	ldr	r2, [pc, #132]	; (80036ac <SystemInit+0xe8>)
 8003628:	f043 0307 	orr.w	r3, r3, #7
 800362c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800362e:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <SystemInit+0xec>)
 8003630:	2200      	movs	r2, #0
 8003632:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003634:	4b1e      	ldr	r3, [pc, #120]	; (80036b0 <SystemInit+0xec>)
 8003636:	2200      	movs	r2, #0
 8003638:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800363a:	4b1d      	ldr	r3, [pc, #116]	; (80036b0 <SystemInit+0xec>)
 800363c:	2200      	movs	r2, #0
 800363e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003640:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <SystemInit+0xec>)
 8003642:	4a1d      	ldr	r2, [pc, #116]	; (80036b8 <SystemInit+0xf4>)
 8003644:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003646:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <SystemInit+0xec>)
 8003648:	4a1c      	ldr	r2, [pc, #112]	; (80036bc <SystemInit+0xf8>)
 800364a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800364c:	4b18      	ldr	r3, [pc, #96]	; (80036b0 <SystemInit+0xec>)
 800364e:	4a1c      	ldr	r2, [pc, #112]	; (80036c0 <SystemInit+0xfc>)
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003652:	4b17      	ldr	r3, [pc, #92]	; (80036b0 <SystemInit+0xec>)
 8003654:	2200      	movs	r2, #0
 8003656:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003658:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <SystemInit+0xec>)
 800365a:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <SystemInit+0xfc>)
 800365c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800365e:	4b14      	ldr	r3, [pc, #80]	; (80036b0 <SystemInit+0xec>)
 8003660:	2200      	movs	r2, #0
 8003662:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003664:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <SystemInit+0xec>)
 8003666:	4a16      	ldr	r2, [pc, #88]	; (80036c0 <SystemInit+0xfc>)
 8003668:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800366a:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <SystemInit+0xec>)
 800366c:	2200      	movs	r2, #0
 800366e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003670:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <SystemInit+0xec>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a0e      	ldr	r2, [pc, #56]	; (80036b0 <SystemInit+0xec>)
 8003676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800367c:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <SystemInit+0xec>)
 800367e:	2200      	movs	r2, #0
 8003680:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003682:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <SystemInit+0x100>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <SystemInit+0x104>)
 8003688:	4013      	ands	r3, r2
 800368a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800368e:	d202      	bcs.n	8003696 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003690:	4b0e      	ldr	r3, [pc, #56]	; (80036cc <SystemInit+0x108>)
 8003692:	2201      	movs	r2, #1
 8003694:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003696:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <SystemInit+0x10c>)
 8003698:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800369c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800369e:	bf00      	nop
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	e000ed00 	.word	0xe000ed00
 80036ac:	52002000 	.word	0x52002000
 80036b0:	58024400 	.word	0x58024400
 80036b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80036b8:	02020200 	.word	0x02020200
 80036bc:	01ff0000 	.word	0x01ff0000
 80036c0:	01010280 	.word	0x01010280
 80036c4:	5c001000 	.word	0x5c001000
 80036c8:	ffff0000 	.word	0xffff0000
 80036cc:	51008108 	.word	0x51008108
 80036d0:	52004000 	.word	0x52004000

080036d4 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80036d8:	4b22      	ldr	r3, [pc, #136]	; (8003764 <MX_UART5_Init+0x90>)
 80036da:	4a23      	ldr	r2, [pc, #140]	; (8003768 <MX_UART5_Init+0x94>)
 80036dc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80036de:	4b21      	ldr	r3, [pc, #132]	; (8003764 <MX_UART5_Init+0x90>)
 80036e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80036e4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80036e6:	4b1f      	ldr	r3, [pc, #124]	; (8003764 <MX_UART5_Init+0x90>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80036ec:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <MX_UART5_Init+0x90>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80036f2:	4b1c      	ldr	r3, [pc, #112]	; (8003764 <MX_UART5_Init+0x90>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80036f8:	4b1a      	ldr	r3, [pc, #104]	; (8003764 <MX_UART5_Init+0x90>)
 80036fa:	220c      	movs	r2, #12
 80036fc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036fe:	4b19      	ldr	r3, [pc, #100]	; (8003764 <MX_UART5_Init+0x90>)
 8003700:	2200      	movs	r2, #0
 8003702:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003704:	4b17      	ldr	r3, [pc, #92]	; (8003764 <MX_UART5_Init+0x90>)
 8003706:	2200      	movs	r2, #0
 8003708:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800370a:	4b16      	ldr	r3, [pc, #88]	; (8003764 <MX_UART5_Init+0x90>)
 800370c:	2200      	movs	r2, #0
 800370e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003710:	4b14      	ldr	r3, [pc, #80]	; (8003764 <MX_UART5_Init+0x90>)
 8003712:	2200      	movs	r2, #0
 8003714:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003716:	4b13      	ldr	r3, [pc, #76]	; (8003764 <MX_UART5_Init+0x90>)
 8003718:	2200      	movs	r2, #0
 800371a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800371c:	4811      	ldr	r0, [pc, #68]	; (8003764 <MX_UART5_Init+0x90>)
 800371e:	f007 f933 	bl	800a988 <HAL_UART_Init>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8003728:	f7ff fcdc 	bl	80030e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800372c:	2100      	movs	r1, #0
 800372e:	480d      	ldr	r0, [pc, #52]	; (8003764 <MX_UART5_Init+0x90>)
 8003730:	f008 f95e 	bl	800b9f0 <HAL_UARTEx_SetTxFifoThreshold>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800373a:	f7ff fcd3 	bl	80030e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800373e:	2100      	movs	r1, #0
 8003740:	4808      	ldr	r0, [pc, #32]	; (8003764 <MX_UART5_Init+0x90>)
 8003742:	f008 f993 	bl	800ba6c <HAL_UARTEx_SetRxFifoThreshold>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800374c:	f7ff fcca 	bl	80030e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003750:	4804      	ldr	r0, [pc, #16]	; (8003764 <MX_UART5_Init+0x90>)
 8003752:	f008 f914 	bl	800b97e <HAL_UARTEx_DisableFifoMode>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800375c:	f7ff fcc2 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003760:	bf00      	nop
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20004d88 	.word	0x20004d88
 8003768:	40005000 	.word	0x40005000

0800376c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b0ba      	sub	sp, #232	; 0xe8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003774:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	609a      	str	r2, [r3, #8]
 8003780:	60da      	str	r2, [r3, #12]
 8003782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003784:	f107 0318 	add.w	r3, r7, #24
 8003788:	22bc      	movs	r2, #188	; 0xbc
 800378a:	2100      	movs	r1, #0
 800378c:	4618      	mov	r0, r3
 800378e:	f00a ffc5 	bl	800e71c <memset>
  if(uartHandle->Instance==UART5)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a37      	ldr	r2, [pc, #220]	; (8003874 <HAL_UART_MspInit+0x108>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d166      	bne.n	800386a <HAL_UART_MspInit+0xfe>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800379c:	2302      	movs	r3, #2
 800379e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80037a0:	2300      	movs	r3, #0
 80037a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037a6:	f107 0318 	add.w	r3, r7, #24
 80037aa:	4618      	mov	r0, r3
 80037ac:	f003 f8c2 	bl	8006934 <HAL_RCCEx_PeriphCLKConfig>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80037b6:	f7ff fc95 	bl	80030e4 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80037ba:	4b2f      	ldr	r3, [pc, #188]	; (8003878 <HAL_UART_MspInit+0x10c>)
 80037bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037c0:	4a2d      	ldr	r2, [pc, #180]	; (8003878 <HAL_UART_MspInit+0x10c>)
 80037c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037ca:	4b2b      	ldr	r3, [pc, #172]	; (8003878 <HAL_UART_MspInit+0x10c>)
 80037cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037d8:	4b27      	ldr	r3, [pc, #156]	; (8003878 <HAL_UART_MspInit+0x10c>)
 80037da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037de:	4a26      	ldr	r2, [pc, #152]	; (8003878 <HAL_UART_MspInit+0x10c>)
 80037e0:	f043 0304 	orr.w	r3, r3, #4
 80037e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037e8:	4b23      	ldr	r3, [pc, #140]	; (8003878 <HAL_UART_MspInit+0x10c>)
 80037ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037f6:	4b20      	ldr	r3, [pc, #128]	; (8003878 <HAL_UART_MspInit+0x10c>)
 80037f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037fc:	4a1e      	ldr	r2, [pc, #120]	; (8003878 <HAL_UART_MspInit+0x10c>)
 80037fe:	f043 0308 	orr.w	r3, r3, #8
 8003802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003806:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <HAL_UART_MspInit+0x10c>)
 8003808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003818:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381c:	2302      	movs	r3, #2
 800381e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003822:	2300      	movs	r3, #0
 8003824:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003828:	2300      	movs	r3, #0
 800382a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800382e:	2308      	movs	r3, #8
 8003830:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003834:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003838:	4619      	mov	r1, r3
 800383a:	4810      	ldr	r0, [pc, #64]	; (800387c <HAL_UART_MspInit+0x110>)
 800383c:	f001 fe7c 	bl	8005538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003840:	2304      	movs	r3, #4
 8003842:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003846:	2302      	movs	r3, #2
 8003848:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384c:	2300      	movs	r3, #0
 800384e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003852:	2300      	movs	r3, #0
 8003854:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003858:	2308      	movs	r3, #8
 800385a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800385e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003862:	4619      	mov	r1, r3
 8003864:	4806      	ldr	r0, [pc, #24]	; (8003880 <HAL_UART_MspInit+0x114>)
 8003866:	f001 fe67 	bl	8005538 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 800386a:	bf00      	nop
 800386c:	37e8      	adds	r7, #232	; 0xe8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40005000 	.word	0x40005000
 8003878:	58024400 	.word	0x58024400
 800387c:	58020800 	.word	0x58020800
 8003880:	58020c00 	.word	0x58020c00

08003884 <L6474_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void L6474_Board_Delay(uint32_t delay)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fb11 	bl	8003eb4 <HAL_Delay>
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <L6474_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
  * @retval None
 **********************************************************/
void L6474_Board_DisableIrq(void)
{
 800389a:	b480      	push	{r7}
 800389c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800389e:	b672      	cpsid	i
}
 80038a0:	bf00      	nop
  __disable_irq();
}
 80038a2:	bf00      	nop
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <L6474_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void L6474_Board_EnableIrq(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80038b0:	b662      	cpsie	i
}
 80038b2:	bf00      	nop
  __enable_irq();
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <L6474_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the L6474s
 * @param[in] deviceId (from 0 to 2)
 * @retval None
  **********************************************************/
void L6474_Board_GpioInit(uint8_t deviceId)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08a      	sub	sp, #40	; 0x28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  if (deviceId ==0)
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d16a      	bne.n	80039a6 <L6474_Board_GpioInit+0xe6>
  {
    /* GPIO Ports Clock Enable */
    __GPIOC_CLK_ENABLE();
 80038d0:	4b53      	ldr	r3, [pc, #332]	; (8003a20 <L6474_Board_GpioInit+0x160>)
 80038d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038d6:	4a52      	ldr	r2, [pc, #328]	; (8003a20 <L6474_Board_GpioInit+0x160>)
 80038d8:	f043 0304 	orr.w	r3, r3, #4
 80038dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038e0:	4b4f      	ldr	r3, [pc, #316]	; (8003a20 <L6474_Board_GpioInit+0x160>)
 80038e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	693b      	ldr	r3, [r7, #16]
    __GPIOA_CLK_ENABLE();
 80038ee:	4b4c      	ldr	r3, [pc, #304]	; (8003a20 <L6474_Board_GpioInit+0x160>)
 80038f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038f4:	4a4a      	ldr	r2, [pc, #296]	; (8003a20 <L6474_Board_GpioInit+0x160>)
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038fe:	4b48      	ldr	r3, [pc, #288]	; (8003a20 <L6474_Board_GpioInit+0x160>)
 8003900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	68fb      	ldr	r3, [r7, #12]
    __GPIOB_CLK_ENABLE();
 800390c:	4b44      	ldr	r3, [pc, #272]	; (8003a20 <L6474_Board_GpioInit+0x160>)
 800390e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003912:	4a43      	ldr	r2, [pc, #268]	; (8003a20 <L6474_Board_GpioInit+0x160>)
 8003914:	f043 0302 	orr.w	r3, r3, #2
 8003918:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800391c:	4b40      	ldr	r3, [pc, #256]	; (8003a20 <L6474_Board_GpioInit+0x160>)
 800391e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	60bb      	str	r3, [r7, #8]
 8003928:	68bb      	ldr	r3, [r7, #8]
    
    /* Configure L6474 - Flag pin -------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 800392a:	2310      	movs	r3, #16
 800392c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800392e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003934:	2301      	movs	r3, #1
 8003936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003938:	2301      	movs	r3, #1
 800393a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 800393c:	f107 0314 	add.w	r3, r7, #20
 8003940:	4619      	mov	r1, r3
 8003942:	4838      	ldr	r0, [pc, #224]	; (8003a24 <L6474_Board_GpioInit+0x164>)
 8003944:	f001 fdf8 	bl	8005538 <HAL_GPIO_Init>
    
   /* Set Priority of External Line Interrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(EXTI_MCU_LINE_IRQn, 5, 0);
 8003948:	2200      	movs	r2, #0
 800394a:	2105      	movs	r1, #5
 800394c:	2028      	movs	r0, #40	; 0x28
 800394e:	f001 fdcb 	bl	80054e8 <HAL_NVIC_SetPriority>
      
    /* Enable the External Line Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(EXTI_MCU_LINE_IRQn);    
 8003952:	2028      	movs	r0, #40	; 0x28
 8003954:	f001 fde2 	bl	800551c <HAL_NVIC_EnableIRQ>

    /* Configure L6474 - CS pin ---------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 8003958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800395c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800395e:	2301      	movs	r3, #1
 8003960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003966:	2301      	movs	r3, #1
 8003968:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 800396a:	f107 0314 	add.w	r3, r7, #20
 800396e:	4619      	mov	r1, r3
 8003970:	482d      	ldr	r0, [pc, #180]	; (8003a28 <L6474_Board_GpioInit+0x168>)
 8003972:	f001 fde1 	bl	8005538 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8003976:	2201      	movs	r2, #1
 8003978:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800397c:	482a      	ldr	r0, [pc, #168]	; (8003a28 <L6474_Board_GpioInit+0x168>)
 800397e:	f001 ff8b 	bl	8005898 <HAL_GPIO_WritePin>
    
    /* Configure L6474 - STBY/RESET pin -------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_RESET_PIN;
 8003982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003988:	2301      	movs	r3, #1
 800398a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398c:	2300      	movs	r3, #0
 800398e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003990:	2301      	movs	r3, #1
 8003992:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, &GPIO_InitStruct);
 8003994:	f107 0314 	add.w	r3, r7, #20
 8003998:	4619      	mov	r1, r3
 800399a:	4824      	ldr	r0, [pc, #144]	; (8003a2c <L6474_Board_GpioInit+0x16c>)
 800399c:	f001 fdcc 	bl	8005538 <HAL_GPIO_Init>
    L6474_Board_Reset(0);  
 80039a0:	2000      	movs	r0, #0
 80039a2:	f000 f949 	bl	8003c38 <L6474_Board_Reset>
  }
  
  switch (deviceId)
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d025      	beq.n	80039f8 <L6474_Board_GpioInit+0x138>
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	dc32      	bgt.n	8003a16 <L6474_Board_GpioInit+0x156>
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <L6474_Board_GpioInit+0xfa>
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d010      	beq.n	80039da <L6474_Board_GpioInit+0x11a>
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
        break;
  }
}
 80039b8:	e02d      	b.n	8003a16 <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN;
 80039ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039be:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039c0:	2301      	movs	r3, #1
 80039c2:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80039c8:	2301      	movs	r3, #1
 80039ca:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, &GPIO_InitStruct);
 80039cc:	f107 0314 	add.w	r3, r7, #20
 80039d0:	4619      	mov	r1, r3
 80039d2:	4816      	ldr	r0, [pc, #88]	; (8003a2c <L6474_Board_GpioInit+0x16c>)
 80039d4:	f001 fdb0 	bl	8005538 <HAL_GPIO_Init>
      break;
 80039d8:	e01d      	b.n	8003a16 <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN;
 80039da:	2320      	movs	r3, #32
 80039dc:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039de:	2301      	movs	r3, #1
 80039e0:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80039e6:	2301      	movs	r3, #1
 80039e8:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, &GPIO_InitStruct);
 80039ea:	f107 0314 	add.w	r3, r7, #20
 80039ee:	4619      	mov	r1, r3
 80039f0:	480d      	ldr	r0, [pc, #52]	; (8003a28 <L6474_Board_GpioInit+0x168>)
 80039f2:	f001 fda1 	bl	8005538 <HAL_GPIO_Init>
      break;
 80039f6:	e00e      	b.n	8003a16 <L6474_Board_GpioInit+0x156>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN;
 80039f8:	2310      	movs	r3, #16
 80039fa:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039fc:	2301      	movs	r3, #1
 80039fe:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003a04:	2301      	movs	r3, #1
 8003a06:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
 8003a08:	f107 0314 	add.w	r3, r7, #20
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4806      	ldr	r0, [pc, #24]	; (8003a28 <L6474_Board_GpioInit+0x168>)
 8003a10:	f001 fd92 	bl	8005538 <HAL_GPIO_Init>
        break;
 8003a14:	bf00      	nop
}
 8003a16:	bf00      	nop
 8003a18:	3728      	adds	r7, #40	; 0x28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	58024400 	.word	0x58024400
 8003a24:	58021c00 	.word	0x58021c00
 8003a28:	58020400 	.word	0x58020400
 8003a2c:	58022000 	.word	0x58022000

08003a30 <L6474_Board_Pwm1SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm1SetFreq(uint16_t newFreq)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8003a3a:	f002 fd63 	bl	8006504 <HAL_RCC_GetSysClockFreq>
 8003a3e:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM1_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8003a40:	88fb      	ldrh	r3, [r7, #6]
 8003a42:	029b      	lsls	r3, r3, #10
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm1, period);
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <L6474_Board_Pwm1SetFreq+0x48>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a56:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <L6474_Board_Pwm1SetFreq+0x48>)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1, period >> 1);
 8003a5c:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <L6474_Board_Pwm1SetFreq+0x48>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	0852      	lsrs	r2, r2, #1
 8003a64:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start_IT(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);  
 8003a66:	2100      	movs	r1, #0
 8003a68:	4803      	ldr	r0, [pc, #12]	; (8003a78 <L6474_Board_Pwm1SetFreq+0x48>)
 8003a6a:	f005 ff95 	bl	8009998 <HAL_TIM_PWM_Start_IT>
}
 8003a6e:	bf00      	nop
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20004e18 	.word	0x20004e18

08003a7c <L6474_Board_Pwm2SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm2SetFreq(uint16_t newFreq)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8003a86:	f002 fd3d 	bl	8006504 <HAL_RCC_GetSysClockFreq>
 8003a8a:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM2_FREQ_RESCALER  * (uint32_t)newFreq)) - 1;
 8003a8c:	88fb      	ldrh	r3, [r7, #6]
 8003a8e:	029b      	lsls	r3, r3, #10
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm2, period);
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <L6474_Board_Pwm2SetFreq+0x48>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003aa2:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <L6474_Board_Pwm2SetFreq+0x48>)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2, period >> 1);
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <L6474_Board_Pwm2SetFreq+0x48>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	0852      	lsrs	r2, r2, #1
 8003ab0:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start_IT(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 8003ab2:	2104      	movs	r1, #4
 8003ab4:	4803      	ldr	r0, [pc, #12]	; (8003ac4 <L6474_Board_Pwm2SetFreq+0x48>)
 8003ab6:	f005 ff6f 	bl	8009998 <HAL_TIM_PWM_Start_IT>
}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20004eb0 	.word	0x20004eb0

08003ac8 <L6474_Board_Pwm3SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm3SetFreq(uint16_t newFreq)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8003ad2:	f002 fd17 	bl	8006504 <HAL_RCC_GetSysClockFreq>
 8003ad6:	60f8      	str	r0, [r7, #12]
  /* Double the frequency as the SW is generated by SW */
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM3_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	02db      	lsls	r3, r3, #11
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm3, period);
 8003ae6:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <L6474_Board_Pwm3SetFreq+0x48>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	62da      	str	r2, [r3, #44]	; 0x2c
 8003aee:	4a08      	ldr	r2, [pc, #32]	; (8003b10 <L6474_Board_Pwm3SetFreq+0x48>)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3, period >> 1);
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <L6474_Board_Pwm3SetFreq+0x48>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	0852      	lsrs	r2, r2, #1
 8003afc:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start_IT(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);  
 8003afe:	2108      	movs	r1, #8
 8003b00:	4803      	ldr	r0, [pc, #12]	; (8003b10 <L6474_Board_Pwm3SetFreq+0x48>)
 8003b02:	f005 ff49 	bl	8009998 <HAL_TIM_PWM_Start_IT>
}
 8003b06:	bf00      	nop
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20004e64 	.word	0x20004e64

08003b14 <L6474_Board_PwmInit>:
 * @note Device 0 uses PWM1 based on timer 1 
 * Device 1 uses PWM 2 based on timer 2
 * Device 2 uses PWM3 based timer 0
 **********************************************************/
void L6474_Board_PwmInit(uint8_t deviceId)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08e      	sub	sp, #56	; 0x38
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	71fb      	strb	r3, [r7, #7]
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;
  uint32_t  channel;

  switch (deviceId)
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d00a      	beq.n	8003b3a <L6474_Board_PwmInit+0x26>
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d011      	beq.n	8003b4c <L6474_Board_PwmInit+0x38>
  {

  case 0:
  default:
      pHTim = &hTimPwm1;
 8003b28:	4b21      	ldr	r3, [pc, #132]	; (8003bb0 <L6474_Board_PwmInit+0x9c>)
 8003b2a:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1;
 8003b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b32:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1;
 8003b34:	2300      	movs	r3, #0
 8003b36:	633b      	str	r3, [r7, #48]	; 0x30

      break;
 8003b38:	e010      	b.n	8003b5c <L6474_Board_PwmInit+0x48>
    case  1:
      pHTim = &hTimPwm2;
 8003b3a:	4b1e      	ldr	r3, [pc, #120]	; (8003bb4 <L6474_Board_PwmInit+0xa0>)
 8003b3c:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2;
 8003b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b44:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2;
 8003b46:	2304      	movs	r3, #4
 8003b48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b4a:	e007      	b.n	8003b5c <L6474_Board_PwmInit+0x48>


    case 2:
      pHTim = &hTimPwm3;
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <L6474_Board_PwmInit+0xa4>)
 8003b4e:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3;
 8003b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b52:	4a1a      	ldr	r2, [pc, #104]	; (8003bbc <L6474_Board_PwmInit+0xa8>)
 8003b54:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3;
 8003b56:	2308      	movs	r3, #8
 8003b58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b5a:	bf00      	nop
  }
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 8003b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003b62:	605a      	str	r2, [r3, #4]
  
  pHTim->Init.Period = 0;
 8003b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b66:	2200      	movs	r2, #0
 8003b68:	60da      	str	r2, [r3, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(pHTim);
 8003b70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003b72:	f005 fe19 	bl	80097a8 <HAL_TIM_PWM_Init>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b76:	2360      	movs	r3, #96	; 0x60
 8003b78:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b82:	2300      	movs	r3, #0
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8003b86:	f107 0314 	add.w	r3, r7, #20
 8003b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003b90:	f006 f97c 	bl	8009e8c <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	613b      	str	r3, [r7, #16]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8003b9c:	f107 0308 	add.w	r3, r7, #8
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ba4:	f006 fe44 	bl	800a830 <HAL_TIMEx_MasterConfigSynchronization>
}
 8003ba8:	bf00      	nop
 8003baa:	3738      	adds	r7, #56	; 0x38
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20004e18 	.word	0x20004e18
 8003bb4:	20004eb0 	.word	0x20004eb0
 8003bb8:	20004e64 	.word	0x20004e64
 8003bbc:	40000800 	.word	0x40000800

08003bc0 <L6474_Board_PwmStop>:
 * @brief  Stops the PWM uses by the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_PwmStop(uint8_t deviceId)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
  switch (deviceId)
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d010      	beq.n	8003bf2 <L6474_Board_PwmStop+0x32>
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	dc13      	bgt.n	8003bfc <L6474_Board_PwmStop+0x3c>
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <L6474_Board_PwmStop+0x1e>
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d005      	beq.n	8003be8 <L6474_Board_PwmStop+0x28>
    case 2:
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
      
      break;
    default:
      break;//ignore error
 8003bdc:	e00e      	b.n	8003bfc <L6474_Board_PwmStop+0x3c>
       HAL_TIM_PWM_Stop(&hTimPwm1,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 8003bde:	2100      	movs	r1, #0
 8003be0:	4809      	ldr	r0, [pc, #36]	; (8003c08 <L6474_Board_PwmStop+0x48>)
 8003be2:	f005 fe43 	bl	800986c <HAL_TIM_PWM_Stop>
      break;
 8003be6:	e00a      	b.n	8003bfe <L6474_Board_PwmStop+0x3e>
      HAL_TIM_PWM_Stop(&hTimPwm2,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 8003be8:	2104      	movs	r1, #4
 8003bea:	4808      	ldr	r0, [pc, #32]	; (8003c0c <L6474_Board_PwmStop+0x4c>)
 8003bec:	f005 fe3e 	bl	800986c <HAL_TIM_PWM_Stop>
      break;
 8003bf0:	e005      	b.n	8003bfe <L6474_Board_PwmStop+0x3e>
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
 8003bf2:	2108      	movs	r1, #8
 8003bf4:	4806      	ldr	r0, [pc, #24]	; (8003c10 <L6474_Board_PwmStop+0x50>)
 8003bf6:	f005 fe39 	bl	800986c <HAL_TIM_PWM_Stop>
      break;
 8003bfa:	e000      	b.n	8003bfe <L6474_Board_PwmStop+0x3e>
      break;//ignore error
 8003bfc:	bf00      	nop
  }
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20004e18 	.word	0x20004e18
 8003c0c:	20004eb0 	.word	0x20004eb0
 8003c10:	20004e64 	.word	0x20004e64

08003c14 <L6474_Board_ReleaseReset>:
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_ReleaseReset(uint8_t deviceId)
{ 
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_SET); 
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c24:	4803      	ldr	r0, [pc, #12]	; (8003c34 <L6474_Board_ReleaseReset+0x20>)
 8003c26:	f001 fe37 	bl	8005898 <HAL_GPIO_WritePin>
}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	58022000 	.word	0x58022000

08003c38 <L6474_Board_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_Reset(uint8_t deviceId)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_RESET); 
 8003c42:	2200      	movs	r2, #0
 8003c44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c48:	4803      	ldr	r0, [pc, #12]	; (8003c58 <L6474_Board_Reset+0x20>)
 8003c4a:	f001 fe25 	bl	8005898 <HAL_GPIO_WritePin>
}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	58022000 	.word	0x58022000

08003c5c <L6474_Board_SetDirectionGpio>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] gpioState state of the direction gpio (0 to reset, 1 to set)
 * @retval None
 **********************************************************/
void L6474_Board_SetDirectionGpio(uint8_t deviceId, uint8_t gpioState)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	460a      	mov	r2, r1
 8003c66:	71fb      	strb	r3, [r7, #7]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	71bb      	strb	r3, [r7, #6]
  switch (deviceId)
 8003c6c:	79fb      	ldrb	r3, [r7, #7]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d006      	beq.n	8003c80 <L6474_Board_SetDirectionGpio+0x24>
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	dc1a      	bgt.n	8003cac <L6474_Board_SetDirectionGpio+0x50>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d010      	beq.n	8003c9c <L6474_Board_SetDirectionGpio+0x40>
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d007      	beq.n	8003c8e <L6474_Board_SetDirectionGpio+0x32>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
      break;
    default:
      ;
  }
}
 8003c7e:	e015      	b.n	8003cac <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN, (GPIO_PinState)gpioState); 
 8003c80:	79bb      	ldrb	r3, [r7, #6]
 8003c82:	461a      	mov	r2, r3
 8003c84:	2110      	movs	r1, #16
 8003c86:	480b      	ldr	r0, [pc, #44]	; (8003cb4 <L6474_Board_SetDirectionGpio+0x58>)
 8003c88:	f001 fe06 	bl	8005898 <HAL_GPIO_WritePin>
      break;
 8003c8c:	e00e      	b.n	8003cac <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN, (GPIO_PinState)gpioState); 
 8003c8e:	79bb      	ldrb	r3, [r7, #6]
 8003c90:	461a      	mov	r2, r3
 8003c92:	2120      	movs	r1, #32
 8003c94:	4807      	ldr	r0, [pc, #28]	; (8003cb4 <L6474_Board_SetDirectionGpio+0x58>)
 8003c96:	f001 fdff 	bl	8005898 <HAL_GPIO_WritePin>
      break;
 8003c9a:	e007      	b.n	8003cac <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
 8003c9c:	79bb      	ldrb	r3, [r7, #6]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ca4:	4804      	ldr	r0, [pc, #16]	; (8003cb8 <L6474_Board_SetDirectionGpio+0x5c>)
 8003ca6:	f001 fdf7 	bl	8005898 <HAL_GPIO_WritePin>
      break;
 8003caa:	bf00      	nop
}
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	58020400 	.word	0x58020400
 8003cb8:	58022000 	.word	0x58022000

08003cbc <L6474_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by L6474
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t L6474_Board_SpiInit(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 8003cc2:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <L6474_Board_SpiInit+0x6c>)
 8003cc4:	4a19      	ldr	r2, [pc, #100]	; (8003d2c <L6474_Board_SpiInit+0x70>)
 8003cc6:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 8003cc8:	4b17      	ldr	r3, [pc, #92]	; (8003d28 <L6474_Board_SpiInit+0x6c>)
 8003cca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cce:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8003cd0:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <L6474_Board_SpiInit+0x6c>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 8003cd6:	4b14      	ldr	r3, [pc, #80]	; (8003d28 <L6474_Board_SpiInit+0x6c>)
 8003cd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cdc:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 8003cde:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <L6474_Board_SpiInit+0x6c>)
 8003ce0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ce4:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8003ce6:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <L6474_Board_SpiInit+0x6c>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	629a      	str	r2, [r3, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 8003cec:	4b0e      	ldr	r3, [pc, #56]	; (8003d28 <L6474_Board_SpiInit+0x6c>)
 8003cee:	2207      	movs	r2, #7
 8003cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8003cf2:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <L6474_Board_SpiInit+0x6c>)
 8003cf4:	2207      	movs	r2, #7
 8003cf6:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <L6474_Board_SpiInit+0x6c>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <L6474_Board_SpiInit+0x6c>)
 8003d00:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003d04:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8003d06:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <L6474_Board_SpiInit+0x6c>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	625a      	str	r2, [r3, #36]	; 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <L6474_Board_SpiInit+0x6c>)
 8003d0e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003d12:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 8003d14:	4804      	ldr	r0, [pc, #16]	; (8003d28 <L6474_Board_SpiInit+0x6c>)
 8003d16:	f004 ff93 	bl	8008c40 <HAL_SPI_Init>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20000218 	.word	0x20000218
 8003d2c:	40003800 	.word	0x40003800

08003d30 <L6474_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t L6474_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d44:	4816      	ldr	r0, [pc, #88]	; (8003da0 <L6474_Board_SpiWriteBytes+0x70>)
 8003d46:	f001 fda7 	bl	8005898 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	e016      	b.n	8003d7e <L6474_Board_SpiWriteBytes+0x4e>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 8003d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	2301      	movs	r3, #1
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	68f9      	ldr	r1, [r7, #12]
 8003d5c:	4811      	ldr	r0, [pc, #68]	; (8003da4 <L6474_Board_SpiWriteBytes+0x74>)
 8003d5e:	f005 f875 	bl	8008e4c <HAL_SPI_TransmitReceive>
 8003d62:	4603      	mov	r3, r0
 8003d64:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10d      	bne.n	8003d88 <L6474_Board_SpiWriteBytes+0x58>
    {
      break;
    }
    pByteToTransmit++;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	3301      	adds	r3, #1
 8003d76:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d3e4      	bcc.n	8003d50 <L6474_Board_SpiWriteBytes+0x20>
 8003d86:	e000      	b.n	8003d8a <L6474_Board_SpiWriteBytes+0x5a>
      break;
 8003d88:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d90:	4803      	ldr	r0, [pc, #12]	; (8003da0 <L6474_Board_SpiWriteBytes+0x70>)
 8003d92:	f001 fd81 	bl	8005898 <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 8003d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	58020400 	.word	0x58020400
 8003da4:	20000218 	.word	0x20000218

08003da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003de0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003dac:	f7ff fc0a 	bl	80035c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003db0:	480c      	ldr	r0, [pc, #48]	; (8003de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003db2:	490d      	ldr	r1, [pc, #52]	; (8003de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003db4:	4a0d      	ldr	r2, [pc, #52]	; (8003dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003db8:	e002      	b.n	8003dc0 <LoopCopyDataInit>

08003dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dbe:	3304      	adds	r3, #4

08003dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dc4:	d3f9      	bcc.n	8003dba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003dc8:	4c0a      	ldr	r4, [pc, #40]	; (8003df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dcc:	e001      	b.n	8003dd2 <LoopFillZerobss>

08003dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dd0:	3204      	adds	r2, #4

08003dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dd4:	d3fb      	bcc.n	8003dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003dd6:	f00a fc6f 	bl	800e6b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dda:	f7ff f883 	bl	8002ee4 <main>
  bx  lr
 8003dde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003de8:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8003dec:	0800f10c 	.word	0x0800f10c
  ldr r2, =_sbss
 8003df0:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8003df4:	20004f50 	.word	0x20004f50

08003df8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003df8:	e7fe      	b.n	8003df8 <ADC3_IRQHandler>
	...

08003dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e02:	2003      	movs	r0, #3
 8003e04:	f001 fb65 	bl	80054d2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e08:	f002 fb7c 	bl	8006504 <HAL_RCC_GetSysClockFreq>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <HAL_Init+0x68>)
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	4913      	ldr	r1, [pc, #76]	; (8003e68 <HAL_Init+0x6c>)
 8003e1a:	5ccb      	ldrb	r3, [r1, r3]
 8003e1c:	f003 031f 	and.w	r3, r3, #31
 8003e20:	fa22 f303 	lsr.w	r3, r2, r3
 8003e24:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e26:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <HAL_Init+0x68>)
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	4a0e      	ldr	r2, [pc, #56]	; (8003e68 <HAL_Init+0x6c>)
 8003e30:	5cd3      	ldrb	r3, [r2, r3]
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3c:	4a0b      	ldr	r2, [pc, #44]	; (8003e6c <HAL_Init+0x70>)
 8003e3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e40:	4a0b      	ldr	r2, [pc, #44]	; (8003e70 <HAL_Init+0x74>)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e46:	2000      	movs	r0, #0
 8003e48:	f7ff fafa 	bl	8003440 <HAL_InitTick>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e002      	b.n	8003e5c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e56:	f7ff fad5 	bl	8003404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	58024400 	.word	0x58024400
 8003e68:	0800f090 	.word	0x0800f090
 8003e6c:	2000015c 	.word	0x2000015c
 8003e70:	20000158 	.word	0x20000158

08003e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_IncTick+0x20>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_IncTick+0x24>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4413      	add	r3, r2
 8003e84:	4a04      	ldr	r2, [pc, #16]	; (8003e98 <HAL_IncTick+0x24>)
 8003e86:	6013      	str	r3, [r2, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20000164 	.word	0x20000164
 8003e98:	20004efc 	.word	0x20004efc

08003e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <HAL_GetTick+0x14>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	20004efc 	.word	0x20004efc

08003eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ebc:	f7ff ffee 	bl	8003e9c <HAL_GetTick>
 8003ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d005      	beq.n	8003eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <HAL_Delay+0x44>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003eda:	bf00      	nop
 8003edc:	f7ff ffde 	bl	8003e9c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d8f7      	bhi.n	8003edc <HAL_Delay+0x28>
  {
  }
}
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000164 	.word	0x20000164

08003efc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003f00:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <HAL_GetREVID+0x14>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	0c1b      	lsrs	r3, r3, #16
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	5c001000 	.word	0x5c001000

08003f14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	609a      	str	r2, [r3, #8]
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	609a      	str	r2, [r3, #8]
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3360      	adds	r3, #96	; 0x60
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	431a      	orrs	r2, r3
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003fb0:	bf00      	nop
 8003fb2:	371c      	adds	r7, #28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f003 031f 	and.w	r3, r3, #31
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	611a      	str	r2, [r3, #16]
}
 8003fe2:	bf00      	nop
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b087      	sub	sp, #28
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	3360      	adds	r3, #96	; 0x60
 8003ffe:	461a      	mov	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	431a      	orrs	r2, r3
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	601a      	str	r2, [r3, #0]
  }
}
 8004018:	bf00      	nop
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800404a:	b480      	push	{r7}
 800404c:	b087      	sub	sp, #28
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3330      	adds	r3, #48	; 0x30
 800405a:	461a      	mov	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	0a1b      	lsrs	r3, r3, #8
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	f003 030c 	and.w	r3, r3, #12
 8004066:	4413      	add	r3, r2
 8004068:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	211f      	movs	r1, #31
 8004076:	fa01 f303 	lsl.w	r3, r1, r3
 800407a:	43db      	mvns	r3, r3
 800407c:	401a      	ands	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	0e9b      	lsrs	r3, r3, #26
 8004082:	f003 011f 	and.w	r1, r3, #31
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	fa01 f303 	lsl.w	r3, r1, r3
 8004090:	431a      	orrs	r2, r3
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004096:	bf00      	nop
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b087      	sub	sp, #28
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3314      	adds	r3, #20
 80040b2:	461a      	mov	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	0e5b      	lsrs	r3, r3, #25
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	4413      	add	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	0d1b      	lsrs	r3, r3, #20
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	2107      	movs	r1, #7
 80040d0:	fa01 f303 	lsl.w	r3, r1, r3
 80040d4:	43db      	mvns	r3, r3
 80040d6:	401a      	ands	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	0d1b      	lsrs	r3, r3, #20
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	fa01 f303 	lsl.w	r3, r1, r3
 80040e6:	431a      	orrs	r2, r3
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80040ec:	bf00      	nop
 80040ee:	371c      	adds	r7, #28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004110:	43db      	mvns	r3, r3
 8004112:	401a      	ands	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f003 0318 	and.w	r3, r3, #24
 800411a:	4908      	ldr	r1, [pc, #32]	; (800413c <LL_ADC_SetChannelSingleDiff+0x44>)
 800411c:	40d9      	lsrs	r1, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	400b      	ands	r3, r1
 8004122:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004126:	431a      	orrs	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800412e:	bf00      	nop
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	000fffff 	.word	0x000fffff

08004140 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 031f 	and.w	r3, r3, #31
}
 8004150:	4618      	mov	r0, r3
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	4b04      	ldr	r3, [pc, #16]	; (8004198 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004186:	4013      	ands	r3, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6093      	str	r3, [r2, #8]
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	5fffffc0 	.word	0x5fffffc0

0800419c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b0:	d101      	bne.n	80041b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <LL_ADC_EnableInternalRegulator+0x24>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	6fffffc0 	.word	0x6fffffc0

080041ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004200:	d101      	bne.n	8004206 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <LL_ADC_Enable+0x24>)
 8004222:	4013      	ands	r3, r2
 8004224:	f043 0201 	orr.w	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	7fffffc0 	.word	0x7fffffc0

0800423c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <LL_ADC_IsEnabled+0x18>
 8004250:	2301      	movs	r3, #1
 8004252:	e000      	b.n	8004256 <LL_ADC_IsEnabled+0x1a>
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
	...

08004264 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	4b05      	ldr	r3, [pc, #20]	; (8004288 <LL_ADC_REG_StartConversion+0x24>)
 8004272:	4013      	ands	r3, r2
 8004274:	f043 0204 	orr.w	r2, r3, #4
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	7fffffc0 	.word	0x7fffffc0

0800428c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b04      	cmp	r3, #4
 800429e:	d101      	bne.n	80042a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d101      	bne.n	80042ca <LL_ADC_INJ_IsConversionOngoing+0x18>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042d8:	b590      	push	{r4, r7, lr}
 80042da:	b089      	sub	sp, #36	; 0x24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e18e      	b.n	8004610 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d109      	bne.n	8004314 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7fc fa1f 	bl	8000744 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ff3f 	bl	800419c <LL_ADC_IsDeepPowerDownEnabled>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d004      	beq.n	800432e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff ff25 	bl	8004178 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff ff5a 	bl	80041ec <LL_ADC_IsInternalRegulatorEnabled>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d114      	bne.n	8004368 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff ff3e 	bl	80041c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004348:	4b9a      	ldr	r3, [pc, #616]	; (80045b4 <HAL_ADC_Init+0x2dc>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	099b      	lsrs	r3, r3, #6
 800434e:	4a9a      	ldr	r2, [pc, #616]	; (80045b8 <HAL_ADC_Init+0x2e0>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	099b      	lsrs	r3, r3, #6
 8004356:	3301      	adds	r3, #1
 8004358:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800435a:	e002      	b.n	8004362 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	3b01      	subs	r3, #1
 8004360:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1f9      	bne.n	800435c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff ff3d 	bl	80041ec <LL_ADC_IsInternalRegulatorEnabled>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10d      	bne.n	8004394 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437c:	f043 0210 	orr.w	r2, r3, #16
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004388:	f043 0201 	orr.w	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff ff77 	bl	800428c <LL_ADC_REG_IsConversionOngoing>
 800439e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f040 8128 	bne.w	80045fe <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f040 8124 	bne.w	80045fe <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80043be:	f043 0202 	orr.w	r2, r3, #2
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff ff36 	bl	800423c <LL_ADC_IsEnabled>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d136      	bne.n	8004444 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a78      	ldr	r2, [pc, #480]	; (80045bc <HAL_ADC_Init+0x2e4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d004      	beq.n	80043ea <HAL_ADC_Init+0x112>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a76      	ldr	r2, [pc, #472]	; (80045c0 <HAL_ADC_Init+0x2e8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d10e      	bne.n	8004408 <HAL_ADC_Init+0x130>
 80043ea:	4874      	ldr	r0, [pc, #464]	; (80045bc <HAL_ADC_Init+0x2e4>)
 80043ec:	f7ff ff26 	bl	800423c <LL_ADC_IsEnabled>
 80043f0:	4604      	mov	r4, r0
 80043f2:	4873      	ldr	r0, [pc, #460]	; (80045c0 <HAL_ADC_Init+0x2e8>)
 80043f4:	f7ff ff22 	bl	800423c <LL_ADC_IsEnabled>
 80043f8:	4603      	mov	r3, r0
 80043fa:	4323      	orrs	r3, r4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bf0c      	ite	eq
 8004400:	2301      	moveq	r3, #1
 8004402:	2300      	movne	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	e008      	b.n	800441a <HAL_ADC_Init+0x142>
 8004408:	486e      	ldr	r0, [pc, #440]	; (80045c4 <HAL_ADC_Init+0x2ec>)
 800440a:	f7ff ff17 	bl	800423c <LL_ADC_IsEnabled>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	bf0c      	ite	eq
 8004414:	2301      	moveq	r3, #1
 8004416:	2300      	movne	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d012      	beq.n	8004444 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a66      	ldr	r2, [pc, #408]	; (80045bc <HAL_ADC_Init+0x2e4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d004      	beq.n	8004432 <HAL_ADC_Init+0x15a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a64      	ldr	r2, [pc, #400]	; (80045c0 <HAL_ADC_Init+0x2e8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d101      	bne.n	8004436 <HAL_ADC_Init+0x15e>
 8004432:	4a65      	ldr	r2, [pc, #404]	; (80045c8 <HAL_ADC_Init+0x2f0>)
 8004434:	e000      	b.n	8004438 <HAL_ADC_Init+0x160>
 8004436:	4a65      	ldr	r2, [pc, #404]	; (80045cc <HAL_ADC_Init+0x2f4>)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f7ff fd68 	bl	8003f14 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004444:	f7ff fd5a 	bl	8003efc <HAL_GetREVID>
 8004448:	4603      	mov	r3, r0
 800444a:	f241 0203 	movw	r2, #4099	; 0x1003
 800444e:	4293      	cmp	r3, r2
 8004450:	d914      	bls.n	800447c <HAL_ADC_Init+0x1a4>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	2b10      	cmp	r3, #16
 8004458:	d110      	bne.n	800447c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	7d5b      	ldrb	r3, [r3, #21]
 800445e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004464:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800446a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	7f1b      	ldrb	r3, [r3, #28]
 8004470:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004472:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004474:	f043 030c 	orr.w	r3, r3, #12
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	e00d      	b.n	8004498 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	7d5b      	ldrb	r3, [r3, #21]
 8004480:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004486:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800448c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	7f1b      	ldrb	r3, [r3, #28]
 8004492:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004494:	4313      	orrs	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	7f1b      	ldrb	r3, [r3, #28]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d106      	bne.n	80044ae <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	045b      	lsls	r3, r3, #17
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	4b3f      	ldr	r3, [pc, #252]	; (80045d0 <HAL_ADC_Init+0x2f8>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	69b9      	ldr	r1, [r7, #24]
 80044da:	430b      	orrs	r3, r1
 80044dc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff fed2 	bl	800428c <LL_ADC_REG_IsConversionOngoing>
 80044e8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff fedf 	bl	80042b2 <LL_ADC_INJ_IsConversionOngoing>
 80044f4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d14a      	bne.n	8004592 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d147      	bne.n	8004592 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	7d1b      	ldrb	r3, [r3, #20]
 8004506:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800450c:	4313      	orrs	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	4b2f      	ldr	r3, [pc, #188]	; (80045d4 <HAL_ADC_Init+0x2fc>)
 8004518:	4013      	ands	r3, r2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6812      	ldr	r2, [r2, #0]
 800451e:	69b9      	ldr	r1, [r7, #24]
 8004520:	430b      	orrs	r3, r1
 8004522:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800452a:	2b01      	cmp	r3, #1
 800452c:	d11b      	bne.n	8004566 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	4b27      	ldr	r3, [pc, #156]	; (80045d8 <HAL_ADC_Init+0x300>)
 800453c:	4013      	ands	r3, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004542:	3a01      	subs	r2, #1
 8004544:	0411      	lsls	r1, r2, #16
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800454a:	4311      	orrs	r1, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004550:	4311      	orrs	r1, r2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004556:	430a      	orrs	r2, r1
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	611a      	str	r2, [r3, #16]
 8004564:	e007      	b.n	8004576 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0201 	bic.w	r2, r2, #1
 8004574:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 fde9 	bl	8005164 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d120      	bne.n	80045dc <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	f023 010f 	bic.w	r1, r3, #15
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	1e5a      	subs	r2, r3, #1
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	631a      	str	r2, [r3, #48]	; 0x30
 80045b2:	e01b      	b.n	80045ec <HAL_ADC_Init+0x314>
 80045b4:	20000158 	.word	0x20000158
 80045b8:	053e2d63 	.word	0x053e2d63
 80045bc:	40022000 	.word	0x40022000
 80045c0:	40022100 	.word	0x40022100
 80045c4:	58026000 	.word	0x58026000
 80045c8:	40022300 	.word	0x40022300
 80045cc:	58026300 	.word	0x58026300
 80045d0:	fff0c003 	.word	0xfff0c003
 80045d4:	ffffbffc 	.word	0xffffbffc
 80045d8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 020f 	bic.w	r2, r2, #15
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f0:	f023 0303 	bic.w	r3, r3, #3
 80045f4:	f043 0201 	orr.w	r2, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	655a      	str	r2, [r3, #84]	; 0x54
 80045fc:	e007      	b.n	800460e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004602:	f043 0210 	orr.w	r2, r3, #16
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800460e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3724      	adds	r7, #36	; 0x24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd90      	pop	{r4, r7, pc}

08004618 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a5c      	ldr	r2, [pc, #368]	; (8004798 <HAL_ADC_Start+0x180>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d004      	beq.n	8004634 <HAL_ADC_Start+0x1c>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a5b      	ldr	r2, [pc, #364]	; (800479c <HAL_ADC_Start+0x184>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d101      	bne.n	8004638 <HAL_ADC_Start+0x20>
 8004634:	4b5a      	ldr	r3, [pc, #360]	; (80047a0 <HAL_ADC_Start+0x188>)
 8004636:	e000      	b.n	800463a <HAL_ADC_Start+0x22>
 8004638:	4b5a      	ldr	r3, [pc, #360]	; (80047a4 <HAL_ADC_Start+0x18c>)
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff fd80 	bl	8004140 <LL_ADC_GetMultimode>
 8004640:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fe20 	bl	800428c <LL_ADC_REG_IsConversionOngoing>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	f040 809a 	bne.w	8004788 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_ADC_Start+0x4a>
 800465e:	2302      	movs	r3, #2
 8004660:	e095      	b.n	800478e <HAL_ADC_Start+0x176>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fcf0 	bl	8005050 <ADC_Enable>
 8004670:	4603      	mov	r3, r0
 8004672:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004674:	7dfb      	ldrb	r3, [r7, #23]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f040 8081 	bne.w	800477e <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004680:	4b49      	ldr	r3, [pc, #292]	; (80047a8 <HAL_ADC_Start+0x190>)
 8004682:	4013      	ands	r3, r2
 8004684:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a42      	ldr	r2, [pc, #264]	; (800479c <HAL_ADC_Start+0x184>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d002      	beq.n	800469c <HAL_ADC_Start+0x84>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	e000      	b.n	800469e <HAL_ADC_Start+0x86>
 800469c:	4b3e      	ldr	r3, [pc, #248]	; (8004798 <HAL_ADC_Start+0x180>)
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6812      	ldr	r2, [r2, #0]
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d002      	beq.n	80046ac <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d105      	bne.n	80046b8 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c4:	d106      	bne.n	80046d4 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ca:	f023 0206 	bic.w	r2, r3, #6
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	659a      	str	r2, [r3, #88]	; 0x58
 80046d2:	e002      	b.n	80046da <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	221c      	movs	r2, #28
 80046e0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a2b      	ldr	r2, [pc, #172]	; (800479c <HAL_ADC_Start+0x184>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d002      	beq.n	80046fa <HAL_ADC_Start+0xe2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	e000      	b.n	80046fc <HAL_ADC_Start+0xe4>
 80046fa:	4b27      	ldr	r3, [pc, #156]	; (8004798 <HAL_ADC_Start+0x180>)
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6812      	ldr	r2, [r2, #0]
 8004700:	4293      	cmp	r3, r2
 8004702:	d008      	beq.n	8004716 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2b05      	cmp	r3, #5
 800470e:	d002      	beq.n	8004716 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2b09      	cmp	r3, #9
 8004714:	d114      	bne.n	8004740 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d007      	beq.n	8004734 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004728:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800472c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff fd93 	bl	8004264 <LL_ADC_REG_StartConversion>
 800473e:	e025      	b.n	800478c <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004744:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a12      	ldr	r2, [pc, #72]	; (800479c <HAL_ADC_Start+0x184>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d002      	beq.n	800475c <HAL_ADC_Start+0x144>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	e000      	b.n	800475e <HAL_ADC_Start+0x146>
 800475c:	4b0e      	ldr	r3, [pc, #56]	; (8004798 <HAL_ADC_Start+0x180>)
 800475e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00f      	beq.n	800478c <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004770:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004774:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	655a      	str	r2, [r3, #84]	; 0x54
 800477c:	e006      	b.n	800478c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004786:	e001      	b.n	800478c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004788:	2302      	movs	r3, #2
 800478a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800478c:	7dfb      	ldrb	r3, [r7, #23]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40022000 	.word	0x40022000
 800479c:	40022100 	.word	0x40022100
 80047a0:	40022300 	.word	0x40022300
 80047a4:	58026300 	.word	0x58026300
 80047a8:	fffff0fe 	.word	0xfffff0fe

080047ac <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a72      	ldr	r2, [pc, #456]	; (8004984 <HAL_ADC_PollForConversion+0x1d8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d004      	beq.n	80047ca <HAL_ADC_PollForConversion+0x1e>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a70      	ldr	r2, [pc, #448]	; (8004988 <HAL_ADC_PollForConversion+0x1dc>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d101      	bne.n	80047ce <HAL_ADC_PollForConversion+0x22>
 80047ca:	4b70      	ldr	r3, [pc, #448]	; (800498c <HAL_ADC_PollForConversion+0x1e0>)
 80047cc:	e000      	b.n	80047d0 <HAL_ADC_PollForConversion+0x24>
 80047ce:	4b70      	ldr	r3, [pc, #448]	; (8004990 <HAL_ADC_PollForConversion+0x1e4>)
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff fcb5 	bl	8004140 <LL_ADC_GetMultimode>
 80047d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d102      	bne.n	80047e6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80047e0:	2308      	movs	r3, #8
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	e037      	b.n	8004856 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b05      	cmp	r3, #5
 80047f0:	d002      	beq.n	80047f8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2b09      	cmp	r3, #9
 80047f6:	d111      	bne.n	800481c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d007      	beq.n	8004816 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480a:	f043 0220 	orr.w	r2, r3, #32
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e0b1      	b.n	800497a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004816:	2304      	movs	r3, #4
 8004818:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800481a:	e01c      	b.n	8004856 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a58      	ldr	r2, [pc, #352]	; (8004984 <HAL_ADC_PollForConversion+0x1d8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d004      	beq.n	8004830 <HAL_ADC_PollForConversion+0x84>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a57      	ldr	r2, [pc, #348]	; (8004988 <HAL_ADC_PollForConversion+0x1dc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d101      	bne.n	8004834 <HAL_ADC_PollForConversion+0x88>
 8004830:	4b56      	ldr	r3, [pc, #344]	; (800498c <HAL_ADC_PollForConversion+0x1e0>)
 8004832:	e000      	b.n	8004836 <HAL_ADC_PollForConversion+0x8a>
 8004834:	4b56      	ldr	r3, [pc, #344]	; (8004990 <HAL_ADC_PollForConversion+0x1e4>)
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff fc90 	bl	800415c <LL_ADC_GetMultiDMATransfer>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004846:	f043 0220 	orr.w	r2, r3, #32
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e093      	b.n	800497a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004852:	2304      	movs	r3, #4
 8004854:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004856:	f7ff fb21 	bl	8003e9c <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800485c:	e021      	b.n	80048a2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004864:	d01d      	beq.n	80048a2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004866:	f7ff fb19 	bl	8003e9c <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d302      	bcc.n	800487c <HAL_ADC_PollForConversion+0xd0>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d112      	bne.n	80048a2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	4013      	ands	r3, r2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10b      	bne.n	80048a2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488e:	f043 0204 	orr.w	r2, r3, #4
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e06b      	b.n	800497a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	4013      	ands	r3, r2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0d6      	beq.n	800485e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff fbaf 	bl	8004024 <LL_ADC_REG_IsTriggerSourceSWStart>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01c      	beq.n	8004906 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	7d5b      	ldrb	r3, [r3, #21]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d118      	bne.n	8004906 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d111      	bne.n	8004906 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d105      	bne.n	8004906 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fe:	f043 0201 	orr.w	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a1f      	ldr	r2, [pc, #124]	; (8004988 <HAL_ADC_PollForConversion+0x1dc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d002      	beq.n	8004916 <HAL_ADC_PollForConversion+0x16a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	e000      	b.n	8004918 <HAL_ADC_PollForConversion+0x16c>
 8004916:	4b1b      	ldr	r3, [pc, #108]	; (8004984 <HAL_ADC_PollForConversion+0x1d8>)
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	4293      	cmp	r3, r2
 800491e:	d008      	beq.n	8004932 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d005      	beq.n	8004932 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2b05      	cmp	r3, #5
 800492a:	d002      	beq.n	8004932 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2b09      	cmp	r3, #9
 8004930:	d104      	bne.n	800493c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	e00c      	b.n	8004956 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a11      	ldr	r2, [pc, #68]	; (8004988 <HAL_ADC_PollForConversion+0x1dc>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d002      	beq.n	800494c <HAL_ADC_PollForConversion+0x1a0>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	e000      	b.n	800494e <HAL_ADC_PollForConversion+0x1a2>
 800494c:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <HAL_ADC_PollForConversion+0x1d8>)
 800494e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	2b08      	cmp	r3, #8
 800495a:	d104      	bne.n	8004966 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2208      	movs	r2, #8
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	e008      	b.n	8004978 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d103      	bne.n	8004978 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	220c      	movs	r2, #12
 8004976:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3720      	adds	r7, #32
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40022000 	.word	0x40022000
 8004988:	40022100 	.word	0x40022100
 800498c:	40022300 	.word	0x40022300
 8004990:	58026300 	.word	0x58026300

08004994 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
	...

080049b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80049b0:	b590      	push	{r4, r7, lr}
 80049b2:	b0a1      	sub	sp, #132	; 0x84
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	4a9d      	ldr	r2, [pc, #628]	; (8004c40 <HAL_ADC_ConfigChannel+0x290>)
 80049ca:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_ADC_ConfigChannel+0x2a>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e321      	b.n	800501e <HAL_ADC_ConfigChannel+0x66e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff fc50 	bl	800428c <LL_ADC_REG_IsConversionOngoing>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f040 8306 	bne.w	8005000 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d108      	bne.n	8004a12 <HAL_ADC_ConfigChannel+0x62>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	0e9b      	lsrs	r3, r3, #26
 8004a06:	f003 031f 	and.w	r3, r3, #31
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	e016      	b.n	8004a40 <HAL_ADC_ConfigChannel+0x90>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a1a:	fa93 f3a3 	rbit	r3, r3
 8004a1e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a22:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004a24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004a2a:	2320      	movs	r3, #32
 8004a2c:	e003      	b.n	8004a36 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004a2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a30:	fab3 f383 	clz	r3, r3
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6812      	ldr	r2, [r2, #0]
 8004a44:	69d1      	ldr	r1, [r2, #28]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6812      	ldr	r2, [r2, #0]
 8004a4a:	430b      	orrs	r3, r1
 8004a4c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	6859      	ldr	r1, [r3, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f7ff faf5 	bl	800404a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7ff fc11 	bl	800428c <LL_ADC_REG_IsConversionOngoing>
 8004a6a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7ff fc1e 	bl	80042b2 <LL_ADC_INJ_IsConversionOngoing>
 8004a76:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f040 80b3 	bne.w	8004be6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f040 80af 	bne.w	8004be6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	6819      	ldr	r1, [r3, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	461a      	mov	r2, r3
 8004a96:	f7ff fb04 	bl	80040a2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004a9a:	4b6a      	ldr	r3, [pc, #424]	; (8004c44 <HAL_ADC_ConfigChannel+0x294>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004aa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aa6:	d10b      	bne.n	8004ac0 <HAL_ADC_ConfigChannel+0x110>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	695a      	ldr	r2, [r3, #20]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	089b      	lsrs	r3, r3, #2
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	e01d      	b.n	8004afc <HAL_ADC_ConfigChannel+0x14c>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f003 0310 	and.w	r3, r3, #16
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10b      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x136>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	695a      	ldr	r2, [r3, #20]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	089b      	lsrs	r3, r3, #2
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	e00a      	b.n	8004afc <HAL_ADC_ConfigChannel+0x14c>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	089b      	lsrs	r3, r3, #2
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d027      	beq.n	8004b56 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6919      	ldr	r1, [r3, #16]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b14:	f7ff fa32 	bl	8003f7c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	6919      	ldr	r1, [r3, #16]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	7e5b      	ldrb	r3, [r3, #25]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d102      	bne.n	8004b2e <HAL_ADC_ConfigChannel+0x17e>
 8004b28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b2c:	e000      	b.n	8004b30 <HAL_ADC_ConfigChannel+0x180>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	461a      	mov	r2, r3
 8004b32:	f7ff fa5c 	bl	8003fee <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	6919      	ldr	r1, [r3, #16]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	7e1b      	ldrb	r3, [r3, #24]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d102      	bne.n	8004b4c <HAL_ADC_ConfigChannel+0x19c>
 8004b46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b4a:	e000      	b.n	8004b4e <HAL_ADC_ConfigChannel+0x19e>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	461a      	mov	r2, r3
 8004b50:	f7ff fa34 	bl	8003fbc <LL_ADC_SetDataRightShift>
 8004b54:	e047      	b.n	8004be6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	069b      	lsls	r3, r3, #26
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d107      	bne.n	8004b7a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b78:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	069b      	lsls	r3, r3, #26
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d107      	bne.n	8004b9e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b9c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ba4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	069b      	lsls	r3, r3, #26
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d107      	bne.n	8004bc2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bc0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	069b      	lsls	r3, r3, #26
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d107      	bne.n	8004be6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004be4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fb26 	bl	800423c <LL_ADC_IsEnabled>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f040 820d 	bne.w	8005012 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6818      	ldr	r0, [r3, #0]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	6819      	ldr	r1, [r3, #0]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	461a      	mov	r2, r3
 8004c06:	f7ff fa77 	bl	80040f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	4a0c      	ldr	r2, [pc, #48]	; (8004c40 <HAL_ADC_ConfigChannel+0x290>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	f040 8133 	bne.w	8004e7c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d110      	bne.n	8004c48 <HAL_ADC_ConfigChannel+0x298>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	0e9b      	lsrs	r3, r3, #26
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	f003 031f 	and.w	r3, r3, #31
 8004c32:	2b09      	cmp	r3, #9
 8004c34:	bf94      	ite	ls
 8004c36:	2301      	movls	r3, #1
 8004c38:	2300      	movhi	r3, #0
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	e01e      	b.n	8004c7c <HAL_ADC_ConfigChannel+0x2cc>
 8004c3e:	bf00      	nop
 8004c40:	47ff0000 	.word	0x47ff0000
 8004c44:	5c001000 	.word	0x5c001000
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c50:	fa93 f3a3 	rbit	r3, r3
 8004c54:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c58:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004c60:	2320      	movs	r3, #32
 8004c62:	e003      	b.n	8004c6c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c66:	fab3 f383 	clz	r3, r3
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	f003 031f 	and.w	r3, r3, #31
 8004c72:	2b09      	cmp	r3, #9
 8004c74:	bf94      	ite	ls
 8004c76:	2301      	movls	r3, #1
 8004c78:	2300      	movhi	r3, #0
 8004c7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d079      	beq.n	8004d74 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d107      	bne.n	8004c9c <HAL_ADC_ConfigChannel+0x2ec>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	0e9b      	lsrs	r3, r3, #26
 8004c92:	3301      	adds	r3, #1
 8004c94:	069b      	lsls	r3, r3, #26
 8004c96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c9a:	e015      	b.n	8004cc8 <HAL_ADC_ConfigChannel+0x318>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca4:	fa93 f3a3 	rbit	r3, r3
 8004ca8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cac:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004cb4:	2320      	movs	r3, #32
 8004cb6:	e003      	b.n	8004cc0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cba:	fab3 f383 	clz	r3, r3
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	069b      	lsls	r3, r3, #26
 8004cc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d109      	bne.n	8004ce8 <HAL_ADC_ConfigChannel+0x338>
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	0e9b      	lsrs	r3, r3, #26
 8004cda:	3301      	adds	r3, #1
 8004cdc:	f003 031f 	and.w	r3, r3, #31
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce6:	e017      	b.n	8004d18 <HAL_ADC_ConfigChannel+0x368>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf0:	fa93 f3a3 	rbit	r3, r3
 8004cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004d00:	2320      	movs	r3, #32
 8004d02:	e003      	b.n	8004d0c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d06:	fab3 f383 	clz	r3, r3
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	f003 031f 	and.w	r3, r3, #31
 8004d12:	2101      	movs	r1, #1
 8004d14:	fa01 f303 	lsl.w	r3, r1, r3
 8004d18:	ea42 0103 	orr.w	r1, r2, r3
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10a      	bne.n	8004d3e <HAL_ADC_ConfigChannel+0x38e>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	0e9b      	lsrs	r3, r3, #26
 8004d2e:	3301      	adds	r3, #1
 8004d30:	f003 021f 	and.w	r2, r3, #31
 8004d34:	4613      	mov	r3, r2
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	4413      	add	r3, r2
 8004d3a:	051b      	lsls	r3, r3, #20
 8004d3c:	e018      	b.n	8004d70 <HAL_ADC_ConfigChannel+0x3c0>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d46:	fa93 f3a3 	rbit	r3, r3
 8004d4a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004d56:	2320      	movs	r3, #32
 8004d58:	e003      	b.n	8004d62 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5c:	fab3 f383 	clz	r3, r3
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	3301      	adds	r3, #1
 8004d64:	f003 021f 	and.w	r2, r3, #31
 8004d68:	4613      	mov	r3, r2
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	4413      	add	r3, r2
 8004d6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d70:	430b      	orrs	r3, r1
 8004d72:	e07e      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d107      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x3e0>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	0e9b      	lsrs	r3, r3, #26
 8004d86:	3301      	adds	r3, #1
 8004d88:	069b      	lsls	r3, r3, #26
 8004d8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d8e:	e015      	b.n	8004dbc <HAL_ADC_ConfigChannel+0x40c>
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d98:	fa93 f3a3 	rbit	r3, r3
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004da8:	2320      	movs	r3, #32
 8004daa:	e003      	b.n	8004db4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dae:	fab3 f383 	clz	r3, r3
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	3301      	adds	r3, #1
 8004db6:	069b      	lsls	r3, r3, #26
 8004db8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d109      	bne.n	8004ddc <HAL_ADC_ConfigChannel+0x42c>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	0e9b      	lsrs	r3, r3, #26
 8004dce:	3301      	adds	r3, #1
 8004dd0:	f003 031f 	and.w	r3, r3, #31
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dda:	e017      	b.n	8004e0c <HAL_ADC_ConfigChannel+0x45c>
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	fa93 f3a3 	rbit	r3, r3
 8004de8:	61bb      	str	r3, [r7, #24]
  return result;
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004df4:	2320      	movs	r3, #32
 8004df6:	e003      	b.n	8004e00 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	fab3 f383 	clz	r3, r3
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	3301      	adds	r3, #1
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	2101      	movs	r1, #1
 8004e08:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0c:	ea42 0103 	orr.w	r1, r2, r3
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10d      	bne.n	8004e38 <HAL_ADC_ConfigChannel+0x488>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	0e9b      	lsrs	r3, r3, #26
 8004e22:	3301      	adds	r3, #1
 8004e24:	f003 021f 	and.w	r2, r3, #31
 8004e28:	4613      	mov	r3, r2
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	4413      	add	r3, r2
 8004e2e:	3b1e      	subs	r3, #30
 8004e30:	051b      	lsls	r3, r3, #20
 8004e32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e36:	e01b      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x4c0>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	fa93 f3a3 	rbit	r3, r3
 8004e44:	60fb      	str	r3, [r7, #12]
  return result;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004e50:	2320      	movs	r3, #32
 8004e52:	e003      	b.n	8004e5c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	fab3 f383 	clz	r3, r3
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	f003 021f 	and.w	r2, r3, #31
 8004e62:	4613      	mov	r3, r2
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	4413      	add	r3, r2
 8004e68:	3b1e      	subs	r3, #30
 8004e6a:	051b      	lsls	r3, r3, #20
 8004e6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e70:	430b      	orrs	r3, r1
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	6892      	ldr	r2, [r2, #8]
 8004e76:	4619      	mov	r1, r3
 8004e78:	f7ff f913 	bl	80040a2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f280 80c6 	bge.w	8005012 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a67      	ldr	r2, [pc, #412]	; (8005028 <HAL_ADC_ConfigChannel+0x678>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d004      	beq.n	8004e9a <HAL_ADC_ConfigChannel+0x4ea>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a65      	ldr	r2, [pc, #404]	; (800502c <HAL_ADC_ConfigChannel+0x67c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d101      	bne.n	8004e9e <HAL_ADC_ConfigChannel+0x4ee>
 8004e9a:	4b65      	ldr	r3, [pc, #404]	; (8005030 <HAL_ADC_ConfigChannel+0x680>)
 8004e9c:	e000      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x4f0>
 8004e9e:	4b65      	ldr	r3, [pc, #404]	; (8005034 <HAL_ADC_ConfigChannel+0x684>)
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff f85d 	bl	8003f60 <LL_ADC_GetCommonPathInternalCh>
 8004ea6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a5e      	ldr	r2, [pc, #376]	; (8005028 <HAL_ADC_ConfigChannel+0x678>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d004      	beq.n	8004ebc <HAL_ADC_ConfigChannel+0x50c>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a5d      	ldr	r2, [pc, #372]	; (800502c <HAL_ADC_ConfigChannel+0x67c>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d10e      	bne.n	8004eda <HAL_ADC_ConfigChannel+0x52a>
 8004ebc:	485a      	ldr	r0, [pc, #360]	; (8005028 <HAL_ADC_ConfigChannel+0x678>)
 8004ebe:	f7ff f9bd 	bl	800423c <LL_ADC_IsEnabled>
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	4859      	ldr	r0, [pc, #356]	; (800502c <HAL_ADC_ConfigChannel+0x67c>)
 8004ec6:	f7ff f9b9 	bl	800423c <LL_ADC_IsEnabled>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	4323      	orrs	r3, r4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	bf0c      	ite	eq
 8004ed2:	2301      	moveq	r3, #1
 8004ed4:	2300      	movne	r3, #0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	e008      	b.n	8004eec <HAL_ADC_ConfigChannel+0x53c>
 8004eda:	4857      	ldr	r0, [pc, #348]	; (8005038 <HAL_ADC_ConfigChannel+0x688>)
 8004edc:	f7ff f9ae 	bl	800423c <LL_ADC_IsEnabled>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	bf0c      	ite	eq
 8004ee6:	2301      	moveq	r3, #1
 8004ee8:	2300      	movne	r3, #0
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d07d      	beq.n	8004fec <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a51      	ldr	r2, [pc, #324]	; (800503c <HAL_ADC_ConfigChannel+0x68c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d130      	bne.n	8004f5c <HAL_ADC_ConfigChannel+0x5ac>
 8004efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d12b      	bne.n	8004f5c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a4b      	ldr	r2, [pc, #300]	; (8005038 <HAL_ADC_ConfigChannel+0x688>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	f040 8081 	bne.w	8005012 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a44      	ldr	r2, [pc, #272]	; (8005028 <HAL_ADC_ConfigChannel+0x678>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d004      	beq.n	8004f24 <HAL_ADC_ConfigChannel+0x574>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a43      	ldr	r2, [pc, #268]	; (800502c <HAL_ADC_ConfigChannel+0x67c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d101      	bne.n	8004f28 <HAL_ADC_ConfigChannel+0x578>
 8004f24:	4a42      	ldr	r2, [pc, #264]	; (8005030 <HAL_ADC_ConfigChannel+0x680>)
 8004f26:	e000      	b.n	8004f2a <HAL_ADC_ConfigChannel+0x57a>
 8004f28:	4a42      	ldr	r2, [pc, #264]	; (8005034 <HAL_ADC_ConfigChannel+0x684>)
 8004f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f30:	4619      	mov	r1, r3
 8004f32:	4610      	mov	r0, r2
 8004f34:	f7ff f801 	bl	8003f3a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f38:	4b41      	ldr	r3, [pc, #260]	; (8005040 <HAL_ADC_ConfigChannel+0x690>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	099b      	lsrs	r3, r3, #6
 8004f3e:	4a41      	ldr	r2, [pc, #260]	; (8005044 <HAL_ADC_ConfigChannel+0x694>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	099b      	lsrs	r3, r3, #6
 8004f46:	3301      	adds	r3, #1
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004f4c:	e002      	b.n	8004f54 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f9      	bne.n	8004f4e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f5a:	e05a      	b.n	8005012 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a39      	ldr	r2, [pc, #228]	; (8005048 <HAL_ADC_ConfigChannel+0x698>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d11e      	bne.n	8004fa4 <HAL_ADC_ConfigChannel+0x5f4>
 8004f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d119      	bne.n	8004fa4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a30      	ldr	r2, [pc, #192]	; (8005038 <HAL_ADC_ConfigChannel+0x688>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d14b      	bne.n	8005012 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a2a      	ldr	r2, [pc, #168]	; (8005028 <HAL_ADC_ConfigChannel+0x678>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d004      	beq.n	8004f8e <HAL_ADC_ConfigChannel+0x5de>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a28      	ldr	r2, [pc, #160]	; (800502c <HAL_ADC_ConfigChannel+0x67c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d101      	bne.n	8004f92 <HAL_ADC_ConfigChannel+0x5e2>
 8004f8e:	4a28      	ldr	r2, [pc, #160]	; (8005030 <HAL_ADC_ConfigChannel+0x680>)
 8004f90:	e000      	b.n	8004f94 <HAL_ADC_ConfigChannel+0x5e4>
 8004f92:	4a28      	ldr	r2, [pc, #160]	; (8005034 <HAL_ADC_ConfigChannel+0x684>)
 8004f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4610      	mov	r0, r2
 8004f9e:	f7fe ffcc 	bl	8003f3a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fa2:	e036      	b.n	8005012 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a28      	ldr	r2, [pc, #160]	; (800504c <HAL_ADC_ConfigChannel+0x69c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d131      	bne.n	8005012 <HAL_ADC_ConfigChannel+0x662>
 8004fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d12c      	bne.n	8005012 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <HAL_ADC_ConfigChannel+0x688>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d127      	bne.n	8005012 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a18      	ldr	r2, [pc, #96]	; (8005028 <HAL_ADC_ConfigChannel+0x678>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d004      	beq.n	8004fd6 <HAL_ADC_ConfigChannel+0x626>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a16      	ldr	r2, [pc, #88]	; (800502c <HAL_ADC_ConfigChannel+0x67c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d101      	bne.n	8004fda <HAL_ADC_ConfigChannel+0x62a>
 8004fd6:	4a16      	ldr	r2, [pc, #88]	; (8005030 <HAL_ADC_ConfigChannel+0x680>)
 8004fd8:	e000      	b.n	8004fdc <HAL_ADC_ConfigChannel+0x62c>
 8004fda:	4a16      	ldr	r2, [pc, #88]	; (8005034 <HAL_ADC_ConfigChannel+0x684>)
 8004fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	f7fe ffa8 	bl	8003f3a <LL_ADC_SetCommonPathInternalCh>
 8004fea:	e012      	b.n	8005012 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff0:	f043 0220 	orr.w	r2, r3, #32
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004ffe:	e008      	b.n	8005012 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005004:	f043 0220 	orr.w	r2, r3, #32
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800501a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800501e:	4618      	mov	r0, r3
 8005020:	3784      	adds	r7, #132	; 0x84
 8005022:	46bd      	mov	sp, r7
 8005024:	bd90      	pop	{r4, r7, pc}
 8005026:	bf00      	nop
 8005028:	40022000 	.word	0x40022000
 800502c:	40022100 	.word	0x40022100
 8005030:	40022300 	.word	0x40022300
 8005034:	58026300 	.word	0x58026300
 8005038:	58026000 	.word	0x58026000
 800503c:	cb840000 	.word	0xcb840000
 8005040:	20000158 	.word	0x20000158
 8005044:	053e2d63 	.word	0x053e2d63
 8005048:	c7520000 	.word	0xc7520000
 800504c:	cfb80000 	.word	0xcfb80000

08005050 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff f8ed 	bl	800423c <LL_ADC_IsEnabled>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d16e      	bne.n	8005146 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	4b38      	ldr	r3, [pc, #224]	; (8005150 <ADC_Enable+0x100>)
 8005070:	4013      	ands	r3, r2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00d      	beq.n	8005092 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507a:	f043 0210 	orr.w	r2, r3, #16
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005086:	f043 0201 	orr.w	r2, r3, #1
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e05a      	b.n	8005148 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff f8bc 	bl	8004214 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800509c:	f7fe fefe 	bl	8003e9c <HAL_GetTick>
 80050a0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a2b      	ldr	r2, [pc, #172]	; (8005154 <ADC_Enable+0x104>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d004      	beq.n	80050b6 <ADC_Enable+0x66>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a29      	ldr	r2, [pc, #164]	; (8005158 <ADC_Enable+0x108>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d101      	bne.n	80050ba <ADC_Enable+0x6a>
 80050b6:	4b29      	ldr	r3, [pc, #164]	; (800515c <ADC_Enable+0x10c>)
 80050b8:	e000      	b.n	80050bc <ADC_Enable+0x6c>
 80050ba:	4b29      	ldr	r3, [pc, #164]	; (8005160 <ADC_Enable+0x110>)
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff f83f 	bl	8004140 <LL_ADC_GetMultimode>
 80050c2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a23      	ldr	r2, [pc, #140]	; (8005158 <ADC_Enable+0x108>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d002      	beq.n	80050d4 <ADC_Enable+0x84>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	e000      	b.n	80050d6 <ADC_Enable+0x86>
 80050d4:	4b1f      	ldr	r3, [pc, #124]	; (8005154 <ADC_Enable+0x104>)
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6812      	ldr	r2, [r2, #0]
 80050da:	4293      	cmp	r3, r2
 80050dc:	d02c      	beq.n	8005138 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d130      	bne.n	8005146 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050e4:	e028      	b.n	8005138 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff f8a6 	bl	800423c <LL_ADC_IsEnabled>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d104      	bne.n	8005100 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff f88a 	bl	8004214 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005100:	f7fe fecc 	bl	8003e9c <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d914      	bls.n	8005138 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b01      	cmp	r3, #1
 800511a:	d00d      	beq.n	8005138 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005120:	f043 0210 	orr.w	r2, r3, #16
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512c:	f043 0201 	orr.w	r2, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e007      	b.n	8005148 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b01      	cmp	r3, #1
 8005144:	d1cf      	bne.n	80050e6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	8000003f 	.word	0x8000003f
 8005154:	40022000 	.word	0x40022000
 8005158:	40022100 	.word	0x40022100
 800515c:	40022300 	.word	0x40022300
 8005160:	58026300 	.word	0x58026300

08005164 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a79      	ldr	r2, [pc, #484]	; (8005358 <ADC_ConfigureBoostMode+0x1f4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d004      	beq.n	8005180 <ADC_ConfigureBoostMode+0x1c>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a78      	ldr	r2, [pc, #480]	; (800535c <ADC_ConfigureBoostMode+0x1f8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d109      	bne.n	8005194 <ADC_ConfigureBoostMode+0x30>
 8005180:	4b77      	ldr	r3, [pc, #476]	; (8005360 <ADC_ConfigureBoostMode+0x1fc>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005188:	2b00      	cmp	r3, #0
 800518a:	bf14      	ite	ne
 800518c:	2301      	movne	r3, #1
 800518e:	2300      	moveq	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	e008      	b.n	80051a6 <ADC_ConfigureBoostMode+0x42>
 8005194:	4b73      	ldr	r3, [pc, #460]	; (8005364 <ADC_ConfigureBoostMode+0x200>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800519c:	2b00      	cmp	r3, #0
 800519e:	bf14      	ite	ne
 80051a0:	2301      	movne	r3, #1
 80051a2:	2300      	moveq	r3, #0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d01c      	beq.n	80051e4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80051aa:	f001 fb25 	bl	80067f8 <HAL_RCC_GetHCLKFreq>
 80051ae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051b8:	d010      	beq.n	80051dc <ADC_ConfigureBoostMode+0x78>
 80051ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051be:	d871      	bhi.n	80052a4 <ADC_ConfigureBoostMode+0x140>
 80051c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c4:	d002      	beq.n	80051cc <ADC_ConfigureBoostMode+0x68>
 80051c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ca:	d16b      	bne.n	80052a4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	0c1b      	lsrs	r3, r3, #16
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d8:	60fb      	str	r3, [r7, #12]
        break;
 80051da:	e066      	b.n	80052aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	089b      	lsrs	r3, r3, #2
 80051e0:	60fb      	str	r3, [r7, #12]
        break;
 80051e2:	e062      	b.n	80052aa <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80051e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80051e8:	f002 fae4 	bl	80077b4 <HAL_RCCEx_GetPeriphCLKFreq>
 80051ec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80051f6:	d051      	beq.n	800529c <ADC_ConfigureBoostMode+0x138>
 80051f8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80051fc:	d854      	bhi.n	80052a8 <ADC_ConfigureBoostMode+0x144>
 80051fe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005202:	d047      	beq.n	8005294 <ADC_ConfigureBoostMode+0x130>
 8005204:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005208:	d84e      	bhi.n	80052a8 <ADC_ConfigureBoostMode+0x144>
 800520a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800520e:	d03d      	beq.n	800528c <ADC_ConfigureBoostMode+0x128>
 8005210:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005214:	d848      	bhi.n	80052a8 <ADC_ConfigureBoostMode+0x144>
 8005216:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800521a:	d033      	beq.n	8005284 <ADC_ConfigureBoostMode+0x120>
 800521c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005220:	d842      	bhi.n	80052a8 <ADC_ConfigureBoostMode+0x144>
 8005222:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005226:	d029      	beq.n	800527c <ADC_ConfigureBoostMode+0x118>
 8005228:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800522c:	d83c      	bhi.n	80052a8 <ADC_ConfigureBoostMode+0x144>
 800522e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005232:	d01a      	beq.n	800526a <ADC_ConfigureBoostMode+0x106>
 8005234:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005238:	d836      	bhi.n	80052a8 <ADC_ConfigureBoostMode+0x144>
 800523a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800523e:	d014      	beq.n	800526a <ADC_ConfigureBoostMode+0x106>
 8005240:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005244:	d830      	bhi.n	80052a8 <ADC_ConfigureBoostMode+0x144>
 8005246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800524a:	d00e      	beq.n	800526a <ADC_ConfigureBoostMode+0x106>
 800524c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005250:	d82a      	bhi.n	80052a8 <ADC_ConfigureBoostMode+0x144>
 8005252:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005256:	d008      	beq.n	800526a <ADC_ConfigureBoostMode+0x106>
 8005258:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800525c:	d824      	bhi.n	80052a8 <ADC_ConfigureBoostMode+0x144>
 800525e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005262:	d002      	beq.n	800526a <ADC_ConfigureBoostMode+0x106>
 8005264:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005268:	d11e      	bne.n	80052a8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	0c9b      	lsrs	r3, r3, #18
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	fbb2 f3f3 	udiv	r3, r2, r3
 8005278:	60fb      	str	r3, [r7, #12]
        break;
 800527a:	e016      	b.n	80052aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	091b      	lsrs	r3, r3, #4
 8005280:	60fb      	str	r3, [r7, #12]
        break;
 8005282:	e012      	b.n	80052aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	60fb      	str	r3, [r7, #12]
        break;
 800528a:	e00e      	b.n	80052aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	099b      	lsrs	r3, r3, #6
 8005290:	60fb      	str	r3, [r7, #12]
        break;
 8005292:	e00a      	b.n	80052aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	09db      	lsrs	r3, r3, #7
 8005298:	60fb      	str	r3, [r7, #12]
        break;
 800529a:	e006      	b.n	80052aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	60fb      	str	r3, [r7, #12]
        break;
 80052a2:	e002      	b.n	80052aa <ADC_ConfigureBoostMode+0x146>
        break;
 80052a4:	bf00      	nop
 80052a6:	e000      	b.n	80052aa <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80052a8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80052aa:	f7fe fe27 	bl	8003efc <HAL_GetREVID>
 80052ae:	4603      	mov	r3, r0
 80052b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d815      	bhi.n	80052e4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4a2b      	ldr	r2, [pc, #172]	; (8005368 <ADC_ConfigureBoostMode+0x204>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d908      	bls.n	80052d2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052ce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80052d0:	e03e      	b.n	8005350 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052e0:	609a      	str	r2, [r3, #8]
}
 80052e2:	e035      	b.n	8005350 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	085b      	lsrs	r3, r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4a1f      	ldr	r2, [pc, #124]	; (800536c <ADC_ConfigureBoostMode+0x208>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d808      	bhi.n	8005304 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005300:	609a      	str	r2, [r3, #8]
}
 8005302:	e025      	b.n	8005350 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4a1a      	ldr	r2, [pc, #104]	; (8005370 <ADC_ConfigureBoostMode+0x20c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d80a      	bhi.n	8005322 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800531e:	609a      	str	r2, [r3, #8]
}
 8005320:	e016      	b.n	8005350 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4a13      	ldr	r2, [pc, #76]	; (8005374 <ADC_ConfigureBoostMode+0x210>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d80a      	bhi.n	8005340 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800533c:	609a      	str	r2, [r3, #8]
}
 800533e:	e007      	b.n	8005350 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800534e:	609a      	str	r2, [r3, #8]
}
 8005350:	bf00      	nop
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40022000 	.word	0x40022000
 800535c:	40022100 	.word	0x40022100
 8005360:	40022300 	.word	0x40022300
 8005364:	58026300 	.word	0x58026300
 8005368:	01312d00 	.word	0x01312d00
 800536c:	005f5e10 	.word	0x005f5e10
 8005370:	00bebc20 	.word	0x00bebc20
 8005374:	017d7840 	.word	0x017d7840

08005378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <__NVIC_SetPriorityGrouping+0x40>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005394:	4013      	ands	r3, r2
 8005396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80053a0:	4b06      	ldr	r3, [pc, #24]	; (80053bc <__NVIC_SetPriorityGrouping+0x44>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053a6:	4a04      	ldr	r2, [pc, #16]	; (80053b8 <__NVIC_SetPriorityGrouping+0x40>)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	60d3      	str	r3, [r2, #12]
}
 80053ac:	bf00      	nop
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	e000ed00 	.word	0xe000ed00
 80053bc:	05fa0000 	.word	0x05fa0000

080053c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053c4:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <__NVIC_GetPriorityGrouping+0x18>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	0a1b      	lsrs	r3, r3, #8
 80053ca:	f003 0307 	and.w	r3, r3, #7
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	e000ed00 	.word	0xe000ed00

080053dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	db0b      	blt.n	8005406 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ee:	88fb      	ldrh	r3, [r7, #6]
 80053f0:	f003 021f 	and.w	r2, r3, #31
 80053f4:	4907      	ldr	r1, [pc, #28]	; (8005414 <__NVIC_EnableIRQ+0x38>)
 80053f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	2001      	movs	r0, #1
 80053fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	e000e100 	.word	0xe000e100

08005418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	4603      	mov	r3, r0
 8005420:	6039      	str	r1, [r7, #0]
 8005422:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005424:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005428:	2b00      	cmp	r3, #0
 800542a:	db0a      	blt.n	8005442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	b2da      	uxtb	r2, r3
 8005430:	490c      	ldr	r1, [pc, #48]	; (8005464 <__NVIC_SetPriority+0x4c>)
 8005432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005436:	0112      	lsls	r2, r2, #4
 8005438:	b2d2      	uxtb	r2, r2
 800543a:	440b      	add	r3, r1
 800543c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005440:	e00a      	b.n	8005458 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	b2da      	uxtb	r2, r3
 8005446:	4908      	ldr	r1, [pc, #32]	; (8005468 <__NVIC_SetPriority+0x50>)
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	3b04      	subs	r3, #4
 8005450:	0112      	lsls	r2, r2, #4
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	440b      	add	r3, r1
 8005456:	761a      	strb	r2, [r3, #24]
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	e000e100 	.word	0xe000e100
 8005468:	e000ed00 	.word	0xe000ed00

0800546c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800546c:	b480      	push	{r7}
 800546e:	b089      	sub	sp, #36	; 0x24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f1c3 0307 	rsb	r3, r3, #7
 8005486:	2b04      	cmp	r3, #4
 8005488:	bf28      	it	cs
 800548a:	2304      	movcs	r3, #4
 800548c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	3304      	adds	r3, #4
 8005492:	2b06      	cmp	r3, #6
 8005494:	d902      	bls.n	800549c <NVIC_EncodePriority+0x30>
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	3b03      	subs	r3, #3
 800549a:	e000      	b.n	800549e <NVIC_EncodePriority+0x32>
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054a0:	f04f 32ff 	mov.w	r2, #4294967295
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	43da      	mvns	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	401a      	ands	r2, r3
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054b4:	f04f 31ff 	mov.w	r1, #4294967295
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	fa01 f303 	lsl.w	r3, r1, r3
 80054be:	43d9      	mvns	r1, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054c4:	4313      	orrs	r3, r2
         );
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3724      	adds	r7, #36	; 0x24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff ff4c 	bl	8005378 <__NVIC_SetPriorityGrouping>
}
 80054e0:	bf00      	nop
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	4603      	mov	r3, r0
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80054f6:	f7ff ff63 	bl	80053c0 <__NVIC_GetPriorityGrouping>
 80054fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	6978      	ldr	r0, [r7, #20]
 8005502:	f7ff ffb3 	bl	800546c <NVIC_EncodePriority>
 8005506:	4602      	mov	r2, r0
 8005508:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800550c:	4611      	mov	r1, r2
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff ff82 	bl	8005418 <__NVIC_SetPriority>
}
 8005514:	bf00      	nop
 8005516:	3718      	adds	r7, #24
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	4603      	mov	r3, r0
 8005524:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff ff56 	bl	80053dc <__NVIC_EnableIRQ>
}
 8005530:	bf00      	nop
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005538:	b480      	push	{r7}
 800553a:	b089      	sub	sp, #36	; 0x24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005546:	4b89      	ldr	r3, [pc, #548]	; (800576c <HAL_GPIO_Init+0x234>)
 8005548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800554a:	e194      	b.n	8005876 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	2101      	movs	r1, #1
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	fa01 f303 	lsl.w	r3, r1, r3
 8005558:	4013      	ands	r3, r2
 800555a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 8186 	beq.w	8005870 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	2b01      	cmp	r3, #1
 800556e:	d005      	beq.n	800557c <HAL_GPIO_Init+0x44>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f003 0303 	and.w	r3, r3, #3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d130      	bne.n	80055de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	2203      	movs	r2, #3
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	43db      	mvns	r3, r3
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	4013      	ands	r3, r2
 8005592:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055b2:	2201      	movs	r2, #1
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	43db      	mvns	r3, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4013      	ands	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	091b      	lsrs	r3, r3, #4
 80055c8:	f003 0201 	and.w	r2, r3, #1
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d017      	beq.n	800561a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	2203      	movs	r2, #3
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	43db      	mvns	r3, r3
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	4013      	ands	r3, r2
 8005600:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	4313      	orrs	r3, r2
 8005612:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d123      	bne.n	800566e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	08da      	lsrs	r2, r3, #3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	3208      	adds	r2, #8
 800562e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	220f      	movs	r2, #15
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	43db      	mvns	r3, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4013      	ands	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	fa02 f303 	lsl.w	r3, r2, r3
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	4313      	orrs	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	08da      	lsrs	r2, r3, #3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3208      	adds	r2, #8
 8005668:	69b9      	ldr	r1, [r7, #24]
 800566a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	2203      	movs	r2, #3
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	43db      	mvns	r3, r3
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	4013      	ands	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f003 0203 	and.w	r2, r3, #3
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	4313      	orrs	r3, r2
 800569a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 80e0 	beq.w	8005870 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056b0:	4b2f      	ldr	r3, [pc, #188]	; (8005770 <HAL_GPIO_Init+0x238>)
 80056b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056b6:	4a2e      	ldr	r2, [pc, #184]	; (8005770 <HAL_GPIO_Init+0x238>)
 80056b8:	f043 0302 	orr.w	r3, r3, #2
 80056bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80056c0:	4b2b      	ldr	r3, [pc, #172]	; (8005770 <HAL_GPIO_Init+0x238>)
 80056c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056ce:	4a29      	ldr	r2, [pc, #164]	; (8005774 <HAL_GPIO_Init+0x23c>)
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	089b      	lsrs	r3, r3, #2
 80056d4:	3302      	adds	r3, #2
 80056d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	220f      	movs	r2, #15
 80056e6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ea:	43db      	mvns	r3, r3
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	4013      	ands	r3, r2
 80056f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a20      	ldr	r2, [pc, #128]	; (8005778 <HAL_GPIO_Init+0x240>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d052      	beq.n	80057a0 <HAL_GPIO_Init+0x268>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a1f      	ldr	r2, [pc, #124]	; (800577c <HAL_GPIO_Init+0x244>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d031      	beq.n	8005766 <HAL_GPIO_Init+0x22e>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a1e      	ldr	r2, [pc, #120]	; (8005780 <HAL_GPIO_Init+0x248>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d02b      	beq.n	8005762 <HAL_GPIO_Init+0x22a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a1d      	ldr	r2, [pc, #116]	; (8005784 <HAL_GPIO_Init+0x24c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d025      	beq.n	800575e <HAL_GPIO_Init+0x226>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a1c      	ldr	r2, [pc, #112]	; (8005788 <HAL_GPIO_Init+0x250>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d01f      	beq.n	800575a <HAL_GPIO_Init+0x222>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a1b      	ldr	r2, [pc, #108]	; (800578c <HAL_GPIO_Init+0x254>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d019      	beq.n	8005756 <HAL_GPIO_Init+0x21e>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a1a      	ldr	r2, [pc, #104]	; (8005790 <HAL_GPIO_Init+0x258>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <HAL_GPIO_Init+0x21a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a19      	ldr	r2, [pc, #100]	; (8005794 <HAL_GPIO_Init+0x25c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00d      	beq.n	800574e <HAL_GPIO_Init+0x216>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a18      	ldr	r2, [pc, #96]	; (8005798 <HAL_GPIO_Init+0x260>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d007      	beq.n	800574a <HAL_GPIO_Init+0x212>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a17      	ldr	r2, [pc, #92]	; (800579c <HAL_GPIO_Init+0x264>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d101      	bne.n	8005746 <HAL_GPIO_Init+0x20e>
 8005742:	2309      	movs	r3, #9
 8005744:	e02d      	b.n	80057a2 <HAL_GPIO_Init+0x26a>
 8005746:	230a      	movs	r3, #10
 8005748:	e02b      	b.n	80057a2 <HAL_GPIO_Init+0x26a>
 800574a:	2308      	movs	r3, #8
 800574c:	e029      	b.n	80057a2 <HAL_GPIO_Init+0x26a>
 800574e:	2307      	movs	r3, #7
 8005750:	e027      	b.n	80057a2 <HAL_GPIO_Init+0x26a>
 8005752:	2306      	movs	r3, #6
 8005754:	e025      	b.n	80057a2 <HAL_GPIO_Init+0x26a>
 8005756:	2305      	movs	r3, #5
 8005758:	e023      	b.n	80057a2 <HAL_GPIO_Init+0x26a>
 800575a:	2304      	movs	r3, #4
 800575c:	e021      	b.n	80057a2 <HAL_GPIO_Init+0x26a>
 800575e:	2303      	movs	r3, #3
 8005760:	e01f      	b.n	80057a2 <HAL_GPIO_Init+0x26a>
 8005762:	2302      	movs	r3, #2
 8005764:	e01d      	b.n	80057a2 <HAL_GPIO_Init+0x26a>
 8005766:	2301      	movs	r3, #1
 8005768:	e01b      	b.n	80057a2 <HAL_GPIO_Init+0x26a>
 800576a:	bf00      	nop
 800576c:	58000080 	.word	0x58000080
 8005770:	58024400 	.word	0x58024400
 8005774:	58000400 	.word	0x58000400
 8005778:	58020000 	.word	0x58020000
 800577c:	58020400 	.word	0x58020400
 8005780:	58020800 	.word	0x58020800
 8005784:	58020c00 	.word	0x58020c00
 8005788:	58021000 	.word	0x58021000
 800578c:	58021400 	.word	0x58021400
 8005790:	58021800 	.word	0x58021800
 8005794:	58021c00 	.word	0x58021c00
 8005798:	58022000 	.word	0x58022000
 800579c:	58022400 	.word	0x58022400
 80057a0:	2300      	movs	r3, #0
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	f002 0203 	and.w	r2, r2, #3
 80057a8:	0092      	lsls	r2, r2, #2
 80057aa:	4093      	lsls	r3, r2
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057b2:	4938      	ldr	r1, [pc, #224]	; (8005894 <HAL_GPIO_Init+0x35c>)
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	089b      	lsrs	r3, r3, #2
 80057b8:	3302      	adds	r3, #2
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	43db      	mvns	r3, r3
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	4013      	ands	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80057e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80057ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	43db      	mvns	r3, r3
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	4013      	ands	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	43db      	mvns	r3, r3
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	4013      	ands	r3, r2
 800582a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	43db      	mvns	r3, r3
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	4013      	ands	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	4313      	orrs	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	3301      	adds	r3, #1
 8005874:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	fa22 f303 	lsr.w	r3, r2, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	f47f ae63 	bne.w	800554c <HAL_GPIO_Init+0x14>
  }
}
 8005886:	bf00      	nop
 8005888:	bf00      	nop
 800588a:	3724      	adds	r7, #36	; 0x24
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	58000400 	.word	0x58000400

08005898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	807b      	strh	r3, [r7, #2]
 80058a4:	4613      	mov	r3, r2
 80058a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058a8:	787b      	ldrb	r3, [r7, #1]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058ae:	887a      	ldrh	r2, [r7, #2]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80058b4:	e003      	b.n	80058be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80058b6:	887b      	ldrh	r3, [r7, #2]
 80058b8:	041a      	lsls	r2, r3, #16
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	619a      	str	r2, [r3, #24]
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
	...

080058cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80058d4:	4b19      	ldr	r3, [pc, #100]	; (800593c <HAL_PWREx_ConfigSupply+0x70>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d00a      	beq.n	80058f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80058e0:	4b16      	ldr	r3, [pc, #88]	; (800593c <HAL_PWREx_ConfigSupply+0x70>)
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d001      	beq.n	80058f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e01f      	b.n	8005932 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	e01d      	b.n	8005932 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80058f6:	4b11      	ldr	r3, [pc, #68]	; (800593c <HAL_PWREx_ConfigSupply+0x70>)
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f023 0207 	bic.w	r2, r3, #7
 80058fe:	490f      	ldr	r1, [pc, #60]	; (800593c <HAL_PWREx_ConfigSupply+0x70>)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4313      	orrs	r3, r2
 8005904:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005906:	f7fe fac9 	bl	8003e9c <HAL_GetTick>
 800590a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800590c:	e009      	b.n	8005922 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800590e:	f7fe fac5 	bl	8003e9c <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800591c:	d901      	bls.n	8005922 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e007      	b.n	8005932 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <HAL_PWREx_ConfigSupply+0x70>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800592a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800592e:	d1ee      	bne.n	800590e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	58024800 	.word	0x58024800

08005940 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08c      	sub	sp, #48	; 0x30
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d102      	bne.n	8005954 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	f000 bc1c 	b.w	800618c <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 8087 	beq.w	8005a70 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005962:	4b9e      	ldr	r3, [pc, #632]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800596a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800596c:	4b9b      	ldr	r3, [pc, #620]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	2b10      	cmp	r3, #16
 8005976:	d007      	beq.n	8005988 <HAL_RCC_OscConfig+0x48>
 8005978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597a:	2b18      	cmp	r3, #24
 800597c:	d110      	bne.n	80059a0 <HAL_RCC_OscConfig+0x60>
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	f003 0303 	and.w	r3, r3, #3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d10b      	bne.n	80059a0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005988:	4b94      	ldr	r3, [pc, #592]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d06c      	beq.n	8005a6e <HAL_RCC_OscConfig+0x12e>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d168      	bne.n	8005a6e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e3f5      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a8:	d106      	bne.n	80059b8 <HAL_RCC_OscConfig+0x78>
 80059aa:	4b8c      	ldr	r3, [pc, #560]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a8b      	ldr	r2, [pc, #556]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 80059b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	e02e      	b.n	8005a16 <HAL_RCC_OscConfig+0xd6>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10c      	bne.n	80059da <HAL_RCC_OscConfig+0x9a>
 80059c0:	4b86      	ldr	r3, [pc, #536]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a85      	ldr	r2, [pc, #532]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 80059c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	4b83      	ldr	r3, [pc, #524]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a82      	ldr	r2, [pc, #520]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 80059d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	e01d      	b.n	8005a16 <HAL_RCC_OscConfig+0xd6>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059e2:	d10c      	bne.n	80059fe <HAL_RCC_OscConfig+0xbe>
 80059e4:	4b7d      	ldr	r3, [pc, #500]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a7c      	ldr	r2, [pc, #496]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 80059ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	4b7a      	ldr	r3, [pc, #488]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a79      	ldr	r2, [pc, #484]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 80059f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	e00b      	b.n	8005a16 <HAL_RCC_OscConfig+0xd6>
 80059fe:	4b77      	ldr	r3, [pc, #476]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a76      	ldr	r2, [pc, #472]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	4b74      	ldr	r3, [pc, #464]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a73      	ldr	r2, [pc, #460]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a14:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d013      	beq.n	8005a46 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1e:	f7fe fa3d 	bl	8003e9c <HAL_GetTick>
 8005a22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a24:	e008      	b.n	8005a38 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a26:	f7fe fa39 	bl	8003e9c <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b64      	cmp	r3, #100	; 0x64
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e3a9      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a38:	4b68      	ldr	r3, [pc, #416]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0f0      	beq.n	8005a26 <HAL_RCC_OscConfig+0xe6>
 8005a44:	e014      	b.n	8005a70 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a46:	f7fe fa29 	bl	8003e9c <HAL_GetTick>
 8005a4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a4e:	f7fe fa25 	bl	8003e9c <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b64      	cmp	r3, #100	; 0x64
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e395      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a60:	4b5e      	ldr	r3, [pc, #376]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1f0      	bne.n	8005a4e <HAL_RCC_OscConfig+0x10e>
 8005a6c:	e000      	b.n	8005a70 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a6e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 80ca 	beq.w	8005c12 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a7e:	4b57      	ldr	r3, [pc, #348]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a86:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a88:	4b54      	ldr	r3, [pc, #336]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x164>
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	2b18      	cmp	r3, #24
 8005a98:	d156      	bne.n	8005b48 <HAL_RCC_OscConfig+0x208>
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	f003 0303 	and.w	r3, r3, #3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d151      	bne.n	8005b48 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aa4:	4b4d      	ldr	r3, [pc, #308]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <HAL_RCC_OscConfig+0x17c>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e367      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005abc:	4b47      	ldr	r3, [pc, #284]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f023 0219 	bic.w	r2, r3, #25
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	4944      	ldr	r1, [pc, #272]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ace:	f7fe f9e5 	bl	8003e9c <HAL_GetTick>
 8005ad2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ad6:	f7fe f9e1 	bl	8003e9c <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e351      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ae8:	4b3c      	ldr	r3, [pc, #240]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0f0      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af4:	f7fe fa02 	bl	8003efc <HAL_GetREVID>
 8005af8:	4603      	mov	r3, r0
 8005afa:	f241 0203 	movw	r2, #4099	; 0x1003
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d817      	bhi.n	8005b32 <HAL_RCC_OscConfig+0x1f2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	2b40      	cmp	r3, #64	; 0x40
 8005b08:	d108      	bne.n	8005b1c <HAL_RCC_OscConfig+0x1dc>
 8005b0a:	4b34      	ldr	r3, [pc, #208]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005b12:	4a32      	ldr	r2, [pc, #200]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b18:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b1a:	e07a      	b.n	8005c12 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b1c:	4b2f      	ldr	r3, [pc, #188]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	031b      	lsls	r3, r3, #12
 8005b2a:	492c      	ldr	r1, [pc, #176]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b30:	e06f      	b.n	8005c12 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b32:	4b2a      	ldr	r3, [pc, #168]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	061b      	lsls	r3, r3, #24
 8005b40:	4926      	ldr	r1, [pc, #152]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b46:	e064      	b.n	8005c12 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d047      	beq.n	8005be0 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b50:	4b22      	ldr	r3, [pc, #136]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f023 0219 	bic.w	r2, r3, #25
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	491f      	ldr	r1, [pc, #124]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b62:	f7fe f99b 	bl	8003e9c <HAL_GetTick>
 8005b66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b68:	e008      	b.n	8005b7c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b6a:	f7fe f997 	bl	8003e9c <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e307      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b7c:	4b17      	ldr	r3, [pc, #92]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0f0      	beq.n	8005b6a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b88:	f7fe f9b8 	bl	8003efc <HAL_GetREVID>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d817      	bhi.n	8005bc6 <HAL_RCC_OscConfig+0x286>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	2b40      	cmp	r3, #64	; 0x40
 8005b9c:	d108      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x270>
 8005b9e:	4b0f      	ldr	r3, [pc, #60]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005ba6:	4a0d      	ldr	r2, [pc, #52]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bac:	6053      	str	r3, [r2, #4]
 8005bae:	e030      	b.n	8005c12 <HAL_RCC_OscConfig+0x2d2>
 8005bb0:	4b0a      	ldr	r3, [pc, #40]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	031b      	lsls	r3, r3, #12
 8005bbe:	4907      	ldr	r1, [pc, #28]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	604b      	str	r3, [r1, #4]
 8005bc4:	e025      	b.n	8005c12 <HAL_RCC_OscConfig+0x2d2>
 8005bc6:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	061b      	lsls	r3, r3, #24
 8005bd4:	4901      	ldr	r1, [pc, #4]	; (8005bdc <HAL_RCC_OscConfig+0x29c>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	604b      	str	r3, [r1, #4]
 8005bda:	e01a      	b.n	8005c12 <HAL_RCC_OscConfig+0x2d2>
 8005bdc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005be0:	4b9e      	ldr	r3, [pc, #632]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a9d      	ldr	r2, [pc, #628]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005be6:	f023 0301 	bic.w	r3, r3, #1
 8005bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bec:	f7fe f956 	bl	8003e9c <HAL_GetTick>
 8005bf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bf4:	f7fe f952 	bl	8003e9c <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e2c2      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c06:	4b95      	ldr	r3, [pc, #596]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0304 	and.w	r3, r3, #4
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f0      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0310 	and.w	r3, r3, #16
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 80a9 	beq.w	8005d72 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c20:	4b8e      	ldr	r3, [pc, #568]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c28:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c2a:	4b8c      	ldr	r3, [pc, #560]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d007      	beq.n	8005c46 <HAL_RCC_OscConfig+0x306>
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	2b18      	cmp	r3, #24
 8005c3a:	d13a      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x372>
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d135      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c46:	4b85      	ldr	r3, [pc, #532]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <HAL_RCC_OscConfig+0x31e>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	2b80      	cmp	r3, #128	; 0x80
 8005c58:	d001      	beq.n	8005c5e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e296      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c5e:	f7fe f94d 	bl	8003efc <HAL_GetREVID>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f241 0203 	movw	r2, #4099	; 0x1003
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d817      	bhi.n	8005c9c <HAL_RCC_OscConfig+0x35c>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d108      	bne.n	8005c86 <HAL_RCC_OscConfig+0x346>
 8005c74:	4b79      	ldr	r3, [pc, #484]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005c7c:	4a77      	ldr	r2, [pc, #476]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005c7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c82:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c84:	e075      	b.n	8005d72 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c86:	4b75      	ldr	r3, [pc, #468]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	069b      	lsls	r3, r3, #26
 8005c94:	4971      	ldr	r1, [pc, #452]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c9a:	e06a      	b.n	8005d72 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c9c:	4b6f      	ldr	r3, [pc, #444]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	061b      	lsls	r3, r3, #24
 8005caa:	496c      	ldr	r1, [pc, #432]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005cb0:	e05f      	b.n	8005d72 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d042      	beq.n	8005d40 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005cba:	4b68      	ldr	r3, [pc, #416]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a67      	ldr	r2, [pc, #412]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc6:	f7fe f8e9 	bl	8003e9c <HAL_GetTick>
 8005cca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005cce:	f7fe f8e5 	bl	8003e9c <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e255      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ce0:	4b5e      	ldr	r3, [pc, #376]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0f0      	beq.n	8005cce <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005cec:	f7fe f906 	bl	8003efc <HAL_GetREVID>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	f241 0203 	movw	r2, #4099	; 0x1003
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d817      	bhi.n	8005d2a <HAL_RCC_OscConfig+0x3ea>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	2b20      	cmp	r3, #32
 8005d00:	d108      	bne.n	8005d14 <HAL_RCC_OscConfig+0x3d4>
 8005d02:	4b56      	ldr	r3, [pc, #344]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005d0a:	4a54      	ldr	r2, [pc, #336]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005d0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d10:	6053      	str	r3, [r2, #4]
 8005d12:	e02e      	b.n	8005d72 <HAL_RCC_OscConfig+0x432>
 8005d14:	4b51      	ldr	r3, [pc, #324]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	069b      	lsls	r3, r3, #26
 8005d22:	494e      	ldr	r1, [pc, #312]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	604b      	str	r3, [r1, #4]
 8005d28:	e023      	b.n	8005d72 <HAL_RCC_OscConfig+0x432>
 8005d2a:	4b4c      	ldr	r3, [pc, #304]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	061b      	lsls	r3, r3, #24
 8005d38:	4948      	ldr	r1, [pc, #288]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60cb      	str	r3, [r1, #12]
 8005d3e:	e018      	b.n	8005d72 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005d40:	4b46      	ldr	r3, [pc, #280]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a45      	ldr	r2, [pc, #276]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d4c:	f7fe f8a6 	bl	8003e9c <HAL_GetTick>
 8005d50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005d54:	f7fe f8a2 	bl	8003e9c <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e212      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d66:	4b3d      	ldr	r3, [pc, #244]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1f0      	bne.n	8005d54 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d036      	beq.n	8005dec <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d019      	beq.n	8005dba <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d86:	4b35      	ldr	r3, [pc, #212]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d8a:	4a34      	ldr	r2, [pc, #208]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005d8c:	f043 0301 	orr.w	r3, r3, #1
 8005d90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d92:	f7fe f883 	bl	8003e9c <HAL_GetTick>
 8005d96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d98:	e008      	b.n	8005dac <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d9a:	f7fe f87f 	bl	8003e9c <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d901      	bls.n	8005dac <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e1ef      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005dac:	4b2b      	ldr	r3, [pc, #172]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0f0      	beq.n	8005d9a <HAL_RCC_OscConfig+0x45a>
 8005db8:	e018      	b.n	8005dec <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dba:	4b28      	ldr	r3, [pc, #160]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dbe:	4a27      	ldr	r2, [pc, #156]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005dc0:	f023 0301 	bic.w	r3, r3, #1
 8005dc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc6:	f7fe f869 	bl	8003e9c <HAL_GetTick>
 8005dca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005dcc:	e008      	b.n	8005de0 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dce:	f7fe f865 	bl	8003e9c <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e1d5      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005de0:	4b1e      	ldr	r3, [pc, #120]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1f0      	bne.n	8005dce <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0320 	and.w	r3, r3, #32
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d039      	beq.n	8005e6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d019      	beq.n	8005e34 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e00:	4b16      	ldr	r3, [pc, #88]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a15      	ldr	r2, [pc, #84]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005e06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e0c:	f7fe f846 	bl	8003e9c <HAL_GetTick>
 8005e10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e12:	e008      	b.n	8005e26 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005e14:	f7fe f842 	bl	8003e9c <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e1b2      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e26:	4b0d      	ldr	r3, [pc, #52]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0f0      	beq.n	8005e14 <HAL_RCC_OscConfig+0x4d4>
 8005e32:	e01b      	b.n	8005e6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e34:	4b09      	ldr	r3, [pc, #36]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a08      	ldr	r2, [pc, #32]	; (8005e5c <HAL_RCC_OscConfig+0x51c>)
 8005e3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e40:	f7fe f82c 	bl	8003e9c <HAL_GetTick>
 8005e44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e46:	e00b      	b.n	8005e60 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005e48:	f7fe f828 	bl	8003e9c <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d904      	bls.n	8005e60 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e198      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
 8005e5a:	bf00      	nop
 8005e5c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e60:	4ba3      	ldr	r3, [pc, #652]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1ed      	bne.n	8005e48 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 8081 	beq.w	8005f7c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005e7a:	4b9e      	ldr	r3, [pc, #632]	; (80060f4 <HAL_RCC_OscConfig+0x7b4>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a9d      	ldr	r2, [pc, #628]	; (80060f4 <HAL_RCC_OscConfig+0x7b4>)
 8005e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e86:	f7fe f809 	bl	8003e9c <HAL_GetTick>
 8005e8a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e8c:	e008      	b.n	8005ea0 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e8e:	f7fe f805 	bl	8003e9c <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b64      	cmp	r3, #100	; 0x64
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e175      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ea0:	4b94      	ldr	r3, [pc, #592]	; (80060f4 <HAL_RCC_OscConfig+0x7b4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0f0      	beq.n	8005e8e <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d106      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x582>
 8005eb4:	4b8e      	ldr	r3, [pc, #568]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb8:	4a8d      	ldr	r2, [pc, #564]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005eba:	f043 0301 	orr.w	r3, r3, #1
 8005ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8005ec0:	e02d      	b.n	8005f1e <HAL_RCC_OscConfig+0x5de>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10c      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x5a4>
 8005eca:	4b89      	ldr	r3, [pc, #548]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ece:	4a88      	ldr	r2, [pc, #544]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005ed0:	f023 0301 	bic.w	r3, r3, #1
 8005ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ed6:	4b86      	ldr	r3, [pc, #536]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eda:	4a85      	ldr	r2, [pc, #532]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005edc:	f023 0304 	bic.w	r3, r3, #4
 8005ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ee2:	e01c      	b.n	8005f1e <HAL_RCC_OscConfig+0x5de>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	2b05      	cmp	r3, #5
 8005eea:	d10c      	bne.n	8005f06 <HAL_RCC_OscConfig+0x5c6>
 8005eec:	4b80      	ldr	r3, [pc, #512]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef0:	4a7f      	ldr	r2, [pc, #508]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005ef2:	f043 0304 	orr.w	r3, r3, #4
 8005ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ef8:	4b7d      	ldr	r3, [pc, #500]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efc:	4a7c      	ldr	r2, [pc, #496]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005efe:	f043 0301 	orr.w	r3, r3, #1
 8005f02:	6713      	str	r3, [r2, #112]	; 0x70
 8005f04:	e00b      	b.n	8005f1e <HAL_RCC_OscConfig+0x5de>
 8005f06:	4b7a      	ldr	r3, [pc, #488]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0a:	4a79      	ldr	r2, [pc, #484]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005f0c:	f023 0301 	bic.w	r3, r3, #1
 8005f10:	6713      	str	r3, [r2, #112]	; 0x70
 8005f12:	4b77      	ldr	r3, [pc, #476]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f16:	4a76      	ldr	r2, [pc, #472]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005f18:	f023 0304 	bic.w	r3, r3, #4
 8005f1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d015      	beq.n	8005f52 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f26:	f7fd ffb9 	bl	8003e9c <HAL_GetTick>
 8005f2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f2c:	e00a      	b.n	8005f44 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f2e:	f7fd ffb5 	bl	8003e9c <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d901      	bls.n	8005f44 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e123      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f44:	4b6a      	ldr	r3, [pc, #424]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d0ee      	beq.n	8005f2e <HAL_RCC_OscConfig+0x5ee>
 8005f50:	e014      	b.n	8005f7c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f52:	f7fd ffa3 	bl	8003e9c <HAL_GetTick>
 8005f56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f58:	e00a      	b.n	8005f70 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f5a:	f7fd ff9f 	bl	8003e9c <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e10d      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f70:	4b5f      	ldr	r3, [pc, #380]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1ee      	bne.n	8005f5a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 8102 	beq.w	800618a <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005f86:	4b5a      	ldr	r3, [pc, #360]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f8e:	2b18      	cmp	r3, #24
 8005f90:	f000 80bd 	beq.w	800610e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	f040 8095 	bne.w	80060c8 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f9e:	4b54      	ldr	r3, [pc, #336]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a53      	ldr	r2, [pc, #332]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005fa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005faa:	f7fd ff77 	bl	8003e9c <HAL_GetTick>
 8005fae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fb0:	e008      	b.n	8005fc4 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fb2:	f7fd ff73 	bl	8003e9c <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e0e3      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fc4:	4b4a      	ldr	r3, [pc, #296]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1f0      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fd0:	4b47      	ldr	r3, [pc, #284]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fd4:	4b48      	ldr	r3, [pc, #288]	; (80060f8 <HAL_RCC_OscConfig+0x7b8>)
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005fe0:	0112      	lsls	r2, r2, #4
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	4942      	ldr	r1, [pc, #264]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	628b      	str	r3, [r1, #40]	; 0x28
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	025b      	lsls	r3, r3, #9
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	431a      	orrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	3b01      	subs	r3, #1
 8006006:	041b      	lsls	r3, r3, #16
 8006008:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006012:	3b01      	subs	r3, #1
 8006014:	061b      	lsls	r3, r3, #24
 8006016:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800601a:	4935      	ldr	r1, [pc, #212]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 800601c:	4313      	orrs	r3, r2
 800601e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006020:	4b33      	ldr	r3, [pc, #204]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	4a32      	ldr	r2, [pc, #200]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8006026:	f023 0301 	bic.w	r3, r3, #1
 800602a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800602c:	4b30      	ldr	r3, [pc, #192]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 800602e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006030:	4b32      	ldr	r3, [pc, #200]	; (80060fc <HAL_RCC_OscConfig+0x7bc>)
 8006032:	4013      	ands	r3, r2
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006038:	00d2      	lsls	r2, r2, #3
 800603a:	492d      	ldr	r1, [pc, #180]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 800603c:	4313      	orrs	r3, r2
 800603e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006040:	4b2b      	ldr	r3, [pc, #172]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8006042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006044:	f023 020c 	bic.w	r2, r3, #12
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604c:	4928      	ldr	r1, [pc, #160]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 800604e:	4313      	orrs	r3, r2
 8006050:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006052:	4b27      	ldr	r3, [pc, #156]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8006054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006056:	f023 0202 	bic.w	r2, r3, #2
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605e:	4924      	ldr	r1, [pc, #144]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8006060:	4313      	orrs	r3, r2
 8006062:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006064:	4b22      	ldr	r3, [pc, #136]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	4a21      	ldr	r2, [pc, #132]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 800606a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800606e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006070:	4b1f      	ldr	r3, [pc, #124]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8006072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006074:	4a1e      	ldr	r2, [pc, #120]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8006076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800607a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800607c:	4b1c      	ldr	r3, [pc, #112]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	4a1b      	ldr	r2, [pc, #108]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8006082:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006086:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006088:	4b19      	ldr	r3, [pc, #100]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	4a18      	ldr	r2, [pc, #96]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 800608e:	f043 0301 	orr.w	r3, r3, #1
 8006092:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006094:	4b16      	ldr	r3, [pc, #88]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a15      	ldr	r2, [pc, #84]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 800609a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800609e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a0:	f7fd fefc 	bl	8003e9c <HAL_GetTick>
 80060a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060a8:	f7fd fef8 	bl	8003e9c <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e068      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060ba:	4b0d      	ldr	r3, [pc, #52]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0f0      	beq.n	80060a8 <HAL_RCC_OscConfig+0x768>
 80060c6:	e060      	b.n	800618a <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c8:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a08      	ldr	r2, [pc, #32]	; (80060f0 <HAL_RCC_OscConfig+0x7b0>)
 80060ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d4:	f7fd fee2 	bl	8003e9c <HAL_GetTick>
 80060d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060da:	e011      	b.n	8006100 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060dc:	f7fd fede 	bl	8003e9c <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d90a      	bls.n	8006100 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e04e      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
 80060ee:	bf00      	nop
 80060f0:	58024400 	.word	0x58024400
 80060f4:	58024800 	.word	0x58024800
 80060f8:	fffffc0c 	.word	0xfffffc0c
 80060fc:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006100:	4b24      	ldr	r3, [pc, #144]	; (8006194 <HAL_RCC_OscConfig+0x854>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e7      	bne.n	80060dc <HAL_RCC_OscConfig+0x79c>
 800610c:	e03d      	b.n	800618a <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800610e:	4b21      	ldr	r3, [pc, #132]	; (8006194 <HAL_RCC_OscConfig+0x854>)
 8006110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006112:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006114:	4b1f      	ldr	r3, [pc, #124]	; (8006194 <HAL_RCC_OscConfig+0x854>)
 8006116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006118:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	2b01      	cmp	r3, #1
 8006120:	d031      	beq.n	8006186 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f003 0203 	and.w	r2, r3, #3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800612c:	429a      	cmp	r2, r3
 800612e:	d12a      	bne.n	8006186 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	091b      	lsrs	r3, r3, #4
 8006134:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800613c:	429a      	cmp	r2, r3
 800613e:	d122      	bne.n	8006186 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800614c:	429a      	cmp	r2, r3
 800614e:	d11a      	bne.n	8006186 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	0a5b      	lsrs	r3, r3, #9
 8006154:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800615e:	429a      	cmp	r2, r3
 8006160:	d111      	bne.n	8006186 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	0c1b      	lsrs	r3, r3, #16
 8006166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006170:	429a      	cmp	r2, r3
 8006172:	d108      	bne.n	8006186 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	0e1b      	lsrs	r3, r3, #24
 8006178:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006180:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006182:	429a      	cmp	r2, r3
 8006184:	d001      	beq.n	800618a <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3730      	adds	r7, #48	; 0x30
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	58024400 	.word	0x58024400

08006198 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e19c      	b.n	80064e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061ac:	4b8a      	ldr	r3, [pc, #552]	; (80063d8 <HAL_RCC_ClockConfig+0x240>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 030f 	and.w	r3, r3, #15
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d910      	bls.n	80061dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ba:	4b87      	ldr	r3, [pc, #540]	; (80063d8 <HAL_RCC_ClockConfig+0x240>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f023 020f 	bic.w	r2, r3, #15
 80061c2:	4985      	ldr	r1, [pc, #532]	; (80063d8 <HAL_RCC_ClockConfig+0x240>)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ca:	4b83      	ldr	r3, [pc, #524]	; (80063d8 <HAL_RCC_ClockConfig+0x240>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 030f 	and.w	r3, r3, #15
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d001      	beq.n	80061dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e184      	b.n	80064e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d010      	beq.n	800620a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	691a      	ldr	r2, [r3, #16]
 80061ec:	4b7b      	ldr	r3, [pc, #492]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d908      	bls.n	800620a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80061f8:	4b78      	ldr	r3, [pc, #480]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	4975      	ldr	r1, [pc, #468]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006206:	4313      	orrs	r3, r2
 8006208:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0308 	and.w	r3, r3, #8
 8006212:	2b00      	cmp	r3, #0
 8006214:	d010      	beq.n	8006238 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	695a      	ldr	r2, [r3, #20]
 800621a:	4b70      	ldr	r3, [pc, #448]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006222:	429a      	cmp	r2, r3
 8006224:	d908      	bls.n	8006238 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006226:	4b6d      	ldr	r3, [pc, #436]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	496a      	ldr	r1, [pc, #424]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006234:	4313      	orrs	r3, r2
 8006236:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0310 	and.w	r3, r3, #16
 8006240:	2b00      	cmp	r3, #0
 8006242:	d010      	beq.n	8006266 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	699a      	ldr	r2, [r3, #24]
 8006248:	4b64      	ldr	r3, [pc, #400]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006250:	429a      	cmp	r2, r3
 8006252:	d908      	bls.n	8006266 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006254:	4b61      	ldr	r3, [pc, #388]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	495e      	ldr	r1, [pc, #376]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006262:	4313      	orrs	r3, r2
 8006264:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0320 	and.w	r3, r3, #32
 800626e:	2b00      	cmp	r3, #0
 8006270:	d010      	beq.n	8006294 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	69da      	ldr	r2, [r3, #28]
 8006276:	4b59      	ldr	r3, [pc, #356]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800627e:	429a      	cmp	r2, r3
 8006280:	d908      	bls.n	8006294 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006282:	4b56      	ldr	r3, [pc, #344]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	4953      	ldr	r1, [pc, #332]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006290:	4313      	orrs	r3, r2
 8006292:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d010      	beq.n	80062c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	4b4d      	ldr	r3, [pc, #308]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	f003 030f 	and.w	r3, r3, #15
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d908      	bls.n	80062c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062b0:	4b4a      	ldr	r3, [pc, #296]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	f023 020f 	bic.w	r2, r3, #15
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	4947      	ldr	r1, [pc, #284]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d055      	beq.n	800637a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80062ce:	4b43      	ldr	r3, [pc, #268]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	4940      	ldr	r1, [pc, #256]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d107      	bne.n	80062f8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062e8:	4b3c      	ldr	r3, [pc, #240]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d121      	bne.n	8006338 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e0f6      	b.n	80064e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d107      	bne.n	8006310 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006300:	4b36      	ldr	r3, [pc, #216]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d115      	bne.n	8006338 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e0ea      	b.n	80064e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d107      	bne.n	8006328 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006318:	4b30      	ldr	r3, [pc, #192]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006320:	2b00      	cmp	r3, #0
 8006322:	d109      	bne.n	8006338 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e0de      	b.n	80064e6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006328:	4b2c      	ldr	r3, [pc, #176]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e0d6      	b.n	80064e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006338:	4b28      	ldr	r3, [pc, #160]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f023 0207 	bic.w	r2, r3, #7
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	4925      	ldr	r1, [pc, #148]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006346:	4313      	orrs	r3, r2
 8006348:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800634a:	f7fd fda7 	bl	8003e9c <HAL_GetTick>
 800634e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006350:	e00a      	b.n	8006368 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006352:	f7fd fda3 	bl	8003e9c <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006360:	4293      	cmp	r3, r2
 8006362:	d901      	bls.n	8006368 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e0be      	b.n	80064e6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006368:	4b1c      	ldr	r3, [pc, #112]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	429a      	cmp	r2, r3
 8006378:	d1eb      	bne.n	8006352 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d010      	beq.n	80063a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	4b14      	ldr	r3, [pc, #80]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	f003 030f 	and.w	r3, r3, #15
 8006392:	429a      	cmp	r2, r3
 8006394:	d208      	bcs.n	80063a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006396:	4b11      	ldr	r3, [pc, #68]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	f023 020f 	bic.w	r2, r3, #15
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	490e      	ldr	r1, [pc, #56]	; (80063dc <HAL_RCC_ClockConfig+0x244>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063a8:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <HAL_RCC_ClockConfig+0x240>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 030f 	and.w	r3, r3, #15
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d214      	bcs.n	80063e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063b6:	4b08      	ldr	r3, [pc, #32]	; (80063d8 <HAL_RCC_ClockConfig+0x240>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f023 020f 	bic.w	r2, r3, #15
 80063be:	4906      	ldr	r1, [pc, #24]	; (80063d8 <HAL_RCC_ClockConfig+0x240>)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063c6:	4b04      	ldr	r3, [pc, #16]	; (80063d8 <HAL_RCC_ClockConfig+0x240>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 030f 	and.w	r3, r3, #15
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d005      	beq.n	80063e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e086      	b.n	80064e6 <HAL_RCC_ClockConfig+0x34e>
 80063d8:	52002000 	.word	0x52002000
 80063dc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d010      	beq.n	800640e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	4b3f      	ldr	r3, [pc, #252]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d208      	bcs.n	800640e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80063fc:	4b3c      	ldr	r3, [pc, #240]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	4939      	ldr	r1, [pc, #228]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 800640a:	4313      	orrs	r3, r2
 800640c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0308 	and.w	r3, r3, #8
 8006416:	2b00      	cmp	r3, #0
 8006418:	d010      	beq.n	800643c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695a      	ldr	r2, [r3, #20]
 800641e:	4b34      	ldr	r3, [pc, #208]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006426:	429a      	cmp	r2, r3
 8006428:	d208      	bcs.n	800643c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800642a:	4b31      	ldr	r3, [pc, #196]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	492e      	ldr	r1, [pc, #184]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 8006438:	4313      	orrs	r3, r2
 800643a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0310 	and.w	r3, r3, #16
 8006444:	2b00      	cmp	r3, #0
 8006446:	d010      	beq.n	800646a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	699a      	ldr	r2, [r3, #24]
 800644c:	4b28      	ldr	r3, [pc, #160]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006454:	429a      	cmp	r2, r3
 8006456:	d208      	bcs.n	800646a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006458:	4b25      	ldr	r3, [pc, #148]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	4922      	ldr	r1, [pc, #136]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 8006466:	4313      	orrs	r3, r2
 8006468:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0320 	and.w	r3, r3, #32
 8006472:	2b00      	cmp	r3, #0
 8006474:	d010      	beq.n	8006498 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	69da      	ldr	r2, [r3, #28]
 800647a:	4b1d      	ldr	r3, [pc, #116]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006482:	429a      	cmp	r2, r3
 8006484:	d208      	bcs.n	8006498 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006486:	4b1a      	ldr	r3, [pc, #104]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	4917      	ldr	r1, [pc, #92]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 8006494:	4313      	orrs	r3, r2
 8006496:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006498:	f000 f834 	bl	8006504 <HAL_RCC_GetSysClockFreq>
 800649c:	4602      	mov	r2, r0
 800649e:	4b14      	ldr	r3, [pc, #80]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	0a1b      	lsrs	r3, r3, #8
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	4912      	ldr	r1, [pc, #72]	; (80064f4 <HAL_RCC_ClockConfig+0x35c>)
 80064aa:	5ccb      	ldrb	r3, [r1, r3]
 80064ac:	f003 031f 	and.w	r3, r3, #31
 80064b0:	fa22 f303 	lsr.w	r3, r2, r3
 80064b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064b6:	4b0e      	ldr	r3, [pc, #56]	; (80064f0 <HAL_RCC_ClockConfig+0x358>)
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	4a0d      	ldr	r2, [pc, #52]	; (80064f4 <HAL_RCC_ClockConfig+0x35c>)
 80064c0:	5cd3      	ldrb	r3, [r2, r3]
 80064c2:	f003 031f 	and.w	r3, r3, #31
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	fa22 f303 	lsr.w	r3, r2, r3
 80064cc:	4a0a      	ldr	r2, [pc, #40]	; (80064f8 <HAL_RCC_ClockConfig+0x360>)
 80064ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80064d0:	4a0a      	ldr	r2, [pc, #40]	; (80064fc <HAL_RCC_ClockConfig+0x364>)
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80064d6:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <HAL_RCC_ClockConfig+0x368>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fc ffb0 	bl	8003440 <HAL_InitTick>
 80064e0:	4603      	mov	r3, r0
 80064e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	58024400 	.word	0x58024400
 80064f4:	0800f090 	.word	0x0800f090
 80064f8:	2000015c 	.word	0x2000015c
 80064fc:	20000158 	.word	0x20000158
 8006500:	20000160 	.word	0x20000160

08006504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006504:	b480      	push	{r7}
 8006506:	b089      	sub	sp, #36	; 0x24
 8006508:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800650a:	4bb3      	ldr	r3, [pc, #716]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006512:	2b18      	cmp	r3, #24
 8006514:	f200 8155 	bhi.w	80067c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006518:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <HAL_RCC_GetSysClockFreq+0x1c>)
 800651a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651e:	bf00      	nop
 8006520:	08006585 	.word	0x08006585
 8006524:	080067c3 	.word	0x080067c3
 8006528:	080067c3 	.word	0x080067c3
 800652c:	080067c3 	.word	0x080067c3
 8006530:	080067c3 	.word	0x080067c3
 8006534:	080067c3 	.word	0x080067c3
 8006538:	080067c3 	.word	0x080067c3
 800653c:	080067c3 	.word	0x080067c3
 8006540:	080065ab 	.word	0x080065ab
 8006544:	080067c3 	.word	0x080067c3
 8006548:	080067c3 	.word	0x080067c3
 800654c:	080067c3 	.word	0x080067c3
 8006550:	080067c3 	.word	0x080067c3
 8006554:	080067c3 	.word	0x080067c3
 8006558:	080067c3 	.word	0x080067c3
 800655c:	080067c3 	.word	0x080067c3
 8006560:	080065b1 	.word	0x080065b1
 8006564:	080067c3 	.word	0x080067c3
 8006568:	080067c3 	.word	0x080067c3
 800656c:	080067c3 	.word	0x080067c3
 8006570:	080067c3 	.word	0x080067c3
 8006574:	080067c3 	.word	0x080067c3
 8006578:	080067c3 	.word	0x080067c3
 800657c:	080067c3 	.word	0x080067c3
 8006580:	080065b7 	.word	0x080065b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006584:	4b94      	ldr	r3, [pc, #592]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b00      	cmp	r3, #0
 800658e:	d009      	beq.n	80065a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006590:	4b91      	ldr	r3, [pc, #580]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	08db      	lsrs	r3, r3, #3
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	4a90      	ldr	r2, [pc, #576]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800659c:	fa22 f303 	lsr.w	r3, r2, r3
 80065a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80065a2:	e111      	b.n	80067c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80065a4:	4b8d      	ldr	r3, [pc, #564]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065a6:	61bb      	str	r3, [r7, #24]
    break;
 80065a8:	e10e      	b.n	80067c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80065aa:	4b8d      	ldr	r3, [pc, #564]	; (80067e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80065ac:	61bb      	str	r3, [r7, #24]
    break;
 80065ae:	e10b      	b.n	80067c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80065b0:	4b8c      	ldr	r3, [pc, #560]	; (80067e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80065b2:	61bb      	str	r3, [r7, #24]
    break;
 80065b4:	e108      	b.n	80067c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065b6:	4b88      	ldr	r3, [pc, #544]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ba:	f003 0303 	and.w	r3, r3, #3
 80065be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80065c0:	4b85      	ldr	r3, [pc, #532]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c4:	091b      	lsrs	r3, r3, #4
 80065c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80065cc:	4b82      	ldr	r3, [pc, #520]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80065d6:	4b80      	ldr	r3, [pc, #512]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065da:	08db      	lsrs	r3, r3, #3
 80065dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	fb02 f303 	mul.w	r3, r2, r3
 80065e6:	ee07 3a90 	vmov	s15, r3
 80065ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 80e1 	beq.w	80067bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	f000 8083 	beq.w	8006708 <HAL_RCC_GetSysClockFreq+0x204>
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2b02      	cmp	r3, #2
 8006606:	f200 80a1 	bhi.w	800674c <HAL_RCC_GetSysClockFreq+0x248>
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <HAL_RCC_GetSysClockFreq+0x114>
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d056      	beq.n	80066c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006616:	e099      	b.n	800674c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006618:	4b6f      	ldr	r3, [pc, #444]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0320 	and.w	r3, r3, #32
 8006620:	2b00      	cmp	r3, #0
 8006622:	d02d      	beq.n	8006680 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006624:	4b6c      	ldr	r3, [pc, #432]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	08db      	lsrs	r3, r3, #3
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	4a6b      	ldr	r2, [pc, #428]	; (80067dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006630:	fa22 f303 	lsr.w	r3, r2, r3
 8006634:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	ee07 3a90 	vmov	s15, r3
 800663c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	ee07 3a90 	vmov	s15, r3
 8006646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800664e:	4b62      	ldr	r3, [pc, #392]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006656:	ee07 3a90 	vmov	s15, r3
 800665a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800665e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006662:	eddf 5a61 	vldr	s11, [pc, #388]	; 80067e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800666a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800666e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800667e:	e087      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	ee07 3a90 	vmov	s15, r3
 8006686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80067ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800668e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006692:	4b51      	ldr	r3, [pc, #324]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80066a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80067e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066c2:	e065      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	ee07 3a90 	vmov	s15, r3
 80066ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80067f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80066d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066d6:	4b40      	ldr	r3, [pc, #256]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80066ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80067e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006706:	e043      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	ee07 3a90 	vmov	s15, r3
 800670e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006712:	eddf 6a38 	vldr	s13, [pc, #224]	; 80067f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671a:	4b2f      	ldr	r3, [pc, #188]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672a:	ed97 6a02 	vldr	s12, [r7, #8]
 800672e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80067e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800673e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800674a:	e021      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	ee07 3a90 	vmov	s15, r3
 8006752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006756:	eddf 6a26 	vldr	s13, [pc, #152]	; 80067f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800675a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800675e:	4b1e      	ldr	r3, [pc, #120]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800676e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006772:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80067e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800677a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800677e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800678a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800678e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006790:	4b11      	ldr	r3, [pc, #68]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006794:	0a5b      	lsrs	r3, r3, #9
 8006796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800679a:	3301      	adds	r3, #1
 800679c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	ee07 3a90 	vmov	s15, r3
 80067a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80067ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067b4:	ee17 3a90 	vmov	r3, s15
 80067b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80067ba:	e005      	b.n	80067c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	61bb      	str	r3, [r7, #24]
    break;
 80067c0:	e002      	b.n	80067c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80067c2:	4b07      	ldr	r3, [pc, #28]	; (80067e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80067c4:	61bb      	str	r3, [r7, #24]
    break;
 80067c6:	bf00      	nop
  }

  return sysclockfreq;
 80067c8:	69bb      	ldr	r3, [r7, #24]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3724      	adds	r7, #36	; 0x24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	58024400 	.word	0x58024400
 80067dc:	03d09000 	.word	0x03d09000
 80067e0:	003d0900 	.word	0x003d0900
 80067e4:	007a1200 	.word	0x007a1200
 80067e8:	46000000 	.word	0x46000000
 80067ec:	4c742400 	.word	0x4c742400
 80067f0:	4a742400 	.word	0x4a742400
 80067f4:	4af42400 	.word	0x4af42400

080067f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80067fe:	f7ff fe81 	bl	8006504 <HAL_RCC_GetSysClockFreq>
 8006802:	4602      	mov	r2, r0
 8006804:	4b10      	ldr	r3, [pc, #64]	; (8006848 <HAL_RCC_GetHCLKFreq+0x50>)
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	0a1b      	lsrs	r3, r3, #8
 800680a:	f003 030f 	and.w	r3, r3, #15
 800680e:	490f      	ldr	r1, [pc, #60]	; (800684c <HAL_RCC_GetHCLKFreq+0x54>)
 8006810:	5ccb      	ldrb	r3, [r1, r3]
 8006812:	f003 031f 	and.w	r3, r3, #31
 8006816:	fa22 f303 	lsr.w	r3, r2, r3
 800681a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800681c:	4b0a      	ldr	r3, [pc, #40]	; (8006848 <HAL_RCC_GetHCLKFreq+0x50>)
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	f003 030f 	and.w	r3, r3, #15
 8006824:	4a09      	ldr	r2, [pc, #36]	; (800684c <HAL_RCC_GetHCLKFreq+0x54>)
 8006826:	5cd3      	ldrb	r3, [r2, r3]
 8006828:	f003 031f 	and.w	r3, r3, #31
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	fa22 f303 	lsr.w	r3, r2, r3
 8006832:	4a07      	ldr	r2, [pc, #28]	; (8006850 <HAL_RCC_GetHCLKFreq+0x58>)
 8006834:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006836:	4a07      	ldr	r2, [pc, #28]	; (8006854 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800683c:	4b04      	ldr	r3, [pc, #16]	; (8006850 <HAL_RCC_GetHCLKFreq+0x58>)
 800683e:	681b      	ldr	r3, [r3, #0]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	58024400 	.word	0x58024400
 800684c:	0800f090 	.word	0x0800f090
 8006850:	2000015c 	.word	0x2000015c
 8006854:	20000158 	.word	0x20000158

08006858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800685c:	f7ff ffcc 	bl	80067f8 <HAL_RCC_GetHCLKFreq>
 8006860:	4602      	mov	r2, r0
 8006862:	4b06      	ldr	r3, [pc, #24]	; (800687c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	091b      	lsrs	r3, r3, #4
 8006868:	f003 0307 	and.w	r3, r3, #7
 800686c:	4904      	ldr	r1, [pc, #16]	; (8006880 <HAL_RCC_GetPCLK1Freq+0x28>)
 800686e:	5ccb      	ldrb	r3, [r1, r3]
 8006870:	f003 031f 	and.w	r3, r3, #31
 8006874:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006878:	4618      	mov	r0, r3
 800687a:	bd80      	pop	{r7, pc}
 800687c:	58024400 	.word	0x58024400
 8006880:	0800f090 	.word	0x0800f090

08006884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006888:	f7ff ffb6 	bl	80067f8 <HAL_RCC_GetHCLKFreq>
 800688c:	4602      	mov	r2, r0
 800688e:	4b06      	ldr	r3, [pc, #24]	; (80068a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	0a1b      	lsrs	r3, r3, #8
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	4904      	ldr	r1, [pc, #16]	; (80068ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800689a:	5ccb      	ldrb	r3, [r1, r3]
 800689c:	f003 031f 	and.w	r3, r3, #31
 80068a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	58024400 	.word	0x58024400
 80068ac:	0800f090 	.word	0x0800f090

080068b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	223f      	movs	r2, #63	; 0x3f
 80068be:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80068c0:	4b1a      	ldr	r3, [pc, #104]	; (800692c <HAL_RCC_GetClockConfig+0x7c>)
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	f003 0207 	and.w	r2, r3, #7
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80068cc:	4b17      	ldr	r3, [pc, #92]	; (800692c <HAL_RCC_GetClockConfig+0x7c>)
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80068d8:	4b14      	ldr	r3, [pc, #80]	; (800692c <HAL_RCC_GetClockConfig+0x7c>)
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	f003 020f 	and.w	r2, r3, #15
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80068e4:	4b11      	ldr	r3, [pc, #68]	; (800692c <HAL_RCC_GetClockConfig+0x7c>)
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80068f0:	4b0e      	ldr	r3, [pc, #56]	; (800692c <HAL_RCC_GetClockConfig+0x7c>)
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80068fc:	4b0b      	ldr	r3, [pc, #44]	; (800692c <HAL_RCC_GetClockConfig+0x7c>)
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006908:	4b08      	ldr	r3, [pc, #32]	; (800692c <HAL_RCC_GetClockConfig+0x7c>)
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006914:	4b06      	ldr	r3, [pc, #24]	; (8006930 <HAL_RCC_GetClockConfig+0x80>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 020f 	and.w	r2, r3, #15
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	601a      	str	r2, [r3, #0]
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	58024400 	.word	0x58024400
 8006930:	52002000 	.word	0x52002000

08006934 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800693c:	2300      	movs	r3, #0
 800693e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006940:	2300      	movs	r3, #0
 8006942:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d03f      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006954:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006958:	d02a      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800695a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800695e:	d824      	bhi.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006960:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006964:	d018      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006966:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800696a:	d81e      	bhi.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800696c:	2b00      	cmp	r3, #0
 800696e:	d003      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006974:	d007      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006976:	e018      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006978:	4bab      	ldr	r3, [pc, #684]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	4aaa      	ldr	r2, [pc, #680]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800697e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006982:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006984:	e015      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	3304      	adds	r3, #4
 800698a:	2102      	movs	r1, #2
 800698c:	4618      	mov	r0, r3
 800698e:	f001 fff3 	bl	8008978 <RCCEx_PLL2_Config>
 8006992:	4603      	mov	r3, r0
 8006994:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006996:	e00c      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	3324      	adds	r3, #36	; 0x24
 800699c:	2102      	movs	r1, #2
 800699e:	4618      	mov	r0, r3
 80069a0:	f002 f89c 	bl	8008adc <RCCEx_PLL3_Config>
 80069a4:	4603      	mov	r3, r0
 80069a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80069a8:	e003      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	75fb      	strb	r3, [r7, #23]
      break;
 80069ae:	e000      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80069b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069b2:	7dfb      	ldrb	r3, [r7, #23]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d109      	bne.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80069b8:	4b9b      	ldr	r3, [pc, #620]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069c4:	4998      	ldr	r1, [pc, #608]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	650b      	str	r3, [r1, #80]	; 0x50
 80069ca:	e001      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069cc:	7dfb      	ldrb	r3, [r7, #23]
 80069ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d03d      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	d826      	bhi.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80069e4:	a201      	add	r2, pc, #4	; (adr r2, 80069ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80069e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ea:	bf00      	nop
 80069ec:	08006a01 	.word	0x08006a01
 80069f0:	08006a0f 	.word	0x08006a0f
 80069f4:	08006a21 	.word	0x08006a21
 80069f8:	08006a39 	.word	0x08006a39
 80069fc:	08006a39 	.word	0x08006a39
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a00:	4b89      	ldr	r3, [pc, #548]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a04:	4a88      	ldr	r2, [pc, #544]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a0c:	e015      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	3304      	adds	r3, #4
 8006a12:	2100      	movs	r1, #0
 8006a14:	4618      	mov	r0, r3
 8006a16:	f001 ffaf 	bl	8008978 <RCCEx_PLL2_Config>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a1e:	e00c      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3324      	adds	r3, #36	; 0x24
 8006a24:	2100      	movs	r1, #0
 8006a26:	4618      	mov	r0, r3
 8006a28:	f002 f858 	bl	8008adc <RCCEx_PLL3_Config>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a30:	e003      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	75fb      	strb	r3, [r7, #23]
      break;
 8006a36:	e000      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d109      	bne.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a40:	4b79      	ldr	r3, [pc, #484]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a44:	f023 0207 	bic.w	r2, r3, #7
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4c:	4976      	ldr	r1, [pc, #472]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	650b      	str	r3, [r1, #80]	; 0x50
 8006a52:	e001      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a54:	7dfb      	ldrb	r3, [r7, #23]
 8006a56:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d042      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a6c:	d02b      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a72:	d825      	bhi.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006a74:	2bc0      	cmp	r3, #192	; 0xc0
 8006a76:	d028      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006a78:	2bc0      	cmp	r3, #192	; 0xc0
 8006a7a:	d821      	bhi.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006a7c:	2b80      	cmp	r3, #128	; 0x80
 8006a7e:	d016      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006a80:	2b80      	cmp	r3, #128	; 0x80
 8006a82:	d81d      	bhi.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006a88:	2b40      	cmp	r3, #64	; 0x40
 8006a8a:	d007      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006a8c:	e018      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a8e:	4b66      	ldr	r3, [pc, #408]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a92:	4a65      	ldr	r2, [pc, #404]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006a9a:	e017      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f001 ff68 	bl	8008978 <RCCEx_PLL2_Config>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006aac:	e00e      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	3324      	adds	r3, #36	; 0x24
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f002 f811 	bl	8008adc <RCCEx_PLL3_Config>
 8006aba:	4603      	mov	r3, r0
 8006abc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006abe:	e005      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac4:	e002      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006ac6:	bf00      	nop
 8006ac8:	e000      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006aca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d109      	bne.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006ad2:	4b55      	ldr	r3, [pc, #340]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ade:	4952      	ldr	r1, [pc, #328]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	650b      	str	r3, [r1, #80]	; 0x50
 8006ae4:	e001      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae6:	7dfb      	ldrb	r3, [r7, #23]
 8006ae8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d049      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006afc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b00:	d030      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006b02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b06:	d82a      	bhi.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006b08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b0c:	d02c      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006b0e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b12:	d824      	bhi.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b18:	d018      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b1e:	d81e      	bhi.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006b24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b28:	d007      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006b2a:	e018      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b2c:	4b3e      	ldr	r3, [pc, #248]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	4a3d      	ldr	r2, [pc, #244]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b38:	e017      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	2100      	movs	r1, #0
 8006b40:	4618      	mov	r0, r3
 8006b42:	f001 ff19 	bl	8008978 <RCCEx_PLL2_Config>
 8006b46:	4603      	mov	r3, r0
 8006b48:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006b4a:	e00e      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	3324      	adds	r3, #36	; 0x24
 8006b50:	2100      	movs	r1, #0
 8006b52:	4618      	mov	r0, r3
 8006b54:	f001 ffc2 	bl	8008adc <RCCEx_PLL3_Config>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b5c:	e005      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	75fb      	strb	r3, [r7, #23]
      break;
 8006b62:	e002      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006b64:	bf00      	nop
 8006b66:	e000      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10a      	bne.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006b70:	4b2d      	ldr	r3, [pc, #180]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b74:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b7e:	492a      	ldr	r1, [pc, #168]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	658b      	str	r3, [r1, #88]	; 0x58
 8006b84:	e001      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b86:	7dfb      	ldrb	r3, [r7, #23]
 8006b88:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d04c      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ba0:	d030      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006ba2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ba6:	d82a      	bhi.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006ba8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bac:	d02c      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006bae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bb2:	d824      	bhi.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006bb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bb8:	d018      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006bba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bbe:	d81e      	bhi.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d003      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bc8:	d007      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006bca:	e018      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bcc:	4b16      	ldr	r3, [pc, #88]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd0:	4a15      	ldr	r2, [pc, #84]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006bd8:	e017      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	3304      	adds	r3, #4
 8006bde:	2100      	movs	r1, #0
 8006be0:	4618      	mov	r0, r3
 8006be2:	f001 fec9 	bl	8008978 <RCCEx_PLL2_Config>
 8006be6:	4603      	mov	r3, r0
 8006be8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006bea:	e00e      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3324      	adds	r3, #36	; 0x24
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f001 ff72 	bl	8008adc <RCCEx_PLL3_Config>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006bfc:	e005      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	75fb      	strb	r3, [r7, #23]
      break;
 8006c02:	e002      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006c04:	bf00      	nop
 8006c06:	e000      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c0a:	7dfb      	ldrb	r3, [r7, #23]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10d      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006c10:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c14:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c1e:	4902      	ldr	r1, [pc, #8]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	658b      	str	r3, [r1, #88]	; 0x58
 8006c24:	e004      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006c26:	bf00      	nop
 8006c28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2c:	7dfb      	ldrb	r3, [r7, #23]
 8006c2e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d032      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c40:	2b30      	cmp	r3, #48	; 0x30
 8006c42:	d01c      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006c44:	2b30      	cmp	r3, #48	; 0x30
 8006c46:	d817      	bhi.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006c48:	2b20      	cmp	r3, #32
 8006c4a:	d00c      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006c4c:	2b20      	cmp	r3, #32
 8006c4e:	d813      	bhi.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d016      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006c54:	2b10      	cmp	r3, #16
 8006c56:	d10f      	bne.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c58:	4baf      	ldr	r3, [pc, #700]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5c:	4aae      	ldr	r2, [pc, #696]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006c64:	e00e      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	3304      	adds	r3, #4
 8006c6a:	2102      	movs	r1, #2
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f001 fe83 	bl	8008978 <RCCEx_PLL2_Config>
 8006c72:	4603      	mov	r3, r0
 8006c74:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006c76:	e005      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c7c:	e002      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006c7e:	bf00      	nop
 8006c80:	e000      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d109      	bne.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006c8a:	4ba3      	ldr	r3, [pc, #652]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c96:	49a0      	ldr	r1, [pc, #640]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c9c:	e001      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ca0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d047      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cb6:	d030      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cbc:	d82a      	bhi.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006cbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cc2:	d02c      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006cc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cc8:	d824      	bhi.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cce:	d018      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cd4:	d81e      	bhi.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cde:	d007      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006ce0:	e018      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce2:	4b8d      	ldr	r3, [pc, #564]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce6:	4a8c      	ldr	r2, [pc, #560]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006cee:	e017      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f001 fe3e 	bl	8008978 <RCCEx_PLL2_Config>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006d00:	e00e      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3324      	adds	r3, #36	; 0x24
 8006d06:	2100      	movs	r1, #0
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f001 fee7 	bl	8008adc <RCCEx_PLL3_Config>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006d12:	e005      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	75fb      	strb	r3, [r7, #23]
      break;
 8006d18:	e002      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006d1a:	bf00      	nop
 8006d1c:	e000      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006d1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d109      	bne.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006d26:	4b7c      	ldr	r3, [pc, #496]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d2a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d32:	4979      	ldr	r1, [pc, #484]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	650b      	str	r3, [r1, #80]	; 0x50
 8006d38:	e001      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d3a:	7dfb      	ldrb	r3, [r7, #23]
 8006d3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d049      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d52:	d02e      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d58:	d828      	bhi.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006d5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d5e:	d02a      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006d60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d64:	d822      	bhi.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006d66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d6a:	d026      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006d6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d70:	d81c      	bhi.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006d72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d76:	d010      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d7c:	d816      	bhi.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d01d      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d86:	d111      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f001 fdf2 	bl	8008978 <RCCEx_PLL2_Config>
 8006d94:	4603      	mov	r3, r0
 8006d96:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006d98:	e012      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	3324      	adds	r3, #36	; 0x24
 8006d9e:	2101      	movs	r1, #1
 8006da0:	4618      	mov	r0, r3
 8006da2:	f001 fe9b 	bl	8008adc <RCCEx_PLL3_Config>
 8006da6:	4603      	mov	r3, r0
 8006da8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006daa:	e009      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	75fb      	strb	r3, [r7, #23]
      break;
 8006db0:	e006      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006db2:	bf00      	nop
 8006db4:	e004      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006db6:	bf00      	nop
 8006db8:	e002      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006dba:	bf00      	nop
 8006dbc:	e000      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d109      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006dc6:	4b54      	ldr	r3, [pc, #336]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dca:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd2:	4951      	ldr	r1, [pc, #324]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	650b      	str	r3, [r1, #80]	; 0x50
 8006dd8:	e001      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d04b      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006df4:	d02e      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dfa:	d828      	bhi.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e00:	d02a      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e06:	d822      	bhi.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006e08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e0c:	d026      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006e0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e12:	d81c      	bhi.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e18:	d010      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006e1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e1e:	d816      	bhi.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d01d      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006e24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e28:	d111      	bne.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	2101      	movs	r1, #1
 8006e30:	4618      	mov	r0, r3
 8006e32:	f001 fda1 	bl	8008978 <RCCEx_PLL2_Config>
 8006e36:	4603      	mov	r3, r0
 8006e38:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006e3a:	e012      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	3324      	adds	r3, #36	; 0x24
 8006e40:	2101      	movs	r1, #1
 8006e42:	4618      	mov	r0, r3
 8006e44:	f001 fe4a 	bl	8008adc <RCCEx_PLL3_Config>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006e4c:	e009      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	75fb      	strb	r3, [r7, #23]
      break;
 8006e52:	e006      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006e54:	bf00      	nop
 8006e56:	e004      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006e58:	bf00      	nop
 8006e5a:	e002      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006e5c:	bf00      	nop
 8006e5e:	e000      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e62:	7dfb      	ldrb	r3, [r7, #23]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10a      	bne.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006e68:	4b2b      	ldr	r3, [pc, #172]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e6c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e76:	4928      	ldr	r1, [pc, #160]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	658b      	str	r3, [r1, #88]	; 0x58
 8006e7c:	e001      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
 8006e80:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d02f      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e96:	d00e      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e9c:	d814      	bhi.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d015      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006ea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ea6:	d10f      	bne.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea8:	4b1b      	ldr	r3, [pc, #108]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eac:	4a1a      	ldr	r2, [pc, #104]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006eb4:	e00c      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	2101      	movs	r1, #1
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f001 fd5b 	bl	8008978 <RCCEx_PLL2_Config>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ec6:	e003      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	75fb      	strb	r3, [r7, #23]
      break;
 8006ecc:	e000      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d109      	bne.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ed6:	4b10      	ldr	r3, [pc, #64]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ee2:	490d      	ldr	r1, [pc, #52]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	650b      	str	r3, [r1, #80]	; 0x50
 8006ee8:	e001      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
 8006eec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d033      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	d81c      	bhi.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006f02:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f08:	08006f43 	.word	0x08006f43
 8006f0c:	08006f1d 	.word	0x08006f1d
 8006f10:	08006f2b 	.word	0x08006f2b
 8006f14:	08006f43 	.word	0x08006f43
 8006f18:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f1c:	4bb8      	ldr	r3, [pc, #736]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	4ab7      	ldr	r2, [pc, #732]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006f28:	e00c      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	2102      	movs	r1, #2
 8006f30:	4618      	mov	r0, r3
 8006f32:	f001 fd21 	bl	8008978 <RCCEx_PLL2_Config>
 8006f36:	4603      	mov	r3, r0
 8006f38:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006f3a:	e003      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f40:	e000      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f44:	7dfb      	ldrb	r3, [r7, #23]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d109      	bne.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f4a:	4bad      	ldr	r3, [pc, #692]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f4e:	f023 0203 	bic.w	r2, r3, #3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f56:	49aa      	ldr	r1, [pc, #680]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f5c:	e001      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f5e:	7dfb      	ldrb	r3, [r7, #23]
 8006f60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 8086 	beq.w	800707c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f70:	4ba4      	ldr	r3, [pc, #656]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4aa3      	ldr	r2, [pc, #652]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f7c:	f7fc ff8e 	bl	8003e9c <HAL_GetTick>
 8006f80:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f82:	e009      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f84:	f7fc ff8a 	bl	8003e9c <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b64      	cmp	r3, #100	; 0x64
 8006f90:	d902      	bls.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	75fb      	strb	r3, [r7, #23]
        break;
 8006f96:	e005      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f98:	4b9a      	ldr	r3, [pc, #616]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d0ef      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006fa4:	7dfb      	ldrb	r3, [r7, #23]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d166      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006faa:	4b95      	ldr	r3, [pc, #596]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006fac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fb4:	4053      	eors	r3, r2
 8006fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d013      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fbe:	4b90      	ldr	r3, [pc, #576]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fc6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fc8:	4b8d      	ldr	r3, [pc, #564]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fcc:	4a8c      	ldr	r2, [pc, #560]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fd2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fd4:	4b8a      	ldr	r3, [pc, #552]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd8:	4a89      	ldr	r2, [pc, #548]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fde:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006fe0:	4a87      	ldr	r2, [pc, #540]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff0:	d115      	bne.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff2:	f7fc ff53 	bl	8003e9c <HAL_GetTick>
 8006ff6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ff8:	e00b      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ffa:	f7fc ff4f 	bl	8003e9c <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	f241 3288 	movw	r2, #5000	; 0x1388
 8007008:	4293      	cmp	r3, r2
 800700a:	d902      	bls.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	75fb      	strb	r3, [r7, #23]
            break;
 8007010:	e005      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007012:	4b7b      	ldr	r3, [pc, #492]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0ed      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800701e:	7dfb      	ldrb	r3, [r7, #23]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d126      	bne.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800702a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800702e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007032:	d10d      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007034:	4b72      	ldr	r3, [pc, #456]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007042:	0919      	lsrs	r1, r3, #4
 8007044:	4b70      	ldr	r3, [pc, #448]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007046:	400b      	ands	r3, r1
 8007048:	496d      	ldr	r1, [pc, #436]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800704a:	4313      	orrs	r3, r2
 800704c:	610b      	str	r3, [r1, #16]
 800704e:	e005      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007050:	4b6b      	ldr	r3, [pc, #428]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	4a6a      	ldr	r2, [pc, #424]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007056:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800705a:	6113      	str	r3, [r2, #16]
 800705c:	4b68      	ldr	r3, [pc, #416]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800705e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800706a:	4965      	ldr	r1, [pc, #404]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800706c:	4313      	orrs	r3, r2
 800706e:	670b      	str	r3, [r1, #112]	; 0x70
 8007070:	e004      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007072:	7dfb      	ldrb	r3, [r7, #23]
 8007074:	75bb      	strb	r3, [r7, #22]
 8007076:	e001      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007078:	7dfb      	ldrb	r3, [r7, #23]
 800707a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b00      	cmp	r3, #0
 8007086:	d07e      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800708c:	2b28      	cmp	r3, #40	; 0x28
 800708e:	d867      	bhi.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007090:	a201      	add	r2, pc, #4	; (adr r2, 8007098 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007096:	bf00      	nop
 8007098:	08007167 	.word	0x08007167
 800709c:	08007161 	.word	0x08007161
 80070a0:	08007161 	.word	0x08007161
 80070a4:	08007161 	.word	0x08007161
 80070a8:	08007161 	.word	0x08007161
 80070ac:	08007161 	.word	0x08007161
 80070b0:	08007161 	.word	0x08007161
 80070b4:	08007161 	.word	0x08007161
 80070b8:	0800713d 	.word	0x0800713d
 80070bc:	08007161 	.word	0x08007161
 80070c0:	08007161 	.word	0x08007161
 80070c4:	08007161 	.word	0x08007161
 80070c8:	08007161 	.word	0x08007161
 80070cc:	08007161 	.word	0x08007161
 80070d0:	08007161 	.word	0x08007161
 80070d4:	08007161 	.word	0x08007161
 80070d8:	0800714f 	.word	0x0800714f
 80070dc:	08007161 	.word	0x08007161
 80070e0:	08007161 	.word	0x08007161
 80070e4:	08007161 	.word	0x08007161
 80070e8:	08007161 	.word	0x08007161
 80070ec:	08007161 	.word	0x08007161
 80070f0:	08007161 	.word	0x08007161
 80070f4:	08007161 	.word	0x08007161
 80070f8:	08007167 	.word	0x08007167
 80070fc:	08007161 	.word	0x08007161
 8007100:	08007161 	.word	0x08007161
 8007104:	08007161 	.word	0x08007161
 8007108:	08007161 	.word	0x08007161
 800710c:	08007161 	.word	0x08007161
 8007110:	08007161 	.word	0x08007161
 8007114:	08007161 	.word	0x08007161
 8007118:	08007167 	.word	0x08007167
 800711c:	08007161 	.word	0x08007161
 8007120:	08007161 	.word	0x08007161
 8007124:	08007161 	.word	0x08007161
 8007128:	08007161 	.word	0x08007161
 800712c:	08007161 	.word	0x08007161
 8007130:	08007161 	.word	0x08007161
 8007134:	08007161 	.word	0x08007161
 8007138:	08007167 	.word	0x08007167
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3304      	adds	r3, #4
 8007140:	2101      	movs	r1, #1
 8007142:	4618      	mov	r0, r3
 8007144:	f001 fc18 	bl	8008978 <RCCEx_PLL2_Config>
 8007148:	4603      	mov	r3, r0
 800714a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800714c:	e00c      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3324      	adds	r3, #36	; 0x24
 8007152:	2101      	movs	r1, #1
 8007154:	4618      	mov	r0, r3
 8007156:	f001 fcc1 	bl	8008adc <RCCEx_PLL3_Config>
 800715a:	4603      	mov	r3, r0
 800715c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800715e:	e003      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	75fb      	strb	r3, [r7, #23]
      break;
 8007164:	e000      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007166:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007168:	7dfb      	ldrb	r3, [r7, #23]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d109      	bne.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800716e:	4b24      	ldr	r3, [pc, #144]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007172:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800717a:	4921      	ldr	r1, [pc, #132]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800717c:	4313      	orrs	r3, r2
 800717e:	654b      	str	r3, [r1, #84]	; 0x54
 8007180:	e001      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007182:	7dfb      	ldrb	r3, [r7, #23]
 8007184:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d03e      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007196:	2b05      	cmp	r3, #5
 8007198:	d820      	bhi.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800719a:	a201      	add	r2, pc, #4	; (adr r2, 80071a0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800719c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a0:	080071e3 	.word	0x080071e3
 80071a4:	080071b9 	.word	0x080071b9
 80071a8:	080071cb 	.word	0x080071cb
 80071ac:	080071e3 	.word	0x080071e3
 80071b0:	080071e3 	.word	0x080071e3
 80071b4:	080071e3 	.word	0x080071e3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3304      	adds	r3, #4
 80071bc:	2101      	movs	r1, #1
 80071be:	4618      	mov	r0, r3
 80071c0:	f001 fbda 	bl	8008978 <RCCEx_PLL2_Config>
 80071c4:	4603      	mov	r3, r0
 80071c6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80071c8:	e00c      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3324      	adds	r3, #36	; 0x24
 80071ce:	2101      	movs	r1, #1
 80071d0:	4618      	mov	r0, r3
 80071d2:	f001 fc83 	bl	8008adc <RCCEx_PLL3_Config>
 80071d6:	4603      	mov	r3, r0
 80071d8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80071da:	e003      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	75fb      	strb	r3, [r7, #23]
      break;
 80071e0:	e000      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80071e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071e4:	7dfb      	ldrb	r3, [r7, #23]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d110      	bne.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80071ea:	4b05      	ldr	r3, [pc, #20]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ee:	f023 0207 	bic.w	r2, r3, #7
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071f6:	4902      	ldr	r1, [pc, #8]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	654b      	str	r3, [r1, #84]	; 0x54
 80071fc:	e008      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80071fe:	bf00      	nop
 8007200:	58024400 	.word	0x58024400
 8007204:	58024800 	.word	0x58024800
 8007208:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800720c:	7dfb      	ldrb	r3, [r7, #23]
 800720e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b00      	cmp	r3, #0
 800721a:	d039      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007222:	2b05      	cmp	r3, #5
 8007224:	d820      	bhi.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007226:	a201      	add	r2, pc, #4	; (adr r2, 800722c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722c:	0800726f 	.word	0x0800726f
 8007230:	08007245 	.word	0x08007245
 8007234:	08007257 	.word	0x08007257
 8007238:	0800726f 	.word	0x0800726f
 800723c:	0800726f 	.word	0x0800726f
 8007240:	0800726f 	.word	0x0800726f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3304      	adds	r3, #4
 8007248:	2101      	movs	r1, #1
 800724a:	4618      	mov	r0, r3
 800724c:	f001 fb94 	bl	8008978 <RCCEx_PLL2_Config>
 8007250:	4603      	mov	r3, r0
 8007252:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007254:	e00c      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	3324      	adds	r3, #36	; 0x24
 800725a:	2101      	movs	r1, #1
 800725c:	4618      	mov	r0, r3
 800725e:	f001 fc3d 	bl	8008adc <RCCEx_PLL3_Config>
 8007262:	4603      	mov	r3, r0
 8007264:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007266:	e003      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	75fb      	strb	r3, [r7, #23]
      break;
 800726c:	e000      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800726e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007276:	4bb7      	ldr	r3, [pc, #732]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800727a:	f023 0207 	bic.w	r2, r3, #7
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007284:	49b3      	ldr	r1, [pc, #716]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007286:	4313      	orrs	r3, r2
 8007288:	658b      	str	r3, [r1, #88]	; 0x58
 800728a:	e001      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0320 	and.w	r3, r3, #32
 8007298:	2b00      	cmp	r3, #0
 800729a:	d04b      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072a6:	d02e      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80072a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072ac:	d828      	bhi.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80072ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b2:	d02a      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80072b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b8:	d822      	bhi.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80072ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072be:	d026      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80072c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072c4:	d81c      	bhi.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80072c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072ca:	d010      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80072cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072d0:	d816      	bhi.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d01d      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80072d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072da:	d111      	bne.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3304      	adds	r3, #4
 80072e0:	2100      	movs	r1, #0
 80072e2:	4618      	mov	r0, r3
 80072e4:	f001 fb48 	bl	8008978 <RCCEx_PLL2_Config>
 80072e8:	4603      	mov	r3, r0
 80072ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80072ec:	e012      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	3324      	adds	r3, #36	; 0x24
 80072f2:	2102      	movs	r1, #2
 80072f4:	4618      	mov	r0, r3
 80072f6:	f001 fbf1 	bl	8008adc <RCCEx_PLL3_Config>
 80072fa:	4603      	mov	r3, r0
 80072fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80072fe:	e009      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	75fb      	strb	r3, [r7, #23]
      break;
 8007304:	e006      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007306:	bf00      	nop
 8007308:	e004      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800730a:	bf00      	nop
 800730c:	e002      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800730e:	bf00      	nop
 8007310:	e000      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007312:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007314:	7dfb      	ldrb	r3, [r7, #23]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10a      	bne.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800731a:	4b8e      	ldr	r3, [pc, #568]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800731c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007328:	498a      	ldr	r1, [pc, #552]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800732a:	4313      	orrs	r3, r2
 800732c:	654b      	str	r3, [r1, #84]	; 0x54
 800732e:	e001      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007330:	7dfb      	ldrb	r3, [r7, #23]
 8007332:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733c:	2b00      	cmp	r3, #0
 800733e:	d04b      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007346:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800734a:	d02e      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800734c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007350:	d828      	bhi.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007356:	d02a      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800735c:	d822      	bhi.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800735e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007362:	d026      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007364:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007368:	d81c      	bhi.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800736a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800736e:	d010      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007374:	d816      	bhi.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007376:	2b00      	cmp	r3, #0
 8007378:	d01d      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800737a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800737e:	d111      	bne.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3304      	adds	r3, #4
 8007384:	2100      	movs	r1, #0
 8007386:	4618      	mov	r0, r3
 8007388:	f001 faf6 	bl	8008978 <RCCEx_PLL2_Config>
 800738c:	4603      	mov	r3, r0
 800738e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007390:	e012      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3324      	adds	r3, #36	; 0x24
 8007396:	2102      	movs	r1, #2
 8007398:	4618      	mov	r0, r3
 800739a:	f001 fb9f 	bl	8008adc <RCCEx_PLL3_Config>
 800739e:	4603      	mov	r3, r0
 80073a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80073a2:	e009      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	75fb      	strb	r3, [r7, #23]
      break;
 80073a8:	e006      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80073aa:	bf00      	nop
 80073ac:	e004      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80073ae:	bf00      	nop
 80073b0:	e002      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80073b2:	bf00      	nop
 80073b4:	e000      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80073b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10a      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80073be:	4b65      	ldr	r3, [pc, #404]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80073c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073cc:	4961      	ldr	r1, [pc, #388]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	658b      	str	r3, [r1, #88]	; 0x58
 80073d2:	e001      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d4:	7dfb      	ldrb	r3, [r7, #23]
 80073d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d04b      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80073ee:	d02e      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80073f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80073f4:	d828      	bhi.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80073f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073fa:	d02a      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80073fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007400:	d822      	bhi.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007402:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007406:	d026      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007408:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800740c:	d81c      	bhi.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800740e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007412:	d010      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007414:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007418:	d816      	bhi.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800741a:	2b00      	cmp	r3, #0
 800741c:	d01d      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800741e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007422:	d111      	bne.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	3304      	adds	r3, #4
 8007428:	2100      	movs	r1, #0
 800742a:	4618      	mov	r0, r3
 800742c:	f001 faa4 	bl	8008978 <RCCEx_PLL2_Config>
 8007430:	4603      	mov	r3, r0
 8007432:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007434:	e012      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	3324      	adds	r3, #36	; 0x24
 800743a:	2102      	movs	r1, #2
 800743c:	4618      	mov	r0, r3
 800743e:	f001 fb4d 	bl	8008adc <RCCEx_PLL3_Config>
 8007442:	4603      	mov	r3, r0
 8007444:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007446:	e009      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	75fb      	strb	r3, [r7, #23]
      break;
 800744c:	e006      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800744e:	bf00      	nop
 8007450:	e004      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007452:	bf00      	nop
 8007454:	e002      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007456:	bf00      	nop
 8007458:	e000      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800745a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10a      	bne.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007462:	4b3c      	ldr	r3, [pc, #240]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007470:	4938      	ldr	r1, [pc, #224]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007472:	4313      	orrs	r3, r2
 8007474:	658b      	str	r3, [r1, #88]	; 0x58
 8007476:	e001      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0308 	and.w	r3, r3, #8
 8007484:	2b00      	cmp	r3, #0
 8007486:	d01a      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800748e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007492:	d10a      	bne.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3324      	adds	r3, #36	; 0x24
 8007498:	2102      	movs	r1, #2
 800749a:	4618      	mov	r0, r3
 800749c:	f001 fb1e 	bl	8008adc <RCCEx_PLL3_Config>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80074aa:	4b2a      	ldr	r3, [pc, #168]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80074ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074b8:	4926      	ldr	r1, [pc, #152]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0310 	and.w	r3, r3, #16
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d01a      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074d4:	d10a      	bne.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3324      	adds	r3, #36	; 0x24
 80074da:	2102      	movs	r1, #2
 80074dc:	4618      	mov	r0, r3
 80074de:	f001 fafd 	bl	8008adc <RCCEx_PLL3_Config>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80074ec:	4b19      	ldr	r3, [pc, #100]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80074ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074fa:	4916      	ldr	r1, [pc, #88]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d036      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007512:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007516:	d01f      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800751c:	d817      	bhi.n	800754e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007526:	d009      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007528:	e011      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	3304      	adds	r3, #4
 800752e:	2100      	movs	r1, #0
 8007530:	4618      	mov	r0, r3
 8007532:	f001 fa21 	bl	8008978 <RCCEx_PLL2_Config>
 8007536:	4603      	mov	r3, r0
 8007538:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800753a:	e00e      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3324      	adds	r3, #36	; 0x24
 8007540:	2102      	movs	r1, #2
 8007542:	4618      	mov	r0, r3
 8007544:	f001 faca 	bl	8008adc <RCCEx_PLL3_Config>
 8007548:	4603      	mov	r3, r0
 800754a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800754c:	e005      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	75fb      	strb	r3, [r7, #23]
      break;
 8007552:	e002      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007554:	58024400 	.word	0x58024400
      break;
 8007558:	bf00      	nop
    }

    if(ret == HAL_OK)
 800755a:	7dfb      	ldrb	r3, [r7, #23]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10a      	bne.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007560:	4b93      	ldr	r3, [pc, #588]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007564:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800756e:	4990      	ldr	r1, [pc, #576]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007570:	4313      	orrs	r3, r2
 8007572:	658b      	str	r3, [r1, #88]	; 0x58
 8007574:	e001      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007576:	7dfb      	ldrb	r3, [r7, #23]
 8007578:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d033      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800758c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007590:	d01c      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007592:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007596:	d816      	bhi.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800759c:	d003      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800759e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075a2:	d007      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80075a4:	e00f      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075a6:	4b82      	ldr	r3, [pc, #520]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075aa:	4a81      	ldr	r2, [pc, #516]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80075b2:	e00c      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	3324      	adds	r3, #36	; 0x24
 80075b8:	2101      	movs	r1, #1
 80075ba:	4618      	mov	r0, r3
 80075bc:	f001 fa8e 	bl	8008adc <RCCEx_PLL3_Config>
 80075c0:	4603      	mov	r3, r0
 80075c2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80075c4:	e003      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	75fb      	strb	r3, [r7, #23]
      break;
 80075ca:	e000      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80075cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10a      	bne.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075d4:	4b76      	ldr	r3, [pc, #472]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075e2:	4973      	ldr	r1, [pc, #460]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075e4:	4313      	orrs	r3, r2
 80075e6:	654b      	str	r3, [r1, #84]	; 0x54
 80075e8:	e001      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
 80075ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d029      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007606:	d007      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007608:	e00f      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800760a:	4b69      	ldr	r3, [pc, #420]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800760c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760e:	4a68      	ldr	r2, [pc, #416]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007614:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007616:	e00b      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	3304      	adds	r3, #4
 800761c:	2102      	movs	r1, #2
 800761e:	4618      	mov	r0, r3
 8007620:	f001 f9aa 	bl	8008978 <RCCEx_PLL2_Config>
 8007624:	4603      	mov	r3, r0
 8007626:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007628:	e002      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	75fb      	strb	r3, [r7, #23]
      break;
 800762e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007630:	7dfb      	ldrb	r3, [r7, #23]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d109      	bne.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007636:	4b5e      	ldr	r3, [pc, #376]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800763a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007642:	495b      	ldr	r1, [pc, #364]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007644:	4313      	orrs	r3, r2
 8007646:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007648:	e001      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800764a:	7dfb      	ldrb	r3, [r7, #23]
 800764c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00a      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	3324      	adds	r3, #36	; 0x24
 800765e:	2102      	movs	r1, #2
 8007660:	4618      	mov	r0, r3
 8007662:	f001 fa3b 	bl	8008adc <RCCEx_PLL3_Config>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d030      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007680:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007684:	d017      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800768a:	d811      	bhi.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800768c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007690:	d013      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007696:	d80b      	bhi.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d010      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800769c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076a0:	d106      	bne.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076a2:	4b43      	ldr	r3, [pc, #268]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80076a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a6:	4a42      	ldr	r2, [pc, #264]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80076a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80076ae:	e007      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	75fb      	strb	r3, [r7, #23]
      break;
 80076b4:	e004      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80076b6:	bf00      	nop
 80076b8:	e002      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80076ba:	bf00      	nop
 80076bc:	e000      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80076be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076c0:	7dfb      	ldrb	r3, [r7, #23]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d109      	bne.n	80076da <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076c6:	4b3a      	ldr	r3, [pc, #232]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80076c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076d2:	4937      	ldr	r1, [pc, #220]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	654b      	str	r3, [r1, #84]	; 0x54
 80076d8:	e001      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d008      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80076ea:	4b31      	ldr	r3, [pc, #196]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80076ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f6:	492e      	ldr	r1, [pc, #184]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d009      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007708:	4b29      	ldr	r3, [pc, #164]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007716:	4926      	ldr	r1, [pc, #152]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007718:	4313      	orrs	r3, r2
 800771a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d008      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007728:	4b21      	ldr	r3, [pc, #132]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800772a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800772c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007734:	491e      	ldr	r1, [pc, #120]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007736:	4313      	orrs	r3, r2
 8007738:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00d      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007746:	4b1a      	ldr	r3, [pc, #104]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	4a19      	ldr	r2, [pc, #100]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800774c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007750:	6113      	str	r3, [r2, #16]
 8007752:	4b17      	ldr	r3, [pc, #92]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007754:	691a      	ldr	r2, [r3, #16]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800775c:	4914      	ldr	r1, [pc, #80]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800775e:	4313      	orrs	r3, r2
 8007760:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	da08      	bge.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800776a:	4b11      	ldr	r3, [pc, #68]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800776c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800776e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007776:	490e      	ldr	r1, [pc, #56]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007778:	4313      	orrs	r3, r2
 800777a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d009      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007788:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800778a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800778c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007796:	4906      	ldr	r1, [pc, #24]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007798:	4313      	orrs	r3, r2
 800779a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800779c:	7dbb      	ldrb	r3, [r7, #22]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	e000      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	58024400 	.word	0x58024400

080077b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b090      	sub	sp, #64	; 0x40
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077c2:	f040 8095 	bne.w	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80077c6:	4bae      	ldr	r3, [pc, #696]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80077c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ca:	f003 0307 	and.w	r3, r3, #7
 80077ce:	633b      	str	r3, [r7, #48]	; 0x30
 80077d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	f200 8088 	bhi.w	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80077d8:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80077da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077de:	bf00      	nop
 80077e0:	080077f5 	.word	0x080077f5
 80077e4:	0800781d 	.word	0x0800781d
 80077e8:	08007845 	.word	0x08007845
 80077ec:	080078e1 	.word	0x080078e1
 80077f0:	0800786d 	.word	0x0800786d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80077f4:	4ba2      	ldr	r3, [pc, #648]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007800:	d108      	bne.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007806:	4618      	mov	r0, r3
 8007808:	f000 ff64 	bl	80086d4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007810:	f000 bc95 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007814:	2300      	movs	r3, #0
 8007816:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007818:	f000 bc91 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800781c:	4b98      	ldr	r3, [pc, #608]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007824:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007828:	d108      	bne.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800782a:	f107 0318 	add.w	r3, r7, #24
 800782e:	4618      	mov	r0, r3
 8007830:	f000 fca8 	bl	8008184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007838:	f000 bc81 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800783c:	2300      	movs	r3, #0
 800783e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007840:	f000 bc7d 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007844:	4b8e      	ldr	r3, [pc, #568]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800784c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007850:	d108      	bne.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007852:	f107 030c 	add.w	r3, r7, #12
 8007856:	4618      	mov	r0, r3
 8007858:	f000 fde8 	bl	800842c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007860:	f000 bc6d 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007864:	2300      	movs	r3, #0
 8007866:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007868:	f000 bc69 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800786c:	4b84      	ldr	r3, [pc, #528]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800786e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007870:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007874:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007876:	4b82      	ldr	r3, [pc, #520]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0304 	and.w	r3, r3, #4
 800787e:	2b04      	cmp	r3, #4
 8007880:	d10c      	bne.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007884:	2b00      	cmp	r3, #0
 8007886:	d109      	bne.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007888:	4b7d      	ldr	r3, [pc, #500]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	08db      	lsrs	r3, r3, #3
 800788e:	f003 0303 	and.w	r3, r3, #3
 8007892:	4a7c      	ldr	r2, [pc, #496]	; (8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007894:	fa22 f303 	lsr.w	r3, r2, r3
 8007898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800789a:	e01f      	b.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800789c:	4b78      	ldr	r3, [pc, #480]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078a8:	d106      	bne.n	80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80078aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078b0:	d102      	bne.n	80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80078b2:	4b75      	ldr	r3, [pc, #468]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80078b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078b6:	e011      	b.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078b8:	4b71      	ldr	r3, [pc, #452]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078c4:	d106      	bne.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80078c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078cc:	d102      	bne.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80078ce:	4b6f      	ldr	r3, [pc, #444]	; (8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80078d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078d2:	e003      	b.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80078d4:	2300      	movs	r3, #0
 80078d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80078d8:	f000 bc31 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80078dc:	f000 bc2f 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80078e0:	4b6b      	ldr	r3, [pc, #428]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80078e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078e4:	f000 bc2b 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80078e8:	2300      	movs	r3, #0
 80078ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078ec:	f000 bc27 	b.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f6:	f040 8095 	bne.w	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80078fa:	4b61      	ldr	r3, [pc, #388]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80078fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078fe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007902:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800790a:	d04d      	beq.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800790c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007912:	f200 8084 	bhi.w	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007918:	2bc0      	cmp	r3, #192	; 0xc0
 800791a:	d07d      	beq.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800791c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791e:	2bc0      	cmp	r3, #192	; 0xc0
 8007920:	d87d      	bhi.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	2b80      	cmp	r3, #128	; 0x80
 8007926:	d02d      	beq.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792a:	2b80      	cmp	r3, #128	; 0x80
 800792c:	d877      	bhi.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	2b00      	cmp	r3, #0
 8007932:	d003      	beq.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8007934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007936:	2b40      	cmp	r3, #64	; 0x40
 8007938:	d012      	beq.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800793a:	e070      	b.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800793c:	4b50      	ldr	r3, [pc, #320]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007944:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007948:	d107      	bne.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800794a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800794e:	4618      	mov	r0, r3
 8007950:	f000 fec0 	bl	80086d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007956:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007958:	e3f1      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800795a:	2300      	movs	r3, #0
 800795c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800795e:	e3ee      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007960:	4b47      	ldr	r3, [pc, #284]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007968:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800796c:	d107      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800796e:	f107 0318 	add.w	r3, r7, #24
 8007972:	4618      	mov	r0, r3
 8007974:	f000 fc06 	bl	8008184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800797c:	e3df      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800797e:	2300      	movs	r3, #0
 8007980:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007982:	e3dc      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007984:	4b3e      	ldr	r3, [pc, #248]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800798c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007990:	d107      	bne.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007992:	f107 030c 	add.w	r3, r7, #12
 8007996:	4618      	mov	r0, r3
 8007998:	f000 fd48 	bl	800842c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80079a0:	e3cd      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80079a2:	2300      	movs	r3, #0
 80079a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079a6:	e3ca      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80079a8:	4b35      	ldr	r3, [pc, #212]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80079aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079b0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079b2:	4b33      	ldr	r3, [pc, #204]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0304 	and.w	r3, r3, #4
 80079ba:	2b04      	cmp	r3, #4
 80079bc:	d10c      	bne.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80079be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d109      	bne.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079c4:	4b2e      	ldr	r3, [pc, #184]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	08db      	lsrs	r3, r3, #3
 80079ca:	f003 0303 	and.w	r3, r3, #3
 80079ce:	4a2d      	ldr	r2, [pc, #180]	; (8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80079d0:	fa22 f303 	lsr.w	r3, r2, r3
 80079d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079d6:	e01e      	b.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079d8:	4b29      	ldr	r3, [pc, #164]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079e4:	d106      	bne.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80079e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079ec:	d102      	bne.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80079ee:	4b26      	ldr	r3, [pc, #152]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80079f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079f2:	e010      	b.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079f4:	4b22      	ldr	r3, [pc, #136]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a00:	d106      	bne.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8007a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a08:	d102      	bne.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007a0a:	4b20      	ldr	r3, [pc, #128]	; (8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8007a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a0e:	e002      	b.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007a10:	2300      	movs	r3, #0
 8007a12:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007a14:	e393      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007a16:	e392      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a18:	4b1d      	ldr	r3, [pc, #116]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a1c:	e38f      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a22:	e38c      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a2a:	f040 80a7 	bne.w	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007a2e:	4b14      	ldr	r3, [pc, #80]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a32:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007a36:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a3e:	d05f      	beq.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a46:	f200 8096 	bhi.w	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a50:	f000 808e 	beq.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8007a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a56:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a5a:	f200 808c 	bhi.w	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a64:	d03a      	beq.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a6c:	f200 8083 	bhi.w	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00e      	beq.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8007a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a7c:	d01c      	beq.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8007a7e:	e07a      	b.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007a80:	58024400 	.word	0x58024400
 8007a84:	03d09000 	.word	0x03d09000
 8007a88:	003d0900 	.word	0x003d0900
 8007a8c:	007a1200 	.word	0x007a1200
 8007a90:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a94:	4baa      	ldr	r3, [pc, #680]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007aa0:	d107      	bne.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f000 fe14 	bl	80086d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ab0:	e345      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ab6:	e342      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ab8:	4ba1      	ldr	r3, [pc, #644]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ac0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ac4:	d107      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ac6:	f107 0318 	add.w	r3, r7, #24
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 fb5a 	bl	8008184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ad4:	e333      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ada:	e330      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007adc:	4b98      	ldr	r3, [pc, #608]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ae8:	d107      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aea:	f107 030c 	add.w	r3, r7, #12
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 fc9c 	bl	800842c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007af8:	e321      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007afa:	2300      	movs	r3, #0
 8007afc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007afe:	e31e      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b00:	4b8f      	ldr	r3, [pc, #572]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b08:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b0a:	4b8d      	ldr	r3, [pc, #564]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0304 	and.w	r3, r3, #4
 8007b12:	2b04      	cmp	r3, #4
 8007b14:	d10c      	bne.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8007b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d109      	bne.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b1c:	4b88      	ldr	r3, [pc, #544]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	08db      	lsrs	r3, r3, #3
 8007b22:	f003 0303 	and.w	r3, r3, #3
 8007b26:	4a87      	ldr	r2, [pc, #540]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007b28:	fa22 f303 	lsr.w	r3, r2, r3
 8007b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b2e:	e01e      	b.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b30:	4b83      	ldr	r3, [pc, #524]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b3c:	d106      	bne.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8007b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b44:	d102      	bne.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007b46:	4b80      	ldr	r3, [pc, #512]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b4a:	e010      	b.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b4c:	4b7c      	ldr	r3, [pc, #496]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b58:	d106      	bne.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8007b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b60:	d102      	bne.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007b62:	4b7a      	ldr	r3, [pc, #488]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007b64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b66:	e002      	b.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007b6c:	e2e7      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007b6e:	e2e6      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b70:	4b77      	ldr	r3, [pc, #476]	; (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007b72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b74:	e2e3      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007b76:	2300      	movs	r3, #0
 8007b78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b7a:	e2e0      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b82:	f040 809c 	bne.w	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007b86:	4b6e      	ldr	r3, [pc, #440]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b8a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007b8e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b96:	d054      	beq.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8007b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b9e:	f200 808b 	bhi.w	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ba8:	f000 8083 	beq.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8007bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007bb2:	f200 8081 	bhi.w	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bbc:	d02f      	beq.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bc4:	d878      	bhi.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d004      	beq.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bd2:	d012      	beq.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007bd4:	e070      	b.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007bd6:	4b5a      	ldr	r3, [pc, #360]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007be2:	d107      	bne.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 fd73 	bl	80086d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007bf2:	e2a4      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bf8:	e2a1      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bfa:	4b51      	ldr	r3, [pc, #324]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c06:	d107      	bne.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c08:	f107 0318 	add.w	r3, r7, #24
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f000 fab9 	bl	8008184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8007c16:	e292      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c1c:	e28f      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c1e:	4b48      	ldr	r3, [pc, #288]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c2a:	d107      	bne.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c2c:	f107 030c 	add.w	r3, r7, #12
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 fbfb 	bl	800842c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c3a:	e280      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c40:	e27d      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c42:	4b3f      	ldr	r3, [pc, #252]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c4a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c4c:	4b3c      	ldr	r3, [pc, #240]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b04      	cmp	r3, #4
 8007c56:	d10c      	bne.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d109      	bne.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c5e:	4b38      	ldr	r3, [pc, #224]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	08db      	lsrs	r3, r3, #3
 8007c64:	f003 0303 	and.w	r3, r3, #3
 8007c68:	4a36      	ldr	r2, [pc, #216]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c70:	e01e      	b.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c72:	4b33      	ldr	r3, [pc, #204]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c7e:	d106      	bne.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8007c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c86:	d102      	bne.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007c88:	4b2f      	ldr	r3, [pc, #188]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c8c:	e010      	b.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c8e:	4b2c      	ldr	r3, [pc, #176]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c9a:	d106      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8007c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ca2:	d102      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007ca4:	4b29      	ldr	r3, [pc, #164]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ca8:	e002      	b.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007caa:	2300      	movs	r3, #0
 8007cac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007cae:	e246      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007cb0:	e245      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007cb2:	4b27      	ldr	r3, [pc, #156]	; (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cb6:	e242      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cbc:	e23f      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cc4:	f040 80a8 	bne.w	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007cc8:	4b1d      	ldr	r3, [pc, #116]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ccc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007cd0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cd8:	d060      	beq.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8007cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ce0:	f200 8097 	bhi.w	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cea:	f000 808f 	beq.w	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8007cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cf4:	f200 808d 	bhi.w	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cfe:	d03b      	beq.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8007d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d06:	f200 8084 	bhi.w	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d004      	beq.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8007d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d16:	d01d      	beq.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8007d18:	e07b      	b.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d1a:	4b09      	ldr	r3, [pc, #36]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d26:	d107      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 fcd1 	bl	80086d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d36:	e202      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d3c:	e1ff      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007d3e:	bf00      	nop
 8007d40:	58024400 	.word	0x58024400
 8007d44:	03d09000 	.word	0x03d09000
 8007d48:	003d0900 	.word	0x003d0900
 8007d4c:	007a1200 	.word	0x007a1200
 8007d50:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d54:	4ba3      	ldr	r3, [pc, #652]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d60:	d107      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d62:	f107 0318 	add.w	r3, r7, #24
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 fa0c 	bl	8008184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d70:	e1e5      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007d72:	2300      	movs	r3, #0
 8007d74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d76:	e1e2      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d78:	4b9a      	ldr	r3, [pc, #616]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d84:	d107      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d86:	f107 030c 	add.w	r3, r7, #12
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 fb4e 	bl	800842c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d94:	e1d3      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d9a:	e1d0      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d9c:	4b91      	ldr	r3, [pc, #580]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007da0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007da4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007da6:	4b8f      	ldr	r3, [pc, #572]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0304 	and.w	r3, r3, #4
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d10c      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8007db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d109      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007db8:	4b8a      	ldr	r3, [pc, #552]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	08db      	lsrs	r3, r3, #3
 8007dbe:	f003 0303 	and.w	r3, r3, #3
 8007dc2:	4a89      	ldr	r2, [pc, #548]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dca:	e01e      	b.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007dcc:	4b85      	ldr	r3, [pc, #532]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dd8:	d106      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8007dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ddc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007de0:	d102      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007de2:	4b82      	ldr	r3, [pc, #520]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007de4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007de6:	e010      	b.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007de8:	4b7e      	ldr	r3, [pc, #504]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007df4:	d106      	bne.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dfc:	d102      	bne.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007dfe:	4b7c      	ldr	r3, [pc, #496]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e02:	e002      	b.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007e08:	e199      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007e0a:	e198      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e0c:	4b79      	ldr	r3, [pc, #484]	; (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e10:	e195      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007e12:	2300      	movs	r3, #0
 8007e14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e16:	e192      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e1e:	d173      	bne.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007e20:	4b70      	ldr	r3, [pc, #448]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e28:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e30:	d02f      	beq.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8007e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e38:	d863      	bhi.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8007e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d004      	beq.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8007e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e46:	d012      	beq.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8007e48:	e05b      	b.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e4a:	4b66      	ldr	r3, [pc, #408]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e56:	d107      	bne.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e58:	f107 0318 	add.w	r3, r7, #24
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f000 f991 	bl	8008184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e66:	e16a      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e6c:	e167      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e6e:	4b5d      	ldr	r3, [pc, #372]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e7a:	d107      	bne.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e7c:	f107 030c 	add.w	r3, r7, #12
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 fad3 	bl	800842c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e8a:	e158      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e90:	e155      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e92:	4b54      	ldr	r3, [pc, #336]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e9a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e9c:	4b51      	ldr	r3, [pc, #324]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b04      	cmp	r3, #4
 8007ea6:	d10c      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8007ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d109      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007eae:	4b4d      	ldr	r3, [pc, #308]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	08db      	lsrs	r3, r3, #3
 8007eb4:	f003 0303 	and.w	r3, r3, #3
 8007eb8:	4a4b      	ldr	r2, [pc, #300]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007eba:	fa22 f303 	lsr.w	r3, r2, r3
 8007ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ec0:	e01e      	b.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ec2:	4b48      	ldr	r3, [pc, #288]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ece:	d106      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8007ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ed6:	d102      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007ed8:	4b44      	ldr	r3, [pc, #272]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007edc:	e010      	b.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ede:	4b41      	ldr	r3, [pc, #260]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ee6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eea:	d106      	bne.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ef2:	d102      	bne.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007ef4:	4b3e      	ldr	r3, [pc, #248]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ef8:	e002      	b.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007efa:	2300      	movs	r3, #0
 8007efc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007efe:	e11e      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007f00:	e11d      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007f02:	2300      	movs	r3, #0
 8007f04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f06:	e11a      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f0e:	d133      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007f10:	4b34      	ldr	r3, [pc, #208]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f18:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d004      	beq.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8007f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f26:	d012      	beq.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8007f28:	e023      	b.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f2a:	4b2e      	ldr	r3, [pc, #184]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f36:	d107      	bne.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 fbc9 	bl	80086d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f46:	e0fa      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f4c:	e0f7      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f4e:	4b25      	ldr	r3, [pc, #148]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f5a:	d107      	bne.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f5c:	f107 0318 	add.w	r3, r7, #24
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 f90f 	bl	8008184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f6a:	e0e8      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f70:	e0e5      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007f72:	2300      	movs	r3, #0
 8007f74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f76:	e0e2      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f7e:	f040 808f 	bne.w	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007f82:	4b18      	ldr	r3, [pc, #96]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f86:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007f8a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f92:	d075      	beq.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8007f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f9a:	d87e      	bhi.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fa2:	d060      	beq.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007faa:	d876      	bhi.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007fb2:	d045      	beq.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8007fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007fba:	d86e      	bhi.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fc2:	d02b      	beq.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8007fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fca:	d866      	bhi.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d004      	beq.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fd8:	d00e      	beq.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007fda:	e05e      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007fdc:	f000 f8bc 	bl	8008158 <HAL_RCCEx_GetD3PCLK1Freq>
 8007fe0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007fe2:	e0ac      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007fe4:	58024400 	.word	0x58024400
 8007fe8:	03d09000 	.word	0x03d09000
 8007fec:	003d0900 	.word	0x003d0900
 8007ff0:	007a1200 	.word	0x007a1200
 8007ff4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ff8:	4b53      	ldr	r3, [pc, #332]	; (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008000:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008004:	d107      	bne.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008006:	f107 0318 	add.w	r3, r7, #24
 800800a:	4618      	mov	r0, r3
 800800c:	f000 f8ba 	bl	8008184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008014:	e093      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008016:	2300      	movs	r3, #0
 8008018:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800801a:	e090      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800801c:	4b4a      	ldr	r3, [pc, #296]	; (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008028:	d107      	bne.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800802a:	f107 030c 	add.w	r3, r7, #12
 800802e:	4618      	mov	r0, r3
 8008030:	f000 f9fc 	bl	800842c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008038:	e081      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800803a:	2300      	movs	r3, #0
 800803c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800803e:	e07e      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008040:	4b41      	ldr	r3, [pc, #260]	; (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0304 	and.w	r3, r3, #4
 8008048:	2b04      	cmp	r3, #4
 800804a:	d109      	bne.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800804c:	4b3e      	ldr	r3, [pc, #248]	; (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	08db      	lsrs	r3, r3, #3
 8008052:	f003 0303 	and.w	r3, r3, #3
 8008056:	4a3d      	ldr	r2, [pc, #244]	; (800814c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008058:	fa22 f303 	lsr.w	r3, r2, r3
 800805c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800805e:	e06e      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008060:	2300      	movs	r3, #0
 8008062:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008064:	e06b      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008066:	4b38      	ldr	r3, [pc, #224]	; (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008072:	d102      	bne.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8008074:	4b36      	ldr	r3, [pc, #216]	; (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008076:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008078:	e061      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800807a:	2300      	movs	r3, #0
 800807c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800807e:	e05e      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008080:	4b31      	ldr	r3, [pc, #196]	; (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800808c:	d102      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800808e:	4b31      	ldr	r3, [pc, #196]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008090:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008092:	e054      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008094:	2300      	movs	r3, #0
 8008096:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008098:	e051      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800809a:	2300      	movs	r3, #0
 800809c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800809e:	e04e      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080a6:	d148      	bne.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80080a8:	4b27      	ldr	r3, [pc, #156]	; (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80080b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080b8:	d02a      	beq.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80080ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080c0:	d838      	bhi.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80080c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d004      	beq.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80080c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080ce:	d00d      	beq.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80080d0:	e030      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80080d2:	4b1d      	ldr	r3, [pc, #116]	; (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080de:	d102      	bne.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 80080e0:	4b1c      	ldr	r3, [pc, #112]	; (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80080e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80080e4:	e02b      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080e6:	2300      	movs	r3, #0
 80080e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080ea:	e028      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080ec:	4b16      	ldr	r3, [pc, #88]	; (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080f8:	d107      	bne.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 fae8 	bl	80086d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008106:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008108:	e019      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800810a:	2300      	movs	r3, #0
 800810c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800810e:	e016      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008110:	4b0d      	ldr	r3, [pc, #52]	; (8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008118:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800811c:	d107      	bne.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800811e:	f107 0318 	add.w	r3, r7, #24
 8008122:	4618      	mov	r0, r3
 8008124:	f000 f82e 	bl	8008184 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800812c:	e007      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800812e:	2300      	movs	r3, #0
 8008130:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008132:	e004      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008134:	2300      	movs	r3, #0
 8008136:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008138:	e001      	b.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800813a:	2300      	movs	r3, #0
 800813c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800813e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008140:	4618      	mov	r0, r3
 8008142:	3740      	adds	r7, #64	; 0x40
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	58024400 	.word	0x58024400
 800814c:	03d09000 	.word	0x03d09000
 8008150:	003d0900 	.word	0x003d0900
 8008154:	007a1200 	.word	0x007a1200

08008158 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800815c:	f7fe fb4c 	bl	80067f8 <HAL_RCC_GetHCLKFreq>
 8008160:	4602      	mov	r2, r0
 8008162:	4b06      	ldr	r3, [pc, #24]	; (800817c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	091b      	lsrs	r3, r3, #4
 8008168:	f003 0307 	and.w	r3, r3, #7
 800816c:	4904      	ldr	r1, [pc, #16]	; (8008180 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800816e:	5ccb      	ldrb	r3, [r1, r3]
 8008170:	f003 031f 	and.w	r3, r3, #31
 8008174:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008178:	4618      	mov	r0, r3
 800817a:	bd80      	pop	{r7, pc}
 800817c:	58024400 	.word	0x58024400
 8008180:	0800f090 	.word	0x0800f090

08008184 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008184:	b480      	push	{r7}
 8008186:	b089      	sub	sp, #36	; 0x24
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800818c:	4ba1      	ldr	r3, [pc, #644]	; (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800818e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008190:	f003 0303 	and.w	r3, r3, #3
 8008194:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008196:	4b9f      	ldr	r3, [pc, #636]	; (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819a:	0b1b      	lsrs	r3, r3, #12
 800819c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80081a2:	4b9c      	ldr	r3, [pc, #624]	; (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a6:	091b      	lsrs	r3, r3, #4
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80081ae:	4b99      	ldr	r3, [pc, #612]	; (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b2:	08db      	lsrs	r3, r3, #3
 80081b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	fb02 f303 	mul.w	r3, r2, r3
 80081be:	ee07 3a90 	vmov	s15, r3
 80081c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 8111 	beq.w	80083f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	f000 8083 	beq.w	80082e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	2b02      	cmp	r3, #2
 80081de:	f200 80a1 	bhi.w	8008324 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d003      	beq.n	80081f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d056      	beq.n	800829c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80081ee:	e099      	b.n	8008324 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081f0:	4b88      	ldr	r3, [pc, #544]	; (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0320 	and.w	r3, r3, #32
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d02d      	beq.n	8008258 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80081fc:	4b85      	ldr	r3, [pc, #532]	; (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	08db      	lsrs	r3, r3, #3
 8008202:	f003 0303 	and.w	r3, r3, #3
 8008206:	4a84      	ldr	r2, [pc, #528]	; (8008418 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008208:	fa22 f303 	lsr.w	r3, r2, r3
 800820c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	ee07 3a90 	vmov	s15, r3
 8008214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	ee07 3a90 	vmov	s15, r3
 800821e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008226:	4b7b      	ldr	r3, [pc, #492]	; (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800822e:	ee07 3a90 	vmov	s15, r3
 8008232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008236:	ed97 6a03 	vldr	s12, [r7, #12]
 800823a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800841c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800823e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800824a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800824e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008252:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008256:	e087      	b.n	8008368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	ee07 3a90 	vmov	s15, r3
 800825e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008262:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008420 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800826a:	4b6a      	ldr	r3, [pc, #424]	; (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800826c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008272:	ee07 3a90 	vmov	s15, r3
 8008276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800827a:	ed97 6a03 	vldr	s12, [r7, #12]
 800827e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800841c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800828a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800828e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008296:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800829a:	e065      	b.n	8008368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ae:	4b59      	ldr	r3, [pc, #356]	; (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b6:	ee07 3a90 	vmov	s15, r3
 80082ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082be:	ed97 6a03 	vldr	s12, [r7, #12]
 80082c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800841c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082de:	e043      	b.n	8008368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	ee07 3a90 	vmov	s15, r3
 80082e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80082ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082f2:	4b48      	ldr	r3, [pc, #288]	; (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082fa:	ee07 3a90 	vmov	s15, r3
 80082fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008302:	ed97 6a03 	vldr	s12, [r7, #12]
 8008306:	eddf 5a45 	vldr	s11, [pc, #276]	; 800841c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800830a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800830e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800831a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800831e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008322:	e021      	b.n	8008368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	ee07 3a90 	vmov	s15, r3
 800832a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008336:	4b37      	ldr	r3, [pc, #220]	; (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800833e:	ee07 3a90 	vmov	s15, r3
 8008342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008346:	ed97 6a03 	vldr	s12, [r7, #12]
 800834a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800841c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800834e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800835a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800835e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008362:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008366:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008368:	4b2a      	ldr	r3, [pc, #168]	; (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800836a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836c:	0a5b      	lsrs	r3, r3, #9
 800836e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800837e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008382:	edd7 6a07 	vldr	s13, [r7, #28]
 8008386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800838a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800838e:	ee17 2a90 	vmov	r2, s15
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008396:	4b1f      	ldr	r3, [pc, #124]	; (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839a:	0c1b      	lsrs	r3, r3, #16
 800839c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083a0:	ee07 3a90 	vmov	s15, r3
 80083a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80083b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083bc:	ee17 2a90 	vmov	r2, s15
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80083c4:	4b13      	ldr	r3, [pc, #76]	; (8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c8:	0e1b      	lsrs	r3, r3, #24
 80083ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ce:	ee07 3a90 	vmov	s15, r3
 80083d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083de:	edd7 6a07 	vldr	s13, [r7, #28]
 80083e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083ea:	ee17 2a90 	vmov	r2, s15
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80083f2:	e008      	b.n	8008406 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	609a      	str	r2, [r3, #8]
}
 8008406:	bf00      	nop
 8008408:	3724      	adds	r7, #36	; 0x24
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	58024400 	.word	0x58024400
 8008418:	03d09000 	.word	0x03d09000
 800841c:	46000000 	.word	0x46000000
 8008420:	4c742400 	.word	0x4c742400
 8008424:	4a742400 	.word	0x4a742400
 8008428:	4af42400 	.word	0x4af42400

0800842c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800842c:	b480      	push	{r7}
 800842e:	b089      	sub	sp, #36	; 0x24
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008434:	4ba1      	ldr	r3, [pc, #644]	; (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008438:	f003 0303 	and.w	r3, r3, #3
 800843c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800843e:	4b9f      	ldr	r3, [pc, #636]	; (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008442:	0d1b      	lsrs	r3, r3, #20
 8008444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008448:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800844a:	4b9c      	ldr	r3, [pc, #624]	; (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800844c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844e:	0a1b      	lsrs	r3, r3, #8
 8008450:	f003 0301 	and.w	r3, r3, #1
 8008454:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008456:	4b99      	ldr	r3, [pc, #612]	; (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800845a:	08db      	lsrs	r3, r3, #3
 800845c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	fb02 f303 	mul.w	r3, r2, r3
 8008466:	ee07 3a90 	vmov	s15, r3
 800846a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 8111 	beq.w	800869c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	2b02      	cmp	r3, #2
 800847e:	f000 8083 	beq.w	8008588 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	2b02      	cmp	r3, #2
 8008486:	f200 80a1 	bhi.w	80085cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d003      	beq.n	8008498 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d056      	beq.n	8008544 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008496:	e099      	b.n	80085cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008498:	4b88      	ldr	r3, [pc, #544]	; (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0320 	and.w	r3, r3, #32
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d02d      	beq.n	8008500 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084a4:	4b85      	ldr	r3, [pc, #532]	; (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	08db      	lsrs	r3, r3, #3
 80084aa:	f003 0303 	and.w	r3, r3, #3
 80084ae:	4a84      	ldr	r2, [pc, #528]	; (80086c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80084b0:	fa22 f303 	lsr.w	r3, r2, r3
 80084b4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	ee07 3a90 	vmov	s15, r3
 80084bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	ee07 3a90 	vmov	s15, r3
 80084c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ce:	4b7b      	ldr	r3, [pc, #492]	; (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d6:	ee07 3a90 	vmov	s15, r3
 80084da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084de:	ed97 6a03 	vldr	s12, [r7, #12]
 80084e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80086c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80084fe:	e087      	b.n	8008610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	ee07 3a90 	vmov	s15, r3
 8008506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80086c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800850e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008512:	4b6a      	ldr	r3, [pc, #424]	; (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800851a:	ee07 3a90 	vmov	s15, r3
 800851e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008522:	ed97 6a03 	vldr	s12, [r7, #12]
 8008526:	eddf 5a67 	vldr	s11, [pc, #412]	; 80086c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800852a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800852e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800853a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800853e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008542:	e065      	b.n	8008610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80086cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008556:	4b59      	ldr	r3, [pc, #356]	; (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800855e:	ee07 3a90 	vmov	s15, r3
 8008562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008566:	ed97 6a03 	vldr	s12, [r7, #12]
 800856a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80086c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800856e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800857a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800857e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008582:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008586:	e043      	b.n	8008610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	ee07 3a90 	vmov	s15, r3
 800858e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008592:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800859a:	4b48      	ldr	r3, [pc, #288]	; (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800859c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085a2:	ee07 3a90 	vmov	s15, r3
 80085a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80086c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085ca:	e021      	b.n	8008610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	ee07 3a90 	vmov	s15, r3
 80085d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80086cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80085da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085de:	4b37      	ldr	r3, [pc, #220]	; (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e6:	ee07 3a90 	vmov	s15, r3
 80085ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80085f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80086c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800860a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800860e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008610:	4b2a      	ldr	r3, [pc, #168]	; (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008614:	0a5b      	lsrs	r3, r3, #9
 8008616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800861a:	ee07 3a90 	vmov	s15, r3
 800861e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008626:	ee37 7a87 	vadd.f32	s14, s15, s14
 800862a:	edd7 6a07 	vldr	s13, [r7, #28]
 800862e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008636:	ee17 2a90 	vmov	r2, s15
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800863e:	4b1f      	ldr	r3, [pc, #124]	; (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008642:	0c1b      	lsrs	r3, r3, #16
 8008644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008648:	ee07 3a90 	vmov	s15, r3
 800864c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008650:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008654:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008658:	edd7 6a07 	vldr	s13, [r7, #28]
 800865c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008664:	ee17 2a90 	vmov	r2, s15
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800866c:	4b13      	ldr	r3, [pc, #76]	; (80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800866e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008670:	0e1b      	lsrs	r3, r3, #24
 8008672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008676:	ee07 3a90 	vmov	s15, r3
 800867a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008682:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008686:	edd7 6a07 	vldr	s13, [r7, #28]
 800868a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800868e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008692:	ee17 2a90 	vmov	r2, s15
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800869a:	e008      	b.n	80086ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	609a      	str	r2, [r3, #8]
}
 80086ae:	bf00      	nop
 80086b0:	3724      	adds	r7, #36	; 0x24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	58024400 	.word	0x58024400
 80086c0:	03d09000 	.word	0x03d09000
 80086c4:	46000000 	.word	0x46000000
 80086c8:	4c742400 	.word	0x4c742400
 80086cc:	4a742400 	.word	0x4a742400
 80086d0:	4af42400 	.word	0x4af42400

080086d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b089      	sub	sp, #36	; 0x24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086dc:	4ba0      	ldr	r3, [pc, #640]	; (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e0:	f003 0303 	and.w	r3, r3, #3
 80086e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80086e6:	4b9e      	ldr	r3, [pc, #632]	; (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ea:	091b      	lsrs	r3, r3, #4
 80086ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80086f2:	4b9b      	ldr	r3, [pc, #620]	; (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80086fc:	4b98      	ldr	r3, [pc, #608]	; (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008700:	08db      	lsrs	r3, r3, #3
 8008702:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	fb02 f303 	mul.w	r3, r2, r3
 800870c:	ee07 3a90 	vmov	s15, r3
 8008710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008714:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	2b00      	cmp	r3, #0
 800871c:	f000 8111 	beq.w	8008942 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	2b02      	cmp	r3, #2
 8008724:	f000 8083 	beq.w	800882e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	2b02      	cmp	r3, #2
 800872c:	f200 80a1 	bhi.w	8008872 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d056      	beq.n	80087ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800873c:	e099      	b.n	8008872 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800873e:	4b88      	ldr	r3, [pc, #544]	; (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 0320 	and.w	r3, r3, #32
 8008746:	2b00      	cmp	r3, #0
 8008748:	d02d      	beq.n	80087a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800874a:	4b85      	ldr	r3, [pc, #532]	; (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	08db      	lsrs	r3, r3, #3
 8008750:	f003 0303 	and.w	r3, r3, #3
 8008754:	4a83      	ldr	r2, [pc, #524]	; (8008964 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008756:	fa22 f303 	lsr.w	r3, r2, r3
 800875a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	ee07 3a90 	vmov	s15, r3
 8008762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	ee07 3a90 	vmov	s15, r3
 800876c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008770:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008774:	4b7a      	ldr	r3, [pc, #488]	; (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800877c:	ee07 3a90 	vmov	s15, r3
 8008780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008784:	ed97 6a03 	vldr	s12, [r7, #12]
 8008788:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800878c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008790:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008794:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800879c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087a0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80087a4:	e087      	b.n	80088b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	ee07 3a90 	vmov	s15, r3
 80087ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800896c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80087b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087b8:	4b69      	ldr	r3, [pc, #420]	; (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c0:	ee07 3a90 	vmov	s15, r3
 80087c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80087cc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087e8:	e065      	b.n	80088b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	ee07 3a90 	vmov	s15, r3
 80087f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008970 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80087f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087fc:	4b58      	ldr	r3, [pc, #352]	; (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008804:	ee07 3a90 	vmov	s15, r3
 8008808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800880c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008810:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008814:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008818:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800881c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008820:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008828:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800882c:	e043      	b.n	80088b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	ee07 3a90 	vmov	s15, r3
 8008834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008838:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008974 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800883c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008840:	4b47      	ldr	r3, [pc, #284]	; (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008848:	ee07 3a90 	vmov	s15, r3
 800884c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008850:	ed97 6a03 	vldr	s12, [r7, #12]
 8008854:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008858:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800885c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008860:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008864:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800886c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008870:	e021      	b.n	80088b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	ee07 3a90 	vmov	s15, r3
 8008878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800887c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800896c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008884:	4b36      	ldr	r3, [pc, #216]	; (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800888c:	ee07 3a90 	vmov	s15, r3
 8008890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008894:	ed97 6a03 	vldr	s12, [r7, #12]
 8008898:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008968 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800889c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80088b6:	4b2a      	ldr	r3, [pc, #168]	; (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ba:	0a5b      	lsrs	r3, r3, #9
 80088bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088c0:	ee07 3a90 	vmov	s15, r3
 80088c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80088d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088dc:	ee17 2a90 	vmov	r2, s15
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80088e4:	4b1e      	ldr	r3, [pc, #120]	; (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e8:	0c1b      	lsrs	r3, r3, #16
 80088ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ee:	ee07 3a90 	vmov	s15, r3
 80088f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800890a:	ee17 2a90 	vmov	r2, s15
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008912:	4b13      	ldr	r3, [pc, #76]	; (8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008916:	0e1b      	lsrs	r3, r3, #24
 8008918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800891c:	ee07 3a90 	vmov	s15, r3
 8008920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008924:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008928:	ee37 7a87 	vadd.f32	s14, s15, s14
 800892c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008938:	ee17 2a90 	vmov	r2, s15
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008940:	e008      	b.n	8008954 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	609a      	str	r2, [r3, #8]
}
 8008954:	bf00      	nop
 8008956:	3724      	adds	r7, #36	; 0x24
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	58024400 	.word	0x58024400
 8008964:	03d09000 	.word	0x03d09000
 8008968:	46000000 	.word	0x46000000
 800896c:	4c742400 	.word	0x4c742400
 8008970:	4a742400 	.word	0x4a742400
 8008974:	4af42400 	.word	0x4af42400

08008978 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008986:	4b53      	ldr	r3, [pc, #332]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898a:	f003 0303 	and.w	r3, r3, #3
 800898e:	2b03      	cmp	r3, #3
 8008990:	d101      	bne.n	8008996 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e099      	b.n	8008aca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008996:	4b4f      	ldr	r3, [pc, #316]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a4e      	ldr	r2, [pc, #312]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 800899c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80089a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089a2:	f7fb fa7b 	bl	8003e9c <HAL_GetTick>
 80089a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089a8:	e008      	b.n	80089bc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80089aa:	f7fb fa77 	bl	8003e9c <HAL_GetTick>
 80089ae:	4602      	mov	r2, r0
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d901      	bls.n	80089bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e086      	b.n	8008aca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089bc:	4b45      	ldr	r3, [pc, #276]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1f0      	bne.n	80089aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80089c8:	4b42      	ldr	r3, [pc, #264]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 80089ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	031b      	lsls	r3, r3, #12
 80089d6:	493f      	ldr	r1, [pc, #252]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 80089d8:	4313      	orrs	r3, r2
 80089da:	628b      	str	r3, [r1, #40]	; 0x28
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	3b01      	subs	r3, #1
 80089e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	3b01      	subs	r3, #1
 80089ec:	025b      	lsls	r3, r3, #9
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	431a      	orrs	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	3b01      	subs	r3, #1
 80089f8:	041b      	lsls	r3, r3, #16
 80089fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80089fe:	431a      	orrs	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	691b      	ldr	r3, [r3, #16]
 8008a04:	3b01      	subs	r3, #1
 8008a06:	061b      	lsls	r3, r3, #24
 8008a08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a0c:	4931      	ldr	r1, [pc, #196]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008a12:	4b30      	ldr	r3, [pc, #192]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	492d      	ldr	r1, [pc, #180]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008a24:	4b2b      	ldr	r3, [pc, #172]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a28:	f023 0220 	bic.w	r2, r3, #32
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	4928      	ldr	r1, [pc, #160]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008a36:	4b27      	ldr	r3, [pc, #156]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3a:	4a26      	ldr	r2, [pc, #152]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008a3c:	f023 0310 	bic.w	r3, r3, #16
 8008a40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008a42:	4b24      	ldr	r3, [pc, #144]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008a44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a46:	4b24      	ldr	r3, [pc, #144]	; (8008ad8 <RCCEx_PLL2_Config+0x160>)
 8008a48:	4013      	ands	r3, r2
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	69d2      	ldr	r2, [r2, #28]
 8008a4e:	00d2      	lsls	r2, r2, #3
 8008a50:	4920      	ldr	r1, [pc, #128]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008a56:	4b1f      	ldr	r3, [pc, #124]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5a:	4a1e      	ldr	r2, [pc, #120]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008a5c:	f043 0310 	orr.w	r3, r3, #16
 8008a60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d106      	bne.n	8008a76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008a68:	4b1a      	ldr	r3, [pc, #104]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6c:	4a19      	ldr	r2, [pc, #100]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008a6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a74:	e00f      	b.n	8008a96 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d106      	bne.n	8008a8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008a7c:	4b15      	ldr	r3, [pc, #84]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a80:	4a14      	ldr	r2, [pc, #80]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a88:	e005      	b.n	8008a96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008a8a:	4b12      	ldr	r3, [pc, #72]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8e:	4a11      	ldr	r2, [pc, #68]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008a90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008a96:	4b0f      	ldr	r3, [pc, #60]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a0e      	ldr	r2, [pc, #56]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008a9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008aa2:	f7fb f9fb 	bl	8003e9c <HAL_GetTick>
 8008aa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008aa8:	e008      	b.n	8008abc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008aaa:	f7fb f9f7 	bl	8003e9c <HAL_GetTick>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d901      	bls.n	8008abc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e006      	b.n	8008aca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008abc:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <RCCEx_PLL2_Config+0x15c>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d0f0      	beq.n	8008aaa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	58024400 	.word	0x58024400
 8008ad8:	ffff0007 	.word	0xffff0007

08008adc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008aea:	4b53      	ldr	r3, [pc, #332]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aee:	f003 0303 	and.w	r3, r3, #3
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d101      	bne.n	8008afa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e099      	b.n	8008c2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008afa:	4b4f      	ldr	r3, [pc, #316]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a4e      	ldr	r2, [pc, #312]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b06:	f7fb f9c9 	bl	8003e9c <HAL_GetTick>
 8008b0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b0c:	e008      	b.n	8008b20 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008b0e:	f7fb f9c5 	bl	8003e9c <HAL_GetTick>
 8008b12:	4602      	mov	r2, r0
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d901      	bls.n	8008b20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e086      	b.n	8008c2e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b20:	4b45      	ldr	r3, [pc, #276]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1f0      	bne.n	8008b0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008b2c:	4b42      	ldr	r3, [pc, #264]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b30:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	051b      	lsls	r3, r3, #20
 8008b3a:	493f      	ldr	r1, [pc, #252]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	628b      	str	r3, [r1, #40]	; 0x28
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	025b      	lsls	r3, r3, #9
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	431a      	orrs	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	041b      	lsls	r3, r3, #16
 8008b5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b62:	431a      	orrs	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	061b      	lsls	r3, r3, #24
 8008b6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b70:	4931      	ldr	r1, [pc, #196]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008b72:	4313      	orrs	r3, r2
 8008b74:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008b76:	4b30      	ldr	r3, [pc, #192]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	492d      	ldr	r1, [pc, #180]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008b84:	4313      	orrs	r3, r2
 8008b86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008b88:	4b2b      	ldr	r3, [pc, #172]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	4928      	ldr	r1, [pc, #160]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008b96:	4313      	orrs	r3, r2
 8008b98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008b9a:	4b27      	ldr	r3, [pc, #156]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9e:	4a26      	ldr	r2, [pc, #152]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008ba6:	4b24      	ldr	r3, [pc, #144]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008baa:	4b24      	ldr	r3, [pc, #144]	; (8008c3c <RCCEx_PLL3_Config+0x160>)
 8008bac:	4013      	ands	r3, r2
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	69d2      	ldr	r2, [r2, #28]
 8008bb2:	00d2      	lsls	r2, r2, #3
 8008bb4:	4920      	ldr	r1, [pc, #128]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008bba:	4b1f      	ldr	r3, [pc, #124]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbe:	4a1e      	ldr	r2, [pc, #120]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d106      	bne.n	8008bda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008bcc:	4b1a      	ldr	r3, [pc, #104]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd0:	4a19      	ldr	r2, [pc, #100]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008bd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008bd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008bd8:	e00f      	b.n	8008bfa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d106      	bne.n	8008bee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008be0:	4b15      	ldr	r3, [pc, #84]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be4:	4a14      	ldr	r2, [pc, #80]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008be6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008bea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008bec:	e005      	b.n	8008bfa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008bee:	4b12      	ldr	r3, [pc, #72]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf2:	4a11      	ldr	r2, [pc, #68]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008bf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008bf8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008bfa:	4b0f      	ldr	r3, [pc, #60]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a0e      	ldr	r2, [pc, #56]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c06:	f7fb f949 	bl	8003e9c <HAL_GetTick>
 8008c0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c0c:	e008      	b.n	8008c20 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008c0e:	f7fb f945 	bl	8003e9c <HAL_GetTick>
 8008c12:	4602      	mov	r2, r0
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d901      	bls.n	8008c20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e006      	b.n	8008c2e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c20:	4b05      	ldr	r3, [pc, #20]	; (8008c38 <RCCEx_PLL3_Config+0x15c>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d0f0      	beq.n	8008c0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	58024400 	.word	0x58024400
 8008c3c:	ffff0007 	.word	0xffff0007

08008c40 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e0f1      	b.n	8008e36 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a78      	ldr	r2, [pc, #480]	; (8008e40 <HAL_SPI_Init+0x200>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d00f      	beq.n	8008c82 <HAL_SPI_Init+0x42>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a77      	ldr	r2, [pc, #476]	; (8008e44 <HAL_SPI_Init+0x204>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d00a      	beq.n	8008c82 <HAL_SPI_Init+0x42>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a75      	ldr	r2, [pc, #468]	; (8008e48 <HAL_SPI_Init+0x208>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d005      	beq.n	8008c82 <HAL_SPI_Init+0x42>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	2b0f      	cmp	r3, #15
 8008c7c:	d901      	bls.n	8008c82 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e0d9      	b.n	8008e36 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fc9c 	bl	80095c0 <SPI_GetPacketSize>
 8008c88:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a6c      	ldr	r2, [pc, #432]	; (8008e40 <HAL_SPI_Init+0x200>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d00c      	beq.n	8008cae <HAL_SPI_Init+0x6e>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a6a      	ldr	r2, [pc, #424]	; (8008e44 <HAL_SPI_Init+0x204>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d007      	beq.n	8008cae <HAL_SPI_Init+0x6e>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a69      	ldr	r2, [pc, #420]	; (8008e48 <HAL_SPI_Init+0x208>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d002      	beq.n	8008cae <HAL_SPI_Init+0x6e>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2b08      	cmp	r3, #8
 8008cac:	d811      	bhi.n	8008cd2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008cb2:	4a63      	ldr	r2, [pc, #396]	; (8008e40 <HAL_SPI_Init+0x200>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d009      	beq.n	8008ccc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a61      	ldr	r2, [pc, #388]	; (8008e44 <HAL_SPI_Init+0x204>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d004      	beq.n	8008ccc <HAL_SPI_Init+0x8c>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a60      	ldr	r2, [pc, #384]	; (8008e48 <HAL_SPI_Init+0x208>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d104      	bne.n	8008cd6 <HAL_SPI_Init+0x96>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2b10      	cmp	r3, #16
 8008cd0:	d901      	bls.n	8008cd6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e0af      	b.n	8008e36 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d106      	bne.n	8008cf0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7fa fb24 	bl	8003338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f022 0201 	bic.w	r2, r2, #1
 8008d06:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008d12:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d1c:	d119      	bne.n	8008d52 <HAL_SPI_Init+0x112>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d26:	d103      	bne.n	8008d30 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d008      	beq.n	8008d42 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10c      	bne.n	8008d52 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008d3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d40:	d107      	bne.n	8008d52 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d50:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	69da      	ldr	r2, [r3, #28]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5a:	431a      	orrs	r2, r3
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	431a      	orrs	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d64:	ea42 0103 	orr.w	r1, r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68da      	ldr	r2, [r3, #12]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	430a      	orrs	r2, r1
 8008d72:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7c:	431a      	orrs	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d82:	431a      	orrs	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	431a      	orrs	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	431a      	orrs	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	695b      	ldr	r3, [r3, #20]
 8008d94:	431a      	orrs	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	431a      	orrs	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	431a      	orrs	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008da6:	431a      	orrs	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	431a      	orrs	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008db2:	ea42 0103 	orr.w	r1, r2, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d113      	bne.n	8008df2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ddc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008df0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f022 0201 	bic.w	r2, r2, #1
 8008e00:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00a      	beq.n	8008e24 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	40013000 	.word	0x40013000
 8008e44:	40003800 	.word	0x40003800
 8008e48:	40003c00 	.word	0x40003c00

08008e4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b08e      	sub	sp, #56	; 0x38
 8008e50:	af02      	add	r7, sp, #8
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
 8008e58:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3320      	adds	r3, #32
 8008e66:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	3330      	adds	r3, #48	; 0x30
 8008e6e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d101      	bne.n	8008e7e <HAL_SPI_TransmitReceive+0x32>
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	e2ce      	b.n	800941c <HAL_SPI_TransmitReceive+0x5d0>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e86:	f7fb f809 	bl	8003e9c <HAL_GetTick>
 8008e8a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8008e8c:	887b      	ldrh	r3, [r7, #2]
 8008e8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8008e90:	887b      	ldrh	r3, [r7, #2]
 8008e92:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008e9a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008ea2:	7efb      	ldrb	r3, [r7, #27]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d014      	beq.n	8008ed2 <HAL_SPI_TransmitReceive+0x86>
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008eae:	d106      	bne.n	8008ebe <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d102      	bne.n	8008ebe <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008eb8:	7efb      	ldrb	r3, [r7, #27]
 8008eba:	2b04      	cmp	r3, #4
 8008ebc:	d009      	beq.n	8008ed2 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008ecc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ed0:	e2a4      	b.n	800941c <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d005      	beq.n	8008ee4 <HAL_SPI_TransmitReceive+0x98>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d002      	beq.n	8008ee4 <HAL_SPI_TransmitReceive+0x98>
 8008ede:	887b      	ldrh	r3, [r7, #2]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d109      	bne.n	8008ef8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008ef2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ef6:	e291      	b.n	800941c <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b04      	cmp	r3, #4
 8008f02:	d003      	beq.n	8008f0c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2205      	movs	r2, #5
 8008f08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	887a      	ldrh	r2, [r7, #2]
 8008f1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	887a      	ldrh	r2, [r7, #2]
 8008f26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	887a      	ldrh	r2, [r7, #2]
 8008f34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	887a      	ldrh	r2, [r7, #2]
 8008f3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	685a      	ldr	r2, [r3, #4]
 8008f52:	4b9f      	ldr	r3, [pc, #636]	; (80091d0 <HAL_SPI_TransmitReceive+0x384>)
 8008f54:	4013      	ands	r3, r2
 8008f56:	8879      	ldrh	r1, [r7, #2]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	6812      	ldr	r2, [r2, #0]
 8008f5c:	430b      	orrs	r3, r1
 8008f5e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f042 0201 	orr.w	r2, r2, #1
 8008f6e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f78:	d107      	bne.n	8008f8a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	2b0f      	cmp	r3, #15
 8008f90:	d970      	bls.n	8009074 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008f92:	e068      	b.n	8009066 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	f003 0302 	and.w	r3, r3, #2
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d11a      	bne.n	8008fd8 <HAL_SPI_TransmitReceive+0x18c>
 8008fa2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d017      	beq.n	8008fd8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6812      	ldr	r2, [r2, #0]
 8008fb2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fb8:	1d1a      	adds	r2, r3, #4
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fd6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	695a      	ldr	r2, [r3, #20]
 8008fde:	f248 0308 	movw	r3, #32776	; 0x8008
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d01a      	beq.n	800901e <HAL_SPI_TransmitReceive+0x1d2>
 8008fe8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d017      	beq.n	800901e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ff6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008ff8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ffe:	1d1a      	adds	r2, r3, #4
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800900a:	b29b      	uxth	r3, r3
 800900c:	3b01      	subs	r3, #1
 800900e:	b29a      	uxth	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800901c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800901e:	f7fa ff3d 	bl	8003e9c <HAL_GetTick>
 8009022:	4602      	mov	r2, r0
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800902a:	429a      	cmp	r2, r3
 800902c:	d803      	bhi.n	8009036 <HAL_SPI_TransmitReceive+0x1ea>
 800902e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009034:	d102      	bne.n	800903c <HAL_SPI_TransmitReceive+0x1f0>
 8009036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009038:	2b00      	cmp	r3, #0
 800903a:	d114      	bne.n	8009066 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 f9f1 	bl	8009424 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009050:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8009062:	2303      	movs	r3, #3
 8009064:	e1da      	b.n	800941c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009066:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009068:	2b00      	cmp	r3, #0
 800906a:	d193      	bne.n	8008f94 <HAL_SPI_TransmitReceive+0x148>
 800906c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800906e:	2b00      	cmp	r3, #0
 8009070:	d190      	bne.n	8008f94 <HAL_SPI_TransmitReceive+0x148>
 8009072:	e1ac      	b.n	80093ce <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	2b07      	cmp	r3, #7
 800907a:	f240 81a0 	bls.w	80093be <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800907e:	e0a9      	b.n	80091d4 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	f003 0302 	and.w	r3, r3, #2
 800908a:	2b02      	cmp	r3, #2
 800908c:	d139      	bne.n	8009102 <HAL_SPI_TransmitReceive+0x2b6>
 800908e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009090:	2b00      	cmp	r3, #0
 8009092:	d036      	beq.n	8009102 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009094:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009096:	2b01      	cmp	r3, #1
 8009098:	d91c      	bls.n	80090d4 <HAL_SPI_TransmitReceive+0x288>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d018      	beq.n	80090d4 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	6812      	ldr	r2, [r2, #0]
 80090ac:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090b2:	1d1a      	adds	r2, r3, #4
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090be:	b29b      	uxth	r3, r3
 80090c0:	3b02      	subs	r3, #2
 80090c2:	b29a      	uxth	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80090d2:	e016      	b.n	8009102 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090d8:	881a      	ldrh	r2, [r3, #0]
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090e2:	1c9a      	adds	r2, r3, #2
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	3b01      	subs	r3, #1
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009100:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	695b      	ldr	r3, [r3, #20]
 8009108:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d03a      	beq.n	8009186 <HAL_SPI_TransmitReceive+0x33a>
 8009110:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009112:	2b00      	cmp	r3, #0
 8009114:	d037      	beq.n	8009186 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	695b      	ldr	r3, [r3, #20]
 800911c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d018      	beq.n	8009156 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800912c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800912e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009134:	1d1a      	adds	r2, r3, #4
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009140:	b29b      	uxth	r3, r3
 8009142:	3b02      	subs	r3, #2
 8009144:	b29a      	uxth	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009152:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009154:	e017      	b.n	8009186 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800915a:	6a3a      	ldr	r2, [r7, #32]
 800915c:	8812      	ldrh	r2, [r2, #0]
 800915e:	b292      	uxth	r2, r2
 8009160:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009166:	1c9a      	adds	r2, r3, #2
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009172:	b29b      	uxth	r3, r3
 8009174:	3b01      	subs	r3, #1
 8009176:	b29a      	uxth	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009184:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009186:	f7fa fe89 	bl	8003e9c <HAL_GetTick>
 800918a:	4602      	mov	r2, r0
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	1ad3      	subs	r3, r2, r3
 8009190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009192:	429a      	cmp	r2, r3
 8009194:	d803      	bhi.n	800919e <HAL_SPI_TransmitReceive+0x352>
 8009196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800919c:	d102      	bne.n	80091a4 <HAL_SPI_TransmitReceive+0x358>
 800919e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d117      	bne.n	80091d4 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f000 f93d 	bl	8009424 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80091ca:	2303      	movs	r3, #3
 80091cc:	e126      	b.n	800941c <HAL_SPI_TransmitReceive+0x5d0>
 80091ce:	bf00      	nop
 80091d0:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80091d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f47f af52 	bne.w	8009080 <HAL_SPI_TransmitReceive+0x234>
 80091dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f47f af4e 	bne.w	8009080 <HAL_SPI_TransmitReceive+0x234>
 80091e4:	e0f3      	b.n	80093ce <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	695b      	ldr	r3, [r3, #20]
 80091ec:	f003 0302 	and.w	r3, r3, #2
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	d15a      	bne.n	80092aa <HAL_SPI_TransmitReceive+0x45e>
 80091f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d057      	beq.n	80092aa <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80091fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091fc:	2b03      	cmp	r3, #3
 80091fe:	d91c      	bls.n	800923a <HAL_SPI_TransmitReceive+0x3ee>
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009204:	2b40      	cmp	r3, #64	; 0x40
 8009206:	d918      	bls.n	800923a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6812      	ldr	r2, [r2, #0]
 8009212:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009218:	1d1a      	adds	r2, r3, #4
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009224:	b29b      	uxth	r3, r3
 8009226:	3b04      	subs	r3, #4
 8009228:	b29a      	uxth	r2, r3
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009236:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009238:	e037      	b.n	80092aa <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800923a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800923c:	2b01      	cmp	r3, #1
 800923e:	d91b      	bls.n	8009278 <HAL_SPI_TransmitReceive+0x42c>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009244:	2b00      	cmp	r3, #0
 8009246:	d017      	beq.n	8009278 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800924c:	881a      	ldrh	r2, [r3, #0]
 800924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009250:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009256:	1c9a      	adds	r2, r3, #2
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009262:	b29b      	uxth	r3, r3
 8009264:	3b02      	subs	r3, #2
 8009266:	b29a      	uxth	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009274:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009276:	e018      	b.n	80092aa <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	3320      	adds	r3, #32
 8009282:	7812      	ldrb	r2, [r2, #0]
 8009284:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800928a:	1c5a      	adds	r2, r3, #1
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009296:	b29b      	uxth	r3, r3
 8009298:	3b01      	subs	r3, #1
 800929a:	b29a      	uxth	r2, r3
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80092a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	695b      	ldr	r3, [r3, #20]
 80092b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d05e      	beq.n	8009376 <HAL_SPI_TransmitReceive+0x52a>
 80092b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d05b      	beq.n	8009376 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d018      	beq.n	80092fe <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80092d6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092dc:	1d1a      	adds	r2, r3, #4
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	3b04      	subs	r3, #4
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80092fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80092fc:	e03b      	b.n	8009376 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8009308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800930c:	d918      	bls.n	8009340 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009312:	6a3a      	ldr	r2, [r7, #32]
 8009314:	8812      	ldrh	r2, [r2, #0]
 8009316:	b292      	uxth	r2, r2
 8009318:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800931e:	1c9a      	adds	r2, r3, #2
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800932a:	b29b      	uxth	r3, r3
 800932c:	3b02      	subs	r3, #2
 800932e:	b29a      	uxth	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800933c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800933e:	e01a      	b.n	8009376 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800934c:	7812      	ldrb	r2, [r2, #0]
 800934e:	b2d2      	uxtb	r2, r2
 8009350:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009356:	1c5a      	adds	r2, r3, #1
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009362:	b29b      	uxth	r3, r3
 8009364:	3b01      	subs	r3, #1
 8009366:	b29a      	uxth	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009374:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009376:	f7fa fd91 	bl	8003e9c <HAL_GetTick>
 800937a:	4602      	mov	r2, r0
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009382:	429a      	cmp	r2, r3
 8009384:	d803      	bhi.n	800938e <HAL_SPI_TransmitReceive+0x542>
 8009386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938c:	d102      	bne.n	8009394 <HAL_SPI_TransmitReceive+0x548>
 800938e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009390:	2b00      	cmp	r3, #0
 8009392:	d114      	bne.n	80093be <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f000 f845 	bl	8009424 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e02e      	b.n	800941c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80093be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f47f af10 	bne.w	80091e6 <HAL_SPI_TransmitReceive+0x39a>
 80093c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f47f af0c 	bne.w	80091e6 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80093ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d0:	9300      	str	r3, [sp, #0]
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	2200      	movs	r2, #0
 80093d6:	2108      	movs	r1, #8
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f000 f8c3 	bl	8009564 <SPI_WaitOnFlagUntilTimeout>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d007      	beq.n	80093f4 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093ea:	f043 0220 	orr.w	r2, r3, #32
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f000 f815 	bl	8009424 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2201      	movs	r2, #1
 8009406:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009410:	2b00      	cmp	r3, #0
 8009412:	d001      	beq.n	8009418 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	e001      	b.n	800941c <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8009418:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800941c:	4618      	mov	r0, r3
 800941e:	3730      	adds	r7, #48	; 0x30
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	695b      	ldr	r3, [r3, #20]
 8009432:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	699a      	ldr	r2, [r3, #24]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f042 0208 	orr.w	r2, r2, #8
 8009442:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	699a      	ldr	r2, [r3, #24]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f042 0210 	orr.w	r2, r2, #16
 8009452:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f022 0201 	bic.w	r2, r2, #1
 8009462:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	6919      	ldr	r1, [r3, #16]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	4b3c      	ldr	r3, [pc, #240]	; (8009560 <SPI_CloseTransfer+0x13c>)
 8009470:	400b      	ands	r3, r1
 8009472:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	689a      	ldr	r2, [r3, #8]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009482:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800948a:	b2db      	uxtb	r3, r3
 800948c:	2b04      	cmp	r3, #4
 800948e:	d014      	beq.n	80094ba <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f003 0320 	and.w	r3, r3, #32
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00f      	beq.n	80094ba <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	699a      	ldr	r2, [r3, #24]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f042 0220 	orr.w	r2, r2, #32
 80094b8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	2b03      	cmp	r3, #3
 80094c4:	d014      	beq.n	80094f0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00f      	beq.n	80094f0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094d6:	f043 0204 	orr.w	r2, r3, #4
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	699a      	ldr	r2, [r3, #24]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094ee:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00f      	beq.n	800951a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009500:	f043 0201 	orr.w	r2, r3, #1
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	699a      	ldr	r2, [r3, #24]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009518:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00f      	beq.n	8009544 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800952a:	f043 0208 	orr.w	r2, r3, #8
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	699a      	ldr	r2, [r3, #24]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009542:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009554:	bf00      	nop
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	fffffc90 	.word	0xfffffc90

08009564 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	603b      	str	r3, [r7, #0]
 8009570:	4613      	mov	r3, r2
 8009572:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009574:	e010      	b.n	8009598 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009576:	f7fa fc91 	bl	8003e9c <HAL_GetTick>
 800957a:	4602      	mov	r2, r0
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	1ad3      	subs	r3, r2, r3
 8009580:	69ba      	ldr	r2, [r7, #24]
 8009582:	429a      	cmp	r2, r3
 8009584:	d803      	bhi.n	800958e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800958c:	d102      	bne.n	8009594 <SPI_WaitOnFlagUntilTimeout+0x30>
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d101      	bne.n	8009598 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009594:	2303      	movs	r3, #3
 8009596:	e00f      	b.n	80095b8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	695a      	ldr	r2, [r3, #20]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	4013      	ands	r3, r2
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	bf0c      	ite	eq
 80095a8:	2301      	moveq	r3, #1
 80095aa:	2300      	movne	r3, #0
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	461a      	mov	r2, r3
 80095b0:	79fb      	ldrb	r3, [r7, #7]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d0df      	beq.n	8009576 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095cc:	095b      	lsrs	r3, r3, #5
 80095ce:	3301      	adds	r3, #1
 80095d0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	3301      	adds	r3, #1
 80095d8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	3307      	adds	r3, #7
 80095de:	08db      	lsrs	r3, r3, #3
 80095e0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	fb02 f303 	mul.w	r3, r2, r3
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3714      	adds	r7, #20
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b082      	sub	sp, #8
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d101      	bne.n	8009608 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	e049      	b.n	800969c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800960e:	b2db      	uxtb	r3, r3
 8009610:	2b00      	cmp	r3, #0
 8009612:	d106      	bne.n	8009622 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 f841 	bl	80096a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2202      	movs	r2, #2
 8009626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	3304      	adds	r3, #4
 8009632:	4619      	mov	r1, r3
 8009634:	4610      	mov	r0, r2
 8009636:	f000 fd65 	bl	800a104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2201      	movs	r2, #1
 800963e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2201      	movs	r2, #1
 800964e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2201      	movs	r2, #1
 800966e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2201      	movs	r2, #1
 800967e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d001      	beq.n	80096d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e054      	b.n	800977a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2202      	movs	r2, #2
 80096d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68da      	ldr	r2, [r3, #12]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f042 0201 	orr.w	r2, r2, #1
 80096e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a26      	ldr	r2, [pc, #152]	; (8009788 <HAL_TIM_Base_Start_IT+0xd0>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d022      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x80>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096fa:	d01d      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x80>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a22      	ldr	r2, [pc, #136]	; (800978c <HAL_TIM_Base_Start_IT+0xd4>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d018      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x80>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a21      	ldr	r2, [pc, #132]	; (8009790 <HAL_TIM_Base_Start_IT+0xd8>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d013      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x80>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a1f      	ldr	r2, [pc, #124]	; (8009794 <HAL_TIM_Base_Start_IT+0xdc>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d00e      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x80>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a1e      	ldr	r2, [pc, #120]	; (8009798 <HAL_TIM_Base_Start_IT+0xe0>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d009      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x80>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a1c      	ldr	r2, [pc, #112]	; (800979c <HAL_TIM_Base_Start_IT+0xe4>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d004      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x80>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a1b      	ldr	r2, [pc, #108]	; (80097a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d115      	bne.n	8009764 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	689a      	ldr	r2, [r3, #8]
 800973e:	4b19      	ldr	r3, [pc, #100]	; (80097a4 <HAL_TIM_Base_Start_IT+0xec>)
 8009740:	4013      	ands	r3, r2
 8009742:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2b06      	cmp	r3, #6
 8009748:	d015      	beq.n	8009776 <HAL_TIM_Base_Start_IT+0xbe>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009750:	d011      	beq.n	8009776 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f042 0201 	orr.w	r2, r2, #1
 8009760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009762:	e008      	b.n	8009776 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f042 0201 	orr.w	r2, r2, #1
 8009772:	601a      	str	r2, [r3, #0]
 8009774:	e000      	b.n	8009778 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009776:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	40010000 	.word	0x40010000
 800978c:	40000400 	.word	0x40000400
 8009790:	40000800 	.word	0x40000800
 8009794:	40000c00 	.word	0x40000c00
 8009798:	40010400 	.word	0x40010400
 800979c:	40001800 	.word	0x40001800
 80097a0:	40014000 	.word	0x40014000
 80097a4:	00010007 	.word	0x00010007

080097a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d101      	bne.n	80097ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	e049      	b.n	800984e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d106      	bne.n	80097d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f841 	bl	8009856 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2202      	movs	r2, #2
 80097d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	3304      	adds	r3, #4
 80097e4:	4619      	mov	r1, r3
 80097e6:	4610      	mov	r0, r2
 80097e8:	f000 fc8c 	bl	800a104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009856:	b480      	push	{r7}
 8009858:	b083      	sub	sp, #12
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800985e:	bf00      	nop
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
	...

0800986c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2200      	movs	r2, #0
 800987c:	6839      	ldr	r1, [r7, #0]
 800987e:	4618      	mov	r0, r3
 8009880:	f000 ffb0 	bl	800a7e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a3e      	ldr	r2, [pc, #248]	; (8009984 <HAL_TIM_PWM_Stop+0x118>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d013      	beq.n	80098b6 <HAL_TIM_PWM_Stop+0x4a>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a3d      	ldr	r2, [pc, #244]	; (8009988 <HAL_TIM_PWM_Stop+0x11c>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d00e      	beq.n	80098b6 <HAL_TIM_PWM_Stop+0x4a>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a3b      	ldr	r2, [pc, #236]	; (800998c <HAL_TIM_PWM_Stop+0x120>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d009      	beq.n	80098b6 <HAL_TIM_PWM_Stop+0x4a>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a3a      	ldr	r2, [pc, #232]	; (8009990 <HAL_TIM_PWM_Stop+0x124>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d004      	beq.n	80098b6 <HAL_TIM_PWM_Stop+0x4a>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a38      	ldr	r2, [pc, #224]	; (8009994 <HAL_TIM_PWM_Stop+0x128>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d101      	bne.n	80098ba <HAL_TIM_PWM_Stop+0x4e>
 80098b6:	2301      	movs	r3, #1
 80098b8:	e000      	b.n	80098bc <HAL_TIM_PWM_Stop+0x50>
 80098ba:	2300      	movs	r3, #0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d017      	beq.n	80098f0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6a1a      	ldr	r2, [r3, #32]
 80098c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80098ca:	4013      	ands	r3, r2
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10f      	bne.n	80098f0 <HAL_TIM_PWM_Stop+0x84>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6a1a      	ldr	r2, [r3, #32]
 80098d6:	f240 4344 	movw	r3, #1092	; 0x444
 80098da:	4013      	ands	r3, r2
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d107      	bne.n	80098f0 <HAL_TIM_PWM_Stop+0x84>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80098ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	6a1a      	ldr	r2, [r3, #32]
 80098f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80098fa:	4013      	ands	r3, r2
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10f      	bne.n	8009920 <HAL_TIM_PWM_Stop+0xb4>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6a1a      	ldr	r2, [r3, #32]
 8009906:	f240 4344 	movw	r3, #1092	; 0x444
 800990a:	4013      	ands	r3, r2
 800990c:	2b00      	cmp	r3, #0
 800990e:	d107      	bne.n	8009920 <HAL_TIM_PWM_Stop+0xb4>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f022 0201 	bic.w	r2, r2, #1
 800991e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d104      	bne.n	8009930 <HAL_TIM_PWM_Stop+0xc4>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800992e:	e023      	b.n	8009978 <HAL_TIM_PWM_Stop+0x10c>
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	2b04      	cmp	r3, #4
 8009934:	d104      	bne.n	8009940 <HAL_TIM_PWM_Stop+0xd4>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2201      	movs	r2, #1
 800993a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800993e:	e01b      	b.n	8009978 <HAL_TIM_PWM_Stop+0x10c>
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	2b08      	cmp	r3, #8
 8009944:	d104      	bne.n	8009950 <HAL_TIM_PWM_Stop+0xe4>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800994e:	e013      	b.n	8009978 <HAL_TIM_PWM_Stop+0x10c>
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	2b0c      	cmp	r3, #12
 8009954:	d104      	bne.n	8009960 <HAL_TIM_PWM_Stop+0xf4>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800995e:	e00b      	b.n	8009978 <HAL_TIM_PWM_Stop+0x10c>
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	2b10      	cmp	r3, #16
 8009964:	d104      	bne.n	8009970 <HAL_TIM_PWM_Stop+0x104>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2201      	movs	r2, #1
 800996a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800996e:	e003      	b.n	8009978 <HAL_TIM_PWM_Stop+0x10c>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	40010000 	.word	0x40010000
 8009988:	40010400 	.word	0x40010400
 800998c:	40014000 	.word	0x40014000
 8009990:	40014400 	.word	0x40014400
 8009994:	40014800 	.word	0x40014800

08009998 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099a2:	2300      	movs	r3, #0
 80099a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d109      	bne.n	80099c0 <HAL_TIM_PWM_Start_IT+0x28>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	bf14      	ite	ne
 80099b8:	2301      	movne	r3, #1
 80099ba:	2300      	moveq	r3, #0
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	e03c      	b.n	8009a3a <HAL_TIM_PWM_Start_IT+0xa2>
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	2b04      	cmp	r3, #4
 80099c4:	d109      	bne.n	80099da <HAL_TIM_PWM_Start_IT+0x42>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	bf14      	ite	ne
 80099d2:	2301      	movne	r3, #1
 80099d4:	2300      	moveq	r3, #0
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	e02f      	b.n	8009a3a <HAL_TIM_PWM_Start_IT+0xa2>
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	2b08      	cmp	r3, #8
 80099de:	d109      	bne.n	80099f4 <HAL_TIM_PWM_Start_IT+0x5c>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	bf14      	ite	ne
 80099ec:	2301      	movne	r3, #1
 80099ee:	2300      	moveq	r3, #0
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	e022      	b.n	8009a3a <HAL_TIM_PWM_Start_IT+0xa2>
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	2b0c      	cmp	r3, #12
 80099f8:	d109      	bne.n	8009a0e <HAL_TIM_PWM_Start_IT+0x76>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	bf14      	ite	ne
 8009a06:	2301      	movne	r3, #1
 8009a08:	2300      	moveq	r3, #0
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	e015      	b.n	8009a3a <HAL_TIM_PWM_Start_IT+0xa2>
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2b10      	cmp	r3, #16
 8009a12:	d109      	bne.n	8009a28 <HAL_TIM_PWM_Start_IT+0x90>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	bf14      	ite	ne
 8009a20:	2301      	movne	r3, #1
 8009a22:	2300      	moveq	r3, #0
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	e008      	b.n	8009a3a <HAL_TIM_PWM_Start_IT+0xa2>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	bf14      	ite	ne
 8009a34:	2301      	movne	r3, #1
 8009a36:	2300      	moveq	r3, #0
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e0ec      	b.n	8009c1c <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d104      	bne.n	8009a52 <HAL_TIM_PWM_Start_IT+0xba>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a50:	e023      	b.n	8009a9a <HAL_TIM_PWM_Start_IT+0x102>
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2b04      	cmp	r3, #4
 8009a56:	d104      	bne.n	8009a62 <HAL_TIM_PWM_Start_IT+0xca>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a60:	e01b      	b.n	8009a9a <HAL_TIM_PWM_Start_IT+0x102>
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	2b08      	cmp	r3, #8
 8009a66:	d104      	bne.n	8009a72 <HAL_TIM_PWM_Start_IT+0xda>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a70:	e013      	b.n	8009a9a <HAL_TIM_PWM_Start_IT+0x102>
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b0c      	cmp	r3, #12
 8009a76:	d104      	bne.n	8009a82 <HAL_TIM_PWM_Start_IT+0xea>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a80:	e00b      	b.n	8009a9a <HAL_TIM_PWM_Start_IT+0x102>
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	2b10      	cmp	r3, #16
 8009a86:	d104      	bne.n	8009a92 <HAL_TIM_PWM_Start_IT+0xfa>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a90:	e003      	b.n	8009a9a <HAL_TIM_PWM_Start_IT+0x102>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2202      	movs	r2, #2
 8009a96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	2b0c      	cmp	r3, #12
 8009a9e:	d841      	bhi.n	8009b24 <HAL_TIM_PWM_Start_IT+0x18c>
 8009aa0:	a201      	add	r2, pc, #4	; (adr r2, 8009aa8 <HAL_TIM_PWM_Start_IT+0x110>)
 8009aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa6:	bf00      	nop
 8009aa8:	08009add 	.word	0x08009add
 8009aac:	08009b25 	.word	0x08009b25
 8009ab0:	08009b25 	.word	0x08009b25
 8009ab4:	08009b25 	.word	0x08009b25
 8009ab8:	08009aef 	.word	0x08009aef
 8009abc:	08009b25 	.word	0x08009b25
 8009ac0:	08009b25 	.word	0x08009b25
 8009ac4:	08009b25 	.word	0x08009b25
 8009ac8:	08009b01 	.word	0x08009b01
 8009acc:	08009b25 	.word	0x08009b25
 8009ad0:	08009b25 	.word	0x08009b25
 8009ad4:	08009b25 	.word	0x08009b25
 8009ad8:	08009b13 	.word	0x08009b13
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68da      	ldr	r2, [r3, #12]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f042 0202 	orr.w	r2, r2, #2
 8009aea:	60da      	str	r2, [r3, #12]
      break;
 8009aec:	e01d      	b.n	8009b2a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68da      	ldr	r2, [r3, #12]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f042 0204 	orr.w	r2, r2, #4
 8009afc:	60da      	str	r2, [r3, #12]
      break;
 8009afe:	e014      	b.n	8009b2a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68da      	ldr	r2, [r3, #12]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f042 0208 	orr.w	r2, r2, #8
 8009b0e:	60da      	str	r2, [r3, #12]
      break;
 8009b10:	e00b      	b.n	8009b2a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68da      	ldr	r2, [r3, #12]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f042 0210 	orr.w	r2, r2, #16
 8009b20:	60da      	str	r2, [r3, #12]
      break;
 8009b22:	e002      	b.n	8009b2a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	73fb      	strb	r3, [r7, #15]
      break;
 8009b28:	bf00      	nop
  }

  if (status == HAL_OK)
 8009b2a:	7bfb      	ldrb	r3, [r7, #15]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d174      	bne.n	8009c1a <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2201      	movs	r2, #1
 8009b36:	6839      	ldr	r1, [r7, #0]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f000 fe53 	bl	800a7e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a38      	ldr	r2, [pc, #224]	; (8009c24 <HAL_TIM_PWM_Start_IT+0x28c>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d013      	beq.n	8009b70 <HAL_TIM_PWM_Start_IT+0x1d8>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a36      	ldr	r2, [pc, #216]	; (8009c28 <HAL_TIM_PWM_Start_IT+0x290>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d00e      	beq.n	8009b70 <HAL_TIM_PWM_Start_IT+0x1d8>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a35      	ldr	r2, [pc, #212]	; (8009c2c <HAL_TIM_PWM_Start_IT+0x294>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d009      	beq.n	8009b70 <HAL_TIM_PWM_Start_IT+0x1d8>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a33      	ldr	r2, [pc, #204]	; (8009c30 <HAL_TIM_PWM_Start_IT+0x298>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d004      	beq.n	8009b70 <HAL_TIM_PWM_Start_IT+0x1d8>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a32      	ldr	r2, [pc, #200]	; (8009c34 <HAL_TIM_PWM_Start_IT+0x29c>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d101      	bne.n	8009b74 <HAL_TIM_PWM_Start_IT+0x1dc>
 8009b70:	2301      	movs	r3, #1
 8009b72:	e000      	b.n	8009b76 <HAL_TIM_PWM_Start_IT+0x1de>
 8009b74:	2300      	movs	r3, #0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d007      	beq.n	8009b8a <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a25      	ldr	r2, [pc, #148]	; (8009c24 <HAL_TIM_PWM_Start_IT+0x28c>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d022      	beq.n	8009bda <HAL_TIM_PWM_Start_IT+0x242>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b9c:	d01d      	beq.n	8009bda <HAL_TIM_PWM_Start_IT+0x242>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a25      	ldr	r2, [pc, #148]	; (8009c38 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d018      	beq.n	8009bda <HAL_TIM_PWM_Start_IT+0x242>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a23      	ldr	r2, [pc, #140]	; (8009c3c <HAL_TIM_PWM_Start_IT+0x2a4>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d013      	beq.n	8009bda <HAL_TIM_PWM_Start_IT+0x242>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a22      	ldr	r2, [pc, #136]	; (8009c40 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d00e      	beq.n	8009bda <HAL_TIM_PWM_Start_IT+0x242>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a19      	ldr	r2, [pc, #100]	; (8009c28 <HAL_TIM_PWM_Start_IT+0x290>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d009      	beq.n	8009bda <HAL_TIM_PWM_Start_IT+0x242>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a1e      	ldr	r2, [pc, #120]	; (8009c44 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d004      	beq.n	8009bda <HAL_TIM_PWM_Start_IT+0x242>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a15      	ldr	r2, [pc, #84]	; (8009c2c <HAL_TIM_PWM_Start_IT+0x294>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d115      	bne.n	8009c06 <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	689a      	ldr	r2, [r3, #8]
 8009be0:	4b19      	ldr	r3, [pc, #100]	; (8009c48 <HAL_TIM_PWM_Start_IT+0x2b0>)
 8009be2:	4013      	ands	r3, r2
 8009be4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	2b06      	cmp	r3, #6
 8009bea:	d015      	beq.n	8009c18 <HAL_TIM_PWM_Start_IT+0x280>
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bf2:	d011      	beq.n	8009c18 <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f042 0201 	orr.w	r2, r2, #1
 8009c02:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c04:	e008      	b.n	8009c18 <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f042 0201 	orr.w	r2, r2, #1
 8009c14:	601a      	str	r2, [r3, #0]
 8009c16:	e000      	b.n	8009c1a <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c18:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	40010000 	.word	0x40010000
 8009c28:	40010400 	.word	0x40010400
 8009c2c:	40014000 	.word	0x40014000
 8009c30:	40014400 	.word	0x40014400
 8009c34:	40014800 	.word	0x40014800
 8009c38:	40000400 	.word	0x40000400
 8009c3c:	40000800 	.word	0x40000800
 8009c40:	40000c00 	.word	0x40000c00
 8009c44:	40001800 	.word	0x40001800
 8009c48:	00010007 	.word	0x00010007

08009c4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	f003 0302 	and.w	r3, r3, #2
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d122      	bne.n	8009ca8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	f003 0302 	and.w	r3, r3, #2
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d11b      	bne.n	8009ca8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f06f 0202 	mvn.w	r2, #2
 8009c78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	699b      	ldr	r3, [r3, #24]
 8009c86:	f003 0303 	and.w	r3, r3, #3
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d003      	beq.n	8009c96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fa1a 	bl	800a0c8 <HAL_TIM_IC_CaptureCallback>
 8009c94:	e005      	b.n	8009ca2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 fa0c 	bl	800a0b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fa1d 	bl	800a0dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	f003 0304 	and.w	r3, r3, #4
 8009cb2:	2b04      	cmp	r3, #4
 8009cb4:	d122      	bne.n	8009cfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	f003 0304 	and.w	r3, r3, #4
 8009cc0:	2b04      	cmp	r3, #4
 8009cc2:	d11b      	bne.n	8009cfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f06f 0204 	mvn.w	r2, #4
 8009ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2202      	movs	r2, #2
 8009cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f9f0 	bl	800a0c8 <HAL_TIM_IC_CaptureCallback>
 8009ce8:	e005      	b.n	8009cf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f9e2 	bl	800a0b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f9f3 	bl	800a0dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	f003 0308 	and.w	r3, r3, #8
 8009d06:	2b08      	cmp	r3, #8
 8009d08:	d122      	bne.n	8009d50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	f003 0308 	and.w	r3, r3, #8
 8009d14:	2b08      	cmp	r3, #8
 8009d16:	d11b      	bne.n	8009d50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f06f 0208 	mvn.w	r2, #8
 8009d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2204      	movs	r2, #4
 8009d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	69db      	ldr	r3, [r3, #28]
 8009d2e:	f003 0303 	and.w	r3, r3, #3
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d003      	beq.n	8009d3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 f9c6 	bl	800a0c8 <HAL_TIM_IC_CaptureCallback>
 8009d3c:	e005      	b.n	8009d4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f9b8 	bl	800a0b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 f9c9 	bl	800a0dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	f003 0310 	and.w	r3, r3, #16
 8009d5a:	2b10      	cmp	r3, #16
 8009d5c:	d122      	bne.n	8009da4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	f003 0310 	and.w	r3, r3, #16
 8009d68:	2b10      	cmp	r3, #16
 8009d6a:	d11b      	bne.n	8009da4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f06f 0210 	mvn.w	r2, #16
 8009d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2208      	movs	r2, #8
 8009d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d003      	beq.n	8009d92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f99c 	bl	800a0c8 <HAL_TIM_IC_CaptureCallback>
 8009d90:	e005      	b.n	8009d9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f98e 	bl	800a0b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f99f 	bl	800a0dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	f003 0301 	and.w	r3, r3, #1
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d10e      	bne.n	8009dd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	f003 0301 	and.w	r3, r3, #1
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d107      	bne.n	8009dd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f06f 0201 	mvn.w	r2, #1
 8009dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f7f9 f978 	bl	80030c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dda:	2b80      	cmp	r3, #128	; 0x80
 8009ddc:	d10e      	bne.n	8009dfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009de8:	2b80      	cmp	r3, #128	; 0x80
 8009dea:	d107      	bne.n	8009dfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 fdb2 	bl	800a960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e0a:	d10e      	bne.n	8009e2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e16:	2b80      	cmp	r3, #128	; 0x80
 8009e18:	d107      	bne.n	8009e2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fda5 	bl	800a974 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e34:	2b40      	cmp	r3, #64	; 0x40
 8009e36:	d10e      	bne.n	8009e56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e42:	2b40      	cmp	r3, #64	; 0x40
 8009e44:	d107      	bne.n	8009e56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 f94d 	bl	800a0f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	f003 0320 	and.w	r3, r3, #32
 8009e60:	2b20      	cmp	r3, #32
 8009e62:	d10e      	bne.n	8009e82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	f003 0320 	and.w	r3, r3, #32
 8009e6e:	2b20      	cmp	r3, #32
 8009e70:	d107      	bne.n	8009e82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f06f 0220 	mvn.w	r2, #32
 8009e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fd65 	bl	800a94c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e82:	bf00      	nop
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
	...

08009e8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d101      	bne.n	8009eaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009ea6:	2302      	movs	r3, #2
 8009ea8:	e0ff      	b.n	800a0aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2201      	movs	r2, #1
 8009eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b14      	cmp	r3, #20
 8009eb6:	f200 80f0 	bhi.w	800a09a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009eba:	a201      	add	r2, pc, #4	; (adr r2, 8009ec0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec0:	08009f15 	.word	0x08009f15
 8009ec4:	0800a09b 	.word	0x0800a09b
 8009ec8:	0800a09b 	.word	0x0800a09b
 8009ecc:	0800a09b 	.word	0x0800a09b
 8009ed0:	08009f55 	.word	0x08009f55
 8009ed4:	0800a09b 	.word	0x0800a09b
 8009ed8:	0800a09b 	.word	0x0800a09b
 8009edc:	0800a09b 	.word	0x0800a09b
 8009ee0:	08009f97 	.word	0x08009f97
 8009ee4:	0800a09b 	.word	0x0800a09b
 8009ee8:	0800a09b 	.word	0x0800a09b
 8009eec:	0800a09b 	.word	0x0800a09b
 8009ef0:	08009fd7 	.word	0x08009fd7
 8009ef4:	0800a09b 	.word	0x0800a09b
 8009ef8:	0800a09b 	.word	0x0800a09b
 8009efc:	0800a09b 	.word	0x0800a09b
 8009f00:	0800a019 	.word	0x0800a019
 8009f04:	0800a09b 	.word	0x0800a09b
 8009f08:	0800a09b 	.word	0x0800a09b
 8009f0c:	0800a09b 	.word	0x0800a09b
 8009f10:	0800a059 	.word	0x0800a059
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68b9      	ldr	r1, [r7, #8]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f000 f98c 	bl	800a238 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	699a      	ldr	r2, [r3, #24]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f042 0208 	orr.w	r2, r2, #8
 8009f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	699a      	ldr	r2, [r3, #24]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f022 0204 	bic.w	r2, r2, #4
 8009f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	6999      	ldr	r1, [r3, #24]
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	691a      	ldr	r2, [r3, #16]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	430a      	orrs	r2, r1
 8009f50:	619a      	str	r2, [r3, #24]
      break;
 8009f52:	e0a5      	b.n	800a0a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68b9      	ldr	r1, [r7, #8]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f000 f9fc 	bl	800a358 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	699a      	ldr	r2, [r3, #24]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	699a      	ldr	r2, [r3, #24]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	6999      	ldr	r1, [r3, #24]
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	021a      	lsls	r2, r3, #8
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	430a      	orrs	r2, r1
 8009f92:	619a      	str	r2, [r3, #24]
      break;
 8009f94:	e084      	b.n	800a0a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68b9      	ldr	r1, [r7, #8]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f000 fa65 	bl	800a46c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	69da      	ldr	r2, [r3, #28]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f042 0208 	orr.w	r2, r2, #8
 8009fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	69da      	ldr	r2, [r3, #28]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f022 0204 	bic.w	r2, r2, #4
 8009fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	69d9      	ldr	r1, [r3, #28]
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	691a      	ldr	r2, [r3, #16]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	430a      	orrs	r2, r1
 8009fd2:	61da      	str	r2, [r3, #28]
      break;
 8009fd4:	e064      	b.n	800a0a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68b9      	ldr	r1, [r7, #8]
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f000 facd 	bl	800a57c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	69da      	ldr	r2, [r3, #28]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	69da      	ldr	r2, [r3, #28]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	69d9      	ldr	r1, [r3, #28]
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	021a      	lsls	r2, r3, #8
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	430a      	orrs	r2, r1
 800a014:	61da      	str	r2, [r3, #28]
      break;
 800a016:	e043      	b.n	800a0a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68b9      	ldr	r1, [r7, #8]
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 fb16 	bl	800a650 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f042 0208 	orr.w	r2, r2, #8
 800a032:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f022 0204 	bic.w	r2, r2, #4
 800a042:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	691a      	ldr	r2, [r3, #16]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	430a      	orrs	r2, r1
 800a054:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a056:	e023      	b.n	800a0a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68b9      	ldr	r1, [r7, #8]
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 fb5a 	bl	800a718 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a072:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a082:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	021a      	lsls	r2, r3, #8
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	430a      	orrs	r2, r1
 800a096:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a098:	e002      	b.n	800a0a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	75fb      	strb	r3, [r7, #23]
      break;
 800a09e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a0a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop

0800a0b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0e4:	bf00      	nop
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a104:	b480      	push	{r7}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a40      	ldr	r2, [pc, #256]	; (800a218 <TIM_Base_SetConfig+0x114>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d013      	beq.n	800a144 <TIM_Base_SetConfig+0x40>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a122:	d00f      	beq.n	800a144 <TIM_Base_SetConfig+0x40>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a3d      	ldr	r2, [pc, #244]	; (800a21c <TIM_Base_SetConfig+0x118>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d00b      	beq.n	800a144 <TIM_Base_SetConfig+0x40>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a3c      	ldr	r2, [pc, #240]	; (800a220 <TIM_Base_SetConfig+0x11c>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d007      	beq.n	800a144 <TIM_Base_SetConfig+0x40>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a3b      	ldr	r2, [pc, #236]	; (800a224 <TIM_Base_SetConfig+0x120>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d003      	beq.n	800a144 <TIM_Base_SetConfig+0x40>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a3a      	ldr	r2, [pc, #232]	; (800a228 <TIM_Base_SetConfig+0x124>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d108      	bne.n	800a156 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a14a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	4313      	orrs	r3, r2
 800a154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a2f      	ldr	r2, [pc, #188]	; (800a218 <TIM_Base_SetConfig+0x114>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d01f      	beq.n	800a19e <TIM_Base_SetConfig+0x9a>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a164:	d01b      	beq.n	800a19e <TIM_Base_SetConfig+0x9a>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a2c      	ldr	r2, [pc, #176]	; (800a21c <TIM_Base_SetConfig+0x118>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d017      	beq.n	800a19e <TIM_Base_SetConfig+0x9a>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4a2b      	ldr	r2, [pc, #172]	; (800a220 <TIM_Base_SetConfig+0x11c>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d013      	beq.n	800a19e <TIM_Base_SetConfig+0x9a>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a2a      	ldr	r2, [pc, #168]	; (800a224 <TIM_Base_SetConfig+0x120>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d00f      	beq.n	800a19e <TIM_Base_SetConfig+0x9a>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4a29      	ldr	r2, [pc, #164]	; (800a228 <TIM_Base_SetConfig+0x124>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d00b      	beq.n	800a19e <TIM_Base_SetConfig+0x9a>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a28      	ldr	r2, [pc, #160]	; (800a22c <TIM_Base_SetConfig+0x128>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d007      	beq.n	800a19e <TIM_Base_SetConfig+0x9a>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a27      	ldr	r2, [pc, #156]	; (800a230 <TIM_Base_SetConfig+0x12c>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d003      	beq.n	800a19e <TIM_Base_SetConfig+0x9a>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a26      	ldr	r2, [pc, #152]	; (800a234 <TIM_Base_SetConfig+0x130>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d108      	bne.n	800a1b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	695b      	ldr	r3, [r3, #20]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	689a      	ldr	r2, [r3, #8]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a10      	ldr	r2, [pc, #64]	; (800a218 <TIM_Base_SetConfig+0x114>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d00f      	beq.n	800a1fc <TIM_Base_SetConfig+0xf8>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a12      	ldr	r2, [pc, #72]	; (800a228 <TIM_Base_SetConfig+0x124>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d00b      	beq.n	800a1fc <TIM_Base_SetConfig+0xf8>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a11      	ldr	r2, [pc, #68]	; (800a22c <TIM_Base_SetConfig+0x128>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d007      	beq.n	800a1fc <TIM_Base_SetConfig+0xf8>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a10      	ldr	r2, [pc, #64]	; (800a230 <TIM_Base_SetConfig+0x12c>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d003      	beq.n	800a1fc <TIM_Base_SetConfig+0xf8>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a0f      	ldr	r2, [pc, #60]	; (800a234 <TIM_Base_SetConfig+0x130>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d103      	bne.n	800a204 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	691a      	ldr	r2, [r3, #16]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	615a      	str	r2, [r3, #20]
}
 800a20a:	bf00      	nop
 800a20c:	3714      	adds	r7, #20
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	40010000 	.word	0x40010000
 800a21c:	40000400 	.word	0x40000400
 800a220:	40000800 	.word	0x40000800
 800a224:	40000c00 	.word	0x40000c00
 800a228:	40010400 	.word	0x40010400
 800a22c:	40014000 	.word	0x40014000
 800a230:	40014400 	.word	0x40014400
 800a234:	40014800 	.word	0x40014800

0800a238 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a238:	b480      	push	{r7}
 800a23a:	b087      	sub	sp, #28
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a1b      	ldr	r3, [r3, #32]
 800a246:	f023 0201 	bic.w	r2, r3, #1
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a1b      	ldr	r3, [r3, #32]
 800a252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	699b      	ldr	r3, [r3, #24]
 800a25e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	4b37      	ldr	r3, [pc, #220]	; (800a340 <TIM_OC1_SetConfig+0x108>)
 800a264:	4013      	ands	r3, r2
 800a266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f023 0303 	bic.w	r3, r3, #3
 800a26e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	4313      	orrs	r3, r2
 800a278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f023 0302 	bic.w	r3, r3, #2
 800a280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	4313      	orrs	r3, r2
 800a28a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4a2d      	ldr	r2, [pc, #180]	; (800a344 <TIM_OC1_SetConfig+0x10c>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d00f      	beq.n	800a2b4 <TIM_OC1_SetConfig+0x7c>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a2c      	ldr	r2, [pc, #176]	; (800a348 <TIM_OC1_SetConfig+0x110>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d00b      	beq.n	800a2b4 <TIM_OC1_SetConfig+0x7c>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a2b      	ldr	r2, [pc, #172]	; (800a34c <TIM_OC1_SetConfig+0x114>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d007      	beq.n	800a2b4 <TIM_OC1_SetConfig+0x7c>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a2a      	ldr	r2, [pc, #168]	; (800a350 <TIM_OC1_SetConfig+0x118>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d003      	beq.n	800a2b4 <TIM_OC1_SetConfig+0x7c>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a29      	ldr	r2, [pc, #164]	; (800a354 <TIM_OC1_SetConfig+0x11c>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d10c      	bne.n	800a2ce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	f023 0308 	bic.w	r3, r3, #8
 800a2ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	697a      	ldr	r2, [r7, #20]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f023 0304 	bic.w	r3, r3, #4
 800a2cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a1c      	ldr	r2, [pc, #112]	; (800a344 <TIM_OC1_SetConfig+0x10c>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d00f      	beq.n	800a2f6 <TIM_OC1_SetConfig+0xbe>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a1b      	ldr	r2, [pc, #108]	; (800a348 <TIM_OC1_SetConfig+0x110>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d00b      	beq.n	800a2f6 <TIM_OC1_SetConfig+0xbe>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4a1a      	ldr	r2, [pc, #104]	; (800a34c <TIM_OC1_SetConfig+0x114>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d007      	beq.n	800a2f6 <TIM_OC1_SetConfig+0xbe>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4a19      	ldr	r2, [pc, #100]	; (800a350 <TIM_OC1_SetConfig+0x118>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d003      	beq.n	800a2f6 <TIM_OC1_SetConfig+0xbe>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4a18      	ldr	r2, [pc, #96]	; (800a354 <TIM_OC1_SetConfig+0x11c>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d111      	bne.n	800a31a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	693a      	ldr	r2, [r7, #16]
 800a316:	4313      	orrs	r3, r2
 800a318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	685a      	ldr	r2, [r3, #4]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	697a      	ldr	r2, [r7, #20]
 800a332:	621a      	str	r2, [r3, #32]
}
 800a334:	bf00      	nop
 800a336:	371c      	adds	r7, #28
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	fffeff8f 	.word	0xfffeff8f
 800a344:	40010000 	.word	0x40010000
 800a348:	40010400 	.word	0x40010400
 800a34c:	40014000 	.word	0x40014000
 800a350:	40014400 	.word	0x40014400
 800a354:	40014800 	.word	0x40014800

0800a358 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a358:	b480      	push	{r7}
 800a35a:	b087      	sub	sp, #28
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a1b      	ldr	r3, [r3, #32]
 800a366:	f023 0210 	bic.w	r2, r3, #16
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	4b34      	ldr	r3, [pc, #208]	; (800a454 <TIM_OC2_SetConfig+0xfc>)
 800a384:	4013      	ands	r3, r2
 800a386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a38e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	021b      	lsls	r3, r3, #8
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	4313      	orrs	r3, r2
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	f023 0320 	bic.w	r3, r3, #32
 800a3a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	011b      	lsls	r3, r3, #4
 800a3aa:	697a      	ldr	r2, [r7, #20]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a29      	ldr	r2, [pc, #164]	; (800a458 <TIM_OC2_SetConfig+0x100>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d003      	beq.n	800a3c0 <TIM_OC2_SetConfig+0x68>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a28      	ldr	r2, [pc, #160]	; (800a45c <TIM_OC2_SetConfig+0x104>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d10d      	bne.n	800a3dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	011b      	lsls	r3, r3, #4
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	4a1e      	ldr	r2, [pc, #120]	; (800a458 <TIM_OC2_SetConfig+0x100>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d00f      	beq.n	800a404 <TIM_OC2_SetConfig+0xac>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a1d      	ldr	r2, [pc, #116]	; (800a45c <TIM_OC2_SetConfig+0x104>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d00b      	beq.n	800a404 <TIM_OC2_SetConfig+0xac>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a1c      	ldr	r2, [pc, #112]	; (800a460 <TIM_OC2_SetConfig+0x108>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d007      	beq.n	800a404 <TIM_OC2_SetConfig+0xac>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a1b      	ldr	r2, [pc, #108]	; (800a464 <TIM_OC2_SetConfig+0x10c>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d003      	beq.n	800a404 <TIM_OC2_SetConfig+0xac>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a1a      	ldr	r2, [pc, #104]	; (800a468 <TIM_OC2_SetConfig+0x110>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d113      	bne.n	800a42c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a40a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	695b      	ldr	r3, [r3, #20]
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	693a      	ldr	r2, [r7, #16]
 800a428:	4313      	orrs	r3, r2
 800a42a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	693a      	ldr	r2, [r7, #16]
 800a430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	621a      	str	r2, [r3, #32]
}
 800a446:	bf00      	nop
 800a448:	371c      	adds	r7, #28
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	feff8fff 	.word	0xfeff8fff
 800a458:	40010000 	.word	0x40010000
 800a45c:	40010400 	.word	0x40010400
 800a460:	40014000 	.word	0x40014000
 800a464:	40014400 	.word	0x40014400
 800a468:	40014800 	.word	0x40014800

0800a46c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b087      	sub	sp, #28
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a1b      	ldr	r3, [r3, #32]
 800a47a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	69db      	ldr	r3, [r3, #28]
 800a492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	4b33      	ldr	r3, [pc, #204]	; (800a564 <TIM_OC3_SetConfig+0xf8>)
 800a498:	4013      	ands	r3, r2
 800a49a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f023 0303 	bic.w	r3, r3, #3
 800a4a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a4b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	021b      	lsls	r3, r3, #8
 800a4bc:	697a      	ldr	r2, [r7, #20]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4a28      	ldr	r2, [pc, #160]	; (800a568 <TIM_OC3_SetConfig+0xfc>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d003      	beq.n	800a4d2 <TIM_OC3_SetConfig+0x66>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4a27      	ldr	r2, [pc, #156]	; (800a56c <TIM_OC3_SetConfig+0x100>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d10d      	bne.n	800a4ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	021b      	lsls	r3, r3, #8
 800a4e0:	697a      	ldr	r2, [r7, #20]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a4ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a1d      	ldr	r2, [pc, #116]	; (800a568 <TIM_OC3_SetConfig+0xfc>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d00f      	beq.n	800a516 <TIM_OC3_SetConfig+0xaa>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a1c      	ldr	r2, [pc, #112]	; (800a56c <TIM_OC3_SetConfig+0x100>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d00b      	beq.n	800a516 <TIM_OC3_SetConfig+0xaa>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4a1b      	ldr	r2, [pc, #108]	; (800a570 <TIM_OC3_SetConfig+0x104>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d007      	beq.n	800a516 <TIM_OC3_SetConfig+0xaa>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4a1a      	ldr	r2, [pc, #104]	; (800a574 <TIM_OC3_SetConfig+0x108>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d003      	beq.n	800a516 <TIM_OC3_SetConfig+0xaa>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4a19      	ldr	r2, [pc, #100]	; (800a578 <TIM_OC3_SetConfig+0x10c>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d113      	bne.n	800a53e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a51c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	695b      	ldr	r3, [r3, #20]
 800a52a:	011b      	lsls	r3, r3, #4
 800a52c:	693a      	ldr	r2, [r7, #16]
 800a52e:	4313      	orrs	r3, r2
 800a530:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	699b      	ldr	r3, [r3, #24]
 800a536:	011b      	lsls	r3, r3, #4
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	693a      	ldr	r2, [r7, #16]
 800a542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	685a      	ldr	r2, [r3, #4]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	697a      	ldr	r2, [r7, #20]
 800a556:	621a      	str	r2, [r3, #32]
}
 800a558:	bf00      	nop
 800a55a:	371c      	adds	r7, #28
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr
 800a564:	fffeff8f 	.word	0xfffeff8f
 800a568:	40010000 	.word	0x40010000
 800a56c:	40010400 	.word	0x40010400
 800a570:	40014000 	.word	0x40014000
 800a574:	40014400 	.word	0x40014400
 800a578:	40014800 	.word	0x40014800

0800a57c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b087      	sub	sp, #28
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6a1b      	ldr	r3, [r3, #32]
 800a58a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a1b      	ldr	r3, [r3, #32]
 800a596:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	69db      	ldr	r3, [r3, #28]
 800a5a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	4b24      	ldr	r3, [pc, #144]	; (800a638 <TIM_OC4_SetConfig+0xbc>)
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	021b      	lsls	r3, r3, #8
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a5c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	031b      	lsls	r3, r3, #12
 800a5ce:	693a      	ldr	r2, [r7, #16]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a19      	ldr	r2, [pc, #100]	; (800a63c <TIM_OC4_SetConfig+0xc0>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d00f      	beq.n	800a5fc <TIM_OC4_SetConfig+0x80>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a18      	ldr	r2, [pc, #96]	; (800a640 <TIM_OC4_SetConfig+0xc4>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d00b      	beq.n	800a5fc <TIM_OC4_SetConfig+0x80>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a17      	ldr	r2, [pc, #92]	; (800a644 <TIM_OC4_SetConfig+0xc8>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d007      	beq.n	800a5fc <TIM_OC4_SetConfig+0x80>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a16      	ldr	r2, [pc, #88]	; (800a648 <TIM_OC4_SetConfig+0xcc>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d003      	beq.n	800a5fc <TIM_OC4_SetConfig+0x80>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a15      	ldr	r2, [pc, #84]	; (800a64c <TIM_OC4_SetConfig+0xd0>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d109      	bne.n	800a610 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a602:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	695b      	ldr	r3, [r3, #20]
 800a608:	019b      	lsls	r3, r3, #6
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	697a      	ldr	r2, [r7, #20]
 800a614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	685a      	ldr	r2, [r3, #4]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	693a      	ldr	r2, [r7, #16]
 800a628:	621a      	str	r2, [r3, #32]
}
 800a62a:	bf00      	nop
 800a62c:	371c      	adds	r7, #28
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop
 800a638:	feff8fff 	.word	0xfeff8fff
 800a63c:	40010000 	.word	0x40010000
 800a640:	40010400 	.word	0x40010400
 800a644:	40014000 	.word	0x40014000
 800a648:	40014400 	.word	0x40014400
 800a64c:	40014800 	.word	0x40014800

0800a650 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a650:	b480      	push	{r7}
 800a652:	b087      	sub	sp, #28
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a1b      	ldr	r3, [r3, #32]
 800a65e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6a1b      	ldr	r3, [r3, #32]
 800a66a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	4b21      	ldr	r3, [pc, #132]	; (800a700 <TIM_OC5_SetConfig+0xb0>)
 800a67c:	4013      	ands	r3, r2
 800a67e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	68fa      	ldr	r2, [r7, #12]
 800a686:	4313      	orrs	r3, r2
 800a688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a690:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	041b      	lsls	r3, r3, #16
 800a698:	693a      	ldr	r2, [r7, #16]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4a18      	ldr	r2, [pc, #96]	; (800a704 <TIM_OC5_SetConfig+0xb4>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d00f      	beq.n	800a6c6 <TIM_OC5_SetConfig+0x76>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4a17      	ldr	r2, [pc, #92]	; (800a708 <TIM_OC5_SetConfig+0xb8>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d00b      	beq.n	800a6c6 <TIM_OC5_SetConfig+0x76>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a16      	ldr	r2, [pc, #88]	; (800a70c <TIM_OC5_SetConfig+0xbc>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d007      	beq.n	800a6c6 <TIM_OC5_SetConfig+0x76>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4a15      	ldr	r2, [pc, #84]	; (800a710 <TIM_OC5_SetConfig+0xc0>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d003      	beq.n	800a6c6 <TIM_OC5_SetConfig+0x76>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4a14      	ldr	r2, [pc, #80]	; (800a714 <TIM_OC5_SetConfig+0xc4>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d109      	bne.n	800a6da <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	021b      	lsls	r3, r3, #8
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	697a      	ldr	r2, [r7, #20]
 800a6de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	685a      	ldr	r2, [r3, #4]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	693a      	ldr	r2, [r7, #16]
 800a6f2:	621a      	str	r2, [r3, #32]
}
 800a6f4:	bf00      	nop
 800a6f6:	371c      	adds	r7, #28
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr
 800a700:	fffeff8f 	.word	0xfffeff8f
 800a704:	40010000 	.word	0x40010000
 800a708:	40010400 	.word	0x40010400
 800a70c:	40014000 	.word	0x40014000
 800a710:	40014400 	.word	0x40014400
 800a714:	40014800 	.word	0x40014800

0800a718 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a718:	b480      	push	{r7}
 800a71a:	b087      	sub	sp, #28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a1b      	ldr	r3, [r3, #32]
 800a726:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a1b      	ldr	r3, [r3, #32]
 800a732:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a73e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	4b22      	ldr	r3, [pc, #136]	; (800a7cc <TIM_OC6_SetConfig+0xb4>)
 800a744:	4013      	ands	r3, r2
 800a746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	021b      	lsls	r3, r3, #8
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	4313      	orrs	r3, r2
 800a752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a75a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	051b      	lsls	r3, r3, #20
 800a762:	693a      	ldr	r2, [r7, #16]
 800a764:	4313      	orrs	r3, r2
 800a766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a19      	ldr	r2, [pc, #100]	; (800a7d0 <TIM_OC6_SetConfig+0xb8>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d00f      	beq.n	800a790 <TIM_OC6_SetConfig+0x78>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a18      	ldr	r2, [pc, #96]	; (800a7d4 <TIM_OC6_SetConfig+0xbc>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d00b      	beq.n	800a790 <TIM_OC6_SetConfig+0x78>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a17      	ldr	r2, [pc, #92]	; (800a7d8 <TIM_OC6_SetConfig+0xc0>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d007      	beq.n	800a790 <TIM_OC6_SetConfig+0x78>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a16      	ldr	r2, [pc, #88]	; (800a7dc <TIM_OC6_SetConfig+0xc4>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d003      	beq.n	800a790 <TIM_OC6_SetConfig+0x78>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a15      	ldr	r2, [pc, #84]	; (800a7e0 <TIM_OC6_SetConfig+0xc8>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d109      	bne.n	800a7a4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a796:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	695b      	ldr	r3, [r3, #20]
 800a79c:	029b      	lsls	r3, r3, #10
 800a79e:	697a      	ldr	r2, [r7, #20]
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	697a      	ldr	r2, [r7, #20]
 800a7a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	685a      	ldr	r2, [r3, #4]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	693a      	ldr	r2, [r7, #16]
 800a7bc:	621a      	str	r2, [r3, #32]
}
 800a7be:	bf00      	nop
 800a7c0:	371c      	adds	r7, #28
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	feff8fff 	.word	0xfeff8fff
 800a7d0:	40010000 	.word	0x40010000
 800a7d4:	40010400 	.word	0x40010400
 800a7d8:	40014000 	.word	0x40014000
 800a7dc:	40014400 	.word	0x40014400
 800a7e0:	40014800 	.word	0x40014800

0800a7e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	f003 031f 	and.w	r3, r3, #31
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6a1a      	ldr	r2, [r3, #32]
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	43db      	mvns	r3, r3
 800a806:	401a      	ands	r2, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6a1a      	ldr	r2, [r3, #32]
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	f003 031f 	and.w	r3, r3, #31
 800a816:	6879      	ldr	r1, [r7, #4]
 800a818:	fa01 f303 	lsl.w	r3, r1, r3
 800a81c:	431a      	orrs	r2, r3
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	621a      	str	r2, [r3, #32]
}
 800a822:	bf00      	nop
 800a824:	371c      	adds	r7, #28
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
	...

0800a830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a840:	2b01      	cmp	r3, #1
 800a842:	d101      	bne.n	800a848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a844:	2302      	movs	r3, #2
 800a846:	e06d      	b.n	800a924 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2202      	movs	r2, #2
 800a854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a30      	ldr	r2, [pc, #192]	; (800a930 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d004      	beq.n	800a87c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a2f      	ldr	r2, [pc, #188]	; (800a934 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d108      	bne.n	800a88e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a882:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a894:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	4313      	orrs	r3, r2
 800a89e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a20      	ldr	r2, [pc, #128]	; (800a930 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d022      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ba:	d01d      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a1d      	ldr	r2, [pc, #116]	; (800a938 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d018      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a1c      	ldr	r2, [pc, #112]	; (800a93c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d013      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a1a      	ldr	r2, [pc, #104]	; (800a940 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d00e      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a15      	ldr	r2, [pc, #84]	; (800a934 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d009      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a16      	ldr	r2, [pc, #88]	; (800a944 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d004      	beq.n	800a8f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a15      	ldr	r2, [pc, #84]	; (800a948 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d10c      	bne.n	800a912 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	4313      	orrs	r3, r2
 800a908:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2201      	movs	r2, #1
 800a916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	3714      	adds	r7, #20
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr
 800a930:	40010000 	.word	0x40010000
 800a934:	40010400 	.word	0x40010400
 800a938:	40000400 	.word	0x40000400
 800a93c:	40000800 	.word	0x40000800
 800a940:	40000c00 	.word	0x40000c00
 800a944:	40001800 	.word	0x40001800
 800a948:	40014000 	.word	0x40014000

0800a94c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a954:	bf00      	nop
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a968:	bf00      	nop
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a97c:	bf00      	nop
 800a97e:	370c      	adds	r7, #12
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr

0800a988 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d101      	bne.n	800a99a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a996:	2301      	movs	r3, #1
 800a998:	e042      	b.n	800aa20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d106      	bne.n	800a9b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f7f8 fedd 	bl	800376c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2224      	movs	r2, #36	; 0x24
 800a9b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f022 0201 	bic.w	r2, r2, #1
 800a9c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 f8c2 	bl	800ab54 <UART_SetConfig>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d101      	bne.n	800a9da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e022      	b.n	800aa20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d002      	beq.n	800a9e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 fe16 	bl	800b614 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	685a      	ldr	r2, [r3, #4]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a9f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	689a      	ldr	r2, [r3, #8]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f042 0201 	orr.w	r2, r2, #1
 800aa16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fe9d 	bl	800b758 <UART_CheckIdleState>
 800aa1e:	4603      	mov	r3, r0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b08a      	sub	sp, #40	; 0x28
 800aa2c:	af02      	add	r7, sp, #8
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	603b      	str	r3, [r7, #0]
 800aa34:	4613      	mov	r3, r2
 800aa36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa3e:	2b20      	cmp	r3, #32
 800aa40:	f040 8083 	bne.w	800ab4a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d002      	beq.n	800aa50 <HAL_UART_Transmit+0x28>
 800aa4a:	88fb      	ldrh	r3, [r7, #6]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d101      	bne.n	800aa54 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e07b      	b.n	800ab4c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d101      	bne.n	800aa62 <HAL_UART_Transmit+0x3a>
 800aa5e:	2302      	movs	r3, #2
 800aa60:	e074      	b.n	800ab4c <HAL_UART_Transmit+0x124>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2201      	movs	r2, #1
 800aa66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2221      	movs	r2, #33	; 0x21
 800aa76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aa7a:	f7f9 fa0f 	bl	8003e9c <HAL_GetTick>
 800aa7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	88fa      	ldrh	r2, [r7, #6]
 800aa84:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	88fa      	ldrh	r2, [r7, #6]
 800aa8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa98:	d108      	bne.n	800aaac <HAL_UART_Transmit+0x84>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d104      	bne.n	800aaac <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	61bb      	str	r3, [r7, #24]
 800aaaa:	e003      	b.n	800aab4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aab0:	2300      	movs	r3, #0
 800aab2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800aabc:	e02c      	b.n	800ab18 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	2200      	movs	r2, #0
 800aac6:	2180      	movs	r1, #128	; 0x80
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f000 fe90 	bl	800b7ee <UART_WaitOnFlagUntilTimeout>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d001      	beq.n	800aad8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800aad4:	2303      	movs	r3, #3
 800aad6:	e039      	b.n	800ab4c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10b      	bne.n	800aaf6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	881b      	ldrh	r3, [r3, #0]
 800aae2:	461a      	mov	r2, r3
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aaec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	3302      	adds	r3, #2
 800aaf2:	61bb      	str	r3, [r7, #24]
 800aaf4:	e007      	b.n	800ab06 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	781a      	ldrb	r2, [r3, #0]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	3301      	adds	r3, #1
 800ab04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1cc      	bne.n	800aabe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	2140      	movs	r1, #64	; 0x40
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f000 fe5d 	bl	800b7ee <UART_WaitOnFlagUntilTimeout>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d001      	beq.n	800ab3e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	e006      	b.n	800ab4c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2220      	movs	r2, #32
 800ab42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ab46:	2300      	movs	r3, #0
 800ab48:	e000      	b.n	800ab4c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ab4a:	2302      	movs	r3, #2
  }
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3720      	adds	r7, #32
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab54:	b5b0      	push	{r4, r5, r7, lr}
 800ab56:	b08e      	sub	sp, #56	; 0x38
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	689a      	ldr	r2, [r3, #8]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	431a      	orrs	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	695b      	ldr	r3, [r3, #20]
 800ab70:	431a      	orrs	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	69db      	ldr	r3, [r3, #28]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	4bbf      	ldr	r3, [pc, #764]	; (800ae80 <UART_SetConfig+0x32c>)
 800ab82:	4013      	ands	r3, r2
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	6812      	ldr	r2, [r2, #0]
 800ab88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ab8a:	430b      	orrs	r3, r1
 800ab8c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	68da      	ldr	r2, [r3, #12]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	430a      	orrs	r2, r1
 800aba2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	699b      	ldr	r3, [r3, #24]
 800aba8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4ab5      	ldr	r2, [pc, #724]	; (800ae84 <UART_SetConfig+0x330>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d004      	beq.n	800abbe <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6a1b      	ldr	r3, [r3, #32]
 800abb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abba:	4313      	orrs	r3, r2
 800abbc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	689a      	ldr	r2, [r3, #8]
 800abc4:	4bb0      	ldr	r3, [pc, #704]	; (800ae88 <UART_SetConfig+0x334>)
 800abc6:	4013      	ands	r3, r2
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	6812      	ldr	r2, [r2, #0]
 800abcc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800abce:	430b      	orrs	r3, r1
 800abd0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd8:	f023 010f 	bic.w	r1, r3, #15
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	430a      	orrs	r2, r1
 800abe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4aa7      	ldr	r2, [pc, #668]	; (800ae8c <UART_SetConfig+0x338>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d176      	bne.n	800ace0 <UART_SetConfig+0x18c>
 800abf2:	4ba7      	ldr	r3, [pc, #668]	; (800ae90 <UART_SetConfig+0x33c>)
 800abf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800abfa:	2b28      	cmp	r3, #40	; 0x28
 800abfc:	d86c      	bhi.n	800acd8 <UART_SetConfig+0x184>
 800abfe:	a201      	add	r2, pc, #4	; (adr r2, 800ac04 <UART_SetConfig+0xb0>)
 800ac00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac04:	0800aca9 	.word	0x0800aca9
 800ac08:	0800acd9 	.word	0x0800acd9
 800ac0c:	0800acd9 	.word	0x0800acd9
 800ac10:	0800acd9 	.word	0x0800acd9
 800ac14:	0800acd9 	.word	0x0800acd9
 800ac18:	0800acd9 	.word	0x0800acd9
 800ac1c:	0800acd9 	.word	0x0800acd9
 800ac20:	0800acd9 	.word	0x0800acd9
 800ac24:	0800acb1 	.word	0x0800acb1
 800ac28:	0800acd9 	.word	0x0800acd9
 800ac2c:	0800acd9 	.word	0x0800acd9
 800ac30:	0800acd9 	.word	0x0800acd9
 800ac34:	0800acd9 	.word	0x0800acd9
 800ac38:	0800acd9 	.word	0x0800acd9
 800ac3c:	0800acd9 	.word	0x0800acd9
 800ac40:	0800acd9 	.word	0x0800acd9
 800ac44:	0800acb9 	.word	0x0800acb9
 800ac48:	0800acd9 	.word	0x0800acd9
 800ac4c:	0800acd9 	.word	0x0800acd9
 800ac50:	0800acd9 	.word	0x0800acd9
 800ac54:	0800acd9 	.word	0x0800acd9
 800ac58:	0800acd9 	.word	0x0800acd9
 800ac5c:	0800acd9 	.word	0x0800acd9
 800ac60:	0800acd9 	.word	0x0800acd9
 800ac64:	0800acc1 	.word	0x0800acc1
 800ac68:	0800acd9 	.word	0x0800acd9
 800ac6c:	0800acd9 	.word	0x0800acd9
 800ac70:	0800acd9 	.word	0x0800acd9
 800ac74:	0800acd9 	.word	0x0800acd9
 800ac78:	0800acd9 	.word	0x0800acd9
 800ac7c:	0800acd9 	.word	0x0800acd9
 800ac80:	0800acd9 	.word	0x0800acd9
 800ac84:	0800acc9 	.word	0x0800acc9
 800ac88:	0800acd9 	.word	0x0800acd9
 800ac8c:	0800acd9 	.word	0x0800acd9
 800ac90:	0800acd9 	.word	0x0800acd9
 800ac94:	0800acd9 	.word	0x0800acd9
 800ac98:	0800acd9 	.word	0x0800acd9
 800ac9c:	0800acd9 	.word	0x0800acd9
 800aca0:	0800acd9 	.word	0x0800acd9
 800aca4:	0800acd1 	.word	0x0800acd1
 800aca8:	2301      	movs	r3, #1
 800acaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acae:	e222      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800acb0:	2304      	movs	r3, #4
 800acb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acb6:	e21e      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800acb8:	2308      	movs	r3, #8
 800acba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acbe:	e21a      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800acc0:	2310      	movs	r3, #16
 800acc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acc6:	e216      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800acc8:	2320      	movs	r3, #32
 800acca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acce:	e212      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800acd0:	2340      	movs	r3, #64	; 0x40
 800acd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acd6:	e20e      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800acd8:	2380      	movs	r3, #128	; 0x80
 800acda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acde:	e20a      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a6b      	ldr	r2, [pc, #428]	; (800ae94 <UART_SetConfig+0x340>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d130      	bne.n	800ad4c <UART_SetConfig+0x1f8>
 800acea:	4b69      	ldr	r3, [pc, #420]	; (800ae90 <UART_SetConfig+0x33c>)
 800acec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acee:	f003 0307 	and.w	r3, r3, #7
 800acf2:	2b05      	cmp	r3, #5
 800acf4:	d826      	bhi.n	800ad44 <UART_SetConfig+0x1f0>
 800acf6:	a201      	add	r2, pc, #4	; (adr r2, 800acfc <UART_SetConfig+0x1a8>)
 800acf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acfc:	0800ad15 	.word	0x0800ad15
 800ad00:	0800ad1d 	.word	0x0800ad1d
 800ad04:	0800ad25 	.word	0x0800ad25
 800ad08:	0800ad2d 	.word	0x0800ad2d
 800ad0c:	0800ad35 	.word	0x0800ad35
 800ad10:	0800ad3d 	.word	0x0800ad3d
 800ad14:	2300      	movs	r3, #0
 800ad16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad1a:	e1ec      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ad1c:	2304      	movs	r3, #4
 800ad1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad22:	e1e8      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ad24:	2308      	movs	r3, #8
 800ad26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad2a:	e1e4      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ad2c:	2310      	movs	r3, #16
 800ad2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad32:	e1e0      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ad34:	2320      	movs	r3, #32
 800ad36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad3a:	e1dc      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ad3c:	2340      	movs	r3, #64	; 0x40
 800ad3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad42:	e1d8      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ad44:	2380      	movs	r3, #128	; 0x80
 800ad46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad4a:	e1d4      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a51      	ldr	r2, [pc, #324]	; (800ae98 <UART_SetConfig+0x344>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d130      	bne.n	800adb8 <UART_SetConfig+0x264>
 800ad56:	4b4e      	ldr	r3, [pc, #312]	; (800ae90 <UART_SetConfig+0x33c>)
 800ad58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad5a:	f003 0307 	and.w	r3, r3, #7
 800ad5e:	2b05      	cmp	r3, #5
 800ad60:	d826      	bhi.n	800adb0 <UART_SetConfig+0x25c>
 800ad62:	a201      	add	r2, pc, #4	; (adr r2, 800ad68 <UART_SetConfig+0x214>)
 800ad64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad68:	0800ad81 	.word	0x0800ad81
 800ad6c:	0800ad89 	.word	0x0800ad89
 800ad70:	0800ad91 	.word	0x0800ad91
 800ad74:	0800ad99 	.word	0x0800ad99
 800ad78:	0800ada1 	.word	0x0800ada1
 800ad7c:	0800ada9 	.word	0x0800ada9
 800ad80:	2300      	movs	r3, #0
 800ad82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad86:	e1b6      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ad88:	2304      	movs	r3, #4
 800ad8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad8e:	e1b2      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ad90:	2308      	movs	r3, #8
 800ad92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad96:	e1ae      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ad98:	2310      	movs	r3, #16
 800ad9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad9e:	e1aa      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ada0:	2320      	movs	r3, #32
 800ada2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ada6:	e1a6      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ada8:	2340      	movs	r3, #64	; 0x40
 800adaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adae:	e1a2      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800adb0:	2380      	movs	r3, #128	; 0x80
 800adb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adb6:	e19e      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a37      	ldr	r2, [pc, #220]	; (800ae9c <UART_SetConfig+0x348>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d130      	bne.n	800ae24 <UART_SetConfig+0x2d0>
 800adc2:	4b33      	ldr	r3, [pc, #204]	; (800ae90 <UART_SetConfig+0x33c>)
 800adc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc6:	f003 0307 	and.w	r3, r3, #7
 800adca:	2b05      	cmp	r3, #5
 800adcc:	d826      	bhi.n	800ae1c <UART_SetConfig+0x2c8>
 800adce:	a201      	add	r2, pc, #4	; (adr r2, 800add4 <UART_SetConfig+0x280>)
 800add0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add4:	0800aded 	.word	0x0800aded
 800add8:	0800adf5 	.word	0x0800adf5
 800addc:	0800adfd 	.word	0x0800adfd
 800ade0:	0800ae05 	.word	0x0800ae05
 800ade4:	0800ae0d 	.word	0x0800ae0d
 800ade8:	0800ae15 	.word	0x0800ae15
 800adec:	2300      	movs	r3, #0
 800adee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adf2:	e180      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800adf4:	2304      	movs	r3, #4
 800adf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adfa:	e17c      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800adfc:	2308      	movs	r3, #8
 800adfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae02:	e178      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ae04:	2310      	movs	r3, #16
 800ae06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae0a:	e174      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ae0c:	2320      	movs	r3, #32
 800ae0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae12:	e170      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ae14:	2340      	movs	r3, #64	; 0x40
 800ae16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae1a:	e16c      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ae1c:	2380      	movs	r3, #128	; 0x80
 800ae1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae22:	e168      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a1d      	ldr	r2, [pc, #116]	; (800aea0 <UART_SetConfig+0x34c>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d142      	bne.n	800aeb4 <UART_SetConfig+0x360>
 800ae2e:	4b18      	ldr	r3, [pc, #96]	; (800ae90 <UART_SetConfig+0x33c>)
 800ae30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae32:	f003 0307 	and.w	r3, r3, #7
 800ae36:	2b05      	cmp	r3, #5
 800ae38:	d838      	bhi.n	800aeac <UART_SetConfig+0x358>
 800ae3a:	a201      	add	r2, pc, #4	; (adr r2, 800ae40 <UART_SetConfig+0x2ec>)
 800ae3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae40:	0800ae59 	.word	0x0800ae59
 800ae44:	0800ae61 	.word	0x0800ae61
 800ae48:	0800ae69 	.word	0x0800ae69
 800ae4c:	0800ae71 	.word	0x0800ae71
 800ae50:	0800ae79 	.word	0x0800ae79
 800ae54:	0800aea5 	.word	0x0800aea5
 800ae58:	2300      	movs	r3, #0
 800ae5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae5e:	e14a      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ae60:	2304      	movs	r3, #4
 800ae62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae66:	e146      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ae68:	2308      	movs	r3, #8
 800ae6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae6e:	e142      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ae70:	2310      	movs	r3, #16
 800ae72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae76:	e13e      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ae78:	2320      	movs	r3, #32
 800ae7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae7e:	e13a      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800ae80:	cfff69f3 	.word	0xcfff69f3
 800ae84:	58000c00 	.word	0x58000c00
 800ae88:	11fff4ff 	.word	0x11fff4ff
 800ae8c:	40011000 	.word	0x40011000
 800ae90:	58024400 	.word	0x58024400
 800ae94:	40004400 	.word	0x40004400
 800ae98:	40004800 	.word	0x40004800
 800ae9c:	40004c00 	.word	0x40004c00
 800aea0:	40005000 	.word	0x40005000
 800aea4:	2340      	movs	r3, #64	; 0x40
 800aea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeaa:	e124      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800aeac:	2380      	movs	r3, #128	; 0x80
 800aeae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeb2:	e120      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4acc      	ldr	r2, [pc, #816]	; (800b1ec <UART_SetConfig+0x698>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d176      	bne.n	800afac <UART_SetConfig+0x458>
 800aebe:	4bcc      	ldr	r3, [pc, #816]	; (800b1f0 <UART_SetConfig+0x69c>)
 800aec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aec2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aec6:	2b28      	cmp	r3, #40	; 0x28
 800aec8:	d86c      	bhi.n	800afa4 <UART_SetConfig+0x450>
 800aeca:	a201      	add	r2, pc, #4	; (adr r2, 800aed0 <UART_SetConfig+0x37c>)
 800aecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed0:	0800af75 	.word	0x0800af75
 800aed4:	0800afa5 	.word	0x0800afa5
 800aed8:	0800afa5 	.word	0x0800afa5
 800aedc:	0800afa5 	.word	0x0800afa5
 800aee0:	0800afa5 	.word	0x0800afa5
 800aee4:	0800afa5 	.word	0x0800afa5
 800aee8:	0800afa5 	.word	0x0800afa5
 800aeec:	0800afa5 	.word	0x0800afa5
 800aef0:	0800af7d 	.word	0x0800af7d
 800aef4:	0800afa5 	.word	0x0800afa5
 800aef8:	0800afa5 	.word	0x0800afa5
 800aefc:	0800afa5 	.word	0x0800afa5
 800af00:	0800afa5 	.word	0x0800afa5
 800af04:	0800afa5 	.word	0x0800afa5
 800af08:	0800afa5 	.word	0x0800afa5
 800af0c:	0800afa5 	.word	0x0800afa5
 800af10:	0800af85 	.word	0x0800af85
 800af14:	0800afa5 	.word	0x0800afa5
 800af18:	0800afa5 	.word	0x0800afa5
 800af1c:	0800afa5 	.word	0x0800afa5
 800af20:	0800afa5 	.word	0x0800afa5
 800af24:	0800afa5 	.word	0x0800afa5
 800af28:	0800afa5 	.word	0x0800afa5
 800af2c:	0800afa5 	.word	0x0800afa5
 800af30:	0800af8d 	.word	0x0800af8d
 800af34:	0800afa5 	.word	0x0800afa5
 800af38:	0800afa5 	.word	0x0800afa5
 800af3c:	0800afa5 	.word	0x0800afa5
 800af40:	0800afa5 	.word	0x0800afa5
 800af44:	0800afa5 	.word	0x0800afa5
 800af48:	0800afa5 	.word	0x0800afa5
 800af4c:	0800afa5 	.word	0x0800afa5
 800af50:	0800af95 	.word	0x0800af95
 800af54:	0800afa5 	.word	0x0800afa5
 800af58:	0800afa5 	.word	0x0800afa5
 800af5c:	0800afa5 	.word	0x0800afa5
 800af60:	0800afa5 	.word	0x0800afa5
 800af64:	0800afa5 	.word	0x0800afa5
 800af68:	0800afa5 	.word	0x0800afa5
 800af6c:	0800afa5 	.word	0x0800afa5
 800af70:	0800af9d 	.word	0x0800af9d
 800af74:	2301      	movs	r3, #1
 800af76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af7a:	e0bc      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800af7c:	2304      	movs	r3, #4
 800af7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af82:	e0b8      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800af84:	2308      	movs	r3, #8
 800af86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af8a:	e0b4      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800af8c:	2310      	movs	r3, #16
 800af8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af92:	e0b0      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800af94:	2320      	movs	r3, #32
 800af96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af9a:	e0ac      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800af9c:	2340      	movs	r3, #64	; 0x40
 800af9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afa2:	e0a8      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800afa4:	2380      	movs	r3, #128	; 0x80
 800afa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afaa:	e0a4      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a90      	ldr	r2, [pc, #576]	; (800b1f4 <UART_SetConfig+0x6a0>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d130      	bne.n	800b018 <UART_SetConfig+0x4c4>
 800afb6:	4b8e      	ldr	r3, [pc, #568]	; (800b1f0 <UART_SetConfig+0x69c>)
 800afb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afba:	f003 0307 	and.w	r3, r3, #7
 800afbe:	2b05      	cmp	r3, #5
 800afc0:	d826      	bhi.n	800b010 <UART_SetConfig+0x4bc>
 800afc2:	a201      	add	r2, pc, #4	; (adr r2, 800afc8 <UART_SetConfig+0x474>)
 800afc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc8:	0800afe1 	.word	0x0800afe1
 800afcc:	0800afe9 	.word	0x0800afe9
 800afd0:	0800aff1 	.word	0x0800aff1
 800afd4:	0800aff9 	.word	0x0800aff9
 800afd8:	0800b001 	.word	0x0800b001
 800afdc:	0800b009 	.word	0x0800b009
 800afe0:	2300      	movs	r3, #0
 800afe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afe6:	e086      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800afe8:	2304      	movs	r3, #4
 800afea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afee:	e082      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800aff0:	2308      	movs	r3, #8
 800aff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aff6:	e07e      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800aff8:	2310      	movs	r3, #16
 800affa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800affe:	e07a      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800b000:	2320      	movs	r3, #32
 800b002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b006:	e076      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800b008:	2340      	movs	r3, #64	; 0x40
 800b00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b00e:	e072      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800b010:	2380      	movs	r3, #128	; 0x80
 800b012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b016:	e06e      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a76      	ldr	r2, [pc, #472]	; (800b1f8 <UART_SetConfig+0x6a4>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d130      	bne.n	800b084 <UART_SetConfig+0x530>
 800b022:	4b73      	ldr	r3, [pc, #460]	; (800b1f0 <UART_SetConfig+0x69c>)
 800b024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b026:	f003 0307 	and.w	r3, r3, #7
 800b02a:	2b05      	cmp	r3, #5
 800b02c:	d826      	bhi.n	800b07c <UART_SetConfig+0x528>
 800b02e:	a201      	add	r2, pc, #4	; (adr r2, 800b034 <UART_SetConfig+0x4e0>)
 800b030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b034:	0800b04d 	.word	0x0800b04d
 800b038:	0800b055 	.word	0x0800b055
 800b03c:	0800b05d 	.word	0x0800b05d
 800b040:	0800b065 	.word	0x0800b065
 800b044:	0800b06d 	.word	0x0800b06d
 800b048:	0800b075 	.word	0x0800b075
 800b04c:	2300      	movs	r3, #0
 800b04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b052:	e050      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800b054:	2304      	movs	r3, #4
 800b056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b05a:	e04c      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800b05c:	2308      	movs	r3, #8
 800b05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b062:	e048      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800b064:	2310      	movs	r3, #16
 800b066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b06a:	e044      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800b06c:	2320      	movs	r3, #32
 800b06e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b072:	e040      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800b074:	2340      	movs	r3, #64	; 0x40
 800b076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b07a:	e03c      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800b07c:	2380      	movs	r3, #128	; 0x80
 800b07e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b082:	e038      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a5c      	ldr	r2, [pc, #368]	; (800b1fc <UART_SetConfig+0x6a8>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d130      	bne.n	800b0f0 <UART_SetConfig+0x59c>
 800b08e:	4b58      	ldr	r3, [pc, #352]	; (800b1f0 <UART_SetConfig+0x69c>)
 800b090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b092:	f003 0307 	and.w	r3, r3, #7
 800b096:	2b05      	cmp	r3, #5
 800b098:	d826      	bhi.n	800b0e8 <UART_SetConfig+0x594>
 800b09a:	a201      	add	r2, pc, #4	; (adr r2, 800b0a0 <UART_SetConfig+0x54c>)
 800b09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a0:	0800b0b9 	.word	0x0800b0b9
 800b0a4:	0800b0c1 	.word	0x0800b0c1
 800b0a8:	0800b0c9 	.word	0x0800b0c9
 800b0ac:	0800b0d1 	.word	0x0800b0d1
 800b0b0:	0800b0d9 	.word	0x0800b0d9
 800b0b4:	0800b0e1 	.word	0x0800b0e1
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0be:	e01a      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800b0c0:	2304      	movs	r3, #4
 800b0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0c6:	e016      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800b0c8:	2308      	movs	r3, #8
 800b0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ce:	e012      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800b0d0:	2310      	movs	r3, #16
 800b0d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0d6:	e00e      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800b0d8:	2320      	movs	r3, #32
 800b0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0de:	e00a      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800b0e0:	2340      	movs	r3, #64	; 0x40
 800b0e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0e6:	e006      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800b0e8:	2380      	movs	r3, #128	; 0x80
 800b0ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ee:	e002      	b.n	800b0f6 <UART_SetConfig+0x5a2>
 800b0f0:	2380      	movs	r3, #128	; 0x80
 800b0f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a40      	ldr	r2, [pc, #256]	; (800b1fc <UART_SetConfig+0x6a8>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	f040 80ef 	bne.w	800b2e0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b102:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b106:	2b20      	cmp	r3, #32
 800b108:	dc46      	bgt.n	800b198 <UART_SetConfig+0x644>
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	f2c0 8081 	blt.w	800b212 <UART_SetConfig+0x6be>
 800b110:	3b02      	subs	r3, #2
 800b112:	2b1e      	cmp	r3, #30
 800b114:	d87d      	bhi.n	800b212 <UART_SetConfig+0x6be>
 800b116:	a201      	add	r2, pc, #4	; (adr r2, 800b11c <UART_SetConfig+0x5c8>)
 800b118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b11c:	0800b19f 	.word	0x0800b19f
 800b120:	0800b213 	.word	0x0800b213
 800b124:	0800b1a7 	.word	0x0800b1a7
 800b128:	0800b213 	.word	0x0800b213
 800b12c:	0800b213 	.word	0x0800b213
 800b130:	0800b213 	.word	0x0800b213
 800b134:	0800b1b7 	.word	0x0800b1b7
 800b138:	0800b213 	.word	0x0800b213
 800b13c:	0800b213 	.word	0x0800b213
 800b140:	0800b213 	.word	0x0800b213
 800b144:	0800b213 	.word	0x0800b213
 800b148:	0800b213 	.word	0x0800b213
 800b14c:	0800b213 	.word	0x0800b213
 800b150:	0800b213 	.word	0x0800b213
 800b154:	0800b1c7 	.word	0x0800b1c7
 800b158:	0800b213 	.word	0x0800b213
 800b15c:	0800b213 	.word	0x0800b213
 800b160:	0800b213 	.word	0x0800b213
 800b164:	0800b213 	.word	0x0800b213
 800b168:	0800b213 	.word	0x0800b213
 800b16c:	0800b213 	.word	0x0800b213
 800b170:	0800b213 	.word	0x0800b213
 800b174:	0800b213 	.word	0x0800b213
 800b178:	0800b213 	.word	0x0800b213
 800b17c:	0800b213 	.word	0x0800b213
 800b180:	0800b213 	.word	0x0800b213
 800b184:	0800b213 	.word	0x0800b213
 800b188:	0800b213 	.word	0x0800b213
 800b18c:	0800b213 	.word	0x0800b213
 800b190:	0800b213 	.word	0x0800b213
 800b194:	0800b205 	.word	0x0800b205
 800b198:	2b40      	cmp	r3, #64	; 0x40
 800b19a:	d036      	beq.n	800b20a <UART_SetConfig+0x6b6>
 800b19c:	e039      	b.n	800b212 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b19e:	f7fc ffdb 	bl	8008158 <HAL_RCCEx_GetD3PCLK1Freq>
 800b1a2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b1a4:	e03b      	b.n	800b21e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1a6:	f107 0314 	add.w	r3, r7, #20
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7fc ffea 	bl	8008184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1b0:	69bb      	ldr	r3, [r7, #24]
 800b1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1b4:	e033      	b.n	800b21e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1b6:	f107 0308 	add.w	r3, r7, #8
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fd f936 	bl	800842c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1c4:	e02b      	b.n	800b21e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1c6:	4b0a      	ldr	r3, [pc, #40]	; (800b1f0 <UART_SetConfig+0x69c>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f003 0320 	and.w	r3, r3, #32
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d009      	beq.n	800b1e6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b1d2:	4b07      	ldr	r3, [pc, #28]	; (800b1f0 <UART_SetConfig+0x69c>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	08db      	lsrs	r3, r3, #3
 800b1d8:	f003 0303 	and.w	r3, r3, #3
 800b1dc:	4a08      	ldr	r2, [pc, #32]	; (800b200 <UART_SetConfig+0x6ac>)
 800b1de:	fa22 f303 	lsr.w	r3, r2, r3
 800b1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b1e4:	e01b      	b.n	800b21e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800b1e6:	4b06      	ldr	r3, [pc, #24]	; (800b200 <UART_SetConfig+0x6ac>)
 800b1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b1ea:	e018      	b.n	800b21e <UART_SetConfig+0x6ca>
 800b1ec:	40011400 	.word	0x40011400
 800b1f0:	58024400 	.word	0x58024400
 800b1f4:	40007800 	.word	0x40007800
 800b1f8:	40007c00 	.word	0x40007c00
 800b1fc:	58000c00 	.word	0x58000c00
 800b200:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b204:	4bc4      	ldr	r3, [pc, #784]	; (800b518 <UART_SetConfig+0x9c4>)
 800b206:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b208:	e009      	b.n	800b21e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b20a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b20e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b210:	e005      	b.n	800b21e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800b212:	2300      	movs	r3, #0
 800b214:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b21c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b220:	2b00      	cmp	r3, #0
 800b222:	f000 81da 	beq.w	800b5da <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22a:	4abc      	ldr	r2, [pc, #752]	; (800b51c <UART_SetConfig+0x9c8>)
 800b22c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b230:	461a      	mov	r2, r3
 800b232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b234:	fbb3 f3f2 	udiv	r3, r3, r2
 800b238:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	4613      	mov	r3, r2
 800b240:	005b      	lsls	r3, r3, #1
 800b242:	4413      	add	r3, r2
 800b244:	6a3a      	ldr	r2, [r7, #32]
 800b246:	429a      	cmp	r2, r3
 800b248:	d305      	bcc.n	800b256 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b250:	6a3a      	ldr	r2, [r7, #32]
 800b252:	429a      	cmp	r2, r3
 800b254:	d903      	bls.n	800b25e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b25c:	e1bd      	b.n	800b5da <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b260:	4618      	mov	r0, r3
 800b262:	f04f 0100 	mov.w	r1, #0
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26a:	4aac      	ldr	r2, [pc, #688]	; (800b51c <UART_SetConfig+0x9c8>)
 800b26c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b270:	b29a      	uxth	r2, r3
 800b272:	f04f 0300 	mov.w	r3, #0
 800b276:	f7f5 f883 	bl	8000380 <__aeabi_uldivmod>
 800b27a:	4602      	mov	r2, r0
 800b27c:	460b      	mov	r3, r1
 800b27e:	4610      	mov	r0, r2
 800b280:	4619      	mov	r1, r3
 800b282:	f04f 0200 	mov.w	r2, #0
 800b286:	f04f 0300 	mov.w	r3, #0
 800b28a:	020b      	lsls	r3, r1, #8
 800b28c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b290:	0202      	lsls	r2, r0, #8
 800b292:	6879      	ldr	r1, [r7, #4]
 800b294:	6849      	ldr	r1, [r1, #4]
 800b296:	0849      	lsrs	r1, r1, #1
 800b298:	4608      	mov	r0, r1
 800b29a:	f04f 0100 	mov.w	r1, #0
 800b29e:	1814      	adds	r4, r2, r0
 800b2a0:	eb43 0501 	adc.w	r5, r3, r1
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	f04f 0300 	mov.w	r3, #0
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	f7f5 f865 	bl	8000380 <__aeabi_uldivmod>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2c4:	d308      	bcc.n	800b2d8 <UART_SetConfig+0x784>
 800b2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2cc:	d204      	bcs.n	800b2d8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2d4:	60da      	str	r2, [r3, #12]
 800b2d6:	e180      	b.n	800b5da <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b2de:	e17c      	b.n	800b5da <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	69db      	ldr	r3, [r3, #28]
 800b2e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2e8:	f040 80be 	bne.w	800b468 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800b2ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b2f0:	2b20      	cmp	r3, #32
 800b2f2:	dc49      	bgt.n	800b388 <UART_SetConfig+0x834>
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	db7c      	blt.n	800b3f2 <UART_SetConfig+0x89e>
 800b2f8:	2b20      	cmp	r3, #32
 800b2fa:	d87a      	bhi.n	800b3f2 <UART_SetConfig+0x89e>
 800b2fc:	a201      	add	r2, pc, #4	; (adr r2, 800b304 <UART_SetConfig+0x7b0>)
 800b2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b302:	bf00      	nop
 800b304:	0800b38f 	.word	0x0800b38f
 800b308:	0800b397 	.word	0x0800b397
 800b30c:	0800b3f3 	.word	0x0800b3f3
 800b310:	0800b3f3 	.word	0x0800b3f3
 800b314:	0800b39f 	.word	0x0800b39f
 800b318:	0800b3f3 	.word	0x0800b3f3
 800b31c:	0800b3f3 	.word	0x0800b3f3
 800b320:	0800b3f3 	.word	0x0800b3f3
 800b324:	0800b3af 	.word	0x0800b3af
 800b328:	0800b3f3 	.word	0x0800b3f3
 800b32c:	0800b3f3 	.word	0x0800b3f3
 800b330:	0800b3f3 	.word	0x0800b3f3
 800b334:	0800b3f3 	.word	0x0800b3f3
 800b338:	0800b3f3 	.word	0x0800b3f3
 800b33c:	0800b3f3 	.word	0x0800b3f3
 800b340:	0800b3f3 	.word	0x0800b3f3
 800b344:	0800b3bf 	.word	0x0800b3bf
 800b348:	0800b3f3 	.word	0x0800b3f3
 800b34c:	0800b3f3 	.word	0x0800b3f3
 800b350:	0800b3f3 	.word	0x0800b3f3
 800b354:	0800b3f3 	.word	0x0800b3f3
 800b358:	0800b3f3 	.word	0x0800b3f3
 800b35c:	0800b3f3 	.word	0x0800b3f3
 800b360:	0800b3f3 	.word	0x0800b3f3
 800b364:	0800b3f3 	.word	0x0800b3f3
 800b368:	0800b3f3 	.word	0x0800b3f3
 800b36c:	0800b3f3 	.word	0x0800b3f3
 800b370:	0800b3f3 	.word	0x0800b3f3
 800b374:	0800b3f3 	.word	0x0800b3f3
 800b378:	0800b3f3 	.word	0x0800b3f3
 800b37c:	0800b3f3 	.word	0x0800b3f3
 800b380:	0800b3f3 	.word	0x0800b3f3
 800b384:	0800b3e5 	.word	0x0800b3e5
 800b388:	2b40      	cmp	r3, #64	; 0x40
 800b38a:	d02e      	beq.n	800b3ea <UART_SetConfig+0x896>
 800b38c:	e031      	b.n	800b3f2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b38e:	f7fb fa63 	bl	8006858 <HAL_RCC_GetPCLK1Freq>
 800b392:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b394:	e033      	b.n	800b3fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b396:	f7fb fa75 	bl	8006884 <HAL_RCC_GetPCLK2Freq>
 800b39a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b39c:	e02f      	b.n	800b3fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b39e:	f107 0314 	add.w	r3, r7, #20
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fc feee 	bl	8008184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b3ac:	e027      	b.n	800b3fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3ae:	f107 0308 	add.w	r3, r7, #8
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7fd f83a 	bl	800842c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b3bc:	e01f      	b.n	800b3fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3be:	4b58      	ldr	r3, [pc, #352]	; (800b520 <UART_SetConfig+0x9cc>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f003 0320 	and.w	r3, r3, #32
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d009      	beq.n	800b3de <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b3ca:	4b55      	ldr	r3, [pc, #340]	; (800b520 <UART_SetConfig+0x9cc>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	08db      	lsrs	r3, r3, #3
 800b3d0:	f003 0303 	and.w	r3, r3, #3
 800b3d4:	4a53      	ldr	r2, [pc, #332]	; (800b524 <UART_SetConfig+0x9d0>)
 800b3d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b3da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b3dc:	e00f      	b.n	800b3fe <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800b3de:	4b51      	ldr	r3, [pc, #324]	; (800b524 <UART_SetConfig+0x9d0>)
 800b3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b3e2:	e00c      	b.n	800b3fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b3e4:	4b4c      	ldr	r3, [pc, #304]	; (800b518 <UART_SetConfig+0x9c4>)
 800b3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b3e8:	e009      	b.n	800b3fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b3f0:	e005      	b.n	800b3fe <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b3fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b400:	2b00      	cmp	r3, #0
 800b402:	f000 80ea 	beq.w	800b5da <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40a:	4a44      	ldr	r2, [pc, #272]	; (800b51c <UART_SetConfig+0x9c8>)
 800b40c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b410:	461a      	mov	r2, r3
 800b412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b414:	fbb3 f3f2 	udiv	r3, r3, r2
 800b418:	005a      	lsls	r2, r3, #1
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	085b      	lsrs	r3, r3, #1
 800b420:	441a      	add	r2, r3
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	fbb2 f3f3 	udiv	r3, r2, r3
 800b42a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b42e:	2b0f      	cmp	r3, #15
 800b430:	d916      	bls.n	800b460 <UART_SetConfig+0x90c>
 800b432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b438:	d212      	bcs.n	800b460 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	f023 030f 	bic.w	r3, r3, #15
 800b442:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b446:	085b      	lsrs	r3, r3, #1
 800b448:	b29b      	uxth	r3, r3
 800b44a:	f003 0307 	and.w	r3, r3, #7
 800b44e:	b29a      	uxth	r2, r3
 800b450:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b452:	4313      	orrs	r3, r2
 800b454:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b45c:	60da      	str	r2, [r3, #12]
 800b45e:	e0bc      	b.n	800b5da <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b460:	2301      	movs	r3, #1
 800b462:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b466:	e0b8      	b.n	800b5da <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b468:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b46c:	2b20      	cmp	r3, #32
 800b46e:	dc4b      	bgt.n	800b508 <UART_SetConfig+0x9b4>
 800b470:	2b00      	cmp	r3, #0
 800b472:	f2c0 8087 	blt.w	800b584 <UART_SetConfig+0xa30>
 800b476:	2b20      	cmp	r3, #32
 800b478:	f200 8084 	bhi.w	800b584 <UART_SetConfig+0xa30>
 800b47c:	a201      	add	r2, pc, #4	; (adr r2, 800b484 <UART_SetConfig+0x930>)
 800b47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b482:	bf00      	nop
 800b484:	0800b50f 	.word	0x0800b50f
 800b488:	0800b529 	.word	0x0800b529
 800b48c:	0800b585 	.word	0x0800b585
 800b490:	0800b585 	.word	0x0800b585
 800b494:	0800b531 	.word	0x0800b531
 800b498:	0800b585 	.word	0x0800b585
 800b49c:	0800b585 	.word	0x0800b585
 800b4a0:	0800b585 	.word	0x0800b585
 800b4a4:	0800b541 	.word	0x0800b541
 800b4a8:	0800b585 	.word	0x0800b585
 800b4ac:	0800b585 	.word	0x0800b585
 800b4b0:	0800b585 	.word	0x0800b585
 800b4b4:	0800b585 	.word	0x0800b585
 800b4b8:	0800b585 	.word	0x0800b585
 800b4bc:	0800b585 	.word	0x0800b585
 800b4c0:	0800b585 	.word	0x0800b585
 800b4c4:	0800b551 	.word	0x0800b551
 800b4c8:	0800b585 	.word	0x0800b585
 800b4cc:	0800b585 	.word	0x0800b585
 800b4d0:	0800b585 	.word	0x0800b585
 800b4d4:	0800b585 	.word	0x0800b585
 800b4d8:	0800b585 	.word	0x0800b585
 800b4dc:	0800b585 	.word	0x0800b585
 800b4e0:	0800b585 	.word	0x0800b585
 800b4e4:	0800b585 	.word	0x0800b585
 800b4e8:	0800b585 	.word	0x0800b585
 800b4ec:	0800b585 	.word	0x0800b585
 800b4f0:	0800b585 	.word	0x0800b585
 800b4f4:	0800b585 	.word	0x0800b585
 800b4f8:	0800b585 	.word	0x0800b585
 800b4fc:	0800b585 	.word	0x0800b585
 800b500:	0800b585 	.word	0x0800b585
 800b504:	0800b577 	.word	0x0800b577
 800b508:	2b40      	cmp	r3, #64	; 0x40
 800b50a:	d037      	beq.n	800b57c <UART_SetConfig+0xa28>
 800b50c:	e03a      	b.n	800b584 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b50e:	f7fb f9a3 	bl	8006858 <HAL_RCC_GetPCLK1Freq>
 800b512:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b514:	e03c      	b.n	800b590 <UART_SetConfig+0xa3c>
 800b516:	bf00      	nop
 800b518:	003d0900 	.word	0x003d0900
 800b51c:	0800f0a0 	.word	0x0800f0a0
 800b520:	58024400 	.word	0x58024400
 800b524:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b528:	f7fb f9ac 	bl	8006884 <HAL_RCC_GetPCLK2Freq>
 800b52c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b52e:	e02f      	b.n	800b590 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b530:	f107 0314 	add.w	r3, r7, #20
 800b534:	4618      	mov	r0, r3
 800b536:	f7fc fe25 	bl	8008184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b53e:	e027      	b.n	800b590 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b540:	f107 0308 	add.w	r3, r7, #8
 800b544:	4618      	mov	r0, r3
 800b546:	f7fc ff71 	bl	800842c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b54e:	e01f      	b.n	800b590 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b550:	4b2c      	ldr	r3, [pc, #176]	; (800b604 <UART_SetConfig+0xab0>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f003 0320 	and.w	r3, r3, #32
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d009      	beq.n	800b570 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b55c:	4b29      	ldr	r3, [pc, #164]	; (800b604 <UART_SetConfig+0xab0>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	08db      	lsrs	r3, r3, #3
 800b562:	f003 0303 	and.w	r3, r3, #3
 800b566:	4a28      	ldr	r2, [pc, #160]	; (800b608 <UART_SetConfig+0xab4>)
 800b568:	fa22 f303 	lsr.w	r3, r2, r3
 800b56c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b56e:	e00f      	b.n	800b590 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800b570:	4b25      	ldr	r3, [pc, #148]	; (800b608 <UART_SetConfig+0xab4>)
 800b572:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b574:	e00c      	b.n	800b590 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b576:	4b25      	ldr	r3, [pc, #148]	; (800b60c <UART_SetConfig+0xab8>)
 800b578:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b57a:	e009      	b.n	800b590 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b57c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b580:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b582:	e005      	b.n	800b590 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800b584:	2300      	movs	r3, #0
 800b586:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b588:	2301      	movs	r3, #1
 800b58a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b58e:	bf00      	nop
    }

    if (pclk != 0U)
 800b590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b592:	2b00      	cmp	r3, #0
 800b594:	d021      	beq.n	800b5da <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59a:	4a1d      	ldr	r2, [pc, #116]	; (800b610 <UART_SetConfig+0xabc>)
 800b59c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a4:	fbb3 f2f2 	udiv	r2, r3, r2
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	085b      	lsrs	r3, r3, #1
 800b5ae:	441a      	add	r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5b8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5bc:	2b0f      	cmp	r3, #15
 800b5be:	d909      	bls.n	800b5d4 <UART_SetConfig+0xa80>
 800b5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5c6:	d205      	bcs.n	800b5d4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ca:	b29a      	uxth	r2, r3
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	60da      	str	r2, [r3, #12]
 800b5d2:	e002      	b.n	800b5da <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2201      	movs	r2, #1
 800b5de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b5f6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3738      	adds	r7, #56	; 0x38
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bdb0      	pop	{r4, r5, r7, pc}
 800b602:	bf00      	nop
 800b604:	58024400 	.word	0x58024400
 800b608:	03d09000 	.word	0x03d09000
 800b60c:	003d0900 	.word	0x003d0900
 800b610:	0800f0a0 	.word	0x0800f0a0

0800b614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b620:	f003 0301 	and.w	r3, r3, #1
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00a      	beq.n	800b63e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	430a      	orrs	r2, r1
 800b63c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b642:	f003 0302 	and.w	r3, r3, #2
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00a      	beq.n	800b660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	430a      	orrs	r2, r1
 800b65e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b664:	f003 0304 	and.w	r3, r3, #4
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00a      	beq.n	800b682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	430a      	orrs	r2, r1
 800b680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b686:	f003 0308 	and.w	r3, r3, #8
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00a      	beq.n	800b6a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	430a      	orrs	r2, r1
 800b6a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6a8:	f003 0310 	and.w	r3, r3, #16
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d00a      	beq.n	800b6c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	430a      	orrs	r2, r1
 800b6c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ca:	f003 0320 	and.w	r3, r3, #32
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00a      	beq.n	800b6e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	430a      	orrs	r2, r1
 800b6e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d01a      	beq.n	800b72a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	430a      	orrs	r2, r1
 800b708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b70e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b712:	d10a      	bne.n	800b72a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	430a      	orrs	r2, r1
 800b728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b72e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b732:	2b00      	cmp	r3, #0
 800b734:	d00a      	beq.n	800b74c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	430a      	orrs	r2, r1
 800b74a:	605a      	str	r2, [r3, #4]
  }
}
 800b74c:	bf00      	nop
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b086      	sub	sp, #24
 800b75c:	af02      	add	r7, sp, #8
 800b75e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b768:	f7f8 fb98 	bl	8003e9c <HAL_GetTick>
 800b76c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f003 0308 	and.w	r3, r3, #8
 800b778:	2b08      	cmp	r3, #8
 800b77a:	d10e      	bne.n	800b79a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b77c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b780:	9300      	str	r3, [sp, #0]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2200      	movs	r2, #0
 800b786:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 f82f 	bl	800b7ee <UART_WaitOnFlagUntilTimeout>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b796:	2303      	movs	r3, #3
 800b798:	e025      	b.n	800b7e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f003 0304 	and.w	r3, r3, #4
 800b7a4:	2b04      	cmp	r3, #4
 800b7a6:	d10e      	bne.n	800b7c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b7ac:	9300      	str	r3, [sp, #0]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 f819 	bl	800b7ee <UART_WaitOnFlagUntilTimeout>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d001      	beq.n	800b7c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7c2:	2303      	movs	r3, #3
 800b7c4:	e00f      	b.n	800b7e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2220      	movs	r2, #32
 800b7ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2220      	movs	r2, #32
 800b7d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b09c      	sub	sp, #112	; 0x70
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	60f8      	str	r0, [r7, #12]
 800b7f6:	60b9      	str	r1, [r7, #8]
 800b7f8:	603b      	str	r3, [r7, #0]
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7fe:	e0a9      	b.n	800b954 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b806:	f000 80a5 	beq.w	800b954 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b80a:	f7f8 fb47 	bl	8003e9c <HAL_GetTick>
 800b80e:	4602      	mov	r2, r0
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	1ad3      	subs	r3, r2, r3
 800b814:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b816:	429a      	cmp	r2, r3
 800b818:	d302      	bcc.n	800b820 <UART_WaitOnFlagUntilTimeout+0x32>
 800b81a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d140      	bne.n	800b8a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b828:	e853 3f00 	ldrex	r3, [r3]
 800b82c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b82e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b830:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b834:	667b      	str	r3, [r7, #100]	; 0x64
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	461a      	mov	r2, r3
 800b83c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b83e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b840:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b842:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b844:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b846:	e841 2300 	strex	r3, r2, [r1]
 800b84a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b84c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d1e6      	bne.n	800b820 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	3308      	adds	r3, #8
 800b858:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b85c:	e853 3f00 	ldrex	r3, [r3]
 800b860:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b864:	f023 0301 	bic.w	r3, r3, #1
 800b868:	663b      	str	r3, [r7, #96]	; 0x60
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	3308      	adds	r3, #8
 800b870:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b872:	64ba      	str	r2, [r7, #72]	; 0x48
 800b874:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b876:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b878:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b87a:	e841 2300 	strex	r3, r2, [r1]
 800b87e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b882:	2b00      	cmp	r3, #0
 800b884:	d1e5      	bne.n	800b852 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2220      	movs	r2, #32
 800b88a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2220      	movs	r2, #32
 800b892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2200      	movs	r2, #0
 800b89a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b89e:	2303      	movs	r3, #3
 800b8a0:	e069      	b.n	800b976 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f003 0304 	and.w	r3, r3, #4
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d051      	beq.n	800b954 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	69db      	ldr	r3, [r3, #28]
 800b8b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8be:	d149      	bne.n	800b954 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b8c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d2:	e853 3f00 	ldrex	r3, [r3]
 800b8d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b8de:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8e8:	637b      	str	r3, [r7, #52]	; 0x34
 800b8ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b8ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8f0:	e841 2300 	strex	r3, r2, [r1]
 800b8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1e6      	bne.n	800b8ca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	3308      	adds	r3, #8
 800b902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	e853 3f00 	ldrex	r3, [r3]
 800b90a:	613b      	str	r3, [r7, #16]
   return(result);
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	f023 0301 	bic.w	r3, r3, #1
 800b912:	66bb      	str	r3, [r7, #104]	; 0x68
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	3308      	adds	r3, #8
 800b91a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b91c:	623a      	str	r2, [r7, #32]
 800b91e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b920:	69f9      	ldr	r1, [r7, #28]
 800b922:	6a3a      	ldr	r2, [r7, #32]
 800b924:	e841 2300 	strex	r3, r2, [r1]
 800b928:	61bb      	str	r3, [r7, #24]
   return(result);
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1e5      	bne.n	800b8fc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2220      	movs	r2, #32
 800b934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2220      	movs	r2, #32
 800b93c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2220      	movs	r2, #32
 800b944:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b950:	2303      	movs	r3, #3
 800b952:	e010      	b.n	800b976 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	69da      	ldr	r2, [r3, #28]
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	4013      	ands	r3, r2
 800b95e:	68ba      	ldr	r2, [r7, #8]
 800b960:	429a      	cmp	r2, r3
 800b962:	bf0c      	ite	eq
 800b964:	2301      	moveq	r3, #1
 800b966:	2300      	movne	r3, #0
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	461a      	mov	r2, r3
 800b96c:	79fb      	ldrb	r3, [r7, #7]
 800b96e:	429a      	cmp	r2, r3
 800b970:	f43f af46 	beq.w	800b800 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3770      	adds	r7, #112	; 0x70
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b97e:	b480      	push	{r7}
 800b980:	b085      	sub	sp, #20
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d101      	bne.n	800b994 <HAL_UARTEx_DisableFifoMode+0x16>
 800b990:	2302      	movs	r3, #2
 800b992:	e027      	b.n	800b9e4 <HAL_UARTEx_DisableFifoMode+0x66>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2201      	movs	r2, #1
 800b998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2224      	movs	r2, #36	; 0x24
 800b9a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f022 0201 	bic.w	r2, r2, #1
 800b9ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b9c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2220      	movs	r2, #32
 800b9d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b9e2:	2300      	movs	r3, #0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3714      	adds	r7, #20
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d101      	bne.n	800ba08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ba04:	2302      	movs	r3, #2
 800ba06:	e02d      	b.n	800ba64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2224      	movs	r2, #36	; 0x24
 800ba14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f022 0201 	bic.w	r2, r2, #1
 800ba2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	683a      	ldr	r2, [r7, #0]
 800ba40:	430a      	orrs	r2, r1
 800ba42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 f84f 	bl	800bae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	68fa      	ldr	r2, [r7, #12]
 800ba50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2220      	movs	r2, #32
 800ba56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d101      	bne.n	800ba84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba80:	2302      	movs	r3, #2
 800ba82:	e02d      	b.n	800bae0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2201      	movs	r2, #1
 800ba88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2224      	movs	r2, #36	; 0x24
 800ba90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f022 0201 	bic.w	r2, r2, #1
 800baaa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	689b      	ldr	r3, [r3, #8]
 800bab2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	683a      	ldr	r2, [r7, #0]
 800babc:	430a      	orrs	r2, r1
 800babe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 f811 	bl	800bae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	68fa      	ldr	r2, [r7, #12]
 800bacc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2220      	movs	r2, #32
 800bad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bae8:	b480      	push	{r7}
 800baea:	b085      	sub	sp, #20
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d108      	bne.n	800bb0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2201      	movs	r2, #1
 800bafc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb08:	e031      	b.n	800bb6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb0a:	2310      	movs	r3, #16
 800bb0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb0e:	2310      	movs	r3, #16
 800bb10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	0e5b      	lsrs	r3, r3, #25
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	f003 0307 	and.w	r3, r3, #7
 800bb20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	689b      	ldr	r3, [r3, #8]
 800bb28:	0f5b      	lsrs	r3, r3, #29
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	f003 0307 	and.w	r3, r3, #7
 800bb30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb32:	7bbb      	ldrb	r3, [r7, #14]
 800bb34:	7b3a      	ldrb	r2, [r7, #12]
 800bb36:	4911      	ldr	r1, [pc, #68]	; (800bb7c <UARTEx_SetNbDataToProcess+0x94>)
 800bb38:	5c8a      	ldrb	r2, [r1, r2]
 800bb3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb3e:	7b3a      	ldrb	r2, [r7, #12]
 800bb40:	490f      	ldr	r1, [pc, #60]	; (800bb80 <UARTEx_SetNbDataToProcess+0x98>)
 800bb42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb44:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb50:	7bfb      	ldrb	r3, [r7, #15]
 800bb52:	7b7a      	ldrb	r2, [r7, #13]
 800bb54:	4909      	ldr	r1, [pc, #36]	; (800bb7c <UARTEx_SetNbDataToProcess+0x94>)
 800bb56:	5c8a      	ldrb	r2, [r1, r2]
 800bb58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb5c:	7b7a      	ldrb	r2, [r7, #13]
 800bb5e:	4908      	ldr	r1, [pc, #32]	; (800bb80 <UARTEx_SetNbDataToProcess+0x98>)
 800bb60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb62:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bb6e:	bf00      	nop
 800bb70:	3714      	adds	r7, #20
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	0800f0b8 	.word	0x0800f0b8
 800bb80:	0800f0c0 	.word	0x0800f0c0

0800bb84 <__NVIC_SetPriority>:
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	6039      	str	r1, [r7, #0]
 800bb8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bb90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	db0a      	blt.n	800bbae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	b2da      	uxtb	r2, r3
 800bb9c:	490c      	ldr	r1, [pc, #48]	; (800bbd0 <__NVIC_SetPriority+0x4c>)
 800bb9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bba2:	0112      	lsls	r2, r2, #4
 800bba4:	b2d2      	uxtb	r2, r2
 800bba6:	440b      	add	r3, r1
 800bba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bbac:	e00a      	b.n	800bbc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	b2da      	uxtb	r2, r3
 800bbb2:	4908      	ldr	r1, [pc, #32]	; (800bbd4 <__NVIC_SetPriority+0x50>)
 800bbb4:	88fb      	ldrh	r3, [r7, #6]
 800bbb6:	f003 030f 	and.w	r3, r3, #15
 800bbba:	3b04      	subs	r3, #4
 800bbbc:	0112      	lsls	r2, r2, #4
 800bbbe:	b2d2      	uxtb	r2, r2
 800bbc0:	440b      	add	r3, r1
 800bbc2:	761a      	strb	r2, [r3, #24]
}
 800bbc4:	bf00      	nop
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr
 800bbd0:	e000e100 	.word	0xe000e100
 800bbd4:	e000ed00 	.word	0xe000ed00

0800bbd8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bbdc:	4b05      	ldr	r3, [pc, #20]	; (800bbf4 <SysTick_Handler+0x1c>)
 800bbde:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bbe0:	f001 fcfe 	bl	800d5e0 <xTaskGetSchedulerState>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d001      	beq.n	800bbee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bbea:	f002 fae5 	bl	800e1b8 <xPortSysTickHandler>
  }
}
 800bbee:	bf00      	nop
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	e000e010 	.word	0xe000e010

0800bbf8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bbfc:	2100      	movs	r1, #0
 800bbfe:	f06f 0004 	mvn.w	r0, #4
 800bc02:	f7ff ffbf 	bl	800bb84 <__NVIC_SetPriority>
#endif
}
 800bc06:	bf00      	nop
 800bc08:	bd80      	pop	{r7, pc}
	...

0800bc0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc12:	f3ef 8305 	mrs	r3, IPSR
 800bc16:	603b      	str	r3, [r7, #0]
  return(result);
 800bc18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d003      	beq.n	800bc26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bc1e:	f06f 0305 	mvn.w	r3, #5
 800bc22:	607b      	str	r3, [r7, #4]
 800bc24:	e00c      	b.n	800bc40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bc26:	4b0a      	ldr	r3, [pc, #40]	; (800bc50 <osKernelInitialize+0x44>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d105      	bne.n	800bc3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bc2e:	4b08      	ldr	r3, [pc, #32]	; (800bc50 <osKernelInitialize+0x44>)
 800bc30:	2201      	movs	r2, #1
 800bc32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bc34:	2300      	movs	r3, #0
 800bc36:	607b      	str	r3, [r7, #4]
 800bc38:	e002      	b.n	800bc40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bc3a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bc40:	687b      	ldr	r3, [r7, #4]
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop
 800bc50:	200002a0 	.word	0x200002a0

0800bc54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc5a:	f3ef 8305 	mrs	r3, IPSR
 800bc5e:	603b      	str	r3, [r7, #0]
  return(result);
 800bc60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d003      	beq.n	800bc6e <osKernelStart+0x1a>
    stat = osErrorISR;
 800bc66:	f06f 0305 	mvn.w	r3, #5
 800bc6a:	607b      	str	r3, [r7, #4]
 800bc6c:	e010      	b.n	800bc90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bc6e:	4b0b      	ldr	r3, [pc, #44]	; (800bc9c <osKernelStart+0x48>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d109      	bne.n	800bc8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bc76:	f7ff ffbf 	bl	800bbf8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bc7a:	4b08      	ldr	r3, [pc, #32]	; (800bc9c <osKernelStart+0x48>)
 800bc7c:	2202      	movs	r2, #2
 800bc7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bc80:	f001 f866 	bl	800cd50 <vTaskStartScheduler>
      stat = osOK;
 800bc84:	2300      	movs	r3, #0
 800bc86:	607b      	str	r3, [r7, #4]
 800bc88:	e002      	b.n	800bc90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bc8a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bc90:	687b      	ldr	r3, [r7, #4]
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3708      	adds	r7, #8
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	200002a0 	.word	0x200002a0

0800bca0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b08e      	sub	sp, #56	; 0x38
 800bca4:	af04      	add	r7, sp, #16
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bcac:	2300      	movs	r3, #0
 800bcae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcb0:	f3ef 8305 	mrs	r3, IPSR
 800bcb4:	617b      	str	r3, [r7, #20]
  return(result);
 800bcb6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d17e      	bne.n	800bdba <osThreadNew+0x11a>
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d07b      	beq.n	800bdba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bcc2:	2380      	movs	r3, #128	; 0x80
 800bcc4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bcc6:	2318      	movs	r3, #24
 800bcc8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bcca:	2300      	movs	r3, #0
 800bccc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bcce:	f04f 33ff 	mov.w	r3, #4294967295
 800bcd2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d045      	beq.n	800bd66 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d002      	beq.n	800bce8 <osThreadNew+0x48>
        name = attr->name;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	699b      	ldr	r3, [r3, #24]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d002      	beq.n	800bcf6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	699b      	ldr	r3, [r3, #24]
 800bcf4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d008      	beq.n	800bd0e <osThreadNew+0x6e>
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	2b38      	cmp	r3, #56	; 0x38
 800bd00:	d805      	bhi.n	800bd0e <osThreadNew+0x6e>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	f003 0301 	and.w	r3, r3, #1
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d001      	beq.n	800bd12 <osThreadNew+0x72>
        return (NULL);
 800bd0e:	2300      	movs	r3, #0
 800bd10:	e054      	b.n	800bdbc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	695b      	ldr	r3, [r3, #20]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d003      	beq.n	800bd22 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	695b      	ldr	r3, [r3, #20]
 800bd1e:	089b      	lsrs	r3, r3, #2
 800bd20:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00e      	beq.n	800bd48 <osThreadNew+0xa8>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	2b5b      	cmp	r3, #91	; 0x5b
 800bd30:	d90a      	bls.n	800bd48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d006      	beq.n	800bd48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	695b      	ldr	r3, [r3, #20]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d002      	beq.n	800bd48 <osThreadNew+0xa8>
        mem = 1;
 800bd42:	2301      	movs	r3, #1
 800bd44:	61bb      	str	r3, [r7, #24]
 800bd46:	e010      	b.n	800bd6a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10c      	bne.n	800bd6a <osThreadNew+0xca>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d108      	bne.n	800bd6a <osThreadNew+0xca>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d104      	bne.n	800bd6a <osThreadNew+0xca>
          mem = 0;
 800bd60:	2300      	movs	r3, #0
 800bd62:	61bb      	str	r3, [r7, #24]
 800bd64:	e001      	b.n	800bd6a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bd66:	2300      	movs	r3, #0
 800bd68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bd6a:	69bb      	ldr	r3, [r7, #24]
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d110      	bne.n	800bd92 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bd78:	9202      	str	r2, [sp, #8]
 800bd7a:	9301      	str	r3, [sp, #4]
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	6a3a      	ldr	r2, [r7, #32]
 800bd84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f000 fe0c 	bl	800c9a4 <xTaskCreateStatic>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	613b      	str	r3, [r7, #16]
 800bd90:	e013      	b.n	800bdba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d110      	bne.n	800bdba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bd98:	6a3b      	ldr	r3, [r7, #32]
 800bd9a:	b29a      	uxth	r2, r3
 800bd9c:	f107 0310 	add.w	r3, r7, #16
 800bda0:	9301      	str	r3, [sp, #4]
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f000 fe57 	bl	800ca5e <xTaskCreate>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d001      	beq.n	800bdba <osThreadNew+0x11a>
            hTask = NULL;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bdba:	693b      	ldr	r3, [r7, #16]
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3728      	adds	r7, #40	; 0x28
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdcc:	f3ef 8305 	mrs	r3, IPSR
 800bdd0:	60bb      	str	r3, [r7, #8]
  return(result);
 800bdd2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d003      	beq.n	800bde0 <osDelay+0x1c>
    stat = osErrorISR;
 800bdd8:	f06f 0305 	mvn.w	r3, #5
 800bddc:	60fb      	str	r3, [r7, #12]
 800bdde:	e007      	b.n	800bdf0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bde0:	2300      	movs	r3, #0
 800bde2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d002      	beq.n	800bdf0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 ff7c 	bl	800cce8 <vTaskDelay>
    }
  }

  return (stat);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3710      	adds	r7, #16
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
	...

0800bdfc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bdfc:	b480      	push	{r7}
 800bdfe:	b085      	sub	sp, #20
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	4a07      	ldr	r2, [pc, #28]	; (800be28 <vApplicationGetIdleTaskMemory+0x2c>)
 800be0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	4a06      	ldr	r2, [pc, #24]	; (800be2c <vApplicationGetIdleTaskMemory+0x30>)
 800be12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2280      	movs	r2, #128	; 0x80
 800be18:	601a      	str	r2, [r3, #0]
}
 800be1a:	bf00      	nop
 800be1c:	3714      	adds	r7, #20
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	200002a4 	.word	0x200002a4
 800be2c:	20000300 	.word	0x20000300

0800be30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800be30:	b480      	push	{r7}
 800be32:	b085      	sub	sp, #20
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	4a07      	ldr	r2, [pc, #28]	; (800be5c <vApplicationGetTimerTaskMemory+0x2c>)
 800be40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	4a06      	ldr	r2, [pc, #24]	; (800be60 <vApplicationGetTimerTaskMemory+0x30>)
 800be46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be4e:	601a      	str	r2, [r3, #0]
}
 800be50:	bf00      	nop
 800be52:	3714      	adds	r7, #20
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr
 800be5c:	20000500 	.word	0x20000500
 800be60:	2000055c 	.word	0x2000055c

0800be64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f103 0208 	add.w	r2, r3, #8
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f04f 32ff 	mov.w	r2, #4294967295
 800be7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f103 0208 	add.w	r2, r3, #8
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f103 0208 	add.w	r2, r3, #8
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2200      	movs	r2, #0
 800be96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800be98:	bf00      	nop
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800beb2:	bf00      	nop
 800beb4:	370c      	adds	r7, #12
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr

0800bebe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bebe:	b480      	push	{r7}
 800bec0:	b085      	sub	sp, #20
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
 800bec6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	68fa      	ldr	r2, [r7, #12]
 800bed2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	689a      	ldr	r2, [r3, #8]
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	683a      	ldr	r2, [r7, #0]
 800bee2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	683a      	ldr	r2, [r7, #0]
 800bee8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	1c5a      	adds	r2, r3, #1
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	601a      	str	r2, [r3, #0]
}
 800befa:	bf00      	nop
 800befc:	3714      	adds	r7, #20
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr

0800bf06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf06:	b480      	push	{r7}
 800bf08:	b085      	sub	sp, #20
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
 800bf0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf1c:	d103      	bne.n	800bf26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	60fb      	str	r3, [r7, #12]
 800bf24:	e00c      	b.n	800bf40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	3308      	adds	r3, #8
 800bf2a:	60fb      	str	r3, [r7, #12]
 800bf2c:	e002      	b.n	800bf34 <vListInsert+0x2e>
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	60fb      	str	r3, [r7, #12]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	68ba      	ldr	r2, [r7, #8]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d2f6      	bcs.n	800bf2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	685a      	ldr	r2, [r3, #4]
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	683a      	ldr	r2, [r7, #0]
 800bf4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	68fa      	ldr	r2, [r7, #12]
 800bf54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	683a      	ldr	r2, [r7, #0]
 800bf5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	1c5a      	adds	r2, r3, #1
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	601a      	str	r2, [r3, #0]
}
 800bf6c:	bf00      	nop
 800bf6e:	3714      	adds	r7, #20
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	691b      	ldr	r3, [r3, #16]
 800bf84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	6892      	ldr	r2, [r2, #8]
 800bf8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	6852      	ldr	r2, [r2, #4]
 800bf98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d103      	bne.n	800bfac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	689a      	ldr	r2, [r3, #8]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	1e5a      	subs	r2, r3, #1
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3714      	adds	r7, #20
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d10a      	bne.n	800bff6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe4:	f383 8811 	msr	BASEPRI, r3
 800bfe8:	f3bf 8f6f 	isb	sy
 800bfec:	f3bf 8f4f 	dsb	sy
 800bff0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bff2:	bf00      	nop
 800bff4:	e7fe      	b.n	800bff4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bff6:	f002 f84d 	bl	800e094 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c002:	68f9      	ldr	r1, [r7, #12]
 800c004:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c006:	fb01 f303 	mul.w	r3, r1, r3
 800c00a:	441a      	add	r2, r3
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2200      	movs	r2, #0
 800c014:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c026:	3b01      	subs	r3, #1
 800c028:	68f9      	ldr	r1, [r7, #12]
 800c02a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c02c:	fb01 f303 	mul.w	r3, r1, r3
 800c030:	441a      	add	r2, r3
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	22ff      	movs	r2, #255	; 0xff
 800c03a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	22ff      	movs	r2, #255	; 0xff
 800c042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d114      	bne.n	800c076 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	691b      	ldr	r3, [r3, #16]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d01a      	beq.n	800c08a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	3310      	adds	r3, #16
 800c058:	4618      	mov	r0, r3
 800c05a:	f001 f903 	bl	800d264 <xTaskRemoveFromEventList>
 800c05e:	4603      	mov	r3, r0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d012      	beq.n	800c08a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c064:	4b0c      	ldr	r3, [pc, #48]	; (800c098 <xQueueGenericReset+0xcc>)
 800c066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c06a:	601a      	str	r2, [r3, #0]
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	f3bf 8f6f 	isb	sy
 800c074:	e009      	b.n	800c08a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	3310      	adds	r3, #16
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7ff fef2 	bl	800be64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	3324      	adds	r3, #36	; 0x24
 800c084:	4618      	mov	r0, r3
 800c086:	f7ff feed 	bl	800be64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c08a:	f002 f833 	bl	800e0f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c08e:	2301      	movs	r3, #1
}
 800c090:	4618      	mov	r0, r3
 800c092:	3710      	adds	r7, #16
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	e000ed04 	.word	0xe000ed04

0800c09c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b08e      	sub	sp, #56	; 0x38
 800c0a0:	af02      	add	r7, sp, #8
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	607a      	str	r2, [r7, #4]
 800c0a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d10a      	bne.n	800c0c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b4:	f383 8811 	msr	BASEPRI, r3
 800c0b8:	f3bf 8f6f 	isb	sy
 800c0bc:	f3bf 8f4f 	dsb	sy
 800c0c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c0c2:	bf00      	nop
 800c0c4:	e7fe      	b.n	800c0c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d10a      	bne.n	800c0e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c0de:	bf00      	nop
 800c0e0:	e7fe      	b.n	800c0e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d002      	beq.n	800c0ee <xQueueGenericCreateStatic+0x52>
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d001      	beq.n	800c0f2 <xQueueGenericCreateStatic+0x56>
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	e000      	b.n	800c0f4 <xQueueGenericCreateStatic+0x58>
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d10a      	bne.n	800c10e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fc:	f383 8811 	msr	BASEPRI, r3
 800c100:	f3bf 8f6f 	isb	sy
 800c104:	f3bf 8f4f 	dsb	sy
 800c108:	623b      	str	r3, [r7, #32]
}
 800c10a:	bf00      	nop
 800c10c:	e7fe      	b.n	800c10c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d102      	bne.n	800c11a <xQueueGenericCreateStatic+0x7e>
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d101      	bne.n	800c11e <xQueueGenericCreateStatic+0x82>
 800c11a:	2301      	movs	r3, #1
 800c11c:	e000      	b.n	800c120 <xQueueGenericCreateStatic+0x84>
 800c11e:	2300      	movs	r3, #0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d10a      	bne.n	800c13a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c128:	f383 8811 	msr	BASEPRI, r3
 800c12c:	f3bf 8f6f 	isb	sy
 800c130:	f3bf 8f4f 	dsb	sy
 800c134:	61fb      	str	r3, [r7, #28]
}
 800c136:	bf00      	nop
 800c138:	e7fe      	b.n	800c138 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c13a:	2350      	movs	r3, #80	; 0x50
 800c13c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	2b50      	cmp	r3, #80	; 0x50
 800c142:	d00a      	beq.n	800c15a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c148:	f383 8811 	msr	BASEPRI, r3
 800c14c:	f3bf 8f6f 	isb	sy
 800c150:	f3bf 8f4f 	dsb	sy
 800c154:	61bb      	str	r3, [r7, #24]
}
 800c156:	bf00      	nop
 800c158:	e7fe      	b.n	800c158 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c15a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c162:	2b00      	cmp	r3, #0
 800c164:	d00d      	beq.n	800c182 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c168:	2201      	movs	r2, #1
 800c16a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c16e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	4613      	mov	r3, r2
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	68b9      	ldr	r1, [r7, #8]
 800c17c:	68f8      	ldr	r0, [r7, #12]
 800c17e:	f000 f805 	bl	800c18c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c184:	4618      	mov	r0, r3
 800c186:	3730      	adds	r7, #48	; 0x30
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
 800c198:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d103      	bne.n	800c1a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	69ba      	ldr	r2, [r7, #24]
 800c1a4:	601a      	str	r2, [r3, #0]
 800c1a6:	e002      	b.n	800c1ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c1a8:	69bb      	ldr	r3, [r7, #24]
 800c1aa:	687a      	ldr	r2, [r7, #4]
 800c1ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	68fa      	ldr	r2, [r7, #12]
 800c1b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c1b4:	69bb      	ldr	r3, [r7, #24]
 800c1b6:	68ba      	ldr	r2, [r7, #8]
 800c1b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c1ba:	2101      	movs	r1, #1
 800c1bc:	69b8      	ldr	r0, [r7, #24]
 800c1be:	f7ff ff05 	bl	800bfcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	78fa      	ldrb	r2, [r7, #3]
 800c1c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c1ca:	bf00      	nop
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
	...

0800c1d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b08e      	sub	sp, #56	; 0x38
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	607a      	str	r2, [r7, #4]
 800c1e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d10a      	bne.n	800c206 <xQueueGenericSend+0x32>
	__asm volatile
 800c1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f4:	f383 8811 	msr	BASEPRI, r3
 800c1f8:	f3bf 8f6f 	isb	sy
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c202:	bf00      	nop
 800c204:	e7fe      	b.n	800c204 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d103      	bne.n	800c214 <xQueueGenericSend+0x40>
 800c20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c210:	2b00      	cmp	r3, #0
 800c212:	d101      	bne.n	800c218 <xQueueGenericSend+0x44>
 800c214:	2301      	movs	r3, #1
 800c216:	e000      	b.n	800c21a <xQueueGenericSend+0x46>
 800c218:	2300      	movs	r3, #0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d10a      	bne.n	800c234 <xQueueGenericSend+0x60>
	__asm volatile
 800c21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c222:	f383 8811 	msr	BASEPRI, r3
 800c226:	f3bf 8f6f 	isb	sy
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c230:	bf00      	nop
 800c232:	e7fe      	b.n	800c232 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	2b02      	cmp	r3, #2
 800c238:	d103      	bne.n	800c242 <xQueueGenericSend+0x6e>
 800c23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c23e:	2b01      	cmp	r3, #1
 800c240:	d101      	bne.n	800c246 <xQueueGenericSend+0x72>
 800c242:	2301      	movs	r3, #1
 800c244:	e000      	b.n	800c248 <xQueueGenericSend+0x74>
 800c246:	2300      	movs	r3, #0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10a      	bne.n	800c262 <xQueueGenericSend+0x8e>
	__asm volatile
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	623b      	str	r3, [r7, #32]
}
 800c25e:	bf00      	nop
 800c260:	e7fe      	b.n	800c260 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c262:	f001 f9bd 	bl	800d5e0 <xTaskGetSchedulerState>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d102      	bne.n	800c272 <xQueueGenericSend+0x9e>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d101      	bne.n	800c276 <xQueueGenericSend+0xa2>
 800c272:	2301      	movs	r3, #1
 800c274:	e000      	b.n	800c278 <xQueueGenericSend+0xa4>
 800c276:	2300      	movs	r3, #0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d10a      	bne.n	800c292 <xQueueGenericSend+0xbe>
	__asm volatile
 800c27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c280:	f383 8811 	msr	BASEPRI, r3
 800c284:	f3bf 8f6f 	isb	sy
 800c288:	f3bf 8f4f 	dsb	sy
 800c28c:	61fb      	str	r3, [r7, #28]
}
 800c28e:	bf00      	nop
 800c290:	e7fe      	b.n	800c290 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c292:	f001 feff 	bl	800e094 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d302      	bcc.n	800c2a8 <xQueueGenericSend+0xd4>
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	2b02      	cmp	r3, #2
 800c2a6:	d129      	bne.n	800c2fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c2a8:	683a      	ldr	r2, [r7, #0]
 800c2aa:	68b9      	ldr	r1, [r7, #8]
 800c2ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2ae:	f000 fa0b 	bl	800c6c8 <prvCopyDataToQueue>
 800c2b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d010      	beq.n	800c2de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2be:	3324      	adds	r3, #36	; 0x24
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f000 ffcf 	bl	800d264 <xTaskRemoveFromEventList>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d013      	beq.n	800c2f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c2cc:	4b3f      	ldr	r3, [pc, #252]	; (800c3cc <xQueueGenericSend+0x1f8>)
 800c2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2d2:	601a      	str	r2, [r3, #0]
 800c2d4:	f3bf 8f4f 	dsb	sy
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	e00a      	b.n	800c2f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d007      	beq.n	800c2f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c2e4:	4b39      	ldr	r3, [pc, #228]	; (800c3cc <xQueueGenericSend+0x1f8>)
 800c2e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2ea:	601a      	str	r2, [r3, #0]
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c2f4:	f001 fefe 	bl	800e0f4 <vPortExitCritical>
				return pdPASS;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e063      	b.n	800c3c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d103      	bne.n	800c30a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c302:	f001 fef7 	bl	800e0f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c306:	2300      	movs	r3, #0
 800c308:	e05c      	b.n	800c3c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c30a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d106      	bne.n	800c31e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c310:	f107 0314 	add.w	r3, r7, #20
 800c314:	4618      	mov	r0, r3
 800c316:	f001 f809 	bl	800d32c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c31a:	2301      	movs	r3, #1
 800c31c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c31e:	f001 fee9 	bl	800e0f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c322:	f000 fd7b 	bl	800ce1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c326:	f001 feb5 	bl	800e094 <vPortEnterCritical>
 800c32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c330:	b25b      	sxtb	r3, r3
 800c332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c336:	d103      	bne.n	800c340 <xQueueGenericSend+0x16c>
 800c338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33a:	2200      	movs	r2, #0
 800c33c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c342:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c346:	b25b      	sxtb	r3, r3
 800c348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c34c:	d103      	bne.n	800c356 <xQueueGenericSend+0x182>
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	2200      	movs	r2, #0
 800c352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c356:	f001 fecd 	bl	800e0f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c35a:	1d3a      	adds	r2, r7, #4
 800c35c:	f107 0314 	add.w	r3, r7, #20
 800c360:	4611      	mov	r1, r2
 800c362:	4618      	mov	r0, r3
 800c364:	f000 fff8 	bl	800d358 <xTaskCheckForTimeOut>
 800c368:	4603      	mov	r3, r0
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d124      	bne.n	800c3b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c36e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c370:	f000 faa2 	bl	800c8b8 <prvIsQueueFull>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d018      	beq.n	800c3ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37c:	3310      	adds	r3, #16
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	4611      	mov	r1, r2
 800c382:	4618      	mov	r0, r3
 800c384:	f000 ff1e 	bl	800d1c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c38a:	f000 fa2d 	bl	800c7e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c38e:	f000 fd53 	bl	800ce38 <xTaskResumeAll>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	f47f af7c 	bne.w	800c292 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c39a:	4b0c      	ldr	r3, [pc, #48]	; (800c3cc <xQueueGenericSend+0x1f8>)
 800c39c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3a0:	601a      	str	r2, [r3, #0]
 800c3a2:	f3bf 8f4f 	dsb	sy
 800c3a6:	f3bf 8f6f 	isb	sy
 800c3aa:	e772      	b.n	800c292 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c3ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3ae:	f000 fa1b 	bl	800c7e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3b2:	f000 fd41 	bl	800ce38 <xTaskResumeAll>
 800c3b6:	e76c      	b.n	800c292 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c3b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3ba:	f000 fa15 	bl	800c7e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c3be:	f000 fd3b 	bl	800ce38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c3c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3738      	adds	r7, #56	; 0x38
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	e000ed04 	.word	0xe000ed04

0800c3d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b090      	sub	sp, #64	; 0x40
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	60b9      	str	r1, [r7, #8]
 800c3da:	607a      	str	r2, [r7, #4]
 800c3dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d10a      	bne.n	800c3fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ec:	f383 8811 	msr	BASEPRI, r3
 800c3f0:	f3bf 8f6f 	isb	sy
 800c3f4:	f3bf 8f4f 	dsb	sy
 800c3f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c3fa:	bf00      	nop
 800c3fc:	e7fe      	b.n	800c3fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d103      	bne.n	800c40c <xQueueGenericSendFromISR+0x3c>
 800c404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d101      	bne.n	800c410 <xQueueGenericSendFromISR+0x40>
 800c40c:	2301      	movs	r3, #1
 800c40e:	e000      	b.n	800c412 <xQueueGenericSendFromISR+0x42>
 800c410:	2300      	movs	r3, #0
 800c412:	2b00      	cmp	r3, #0
 800c414:	d10a      	bne.n	800c42c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41a:	f383 8811 	msr	BASEPRI, r3
 800c41e:	f3bf 8f6f 	isb	sy
 800c422:	f3bf 8f4f 	dsb	sy
 800c426:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c428:	bf00      	nop
 800c42a:	e7fe      	b.n	800c42a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	2b02      	cmp	r3, #2
 800c430:	d103      	bne.n	800c43a <xQueueGenericSendFromISR+0x6a>
 800c432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c436:	2b01      	cmp	r3, #1
 800c438:	d101      	bne.n	800c43e <xQueueGenericSendFromISR+0x6e>
 800c43a:	2301      	movs	r3, #1
 800c43c:	e000      	b.n	800c440 <xQueueGenericSendFromISR+0x70>
 800c43e:	2300      	movs	r3, #0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d10a      	bne.n	800c45a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c448:	f383 8811 	msr	BASEPRI, r3
 800c44c:	f3bf 8f6f 	isb	sy
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	623b      	str	r3, [r7, #32]
}
 800c456:	bf00      	nop
 800c458:	e7fe      	b.n	800c458 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c45a:	f001 fefd 	bl	800e258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c45e:	f3ef 8211 	mrs	r2, BASEPRI
 800c462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c466:	f383 8811 	msr	BASEPRI, r3
 800c46a:	f3bf 8f6f 	isb	sy
 800c46e:	f3bf 8f4f 	dsb	sy
 800c472:	61fa      	str	r2, [r7, #28]
 800c474:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c476:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c478:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c482:	429a      	cmp	r2, r3
 800c484:	d302      	bcc.n	800c48c <xQueueGenericSendFromISR+0xbc>
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d12f      	bne.n	800c4ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c49a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c49c:	683a      	ldr	r2, [r7, #0]
 800c49e:	68b9      	ldr	r1, [r7, #8]
 800c4a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c4a2:	f000 f911 	bl	800c6c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c4a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ae:	d112      	bne.n	800c4d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d016      	beq.n	800c4e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ba:	3324      	adds	r3, #36	; 0x24
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f000 fed1 	bl	800d264 <xTaskRemoveFromEventList>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d00e      	beq.n	800c4e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d00b      	beq.n	800c4e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	601a      	str	r2, [r3, #0]
 800c4d4:	e007      	b.n	800c4e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c4d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c4da:	3301      	adds	r3, #1
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	b25a      	sxtb	r2, r3
 800c4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c4ea:	e001      	b.n	800c4f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c4fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c4fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3740      	adds	r7, #64	; 0x40
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
	...

0800c508 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b08c      	sub	sp, #48	; 0x30
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c514:	2300      	movs	r3, #0
 800c516:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10a      	bne.n	800c538 <xQueueReceive+0x30>
	__asm volatile
 800c522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c526:	f383 8811 	msr	BASEPRI, r3
 800c52a:	f3bf 8f6f 	isb	sy
 800c52e:	f3bf 8f4f 	dsb	sy
 800c532:	623b      	str	r3, [r7, #32]
}
 800c534:	bf00      	nop
 800c536:	e7fe      	b.n	800c536 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d103      	bne.n	800c546 <xQueueReceive+0x3e>
 800c53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c542:	2b00      	cmp	r3, #0
 800c544:	d101      	bne.n	800c54a <xQueueReceive+0x42>
 800c546:	2301      	movs	r3, #1
 800c548:	e000      	b.n	800c54c <xQueueReceive+0x44>
 800c54a:	2300      	movs	r3, #0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d10a      	bne.n	800c566 <xQueueReceive+0x5e>
	__asm volatile
 800c550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c554:	f383 8811 	msr	BASEPRI, r3
 800c558:	f3bf 8f6f 	isb	sy
 800c55c:	f3bf 8f4f 	dsb	sy
 800c560:	61fb      	str	r3, [r7, #28]
}
 800c562:	bf00      	nop
 800c564:	e7fe      	b.n	800c564 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c566:	f001 f83b 	bl	800d5e0 <xTaskGetSchedulerState>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d102      	bne.n	800c576 <xQueueReceive+0x6e>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d101      	bne.n	800c57a <xQueueReceive+0x72>
 800c576:	2301      	movs	r3, #1
 800c578:	e000      	b.n	800c57c <xQueueReceive+0x74>
 800c57a:	2300      	movs	r3, #0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d10a      	bne.n	800c596 <xQueueReceive+0x8e>
	__asm volatile
 800c580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	61bb      	str	r3, [r7, #24]
}
 800c592:	bf00      	nop
 800c594:	e7fe      	b.n	800c594 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c596:	f001 fd7d 	bl	800e094 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c59e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d01f      	beq.n	800c5e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c5a6:	68b9      	ldr	r1, [r7, #8]
 800c5a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5aa:	f000 f8f7 	bl	800c79c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b0:	1e5a      	subs	r2, r3, #1
 800c5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b8:	691b      	ldr	r3, [r3, #16]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00f      	beq.n	800c5de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c0:	3310      	adds	r3, #16
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f000 fe4e 	bl	800d264 <xTaskRemoveFromEventList>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d007      	beq.n	800c5de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c5ce:	4b3d      	ldr	r3, [pc, #244]	; (800c6c4 <xQueueReceive+0x1bc>)
 800c5d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5d4:	601a      	str	r2, [r3, #0]
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c5de:	f001 fd89 	bl	800e0f4 <vPortExitCritical>
				return pdPASS;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e069      	b.n	800c6ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d103      	bne.n	800c5f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c5ec:	f001 fd82 	bl	800e0f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	e062      	b.n	800c6ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d106      	bne.n	800c608 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c5fa:	f107 0310 	add.w	r3, r7, #16
 800c5fe:	4618      	mov	r0, r3
 800c600:	f000 fe94 	bl	800d32c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c604:	2301      	movs	r3, #1
 800c606:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c608:	f001 fd74 	bl	800e0f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c60c:	f000 fc06 	bl	800ce1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c610:	f001 fd40 	bl	800e094 <vPortEnterCritical>
 800c614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c616:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c61a:	b25b      	sxtb	r3, r3
 800c61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c620:	d103      	bne.n	800c62a <xQueueReceive+0x122>
 800c622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c624:	2200      	movs	r2, #0
 800c626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c630:	b25b      	sxtb	r3, r3
 800c632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c636:	d103      	bne.n	800c640 <xQueueReceive+0x138>
 800c638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63a:	2200      	movs	r2, #0
 800c63c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c640:	f001 fd58 	bl	800e0f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c644:	1d3a      	adds	r2, r7, #4
 800c646:	f107 0310 	add.w	r3, r7, #16
 800c64a:	4611      	mov	r1, r2
 800c64c:	4618      	mov	r0, r3
 800c64e:	f000 fe83 	bl	800d358 <xTaskCheckForTimeOut>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d123      	bne.n	800c6a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c65a:	f000 f917 	bl	800c88c <prvIsQueueEmpty>
 800c65e:	4603      	mov	r3, r0
 800c660:	2b00      	cmp	r3, #0
 800c662:	d017      	beq.n	800c694 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c666:	3324      	adds	r3, #36	; 0x24
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	4611      	mov	r1, r2
 800c66c:	4618      	mov	r0, r3
 800c66e:	f000 fda9 	bl	800d1c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c674:	f000 f8b8 	bl	800c7e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c678:	f000 fbde 	bl	800ce38 <xTaskResumeAll>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d189      	bne.n	800c596 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c682:	4b10      	ldr	r3, [pc, #64]	; (800c6c4 <xQueueReceive+0x1bc>)
 800c684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c688:	601a      	str	r2, [r3, #0]
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	f3bf 8f6f 	isb	sy
 800c692:	e780      	b.n	800c596 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c696:	f000 f8a7 	bl	800c7e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c69a:	f000 fbcd 	bl	800ce38 <xTaskResumeAll>
 800c69e:	e77a      	b.n	800c596 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c6a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6a2:	f000 f8a1 	bl	800c7e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6a6:	f000 fbc7 	bl	800ce38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6ac:	f000 f8ee 	bl	800c88c <prvIsQueueEmpty>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	f43f af6f 	beq.w	800c596 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c6b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3730      	adds	r7, #48	; 0x30
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	e000ed04 	.word	0xe000ed04

0800c6c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b086      	sub	sp, #24
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d10d      	bne.n	800c702 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d14d      	bne.n	800c78a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	689b      	ldr	r3, [r3, #8]
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f000 ff92 	bl	800d61c <xTaskPriorityDisinherit>
 800c6f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	609a      	str	r2, [r3, #8]
 800c700:	e043      	b.n	800c78a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d119      	bne.n	800c73c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	6858      	ldr	r0, [r3, #4]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c710:	461a      	mov	r2, r3
 800c712:	68b9      	ldr	r1, [r7, #8]
 800c714:	f001 fff4 	bl	800e700 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	685a      	ldr	r2, [r3, #4]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c720:	441a      	add	r2, r3
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	685a      	ldr	r2, [r3, #4]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	689b      	ldr	r3, [r3, #8]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d32b      	bcc.n	800c78a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	605a      	str	r2, [r3, #4]
 800c73a:	e026      	b.n	800c78a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	68d8      	ldr	r0, [r3, #12]
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c744:	461a      	mov	r2, r3
 800c746:	68b9      	ldr	r1, [r7, #8]
 800c748:	f001 ffda 	bl	800e700 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	68da      	ldr	r2, [r3, #12]
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c754:	425b      	negs	r3, r3
 800c756:	441a      	add	r2, r3
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	68da      	ldr	r2, [r3, #12]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	429a      	cmp	r2, r3
 800c766:	d207      	bcs.n	800c778 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	689a      	ldr	r2, [r3, #8]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c770:	425b      	negs	r3, r3
 800c772:	441a      	add	r2, r3
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2b02      	cmp	r3, #2
 800c77c:	d105      	bne.n	800c78a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d002      	beq.n	800c78a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	3b01      	subs	r3, #1
 800c788:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	1c5a      	adds	r2, r3, #1
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c792:	697b      	ldr	r3, [r7, #20]
}
 800c794:	4618      	mov	r0, r3
 800c796:	3718      	adds	r7, #24
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d018      	beq.n	800c7e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	68da      	ldr	r2, [r3, #12]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7b6:	441a      	add	r2, r3
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	68da      	ldr	r2, [r3, #12]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	689b      	ldr	r3, [r3, #8]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d303      	bcc.n	800c7d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	68d9      	ldr	r1, [r3, #12]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d8:	461a      	mov	r2, r3
 800c7da:	6838      	ldr	r0, [r7, #0]
 800c7dc:	f001 ff90 	bl	800e700 <memcpy>
	}
}
 800c7e0:	bf00      	nop
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c7f0:	f001 fc50 	bl	800e094 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7fc:	e011      	b.n	800c822 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c802:	2b00      	cmp	r3, #0
 800c804:	d012      	beq.n	800c82c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	3324      	adds	r3, #36	; 0x24
 800c80a:	4618      	mov	r0, r3
 800c80c:	f000 fd2a 	bl	800d264 <xTaskRemoveFromEventList>
 800c810:	4603      	mov	r3, r0
 800c812:	2b00      	cmp	r3, #0
 800c814:	d001      	beq.n	800c81a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c816:	f000 fe01 	bl	800d41c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c81a:	7bfb      	ldrb	r3, [r7, #15]
 800c81c:	3b01      	subs	r3, #1
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c826:	2b00      	cmp	r3, #0
 800c828:	dce9      	bgt.n	800c7fe <prvUnlockQueue+0x16>
 800c82a:	e000      	b.n	800c82e <prvUnlockQueue+0x46>
					break;
 800c82c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	22ff      	movs	r2, #255	; 0xff
 800c832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c836:	f001 fc5d 	bl	800e0f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c83a:	f001 fc2b 	bl	800e094 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c844:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c846:	e011      	b.n	800c86c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	691b      	ldr	r3, [r3, #16]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d012      	beq.n	800c876 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	3310      	adds	r3, #16
 800c854:	4618      	mov	r0, r3
 800c856:	f000 fd05 	bl	800d264 <xTaskRemoveFromEventList>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d001      	beq.n	800c864 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c860:	f000 fddc 	bl	800d41c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c864:	7bbb      	ldrb	r3, [r7, #14]
 800c866:	3b01      	subs	r3, #1
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c86c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c870:	2b00      	cmp	r3, #0
 800c872:	dce9      	bgt.n	800c848 <prvUnlockQueue+0x60>
 800c874:	e000      	b.n	800c878 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c876:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	22ff      	movs	r2, #255	; 0xff
 800c87c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c880:	f001 fc38 	bl	800e0f4 <vPortExitCritical>
}
 800c884:	bf00      	nop
 800c886:	3710      	adds	r7, #16
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c894:	f001 fbfe 	bl	800e094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d102      	bne.n	800c8a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	60fb      	str	r3, [r7, #12]
 800c8a4:	e001      	b.n	800c8aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8aa:	f001 fc23 	bl	800e0f4 <vPortExitCritical>

	return xReturn;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3710      	adds	r7, #16
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b084      	sub	sp, #16
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c8c0:	f001 fbe8 	bl	800e094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d102      	bne.n	800c8d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	60fb      	str	r3, [r7, #12]
 800c8d4:	e001      	b.n	800c8da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8da:	f001 fc0b 	bl	800e0f4 <vPortExitCritical>

	return xReturn;
 800c8de:	68fb      	ldr	r3, [r7, #12]
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3710      	adds	r7, #16
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	60fb      	str	r3, [r7, #12]
 800c8f6:	e014      	b.n	800c922 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c8f8:	4a0f      	ldr	r2, [pc, #60]	; (800c938 <vQueueAddToRegistry+0x50>)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d10b      	bne.n	800c91c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c904:	490c      	ldr	r1, [pc, #48]	; (800c938 <vQueueAddToRegistry+0x50>)
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	683a      	ldr	r2, [r7, #0]
 800c90a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c90e:	4a0a      	ldr	r2, [pc, #40]	; (800c938 <vQueueAddToRegistry+0x50>)
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	00db      	lsls	r3, r3, #3
 800c914:	4413      	add	r3, r2
 800c916:	687a      	ldr	r2, [r7, #4]
 800c918:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c91a:	e006      	b.n	800c92a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	3301      	adds	r3, #1
 800c920:	60fb      	str	r3, [r7, #12]
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2b07      	cmp	r3, #7
 800c926:	d9e7      	bls.n	800c8f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c928:	bf00      	nop
 800c92a:	bf00      	nop
 800c92c:	3714      	adds	r7, #20
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop
 800c938:	20004f00 	.word	0x20004f00

0800c93c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b086      	sub	sp, #24
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c94c:	f001 fba2 	bl	800e094 <vPortEnterCritical>
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c956:	b25b      	sxtb	r3, r3
 800c958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c95c:	d103      	bne.n	800c966 <vQueueWaitForMessageRestricted+0x2a>
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	2200      	movs	r2, #0
 800c962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c96c:	b25b      	sxtb	r3, r3
 800c96e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c972:	d103      	bne.n	800c97c <vQueueWaitForMessageRestricted+0x40>
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	2200      	movs	r2, #0
 800c978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c97c:	f001 fbba 	bl	800e0f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c984:	2b00      	cmp	r3, #0
 800c986:	d106      	bne.n	800c996 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	3324      	adds	r3, #36	; 0x24
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	68b9      	ldr	r1, [r7, #8]
 800c990:	4618      	mov	r0, r3
 800c992:	f000 fc3b 	bl	800d20c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c996:	6978      	ldr	r0, [r7, #20]
 800c998:	f7ff ff26 	bl	800c7e8 <prvUnlockQueue>
	}
 800c99c:	bf00      	nop
 800c99e:	3718      	adds	r7, #24
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b08e      	sub	sp, #56	; 0x38
 800c9a8:	af04      	add	r7, sp, #16
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	607a      	str	r2, [r7, #4]
 800c9b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d10a      	bne.n	800c9ce <xTaskCreateStatic+0x2a>
	__asm volatile
 800c9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9bc:	f383 8811 	msr	BASEPRI, r3
 800c9c0:	f3bf 8f6f 	isb	sy
 800c9c4:	f3bf 8f4f 	dsb	sy
 800c9c8:	623b      	str	r3, [r7, #32]
}
 800c9ca:	bf00      	nop
 800c9cc:	e7fe      	b.n	800c9cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d10a      	bne.n	800c9ea <xTaskCreateStatic+0x46>
	__asm volatile
 800c9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d8:	f383 8811 	msr	BASEPRI, r3
 800c9dc:	f3bf 8f6f 	isb	sy
 800c9e0:	f3bf 8f4f 	dsb	sy
 800c9e4:	61fb      	str	r3, [r7, #28]
}
 800c9e6:	bf00      	nop
 800c9e8:	e7fe      	b.n	800c9e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c9ea:	235c      	movs	r3, #92	; 0x5c
 800c9ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	2b5c      	cmp	r3, #92	; 0x5c
 800c9f2:	d00a      	beq.n	800ca0a <xTaskCreateStatic+0x66>
	__asm volatile
 800c9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f8:	f383 8811 	msr	BASEPRI, r3
 800c9fc:	f3bf 8f6f 	isb	sy
 800ca00:	f3bf 8f4f 	dsb	sy
 800ca04:	61bb      	str	r3, [r7, #24]
}
 800ca06:	bf00      	nop
 800ca08:	e7fe      	b.n	800ca08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ca0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ca0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d01e      	beq.n	800ca50 <xTaskCreateStatic+0xac>
 800ca12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d01b      	beq.n	800ca50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ca1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca24:	2202      	movs	r2, #2
 800ca26:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	9303      	str	r3, [sp, #12]
 800ca2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca30:	9302      	str	r3, [sp, #8]
 800ca32:	f107 0314 	add.w	r3, r7, #20
 800ca36:	9301      	str	r3, [sp, #4]
 800ca38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3a:	9300      	str	r3, [sp, #0]
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	68b9      	ldr	r1, [r7, #8]
 800ca42:	68f8      	ldr	r0, [r7, #12]
 800ca44:	f000 f850 	bl	800cae8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca4a:	f000 f8dd 	bl	800cc08 <prvAddNewTaskToReadyList>
 800ca4e:	e001      	b.n	800ca54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ca50:	2300      	movs	r3, #0
 800ca52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ca54:	697b      	ldr	r3, [r7, #20]
	}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3728      	adds	r7, #40	; 0x28
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b08c      	sub	sp, #48	; 0x30
 800ca62:	af04      	add	r7, sp, #16
 800ca64:	60f8      	str	r0, [r7, #12]
 800ca66:	60b9      	str	r1, [r7, #8]
 800ca68:	603b      	str	r3, [r7, #0]
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ca6e:	88fb      	ldrh	r3, [r7, #6]
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	4618      	mov	r0, r3
 800ca74:	f001 fc30 	bl	800e2d8 <pvPortMalloc>
 800ca78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d00e      	beq.n	800ca9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ca80:	205c      	movs	r0, #92	; 0x5c
 800ca82:	f001 fc29 	bl	800e2d8 <pvPortMalloc>
 800ca86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ca88:	69fb      	ldr	r3, [r7, #28]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d003      	beq.n	800ca96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ca8e:	69fb      	ldr	r3, [r7, #28]
 800ca90:	697a      	ldr	r2, [r7, #20]
 800ca92:	631a      	str	r2, [r3, #48]	; 0x30
 800ca94:	e005      	b.n	800caa2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ca96:	6978      	ldr	r0, [r7, #20]
 800ca98:	f001 fcea 	bl	800e470 <vPortFree>
 800ca9c:	e001      	b.n	800caa2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800caa2:	69fb      	ldr	r3, [r7, #28]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d017      	beq.n	800cad8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	2200      	movs	r2, #0
 800caac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cab0:	88fa      	ldrh	r2, [r7, #6]
 800cab2:	2300      	movs	r3, #0
 800cab4:	9303      	str	r3, [sp, #12]
 800cab6:	69fb      	ldr	r3, [r7, #28]
 800cab8:	9302      	str	r3, [sp, #8]
 800caba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cabc:	9301      	str	r3, [sp, #4]
 800cabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac0:	9300      	str	r3, [sp, #0]
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	68b9      	ldr	r1, [r7, #8]
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f000 f80e 	bl	800cae8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cacc:	69f8      	ldr	r0, [r7, #28]
 800cace:	f000 f89b 	bl	800cc08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cad2:	2301      	movs	r3, #1
 800cad4:	61bb      	str	r3, [r7, #24]
 800cad6:	e002      	b.n	800cade <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cad8:	f04f 33ff 	mov.w	r3, #4294967295
 800cadc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cade:	69bb      	ldr	r3, [r7, #24]
	}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3720      	adds	r7, #32
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b088      	sub	sp, #32
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	607a      	str	r2, [r7, #4]
 800caf4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800caf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	009b      	lsls	r3, r3, #2
 800cafe:	461a      	mov	r2, r3
 800cb00:	21a5      	movs	r1, #165	; 0xa5
 800cb02:	f001 fe0b 	bl	800e71c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb0a:	6879      	ldr	r1, [r7, #4]
 800cb0c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cb10:	440b      	add	r3, r1
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	4413      	add	r3, r2
 800cb16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	f023 0307 	bic.w	r3, r3, #7
 800cb1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	f003 0307 	and.w	r3, r3, #7
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00a      	beq.n	800cb40 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2e:	f383 8811 	msr	BASEPRI, r3
 800cb32:	f3bf 8f6f 	isb	sy
 800cb36:	f3bf 8f4f 	dsb	sy
 800cb3a:	617b      	str	r3, [r7, #20]
}
 800cb3c:	bf00      	nop
 800cb3e:	e7fe      	b.n	800cb3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d01f      	beq.n	800cb86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb46:	2300      	movs	r3, #0
 800cb48:	61fb      	str	r3, [r7, #28]
 800cb4a:	e012      	b.n	800cb72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cb4c:	68ba      	ldr	r2, [r7, #8]
 800cb4e:	69fb      	ldr	r3, [r7, #28]
 800cb50:	4413      	add	r3, r2
 800cb52:	7819      	ldrb	r1, [r3, #0]
 800cb54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	4413      	add	r3, r2
 800cb5a:	3334      	adds	r3, #52	; 0x34
 800cb5c:	460a      	mov	r2, r1
 800cb5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cb60:	68ba      	ldr	r2, [r7, #8]
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	4413      	add	r3, r2
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d006      	beq.n	800cb7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	61fb      	str	r3, [r7, #28]
 800cb72:	69fb      	ldr	r3, [r7, #28]
 800cb74:	2b0f      	cmp	r3, #15
 800cb76:	d9e9      	bls.n	800cb4c <prvInitialiseNewTask+0x64>
 800cb78:	e000      	b.n	800cb7c <prvInitialiseNewTask+0x94>
			{
				break;
 800cb7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cb84:	e003      	b.n	800cb8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb88:	2200      	movs	r2, #0
 800cb8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb90:	2b37      	cmp	r3, #55	; 0x37
 800cb92:	d901      	bls.n	800cb98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cb94:	2337      	movs	r3, #55	; 0x37
 800cb96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cba2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba6:	2200      	movs	r2, #0
 800cba8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbac:	3304      	adds	r3, #4
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7ff f978 	bl	800bea4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb6:	3318      	adds	r3, #24
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f7ff f973 	bl	800bea4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbdc:	2200      	movs	r2, #0
 800cbde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cbe2:	683a      	ldr	r2, [r7, #0]
 800cbe4:	68f9      	ldr	r1, [r7, #12]
 800cbe6:	69b8      	ldr	r0, [r7, #24]
 800cbe8:	f001 f928 	bl	800de3c <pxPortInitialiseStack>
 800cbec:	4602      	mov	r2, r0
 800cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d002      	beq.n	800cbfe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbfe:	bf00      	nop
 800cc00:	3720      	adds	r7, #32
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
	...

0800cc08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cc10:	f001 fa40 	bl	800e094 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cc14:	4b2d      	ldr	r3, [pc, #180]	; (800cccc <prvAddNewTaskToReadyList+0xc4>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	3301      	adds	r3, #1
 800cc1a:	4a2c      	ldr	r2, [pc, #176]	; (800cccc <prvAddNewTaskToReadyList+0xc4>)
 800cc1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cc1e:	4b2c      	ldr	r3, [pc, #176]	; (800ccd0 <prvAddNewTaskToReadyList+0xc8>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d109      	bne.n	800cc3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cc26:	4a2a      	ldr	r2, [pc, #168]	; (800ccd0 <prvAddNewTaskToReadyList+0xc8>)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cc2c:	4b27      	ldr	r3, [pc, #156]	; (800cccc <prvAddNewTaskToReadyList+0xc4>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d110      	bne.n	800cc56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc34:	f000 fc16 	bl	800d464 <prvInitialiseTaskLists>
 800cc38:	e00d      	b.n	800cc56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc3a:	4b26      	ldr	r3, [pc, #152]	; (800ccd4 <prvAddNewTaskToReadyList+0xcc>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d109      	bne.n	800cc56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc42:	4b23      	ldr	r3, [pc, #140]	; (800ccd0 <prvAddNewTaskToReadyList+0xc8>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d802      	bhi.n	800cc56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cc50:	4a1f      	ldr	r2, [pc, #124]	; (800ccd0 <prvAddNewTaskToReadyList+0xc8>)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cc56:	4b20      	ldr	r3, [pc, #128]	; (800ccd8 <prvAddNewTaskToReadyList+0xd0>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	4a1e      	ldr	r2, [pc, #120]	; (800ccd8 <prvAddNewTaskToReadyList+0xd0>)
 800cc5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cc60:	4b1d      	ldr	r3, [pc, #116]	; (800ccd8 <prvAddNewTaskToReadyList+0xd0>)
 800cc62:	681a      	ldr	r2, [r3, #0]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc6c:	4b1b      	ldr	r3, [pc, #108]	; (800ccdc <prvAddNewTaskToReadyList+0xd4>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d903      	bls.n	800cc7c <prvAddNewTaskToReadyList+0x74>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc78:	4a18      	ldr	r2, [pc, #96]	; (800ccdc <prvAddNewTaskToReadyList+0xd4>)
 800cc7a:	6013      	str	r3, [r2, #0]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc80:	4613      	mov	r3, r2
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	4413      	add	r3, r2
 800cc86:	009b      	lsls	r3, r3, #2
 800cc88:	4a15      	ldr	r2, [pc, #84]	; (800cce0 <prvAddNewTaskToReadyList+0xd8>)
 800cc8a:	441a      	add	r2, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	3304      	adds	r3, #4
 800cc90:	4619      	mov	r1, r3
 800cc92:	4610      	mov	r0, r2
 800cc94:	f7ff f913 	bl	800bebe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cc98:	f001 fa2c 	bl	800e0f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cc9c:	4b0d      	ldr	r3, [pc, #52]	; (800ccd4 <prvAddNewTaskToReadyList+0xcc>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00e      	beq.n	800ccc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cca4:	4b0a      	ldr	r3, [pc, #40]	; (800ccd0 <prvAddNewTaskToReadyList+0xc8>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d207      	bcs.n	800ccc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ccb2:	4b0c      	ldr	r3, [pc, #48]	; (800cce4 <prvAddNewTaskToReadyList+0xdc>)
 800ccb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccb8:	601a      	str	r2, [r3, #0]
 800ccba:	f3bf 8f4f 	dsb	sy
 800ccbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccc2:	bf00      	nop
 800ccc4:	3708      	adds	r7, #8
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	bf00      	nop
 800cccc:	20000e30 	.word	0x20000e30
 800ccd0:	2000095c 	.word	0x2000095c
 800ccd4:	20000e3c 	.word	0x20000e3c
 800ccd8:	20000e4c 	.word	0x20000e4c
 800ccdc:	20000e38 	.word	0x20000e38
 800cce0:	20000960 	.word	0x20000960
 800cce4:	e000ed04 	.word	0xe000ed04

0800cce8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d017      	beq.n	800cd2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ccfa:	4b13      	ldr	r3, [pc, #76]	; (800cd48 <vTaskDelay+0x60>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d00a      	beq.n	800cd18 <vTaskDelay+0x30>
	__asm volatile
 800cd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd06:	f383 8811 	msr	BASEPRI, r3
 800cd0a:	f3bf 8f6f 	isb	sy
 800cd0e:	f3bf 8f4f 	dsb	sy
 800cd12:	60bb      	str	r3, [r7, #8]
}
 800cd14:	bf00      	nop
 800cd16:	e7fe      	b.n	800cd16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cd18:	f000 f880 	bl	800ce1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cd1c:	2100      	movs	r1, #0
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 fcea 	bl	800d6f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cd24:	f000 f888 	bl	800ce38 <xTaskResumeAll>
 800cd28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d107      	bne.n	800cd40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cd30:	4b06      	ldr	r3, [pc, #24]	; (800cd4c <vTaskDelay+0x64>)
 800cd32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd36:	601a      	str	r2, [r3, #0]
 800cd38:	f3bf 8f4f 	dsb	sy
 800cd3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd40:	bf00      	nop
 800cd42:	3710      	adds	r7, #16
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	20000e58 	.word	0x20000e58
 800cd4c:	e000ed04 	.word	0xe000ed04

0800cd50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b08a      	sub	sp, #40	; 0x28
 800cd54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cd56:	2300      	movs	r3, #0
 800cd58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cd5e:	463a      	mov	r2, r7
 800cd60:	1d39      	adds	r1, r7, #4
 800cd62:	f107 0308 	add.w	r3, r7, #8
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7ff f848 	bl	800bdfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cd6c:	6839      	ldr	r1, [r7, #0]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	68ba      	ldr	r2, [r7, #8]
 800cd72:	9202      	str	r2, [sp, #8]
 800cd74:	9301      	str	r3, [sp, #4]
 800cd76:	2300      	movs	r3, #0
 800cd78:	9300      	str	r3, [sp, #0]
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	460a      	mov	r2, r1
 800cd7e:	4921      	ldr	r1, [pc, #132]	; (800ce04 <vTaskStartScheduler+0xb4>)
 800cd80:	4821      	ldr	r0, [pc, #132]	; (800ce08 <vTaskStartScheduler+0xb8>)
 800cd82:	f7ff fe0f 	bl	800c9a4 <xTaskCreateStatic>
 800cd86:	4603      	mov	r3, r0
 800cd88:	4a20      	ldr	r2, [pc, #128]	; (800ce0c <vTaskStartScheduler+0xbc>)
 800cd8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cd8c:	4b1f      	ldr	r3, [pc, #124]	; (800ce0c <vTaskStartScheduler+0xbc>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d002      	beq.n	800cd9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cd94:	2301      	movs	r3, #1
 800cd96:	617b      	str	r3, [r7, #20]
 800cd98:	e001      	b.n	800cd9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d102      	bne.n	800cdaa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cda4:	f000 fcfc 	bl	800d7a0 <xTimerCreateTimerTask>
 800cda8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	2b01      	cmp	r3, #1
 800cdae:	d116      	bne.n	800cdde <vTaskStartScheduler+0x8e>
	__asm volatile
 800cdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb4:	f383 8811 	msr	BASEPRI, r3
 800cdb8:	f3bf 8f6f 	isb	sy
 800cdbc:	f3bf 8f4f 	dsb	sy
 800cdc0:	613b      	str	r3, [r7, #16]
}
 800cdc2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cdc4:	4b12      	ldr	r3, [pc, #72]	; (800ce10 <vTaskStartScheduler+0xc0>)
 800cdc6:	f04f 32ff 	mov.w	r2, #4294967295
 800cdca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cdcc:	4b11      	ldr	r3, [pc, #68]	; (800ce14 <vTaskStartScheduler+0xc4>)
 800cdce:	2201      	movs	r2, #1
 800cdd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cdd2:	4b11      	ldr	r3, [pc, #68]	; (800ce18 <vTaskStartScheduler+0xc8>)
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cdd8:	f001 f8ba 	bl	800df50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cddc:	e00e      	b.n	800cdfc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde4:	d10a      	bne.n	800cdfc <vTaskStartScheduler+0xac>
	__asm volatile
 800cde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdea:	f383 8811 	msr	BASEPRI, r3
 800cdee:	f3bf 8f6f 	isb	sy
 800cdf2:	f3bf 8f4f 	dsb	sy
 800cdf6:	60fb      	str	r3, [r7, #12]
}
 800cdf8:	bf00      	nop
 800cdfa:	e7fe      	b.n	800cdfa <vTaskStartScheduler+0xaa>
}
 800cdfc:	bf00      	nop
 800cdfe:	3718      	adds	r7, #24
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}
 800ce04:	0800efc4 	.word	0x0800efc4
 800ce08:	0800d435 	.word	0x0800d435
 800ce0c:	20000e54 	.word	0x20000e54
 800ce10:	20000e50 	.word	0x20000e50
 800ce14:	20000e3c 	.word	0x20000e3c
 800ce18:	20000e34 	.word	0x20000e34

0800ce1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ce20:	4b04      	ldr	r3, [pc, #16]	; (800ce34 <vTaskSuspendAll+0x18>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	3301      	adds	r3, #1
 800ce26:	4a03      	ldr	r2, [pc, #12]	; (800ce34 <vTaskSuspendAll+0x18>)
 800ce28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ce2a:	bf00      	nop
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr
 800ce34:	20000e58 	.word	0x20000e58

0800ce38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ce42:	2300      	movs	r3, #0
 800ce44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ce46:	4b42      	ldr	r3, [pc, #264]	; (800cf50 <xTaskResumeAll+0x118>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d10a      	bne.n	800ce64 <xTaskResumeAll+0x2c>
	__asm volatile
 800ce4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce52:	f383 8811 	msr	BASEPRI, r3
 800ce56:	f3bf 8f6f 	isb	sy
 800ce5a:	f3bf 8f4f 	dsb	sy
 800ce5e:	603b      	str	r3, [r7, #0]
}
 800ce60:	bf00      	nop
 800ce62:	e7fe      	b.n	800ce62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ce64:	f001 f916 	bl	800e094 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ce68:	4b39      	ldr	r3, [pc, #228]	; (800cf50 <xTaskResumeAll+0x118>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	3b01      	subs	r3, #1
 800ce6e:	4a38      	ldr	r2, [pc, #224]	; (800cf50 <xTaskResumeAll+0x118>)
 800ce70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce72:	4b37      	ldr	r3, [pc, #220]	; (800cf50 <xTaskResumeAll+0x118>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d162      	bne.n	800cf40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ce7a:	4b36      	ldr	r3, [pc, #216]	; (800cf54 <xTaskResumeAll+0x11c>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d05e      	beq.n	800cf40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce82:	e02f      	b.n	800cee4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce84:	4b34      	ldr	r3, [pc, #208]	; (800cf58 <xTaskResumeAll+0x120>)
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	68db      	ldr	r3, [r3, #12]
 800ce8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	3318      	adds	r3, #24
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7ff f871 	bl	800bf78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	3304      	adds	r3, #4
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7ff f86c 	bl	800bf78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea4:	4b2d      	ldr	r3, [pc, #180]	; (800cf5c <xTaskResumeAll+0x124>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d903      	bls.n	800ceb4 <xTaskResumeAll+0x7c>
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb0:	4a2a      	ldr	r2, [pc, #168]	; (800cf5c <xTaskResumeAll+0x124>)
 800ceb2:	6013      	str	r3, [r2, #0]
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb8:	4613      	mov	r3, r2
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	4413      	add	r3, r2
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	4a27      	ldr	r2, [pc, #156]	; (800cf60 <xTaskResumeAll+0x128>)
 800cec2:	441a      	add	r2, r3
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	3304      	adds	r3, #4
 800cec8:	4619      	mov	r1, r3
 800ceca:	4610      	mov	r0, r2
 800cecc:	f7fe fff7 	bl	800bebe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced4:	4b23      	ldr	r3, [pc, #140]	; (800cf64 <xTaskResumeAll+0x12c>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d302      	bcc.n	800cee4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cede:	4b22      	ldr	r3, [pc, #136]	; (800cf68 <xTaskResumeAll+0x130>)
 800cee0:	2201      	movs	r2, #1
 800cee2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cee4:	4b1c      	ldr	r3, [pc, #112]	; (800cf58 <xTaskResumeAll+0x120>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d1cb      	bne.n	800ce84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d001      	beq.n	800cef6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cef2:	f000 fb55 	bl	800d5a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cef6:	4b1d      	ldr	r3, [pc, #116]	; (800cf6c <xTaskResumeAll+0x134>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d010      	beq.n	800cf24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cf02:	f000 f847 	bl	800cf94 <xTaskIncrementTick>
 800cf06:	4603      	mov	r3, r0
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d002      	beq.n	800cf12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cf0c:	4b16      	ldr	r3, [pc, #88]	; (800cf68 <xTaskResumeAll+0x130>)
 800cf0e:	2201      	movs	r2, #1
 800cf10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	3b01      	subs	r3, #1
 800cf16:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d1f1      	bne.n	800cf02 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cf1e:	4b13      	ldr	r3, [pc, #76]	; (800cf6c <xTaskResumeAll+0x134>)
 800cf20:	2200      	movs	r2, #0
 800cf22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cf24:	4b10      	ldr	r3, [pc, #64]	; (800cf68 <xTaskResumeAll+0x130>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d009      	beq.n	800cf40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cf30:	4b0f      	ldr	r3, [pc, #60]	; (800cf70 <xTaskResumeAll+0x138>)
 800cf32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf36:	601a      	str	r2, [r3, #0]
 800cf38:	f3bf 8f4f 	dsb	sy
 800cf3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf40:	f001 f8d8 	bl	800e0f4 <vPortExitCritical>

	return xAlreadyYielded;
 800cf44:	68bb      	ldr	r3, [r7, #8]
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3710      	adds	r7, #16
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	20000e58 	.word	0x20000e58
 800cf54:	20000e30 	.word	0x20000e30
 800cf58:	20000df0 	.word	0x20000df0
 800cf5c:	20000e38 	.word	0x20000e38
 800cf60:	20000960 	.word	0x20000960
 800cf64:	2000095c 	.word	0x2000095c
 800cf68:	20000e44 	.word	0x20000e44
 800cf6c:	20000e40 	.word	0x20000e40
 800cf70:	e000ed04 	.word	0xe000ed04

0800cf74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cf7a:	4b05      	ldr	r3, [pc, #20]	; (800cf90 <xTaskGetTickCount+0x1c>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cf80:	687b      	ldr	r3, [r7, #4]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	370c      	adds	r7, #12
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
 800cf8e:	bf00      	nop
 800cf90:	20000e34 	.word	0x20000e34

0800cf94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b086      	sub	sp, #24
 800cf98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf9e:	4b4f      	ldr	r3, [pc, #316]	; (800d0dc <xTaskIncrementTick+0x148>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	f040 808f 	bne.w	800d0c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cfa8:	4b4d      	ldr	r3, [pc, #308]	; (800d0e0 <xTaskIncrementTick+0x14c>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	3301      	adds	r3, #1
 800cfae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cfb0:	4a4b      	ldr	r2, [pc, #300]	; (800d0e0 <xTaskIncrementTick+0x14c>)
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d120      	bne.n	800cffe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cfbc:	4b49      	ldr	r3, [pc, #292]	; (800d0e4 <xTaskIncrementTick+0x150>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d00a      	beq.n	800cfdc <xTaskIncrementTick+0x48>
	__asm volatile
 800cfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfca:	f383 8811 	msr	BASEPRI, r3
 800cfce:	f3bf 8f6f 	isb	sy
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	603b      	str	r3, [r7, #0]
}
 800cfd8:	bf00      	nop
 800cfda:	e7fe      	b.n	800cfda <xTaskIncrementTick+0x46>
 800cfdc:	4b41      	ldr	r3, [pc, #260]	; (800d0e4 <xTaskIncrementTick+0x150>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	60fb      	str	r3, [r7, #12]
 800cfe2:	4b41      	ldr	r3, [pc, #260]	; (800d0e8 <xTaskIncrementTick+0x154>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4a3f      	ldr	r2, [pc, #252]	; (800d0e4 <xTaskIncrementTick+0x150>)
 800cfe8:	6013      	str	r3, [r2, #0]
 800cfea:	4a3f      	ldr	r2, [pc, #252]	; (800d0e8 <xTaskIncrementTick+0x154>)
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	6013      	str	r3, [r2, #0]
 800cff0:	4b3e      	ldr	r3, [pc, #248]	; (800d0ec <xTaskIncrementTick+0x158>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	3301      	adds	r3, #1
 800cff6:	4a3d      	ldr	r2, [pc, #244]	; (800d0ec <xTaskIncrementTick+0x158>)
 800cff8:	6013      	str	r3, [r2, #0]
 800cffa:	f000 fad1 	bl	800d5a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cffe:	4b3c      	ldr	r3, [pc, #240]	; (800d0f0 <xTaskIncrementTick+0x15c>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	693a      	ldr	r2, [r7, #16]
 800d004:	429a      	cmp	r2, r3
 800d006:	d349      	bcc.n	800d09c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d008:	4b36      	ldr	r3, [pc, #216]	; (800d0e4 <xTaskIncrementTick+0x150>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d104      	bne.n	800d01c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d012:	4b37      	ldr	r3, [pc, #220]	; (800d0f0 <xTaskIncrementTick+0x15c>)
 800d014:	f04f 32ff 	mov.w	r2, #4294967295
 800d018:	601a      	str	r2, [r3, #0]
					break;
 800d01a:	e03f      	b.n	800d09c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d01c:	4b31      	ldr	r3, [pc, #196]	; (800d0e4 <xTaskIncrementTick+0x150>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	68db      	ldr	r3, [r3, #12]
 800d022:	68db      	ldr	r3, [r3, #12]
 800d024:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d02c:	693a      	ldr	r2, [r7, #16]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	429a      	cmp	r2, r3
 800d032:	d203      	bcs.n	800d03c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d034:	4a2e      	ldr	r2, [pc, #184]	; (800d0f0 <xTaskIncrementTick+0x15c>)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d03a:	e02f      	b.n	800d09c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	3304      	adds	r3, #4
 800d040:	4618      	mov	r0, r3
 800d042:	f7fe ff99 	bl	800bf78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d004      	beq.n	800d058 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	3318      	adds	r3, #24
 800d052:	4618      	mov	r0, r3
 800d054:	f7fe ff90 	bl	800bf78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d05c:	4b25      	ldr	r3, [pc, #148]	; (800d0f4 <xTaskIncrementTick+0x160>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	429a      	cmp	r2, r3
 800d062:	d903      	bls.n	800d06c <xTaskIncrementTick+0xd8>
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d068:	4a22      	ldr	r2, [pc, #136]	; (800d0f4 <xTaskIncrementTick+0x160>)
 800d06a:	6013      	str	r3, [r2, #0]
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d070:	4613      	mov	r3, r2
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	4413      	add	r3, r2
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	4a1f      	ldr	r2, [pc, #124]	; (800d0f8 <xTaskIncrementTick+0x164>)
 800d07a:	441a      	add	r2, r3
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	3304      	adds	r3, #4
 800d080:	4619      	mov	r1, r3
 800d082:	4610      	mov	r0, r2
 800d084:	f7fe ff1b 	bl	800bebe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d08c:	4b1b      	ldr	r3, [pc, #108]	; (800d0fc <xTaskIncrementTick+0x168>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d092:	429a      	cmp	r2, r3
 800d094:	d3b8      	bcc.n	800d008 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d096:	2301      	movs	r3, #1
 800d098:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d09a:	e7b5      	b.n	800d008 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d09c:	4b17      	ldr	r3, [pc, #92]	; (800d0fc <xTaskIncrementTick+0x168>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0a2:	4915      	ldr	r1, [pc, #84]	; (800d0f8 <xTaskIncrementTick+0x164>)
 800d0a4:	4613      	mov	r3, r2
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	4413      	add	r3, r2
 800d0aa:	009b      	lsls	r3, r3, #2
 800d0ac:	440b      	add	r3, r1
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d901      	bls.n	800d0b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d0b8:	4b11      	ldr	r3, [pc, #68]	; (800d100 <xTaskIncrementTick+0x16c>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d007      	beq.n	800d0d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	617b      	str	r3, [r7, #20]
 800d0c4:	e004      	b.n	800d0d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d0c6:	4b0f      	ldr	r3, [pc, #60]	; (800d104 <xTaskIncrementTick+0x170>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	4a0d      	ldr	r2, [pc, #52]	; (800d104 <xTaskIncrementTick+0x170>)
 800d0ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d0d0:	697b      	ldr	r3, [r7, #20]
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3718      	adds	r7, #24
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
 800d0da:	bf00      	nop
 800d0dc:	20000e58 	.word	0x20000e58
 800d0e0:	20000e34 	.word	0x20000e34
 800d0e4:	20000de8 	.word	0x20000de8
 800d0e8:	20000dec 	.word	0x20000dec
 800d0ec:	20000e48 	.word	0x20000e48
 800d0f0:	20000e50 	.word	0x20000e50
 800d0f4:	20000e38 	.word	0x20000e38
 800d0f8:	20000960 	.word	0x20000960
 800d0fc:	2000095c 	.word	0x2000095c
 800d100:	20000e44 	.word	0x20000e44
 800d104:	20000e40 	.word	0x20000e40

0800d108 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d108:	b480      	push	{r7}
 800d10a:	b085      	sub	sp, #20
 800d10c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d10e:	4b28      	ldr	r3, [pc, #160]	; (800d1b0 <vTaskSwitchContext+0xa8>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d003      	beq.n	800d11e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d116:	4b27      	ldr	r3, [pc, #156]	; (800d1b4 <vTaskSwitchContext+0xac>)
 800d118:	2201      	movs	r2, #1
 800d11a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d11c:	e041      	b.n	800d1a2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d11e:	4b25      	ldr	r3, [pc, #148]	; (800d1b4 <vTaskSwitchContext+0xac>)
 800d120:	2200      	movs	r2, #0
 800d122:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d124:	4b24      	ldr	r3, [pc, #144]	; (800d1b8 <vTaskSwitchContext+0xb0>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	60fb      	str	r3, [r7, #12]
 800d12a:	e010      	b.n	800d14e <vTaskSwitchContext+0x46>
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d10a      	bne.n	800d148 <vTaskSwitchContext+0x40>
	__asm volatile
 800d132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d136:	f383 8811 	msr	BASEPRI, r3
 800d13a:	f3bf 8f6f 	isb	sy
 800d13e:	f3bf 8f4f 	dsb	sy
 800d142:	607b      	str	r3, [r7, #4]
}
 800d144:	bf00      	nop
 800d146:	e7fe      	b.n	800d146 <vTaskSwitchContext+0x3e>
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	3b01      	subs	r3, #1
 800d14c:	60fb      	str	r3, [r7, #12]
 800d14e:	491b      	ldr	r1, [pc, #108]	; (800d1bc <vTaskSwitchContext+0xb4>)
 800d150:	68fa      	ldr	r2, [r7, #12]
 800d152:	4613      	mov	r3, r2
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	4413      	add	r3, r2
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	440b      	add	r3, r1
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d0e4      	beq.n	800d12c <vTaskSwitchContext+0x24>
 800d162:	68fa      	ldr	r2, [r7, #12]
 800d164:	4613      	mov	r3, r2
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	4413      	add	r3, r2
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	4a13      	ldr	r2, [pc, #76]	; (800d1bc <vTaskSwitchContext+0xb4>)
 800d16e:	4413      	add	r3, r2
 800d170:	60bb      	str	r3, [r7, #8]
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	685a      	ldr	r2, [r3, #4]
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	605a      	str	r2, [r3, #4]
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	685a      	ldr	r2, [r3, #4]
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	3308      	adds	r3, #8
 800d184:	429a      	cmp	r2, r3
 800d186:	d104      	bne.n	800d192 <vTaskSwitchContext+0x8a>
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	685a      	ldr	r2, [r3, #4]
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	605a      	str	r2, [r3, #4]
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	685b      	ldr	r3, [r3, #4]
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	4a09      	ldr	r2, [pc, #36]	; (800d1c0 <vTaskSwitchContext+0xb8>)
 800d19a:	6013      	str	r3, [r2, #0]
 800d19c:	4a06      	ldr	r2, [pc, #24]	; (800d1b8 <vTaskSwitchContext+0xb0>)
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	6013      	str	r3, [r2, #0]
}
 800d1a2:	bf00      	nop
 800d1a4:	3714      	adds	r7, #20
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr
 800d1ae:	bf00      	nop
 800d1b0:	20000e58 	.word	0x20000e58
 800d1b4:	20000e44 	.word	0x20000e44
 800d1b8:	20000e38 	.word	0x20000e38
 800d1bc:	20000960 	.word	0x20000960
 800d1c0:	2000095c 	.word	0x2000095c

0800d1c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10a      	bne.n	800d1ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d8:	f383 8811 	msr	BASEPRI, r3
 800d1dc:	f3bf 8f6f 	isb	sy
 800d1e0:	f3bf 8f4f 	dsb	sy
 800d1e4:	60fb      	str	r3, [r7, #12]
}
 800d1e6:	bf00      	nop
 800d1e8:	e7fe      	b.n	800d1e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d1ea:	4b07      	ldr	r3, [pc, #28]	; (800d208 <vTaskPlaceOnEventList+0x44>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	3318      	adds	r3, #24
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f7fe fe87 	bl	800bf06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d1f8:	2101      	movs	r1, #1
 800d1fa:	6838      	ldr	r0, [r7, #0]
 800d1fc:	f000 fa7c 	bl	800d6f8 <prvAddCurrentTaskToDelayedList>
}
 800d200:	bf00      	nop
 800d202:	3710      	adds	r7, #16
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	2000095c 	.word	0x2000095c

0800d20c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b086      	sub	sp, #24
 800d210:	af00      	add	r7, sp, #0
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d10a      	bne.n	800d234 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d222:	f383 8811 	msr	BASEPRI, r3
 800d226:	f3bf 8f6f 	isb	sy
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	617b      	str	r3, [r7, #20]
}
 800d230:	bf00      	nop
 800d232:	e7fe      	b.n	800d232 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d234:	4b0a      	ldr	r3, [pc, #40]	; (800d260 <vTaskPlaceOnEventListRestricted+0x54>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	3318      	adds	r3, #24
 800d23a:	4619      	mov	r1, r3
 800d23c:	68f8      	ldr	r0, [r7, #12]
 800d23e:	f7fe fe3e 	bl	800bebe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d002      	beq.n	800d24e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d248:	f04f 33ff 	mov.w	r3, #4294967295
 800d24c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d24e:	6879      	ldr	r1, [r7, #4]
 800d250:	68b8      	ldr	r0, [r7, #8]
 800d252:	f000 fa51 	bl	800d6f8 <prvAddCurrentTaskToDelayedList>
	}
 800d256:	bf00      	nop
 800d258:	3718      	adds	r7, #24
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	2000095c 	.word	0x2000095c

0800d264 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b086      	sub	sp, #24
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	68db      	ldr	r3, [r3, #12]
 800d270:	68db      	ldr	r3, [r3, #12]
 800d272:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d10a      	bne.n	800d290 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27e:	f383 8811 	msr	BASEPRI, r3
 800d282:	f3bf 8f6f 	isb	sy
 800d286:	f3bf 8f4f 	dsb	sy
 800d28a:	60fb      	str	r3, [r7, #12]
}
 800d28c:	bf00      	nop
 800d28e:	e7fe      	b.n	800d28e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	3318      	adds	r3, #24
 800d294:	4618      	mov	r0, r3
 800d296:	f7fe fe6f 	bl	800bf78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d29a:	4b1e      	ldr	r3, [pc, #120]	; (800d314 <xTaskRemoveFromEventList+0xb0>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d11d      	bne.n	800d2de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	3304      	adds	r3, #4
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7fe fe66 	bl	800bf78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2b0:	4b19      	ldr	r3, [pc, #100]	; (800d318 <xTaskRemoveFromEventList+0xb4>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d903      	bls.n	800d2c0 <xTaskRemoveFromEventList+0x5c>
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2bc:	4a16      	ldr	r2, [pc, #88]	; (800d318 <xTaskRemoveFromEventList+0xb4>)
 800d2be:	6013      	str	r3, [r2, #0]
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2c4:	4613      	mov	r3, r2
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	4413      	add	r3, r2
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	4a13      	ldr	r2, [pc, #76]	; (800d31c <xTaskRemoveFromEventList+0xb8>)
 800d2ce:	441a      	add	r2, r3
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	3304      	adds	r3, #4
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	4610      	mov	r0, r2
 800d2d8:	f7fe fdf1 	bl	800bebe <vListInsertEnd>
 800d2dc:	e005      	b.n	800d2ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	3318      	adds	r3, #24
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	480e      	ldr	r0, [pc, #56]	; (800d320 <xTaskRemoveFromEventList+0xbc>)
 800d2e6:	f7fe fdea 	bl	800bebe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ee:	4b0d      	ldr	r3, [pc, #52]	; (800d324 <xTaskRemoveFromEventList+0xc0>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d905      	bls.n	800d304 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d2fc:	4b0a      	ldr	r3, [pc, #40]	; (800d328 <xTaskRemoveFromEventList+0xc4>)
 800d2fe:	2201      	movs	r2, #1
 800d300:	601a      	str	r2, [r3, #0]
 800d302:	e001      	b.n	800d308 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d304:	2300      	movs	r3, #0
 800d306:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d308:	697b      	ldr	r3, [r7, #20]
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3718      	adds	r7, #24
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	20000e58 	.word	0x20000e58
 800d318:	20000e38 	.word	0x20000e38
 800d31c:	20000960 	.word	0x20000960
 800d320:	20000df0 	.word	0x20000df0
 800d324:	2000095c 	.word	0x2000095c
 800d328:	20000e44 	.word	0x20000e44

0800d32c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d334:	4b06      	ldr	r3, [pc, #24]	; (800d350 <vTaskInternalSetTimeOutState+0x24>)
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d33c:	4b05      	ldr	r3, [pc, #20]	; (800d354 <vTaskInternalSetTimeOutState+0x28>)
 800d33e:	681a      	ldr	r2, [r3, #0]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	605a      	str	r2, [r3, #4]
}
 800d344:	bf00      	nop
 800d346:	370c      	adds	r7, #12
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr
 800d350:	20000e48 	.word	0x20000e48
 800d354:	20000e34 	.word	0x20000e34

0800d358 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b088      	sub	sp, #32
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d10a      	bne.n	800d37e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36c:	f383 8811 	msr	BASEPRI, r3
 800d370:	f3bf 8f6f 	isb	sy
 800d374:	f3bf 8f4f 	dsb	sy
 800d378:	613b      	str	r3, [r7, #16]
}
 800d37a:	bf00      	nop
 800d37c:	e7fe      	b.n	800d37c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d10a      	bne.n	800d39a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d388:	f383 8811 	msr	BASEPRI, r3
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	60fb      	str	r3, [r7, #12]
}
 800d396:	bf00      	nop
 800d398:	e7fe      	b.n	800d398 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d39a:	f000 fe7b 	bl	800e094 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d39e:	4b1d      	ldr	r3, [pc, #116]	; (800d414 <xTaskCheckForTimeOut+0xbc>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	69ba      	ldr	r2, [r7, #24]
 800d3aa:	1ad3      	subs	r3, r2, r3
 800d3ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3b6:	d102      	bne.n	800d3be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	61fb      	str	r3, [r7, #28]
 800d3bc:	e023      	b.n	800d406 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	4b15      	ldr	r3, [pc, #84]	; (800d418 <xTaskCheckForTimeOut+0xc0>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d007      	beq.n	800d3da <xTaskCheckForTimeOut+0x82>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	69ba      	ldr	r2, [r7, #24]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d302      	bcc.n	800d3da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	61fb      	str	r3, [r7, #28]
 800d3d8:	e015      	b.n	800d406 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	697a      	ldr	r2, [r7, #20]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d20b      	bcs.n	800d3fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	681a      	ldr	r2, [r3, #0]
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	1ad2      	subs	r2, r2, r3
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f7ff ff9b 	bl	800d32c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	61fb      	str	r3, [r7, #28]
 800d3fa:	e004      	b.n	800d406 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	2200      	movs	r2, #0
 800d400:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d402:	2301      	movs	r3, #1
 800d404:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d406:	f000 fe75 	bl	800e0f4 <vPortExitCritical>

	return xReturn;
 800d40a:	69fb      	ldr	r3, [r7, #28]
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3720      	adds	r7, #32
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	20000e34 	.word	0x20000e34
 800d418:	20000e48 	.word	0x20000e48

0800d41c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d41c:	b480      	push	{r7}
 800d41e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d420:	4b03      	ldr	r3, [pc, #12]	; (800d430 <vTaskMissedYield+0x14>)
 800d422:	2201      	movs	r2, #1
 800d424:	601a      	str	r2, [r3, #0]
}
 800d426:	bf00      	nop
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr
 800d430:	20000e44 	.word	0x20000e44

0800d434 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b082      	sub	sp, #8
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d43c:	f000 f852 	bl	800d4e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d440:	4b06      	ldr	r3, [pc, #24]	; (800d45c <prvIdleTask+0x28>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	2b01      	cmp	r3, #1
 800d446:	d9f9      	bls.n	800d43c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d448:	4b05      	ldr	r3, [pc, #20]	; (800d460 <prvIdleTask+0x2c>)
 800d44a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d44e:	601a      	str	r2, [r3, #0]
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d458:	e7f0      	b.n	800d43c <prvIdleTask+0x8>
 800d45a:	bf00      	nop
 800d45c:	20000960 	.word	0x20000960
 800d460:	e000ed04 	.word	0xe000ed04

0800d464 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d46a:	2300      	movs	r3, #0
 800d46c:	607b      	str	r3, [r7, #4]
 800d46e:	e00c      	b.n	800d48a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d470:	687a      	ldr	r2, [r7, #4]
 800d472:	4613      	mov	r3, r2
 800d474:	009b      	lsls	r3, r3, #2
 800d476:	4413      	add	r3, r2
 800d478:	009b      	lsls	r3, r3, #2
 800d47a:	4a12      	ldr	r2, [pc, #72]	; (800d4c4 <prvInitialiseTaskLists+0x60>)
 800d47c:	4413      	add	r3, r2
 800d47e:	4618      	mov	r0, r3
 800d480:	f7fe fcf0 	bl	800be64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	3301      	adds	r3, #1
 800d488:	607b      	str	r3, [r7, #4]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2b37      	cmp	r3, #55	; 0x37
 800d48e:	d9ef      	bls.n	800d470 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d490:	480d      	ldr	r0, [pc, #52]	; (800d4c8 <prvInitialiseTaskLists+0x64>)
 800d492:	f7fe fce7 	bl	800be64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d496:	480d      	ldr	r0, [pc, #52]	; (800d4cc <prvInitialiseTaskLists+0x68>)
 800d498:	f7fe fce4 	bl	800be64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d49c:	480c      	ldr	r0, [pc, #48]	; (800d4d0 <prvInitialiseTaskLists+0x6c>)
 800d49e:	f7fe fce1 	bl	800be64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d4a2:	480c      	ldr	r0, [pc, #48]	; (800d4d4 <prvInitialiseTaskLists+0x70>)
 800d4a4:	f7fe fcde 	bl	800be64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d4a8:	480b      	ldr	r0, [pc, #44]	; (800d4d8 <prvInitialiseTaskLists+0x74>)
 800d4aa:	f7fe fcdb 	bl	800be64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d4ae:	4b0b      	ldr	r3, [pc, #44]	; (800d4dc <prvInitialiseTaskLists+0x78>)
 800d4b0:	4a05      	ldr	r2, [pc, #20]	; (800d4c8 <prvInitialiseTaskLists+0x64>)
 800d4b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d4b4:	4b0a      	ldr	r3, [pc, #40]	; (800d4e0 <prvInitialiseTaskLists+0x7c>)
 800d4b6:	4a05      	ldr	r2, [pc, #20]	; (800d4cc <prvInitialiseTaskLists+0x68>)
 800d4b8:	601a      	str	r2, [r3, #0]
}
 800d4ba:	bf00      	nop
 800d4bc:	3708      	adds	r7, #8
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	bf00      	nop
 800d4c4:	20000960 	.word	0x20000960
 800d4c8:	20000dc0 	.word	0x20000dc0
 800d4cc:	20000dd4 	.word	0x20000dd4
 800d4d0:	20000df0 	.word	0x20000df0
 800d4d4:	20000e04 	.word	0x20000e04
 800d4d8:	20000e1c 	.word	0x20000e1c
 800d4dc:	20000de8 	.word	0x20000de8
 800d4e0:	20000dec 	.word	0x20000dec

0800d4e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4ea:	e019      	b.n	800d520 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d4ec:	f000 fdd2 	bl	800e094 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4f0:	4b10      	ldr	r3, [pc, #64]	; (800d534 <prvCheckTasksWaitingTermination+0x50>)
 800d4f2:	68db      	ldr	r3, [r3, #12]
 800d4f4:	68db      	ldr	r3, [r3, #12]
 800d4f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	3304      	adds	r3, #4
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7fe fd3b 	bl	800bf78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d502:	4b0d      	ldr	r3, [pc, #52]	; (800d538 <prvCheckTasksWaitingTermination+0x54>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	3b01      	subs	r3, #1
 800d508:	4a0b      	ldr	r2, [pc, #44]	; (800d538 <prvCheckTasksWaitingTermination+0x54>)
 800d50a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d50c:	4b0b      	ldr	r3, [pc, #44]	; (800d53c <prvCheckTasksWaitingTermination+0x58>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	3b01      	subs	r3, #1
 800d512:	4a0a      	ldr	r2, [pc, #40]	; (800d53c <prvCheckTasksWaitingTermination+0x58>)
 800d514:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d516:	f000 fded 	bl	800e0f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f000 f810 	bl	800d540 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d520:	4b06      	ldr	r3, [pc, #24]	; (800d53c <prvCheckTasksWaitingTermination+0x58>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d1e1      	bne.n	800d4ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d528:	bf00      	nop
 800d52a:	bf00      	nop
 800d52c:	3708      	adds	r7, #8
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
 800d532:	bf00      	nop
 800d534:	20000e04 	.word	0x20000e04
 800d538:	20000e30 	.word	0x20000e30
 800d53c:	20000e18 	.word	0x20000e18

0800d540 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d540:	b580      	push	{r7, lr}
 800d542:	b084      	sub	sp, #16
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d108      	bne.n	800d564 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d556:	4618      	mov	r0, r3
 800d558:	f000 ff8a 	bl	800e470 <vPortFree>
				vPortFree( pxTCB );
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 ff87 	bl	800e470 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d562:	e018      	b.n	800d596 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d56a:	2b01      	cmp	r3, #1
 800d56c:	d103      	bne.n	800d576 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 ff7e 	bl	800e470 <vPortFree>
	}
 800d574:	e00f      	b.n	800d596 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d57c:	2b02      	cmp	r3, #2
 800d57e:	d00a      	beq.n	800d596 <prvDeleteTCB+0x56>
	__asm volatile
 800d580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d584:	f383 8811 	msr	BASEPRI, r3
 800d588:	f3bf 8f6f 	isb	sy
 800d58c:	f3bf 8f4f 	dsb	sy
 800d590:	60fb      	str	r3, [r7, #12]
}
 800d592:	bf00      	nop
 800d594:	e7fe      	b.n	800d594 <prvDeleteTCB+0x54>
	}
 800d596:	bf00      	nop
 800d598:	3710      	adds	r7, #16
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
	...

0800d5a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b083      	sub	sp, #12
 800d5a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5a6:	4b0c      	ldr	r3, [pc, #48]	; (800d5d8 <prvResetNextTaskUnblockTime+0x38>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d104      	bne.n	800d5ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d5b0:	4b0a      	ldr	r3, [pc, #40]	; (800d5dc <prvResetNextTaskUnblockTime+0x3c>)
 800d5b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d5b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d5b8:	e008      	b.n	800d5cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5ba:	4b07      	ldr	r3, [pc, #28]	; (800d5d8 <prvResetNextTaskUnblockTime+0x38>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	68db      	ldr	r3, [r3, #12]
 800d5c0:	68db      	ldr	r3, [r3, #12]
 800d5c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	4a04      	ldr	r2, [pc, #16]	; (800d5dc <prvResetNextTaskUnblockTime+0x3c>)
 800d5ca:	6013      	str	r3, [r2, #0]
}
 800d5cc:	bf00      	nop
 800d5ce:	370c      	adds	r7, #12
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr
 800d5d8:	20000de8 	.word	0x20000de8
 800d5dc:	20000e50 	.word	0x20000e50

0800d5e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b083      	sub	sp, #12
 800d5e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d5e6:	4b0b      	ldr	r3, [pc, #44]	; (800d614 <xTaskGetSchedulerState+0x34>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d102      	bne.n	800d5f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	607b      	str	r3, [r7, #4]
 800d5f2:	e008      	b.n	800d606 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5f4:	4b08      	ldr	r3, [pc, #32]	; (800d618 <xTaskGetSchedulerState+0x38>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d102      	bne.n	800d602 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d5fc:	2302      	movs	r3, #2
 800d5fe:	607b      	str	r3, [r7, #4]
 800d600:	e001      	b.n	800d606 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d602:	2300      	movs	r3, #0
 800d604:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d606:	687b      	ldr	r3, [r7, #4]
	}
 800d608:	4618      	mov	r0, r3
 800d60a:	370c      	adds	r7, #12
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr
 800d614:	20000e3c 	.word	0x20000e3c
 800d618:	20000e58 	.word	0x20000e58

0800d61c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b086      	sub	sp, #24
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d628:	2300      	movs	r3, #0
 800d62a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d056      	beq.n	800d6e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d632:	4b2e      	ldr	r3, [pc, #184]	; (800d6ec <xTaskPriorityDisinherit+0xd0>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	693a      	ldr	r2, [r7, #16]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d00a      	beq.n	800d652 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d640:	f383 8811 	msr	BASEPRI, r3
 800d644:	f3bf 8f6f 	isb	sy
 800d648:	f3bf 8f4f 	dsb	sy
 800d64c:	60fb      	str	r3, [r7, #12]
}
 800d64e:	bf00      	nop
 800d650:	e7fe      	b.n	800d650 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d656:	2b00      	cmp	r3, #0
 800d658:	d10a      	bne.n	800d670 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d65e:	f383 8811 	msr	BASEPRI, r3
 800d662:	f3bf 8f6f 	isb	sy
 800d666:	f3bf 8f4f 	dsb	sy
 800d66a:	60bb      	str	r3, [r7, #8]
}
 800d66c:	bf00      	nop
 800d66e:	e7fe      	b.n	800d66e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d674:	1e5a      	subs	r2, r3, #1
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d682:	429a      	cmp	r2, r3
 800d684:	d02c      	beq.n	800d6e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d128      	bne.n	800d6e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	3304      	adds	r3, #4
 800d692:	4618      	mov	r0, r3
 800d694:	f7fe fc70 	bl	800bf78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6b0:	4b0f      	ldr	r3, [pc, #60]	; (800d6f0 <xTaskPriorityDisinherit+0xd4>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d903      	bls.n	800d6c0 <xTaskPriorityDisinherit+0xa4>
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6bc:	4a0c      	ldr	r2, [pc, #48]	; (800d6f0 <xTaskPriorityDisinherit+0xd4>)
 800d6be:	6013      	str	r3, [r2, #0]
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6c4:	4613      	mov	r3, r2
 800d6c6:	009b      	lsls	r3, r3, #2
 800d6c8:	4413      	add	r3, r2
 800d6ca:	009b      	lsls	r3, r3, #2
 800d6cc:	4a09      	ldr	r2, [pc, #36]	; (800d6f4 <xTaskPriorityDisinherit+0xd8>)
 800d6ce:	441a      	add	r2, r3
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	3304      	adds	r3, #4
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	4610      	mov	r0, r2
 800d6d8:	f7fe fbf1 	bl	800bebe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d6e0:	697b      	ldr	r3, [r7, #20]
	}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3718      	adds	r7, #24
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	2000095c 	.word	0x2000095c
 800d6f0:	20000e38 	.word	0x20000e38
 800d6f4:	20000960 	.word	0x20000960

0800d6f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d702:	4b21      	ldr	r3, [pc, #132]	; (800d788 <prvAddCurrentTaskToDelayedList+0x90>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d708:	4b20      	ldr	r3, [pc, #128]	; (800d78c <prvAddCurrentTaskToDelayedList+0x94>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	3304      	adds	r3, #4
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fe fc32 	bl	800bf78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d71a:	d10a      	bne.n	800d732 <prvAddCurrentTaskToDelayedList+0x3a>
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d007      	beq.n	800d732 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d722:	4b1a      	ldr	r3, [pc, #104]	; (800d78c <prvAddCurrentTaskToDelayedList+0x94>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	3304      	adds	r3, #4
 800d728:	4619      	mov	r1, r3
 800d72a:	4819      	ldr	r0, [pc, #100]	; (800d790 <prvAddCurrentTaskToDelayedList+0x98>)
 800d72c:	f7fe fbc7 	bl	800bebe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d730:	e026      	b.n	800d780 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d732:	68fa      	ldr	r2, [r7, #12]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	4413      	add	r3, r2
 800d738:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d73a:	4b14      	ldr	r3, [pc, #80]	; (800d78c <prvAddCurrentTaskToDelayedList+0x94>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	68ba      	ldr	r2, [r7, #8]
 800d740:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d742:	68ba      	ldr	r2, [r7, #8]
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	429a      	cmp	r2, r3
 800d748:	d209      	bcs.n	800d75e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d74a:	4b12      	ldr	r3, [pc, #72]	; (800d794 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	4b0f      	ldr	r3, [pc, #60]	; (800d78c <prvAddCurrentTaskToDelayedList+0x94>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	3304      	adds	r3, #4
 800d754:	4619      	mov	r1, r3
 800d756:	4610      	mov	r0, r2
 800d758:	f7fe fbd5 	bl	800bf06 <vListInsert>
}
 800d75c:	e010      	b.n	800d780 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d75e:	4b0e      	ldr	r3, [pc, #56]	; (800d798 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	4b0a      	ldr	r3, [pc, #40]	; (800d78c <prvAddCurrentTaskToDelayedList+0x94>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	3304      	adds	r3, #4
 800d768:	4619      	mov	r1, r3
 800d76a:	4610      	mov	r0, r2
 800d76c:	f7fe fbcb 	bl	800bf06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d770:	4b0a      	ldr	r3, [pc, #40]	; (800d79c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	68ba      	ldr	r2, [r7, #8]
 800d776:	429a      	cmp	r2, r3
 800d778:	d202      	bcs.n	800d780 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d77a:	4a08      	ldr	r2, [pc, #32]	; (800d79c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	6013      	str	r3, [r2, #0]
}
 800d780:	bf00      	nop
 800d782:	3710      	adds	r7, #16
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}
 800d788:	20000e34 	.word	0x20000e34
 800d78c:	2000095c 	.word	0x2000095c
 800d790:	20000e1c 	.word	0x20000e1c
 800d794:	20000dec 	.word	0x20000dec
 800d798:	20000de8 	.word	0x20000de8
 800d79c:	20000e50 	.word	0x20000e50

0800d7a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b08a      	sub	sp, #40	; 0x28
 800d7a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d7aa:	f000 fb07 	bl	800ddbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d7ae:	4b1c      	ldr	r3, [pc, #112]	; (800d820 <xTimerCreateTimerTask+0x80>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d021      	beq.n	800d7fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d7be:	1d3a      	adds	r2, r7, #4
 800d7c0:	f107 0108 	add.w	r1, r7, #8
 800d7c4:	f107 030c 	add.w	r3, r7, #12
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7fe fb31 	bl	800be30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d7ce:	6879      	ldr	r1, [r7, #4]
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	68fa      	ldr	r2, [r7, #12]
 800d7d4:	9202      	str	r2, [sp, #8]
 800d7d6:	9301      	str	r3, [sp, #4]
 800d7d8:	2302      	movs	r3, #2
 800d7da:	9300      	str	r3, [sp, #0]
 800d7dc:	2300      	movs	r3, #0
 800d7de:	460a      	mov	r2, r1
 800d7e0:	4910      	ldr	r1, [pc, #64]	; (800d824 <xTimerCreateTimerTask+0x84>)
 800d7e2:	4811      	ldr	r0, [pc, #68]	; (800d828 <xTimerCreateTimerTask+0x88>)
 800d7e4:	f7ff f8de 	bl	800c9a4 <xTaskCreateStatic>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	4a10      	ldr	r2, [pc, #64]	; (800d82c <xTimerCreateTimerTask+0x8c>)
 800d7ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d7ee:	4b0f      	ldr	r3, [pc, #60]	; (800d82c <xTimerCreateTimerTask+0x8c>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d001      	beq.n	800d7fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d10a      	bne.n	800d816 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d804:	f383 8811 	msr	BASEPRI, r3
 800d808:	f3bf 8f6f 	isb	sy
 800d80c:	f3bf 8f4f 	dsb	sy
 800d810:	613b      	str	r3, [r7, #16]
}
 800d812:	bf00      	nop
 800d814:	e7fe      	b.n	800d814 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d816:	697b      	ldr	r3, [r7, #20]
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3718      	adds	r7, #24
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	20000e8c 	.word	0x20000e8c
 800d824:	0800efcc 	.word	0x0800efcc
 800d828:	0800d965 	.word	0x0800d965
 800d82c:	20000e90 	.word	0x20000e90

0800d830 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b08a      	sub	sp, #40	; 0x28
 800d834:	af00      	add	r7, sp, #0
 800d836:	60f8      	str	r0, [r7, #12]
 800d838:	60b9      	str	r1, [r7, #8]
 800d83a:	607a      	str	r2, [r7, #4]
 800d83c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d83e:	2300      	movs	r3, #0
 800d840:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d10a      	bne.n	800d85e <xTimerGenericCommand+0x2e>
	__asm volatile
 800d848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d84c:	f383 8811 	msr	BASEPRI, r3
 800d850:	f3bf 8f6f 	isb	sy
 800d854:	f3bf 8f4f 	dsb	sy
 800d858:	623b      	str	r3, [r7, #32]
}
 800d85a:	bf00      	nop
 800d85c:	e7fe      	b.n	800d85c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d85e:	4b1a      	ldr	r3, [pc, #104]	; (800d8c8 <xTimerGenericCommand+0x98>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d02a      	beq.n	800d8bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	2b05      	cmp	r3, #5
 800d876:	dc18      	bgt.n	800d8aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d878:	f7ff feb2 	bl	800d5e0 <xTaskGetSchedulerState>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b02      	cmp	r3, #2
 800d880:	d109      	bne.n	800d896 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d882:	4b11      	ldr	r3, [pc, #68]	; (800d8c8 <xTimerGenericCommand+0x98>)
 800d884:	6818      	ldr	r0, [r3, #0]
 800d886:	f107 0110 	add.w	r1, r7, #16
 800d88a:	2300      	movs	r3, #0
 800d88c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d88e:	f7fe fca1 	bl	800c1d4 <xQueueGenericSend>
 800d892:	6278      	str	r0, [r7, #36]	; 0x24
 800d894:	e012      	b.n	800d8bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d896:	4b0c      	ldr	r3, [pc, #48]	; (800d8c8 <xTimerGenericCommand+0x98>)
 800d898:	6818      	ldr	r0, [r3, #0]
 800d89a:	f107 0110 	add.w	r1, r7, #16
 800d89e:	2300      	movs	r3, #0
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	f7fe fc97 	bl	800c1d4 <xQueueGenericSend>
 800d8a6:	6278      	str	r0, [r7, #36]	; 0x24
 800d8a8:	e008      	b.n	800d8bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d8aa:	4b07      	ldr	r3, [pc, #28]	; (800d8c8 <xTimerGenericCommand+0x98>)
 800d8ac:	6818      	ldr	r0, [r3, #0]
 800d8ae:	f107 0110 	add.w	r1, r7, #16
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	683a      	ldr	r2, [r7, #0]
 800d8b6:	f7fe fd8b 	bl	800c3d0 <xQueueGenericSendFromISR>
 800d8ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3728      	adds	r7, #40	; 0x28
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	20000e8c 	.word	0x20000e8c

0800d8cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b088      	sub	sp, #32
 800d8d0:	af02      	add	r7, sp, #8
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8d6:	4b22      	ldr	r3, [pc, #136]	; (800d960 <prvProcessExpiredTimer+0x94>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	68db      	ldr	r3, [r3, #12]
 800d8de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	3304      	adds	r3, #4
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f7fe fb47 	bl	800bf78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8f0:	f003 0304 	and.w	r3, r3, #4
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d022      	beq.n	800d93e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	699a      	ldr	r2, [r3, #24]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	18d1      	adds	r1, r2, r3
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	683a      	ldr	r2, [r7, #0]
 800d904:	6978      	ldr	r0, [r7, #20]
 800d906:	f000 f8d1 	bl	800daac <prvInsertTimerInActiveList>
 800d90a:	4603      	mov	r3, r0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d01f      	beq.n	800d950 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d910:	2300      	movs	r3, #0
 800d912:	9300      	str	r3, [sp, #0]
 800d914:	2300      	movs	r3, #0
 800d916:	687a      	ldr	r2, [r7, #4]
 800d918:	2100      	movs	r1, #0
 800d91a:	6978      	ldr	r0, [r7, #20]
 800d91c:	f7ff ff88 	bl	800d830 <xTimerGenericCommand>
 800d920:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d113      	bne.n	800d950 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92c:	f383 8811 	msr	BASEPRI, r3
 800d930:	f3bf 8f6f 	isb	sy
 800d934:	f3bf 8f4f 	dsb	sy
 800d938:	60fb      	str	r3, [r7, #12]
}
 800d93a:	bf00      	nop
 800d93c:	e7fe      	b.n	800d93c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d944:	f023 0301 	bic.w	r3, r3, #1
 800d948:	b2da      	uxtb	r2, r3
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	6a1b      	ldr	r3, [r3, #32]
 800d954:	6978      	ldr	r0, [r7, #20]
 800d956:	4798      	blx	r3
}
 800d958:	bf00      	nop
 800d95a:	3718      	adds	r7, #24
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	20000e84 	.word	0x20000e84

0800d964 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b084      	sub	sp, #16
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d96c:	f107 0308 	add.w	r3, r7, #8
 800d970:	4618      	mov	r0, r3
 800d972:	f000 f857 	bl	800da24 <prvGetNextExpireTime>
 800d976:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	4619      	mov	r1, r3
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	f000 f803 	bl	800d988 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d982:	f000 f8d5 	bl	800db30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d986:	e7f1      	b.n	800d96c <prvTimerTask+0x8>

0800d988 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b084      	sub	sp, #16
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d992:	f7ff fa43 	bl	800ce1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d996:	f107 0308 	add.w	r3, r7, #8
 800d99a:	4618      	mov	r0, r3
 800d99c:	f000 f866 	bl	800da6c <prvSampleTimeNow>
 800d9a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d130      	bne.n	800da0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d10a      	bne.n	800d9c4 <prvProcessTimerOrBlockTask+0x3c>
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d806      	bhi.n	800d9c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d9b6:	f7ff fa3f 	bl	800ce38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d9ba:	68f9      	ldr	r1, [r7, #12]
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f7ff ff85 	bl	800d8cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d9c2:	e024      	b.n	800da0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d008      	beq.n	800d9dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d9ca:	4b13      	ldr	r3, [pc, #76]	; (800da18 <prvProcessTimerOrBlockTask+0x90>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d101      	bne.n	800d9d8 <prvProcessTimerOrBlockTask+0x50>
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	e000      	b.n	800d9da <prvProcessTimerOrBlockTask+0x52>
 800d9d8:	2300      	movs	r3, #0
 800d9da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d9dc:	4b0f      	ldr	r3, [pc, #60]	; (800da1c <prvProcessTimerOrBlockTask+0x94>)
 800d9de:	6818      	ldr	r0, [r3, #0]
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	1ad3      	subs	r3, r2, r3
 800d9e6:	683a      	ldr	r2, [r7, #0]
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	f7fe ffa7 	bl	800c93c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d9ee:	f7ff fa23 	bl	800ce38 <xTaskResumeAll>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d10a      	bne.n	800da0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d9f8:	4b09      	ldr	r3, [pc, #36]	; (800da20 <prvProcessTimerOrBlockTask+0x98>)
 800d9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9fe:	601a      	str	r2, [r3, #0]
 800da00:	f3bf 8f4f 	dsb	sy
 800da04:	f3bf 8f6f 	isb	sy
}
 800da08:	e001      	b.n	800da0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800da0a:	f7ff fa15 	bl	800ce38 <xTaskResumeAll>
}
 800da0e:	bf00      	nop
 800da10:	3710      	adds	r7, #16
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	20000e88 	.word	0x20000e88
 800da1c:	20000e8c 	.word	0x20000e8c
 800da20:	e000ed04 	.word	0xe000ed04

0800da24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800da24:	b480      	push	{r7}
 800da26:	b085      	sub	sp, #20
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800da2c:	4b0e      	ldr	r3, [pc, #56]	; (800da68 <prvGetNextExpireTime+0x44>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d101      	bne.n	800da3a <prvGetNextExpireTime+0x16>
 800da36:	2201      	movs	r2, #1
 800da38:	e000      	b.n	800da3c <prvGetNextExpireTime+0x18>
 800da3a:	2200      	movs	r2, #0
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d105      	bne.n	800da54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800da48:	4b07      	ldr	r3, [pc, #28]	; (800da68 <prvGetNextExpireTime+0x44>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	60fb      	str	r3, [r7, #12]
 800da52:	e001      	b.n	800da58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800da54:	2300      	movs	r3, #0
 800da56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800da58:	68fb      	ldr	r3, [r7, #12]
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3714      	adds	r7, #20
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr
 800da66:	bf00      	nop
 800da68:	20000e84 	.word	0x20000e84

0800da6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800da74:	f7ff fa7e 	bl	800cf74 <xTaskGetTickCount>
 800da78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800da7a:	4b0b      	ldr	r3, [pc, #44]	; (800daa8 <prvSampleTimeNow+0x3c>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	68fa      	ldr	r2, [r7, #12]
 800da80:	429a      	cmp	r2, r3
 800da82:	d205      	bcs.n	800da90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800da84:	f000 f936 	bl	800dcf4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2201      	movs	r2, #1
 800da8c:	601a      	str	r2, [r3, #0]
 800da8e:	e002      	b.n	800da96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2200      	movs	r2, #0
 800da94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800da96:	4a04      	ldr	r2, [pc, #16]	; (800daa8 <prvSampleTimeNow+0x3c>)
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800da9c:	68fb      	ldr	r3, [r7, #12]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	20000e94 	.word	0x20000e94

0800daac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b086      	sub	sp, #24
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	60b9      	str	r1, [r7, #8]
 800dab6:	607a      	str	r2, [r7, #4]
 800dab8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800daba:	2300      	movs	r3, #0
 800dabc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	68ba      	ldr	r2, [r7, #8]
 800dac2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	68fa      	ldr	r2, [r7, #12]
 800dac8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800daca:	68ba      	ldr	r2, [r7, #8]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d812      	bhi.n	800daf8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	1ad2      	subs	r2, r2, r3
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	699b      	ldr	r3, [r3, #24]
 800dadc:	429a      	cmp	r2, r3
 800dade:	d302      	bcc.n	800dae6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dae0:	2301      	movs	r3, #1
 800dae2:	617b      	str	r3, [r7, #20]
 800dae4:	e01b      	b.n	800db1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dae6:	4b10      	ldr	r3, [pc, #64]	; (800db28 <prvInsertTimerInActiveList+0x7c>)
 800dae8:	681a      	ldr	r2, [r3, #0]
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	3304      	adds	r3, #4
 800daee:	4619      	mov	r1, r3
 800daf0:	4610      	mov	r0, r2
 800daf2:	f7fe fa08 	bl	800bf06 <vListInsert>
 800daf6:	e012      	b.n	800db1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800daf8:	687a      	ldr	r2, [r7, #4]
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d206      	bcs.n	800db0e <prvInsertTimerInActiveList+0x62>
 800db00:	68ba      	ldr	r2, [r7, #8]
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	429a      	cmp	r2, r3
 800db06:	d302      	bcc.n	800db0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800db08:	2301      	movs	r3, #1
 800db0a:	617b      	str	r3, [r7, #20]
 800db0c:	e007      	b.n	800db1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db0e:	4b07      	ldr	r3, [pc, #28]	; (800db2c <prvInsertTimerInActiveList+0x80>)
 800db10:	681a      	ldr	r2, [r3, #0]
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	3304      	adds	r3, #4
 800db16:	4619      	mov	r1, r3
 800db18:	4610      	mov	r0, r2
 800db1a:	f7fe f9f4 	bl	800bf06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800db1e:	697b      	ldr	r3, [r7, #20]
}
 800db20:	4618      	mov	r0, r3
 800db22:	3718      	adds	r7, #24
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}
 800db28:	20000e88 	.word	0x20000e88
 800db2c:	20000e84 	.word	0x20000e84

0800db30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b08e      	sub	sp, #56	; 0x38
 800db34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db36:	e0ca      	b.n	800dcce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	da18      	bge.n	800db70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800db3e:	1d3b      	adds	r3, r7, #4
 800db40:	3304      	adds	r3, #4
 800db42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800db44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db46:	2b00      	cmp	r3, #0
 800db48:	d10a      	bne.n	800db60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800db4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db4e:	f383 8811 	msr	BASEPRI, r3
 800db52:	f3bf 8f6f 	isb	sy
 800db56:	f3bf 8f4f 	dsb	sy
 800db5a:	61fb      	str	r3, [r7, #28]
}
 800db5c:	bf00      	nop
 800db5e:	e7fe      	b.n	800db5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800db60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db66:	6850      	ldr	r0, [r2, #4]
 800db68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db6a:	6892      	ldr	r2, [r2, #8]
 800db6c:	4611      	mov	r1, r2
 800db6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2b00      	cmp	r3, #0
 800db74:	f2c0 80aa 	blt.w	800dccc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800db7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7e:	695b      	ldr	r3, [r3, #20]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d004      	beq.n	800db8e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db86:	3304      	adds	r3, #4
 800db88:	4618      	mov	r0, r3
 800db8a:	f7fe f9f5 	bl	800bf78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db8e:	463b      	mov	r3, r7
 800db90:	4618      	mov	r0, r3
 800db92:	f7ff ff6b 	bl	800da6c <prvSampleTimeNow>
 800db96:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2b09      	cmp	r3, #9
 800db9c:	f200 8097 	bhi.w	800dcce <prvProcessReceivedCommands+0x19e>
 800dba0:	a201      	add	r2, pc, #4	; (adr r2, 800dba8 <prvProcessReceivedCommands+0x78>)
 800dba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dba6:	bf00      	nop
 800dba8:	0800dbd1 	.word	0x0800dbd1
 800dbac:	0800dbd1 	.word	0x0800dbd1
 800dbb0:	0800dbd1 	.word	0x0800dbd1
 800dbb4:	0800dc45 	.word	0x0800dc45
 800dbb8:	0800dc59 	.word	0x0800dc59
 800dbbc:	0800dca3 	.word	0x0800dca3
 800dbc0:	0800dbd1 	.word	0x0800dbd1
 800dbc4:	0800dbd1 	.word	0x0800dbd1
 800dbc8:	0800dc45 	.word	0x0800dc45
 800dbcc:	0800dc59 	.word	0x0800dc59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbd6:	f043 0301 	orr.w	r3, r3, #1
 800dbda:	b2da      	uxtb	r2, r3
 800dbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dbe2:	68ba      	ldr	r2, [r7, #8]
 800dbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe6:	699b      	ldr	r3, [r3, #24]
 800dbe8:	18d1      	adds	r1, r2, r3
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbf0:	f7ff ff5c 	bl	800daac <prvInsertTimerInActiveList>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d069      	beq.n	800dcce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbfc:	6a1b      	ldr	r3, [r3, #32]
 800dbfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc08:	f003 0304 	and.w	r3, r3, #4
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d05e      	beq.n	800dcce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dc10:	68ba      	ldr	r2, [r7, #8]
 800dc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc14:	699b      	ldr	r3, [r3, #24]
 800dc16:	441a      	add	r2, r3
 800dc18:	2300      	movs	r3, #0
 800dc1a:	9300      	str	r3, [sp, #0]
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	2100      	movs	r1, #0
 800dc20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc22:	f7ff fe05 	bl	800d830 <xTimerGenericCommand>
 800dc26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dc28:	6a3b      	ldr	r3, [r7, #32]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d14f      	bne.n	800dcce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc32:	f383 8811 	msr	BASEPRI, r3
 800dc36:	f3bf 8f6f 	isb	sy
 800dc3a:	f3bf 8f4f 	dsb	sy
 800dc3e:	61bb      	str	r3, [r7, #24]
}
 800dc40:	bf00      	nop
 800dc42:	e7fe      	b.n	800dc42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc4a:	f023 0301 	bic.w	r3, r3, #1
 800dc4e:	b2da      	uxtb	r2, r3
 800dc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dc56:	e03a      	b.n	800dcce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc5e:	f043 0301 	orr.w	r3, r3, #1
 800dc62:	b2da      	uxtb	r2, r3
 800dc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dc6a:	68ba      	ldr	r2, [r7, #8]
 800dc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc72:	699b      	ldr	r3, [r3, #24]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d10a      	bne.n	800dc8e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800dc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc7c:	f383 8811 	msr	BASEPRI, r3
 800dc80:	f3bf 8f6f 	isb	sy
 800dc84:	f3bf 8f4f 	dsb	sy
 800dc88:	617b      	str	r3, [r7, #20]
}
 800dc8a:	bf00      	nop
 800dc8c:	e7fe      	b.n	800dc8c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc90:	699a      	ldr	r2, [r3, #24]
 800dc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc94:	18d1      	adds	r1, r2, r3
 800dc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc9c:	f7ff ff06 	bl	800daac <prvInsertTimerInActiveList>
					break;
 800dca0:	e015      	b.n	800dcce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dca8:	f003 0302 	and.w	r3, r3, #2
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d103      	bne.n	800dcb8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dcb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcb2:	f000 fbdd 	bl	800e470 <vPortFree>
 800dcb6:	e00a      	b.n	800dcce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcbe:	f023 0301 	bic.w	r3, r3, #1
 800dcc2:	b2da      	uxtb	r2, r3
 800dcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dcca:	e000      	b.n	800dcce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dccc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dcce:	4b08      	ldr	r3, [pc, #32]	; (800dcf0 <prvProcessReceivedCommands+0x1c0>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	1d39      	adds	r1, r7, #4
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fe fc16 	bl	800c508 <xQueueReceive>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	f47f af2a 	bne.w	800db38 <prvProcessReceivedCommands+0x8>
	}
}
 800dce4:	bf00      	nop
 800dce6:	bf00      	nop
 800dce8:	3730      	adds	r7, #48	; 0x30
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	20000e8c 	.word	0x20000e8c

0800dcf4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b088      	sub	sp, #32
 800dcf8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dcfa:	e048      	b.n	800dd8e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dcfc:	4b2d      	ldr	r3, [pc, #180]	; (800ddb4 <prvSwitchTimerLists+0xc0>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	68db      	ldr	r3, [r3, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd06:	4b2b      	ldr	r3, [pc, #172]	; (800ddb4 <prvSwitchTimerLists+0xc0>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	68db      	ldr	r3, [r3, #12]
 800dd0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	3304      	adds	r3, #4
 800dd14:	4618      	mov	r0, r3
 800dd16:	f7fe f92f 	bl	800bf78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	6a1b      	ldr	r3, [r3, #32]
 800dd1e:	68f8      	ldr	r0, [r7, #12]
 800dd20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd28:	f003 0304 	and.w	r3, r3, #4
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d02e      	beq.n	800dd8e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	699b      	ldr	r3, [r3, #24]
 800dd34:	693a      	ldr	r2, [r7, #16]
 800dd36:	4413      	add	r3, r2
 800dd38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dd3a:	68ba      	ldr	r2, [r7, #8]
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d90e      	bls.n	800dd60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	68ba      	ldr	r2, [r7, #8]
 800dd46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	68fa      	ldr	r2, [r7, #12]
 800dd4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd4e:	4b19      	ldr	r3, [pc, #100]	; (800ddb4 <prvSwitchTimerLists+0xc0>)
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	3304      	adds	r3, #4
 800dd56:	4619      	mov	r1, r3
 800dd58:	4610      	mov	r0, r2
 800dd5a:	f7fe f8d4 	bl	800bf06 <vListInsert>
 800dd5e:	e016      	b.n	800dd8e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dd60:	2300      	movs	r3, #0
 800dd62:	9300      	str	r3, [sp, #0]
 800dd64:	2300      	movs	r3, #0
 800dd66:	693a      	ldr	r2, [r7, #16]
 800dd68:	2100      	movs	r1, #0
 800dd6a:	68f8      	ldr	r0, [r7, #12]
 800dd6c:	f7ff fd60 	bl	800d830 <xTimerGenericCommand>
 800dd70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d10a      	bne.n	800dd8e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7c:	f383 8811 	msr	BASEPRI, r3
 800dd80:	f3bf 8f6f 	isb	sy
 800dd84:	f3bf 8f4f 	dsb	sy
 800dd88:	603b      	str	r3, [r7, #0]
}
 800dd8a:	bf00      	nop
 800dd8c:	e7fe      	b.n	800dd8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dd8e:	4b09      	ldr	r3, [pc, #36]	; (800ddb4 <prvSwitchTimerLists+0xc0>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d1b1      	bne.n	800dcfc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dd98:	4b06      	ldr	r3, [pc, #24]	; (800ddb4 <prvSwitchTimerLists+0xc0>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dd9e:	4b06      	ldr	r3, [pc, #24]	; (800ddb8 <prvSwitchTimerLists+0xc4>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4a04      	ldr	r2, [pc, #16]	; (800ddb4 <prvSwitchTimerLists+0xc0>)
 800dda4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dda6:	4a04      	ldr	r2, [pc, #16]	; (800ddb8 <prvSwitchTimerLists+0xc4>)
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	6013      	str	r3, [r2, #0]
}
 800ddac:	bf00      	nop
 800ddae:	3718      	adds	r7, #24
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	20000e84 	.word	0x20000e84
 800ddb8:	20000e88 	.word	0x20000e88

0800ddbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b082      	sub	sp, #8
 800ddc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ddc2:	f000 f967 	bl	800e094 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ddc6:	4b15      	ldr	r3, [pc, #84]	; (800de1c <prvCheckForValidListAndQueue+0x60>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d120      	bne.n	800de10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ddce:	4814      	ldr	r0, [pc, #80]	; (800de20 <prvCheckForValidListAndQueue+0x64>)
 800ddd0:	f7fe f848 	bl	800be64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ddd4:	4813      	ldr	r0, [pc, #76]	; (800de24 <prvCheckForValidListAndQueue+0x68>)
 800ddd6:	f7fe f845 	bl	800be64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ddda:	4b13      	ldr	r3, [pc, #76]	; (800de28 <prvCheckForValidListAndQueue+0x6c>)
 800dddc:	4a10      	ldr	r2, [pc, #64]	; (800de20 <prvCheckForValidListAndQueue+0x64>)
 800ddde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dde0:	4b12      	ldr	r3, [pc, #72]	; (800de2c <prvCheckForValidListAndQueue+0x70>)
 800dde2:	4a10      	ldr	r2, [pc, #64]	; (800de24 <prvCheckForValidListAndQueue+0x68>)
 800dde4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dde6:	2300      	movs	r3, #0
 800dde8:	9300      	str	r3, [sp, #0]
 800ddea:	4b11      	ldr	r3, [pc, #68]	; (800de30 <prvCheckForValidListAndQueue+0x74>)
 800ddec:	4a11      	ldr	r2, [pc, #68]	; (800de34 <prvCheckForValidListAndQueue+0x78>)
 800ddee:	2110      	movs	r1, #16
 800ddf0:	200a      	movs	r0, #10
 800ddf2:	f7fe f953 	bl	800c09c <xQueueGenericCreateStatic>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	4a08      	ldr	r2, [pc, #32]	; (800de1c <prvCheckForValidListAndQueue+0x60>)
 800ddfa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ddfc:	4b07      	ldr	r3, [pc, #28]	; (800de1c <prvCheckForValidListAndQueue+0x60>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d005      	beq.n	800de10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800de04:	4b05      	ldr	r3, [pc, #20]	; (800de1c <prvCheckForValidListAndQueue+0x60>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	490b      	ldr	r1, [pc, #44]	; (800de38 <prvCheckForValidListAndQueue+0x7c>)
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7fe fd6c 	bl	800c8e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de10:	f000 f970 	bl	800e0f4 <vPortExitCritical>
}
 800de14:	bf00      	nop
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	20000e8c 	.word	0x20000e8c
 800de20:	20000e5c 	.word	0x20000e5c
 800de24:	20000e70 	.word	0x20000e70
 800de28:	20000e84 	.word	0x20000e84
 800de2c:	20000e88 	.word	0x20000e88
 800de30:	20000f38 	.word	0x20000f38
 800de34:	20000e98 	.word	0x20000e98
 800de38:	0800efd4 	.word	0x0800efd4

0800de3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800de3c:	b480      	push	{r7}
 800de3e:	b085      	sub	sp, #20
 800de40:	af00      	add	r7, sp, #0
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	3b04      	subs	r3, #4
 800de4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800de54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	3b04      	subs	r3, #4
 800de5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	f023 0201 	bic.w	r2, r3, #1
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	3b04      	subs	r3, #4
 800de6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800de6c:	4a0c      	ldr	r2, [pc, #48]	; (800dea0 <pxPortInitialiseStack+0x64>)
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	3b14      	subs	r3, #20
 800de76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	3b04      	subs	r3, #4
 800de82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f06f 0202 	mvn.w	r2, #2
 800de8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	3b20      	subs	r3, #32
 800de90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800de92:	68fb      	ldr	r3, [r7, #12]
}
 800de94:	4618      	mov	r0, r3
 800de96:	3714      	adds	r7, #20
 800de98:	46bd      	mov	sp, r7
 800de9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9e:	4770      	bx	lr
 800dea0:	0800dea5 	.word	0x0800dea5

0800dea4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dea4:	b480      	push	{r7}
 800dea6:	b085      	sub	sp, #20
 800dea8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800deaa:	2300      	movs	r3, #0
 800deac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800deae:	4b12      	ldr	r3, [pc, #72]	; (800def8 <prvTaskExitError+0x54>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deb6:	d00a      	beq.n	800dece <prvTaskExitError+0x2a>
	__asm volatile
 800deb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800debc:	f383 8811 	msr	BASEPRI, r3
 800dec0:	f3bf 8f6f 	isb	sy
 800dec4:	f3bf 8f4f 	dsb	sy
 800dec8:	60fb      	str	r3, [r7, #12]
}
 800deca:	bf00      	nop
 800decc:	e7fe      	b.n	800decc <prvTaskExitError+0x28>
	__asm volatile
 800dece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded2:	f383 8811 	msr	BASEPRI, r3
 800ded6:	f3bf 8f6f 	isb	sy
 800deda:	f3bf 8f4f 	dsb	sy
 800dede:	60bb      	str	r3, [r7, #8]
}
 800dee0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dee2:	bf00      	nop
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d0fc      	beq.n	800dee4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800deea:	bf00      	nop
 800deec:	bf00      	nop
 800deee:	3714      	adds	r7, #20
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr
 800def8:	20000168 	.word	0x20000168
 800defc:	00000000 	.word	0x00000000

0800df00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800df00:	4b07      	ldr	r3, [pc, #28]	; (800df20 <pxCurrentTCBConst2>)
 800df02:	6819      	ldr	r1, [r3, #0]
 800df04:	6808      	ldr	r0, [r1, #0]
 800df06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df0a:	f380 8809 	msr	PSP, r0
 800df0e:	f3bf 8f6f 	isb	sy
 800df12:	f04f 0000 	mov.w	r0, #0
 800df16:	f380 8811 	msr	BASEPRI, r0
 800df1a:	4770      	bx	lr
 800df1c:	f3af 8000 	nop.w

0800df20 <pxCurrentTCBConst2>:
 800df20:	2000095c 	.word	0x2000095c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800df24:	bf00      	nop
 800df26:	bf00      	nop

0800df28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800df28:	4808      	ldr	r0, [pc, #32]	; (800df4c <prvPortStartFirstTask+0x24>)
 800df2a:	6800      	ldr	r0, [r0, #0]
 800df2c:	6800      	ldr	r0, [r0, #0]
 800df2e:	f380 8808 	msr	MSP, r0
 800df32:	f04f 0000 	mov.w	r0, #0
 800df36:	f380 8814 	msr	CONTROL, r0
 800df3a:	b662      	cpsie	i
 800df3c:	b661      	cpsie	f
 800df3e:	f3bf 8f4f 	dsb	sy
 800df42:	f3bf 8f6f 	isb	sy
 800df46:	df00      	svc	0
 800df48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800df4a:	bf00      	nop
 800df4c:	e000ed08 	.word	0xe000ed08

0800df50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b086      	sub	sp, #24
 800df54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800df56:	4b46      	ldr	r3, [pc, #280]	; (800e070 <xPortStartScheduler+0x120>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4a46      	ldr	r2, [pc, #280]	; (800e074 <xPortStartScheduler+0x124>)
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d10a      	bne.n	800df76 <xPortStartScheduler+0x26>
	__asm volatile
 800df60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df64:	f383 8811 	msr	BASEPRI, r3
 800df68:	f3bf 8f6f 	isb	sy
 800df6c:	f3bf 8f4f 	dsb	sy
 800df70:	613b      	str	r3, [r7, #16]
}
 800df72:	bf00      	nop
 800df74:	e7fe      	b.n	800df74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800df76:	4b3e      	ldr	r3, [pc, #248]	; (800e070 <xPortStartScheduler+0x120>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4a3f      	ldr	r2, [pc, #252]	; (800e078 <xPortStartScheduler+0x128>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d10a      	bne.n	800df96 <xPortStartScheduler+0x46>
	__asm volatile
 800df80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df84:	f383 8811 	msr	BASEPRI, r3
 800df88:	f3bf 8f6f 	isb	sy
 800df8c:	f3bf 8f4f 	dsb	sy
 800df90:	60fb      	str	r3, [r7, #12]
}
 800df92:	bf00      	nop
 800df94:	e7fe      	b.n	800df94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800df96:	4b39      	ldr	r3, [pc, #228]	; (800e07c <xPortStartScheduler+0x12c>)
 800df98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	b2db      	uxtb	r3, r3
 800dfa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	22ff      	movs	r2, #255	; 0xff
 800dfa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	b2db      	uxtb	r3, r3
 800dfae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dfb0:	78fb      	ldrb	r3, [r7, #3]
 800dfb2:	b2db      	uxtb	r3, r3
 800dfb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dfb8:	b2da      	uxtb	r2, r3
 800dfba:	4b31      	ldr	r3, [pc, #196]	; (800e080 <xPortStartScheduler+0x130>)
 800dfbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dfbe:	4b31      	ldr	r3, [pc, #196]	; (800e084 <xPortStartScheduler+0x134>)
 800dfc0:	2207      	movs	r2, #7
 800dfc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dfc4:	e009      	b.n	800dfda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dfc6:	4b2f      	ldr	r3, [pc, #188]	; (800e084 <xPortStartScheduler+0x134>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	3b01      	subs	r3, #1
 800dfcc:	4a2d      	ldr	r2, [pc, #180]	; (800e084 <xPortStartScheduler+0x134>)
 800dfce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dfd0:	78fb      	ldrb	r3, [r7, #3]
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	005b      	lsls	r3, r3, #1
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dfda:	78fb      	ldrb	r3, [r7, #3]
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfe2:	2b80      	cmp	r3, #128	; 0x80
 800dfe4:	d0ef      	beq.n	800dfc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dfe6:	4b27      	ldr	r3, [pc, #156]	; (800e084 <xPortStartScheduler+0x134>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f1c3 0307 	rsb	r3, r3, #7
 800dfee:	2b04      	cmp	r3, #4
 800dff0:	d00a      	beq.n	800e008 <xPortStartScheduler+0xb8>
	__asm volatile
 800dff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff6:	f383 8811 	msr	BASEPRI, r3
 800dffa:	f3bf 8f6f 	isb	sy
 800dffe:	f3bf 8f4f 	dsb	sy
 800e002:	60bb      	str	r3, [r7, #8]
}
 800e004:	bf00      	nop
 800e006:	e7fe      	b.n	800e006 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e008:	4b1e      	ldr	r3, [pc, #120]	; (800e084 <xPortStartScheduler+0x134>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	021b      	lsls	r3, r3, #8
 800e00e:	4a1d      	ldr	r2, [pc, #116]	; (800e084 <xPortStartScheduler+0x134>)
 800e010:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e012:	4b1c      	ldr	r3, [pc, #112]	; (800e084 <xPortStartScheduler+0x134>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e01a:	4a1a      	ldr	r2, [pc, #104]	; (800e084 <xPortStartScheduler+0x134>)
 800e01c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	b2da      	uxtb	r2, r3
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e026:	4b18      	ldr	r3, [pc, #96]	; (800e088 <xPortStartScheduler+0x138>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	4a17      	ldr	r2, [pc, #92]	; (800e088 <xPortStartScheduler+0x138>)
 800e02c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e030:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e032:	4b15      	ldr	r3, [pc, #84]	; (800e088 <xPortStartScheduler+0x138>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	4a14      	ldr	r2, [pc, #80]	; (800e088 <xPortStartScheduler+0x138>)
 800e038:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e03c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e03e:	f000 f8dd 	bl	800e1fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e042:	4b12      	ldr	r3, [pc, #72]	; (800e08c <xPortStartScheduler+0x13c>)
 800e044:	2200      	movs	r2, #0
 800e046:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e048:	f000 f8fc 	bl	800e244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e04c:	4b10      	ldr	r3, [pc, #64]	; (800e090 <xPortStartScheduler+0x140>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a0f      	ldr	r2, [pc, #60]	; (800e090 <xPortStartScheduler+0x140>)
 800e052:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e056:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e058:	f7ff ff66 	bl	800df28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e05c:	f7ff f854 	bl	800d108 <vTaskSwitchContext>
	prvTaskExitError();
 800e060:	f7ff ff20 	bl	800dea4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e064:	2300      	movs	r3, #0
}
 800e066:	4618      	mov	r0, r3
 800e068:	3718      	adds	r7, #24
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	e000ed00 	.word	0xe000ed00
 800e074:	410fc271 	.word	0x410fc271
 800e078:	410fc270 	.word	0x410fc270
 800e07c:	e000e400 	.word	0xe000e400
 800e080:	20000f88 	.word	0x20000f88
 800e084:	20000f8c 	.word	0x20000f8c
 800e088:	e000ed20 	.word	0xe000ed20
 800e08c:	20000168 	.word	0x20000168
 800e090:	e000ef34 	.word	0xe000ef34

0800e094 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e094:	b480      	push	{r7}
 800e096:	b083      	sub	sp, #12
 800e098:	af00      	add	r7, sp, #0
	__asm volatile
 800e09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e09e:	f383 8811 	msr	BASEPRI, r3
 800e0a2:	f3bf 8f6f 	isb	sy
 800e0a6:	f3bf 8f4f 	dsb	sy
 800e0aa:	607b      	str	r3, [r7, #4]
}
 800e0ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e0ae:	4b0f      	ldr	r3, [pc, #60]	; (800e0ec <vPortEnterCritical+0x58>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	4a0d      	ldr	r2, [pc, #52]	; (800e0ec <vPortEnterCritical+0x58>)
 800e0b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e0b8:	4b0c      	ldr	r3, [pc, #48]	; (800e0ec <vPortEnterCritical+0x58>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	d10f      	bne.n	800e0e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e0c0:	4b0b      	ldr	r3, [pc, #44]	; (800e0f0 <vPortEnterCritical+0x5c>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d00a      	beq.n	800e0e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ce:	f383 8811 	msr	BASEPRI, r3
 800e0d2:	f3bf 8f6f 	isb	sy
 800e0d6:	f3bf 8f4f 	dsb	sy
 800e0da:	603b      	str	r3, [r7, #0]
}
 800e0dc:	bf00      	nop
 800e0de:	e7fe      	b.n	800e0de <vPortEnterCritical+0x4a>
	}
}
 800e0e0:	bf00      	nop
 800e0e2:	370c      	adds	r7, #12
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr
 800e0ec:	20000168 	.word	0x20000168
 800e0f0:	e000ed04 	.word	0xe000ed04

0800e0f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b083      	sub	sp, #12
 800e0f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e0fa:	4b12      	ldr	r3, [pc, #72]	; (800e144 <vPortExitCritical+0x50>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d10a      	bne.n	800e118 <vPortExitCritical+0x24>
	__asm volatile
 800e102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e106:	f383 8811 	msr	BASEPRI, r3
 800e10a:	f3bf 8f6f 	isb	sy
 800e10e:	f3bf 8f4f 	dsb	sy
 800e112:	607b      	str	r3, [r7, #4]
}
 800e114:	bf00      	nop
 800e116:	e7fe      	b.n	800e116 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e118:	4b0a      	ldr	r3, [pc, #40]	; (800e144 <vPortExitCritical+0x50>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	3b01      	subs	r3, #1
 800e11e:	4a09      	ldr	r2, [pc, #36]	; (800e144 <vPortExitCritical+0x50>)
 800e120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e122:	4b08      	ldr	r3, [pc, #32]	; (800e144 <vPortExitCritical+0x50>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d105      	bne.n	800e136 <vPortExitCritical+0x42>
 800e12a:	2300      	movs	r3, #0
 800e12c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	f383 8811 	msr	BASEPRI, r3
}
 800e134:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e136:	bf00      	nop
 800e138:	370c      	adds	r7, #12
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr
 800e142:	bf00      	nop
 800e144:	20000168 	.word	0x20000168
	...

0800e150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e150:	f3ef 8009 	mrs	r0, PSP
 800e154:	f3bf 8f6f 	isb	sy
 800e158:	4b15      	ldr	r3, [pc, #84]	; (800e1b0 <pxCurrentTCBConst>)
 800e15a:	681a      	ldr	r2, [r3, #0]
 800e15c:	f01e 0f10 	tst.w	lr, #16
 800e160:	bf08      	it	eq
 800e162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e16a:	6010      	str	r0, [r2, #0]
 800e16c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e170:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e174:	f380 8811 	msr	BASEPRI, r0
 800e178:	f3bf 8f4f 	dsb	sy
 800e17c:	f3bf 8f6f 	isb	sy
 800e180:	f7fe ffc2 	bl	800d108 <vTaskSwitchContext>
 800e184:	f04f 0000 	mov.w	r0, #0
 800e188:	f380 8811 	msr	BASEPRI, r0
 800e18c:	bc09      	pop	{r0, r3}
 800e18e:	6819      	ldr	r1, [r3, #0]
 800e190:	6808      	ldr	r0, [r1, #0]
 800e192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e196:	f01e 0f10 	tst.w	lr, #16
 800e19a:	bf08      	it	eq
 800e19c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e1a0:	f380 8809 	msr	PSP, r0
 800e1a4:	f3bf 8f6f 	isb	sy
 800e1a8:	4770      	bx	lr
 800e1aa:	bf00      	nop
 800e1ac:	f3af 8000 	nop.w

0800e1b0 <pxCurrentTCBConst>:
 800e1b0:	2000095c 	.word	0x2000095c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e1b4:	bf00      	nop
 800e1b6:	bf00      	nop

0800e1b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
	__asm volatile
 800e1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c2:	f383 8811 	msr	BASEPRI, r3
 800e1c6:	f3bf 8f6f 	isb	sy
 800e1ca:	f3bf 8f4f 	dsb	sy
 800e1ce:	607b      	str	r3, [r7, #4]
}
 800e1d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e1d2:	f7fe fedf 	bl	800cf94 <xTaskIncrementTick>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d003      	beq.n	800e1e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e1dc:	4b06      	ldr	r3, [pc, #24]	; (800e1f8 <xPortSysTickHandler+0x40>)
 800e1de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1e2:	601a      	str	r2, [r3, #0]
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	f383 8811 	msr	BASEPRI, r3
}
 800e1ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e1f0:	bf00      	nop
 800e1f2:	3708      	adds	r7, #8
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	e000ed04 	.word	0xe000ed04

0800e1fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e200:	4b0b      	ldr	r3, [pc, #44]	; (800e230 <vPortSetupTimerInterrupt+0x34>)
 800e202:	2200      	movs	r2, #0
 800e204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e206:	4b0b      	ldr	r3, [pc, #44]	; (800e234 <vPortSetupTimerInterrupt+0x38>)
 800e208:	2200      	movs	r2, #0
 800e20a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e20c:	4b0a      	ldr	r3, [pc, #40]	; (800e238 <vPortSetupTimerInterrupt+0x3c>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4a0a      	ldr	r2, [pc, #40]	; (800e23c <vPortSetupTimerInterrupt+0x40>)
 800e212:	fba2 2303 	umull	r2, r3, r2, r3
 800e216:	099b      	lsrs	r3, r3, #6
 800e218:	4a09      	ldr	r2, [pc, #36]	; (800e240 <vPortSetupTimerInterrupt+0x44>)
 800e21a:	3b01      	subs	r3, #1
 800e21c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e21e:	4b04      	ldr	r3, [pc, #16]	; (800e230 <vPortSetupTimerInterrupt+0x34>)
 800e220:	2207      	movs	r2, #7
 800e222:	601a      	str	r2, [r3, #0]
}
 800e224:	bf00      	nop
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr
 800e22e:	bf00      	nop
 800e230:	e000e010 	.word	0xe000e010
 800e234:	e000e018 	.word	0xe000e018
 800e238:	20000158 	.word	0x20000158
 800e23c:	10624dd3 	.word	0x10624dd3
 800e240:	e000e014 	.word	0xe000e014

0800e244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e254 <vPortEnableVFP+0x10>
 800e248:	6801      	ldr	r1, [r0, #0]
 800e24a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e24e:	6001      	str	r1, [r0, #0]
 800e250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e252:	bf00      	nop
 800e254:	e000ed88 	.word	0xe000ed88

0800e258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e258:	b480      	push	{r7}
 800e25a:	b085      	sub	sp, #20
 800e25c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e25e:	f3ef 8305 	mrs	r3, IPSR
 800e262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2b0f      	cmp	r3, #15
 800e268:	d914      	bls.n	800e294 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e26a:	4a17      	ldr	r2, [pc, #92]	; (800e2c8 <vPortValidateInterruptPriority+0x70>)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	4413      	add	r3, r2
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e274:	4b15      	ldr	r3, [pc, #84]	; (800e2cc <vPortValidateInterruptPriority+0x74>)
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	7afa      	ldrb	r2, [r7, #11]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d20a      	bcs.n	800e294 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e282:	f383 8811 	msr	BASEPRI, r3
 800e286:	f3bf 8f6f 	isb	sy
 800e28a:	f3bf 8f4f 	dsb	sy
 800e28e:	607b      	str	r3, [r7, #4]
}
 800e290:	bf00      	nop
 800e292:	e7fe      	b.n	800e292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e294:	4b0e      	ldr	r3, [pc, #56]	; (800e2d0 <vPortValidateInterruptPriority+0x78>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e29c:	4b0d      	ldr	r3, [pc, #52]	; (800e2d4 <vPortValidateInterruptPriority+0x7c>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d90a      	bls.n	800e2ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a8:	f383 8811 	msr	BASEPRI, r3
 800e2ac:	f3bf 8f6f 	isb	sy
 800e2b0:	f3bf 8f4f 	dsb	sy
 800e2b4:	603b      	str	r3, [r7, #0]
}
 800e2b6:	bf00      	nop
 800e2b8:	e7fe      	b.n	800e2b8 <vPortValidateInterruptPriority+0x60>
	}
 800e2ba:	bf00      	nop
 800e2bc:	3714      	adds	r7, #20
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr
 800e2c6:	bf00      	nop
 800e2c8:	e000e3f0 	.word	0xe000e3f0
 800e2cc:	20000f88 	.word	0x20000f88
 800e2d0:	e000ed0c 	.word	0xe000ed0c
 800e2d4:	20000f8c 	.word	0x20000f8c

0800e2d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b08a      	sub	sp, #40	; 0x28
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e2e4:	f7fe fd9a 	bl	800ce1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e2e8:	4b5b      	ldr	r3, [pc, #364]	; (800e458 <pvPortMalloc+0x180>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d101      	bne.n	800e2f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e2f0:	f000 f920 	bl	800e534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e2f4:	4b59      	ldr	r3, [pc, #356]	; (800e45c <pvPortMalloc+0x184>)
 800e2f6:	681a      	ldr	r2, [r3, #0]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	4013      	ands	r3, r2
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	f040 8093 	bne.w	800e428 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d01d      	beq.n	800e344 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e308:	2208      	movs	r2, #8
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	4413      	add	r3, r2
 800e30e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f003 0307 	and.w	r3, r3, #7
 800e316:	2b00      	cmp	r3, #0
 800e318:	d014      	beq.n	800e344 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f023 0307 	bic.w	r3, r3, #7
 800e320:	3308      	adds	r3, #8
 800e322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f003 0307 	and.w	r3, r3, #7
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d00a      	beq.n	800e344 <pvPortMalloc+0x6c>
	__asm volatile
 800e32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e332:	f383 8811 	msr	BASEPRI, r3
 800e336:	f3bf 8f6f 	isb	sy
 800e33a:	f3bf 8f4f 	dsb	sy
 800e33e:	617b      	str	r3, [r7, #20]
}
 800e340:	bf00      	nop
 800e342:	e7fe      	b.n	800e342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d06e      	beq.n	800e428 <pvPortMalloc+0x150>
 800e34a:	4b45      	ldr	r3, [pc, #276]	; (800e460 <pvPortMalloc+0x188>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	687a      	ldr	r2, [r7, #4]
 800e350:	429a      	cmp	r2, r3
 800e352:	d869      	bhi.n	800e428 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e354:	4b43      	ldr	r3, [pc, #268]	; (800e464 <pvPortMalloc+0x18c>)
 800e356:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e358:	4b42      	ldr	r3, [pc, #264]	; (800e464 <pvPortMalloc+0x18c>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e35e:	e004      	b.n	800e36a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e362:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	687a      	ldr	r2, [r7, #4]
 800e370:	429a      	cmp	r2, r3
 800e372:	d903      	bls.n	800e37c <pvPortMalloc+0xa4>
 800e374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d1f1      	bne.n	800e360 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e37c:	4b36      	ldr	r3, [pc, #216]	; (800e458 <pvPortMalloc+0x180>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e382:	429a      	cmp	r2, r3
 800e384:	d050      	beq.n	800e428 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e386:	6a3b      	ldr	r3, [r7, #32]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	2208      	movs	r2, #8
 800e38c:	4413      	add	r3, r2
 800e38e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e392:	681a      	ldr	r2, [r3, #0]
 800e394:	6a3b      	ldr	r3, [r7, #32]
 800e396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39a:	685a      	ldr	r2, [r3, #4]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	1ad2      	subs	r2, r2, r3
 800e3a0:	2308      	movs	r3, #8
 800e3a2:	005b      	lsls	r3, r3, #1
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d91f      	bls.n	800e3e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e3a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	4413      	add	r3, r2
 800e3ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e3b0:	69bb      	ldr	r3, [r7, #24]
 800e3b2:	f003 0307 	and.w	r3, r3, #7
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d00a      	beq.n	800e3d0 <pvPortMalloc+0xf8>
	__asm volatile
 800e3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3be:	f383 8811 	msr	BASEPRI, r3
 800e3c2:	f3bf 8f6f 	isb	sy
 800e3c6:	f3bf 8f4f 	dsb	sy
 800e3ca:	613b      	str	r3, [r7, #16]
}
 800e3cc:	bf00      	nop
 800e3ce:	e7fe      	b.n	800e3ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d2:	685a      	ldr	r2, [r3, #4]
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	1ad2      	subs	r2, r2, r3
 800e3d8:	69bb      	ldr	r3, [r7, #24]
 800e3da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e3e2:	69b8      	ldr	r0, [r7, #24]
 800e3e4:	f000 f908 	bl	800e5f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e3e8:	4b1d      	ldr	r3, [pc, #116]	; (800e460 <pvPortMalloc+0x188>)
 800e3ea:	681a      	ldr	r2, [r3, #0]
 800e3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	1ad3      	subs	r3, r2, r3
 800e3f2:	4a1b      	ldr	r2, [pc, #108]	; (800e460 <pvPortMalloc+0x188>)
 800e3f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e3f6:	4b1a      	ldr	r3, [pc, #104]	; (800e460 <pvPortMalloc+0x188>)
 800e3f8:	681a      	ldr	r2, [r3, #0]
 800e3fa:	4b1b      	ldr	r3, [pc, #108]	; (800e468 <pvPortMalloc+0x190>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d203      	bcs.n	800e40a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e402:	4b17      	ldr	r3, [pc, #92]	; (800e460 <pvPortMalloc+0x188>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	4a18      	ldr	r2, [pc, #96]	; (800e468 <pvPortMalloc+0x190>)
 800e408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40c:	685a      	ldr	r2, [r3, #4]
 800e40e:	4b13      	ldr	r3, [pc, #76]	; (800e45c <pvPortMalloc+0x184>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	431a      	orrs	r2, r3
 800e414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41a:	2200      	movs	r2, #0
 800e41c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e41e:	4b13      	ldr	r3, [pc, #76]	; (800e46c <pvPortMalloc+0x194>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	3301      	adds	r3, #1
 800e424:	4a11      	ldr	r2, [pc, #68]	; (800e46c <pvPortMalloc+0x194>)
 800e426:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e428:	f7fe fd06 	bl	800ce38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	f003 0307 	and.w	r3, r3, #7
 800e432:	2b00      	cmp	r3, #0
 800e434:	d00a      	beq.n	800e44c <pvPortMalloc+0x174>
	__asm volatile
 800e436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e43a:	f383 8811 	msr	BASEPRI, r3
 800e43e:	f3bf 8f6f 	isb	sy
 800e442:	f3bf 8f4f 	dsb	sy
 800e446:	60fb      	str	r3, [r7, #12]
}
 800e448:	bf00      	nop
 800e44a:	e7fe      	b.n	800e44a <pvPortMalloc+0x172>
	return pvReturn;
 800e44c:	69fb      	ldr	r3, [r7, #28]
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3728      	adds	r7, #40	; 0x28
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	20004b98 	.word	0x20004b98
 800e45c:	20004bac 	.word	0x20004bac
 800e460:	20004b9c 	.word	0x20004b9c
 800e464:	20004b90 	.word	0x20004b90
 800e468:	20004ba0 	.word	0x20004ba0
 800e46c:	20004ba4 	.word	0x20004ba4

0800e470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b086      	sub	sp, #24
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d04d      	beq.n	800e51e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e482:	2308      	movs	r3, #8
 800e484:	425b      	negs	r3, r3
 800e486:	697a      	ldr	r2, [r7, #20]
 800e488:	4413      	add	r3, r2
 800e48a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	685a      	ldr	r2, [r3, #4]
 800e494:	4b24      	ldr	r3, [pc, #144]	; (800e528 <vPortFree+0xb8>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	4013      	ands	r3, r2
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d10a      	bne.n	800e4b4 <vPortFree+0x44>
	__asm volatile
 800e49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a2:	f383 8811 	msr	BASEPRI, r3
 800e4a6:	f3bf 8f6f 	isb	sy
 800e4aa:	f3bf 8f4f 	dsb	sy
 800e4ae:	60fb      	str	r3, [r7, #12]
}
 800e4b0:	bf00      	nop
 800e4b2:	e7fe      	b.n	800e4b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e4b4:	693b      	ldr	r3, [r7, #16]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d00a      	beq.n	800e4d2 <vPortFree+0x62>
	__asm volatile
 800e4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c0:	f383 8811 	msr	BASEPRI, r3
 800e4c4:	f3bf 8f6f 	isb	sy
 800e4c8:	f3bf 8f4f 	dsb	sy
 800e4cc:	60bb      	str	r3, [r7, #8]
}
 800e4ce:	bf00      	nop
 800e4d0:	e7fe      	b.n	800e4d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	685a      	ldr	r2, [r3, #4]
 800e4d6:	4b14      	ldr	r3, [pc, #80]	; (800e528 <vPortFree+0xb8>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	4013      	ands	r3, r2
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d01e      	beq.n	800e51e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e4e0:	693b      	ldr	r3, [r7, #16]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d11a      	bne.n	800e51e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	685a      	ldr	r2, [r3, #4]
 800e4ec:	4b0e      	ldr	r3, [pc, #56]	; (800e528 <vPortFree+0xb8>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	43db      	mvns	r3, r3
 800e4f2:	401a      	ands	r2, r3
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e4f8:	f7fe fc90 	bl	800ce1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	685a      	ldr	r2, [r3, #4]
 800e500:	4b0a      	ldr	r3, [pc, #40]	; (800e52c <vPortFree+0xbc>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	4413      	add	r3, r2
 800e506:	4a09      	ldr	r2, [pc, #36]	; (800e52c <vPortFree+0xbc>)
 800e508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e50a:	6938      	ldr	r0, [r7, #16]
 800e50c:	f000 f874 	bl	800e5f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e510:	4b07      	ldr	r3, [pc, #28]	; (800e530 <vPortFree+0xc0>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	3301      	adds	r3, #1
 800e516:	4a06      	ldr	r2, [pc, #24]	; (800e530 <vPortFree+0xc0>)
 800e518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e51a:	f7fe fc8d 	bl	800ce38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e51e:	bf00      	nop
 800e520:	3718      	adds	r7, #24
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	20004bac 	.word	0x20004bac
 800e52c:	20004b9c 	.word	0x20004b9c
 800e530:	20004ba8 	.word	0x20004ba8

0800e534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e534:	b480      	push	{r7}
 800e536:	b085      	sub	sp, #20
 800e538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e53a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e53e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e540:	4b27      	ldr	r3, [pc, #156]	; (800e5e0 <prvHeapInit+0xac>)
 800e542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	f003 0307 	and.w	r3, r3, #7
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d00c      	beq.n	800e568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	3307      	adds	r3, #7
 800e552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f023 0307 	bic.w	r3, r3, #7
 800e55a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e55c:	68ba      	ldr	r2, [r7, #8]
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	1ad3      	subs	r3, r2, r3
 800e562:	4a1f      	ldr	r2, [pc, #124]	; (800e5e0 <prvHeapInit+0xac>)
 800e564:	4413      	add	r3, r2
 800e566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e56c:	4a1d      	ldr	r2, [pc, #116]	; (800e5e4 <prvHeapInit+0xb0>)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e572:	4b1c      	ldr	r3, [pc, #112]	; (800e5e4 <prvHeapInit+0xb0>)
 800e574:	2200      	movs	r2, #0
 800e576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	68ba      	ldr	r2, [r7, #8]
 800e57c:	4413      	add	r3, r2
 800e57e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e580:	2208      	movs	r2, #8
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	1a9b      	subs	r3, r3, r2
 800e586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	f023 0307 	bic.w	r3, r3, #7
 800e58e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	4a15      	ldr	r2, [pc, #84]	; (800e5e8 <prvHeapInit+0xb4>)
 800e594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e596:	4b14      	ldr	r3, [pc, #80]	; (800e5e8 <prvHeapInit+0xb4>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	2200      	movs	r2, #0
 800e59c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e59e:	4b12      	ldr	r3, [pc, #72]	; (800e5e8 <prvHeapInit+0xb4>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	68fa      	ldr	r2, [r7, #12]
 800e5ae:	1ad2      	subs	r2, r2, r3
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e5b4:	4b0c      	ldr	r3, [pc, #48]	; (800e5e8 <prvHeapInit+0xb4>)
 800e5b6:	681a      	ldr	r2, [r3, #0]
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	4a0a      	ldr	r2, [pc, #40]	; (800e5ec <prvHeapInit+0xb8>)
 800e5c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	4a09      	ldr	r2, [pc, #36]	; (800e5f0 <prvHeapInit+0xbc>)
 800e5ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e5cc:	4b09      	ldr	r3, [pc, #36]	; (800e5f4 <prvHeapInit+0xc0>)
 800e5ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e5d2:	601a      	str	r2, [r3, #0]
}
 800e5d4:	bf00      	nop
 800e5d6:	3714      	adds	r7, #20
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5de:	4770      	bx	lr
 800e5e0:	20000f90 	.word	0x20000f90
 800e5e4:	20004b90 	.word	0x20004b90
 800e5e8:	20004b98 	.word	0x20004b98
 800e5ec:	20004ba0 	.word	0x20004ba0
 800e5f0:	20004b9c 	.word	0x20004b9c
 800e5f4:	20004bac 	.word	0x20004bac

0800e5f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b085      	sub	sp, #20
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e600:	4b28      	ldr	r3, [pc, #160]	; (800e6a4 <prvInsertBlockIntoFreeList+0xac>)
 800e602:	60fb      	str	r3, [r7, #12]
 800e604:	e002      	b.n	800e60c <prvInsertBlockIntoFreeList+0x14>
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	60fb      	str	r3, [r7, #12]
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	687a      	ldr	r2, [r7, #4]
 800e612:	429a      	cmp	r2, r3
 800e614:	d8f7      	bhi.n	800e606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	685b      	ldr	r3, [r3, #4]
 800e61e:	68ba      	ldr	r2, [r7, #8]
 800e620:	4413      	add	r3, r2
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	429a      	cmp	r2, r3
 800e626:	d108      	bne.n	800e63a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	685a      	ldr	r2, [r3, #4]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	441a      	add	r2, r3
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	68ba      	ldr	r2, [r7, #8]
 800e644:	441a      	add	r2, r3
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d118      	bne.n	800e680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681a      	ldr	r2, [r3, #0]
 800e652:	4b15      	ldr	r3, [pc, #84]	; (800e6a8 <prvInsertBlockIntoFreeList+0xb0>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	429a      	cmp	r2, r3
 800e658:	d00d      	beq.n	800e676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	685a      	ldr	r2, [r3, #4]
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	441a      	add	r2, r3
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	601a      	str	r2, [r3, #0]
 800e674:	e008      	b.n	800e688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e676:	4b0c      	ldr	r3, [pc, #48]	; (800e6a8 <prvInsertBlockIntoFreeList+0xb0>)
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	601a      	str	r2, [r3, #0]
 800e67e:	e003      	b.n	800e688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681a      	ldr	r2, [r3, #0]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e688:	68fa      	ldr	r2, [r7, #12]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d002      	beq.n	800e696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e696:	bf00      	nop
 800e698:	3714      	adds	r7, #20
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop
 800e6a4:	20004b90 	.word	0x20004b90
 800e6a8:	20004b98 	.word	0x20004b98

0800e6ac <__errno>:
 800e6ac:	4b01      	ldr	r3, [pc, #4]	; (800e6b4 <__errno+0x8>)
 800e6ae:	6818      	ldr	r0, [r3, #0]
 800e6b0:	4770      	bx	lr
 800e6b2:	bf00      	nop
 800e6b4:	2000016c 	.word	0x2000016c

0800e6b8 <__libc_init_array>:
 800e6b8:	b570      	push	{r4, r5, r6, lr}
 800e6ba:	4d0d      	ldr	r5, [pc, #52]	; (800e6f0 <__libc_init_array+0x38>)
 800e6bc:	4c0d      	ldr	r4, [pc, #52]	; (800e6f4 <__libc_init_array+0x3c>)
 800e6be:	1b64      	subs	r4, r4, r5
 800e6c0:	10a4      	asrs	r4, r4, #2
 800e6c2:	2600      	movs	r6, #0
 800e6c4:	42a6      	cmp	r6, r4
 800e6c6:	d109      	bne.n	800e6dc <__libc_init_array+0x24>
 800e6c8:	4d0b      	ldr	r5, [pc, #44]	; (800e6f8 <__libc_init_array+0x40>)
 800e6ca:	4c0c      	ldr	r4, [pc, #48]	; (800e6fc <__libc_init_array+0x44>)
 800e6cc:	f000 fc4e 	bl	800ef6c <_init>
 800e6d0:	1b64      	subs	r4, r4, r5
 800e6d2:	10a4      	asrs	r4, r4, #2
 800e6d4:	2600      	movs	r6, #0
 800e6d6:	42a6      	cmp	r6, r4
 800e6d8:	d105      	bne.n	800e6e6 <__libc_init_array+0x2e>
 800e6da:	bd70      	pop	{r4, r5, r6, pc}
 800e6dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6e0:	4798      	blx	r3
 800e6e2:	3601      	adds	r6, #1
 800e6e4:	e7ee      	b.n	800e6c4 <__libc_init_array+0xc>
 800e6e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6ea:	4798      	blx	r3
 800e6ec:	3601      	adds	r6, #1
 800e6ee:	e7f2      	b.n	800e6d6 <__libc_init_array+0x1e>
 800e6f0:	0800f104 	.word	0x0800f104
 800e6f4:	0800f104 	.word	0x0800f104
 800e6f8:	0800f104 	.word	0x0800f104
 800e6fc:	0800f108 	.word	0x0800f108

0800e700 <memcpy>:
 800e700:	440a      	add	r2, r1
 800e702:	4291      	cmp	r1, r2
 800e704:	f100 33ff 	add.w	r3, r0, #4294967295
 800e708:	d100      	bne.n	800e70c <memcpy+0xc>
 800e70a:	4770      	bx	lr
 800e70c:	b510      	push	{r4, lr}
 800e70e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e712:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e716:	4291      	cmp	r1, r2
 800e718:	d1f9      	bne.n	800e70e <memcpy+0xe>
 800e71a:	bd10      	pop	{r4, pc}

0800e71c <memset>:
 800e71c:	4402      	add	r2, r0
 800e71e:	4603      	mov	r3, r0
 800e720:	4293      	cmp	r3, r2
 800e722:	d100      	bne.n	800e726 <memset+0xa>
 800e724:	4770      	bx	lr
 800e726:	f803 1b01 	strb.w	r1, [r3], #1
 800e72a:	e7f9      	b.n	800e720 <memset+0x4>

0800e72c <siprintf>:
 800e72c:	b40e      	push	{r1, r2, r3}
 800e72e:	b500      	push	{lr}
 800e730:	b09c      	sub	sp, #112	; 0x70
 800e732:	ab1d      	add	r3, sp, #116	; 0x74
 800e734:	9002      	str	r0, [sp, #8]
 800e736:	9006      	str	r0, [sp, #24]
 800e738:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e73c:	4809      	ldr	r0, [pc, #36]	; (800e764 <siprintf+0x38>)
 800e73e:	9107      	str	r1, [sp, #28]
 800e740:	9104      	str	r1, [sp, #16]
 800e742:	4909      	ldr	r1, [pc, #36]	; (800e768 <siprintf+0x3c>)
 800e744:	f853 2b04 	ldr.w	r2, [r3], #4
 800e748:	9105      	str	r1, [sp, #20]
 800e74a:	6800      	ldr	r0, [r0, #0]
 800e74c:	9301      	str	r3, [sp, #4]
 800e74e:	a902      	add	r1, sp, #8
 800e750:	f000 f868 	bl	800e824 <_svfiprintf_r>
 800e754:	9b02      	ldr	r3, [sp, #8]
 800e756:	2200      	movs	r2, #0
 800e758:	701a      	strb	r2, [r3, #0]
 800e75a:	b01c      	add	sp, #112	; 0x70
 800e75c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e760:	b003      	add	sp, #12
 800e762:	4770      	bx	lr
 800e764:	2000016c 	.word	0x2000016c
 800e768:	ffff0208 	.word	0xffff0208

0800e76c <__ssputs_r>:
 800e76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e770:	688e      	ldr	r6, [r1, #8]
 800e772:	429e      	cmp	r6, r3
 800e774:	4682      	mov	sl, r0
 800e776:	460c      	mov	r4, r1
 800e778:	4690      	mov	r8, r2
 800e77a:	461f      	mov	r7, r3
 800e77c:	d838      	bhi.n	800e7f0 <__ssputs_r+0x84>
 800e77e:	898a      	ldrh	r2, [r1, #12]
 800e780:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e784:	d032      	beq.n	800e7ec <__ssputs_r+0x80>
 800e786:	6825      	ldr	r5, [r4, #0]
 800e788:	6909      	ldr	r1, [r1, #16]
 800e78a:	eba5 0901 	sub.w	r9, r5, r1
 800e78e:	6965      	ldr	r5, [r4, #20]
 800e790:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e794:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e798:	3301      	adds	r3, #1
 800e79a:	444b      	add	r3, r9
 800e79c:	106d      	asrs	r5, r5, #1
 800e79e:	429d      	cmp	r5, r3
 800e7a0:	bf38      	it	cc
 800e7a2:	461d      	movcc	r5, r3
 800e7a4:	0553      	lsls	r3, r2, #21
 800e7a6:	d531      	bpl.n	800e80c <__ssputs_r+0xa0>
 800e7a8:	4629      	mov	r1, r5
 800e7aa:	f000 fb39 	bl	800ee20 <_malloc_r>
 800e7ae:	4606      	mov	r6, r0
 800e7b0:	b950      	cbnz	r0, 800e7c8 <__ssputs_r+0x5c>
 800e7b2:	230c      	movs	r3, #12
 800e7b4:	f8ca 3000 	str.w	r3, [sl]
 800e7b8:	89a3      	ldrh	r3, [r4, #12]
 800e7ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7be:	81a3      	strh	r3, [r4, #12]
 800e7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7c8:	6921      	ldr	r1, [r4, #16]
 800e7ca:	464a      	mov	r2, r9
 800e7cc:	f7ff ff98 	bl	800e700 <memcpy>
 800e7d0:	89a3      	ldrh	r3, [r4, #12]
 800e7d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e7d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7da:	81a3      	strh	r3, [r4, #12]
 800e7dc:	6126      	str	r6, [r4, #16]
 800e7de:	6165      	str	r5, [r4, #20]
 800e7e0:	444e      	add	r6, r9
 800e7e2:	eba5 0509 	sub.w	r5, r5, r9
 800e7e6:	6026      	str	r6, [r4, #0]
 800e7e8:	60a5      	str	r5, [r4, #8]
 800e7ea:	463e      	mov	r6, r7
 800e7ec:	42be      	cmp	r6, r7
 800e7ee:	d900      	bls.n	800e7f2 <__ssputs_r+0x86>
 800e7f0:	463e      	mov	r6, r7
 800e7f2:	4632      	mov	r2, r6
 800e7f4:	6820      	ldr	r0, [r4, #0]
 800e7f6:	4641      	mov	r1, r8
 800e7f8:	f000 faa8 	bl	800ed4c <memmove>
 800e7fc:	68a3      	ldr	r3, [r4, #8]
 800e7fe:	6822      	ldr	r2, [r4, #0]
 800e800:	1b9b      	subs	r3, r3, r6
 800e802:	4432      	add	r2, r6
 800e804:	60a3      	str	r3, [r4, #8]
 800e806:	6022      	str	r2, [r4, #0]
 800e808:	2000      	movs	r0, #0
 800e80a:	e7db      	b.n	800e7c4 <__ssputs_r+0x58>
 800e80c:	462a      	mov	r2, r5
 800e80e:	f000 fb61 	bl	800eed4 <_realloc_r>
 800e812:	4606      	mov	r6, r0
 800e814:	2800      	cmp	r0, #0
 800e816:	d1e1      	bne.n	800e7dc <__ssputs_r+0x70>
 800e818:	6921      	ldr	r1, [r4, #16]
 800e81a:	4650      	mov	r0, sl
 800e81c:	f000 fab0 	bl	800ed80 <_free_r>
 800e820:	e7c7      	b.n	800e7b2 <__ssputs_r+0x46>
	...

0800e824 <_svfiprintf_r>:
 800e824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e828:	4698      	mov	r8, r3
 800e82a:	898b      	ldrh	r3, [r1, #12]
 800e82c:	061b      	lsls	r3, r3, #24
 800e82e:	b09d      	sub	sp, #116	; 0x74
 800e830:	4607      	mov	r7, r0
 800e832:	460d      	mov	r5, r1
 800e834:	4614      	mov	r4, r2
 800e836:	d50e      	bpl.n	800e856 <_svfiprintf_r+0x32>
 800e838:	690b      	ldr	r3, [r1, #16]
 800e83a:	b963      	cbnz	r3, 800e856 <_svfiprintf_r+0x32>
 800e83c:	2140      	movs	r1, #64	; 0x40
 800e83e:	f000 faef 	bl	800ee20 <_malloc_r>
 800e842:	6028      	str	r0, [r5, #0]
 800e844:	6128      	str	r0, [r5, #16]
 800e846:	b920      	cbnz	r0, 800e852 <_svfiprintf_r+0x2e>
 800e848:	230c      	movs	r3, #12
 800e84a:	603b      	str	r3, [r7, #0]
 800e84c:	f04f 30ff 	mov.w	r0, #4294967295
 800e850:	e0d1      	b.n	800e9f6 <_svfiprintf_r+0x1d2>
 800e852:	2340      	movs	r3, #64	; 0x40
 800e854:	616b      	str	r3, [r5, #20]
 800e856:	2300      	movs	r3, #0
 800e858:	9309      	str	r3, [sp, #36]	; 0x24
 800e85a:	2320      	movs	r3, #32
 800e85c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e860:	f8cd 800c 	str.w	r8, [sp, #12]
 800e864:	2330      	movs	r3, #48	; 0x30
 800e866:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ea10 <_svfiprintf_r+0x1ec>
 800e86a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e86e:	f04f 0901 	mov.w	r9, #1
 800e872:	4623      	mov	r3, r4
 800e874:	469a      	mov	sl, r3
 800e876:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e87a:	b10a      	cbz	r2, 800e880 <_svfiprintf_r+0x5c>
 800e87c:	2a25      	cmp	r2, #37	; 0x25
 800e87e:	d1f9      	bne.n	800e874 <_svfiprintf_r+0x50>
 800e880:	ebba 0b04 	subs.w	fp, sl, r4
 800e884:	d00b      	beq.n	800e89e <_svfiprintf_r+0x7a>
 800e886:	465b      	mov	r3, fp
 800e888:	4622      	mov	r2, r4
 800e88a:	4629      	mov	r1, r5
 800e88c:	4638      	mov	r0, r7
 800e88e:	f7ff ff6d 	bl	800e76c <__ssputs_r>
 800e892:	3001      	adds	r0, #1
 800e894:	f000 80aa 	beq.w	800e9ec <_svfiprintf_r+0x1c8>
 800e898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e89a:	445a      	add	r2, fp
 800e89c:	9209      	str	r2, [sp, #36]	; 0x24
 800e89e:	f89a 3000 	ldrb.w	r3, [sl]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	f000 80a2 	beq.w	800e9ec <_svfiprintf_r+0x1c8>
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8b2:	f10a 0a01 	add.w	sl, sl, #1
 800e8b6:	9304      	str	r3, [sp, #16]
 800e8b8:	9307      	str	r3, [sp, #28]
 800e8ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e8be:	931a      	str	r3, [sp, #104]	; 0x68
 800e8c0:	4654      	mov	r4, sl
 800e8c2:	2205      	movs	r2, #5
 800e8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8c8:	4851      	ldr	r0, [pc, #324]	; (800ea10 <_svfiprintf_r+0x1ec>)
 800e8ca:	f7f1 fd09 	bl	80002e0 <memchr>
 800e8ce:	9a04      	ldr	r2, [sp, #16]
 800e8d0:	b9d8      	cbnz	r0, 800e90a <_svfiprintf_r+0xe6>
 800e8d2:	06d0      	lsls	r0, r2, #27
 800e8d4:	bf44      	itt	mi
 800e8d6:	2320      	movmi	r3, #32
 800e8d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8dc:	0711      	lsls	r1, r2, #28
 800e8de:	bf44      	itt	mi
 800e8e0:	232b      	movmi	r3, #43	; 0x2b
 800e8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8e6:	f89a 3000 	ldrb.w	r3, [sl]
 800e8ea:	2b2a      	cmp	r3, #42	; 0x2a
 800e8ec:	d015      	beq.n	800e91a <_svfiprintf_r+0xf6>
 800e8ee:	9a07      	ldr	r2, [sp, #28]
 800e8f0:	4654      	mov	r4, sl
 800e8f2:	2000      	movs	r0, #0
 800e8f4:	f04f 0c0a 	mov.w	ip, #10
 800e8f8:	4621      	mov	r1, r4
 800e8fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8fe:	3b30      	subs	r3, #48	; 0x30
 800e900:	2b09      	cmp	r3, #9
 800e902:	d94e      	bls.n	800e9a2 <_svfiprintf_r+0x17e>
 800e904:	b1b0      	cbz	r0, 800e934 <_svfiprintf_r+0x110>
 800e906:	9207      	str	r2, [sp, #28]
 800e908:	e014      	b.n	800e934 <_svfiprintf_r+0x110>
 800e90a:	eba0 0308 	sub.w	r3, r0, r8
 800e90e:	fa09 f303 	lsl.w	r3, r9, r3
 800e912:	4313      	orrs	r3, r2
 800e914:	9304      	str	r3, [sp, #16]
 800e916:	46a2      	mov	sl, r4
 800e918:	e7d2      	b.n	800e8c0 <_svfiprintf_r+0x9c>
 800e91a:	9b03      	ldr	r3, [sp, #12]
 800e91c:	1d19      	adds	r1, r3, #4
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	9103      	str	r1, [sp, #12]
 800e922:	2b00      	cmp	r3, #0
 800e924:	bfbb      	ittet	lt
 800e926:	425b      	neglt	r3, r3
 800e928:	f042 0202 	orrlt.w	r2, r2, #2
 800e92c:	9307      	strge	r3, [sp, #28]
 800e92e:	9307      	strlt	r3, [sp, #28]
 800e930:	bfb8      	it	lt
 800e932:	9204      	strlt	r2, [sp, #16]
 800e934:	7823      	ldrb	r3, [r4, #0]
 800e936:	2b2e      	cmp	r3, #46	; 0x2e
 800e938:	d10c      	bne.n	800e954 <_svfiprintf_r+0x130>
 800e93a:	7863      	ldrb	r3, [r4, #1]
 800e93c:	2b2a      	cmp	r3, #42	; 0x2a
 800e93e:	d135      	bne.n	800e9ac <_svfiprintf_r+0x188>
 800e940:	9b03      	ldr	r3, [sp, #12]
 800e942:	1d1a      	adds	r2, r3, #4
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	9203      	str	r2, [sp, #12]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	bfb8      	it	lt
 800e94c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e950:	3402      	adds	r4, #2
 800e952:	9305      	str	r3, [sp, #20]
 800e954:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ea20 <_svfiprintf_r+0x1fc>
 800e958:	7821      	ldrb	r1, [r4, #0]
 800e95a:	2203      	movs	r2, #3
 800e95c:	4650      	mov	r0, sl
 800e95e:	f7f1 fcbf 	bl	80002e0 <memchr>
 800e962:	b140      	cbz	r0, 800e976 <_svfiprintf_r+0x152>
 800e964:	2340      	movs	r3, #64	; 0x40
 800e966:	eba0 000a 	sub.w	r0, r0, sl
 800e96a:	fa03 f000 	lsl.w	r0, r3, r0
 800e96e:	9b04      	ldr	r3, [sp, #16]
 800e970:	4303      	orrs	r3, r0
 800e972:	3401      	adds	r4, #1
 800e974:	9304      	str	r3, [sp, #16]
 800e976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e97a:	4826      	ldr	r0, [pc, #152]	; (800ea14 <_svfiprintf_r+0x1f0>)
 800e97c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e980:	2206      	movs	r2, #6
 800e982:	f7f1 fcad 	bl	80002e0 <memchr>
 800e986:	2800      	cmp	r0, #0
 800e988:	d038      	beq.n	800e9fc <_svfiprintf_r+0x1d8>
 800e98a:	4b23      	ldr	r3, [pc, #140]	; (800ea18 <_svfiprintf_r+0x1f4>)
 800e98c:	bb1b      	cbnz	r3, 800e9d6 <_svfiprintf_r+0x1b2>
 800e98e:	9b03      	ldr	r3, [sp, #12]
 800e990:	3307      	adds	r3, #7
 800e992:	f023 0307 	bic.w	r3, r3, #7
 800e996:	3308      	adds	r3, #8
 800e998:	9303      	str	r3, [sp, #12]
 800e99a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e99c:	4433      	add	r3, r6
 800e99e:	9309      	str	r3, [sp, #36]	; 0x24
 800e9a0:	e767      	b.n	800e872 <_svfiprintf_r+0x4e>
 800e9a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9a6:	460c      	mov	r4, r1
 800e9a8:	2001      	movs	r0, #1
 800e9aa:	e7a5      	b.n	800e8f8 <_svfiprintf_r+0xd4>
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	3401      	adds	r4, #1
 800e9b0:	9305      	str	r3, [sp, #20]
 800e9b2:	4619      	mov	r1, r3
 800e9b4:	f04f 0c0a 	mov.w	ip, #10
 800e9b8:	4620      	mov	r0, r4
 800e9ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9be:	3a30      	subs	r2, #48	; 0x30
 800e9c0:	2a09      	cmp	r2, #9
 800e9c2:	d903      	bls.n	800e9cc <_svfiprintf_r+0x1a8>
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d0c5      	beq.n	800e954 <_svfiprintf_r+0x130>
 800e9c8:	9105      	str	r1, [sp, #20]
 800e9ca:	e7c3      	b.n	800e954 <_svfiprintf_r+0x130>
 800e9cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9d0:	4604      	mov	r4, r0
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	e7f0      	b.n	800e9b8 <_svfiprintf_r+0x194>
 800e9d6:	ab03      	add	r3, sp, #12
 800e9d8:	9300      	str	r3, [sp, #0]
 800e9da:	462a      	mov	r2, r5
 800e9dc:	4b0f      	ldr	r3, [pc, #60]	; (800ea1c <_svfiprintf_r+0x1f8>)
 800e9de:	a904      	add	r1, sp, #16
 800e9e0:	4638      	mov	r0, r7
 800e9e2:	f3af 8000 	nop.w
 800e9e6:	1c42      	adds	r2, r0, #1
 800e9e8:	4606      	mov	r6, r0
 800e9ea:	d1d6      	bne.n	800e99a <_svfiprintf_r+0x176>
 800e9ec:	89ab      	ldrh	r3, [r5, #12]
 800e9ee:	065b      	lsls	r3, r3, #25
 800e9f0:	f53f af2c 	bmi.w	800e84c <_svfiprintf_r+0x28>
 800e9f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9f6:	b01d      	add	sp, #116	; 0x74
 800e9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9fc:	ab03      	add	r3, sp, #12
 800e9fe:	9300      	str	r3, [sp, #0]
 800ea00:	462a      	mov	r2, r5
 800ea02:	4b06      	ldr	r3, [pc, #24]	; (800ea1c <_svfiprintf_r+0x1f8>)
 800ea04:	a904      	add	r1, sp, #16
 800ea06:	4638      	mov	r0, r7
 800ea08:	f000 f87a 	bl	800eb00 <_printf_i>
 800ea0c:	e7eb      	b.n	800e9e6 <_svfiprintf_r+0x1c2>
 800ea0e:	bf00      	nop
 800ea10:	0800f0c8 	.word	0x0800f0c8
 800ea14:	0800f0d2 	.word	0x0800f0d2
 800ea18:	00000000 	.word	0x00000000
 800ea1c:	0800e76d 	.word	0x0800e76d
 800ea20:	0800f0ce 	.word	0x0800f0ce

0800ea24 <_printf_common>:
 800ea24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea28:	4616      	mov	r6, r2
 800ea2a:	4699      	mov	r9, r3
 800ea2c:	688a      	ldr	r2, [r1, #8]
 800ea2e:	690b      	ldr	r3, [r1, #16]
 800ea30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ea34:	4293      	cmp	r3, r2
 800ea36:	bfb8      	it	lt
 800ea38:	4613      	movlt	r3, r2
 800ea3a:	6033      	str	r3, [r6, #0]
 800ea3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ea40:	4607      	mov	r7, r0
 800ea42:	460c      	mov	r4, r1
 800ea44:	b10a      	cbz	r2, 800ea4a <_printf_common+0x26>
 800ea46:	3301      	adds	r3, #1
 800ea48:	6033      	str	r3, [r6, #0]
 800ea4a:	6823      	ldr	r3, [r4, #0]
 800ea4c:	0699      	lsls	r1, r3, #26
 800ea4e:	bf42      	ittt	mi
 800ea50:	6833      	ldrmi	r3, [r6, #0]
 800ea52:	3302      	addmi	r3, #2
 800ea54:	6033      	strmi	r3, [r6, #0]
 800ea56:	6825      	ldr	r5, [r4, #0]
 800ea58:	f015 0506 	ands.w	r5, r5, #6
 800ea5c:	d106      	bne.n	800ea6c <_printf_common+0x48>
 800ea5e:	f104 0a19 	add.w	sl, r4, #25
 800ea62:	68e3      	ldr	r3, [r4, #12]
 800ea64:	6832      	ldr	r2, [r6, #0]
 800ea66:	1a9b      	subs	r3, r3, r2
 800ea68:	42ab      	cmp	r3, r5
 800ea6a:	dc26      	bgt.n	800eaba <_printf_common+0x96>
 800ea6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ea70:	1e13      	subs	r3, r2, #0
 800ea72:	6822      	ldr	r2, [r4, #0]
 800ea74:	bf18      	it	ne
 800ea76:	2301      	movne	r3, #1
 800ea78:	0692      	lsls	r2, r2, #26
 800ea7a:	d42b      	bmi.n	800ead4 <_printf_common+0xb0>
 800ea7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea80:	4649      	mov	r1, r9
 800ea82:	4638      	mov	r0, r7
 800ea84:	47c0      	blx	r8
 800ea86:	3001      	adds	r0, #1
 800ea88:	d01e      	beq.n	800eac8 <_printf_common+0xa4>
 800ea8a:	6823      	ldr	r3, [r4, #0]
 800ea8c:	68e5      	ldr	r5, [r4, #12]
 800ea8e:	6832      	ldr	r2, [r6, #0]
 800ea90:	f003 0306 	and.w	r3, r3, #6
 800ea94:	2b04      	cmp	r3, #4
 800ea96:	bf08      	it	eq
 800ea98:	1aad      	subeq	r5, r5, r2
 800ea9a:	68a3      	ldr	r3, [r4, #8]
 800ea9c:	6922      	ldr	r2, [r4, #16]
 800ea9e:	bf0c      	ite	eq
 800eaa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eaa4:	2500      	movne	r5, #0
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	bfc4      	itt	gt
 800eaaa:	1a9b      	subgt	r3, r3, r2
 800eaac:	18ed      	addgt	r5, r5, r3
 800eaae:	2600      	movs	r6, #0
 800eab0:	341a      	adds	r4, #26
 800eab2:	42b5      	cmp	r5, r6
 800eab4:	d11a      	bne.n	800eaec <_printf_common+0xc8>
 800eab6:	2000      	movs	r0, #0
 800eab8:	e008      	b.n	800eacc <_printf_common+0xa8>
 800eaba:	2301      	movs	r3, #1
 800eabc:	4652      	mov	r2, sl
 800eabe:	4649      	mov	r1, r9
 800eac0:	4638      	mov	r0, r7
 800eac2:	47c0      	blx	r8
 800eac4:	3001      	adds	r0, #1
 800eac6:	d103      	bne.n	800ead0 <_printf_common+0xac>
 800eac8:	f04f 30ff 	mov.w	r0, #4294967295
 800eacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ead0:	3501      	adds	r5, #1
 800ead2:	e7c6      	b.n	800ea62 <_printf_common+0x3e>
 800ead4:	18e1      	adds	r1, r4, r3
 800ead6:	1c5a      	adds	r2, r3, #1
 800ead8:	2030      	movs	r0, #48	; 0x30
 800eada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eade:	4422      	add	r2, r4
 800eae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eae8:	3302      	adds	r3, #2
 800eaea:	e7c7      	b.n	800ea7c <_printf_common+0x58>
 800eaec:	2301      	movs	r3, #1
 800eaee:	4622      	mov	r2, r4
 800eaf0:	4649      	mov	r1, r9
 800eaf2:	4638      	mov	r0, r7
 800eaf4:	47c0      	blx	r8
 800eaf6:	3001      	adds	r0, #1
 800eaf8:	d0e6      	beq.n	800eac8 <_printf_common+0xa4>
 800eafa:	3601      	adds	r6, #1
 800eafc:	e7d9      	b.n	800eab2 <_printf_common+0x8e>
	...

0800eb00 <_printf_i>:
 800eb00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb04:	460c      	mov	r4, r1
 800eb06:	4691      	mov	r9, r2
 800eb08:	7e27      	ldrb	r7, [r4, #24]
 800eb0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eb0c:	2f78      	cmp	r7, #120	; 0x78
 800eb0e:	4680      	mov	r8, r0
 800eb10:	469a      	mov	sl, r3
 800eb12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb16:	d807      	bhi.n	800eb28 <_printf_i+0x28>
 800eb18:	2f62      	cmp	r7, #98	; 0x62
 800eb1a:	d80a      	bhi.n	800eb32 <_printf_i+0x32>
 800eb1c:	2f00      	cmp	r7, #0
 800eb1e:	f000 80d8 	beq.w	800ecd2 <_printf_i+0x1d2>
 800eb22:	2f58      	cmp	r7, #88	; 0x58
 800eb24:	f000 80a3 	beq.w	800ec6e <_printf_i+0x16e>
 800eb28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eb2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eb30:	e03a      	b.n	800eba8 <_printf_i+0xa8>
 800eb32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eb36:	2b15      	cmp	r3, #21
 800eb38:	d8f6      	bhi.n	800eb28 <_printf_i+0x28>
 800eb3a:	a001      	add	r0, pc, #4	; (adr r0, 800eb40 <_printf_i+0x40>)
 800eb3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800eb40:	0800eb99 	.word	0x0800eb99
 800eb44:	0800ebad 	.word	0x0800ebad
 800eb48:	0800eb29 	.word	0x0800eb29
 800eb4c:	0800eb29 	.word	0x0800eb29
 800eb50:	0800eb29 	.word	0x0800eb29
 800eb54:	0800eb29 	.word	0x0800eb29
 800eb58:	0800ebad 	.word	0x0800ebad
 800eb5c:	0800eb29 	.word	0x0800eb29
 800eb60:	0800eb29 	.word	0x0800eb29
 800eb64:	0800eb29 	.word	0x0800eb29
 800eb68:	0800eb29 	.word	0x0800eb29
 800eb6c:	0800ecb9 	.word	0x0800ecb9
 800eb70:	0800ebdd 	.word	0x0800ebdd
 800eb74:	0800ec9b 	.word	0x0800ec9b
 800eb78:	0800eb29 	.word	0x0800eb29
 800eb7c:	0800eb29 	.word	0x0800eb29
 800eb80:	0800ecdb 	.word	0x0800ecdb
 800eb84:	0800eb29 	.word	0x0800eb29
 800eb88:	0800ebdd 	.word	0x0800ebdd
 800eb8c:	0800eb29 	.word	0x0800eb29
 800eb90:	0800eb29 	.word	0x0800eb29
 800eb94:	0800eca3 	.word	0x0800eca3
 800eb98:	680b      	ldr	r3, [r1, #0]
 800eb9a:	1d1a      	adds	r2, r3, #4
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	600a      	str	r2, [r1, #0]
 800eba0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eba8:	2301      	movs	r3, #1
 800ebaa:	e0a3      	b.n	800ecf4 <_printf_i+0x1f4>
 800ebac:	6825      	ldr	r5, [r4, #0]
 800ebae:	6808      	ldr	r0, [r1, #0]
 800ebb0:	062e      	lsls	r6, r5, #24
 800ebb2:	f100 0304 	add.w	r3, r0, #4
 800ebb6:	d50a      	bpl.n	800ebce <_printf_i+0xce>
 800ebb8:	6805      	ldr	r5, [r0, #0]
 800ebba:	600b      	str	r3, [r1, #0]
 800ebbc:	2d00      	cmp	r5, #0
 800ebbe:	da03      	bge.n	800ebc8 <_printf_i+0xc8>
 800ebc0:	232d      	movs	r3, #45	; 0x2d
 800ebc2:	426d      	negs	r5, r5
 800ebc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebc8:	485e      	ldr	r0, [pc, #376]	; (800ed44 <_printf_i+0x244>)
 800ebca:	230a      	movs	r3, #10
 800ebcc:	e019      	b.n	800ec02 <_printf_i+0x102>
 800ebce:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ebd2:	6805      	ldr	r5, [r0, #0]
 800ebd4:	600b      	str	r3, [r1, #0]
 800ebd6:	bf18      	it	ne
 800ebd8:	b22d      	sxthne	r5, r5
 800ebda:	e7ef      	b.n	800ebbc <_printf_i+0xbc>
 800ebdc:	680b      	ldr	r3, [r1, #0]
 800ebde:	6825      	ldr	r5, [r4, #0]
 800ebe0:	1d18      	adds	r0, r3, #4
 800ebe2:	6008      	str	r0, [r1, #0]
 800ebe4:	0628      	lsls	r0, r5, #24
 800ebe6:	d501      	bpl.n	800ebec <_printf_i+0xec>
 800ebe8:	681d      	ldr	r5, [r3, #0]
 800ebea:	e002      	b.n	800ebf2 <_printf_i+0xf2>
 800ebec:	0669      	lsls	r1, r5, #25
 800ebee:	d5fb      	bpl.n	800ebe8 <_printf_i+0xe8>
 800ebf0:	881d      	ldrh	r5, [r3, #0]
 800ebf2:	4854      	ldr	r0, [pc, #336]	; (800ed44 <_printf_i+0x244>)
 800ebf4:	2f6f      	cmp	r7, #111	; 0x6f
 800ebf6:	bf0c      	ite	eq
 800ebf8:	2308      	moveq	r3, #8
 800ebfa:	230a      	movne	r3, #10
 800ebfc:	2100      	movs	r1, #0
 800ebfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec02:	6866      	ldr	r6, [r4, #4]
 800ec04:	60a6      	str	r6, [r4, #8]
 800ec06:	2e00      	cmp	r6, #0
 800ec08:	bfa2      	ittt	ge
 800ec0a:	6821      	ldrge	r1, [r4, #0]
 800ec0c:	f021 0104 	bicge.w	r1, r1, #4
 800ec10:	6021      	strge	r1, [r4, #0]
 800ec12:	b90d      	cbnz	r5, 800ec18 <_printf_i+0x118>
 800ec14:	2e00      	cmp	r6, #0
 800ec16:	d04d      	beq.n	800ecb4 <_printf_i+0x1b4>
 800ec18:	4616      	mov	r6, r2
 800ec1a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ec1e:	fb03 5711 	mls	r7, r3, r1, r5
 800ec22:	5dc7      	ldrb	r7, [r0, r7]
 800ec24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ec28:	462f      	mov	r7, r5
 800ec2a:	42bb      	cmp	r3, r7
 800ec2c:	460d      	mov	r5, r1
 800ec2e:	d9f4      	bls.n	800ec1a <_printf_i+0x11a>
 800ec30:	2b08      	cmp	r3, #8
 800ec32:	d10b      	bne.n	800ec4c <_printf_i+0x14c>
 800ec34:	6823      	ldr	r3, [r4, #0]
 800ec36:	07df      	lsls	r7, r3, #31
 800ec38:	d508      	bpl.n	800ec4c <_printf_i+0x14c>
 800ec3a:	6923      	ldr	r3, [r4, #16]
 800ec3c:	6861      	ldr	r1, [r4, #4]
 800ec3e:	4299      	cmp	r1, r3
 800ec40:	bfde      	ittt	le
 800ec42:	2330      	movle	r3, #48	; 0x30
 800ec44:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ec48:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ec4c:	1b92      	subs	r2, r2, r6
 800ec4e:	6122      	str	r2, [r4, #16]
 800ec50:	f8cd a000 	str.w	sl, [sp]
 800ec54:	464b      	mov	r3, r9
 800ec56:	aa03      	add	r2, sp, #12
 800ec58:	4621      	mov	r1, r4
 800ec5a:	4640      	mov	r0, r8
 800ec5c:	f7ff fee2 	bl	800ea24 <_printf_common>
 800ec60:	3001      	adds	r0, #1
 800ec62:	d14c      	bne.n	800ecfe <_printf_i+0x1fe>
 800ec64:	f04f 30ff 	mov.w	r0, #4294967295
 800ec68:	b004      	add	sp, #16
 800ec6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec6e:	4835      	ldr	r0, [pc, #212]	; (800ed44 <_printf_i+0x244>)
 800ec70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ec74:	6823      	ldr	r3, [r4, #0]
 800ec76:	680e      	ldr	r6, [r1, #0]
 800ec78:	061f      	lsls	r7, r3, #24
 800ec7a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ec7e:	600e      	str	r6, [r1, #0]
 800ec80:	d514      	bpl.n	800ecac <_printf_i+0x1ac>
 800ec82:	07d9      	lsls	r1, r3, #31
 800ec84:	bf44      	itt	mi
 800ec86:	f043 0320 	orrmi.w	r3, r3, #32
 800ec8a:	6023      	strmi	r3, [r4, #0]
 800ec8c:	b91d      	cbnz	r5, 800ec96 <_printf_i+0x196>
 800ec8e:	6823      	ldr	r3, [r4, #0]
 800ec90:	f023 0320 	bic.w	r3, r3, #32
 800ec94:	6023      	str	r3, [r4, #0]
 800ec96:	2310      	movs	r3, #16
 800ec98:	e7b0      	b.n	800ebfc <_printf_i+0xfc>
 800ec9a:	6823      	ldr	r3, [r4, #0]
 800ec9c:	f043 0320 	orr.w	r3, r3, #32
 800eca0:	6023      	str	r3, [r4, #0]
 800eca2:	2378      	movs	r3, #120	; 0x78
 800eca4:	4828      	ldr	r0, [pc, #160]	; (800ed48 <_printf_i+0x248>)
 800eca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ecaa:	e7e3      	b.n	800ec74 <_printf_i+0x174>
 800ecac:	065e      	lsls	r6, r3, #25
 800ecae:	bf48      	it	mi
 800ecb0:	b2ad      	uxthmi	r5, r5
 800ecb2:	e7e6      	b.n	800ec82 <_printf_i+0x182>
 800ecb4:	4616      	mov	r6, r2
 800ecb6:	e7bb      	b.n	800ec30 <_printf_i+0x130>
 800ecb8:	680b      	ldr	r3, [r1, #0]
 800ecba:	6826      	ldr	r6, [r4, #0]
 800ecbc:	6960      	ldr	r0, [r4, #20]
 800ecbe:	1d1d      	adds	r5, r3, #4
 800ecc0:	600d      	str	r5, [r1, #0]
 800ecc2:	0635      	lsls	r5, r6, #24
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	d501      	bpl.n	800eccc <_printf_i+0x1cc>
 800ecc8:	6018      	str	r0, [r3, #0]
 800ecca:	e002      	b.n	800ecd2 <_printf_i+0x1d2>
 800eccc:	0671      	lsls	r1, r6, #25
 800ecce:	d5fb      	bpl.n	800ecc8 <_printf_i+0x1c8>
 800ecd0:	8018      	strh	r0, [r3, #0]
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	6123      	str	r3, [r4, #16]
 800ecd6:	4616      	mov	r6, r2
 800ecd8:	e7ba      	b.n	800ec50 <_printf_i+0x150>
 800ecda:	680b      	ldr	r3, [r1, #0]
 800ecdc:	1d1a      	adds	r2, r3, #4
 800ecde:	600a      	str	r2, [r1, #0]
 800ece0:	681e      	ldr	r6, [r3, #0]
 800ece2:	6862      	ldr	r2, [r4, #4]
 800ece4:	2100      	movs	r1, #0
 800ece6:	4630      	mov	r0, r6
 800ece8:	f7f1 fafa 	bl	80002e0 <memchr>
 800ecec:	b108      	cbz	r0, 800ecf2 <_printf_i+0x1f2>
 800ecee:	1b80      	subs	r0, r0, r6
 800ecf0:	6060      	str	r0, [r4, #4]
 800ecf2:	6863      	ldr	r3, [r4, #4]
 800ecf4:	6123      	str	r3, [r4, #16]
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ecfc:	e7a8      	b.n	800ec50 <_printf_i+0x150>
 800ecfe:	6923      	ldr	r3, [r4, #16]
 800ed00:	4632      	mov	r2, r6
 800ed02:	4649      	mov	r1, r9
 800ed04:	4640      	mov	r0, r8
 800ed06:	47d0      	blx	sl
 800ed08:	3001      	adds	r0, #1
 800ed0a:	d0ab      	beq.n	800ec64 <_printf_i+0x164>
 800ed0c:	6823      	ldr	r3, [r4, #0]
 800ed0e:	079b      	lsls	r3, r3, #30
 800ed10:	d413      	bmi.n	800ed3a <_printf_i+0x23a>
 800ed12:	68e0      	ldr	r0, [r4, #12]
 800ed14:	9b03      	ldr	r3, [sp, #12]
 800ed16:	4298      	cmp	r0, r3
 800ed18:	bfb8      	it	lt
 800ed1a:	4618      	movlt	r0, r3
 800ed1c:	e7a4      	b.n	800ec68 <_printf_i+0x168>
 800ed1e:	2301      	movs	r3, #1
 800ed20:	4632      	mov	r2, r6
 800ed22:	4649      	mov	r1, r9
 800ed24:	4640      	mov	r0, r8
 800ed26:	47d0      	blx	sl
 800ed28:	3001      	adds	r0, #1
 800ed2a:	d09b      	beq.n	800ec64 <_printf_i+0x164>
 800ed2c:	3501      	adds	r5, #1
 800ed2e:	68e3      	ldr	r3, [r4, #12]
 800ed30:	9903      	ldr	r1, [sp, #12]
 800ed32:	1a5b      	subs	r3, r3, r1
 800ed34:	42ab      	cmp	r3, r5
 800ed36:	dcf2      	bgt.n	800ed1e <_printf_i+0x21e>
 800ed38:	e7eb      	b.n	800ed12 <_printf_i+0x212>
 800ed3a:	2500      	movs	r5, #0
 800ed3c:	f104 0619 	add.w	r6, r4, #25
 800ed40:	e7f5      	b.n	800ed2e <_printf_i+0x22e>
 800ed42:	bf00      	nop
 800ed44:	0800f0d9 	.word	0x0800f0d9
 800ed48:	0800f0ea 	.word	0x0800f0ea

0800ed4c <memmove>:
 800ed4c:	4288      	cmp	r0, r1
 800ed4e:	b510      	push	{r4, lr}
 800ed50:	eb01 0402 	add.w	r4, r1, r2
 800ed54:	d902      	bls.n	800ed5c <memmove+0x10>
 800ed56:	4284      	cmp	r4, r0
 800ed58:	4623      	mov	r3, r4
 800ed5a:	d807      	bhi.n	800ed6c <memmove+0x20>
 800ed5c:	1e43      	subs	r3, r0, #1
 800ed5e:	42a1      	cmp	r1, r4
 800ed60:	d008      	beq.n	800ed74 <memmove+0x28>
 800ed62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed6a:	e7f8      	b.n	800ed5e <memmove+0x12>
 800ed6c:	4402      	add	r2, r0
 800ed6e:	4601      	mov	r1, r0
 800ed70:	428a      	cmp	r2, r1
 800ed72:	d100      	bne.n	800ed76 <memmove+0x2a>
 800ed74:	bd10      	pop	{r4, pc}
 800ed76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed7e:	e7f7      	b.n	800ed70 <memmove+0x24>

0800ed80 <_free_r>:
 800ed80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed82:	2900      	cmp	r1, #0
 800ed84:	d048      	beq.n	800ee18 <_free_r+0x98>
 800ed86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed8a:	9001      	str	r0, [sp, #4]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	f1a1 0404 	sub.w	r4, r1, #4
 800ed92:	bfb8      	it	lt
 800ed94:	18e4      	addlt	r4, r4, r3
 800ed96:	f000 f8d3 	bl	800ef40 <__malloc_lock>
 800ed9a:	4a20      	ldr	r2, [pc, #128]	; (800ee1c <_free_r+0x9c>)
 800ed9c:	9801      	ldr	r0, [sp, #4]
 800ed9e:	6813      	ldr	r3, [r2, #0]
 800eda0:	4615      	mov	r5, r2
 800eda2:	b933      	cbnz	r3, 800edb2 <_free_r+0x32>
 800eda4:	6063      	str	r3, [r4, #4]
 800eda6:	6014      	str	r4, [r2, #0]
 800eda8:	b003      	add	sp, #12
 800edaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800edae:	f000 b8cd 	b.w	800ef4c <__malloc_unlock>
 800edb2:	42a3      	cmp	r3, r4
 800edb4:	d90b      	bls.n	800edce <_free_r+0x4e>
 800edb6:	6821      	ldr	r1, [r4, #0]
 800edb8:	1862      	adds	r2, r4, r1
 800edba:	4293      	cmp	r3, r2
 800edbc:	bf04      	itt	eq
 800edbe:	681a      	ldreq	r2, [r3, #0]
 800edc0:	685b      	ldreq	r3, [r3, #4]
 800edc2:	6063      	str	r3, [r4, #4]
 800edc4:	bf04      	itt	eq
 800edc6:	1852      	addeq	r2, r2, r1
 800edc8:	6022      	streq	r2, [r4, #0]
 800edca:	602c      	str	r4, [r5, #0]
 800edcc:	e7ec      	b.n	800eda8 <_free_r+0x28>
 800edce:	461a      	mov	r2, r3
 800edd0:	685b      	ldr	r3, [r3, #4]
 800edd2:	b10b      	cbz	r3, 800edd8 <_free_r+0x58>
 800edd4:	42a3      	cmp	r3, r4
 800edd6:	d9fa      	bls.n	800edce <_free_r+0x4e>
 800edd8:	6811      	ldr	r1, [r2, #0]
 800edda:	1855      	adds	r5, r2, r1
 800eddc:	42a5      	cmp	r5, r4
 800edde:	d10b      	bne.n	800edf8 <_free_r+0x78>
 800ede0:	6824      	ldr	r4, [r4, #0]
 800ede2:	4421      	add	r1, r4
 800ede4:	1854      	adds	r4, r2, r1
 800ede6:	42a3      	cmp	r3, r4
 800ede8:	6011      	str	r1, [r2, #0]
 800edea:	d1dd      	bne.n	800eda8 <_free_r+0x28>
 800edec:	681c      	ldr	r4, [r3, #0]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	6053      	str	r3, [r2, #4]
 800edf2:	4421      	add	r1, r4
 800edf4:	6011      	str	r1, [r2, #0]
 800edf6:	e7d7      	b.n	800eda8 <_free_r+0x28>
 800edf8:	d902      	bls.n	800ee00 <_free_r+0x80>
 800edfa:	230c      	movs	r3, #12
 800edfc:	6003      	str	r3, [r0, #0]
 800edfe:	e7d3      	b.n	800eda8 <_free_r+0x28>
 800ee00:	6825      	ldr	r5, [r4, #0]
 800ee02:	1961      	adds	r1, r4, r5
 800ee04:	428b      	cmp	r3, r1
 800ee06:	bf04      	itt	eq
 800ee08:	6819      	ldreq	r1, [r3, #0]
 800ee0a:	685b      	ldreq	r3, [r3, #4]
 800ee0c:	6063      	str	r3, [r4, #4]
 800ee0e:	bf04      	itt	eq
 800ee10:	1949      	addeq	r1, r1, r5
 800ee12:	6021      	streq	r1, [r4, #0]
 800ee14:	6054      	str	r4, [r2, #4]
 800ee16:	e7c7      	b.n	800eda8 <_free_r+0x28>
 800ee18:	b003      	add	sp, #12
 800ee1a:	bd30      	pop	{r4, r5, pc}
 800ee1c:	20004bb0 	.word	0x20004bb0

0800ee20 <_malloc_r>:
 800ee20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee22:	1ccd      	adds	r5, r1, #3
 800ee24:	f025 0503 	bic.w	r5, r5, #3
 800ee28:	3508      	adds	r5, #8
 800ee2a:	2d0c      	cmp	r5, #12
 800ee2c:	bf38      	it	cc
 800ee2e:	250c      	movcc	r5, #12
 800ee30:	2d00      	cmp	r5, #0
 800ee32:	4606      	mov	r6, r0
 800ee34:	db01      	blt.n	800ee3a <_malloc_r+0x1a>
 800ee36:	42a9      	cmp	r1, r5
 800ee38:	d903      	bls.n	800ee42 <_malloc_r+0x22>
 800ee3a:	230c      	movs	r3, #12
 800ee3c:	6033      	str	r3, [r6, #0]
 800ee3e:	2000      	movs	r0, #0
 800ee40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee42:	f000 f87d 	bl	800ef40 <__malloc_lock>
 800ee46:	4921      	ldr	r1, [pc, #132]	; (800eecc <_malloc_r+0xac>)
 800ee48:	680a      	ldr	r2, [r1, #0]
 800ee4a:	4614      	mov	r4, r2
 800ee4c:	b99c      	cbnz	r4, 800ee76 <_malloc_r+0x56>
 800ee4e:	4f20      	ldr	r7, [pc, #128]	; (800eed0 <_malloc_r+0xb0>)
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	b923      	cbnz	r3, 800ee5e <_malloc_r+0x3e>
 800ee54:	4621      	mov	r1, r4
 800ee56:	4630      	mov	r0, r6
 800ee58:	f000 f862 	bl	800ef20 <_sbrk_r>
 800ee5c:	6038      	str	r0, [r7, #0]
 800ee5e:	4629      	mov	r1, r5
 800ee60:	4630      	mov	r0, r6
 800ee62:	f000 f85d 	bl	800ef20 <_sbrk_r>
 800ee66:	1c43      	adds	r3, r0, #1
 800ee68:	d123      	bne.n	800eeb2 <_malloc_r+0x92>
 800ee6a:	230c      	movs	r3, #12
 800ee6c:	6033      	str	r3, [r6, #0]
 800ee6e:	4630      	mov	r0, r6
 800ee70:	f000 f86c 	bl	800ef4c <__malloc_unlock>
 800ee74:	e7e3      	b.n	800ee3e <_malloc_r+0x1e>
 800ee76:	6823      	ldr	r3, [r4, #0]
 800ee78:	1b5b      	subs	r3, r3, r5
 800ee7a:	d417      	bmi.n	800eeac <_malloc_r+0x8c>
 800ee7c:	2b0b      	cmp	r3, #11
 800ee7e:	d903      	bls.n	800ee88 <_malloc_r+0x68>
 800ee80:	6023      	str	r3, [r4, #0]
 800ee82:	441c      	add	r4, r3
 800ee84:	6025      	str	r5, [r4, #0]
 800ee86:	e004      	b.n	800ee92 <_malloc_r+0x72>
 800ee88:	6863      	ldr	r3, [r4, #4]
 800ee8a:	42a2      	cmp	r2, r4
 800ee8c:	bf0c      	ite	eq
 800ee8e:	600b      	streq	r3, [r1, #0]
 800ee90:	6053      	strne	r3, [r2, #4]
 800ee92:	4630      	mov	r0, r6
 800ee94:	f000 f85a 	bl	800ef4c <__malloc_unlock>
 800ee98:	f104 000b 	add.w	r0, r4, #11
 800ee9c:	1d23      	adds	r3, r4, #4
 800ee9e:	f020 0007 	bic.w	r0, r0, #7
 800eea2:	1ac2      	subs	r2, r0, r3
 800eea4:	d0cc      	beq.n	800ee40 <_malloc_r+0x20>
 800eea6:	1a1b      	subs	r3, r3, r0
 800eea8:	50a3      	str	r3, [r4, r2]
 800eeaa:	e7c9      	b.n	800ee40 <_malloc_r+0x20>
 800eeac:	4622      	mov	r2, r4
 800eeae:	6864      	ldr	r4, [r4, #4]
 800eeb0:	e7cc      	b.n	800ee4c <_malloc_r+0x2c>
 800eeb2:	1cc4      	adds	r4, r0, #3
 800eeb4:	f024 0403 	bic.w	r4, r4, #3
 800eeb8:	42a0      	cmp	r0, r4
 800eeba:	d0e3      	beq.n	800ee84 <_malloc_r+0x64>
 800eebc:	1a21      	subs	r1, r4, r0
 800eebe:	4630      	mov	r0, r6
 800eec0:	f000 f82e 	bl	800ef20 <_sbrk_r>
 800eec4:	3001      	adds	r0, #1
 800eec6:	d1dd      	bne.n	800ee84 <_malloc_r+0x64>
 800eec8:	e7cf      	b.n	800ee6a <_malloc_r+0x4a>
 800eeca:	bf00      	nop
 800eecc:	20004bb0 	.word	0x20004bb0
 800eed0:	20004bb4 	.word	0x20004bb4

0800eed4 <_realloc_r>:
 800eed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eed6:	4607      	mov	r7, r0
 800eed8:	4614      	mov	r4, r2
 800eeda:	460e      	mov	r6, r1
 800eedc:	b921      	cbnz	r1, 800eee8 <_realloc_r+0x14>
 800eede:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eee2:	4611      	mov	r1, r2
 800eee4:	f7ff bf9c 	b.w	800ee20 <_malloc_r>
 800eee8:	b922      	cbnz	r2, 800eef4 <_realloc_r+0x20>
 800eeea:	f7ff ff49 	bl	800ed80 <_free_r>
 800eeee:	4625      	mov	r5, r4
 800eef0:	4628      	mov	r0, r5
 800eef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eef4:	f000 f830 	bl	800ef58 <_malloc_usable_size_r>
 800eef8:	42a0      	cmp	r0, r4
 800eefa:	d20f      	bcs.n	800ef1c <_realloc_r+0x48>
 800eefc:	4621      	mov	r1, r4
 800eefe:	4638      	mov	r0, r7
 800ef00:	f7ff ff8e 	bl	800ee20 <_malloc_r>
 800ef04:	4605      	mov	r5, r0
 800ef06:	2800      	cmp	r0, #0
 800ef08:	d0f2      	beq.n	800eef0 <_realloc_r+0x1c>
 800ef0a:	4631      	mov	r1, r6
 800ef0c:	4622      	mov	r2, r4
 800ef0e:	f7ff fbf7 	bl	800e700 <memcpy>
 800ef12:	4631      	mov	r1, r6
 800ef14:	4638      	mov	r0, r7
 800ef16:	f7ff ff33 	bl	800ed80 <_free_r>
 800ef1a:	e7e9      	b.n	800eef0 <_realloc_r+0x1c>
 800ef1c:	4635      	mov	r5, r6
 800ef1e:	e7e7      	b.n	800eef0 <_realloc_r+0x1c>

0800ef20 <_sbrk_r>:
 800ef20:	b538      	push	{r3, r4, r5, lr}
 800ef22:	4d06      	ldr	r5, [pc, #24]	; (800ef3c <_sbrk_r+0x1c>)
 800ef24:	2300      	movs	r3, #0
 800ef26:	4604      	mov	r4, r0
 800ef28:	4608      	mov	r0, r1
 800ef2a:	602b      	str	r3, [r5, #0]
 800ef2c:	f7f4 fb14 	bl	8003558 <_sbrk>
 800ef30:	1c43      	adds	r3, r0, #1
 800ef32:	d102      	bne.n	800ef3a <_sbrk_r+0x1a>
 800ef34:	682b      	ldr	r3, [r5, #0]
 800ef36:	b103      	cbz	r3, 800ef3a <_sbrk_r+0x1a>
 800ef38:	6023      	str	r3, [r4, #0]
 800ef3a:	bd38      	pop	{r3, r4, r5, pc}
 800ef3c:	20004f40 	.word	0x20004f40

0800ef40 <__malloc_lock>:
 800ef40:	4801      	ldr	r0, [pc, #4]	; (800ef48 <__malloc_lock+0x8>)
 800ef42:	f000 b811 	b.w	800ef68 <__retarget_lock_acquire_recursive>
 800ef46:	bf00      	nop
 800ef48:	20004f48 	.word	0x20004f48

0800ef4c <__malloc_unlock>:
 800ef4c:	4801      	ldr	r0, [pc, #4]	; (800ef54 <__malloc_unlock+0x8>)
 800ef4e:	f000 b80c 	b.w	800ef6a <__retarget_lock_release_recursive>
 800ef52:	bf00      	nop
 800ef54:	20004f48 	.word	0x20004f48

0800ef58 <_malloc_usable_size_r>:
 800ef58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef5c:	1f18      	subs	r0, r3, #4
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	bfbc      	itt	lt
 800ef62:	580b      	ldrlt	r3, [r1, r0]
 800ef64:	18c0      	addlt	r0, r0, r3
 800ef66:	4770      	bx	lr

0800ef68 <__retarget_lock_acquire_recursive>:
 800ef68:	4770      	bx	lr

0800ef6a <__retarget_lock_release_recursive>:
 800ef6a:	4770      	bx	lr

0800ef6c <_init>:
 800ef6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef6e:	bf00      	nop
 800ef70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef72:	bc08      	pop	{r3}
 800ef74:	469e      	mov	lr, r3
 800ef76:	4770      	bx	lr

0800ef78 <_fini>:
 800ef78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef7a:	bf00      	nop
 800ef7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef7e:	bc08      	pop	{r3}
 800ef80:	469e      	mov	lr, r3
 800ef82:	4770      	bx	lr
